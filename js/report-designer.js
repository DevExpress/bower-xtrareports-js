/*! DevExpress HTML/JS Designer - v16.2.11 - 2017-11-07
* http://www.devexpress.com
* Copyright (c) 2017 Developer Express Inc; Licensed Commercial */

var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Diagram;
        (function (Diagram) {
            Diagram.name = { propertyName: "name", modelName: "@Name", displayName: "Name", editor: DevExpress.JS.Widgets.editorTemplates.text, validationRules: Designer.nameValidationRules };
            Diagram.text = { propertyName: "text", modelName: "@Text", displayName: "Text", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Diagram.size = { propertyName: "size", modelName: "@Size", defaultVal: "100,50", from: Designer.Size.fromString, displayName: "Size", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Diagram.location = { propertyName: "location", modelName: "@Location", from: Designer.Point.fromString, displayName: "Location", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Diagram.sizeLocation = [Diagram.size, Diagram.location];
            Diagram.unknownSerializationsInfo = [Diagram.name].concat(Diagram.sizeLocation);
        })(Diagram = Designer.Diagram || (Designer.Diagram = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="metadata.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Diagram;
        (function (Diagram) {
            var DiagramElementBaseViewModel = (function (_super) {
                __extends(DiagramElementBaseViewModel, _super);
                function DiagramElementBaseViewModel(control, parent, serializer) {
                    _super.call(this, control, parent, serializer);
                }
                DiagramElementBaseViewModel.prototype.getControlFactory = function () {
                    return Diagram.controlsFactory;
                };
                return DiagramElementBaseViewModel;
            })(Designer.ElementViewModel);
            Diagram.DiagramElementBaseViewModel = DiagramElementBaseViewModel;
            var DiagramElementBaseSurface = (function (_super) {
                __extends(DiagramElementBaseSurface, _super);
                function DiagramElementBaseSurface(control, context, unitProperties) {
                    _super.call(this, control, context, $.extend({}, DiagramElementBaseSurface._unitProperties, unitProperties));
                    this.template = "dx-diagram-element";
                    this.selectiontemplate = "dx-diagram-element-selection";
                    this.contenttemplate = "dx-diagram-element-content";
                    this.margin = ko.observable(0);
                }
                DiagramElementBaseSurface._unitProperties = {
                    _height: function (o) {
                        return o.size.height;
                    },
                    _width: function (o) {
                        return o.size.width;
                    },
                    _x: function (o) {
                        return o.location.x;
                    },
                    _y: function (o) {
                        return o.location.y;
                    }
                };
                return DiagramElementBaseSurface;
            })(Designer.SurfaceElementBase);
            Diagram.DiagramElementBaseSurface = DiagramElementBaseSurface;
            Diagram.diagramElementSerializationInfo = [Diagram.size, Diagram.location, Diagram.name, Diagram.text, { propertyName: "type", modelName: "@Type" }];
            var DiagramElementViewModel = (function (_super) {
                __extends(DiagramElementViewModel, _super);
                function DiagramElementViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, $.extend({ "@ControlType": "DiagramElement" }, control), parent, serializer);
                    this.connectingPoints = DevExpress.JS.Utils.deserializeArray(control && control.ConnectingPoints || [], function (item) { return new ConnectingPointViewModel(item, _this, serializer); });
                    if (this.text() === undefined) {
                        this.text(this.name());
                    }
                }
                return DiagramElementViewModel;
            })(DiagramElementBaseViewModel);
            Diagram.DiagramElementViewModel = DiagramElementViewModel;
            var DiagramElementSurface = (function (_super) {
                __extends(DiagramElementSurface, _super);
                function DiagramElementSurface(control, context) {
                    _super.call(this, control, context, null);
                    this.contenttemplate = "dxdd-element-content-with-connecting-points";
                }
                DiagramElementSurface.prototype._getChildrenHolderName = function () { return "connectingPoints"; };
                return DiagramElementSurface;
            })(DiagramElementBaseSurface);
            Diagram.DiagramElementSurface = DiagramElementSurface;
            var ConnectingPointViewModel = (function (_super) {
                __extends(ConnectingPointViewModel, _super);
                function ConnectingPointViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, $.extend({ "@ControlType": "ConnectingPoint" }, control), parent, serializer);
                    this.side = ko.pureComputed(function () {
                        if (_this.percentOffsetY() >= _this.percentOffsetX()) {
                            if (_this.percentOffsetY() > 1 - _this.percentOffsetX()) {
                                return Diagram.PointSide.South;
                            }
                            else {
                                return Diagram.PointSide.West;
                            }
                        }
                        else {
                            if (_this.percentOffsetY() > 1 - _this.percentOffsetX()) {
                                return Diagram.PointSide.East;
                            }
                            else {
                                return Diagram.PointSide.North;
                            }
                        }
                    });
                    this.size = new Designer.Size(7, 7);
                    this.location = new Designer.Point(0, 0);
                    this.location.x = ko.pureComputed(function () {
                        var parentModel = _this.parentModel();
                        return parentModel.location.x() + parentModel.size.width() * _this.percentOffsetX();
                    });
                    this.location.y = ko.pureComputed(function () {
                        var parentModel = _this.parentModel();
                        return parentModel.location.y() + parentModel.size.height() * _this.percentOffsetY();
                    });
                }
                return ConnectingPointViewModel;
            })(DiagramElementBaseViewModel);
            Diagram.ConnectingPointViewModel = ConnectingPointViewModel;
            Diagram.connectingPointSerializationInfo = [
                { propertyName: "percentOffsetX", modelName: "@PercentOffsetX", defaultVal: 0.5, from: Designer.floatFromModel },
                { propertyName: "percentOffsetY", modelName: "@PercentOffsetY", defaultVal: 0.5, from: Designer.floatFromModel }
            ];
            var ConnectingPointSurface = (function (_super) {
                __extends(ConnectingPointSurface, _super);
                function ConnectingPointSurface(control, context) {
                    _super.call(this, control, context, ConnectingPointSurface._unitProperties);
                    this.template = "dxdd-connecting-point";
                    this.selectiontemplate = "dxdd-connection-point-selection";
                    this.contenttemplate = "";
                }
                ConnectingPointSurface._unitProperties = {
                    _x: function (o) {
                        return ko.pureComputed(function () { return o.location.x() - o.parentModel().location.x(); });
                    },
                    _y: function (o) {
                        return ko.pureComputed(function () { return o.location.y() - o.parentModel().location.y(); });
                    }
                };
                return ConnectingPointSurface;
            })(DiagramElementBaseSurface);
            Diagram.ConnectingPointSurface = ConnectingPointSurface;
        })(Diagram = Designer.Diagram || (Designer.Diagram = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="diagramelement.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Diagram;
        (function (Diagram) {
            var ConnectionPointViewModel = (function (_super) {
                __extends(ConnectionPointViewModel, _super);
                function ConnectionPointViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, $.extend(control, { "@ControlType": "ConnectionPoint" }), parent, serializer);
                    var _x = this.location.x, _y = this.location.y;
                    this.location.x = ko.pureComputed({
                        read: function () {
                            return _this.connectingPoint() && _this.connectingPoint().location.x() || _x();
                        },
                        write: function (value) {
                            _this.connectingPoint(null);
                            _x(value);
                        }
                    });
                    this.location.y = ko.pureComputed({
                        read: function () {
                            return _this.connectingPoint() && _this.connectingPoint().location.y() || _y();
                        },
                        write: function (value) {
                            _this.connectingPoint(null);
                            _y(value);
                        }
                    });
                }
                return ConnectionPointViewModel;
            })(Diagram.DiagramElementBaseViewModel);
            Diagram.ConnectionPointViewModel = ConnectionPointViewModel;
            Diagram.connectionPointSerializationInfo = [
                Diagram.location,
                { propertyName: "connectingPoint", modelName: "@ConnectingPoint", link: true }
            ];
            var ConnectionPointSurface = (function (_super) {
                __extends(ConnectionPointSurface, _super);
                function ConnectionPointSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, ConnectionPointSurface._unitProperties);
                    this.template = "dx-diagram-connection-point";
                    this.selectiontemplate = "dx-diagram-connection-point";
                    this.relativeX = ko.pureComputed(function () {
                        return _this.rect().left - _this.parent.rect().left;
                    });
                    this.relativeY = ko.pureComputed(function () {
                        return _this.rect().top - _this.parent.rect().top;
                    });
                }
                ConnectionPointSurface.prototype.container = function () {
                    return this.getRoot();
                };
                ConnectionPointSurface._unitProperties = {
                    _x: function (o) {
                        return o.location.x;
                    },
                    _y: function (o) {
                        return o.location.y;
                    }
                };
                return ConnectionPointSurface;
            })(Designer.SurfaceElementBase);
            Diagram.ConnectionPointSurface = ConnectionPointSurface;
            var ConnectorViewModel = (function (_super) {
                __extends(ConnectorViewModel, _super);
                function ConnectorViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, $.extend({ "@ControlType": "Connector" }, control), parent, serializer);
                    this.startPoint(this.startPoint() || new ConnectionPointViewModel({ "@Location": "0, 0" }, this, serializer));
                    this.endPoint(this.endPoint() || new ConnectionPointViewModel({ "@Location": "150, 75" }, this, serializer));
                    this.location = new Designer.Point(0, 0);
                    this.location.x = ko.pureComputed({
                        read: function () {
                            return _this.getX();
                        },
                        write: function (value) {
                            var oldValue = _this.startPoint().location.x() < _this.endPoint().location.x() ? _this.startPoint().location.x() : _this.endPoint().location.x();
                            var delta = value - oldValue;
                            _this.startPoint().location.x(_this.startPoint().location.x() + delta);
                            _this.endPoint().location.x(_this.endPoint().location.x() + delta);
                        }
                    });
                    this.location.y = ko.pureComputed({
                        read: function () {
                            return _this.getY();
                        },
                        write: function (value) {
                            var oldValue = _this.startPoint().location.y() < _this.endPoint().location.y() ? _this.startPoint().location.y() : _this.endPoint().location.y();
                            var delta = value - oldValue;
                            _this.startPoint().location.y(_this.startPoint().location.y() + delta);
                            _this.endPoint().location.y(_this.endPoint().location.y() + delta);
                        }
                    });
                    this.size = new Designer.Size(0, 0);
                    this.size.width = ko.pureComputed({
                        read: function () {
                            return _this.getWidth();
                        },
                        write: function (value) {
                            if (_this.startPoint().location.x() < _this.endPoint().location.x()) {
                                _this.endPoint().location.x(_this.startPoint().location.x() + value);
                            }
                            else {
                                _this.startPoint().location.x(_this.endPoint().location.x() + value);
                            }
                        }
                    });
                    this.size.height = ko.pureComputed({
                        read: function () {
                            return _this.getHeight();
                        },
                        write: function (value) {
                            if (_this.startPoint().location.y() < _this.endPoint().location.y()) {
                                _this.endPoint().location.y(_this.startPoint().location.y() + value);
                            }
                            else {
                                _this.startPoint().location.y(_this.endPoint().location.y() + value);
                            }
                        }
                    });
                }
                ConnectorViewModel.prototype.getX = function () {
                    return this.startPoint().location.x() < this.endPoint().location.x() ? this.startPoint().location.x() : this.endPoint().location.x();
                };
                ConnectorViewModel.prototype.getY = function () {
                    return this.startPoint().location.y() < this.endPoint().location.y() ? this.startPoint().location.y() : this.endPoint().location.y();
                };
                ConnectorViewModel.prototype.getWidth = function () {
                    return Math.abs(this.startPoint().location.x() - this.endPoint().location.x()) || ConnectorViewModel.MIN_LINE_THICKNESS;
                };
                ConnectorViewModel.prototype.getHeight = function () {
                    return Math.abs(this.startPoint().location.y() - this.endPoint().location.y()) || ConnectorViewModel.MIN_LINE_THICKNESS;
                };
                ConnectorViewModel.MIN_LINE_THICKNESS = 3;
                return ConnectorViewModel;
            })(Diagram.DiagramElementBaseViewModel);
            Diagram.ConnectorViewModel = ConnectorViewModel;
            var ConnectorSurface = (function (_super) {
                __extends(ConnectorSurface, _super);
                function ConnectorSurface(control, context) {
                    _super.call(this, control, context, null);
                    this.template = "dxdd-connector";
                    this.selectiontemplate = "dxdd-connector-selection";
                    this.startPoint = ko.pureComputed(function () {
                        return new ConnectionPointSurface(control.startPoint(), context);
                    });
                    this.endPoint = ko.pureComputed(function () {
                        return new ConnectionPointSurface(control.endPoint(), context);
                    });
                }
                return ConnectorSurface;
            })(Diagram.DiagramElementBaseSurface);
            Diagram.ConnectorSurface = ConnectorSurface;
            (function (PointSide) {
                PointSide[PointSide["East"] = 0] = "East";
                PointSide[PointSide["South"] = 1] = "South";
                PointSide[PointSide["North"] = 2] = "North";
                PointSide[PointSide["West"] = 3] = "West";
            })(Diagram.PointSide || (Diagram.PointSide = {}));
            var PointSide = Diagram.PointSide;
            function determineConnectingPoints(startObject, endObject) {
                var result = { start: null, end: null };
                if (endObject.leftConnectionPoint.location.x() > startObject.rightConnectionPoint.location.x() + Diagram.RoutedConnectorViewModel.GRID_SIZE * 2) {
                    result.start = startObject.rightConnectionPoint;
                    result.end = endObject.leftConnectionPoint;
                }
                else if (startObject.leftConnectionPoint.location.x() > endObject.rightConnectionPoint.location.x() + Diagram.RoutedConnectorViewModel.GRID_SIZE * 2) {
                    result.start = startObject.leftConnectionPoint;
                    result.end = endObject.rightConnectionPoint;
                }
                else {
                    var startCenter = (startObject.rightConnectionPoint.location.x() + startObject.rightConnectionPoint.location.x()) / 2;
                    var endCenter = (endObject.rightConnectionPoint.location.x() + endObject.rightConnectionPoint.location.x()) / 2;
                    if (startCenter > endCenter) {
                        result.start = startObject.rightConnectionPoint;
                        result.end = endObject.rightConnectionPoint;
                    }
                    else {
                        result.start = startObject.leftConnectionPoint;
                        result.end = endObject.leftConnectionPoint;
                    }
                }
                return result;
            }
            Diagram.determineConnectingPoints = determineConnectingPoints;
            var RoutedConnectorViewModel = (function (_super) {
                __extends(RoutedConnectorViewModel, _super);
                function RoutedConnectorViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, $.extend({ "@ControlType": "RoutedConnector" }, control), parent, serializer);
                    this._isUpdating = false;
                    this.routePoints = ko.observable([]);
                    this.freezeRoute = ko.observable(false);
                    this._disposables.push(ko.computed(function () {
                        var freezeRoute = !(1 + _this.startPoint().location.x() + _this.startPoint().location.y()
                            + _this.endPoint().location.x() + _this.endPoint().location.y());
                        if (!_this._isUpdating) {
                            _this.freezeRoute(freezeRoute);
                        }
                    }));
                    this._disposables.push(ko.computed(function () {
                        if (!_this.freezeRoute()) {
                            var result = [];
                            var startPointSide = _this._getStartPointSide();
                            var endPointSide = _this._getEndPointSide();
                            var startPoint = new Designer.Point(_this.startPoint().location.x(), _this.startPoint().location.y()), endPoint = new Designer.Point(_this.endPoint().location.x(), _this.endPoint().location.y());
                            if (_this.startPoint().connectingPoint()) {
                                _this._fixPoint(startPoint, _this.startPoint().connectingPoint().side());
                                result.push(startPoint);
                            }
                            if (_this.endPoint().connectingPoint()) {
                                _this._fixPoint(endPoint, _this.endPoint().connectingPoint().side());
                            }
                            var baseX = Math.min(startPoint.x(), endPoint.x()), baseY = Math.min(startPoint.y(), endPoint.y()), width = Math.abs(startPoint.x() - endPoint.x()), height = Math.abs(startPoint.y() - endPoint.y());
                            if (startPoint.y() - endPoint.y() > 0) {
                                if (startPoint.x() - endPoint.x() > 0) {
                                    if (startPointSide === PointSide.North || startPointSide === PointSide.East) {
                                        if (endPointSide === PointSide.North || endPointSide === PointSide.East) {
                                            result.push(new Designer.Point(baseX + width, baseY));
                                        }
                                        else {
                                            result.push(new Designer.Point(baseX + width, baseY + height / 2));
                                            result.push(new Designer.Point(baseX, baseY + height / 2));
                                        }
                                    }
                                    else {
                                        if (endPointSide === PointSide.South || endPointSide === PointSide.West) {
                                            result.push(new Designer.Point(baseX, baseY + height));
                                        }
                                        else {
                                            result.push(new Designer.Point(baseX + width / 2, baseY + height));
                                            result.push(new Designer.Point(baseX + width / 2, baseY));
                                        }
                                    }
                                }
                                else {
                                    if (startPointSide === PointSide.North || startPointSide === PointSide.West) {
                                        if (endPointSide === PointSide.North || endPointSide === PointSide.West) {
                                            result.push(new Designer.Point(baseX, baseY));
                                        }
                                        else {
                                            result.push(new Designer.Point(baseX, baseY + height / 2));
                                            result.push(new Designer.Point(baseX + width, baseY + height / 2));
                                        }
                                    }
                                    else {
                                        if (endPointSide === PointSide.South || endPointSide === PointSide.East) {
                                            result.push(new Designer.Point(baseX + width, baseY + height));
                                        }
                                        else {
                                            result.push(new Designer.Point(baseX + width / 2, baseY + height));
                                            result.push(new Designer.Point(baseX + width / 2, baseY));
                                        }
                                    }
                                }
                            }
                            else {
                                if (startPoint.x() - endPoint.x() > 0) {
                                    if (startPointSide === PointSide.South || startPointSide === PointSide.East) {
                                        if (endPointSide === PointSide.South || endPointSide === PointSide.East) {
                                            result.push(new Designer.Point(baseX + width, baseY + height));
                                        }
                                        else {
                                            result.push(new Designer.Point(baseX + width, baseY + height / 2));
                                            result.push(new Designer.Point(baseX, baseY + height / 2));
                                        }
                                    }
                                    else {
                                        if (endPointSide === PointSide.North || endPointSide === PointSide.West) {
                                            result.push(new Designer.Point(baseX, baseY));
                                        }
                                        else {
                                            result.push(new Designer.Point(baseX + width / 2, baseY));
                                            result.push(new Designer.Point(baseX + width / 2, baseY + height));
                                        }
                                    }
                                }
                                else {
                                    if (startPointSide === PointSide.South || startPointSide === PointSide.West) {
                                        if (endPointSide === PointSide.South || endPointSide === PointSide.West) {
                                            result.push(new Designer.Point(baseX, baseY + height));
                                        }
                                        else {
                                            result.push(new Designer.Point(baseX, baseY + height / 2));
                                            result.push(new Designer.Point(baseX + width, baseY + height / 2));
                                        }
                                    }
                                    else {
                                        if (endPointSide === PointSide.North || endPointSide === PointSide.East) {
                                            result.push(new Designer.Point(baseX + width, baseY));
                                        }
                                        else {
                                            result.push(new Designer.Point(baseX + width / 2, baseY));
                                            result.push(new Designer.Point(baseX + width / 2, baseY + height));
                                        }
                                    }
                                }
                            }
                            if (_this.endPoint().connectingPoint()) {
                                result.push(endPoint);
                            }
                            _this.routePoints(result);
                        }
                    }));
                }
                RoutedConnectorViewModel.prototype.getX = function () {
                    var result = _super.prototype.getX.call(this);
                    this.routePoints && this.routePoints().forEach(function (point) {
                        if (point.x() < result) {
                            result = point.x();
                        }
                    });
                    return result;
                };
                RoutedConnectorViewModel.prototype.getY = function () {
                    var result = _super.prototype.getY.call(this);
                    this.routePoints && this.routePoints().forEach(function (point) {
                        if (point.y() < result) {
                            result = point.y();
                        }
                    });
                    return result;
                };
                RoutedConnectorViewModel.prototype.getWidth = function () {
                    var result = _super.prototype.getWidth.call(this);
                    var baseX = this.getX();
                    this.routePoints && [this.startPoint().location, this.endPoint().location].concat(this.routePoints()).forEach(function (point) {
                        if (point.x() - baseX > result) {
                            result = point.x() - baseX;
                        }
                    });
                    return result;
                };
                RoutedConnectorViewModel.prototype.getHeight = function () {
                    var result = _super.prototype.getHeight.call(this);
                    var baseY = this.getY();
                    this.routePoints && [this.startPoint().location, this.endPoint().location].concat(this.routePoints()).forEach(function (point) {
                        if (point.y() - baseY > result) {
                            result = point.y() - baseY;
                        }
                    });
                    return Math.round(result);
                };
                RoutedConnectorViewModel.prototype._fixPoint = function (point, side) {
                    switch (side) {
                        case PointSide.North:
                            point.y(point.y() - RoutedConnectorViewModel.GRID_SIZE);
                            break;
                        case PointSide.East:
                            point.x(point.x() + RoutedConnectorViewModel.GRID_SIZE);
                            break;
                        case PointSide.West:
                            point.x(point.x() - RoutedConnectorViewModel.GRID_SIZE);
                            break;
                        case PointSide.South:
                            point.y(point.y() + RoutedConnectorViewModel.GRID_SIZE);
                    }
                };
                RoutedConnectorViewModel.prototype._getStartPointSide = function () {
                    if (this.startPoint().connectingPoint()) {
                        return this.startPoint().connectingPoint().side();
                    }
                    if (this.startPoint().location.y() !== this.endPoint().location.y()) {
                        if (this.startPoint().location.y() > this.endPoint().location.y()) {
                            return PointSide.North;
                        }
                        else {
                            return PointSide.South;
                        }
                    }
                    else {
                        if (this.startPoint().location.x() > this.endPoint().location.x()) {
                            return PointSide.West;
                        }
                        else {
                            return PointSide.East;
                        }
                    }
                };
                RoutedConnectorViewModel.prototype._getEndPointSide = function () {
                    if (this.endPoint().connectingPoint()) {
                        return this.endPoint().connectingPoint().side();
                    }
                    if (this.startPoint().location.y() !== this.endPoint().location.y()) {
                        if (this.startPoint().location.y() > this.endPoint().location.y()) {
                            return PointSide.South;
                        }
                        else {
                            return PointSide.North;
                        }
                    }
                    else {
                        if (this.startPoint().location.x() > this.endPoint().location.x()) {
                            return PointSide.East;
                        }
                        else {
                            return PointSide.West;
                        }
                    }
                };
                RoutedConnectorViewModel.prototype.beginUpdate = function () { this._isUpdating = true; };
                RoutedConnectorViewModel.prototype.endUpdate = function () { this._isUpdating = false; };
                RoutedConnectorViewModel.GRID_SIZE = 10;
                return RoutedConnectorViewModel;
            })(ConnectorViewModel);
            Diagram.RoutedConnectorViewModel = RoutedConnectorViewModel;
            var RoutedConnectorSurface = (function (_super) {
                __extends(RoutedConnectorSurface, _super);
                function RoutedConnectorSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, null);
                    this.template = "dxdd-routed-connector";
                    this.selectiontemplate = "dxdd-routed-connector-selection";
                    this.showArrow = ko.observable(false);
                    this.isVisible = ko.observable(true);
                    this.routePoints = ko.observableArray();
                    this.routePointsSet = ko.pureComputed(function () {
                        var points = [];
                        _this.routePoints().forEach(function (point) {
                            points.push(point.x() + " " + point.y());
                        });
                        return points.join(", ");
                    });
                    this.routeLineWrappers = ko.pureComputed(function () {
                        var result = [];
                        for (var i = 1; i < _this.routePoints().length; i++) {
                            result.push(_this._createRouteLineWrapper(_this.routePoints()[i - 1], _this.routePoints()[i], i === 1 || i === _this.routePoints().length - 1));
                        }
                        return result;
                    });
                    this.connectorID = function () { return _this._connectorID; };
                    this._connectorID = RoutedConnectorSurface._connectorsCount++;
                    this.startPoint = ko.pureComputed(function () {
                        return new ConnectionPointSurface(control.startPoint(), context);
                    });
                    this.endPoint = ko.pureComputed(function () {
                        return new ConnectionPointSurface(control.endPoint(), context);
                    });
                    this._disposables.push(control.routePoints.subscribe(function (routePoints) {
                        _this._updateRoutePoints();
                    }));
                    this._updateRoutePoints();
                }
                RoutedConnectorSurface.prototype._createRoutePoint = function (point, base) {
                    var _this = this;
                    return {
                        x: ko.pureComputed(function () {
                            if (_this._context.rtl()) {
                                return Math.round(_this.getControlModel().size.width() - (point.x() - base.x()));
                            }
                            else {
                                return Math.round(point.x() - base.x());
                            }
                        }),
                        y: ko.pureComputed(function () { return Math.round(point.y() - base.y()); }),
                        modelPoint: point
                    };
                };
                RoutedConnectorSurface.prototype._createRouteLineWrapper = function (point1, point2, isLocked) {
                    var _this = this;
                    if (isLocked === void 0) { isLocked = false; }
                    var _self = this, isVerticalLine = Math.abs(point1.x.peek() - point2.x.peek()) < 1, absoluteTop = point1.modelPoint.y.peek(), absoluteLeft = point1.modelPoint.x.peek(), position = {
                        top: Math.min(point1.y.peek(), point2.y.peek()) - 2,
                        left: Math.min(point1.x.peek(), point2.x.peek()) - 2,
                        width: Math.abs(point1.x.peek() - point2.x.peek()) + 6,
                        height: Math.abs(point1.y.peek() - point2.y.peek()) + 6
                    }, resizeHandler = function (params) {
                        _self._control.freezeRoute(true);
                        try {
                            _self._control.beginUpdate();
                            if (isVerticalLine) {
                                if (_this._context.rtl()) {
                                    var newX = absoluteLeft - params.delta.dx;
                                }
                                else {
                                    var newX = absoluteLeft + params.delta.dx;
                                }
                                point1.modelPoint.x(newX);
                                point2.modelPoint.x(newX);
                            }
                            else {
                                var newY = absoluteTop + params.delta.dy;
                                point1.modelPoint.y(newY);
                                point2.modelPoint.y(newY);
                            }
                        }
                        finally {
                            _self._control.endUpdate();
                        }
                    };
                    return {
                        position: position,
                        isVerticalLine: isVerticalLine,
                        resizeHandler: resizeHandler,
                        resizeStopped: function () {
                            _self._control.routePoints.notifySubscribers();
                        },
                        isLocked: ko.observable(isLocked)
                    };
                };
                RoutedConnectorSurface.prototype._updateRoutePoints = function () {
                    var _this = this;
                    var points = [], control = this.getControlModel(), base = control.location;
                    points.push(this._createRoutePoint(control.startPoint().location, base));
                    control.routePoints().forEach(function (point) {
                        points.push(_this._createRoutePoint(point, base));
                    });
                    points.push(this._createRoutePoint(control.endPoint().location, base));
                    this.routePoints(points);
                };
                RoutedConnectorSurface._connectorsCount = 0;
                return RoutedConnectorSurface;
            })(Diagram.DiagramElementBaseSurface);
            Diagram.RoutedConnectorSurface = RoutedConnectorSurface;
            ko.bindingHandlers["routeLineDraggable"] = {
                init: function (element, valueAccessor) {
                    var values = valueAccessor(), options = $.extend({ snap: '.dxrd-drag-snap-line', snapTolerance: Designer.SnapLinesHelper.snapTolerance }, ko.unwrap(values), {
                        start: function (event, ui) {
                            values.starting();
                        },
                        stop: function (event, ui) {
                            values.stopped();
                        },
                        drag: function (event, ui) {
                            var dx = ui.position.left - ui["originalPosition"].left, dy = ui.position.top - ui["originalPosition"].top;
                            values.forceResize({ delta: { dx: dx, dy: dy } });
                        }
                    });
                    $(element).draggable(options);
                }
            };
            function getInternetExplorerVersion() {
                var rv = -1;
                if (navigator.appName == 'Microsoft Internet Explorer') {
                    var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
                    if (re.exec(navigator.userAgent) != null)
                        rv = parseFloat(RegExp.$1);
                }
                else if (navigator.appName == 'Netscape') {
                    var re = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
                    if (re.exec(navigator.userAgent) != null)
                        rv = parseFloat(RegExp.$1);
                }
                return rv;
            }
            ko.bindingHandlers["updateConnectorArrow"] = {
                init: function (svgNode, valueAccessor, allBindings, viewModel, bindingContext) {
                    var ieVersion = getInternetExplorerVersion();
                    if (ieVersion > -1 && ieVersion <= 11) {
                        var updateSubscription = bindingContext.$data.routePointsSet.subscribe(function () {
                            if (bindingContext.$data.showArrow())
                                svgNode.parentNode.insertBefore(svgNode, svgNode);
                        });
                        ko.utils.domNodeDisposal.addDisposeCallback(svgNode.parentNode, function () { return updateSubscription.dispose(); });
                    }
                }
            };
        })(Diagram = Designer.Diagram || (Designer.Diagram = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="metadata.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Diagram;
        (function (Diagram) {
            var DiagramViewModel = (function (_super) {
                __extends(DiagramViewModel, _super);
                function DiagramViewModel(diagramSource) {
                    var serializer = new DevExpress.JS.Utils.ModelSerializer();
                    _super.call(this, diagramSource, null, serializer);
                    this.controlType = "Diagram";
                    this.controls = ko.observableArray();
                    this.name("Diagram");
                }
                DiagramViewModel.prototype.getInfo = function () {
                    return Diagram.diagramSerializationsInfo;
                };
                return DiagramViewModel;
            })(Diagram.DiagramElementBaseViewModel);
            Diagram.DiagramViewModel = DiagramViewModel;
            Diagram.margins = { propertyName: "margins", modelName: "@Margins", from: Designer.Margins.fromString, displayName: "Margins" };
            Diagram.pageWidth = { propertyName: "pageWidth", modelName: "@PageWidth", defaultVal: 850, from: Designer.floatFromModel, displayName: "Page Width", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Diagram.pageHeight = { propertyName: "pageHeight", modelName: "@PageHeight", defaultVal: 1250, from: Designer.floatFromModel, displayName: "Page Height", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Diagram.diagramSerializationsInfo = [Diagram.name, Diagram.pageWidth, Diagram.pageHeight, Diagram.margins];
            var DiagramSurface = (function (_super) {
                __extends(DiagramSurface, _super);
                function DiagramSurface(diagram, zoom) {
                    if (zoom === void 0) { zoom = ko.observable(1); }
                    _super.call(this, diagram, {
                        measureUnit: ko.observable("Pixels"),
                        zoom: zoom,
                        dpi: ko.observable(100)
                    }, DiagramSurface._unitProperties);
                    this.measureUnit = ko.observable("Pixels");
                    this.dpi = ko.observable(100);
                    this.controls = ko.observableArray();
                    this.allowMultiselect = false;
                    this.focused = ko.observable(false);
                    this.selected = ko.observable(false);
                    this.underCursor = ko.observable(new Designer.HoverInfo());
                    this.parent = null;
                    this.templateName = "dx-diagram-surface";
                    this.margins = { bottom: this["_bottom"], left: this["_left"], right: this["_right"], top: this["_top"] };
                    this.zoom = zoom;
                    this._context = this;
                    Designer.createObservableArrayMapCollection(diagram.controls, this.controls, this._createSurface);
                }
                DiagramSurface.prototype.checkParent = function (surfaceParent) { return false; };
                DiagramSurface.prototype.getChildrenCollection = function () {
                    return ko.observableArray([]);
                };
                DiagramSurface._unitProperties = {
                    _width: function (o) { return o.pageWidth; },
                    _height: function (o) { return o.pageWidth; },
                    pageWidth: function (o) { return o.pageWidth; },
                    pageHeight: function (o) { return o.pageHeight; },
                    _bottom: function (o) { return o.margins.bottom; },
                    _left: function (o) { return o.margins.left; },
                    _right: function (o) { return o.margins.right; },
                    _top: function (o) { return o.margins.top; }
                };
                return DiagramSurface;
            })(Designer.SurfaceElementBase);
            Diagram.DiagramSurface = DiagramSurface;
        })(Diagram = Designer.Diagram || (Designer.Diagram = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Diagram;
        (function (Diagram) {
            var ConnectionPointDragHandler = (function (_super) {
                __extends(ConnectionPointDragHandler, _super);
                function ConnectionPointDragHandler(surface, selection, undoEngine, snapHelper, dragHelperContent) {
                    _super.call(this, surface, selection, undoEngine, snapHelper);
                    this.currentConnectionPoint = null;
                    this.cursor = 'arrow';
                    this.containment = '.dxrd-ghost-container';
                    this["helper"] = function (draggable) {
                        dragHelperContent.update(draggable);
                    };
                }
                ConnectionPointDragHandler.prototype.startDrag = function (control) {
                    if (!(control instanceof Diagram.ConnectionPointSurface)) {
                        throw new Error("ConnectionPointDragHandler can be applied to the ConnectionPoint only.");
                    }
                    this.currentConnectionPoint = control;
                };
                ConnectionPointDragHandler.prototype.drag = function (event, ui) {
                    ui.position.left += ui["scroll"].left;
                    ui.position.top += ui["scroll"].top;
                    var position = this._getAbsoluteSurfacePosition(ui);
                    this.currentConnectionPoint.rect({ top: position.top, left: position.left });
                };
                ConnectionPointDragHandler.prototype.doStopDrag = function () {
                    if (this.selection.dropTarget) {
                        var dropTarget = this.selection.dropTarget.getControlModel();
                        if (dropTarget instanceof Diagram.ConnectingPointViewModel) {
                            var connector = this.currentConnectionPoint.parent.getControlModel();
                            if (this.currentConnectionPoint.getControlModel() === connector.startPoint()) {
                                connector.startPoint().connectingPoint(dropTarget);
                            }
                            else {
                                connector.endPoint().connectingPoint(dropTarget);
                            }
                        }
                        else if (dropTarget instanceof Diagram.DiagramElementViewModel) {
                            var connector = this.currentConnectionPoint.parent.getControlModel();
                            var connectings = dropTarget.connectingPoints();
                            if (this.currentConnectionPoint.getControlModel() === connector.startPoint()) {
                                connector.startPoint().connectingPoint(connectings[0]);
                            }
                            else {
                                connector.endPoint().connectingPoint(connectings[0]);
                            }
                        }
                    }
                };
                return ConnectionPointDragHandler;
            })(Designer.DragDropHandler);
            Diagram.ConnectionPointDragHandler = ConnectionPointDragHandler;
            var ConnectingPointDragHandler = (function (_super) {
                __extends(ConnectingPointDragHandler, _super);
                function ConnectingPointDragHandler(surface, selection, undoEngine, snapHelper, dragHelperContent) {
                    _super.call(this, surface, selection, undoEngine, snapHelper);
                    this.startConnectingPoint = null;
                    this.newConnector = null;
                    this.cursor = 'arrow';
                    this.containment = '.dxrd-ghost-container';
                    this["helper"] = function (draggable) {
                        dragHelperContent.update(draggable);
                    };
                }
                ConnectingPointDragHandler.prototype.startDrag = function (control) {
                    if (!(control instanceof Diagram.ConnectingPointSurface)) {
                        throw new Error("ConnectingPointDragHandler can be applied to the ConnectingPoint only.");
                    }
                    this.startConnectingPoint = control;
                    var diagramElement = this.startConnectingPoint.parent.getControlModel();
                    this.newConnector = diagramElement.parentModel().createChild({ "@ControlType": "RoutedConnector" });
                    this.newConnector.startPoint().connectingPoint(this.startConnectingPoint.getControlModel());
                };
                ConnectingPointDragHandler.prototype.drag = function (event, ui) {
                    ui.position.left += ui["scroll"].left;
                    ui.position.top += ui["scroll"].top;
                    var position = this._getAbsoluteSurfacePosition(ui);
                    this.newConnectorSurface.endPoint().rect({ top: position.top, left: position.left });
                };
                ConnectingPointDragHandler.prototype.doStopDrag = function () {
                    if (this.selection.dropTarget) {
                        var dropTarget = this.selection.dropTarget.getControlModel();
                        if (dropTarget instanceof Diagram.ConnectingPointViewModel) {
                            this.newConnector.endPoint().connectingPoint(dropTarget);
                        }
                        else if (dropTarget instanceof Diagram.DiagramElementViewModel) {
                            var connectings = dropTarget.connectingPoints();
                            this.newConnector.endPoint().connectingPoint(connectings[0]);
                        }
                        this.selection.initialize(this.newConnectorSurface);
                    }
                };
                Object.defineProperty(ConnectingPointDragHandler.prototype, "newConnectorSurface", {
                    get: function () {
                        return this.newConnector && Designer.findSurface(this.newConnector);
                    },
                    enumerable: true,
                    configurable: true
                });
                return ConnectingPointDragHandler;
            })(Designer.DragDropHandler);
            Diagram.ConnectingPointDragHandler = ConnectingPointDragHandler;
        })(Diagram = Designer.Diagram || (Designer.Diagram = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Diagram;
        (function (Diagram) {
            Diagram.controlsFactory = new Designer.ControlsFactory();
            function registerControls() {
                Diagram.controlsFactory.registerControl("Unknown", {
                    info: Diagram.unknownSerializationsInfo,
                    type: Designer.ElementViewModel,
                    nonToolboxItem: true,
                    surfaceType: Designer.SurfaceElementBase
                });
                Diagram.controlsFactory.registerControl("Connector", {
                    info: [
                        Diagram.name,
                        { propertyName: "location", displayName: "Location", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "startPoint", modelName: "@StartPoint", link: true },
                        { propertyName: "endPoint", modelName: "@EndPoint", link: true }
                    ],
                    surfaceType: Diagram.ConnectorSurface,
                    type: Diagram.ConnectorViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: false
                });
                Diagram.controlsFactory.registerControl("RoutedConnector", {
                    info: [
                        Diagram.name,
                        { propertyName: "location", displayName: "Location", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "startPoint", modelName: "@StartPoint", link: true },
                        { propertyName: "endPoint", modelName: "@EndPoint", link: true }
                    ],
                    surfaceType: Diagram.RoutedConnectorSurface,
                    type: Diagram.RoutedConnectorViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: false
                });
                Diagram.controlsFactory.registerControl("ConnectionPoint", {
                    info: Diagram.connectionPointSerializationInfo,
                    surfaceType: Diagram.ConnectionPointSurface,
                    type: Diagram.ConnectionPointViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: true
                });
                Diagram.controlsFactory.registerControl("Diagram", {
                    info: Diagram.diagramSerializationsInfo,
                    surfaceType: Diagram.DiagramSurface,
                    popularProperties: ["name"],
                    type: Diagram.DiagramViewModel,
                    elementActionsTypes: [],
                    isContainer: true,
                    nonToolboxItem: true
                });
                Diagram.controlsFactory.registerControl("DiagramElement", {
                    info: Diagram.diagramElementSerializationInfo,
                    defaultVal: {
                        "@SizeF": "150,50",
                        "ConnectingPoints": {
                            "Item1": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "1",
                                "@PercentOffsetY": "0.5",
                            },
                            "Item2": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "0.5",
                                "@PercentOffsetY": "1",
                            },
                            "Item3": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "0.5",
                                "@PercentOffsetY": "0",
                            },
                            "Item4": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "0",
                                "@PercentOffsetY": "0.5",
                            }
                        }
                    },
                    surfaceType: Diagram.DiagramElementSurface,
                    popularProperties: ["text"],
                    type: Diagram.DiagramElementViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: false
                });
                Diagram.controlsFactory.registerControl("Ellipse", {
                    info: Diagram.diagramElementSerializationInfo,
                    defaultVal: {
                        "@SizeF": "150,50",
                        "@Type": "Ellipse",
                        "ConnectingPoints": {
                            "Item1": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "1",
                                "@PercentOffsetY": "0.5",
                            },
                            "Item2": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "0.5",
                                "@PercentOffsetY": "1",
                            },
                            "Item3": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "0.5",
                                "@PercentOffsetY": "0",
                            },
                            "Item4": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "0",
                                "@PercentOffsetY": "0.5",
                            }
                        }
                    },
                    surfaceType: Diagram.DiagramElementSurface,
                    popularProperties: ["text"],
                    type: Diagram.DiagramElementViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: false
                });
                Diagram.controlsFactory.registerControl("Condition", {
                    info: Diagram.diagramElementSerializationInfo,
                    defaultVal: {
                        "@SizeF": "150,50",
                        "@Type": "Condition",
                        "ConnectingPoints": {
                            "Item1": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "1",
                                "@PercentOffsetY": "0.5",
                            },
                            "Item2": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "0.5",
                                "@PercentOffsetY": "1",
                            },
                            "Item3": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "0.5",
                                "@PercentOffsetY": "0",
                            },
                            "Item4": {
                                "@ControlType": "ConnectingPoint",
                                "@PercentOffsetX": "0",
                                "@PercentOffsetY": "0.5",
                            }
                        }
                    },
                    surfaceType: Diagram.DiagramElementSurface,
                    popularProperties: ["text"],
                    type: Diagram.DiagramElementViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: false
                });
                Diagram.controlsFactory.registerControl("ConnectingPoint", {
                    info: Diagram.connectingPointSerializationInfo,
                    surfaceType: Diagram.ConnectingPointSurface,
                    type: Diagram.ConnectingPointViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: true
                });
            }
            Diagram.registerControls = registerControls;
            Diagram.groups = {
                "Appearance": [],
                "Behavior": [],
                "Design": [Diagram.name],
                "Layout": [Diagram.location, Diagram.size, Diagram.pageWidth, Diagram.pageHeight]
            };
            function createDiagramDesigner(element, diagramSource, localization, rtl) {
                if (localization) {
                    DevExpress.JS.Localization.addCultureInfo({
                        messages: localization
                    });
                }
                registerControls();
                var diagram = ko.pureComputed(function () { return new Diagram.DiagramViewModel(diagramSource()); }), surface = ko.pureComputed(function () {
                    var surface = new Diagram.DiagramSurface(diagram());
                    return surface;
                });
                var designerModel = Designer.createDesigner(diagram, surface, Diagram.controlsFactory, Diagram.groups, undefined, undefined, rtl);
                designerModel.connectionPointDragHandler = new Diagram.ConnectionPointDragHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
                designerModel.connectingPointDragHandler = new Diagram.ConnectingPointDragHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
                designerModel.isLoading(false);
                designerModel.selection.focused(surface());
                $(element).children().remove();
                ko.applyBindings(designerModel, element);
                var updateSurfaceContentSize_ = Designer.updateSurfaceContentSize(designerModel.surfaceSize, element);
                $(window).bind("resize", function () {
                    updateSurfaceContentSize_();
                });
                designerModel.tabPanel.width.subscribe(function () {
                    updateSurfaceContentSize_();
                });
                updateSurfaceContentSize_();
                return designerModel;
            }
            Diagram.createDiagramDesigner = createDiagramDesigner;
        })(Diagram = Designer.Diagram || (Designer.Diagram = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
//# sourceMappingURL=dx-diagram-designer.js.map
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            QueryBuilder.editorTemplates = {
                bool: { header: "dx-boolean-select", custom: "dxqb-property-editor" },
                combobox: { header: "dx-combobox", custom: "dxqb-property-editor" },
                text: { header: "dx-text", custom: "dxqb-property-editor" },
                filterEditor: { header: "dxrd-filterstring", custom: "dxqb-property-editor" },
                filterGroupEditor: { header: "dxrd-filterstringgroup", custom: "dxqb-property-editor" },
                numeric: { header: "dx-numeric", custom: "dxqb-property-editor" }
            };
            QueryBuilder.name = { propertyName: "name", modelName: "@Name", displayName: "Name", disabled: true, editor: QueryBuilder.editorTemplates.text };
            QueryBuilder.alias = { propertyName: "alias", modelName: "@Alias", displayName: "Alias", localizationId: "DataAccessUIStringId.QueryBuilderColumns_Alias", defaultVal: "", editor: QueryBuilder.editorTemplates.text };
            QueryBuilder.text = { propertyName: "text", modelName: "@Text", displayName: "Text", editor: QueryBuilder.editorTemplates.text };
            QueryBuilder.selected = { propertyName: "selected", displayName: "Output", editor: QueryBuilder.editorTemplates.bool, localizationId: "DataAccessUIStringId.QueryBuilderColumns_Output" };
            QueryBuilder.size = { propertyName: "size", modelName: "@Size", defaultVal: "100,125", from: Designer.Size.fromString };
            QueryBuilder.location = { propertyName: "location", modelName: "@Location", from: Designer.Point.fromString };
            QueryBuilder.sizeLocation = [QueryBuilder.size, QueryBuilder.location];
            QueryBuilder.unknownSerializationsInfo = [QueryBuilder.name].concat(QueryBuilder.sizeLocation);
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Data;
    (function (Data) {
        function deserializeToCollection(model, createItem, collection) {
            var collection = collection || [];
            if (model) {
                model.forEach(function (value) {
                    collection.push(createItem(value));
                });
            }
            return collection;
        }
        var DBSchema = (function () {
            function DBSchema(model) {
                var tables = deserializeToCollection(model["Tables"], function (tableModel) { return new DBTable(tableModel); });
                tables.sort(function (a, b) { return a.name.localeCompare(b.name); });
                var views = deserializeToCollection(model["Views"], function (tableModel) { return new DBTable(tableModel); });
                views.sort(function (a, b) { return a.name.localeCompare(b.name); });
                this.tables = tables.concat(views);
                this.procedures = deserializeToCollection(model["StoredProcedures"], function (procModel) { return new DBStoredProcedure(procModel); });
            }
            return DBSchema;
        })();
        Data.DBSchema = DBSchema;
        var DBTable = (function () {
            function DBTable(model) {
                this.name = model["Name"];
                this.isView = model["IsView"] === "true" || model["IsView"] === true;
                this.columns = deserializeToCollection(model["columns"], function (columnModel) { return new DBColumn(columnModel); });
                this.foreignKeys = deserializeToCollection(model["foreignKeys"], function (columnModel) { return new DBForeignKey(columnModel); });
            }
            return DBTable;
        })();
        Data.DBTable = DBTable;
        var DBForeignKey = (function () {
            function DBForeignKey(model) {
                this.name = model["Name"];
                this.primaryKeyTable = model["PrimaryKeyTable"];
                this.column = model["Columns"][0];
                this.primaryKeyColumn = model["PrimaryKeyTableKeyColumns"][0];
            }
            return DBForeignKey;
        })();
        Data.DBForeignKey = DBForeignKey;
        var DBStoredProcedure = (function () {
            function DBStoredProcedure(model) {
                this.name = model["Name"];
                this.arguments = deserializeToCollection(model["arguments"], function (argModel) { return new DBStoredProcedureArgument(argModel); });
            }
            return DBStoredProcedure;
        })();
        Data.DBStoredProcedure = DBStoredProcedure;
        (function (DBStoredProcedureArgumentDirection) {
            DBStoredProcedureArgumentDirection[DBStoredProcedureArgumentDirection["In"] = 0] = "In";
            DBStoredProcedureArgumentDirection[DBStoredProcedureArgumentDirection["Out"] = 1] = "Out";
            DBStoredProcedureArgumentDirection[DBStoredProcedureArgumentDirection["InOut"] = 2] = "InOut";
        })(Data.DBStoredProcedureArgumentDirection || (Data.DBStoredProcedureArgumentDirection = {}));
        var DBStoredProcedureArgumentDirection = Data.DBStoredProcedureArgumentDirection;
        var DBStoredProcedureArgument = (function () {
            function DBStoredProcedureArgument(model) {
                this.name = model["Name"];
                this.type = model["Type"];
                this.direction = model["Direction"];
            }
            return DBStoredProcedureArgument;
        })();
        Data.DBStoredProcedureArgument = DBStoredProcedureArgument;
        (function (DBColumnType) {
            DBColumnType[DBColumnType["Unknown"] = 0] = "Unknown";
            DBColumnType[DBColumnType["Boolean"] = 1] = "Boolean";
            DBColumnType[DBColumnType["Byte"] = 2] = "Byte";
            DBColumnType[DBColumnType["SByte"] = 3] = "SByte";
            DBColumnType[DBColumnType["Char"] = 4] = "Char";
            DBColumnType[DBColumnType["Decimal"] = 5] = "Decimal";
            DBColumnType[DBColumnType["Double"] = 6] = "Double";
            DBColumnType[DBColumnType["Single"] = 7] = "Single";
            DBColumnType[DBColumnType["Int32"] = 8] = "Int32";
            DBColumnType[DBColumnType["UInt32"] = 9] = "UInt32";
            DBColumnType[DBColumnType["Int16"] = 10] = "Int16";
            DBColumnType[DBColumnType["UInt16"] = 11] = "UInt16";
            DBColumnType[DBColumnType["Int64"] = 12] = "Int64";
            DBColumnType[DBColumnType["UInt64"] = 13] = "UInt64";
            DBColumnType[DBColumnType["String"] = 14] = "String";
            DBColumnType[DBColumnType["DateTime"] = 15] = "DateTime";
            DBColumnType[DBColumnType["Guid"] = 16] = "Guid";
            DBColumnType[DBColumnType["TimeSpan"] = 17] = "TimeSpan";
            DBColumnType[DBColumnType["ByteArray"] = 18] = "ByteArray";
        })(Data.DBColumnType || (Data.DBColumnType = {}));
        var DBColumnType = Data.DBColumnType;
        var DBColumn = (function () {
            function DBColumn(model) {
                this.name = model["Name"];
                this.type = model["ColumnType"];
                this.size = model["Size"];
            }
            DBColumn.GetType = function (dbColumnType) {
                switch (dbColumnType) {
                    case DBColumnType.Boolean:
                        return "System.Boolean";
                    case DBColumnType.Byte:
                        return "System.Byte";
                    case DBColumnType.SByte:
                        return "System.SByte";
                    case DBColumnType.Char:
                        return "System.Char";
                    case DBColumnType.Decimal:
                        return "System.Decimal";
                    case DBColumnType.Double:
                        return "System.Double";
                    case DBColumnType.Single:
                        return "System.Single";
                    case DBColumnType.Int32:
                        return "System.Int32";
                    case DBColumnType.UInt32:
                        return "System.UInt32";
                    case DBColumnType.Int16:
                        return "System.Int16";
                    case DBColumnType.UInt16:
                        return "System.UInt16";
                    case DBColumnType.Int64:
                        return "System.Int64";
                    case DBColumnType.UInt64:
                        return "System.UInt64";
                    case DBColumnType.String:
                        return "System.String";
                    case DBColumnType.DateTime:
                        return "System.DateTime";
                    case DBColumnType.Guid:
                        return "System.Guid";
                    case DBColumnType.TimeSpan:
                        return "System.TimeSpan";
                    case DBColumnType.ByteArray:
                        return "System.Byte[]";
                    default:
                        return "System.Object";
                }
            };
            DBColumn.GetSpecific = function (type) {
                switch (type) {
                    case "System.Boolean":
                        return "Bool";
                    case "System.Byte":
                    case "System.SByte":
                    case "System.Int16":
                    case "System.UInt16":
                    case "System.Int32":
                    case "System.UInt32":
                        return "Integer";
                    case "System.Char":
                    case "System.Decimal":
                    case "System.Guid":
                    case "System.ByteArray":
                    case "System.Int64":
                    case "System.UInt64":
                    case "System.String":
                        return "String";
                    case "System.Double":
                    case "System.Single":
                        return "Float";
                    case "System.DateTime":
                    case "System.TimeSpan":
                        return "Date";
                    default:
                        return "String";
                }
            };
            return DBColumn;
        })();
        Data.DBColumn = DBColumn;
    })(Data = DevExpress.Data || (DevExpress.Data = {}));
})(DevExpress || (DevExpress = {}));
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DevExpress;
(function (DevExpress) {
    var Data;
    (function (Data) {
        function getDBSchemaCallback(connectionString, dataSourceBase64, table) {
            var deferred = $.Deferred();
            DevExpress.Designer.ajax(DevExpress.Designer.QueryBuilder.HandlerUri, 'getDBSchema', encodeURIComponent(JSON.stringify({
                connectionString: this._connectionString(),
                dataSourceBase64: this._dataSource.base64(),
                tableName: table && table.name,
                isView: table && table.isView
            })))
                .done(function (data) {
                deferred.resolve(new Data.DBSchema(JSON.parse(data.dbSchemaJSON)));
            })
                .fail(function (data) {
                DevExpress.Designer.ShowMessage("Schema loading failed. " + DevExpress.Designer.getErrorMessage(data));
                deferred.reject();
            });
            return deferred;
        }
        Data.getDBSchemaCallback = getDBSchemaCallback;
        var DBSchemaProvider = (function (_super) {
            __extends(DBSchemaProvider, _super);
            function DBSchemaProvider(_dataSource, _getDBShcemaCallBack) {
                var _this = this;
                if (_getDBShcemaCallBack === void 0) { _getDBShcemaCallBack = Data.getDBSchemaCallback; }
                _super.call(this);
                this._dataSource = _dataSource;
                this._getDBShcemaCallBack = _getDBShcemaCallBack;
                this._tables = {};
                this._connectionString = this._dataSource.connection.name;
                this._disposables.push(this._connectionString.subscribe(function () {
                    _this._tables = {};
                    _this._dbSchema = null;
                }));
                this.getItems = function (pathRequest) {
                    var result = $.Deferred();
                    if (!pathRequest.fullPath) {
                        _this.getDbSchema().done(function (dbSchema) {
                            result.resolve($.map(dbSchema.tables, function (item) {
                                var dataMemberInfo = {
                                    name: item.name,
                                    displayName: item.name,
                                    isList: false,
                                    specifics: item.isView ? "view" : "table",
                                    dragData: { noDragable: false }
                                };
                                return dataMemberInfo;
                            }));
                        });
                    }
                    else {
                        result.resolve([]);
                    }
                    return result.promise();
                };
            }
            DBSchemaProvider.prototype._getDBSchema = function (table) {
                return this._getDBShcemaCallBack(this._connectionString(), this._dataSource.base64(), table);
            };
            DBSchemaProvider.prototype.getDbSchema = function () {
                if (!this._dbSchema || this._dbSchema.state() === "rejected")
                    this._dbSchema = this._getDBSchema();
                return this._dbSchema;
            };
            DBSchemaProvider.prototype.getDbTable = function (tableName) {
                var _this = this;
                if (!this._tables[tableName]) {
                    var deferred = $.Deferred();
                    this._tables[tableName] = deferred.promise();
                    this.getDbSchema().done(function (dbSchema) {
                        var table = DevExpress.Designer.findFirstItemMatchesCondition(dbSchema.tables, function (table) { return table.name === tableName; });
                        if (!table) {
                            deferred.reject();
                            DevExpress.Designer.NotifyAboutWarning(DevExpress.Designer.getLocalization("The schema does not contain the specified table: ") + "'" + tableName + "'.", true);
                        }
                        else if (table.columns.length > 0) {
                            deferred.resolve(table);
                        }
                        else {
                            _this._getDBSchema(table).done(function (dbSchema) {
                                table.columns = dbSchema.tables[0].columns;
                                deferred.resolve(table);
                            }).fail(function () { return deferred.reject(); });
                        }
                    }).fail(function () { return deferred.reject(); });
                }
                return this._tables[tableName];
            };
            DBSchemaProvider.prototype.dataSource = function () {
                return this._dataSource;
            };
            return DBSchemaProvider;
        })(DevExpress.Designer.Disposable);
        Data.DBSchemaProvider = DBSchemaProvider;
    })(Data = DevExpress.Data || (DevExpress.Data = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            var QueryElementBaseViewModel = (function (_super) {
                __extends(QueryElementBaseViewModel, _super);
                function QueryElementBaseViewModel(control, parent, serializer) {
                    _super.call(this, control, parent, serializer);
                }
                QueryElementBaseViewModel.prototype.getControlFactory = function () {
                    return QueryBuilder.controlsFactory;
                };
                return QueryElementBaseViewModel;
            })(Designer.ElementViewModel);
            QueryBuilder.QueryElementBaseViewModel = QueryElementBaseViewModel;
            var QueryElementBaseSurface = (function (_super) {
                __extends(QueryElementBaseSurface, _super);
                function QueryElementBaseSurface(control, context, unitProperties) {
                    _super.call(this, control, context, $.extend({}, QueryElementBaseSurface._unitProperties, unitProperties));
                    this.template = "dx-diagram-element";
                    this.selectiontemplate = "dx-diagram-element-selection";
                    this.contenttemplate = "dx-diagram-element-content";
                    this.margin = ko.observable(0);
                }
                QueryElementBaseSurface._unitProperties = {
                    _height: function (o) {
                        return o.size.height;
                    },
                    _width: function (o) {
                        return o.size.width;
                    },
                    _x: function (o) {
                        return o.location.x;
                    },
                    _y: function (o) {
                        return o.location.y;
                    }
                };
                return QueryElementBaseSurface;
            })(Designer.SurfaceElementBase);
            QueryBuilder.QueryElementBaseSurface = QueryElementBaseSurface;
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            QueryBuilder.relationSerializationInfo = [
                { propertyName: "joinType", modelName: "@Type" },
                { propertyName: "parentTableName", modelName: "@Parent" },
                { propertyName: "nestedTableName", modelName: "@Nested" },
                { propertyName: "conditions", modelName: "KeyColumns", defaultVal: [], array: true },
                { propertyName: "itemType", modelName: "@itemType" }
            ];
            var RelationViewModel = (function (_super) {
                __extends(RelationViewModel, _super);
                function RelationViewModel(model, query, serializer) {
                    var _this = this;
                    _super.call(this, $.extend(model, { "@ControlType": "Relation", "@ItemType": "Relation" }), query, serializer);
                    this.parentTable = ko.observable(query.getTable(this.parentTableName.peek()));
                    this.nestedTable = ko.observable(query.getTable(this.nestedTableName.peek()));
                    this.parentTableName = ko.pureComputed(function () { return _this.parentTable().actualName(); });
                    this.nestedTableName = ko.pureComputed(function () { return _this.nestedTable().actualName(); });
                    this.conditions = DevExpress.JS.Utils.deserializeArray(model["KeyColumns"], function (item) {
                        return new JoinConditionViewModel(item, _this, serializer);
                    });
                }
                RelationViewModel.prototype.getInfo = function () {
                    return QueryBuilder.relationSerializationInfo;
                };
                RelationViewModel.prototype.addChild = function (control) {
                    var condition = control;
                    if (this.conditions && this.conditions.indexOf(condition) === -1) {
                        condition.parentModel(this);
                        this.conditions.push(condition);
                    }
                };
                RelationViewModel.prototype.removeChild = function (control) {
                    var index = this.conditions().indexOf(control);
                    if (index > -1)
                        this.conditions.splice(index, 1);
                    if (this.conditions().length === 0)
                        this.parentModel().removeChild(this);
                };
                return RelationViewModel;
            })(QueryBuilder.QueryElementBaseViewModel);
            QueryBuilder.RelationViewModel = RelationViewModel;
            var RelationSurface = (function (_super) {
                __extends(RelationSurface, _super);
                function RelationSurface(control, context) {
                    _super.call(this, control, context, null);
                    this.conditions = ko.observableArray();
                    this.template = "dxqb-relation";
                    Designer.createObservableArrayMapCollection(control.conditions, this.conditions, this._createSurface);
                }
                RelationSurface.prototype._getChildrenHolderName = function () {
                    return "conditions";
                };
                return RelationSurface;
            })(Designer.SurfaceElementBase);
            QueryBuilder.RelationSurface = RelationSurface;
            QueryBuilder.ConditionType = {
                Equal: "Equal",
                NotEqual: "NotEqual",
                Greater: "Greater",
                GreaterOrEqual: "GreaterOrEqual",
                Less: "Less",
                LessOrEqual: "LessOrEqual"
            };
            QueryBuilder.joinConditionSerializationInfo = [
                { propertyName: "left", displayName: "Left", editor: QueryBuilder.editorTemplates.text, disabled: true },
                { propertyName: "right", displayName: "Right", editor: QueryBuilder.editorTemplates.text, disabled: true },
                { propertyName: "parentColumnName", modelName: "@Parent" },
                { propertyName: "nestedColumnName", modelName: "@Nested" },
                {
                    propertyName: "joinType",
                    displayName: Designer.getLocalization("Join Type", "DataAccessUIStringId.JoinEditor_JoinType").replace(":", ""),
                    editor: QueryBuilder.editorTemplates.combobox,
                    defaultVal: "Inner",
                    values: {
                        "Inner": Designer.getLocalization("Inner", "DataAccessStringId.RelationEditorRelationTypeInnerJoin"),
                        "LeftOuter": Designer.getLocalization("Left Outer", "DataAccessStringId.RelationEditorRelationTypeLeftOuterJoin")
                    }
                },
                {
                    propertyName: "operator",
                    modelName: "@Operator",
                    displayName: "Operator",
                    editor: QueryBuilder.editorTemplates.combobox,
                    defaultVal: QueryBuilder.ConditionType.Equal,
                    values: {
                        "Equal": Designer.getLocalization("Equals to", "DataAccessUIStringId.JoinEditorEqualOperator"),
                        "NotEqual": Designer.getLocalization("Does not equal to", "DataAccessUIStringId.JoinEditorNotEqualOperator"),
                        "Greater": Designer.getLocalization("Is greater than", "DataAccessUIStringId.JoinEditorGreaterOperator"),
                        "GreaterOrEqual": Designer.getLocalization("Is greater than or equal to", "DataAccessUIStringId.JoinEditorGreaterOrEqualOperator"),
                        "Less": Designer.getLocalization("Is less than", "DataAccessUIStringId.JoinEditorLessOperator"),
                        "LessOrEqual": Designer.getLocalization("Is less than or equal to", "DataAccessUIStringId.JoinEditorLessOrEqualOperator")
                    },
                    localizationId: "ASPxReportsStringId.ReportDesigner_QueryBuilder_Operator"
                },
                { propertyName: "itemType", modelName: "@itemType" }
            ];
            var JoinConditionViewModel = (function (_super) {
                __extends(JoinConditionViewModel, _super);
                function JoinConditionViewModel(control, relation, serializer) {
                    var _this = this;
                    this.startPoint = ko.observable();
                    this.endPoint = ko.observable();
                    _super.call(this, $.extend(control, { "@ControlType": "JoinCondition", "@ItemType": "KeyColumn" }), relation, serializer);
                    this.parentColumn = ko.pureComputed(function () { return relation.parentTable().getColumn(_this.parentColumnName()); });
                    this.nestedColumn = ko.pureComputed(function () { return relation.nestedTable().getColumn(_this.nestedColumnName()); });
                    this.joinType = relation.joinType;
                    this.left = ko.pureComputed(function () { return relation.parentTableName() + '.' + _this.parentColumnName(); });
                    this.right = ko.pureComputed(function () { return relation.nestedTableName() + '.' + _this.nestedColumnName(); });
                    this._disposables.push(ko.computed(function () {
                        if (_this.parentColumn() && _this.nestedColumn()) {
                            var result = Designer.Diagram.determineConnectingPoints(_this.parentColumn(), _this.nestedColumn());
                            _this.startPoint().connectingPoint(result.start);
                            _this.endPoint().connectingPoint(result.end);
                        }
                    }));
                }
                JoinConditionViewModel.prototype.getControlFactory = function () {
                    return QueryBuilder.controlsFactory;
                };
                return JoinConditionViewModel;
            })(Designer.Diagram.RoutedConnectorViewModel);
            QueryBuilder.JoinConditionViewModel = JoinConditionViewModel;
            var JoinConditionSurface = (function (_super) {
                __extends(JoinConditionSurface, _super);
                function JoinConditionSurface(control, context) {
                    _super.call(this, control, context);
                    this.showArrow = ko.pureComputed(function () {
                        return control.joinType() === "LeftOuter";
                    });
                }
                JoinConditionSurface.prototype.container = function () {
                    return this.getRoot();
                };
                return JoinConditionSurface;
            })(Designer.Diagram.RoutedConnectorSurface);
            QueryBuilder.JoinConditionSurface = JoinConditionSurface;
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            QueryBuilder.tableSerializationInfo = [
                QueryBuilder.name, QueryBuilder.alias, { propertyName: "itemType", modelName: "@ItemType" }
            ];
            var TableViewModel = (function (_super) {
                __extends(TableViewModel, _super);
                function TableViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, $.extend(model, { "@ControlType": "Table", "@ItemType": "Table" }), parent, serializer);
                    this.serializer = serializer;
                    this._columnsConnectionPointLeftX = ko.pureComputed(function () { return _this.location.x(); });
                    this._columnsConnectionPointRightX = ko.pureComputed(function () { return _this.location.x() + _this.size.width(); });
                    this._columns = ko.observableArray();
                    this._initialized = ko.observable(false);
                    this.size = new Designer.Size(199, 123);
                    this.location = new Designer.Point(0, 0);
                    this.actualName = ko.pureComputed(function () { return _this.alias() || _this.name(); });
                    this.allColumnsSelected = ko.computed({
                        read: function () {
                            var selectedColumns = _this.columns().filter(function (item) { return item.selected(); });
                            if (selectedColumns.length === 0) {
                                return false;
                            }
                            if (selectedColumns.length === _this._columns.peek().length) {
                                return true;
                            }
                            return false;
                        },
                        deferEvaluation: true
                    });
                    this.isInitialized = ko.pureComputed(function () { return _this._initialized(); });
                    this.size.height = ko.pureComputed({
                        read: function () {
                            return TableViewModel.COLUMNS_OFFSET + (TableViewModel.COLUMN_HEIGHT + TableViewModel.COLUMN_MARGIN) * (_this._columns().length + 1) + 1;
                        },
                        write: function () {
                        }
                    });
                    this.asterisk = new QueryBuilder.AllColumnsViewModel(this, this.serializer);
                }
                TableViewModel.prototype.columns = function () {
                    return this._columns();
                };
                TableViewModel.prototype.toggleSelectedColumns = function () {
                    var value = !this.allColumnsSelected.peek();
                    this._columns.peek().forEach(function (column) { column.selected(value); });
                };
                TableViewModel.prototype.getColumnConnectionPoints = function (column) {
                    var _this = this;
                    var y = ko.pureComputed({
                        read: function () {
                            var index = _this._columns.indexOf(column) + 1;
                            return _this.location.y() + TableViewModel.COLUMNS_OFFSET + TableViewModel.COLUMN_MARGIN * index + TableViewModel.COLUMN_HEIGHT * (index + 0.5);
                        },
                        deferEvaluation: true
                    });
                    return {
                        left: { x: this._columnsConnectionPointLeftX, y: y },
                        right: { x: this._columnsConnectionPointRightX, y: y }
                    };
                };
                TableViewModel.prototype.getInfo = function () {
                    return QueryBuilder.tableSerializationInfo;
                };
                TableViewModel.prototype.getColumn = function (name) {
                    return Designer.getFirstItemByPropertyValue(this._columns(), "name", name);
                };
                TableViewModel.prototype.createColumns = function (dbTable) {
                    var _this = this;
                    dbTable.columns.forEach(function (item) {
                        _this._columns.push(new QueryBuilder.ColumnViewModel({ "@Name": item.name }, item, _this, _this.serializer));
                    });
                    this._initialized(true);
                };
                TableViewModel.COLUMNS_OFFSET = 35;
                TableViewModel.COLUMN_HEIGHT = 32;
                TableViewModel.COLUMN_MARGIN = 1;
                TableViewModel.TABLE_MIN_WIDTH = 80;
                return TableViewModel;
            })(QueryBuilder.QueryElementBaseViewModel);
            QueryBuilder.TableViewModel = TableViewModel;
            var TableSurface = (function (_super) {
                __extends(TableSurface, _super);
                function TableSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, null);
                    this.contenttemplate = "dxqb-table";
                    this.selectiontemplate = "dxqb-table-selection";
                    this.toggleSelected = function () {
                        _this.getControlModel().toggleSelectedColumns();
                    };
                    this.selectedWrapper = ko.pureComputed(function () {
                        return _this.getControlModel().allColumnsSelected();
                    });
                    this.columns = ko.pureComputed(function () {
                        return control.columns().map(function (columnVewModel) { return new QueryBuilder.ColumnSurface(columnVewModel, context); });
                    });
                    this.asterisk = new QueryBuilder.AllColumnsSurface(control.asterisk, context);
                }
                TableSurface.prototype.resizable = function (resizeHandler, element) {
                    return $.extend({}, resizeHandler, {
                        handles: 'e, w',
                        $selectedNodes: element,
                        minWidth: TableViewModel.TABLE_MIN_WIDTH,
                    });
                };
                return TableSurface;
            })(QueryBuilder.QueryElementBaseSurface);
            QueryBuilder.TableSurface = TableSurface;
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="queryBuilderElement.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            var QueryViewModel = (function (_super) {
                __extends(QueryViewModel, _super);
                function QueryViewModel(querySource, dbSchemaProvider, parametersEditingEnabled, serializer) {
                    var _this = this;
                    if (parametersEditingEnabled === void 0) { parametersEditingEnabled = true; }
                    _super.call(this, $.extend(true, querySource, QueryViewModel.emptyModel, querySource), null, serializer);
                    this._findAncestorsRelations = function (table) {
                        var relations;
                        var result = { inner: 0, outer: 0, relations: [] };
                        _this.relations().forEach(function (item) {
                            if (item.nestedTable() === table) {
                                result.relations.push(item);
                                item.joinType() === "LeftOuter" ? result.outer++ : result.inner++;
                                var parentResult = _this._findAncestorsRelations(item.parentTable());
                                result.inner += parentResult.inner;
                                result.outer += parentResult.outer;
                                result.relations.push.apply(result.relations, parentResult.relations);
                            }
                        });
                        return result;
                    };
                    this["type"]("SelectQuery");
                    this.controlType = "Query";
                    this.dbSchemaProvider = dbSchemaProvider;
                    this.tables = DevExpress.JS.Utils.deserializeArray(querySource["Tables"]["SelectedTables"], function (item) { return new QueryBuilder.TableViewModel(item, _this, serializer); });
                    this.columns = DevExpress.JS.Utils.deserializeArray(querySource["Columns"], function (item) { return new QueryBuilder.ColumnExpression(item, _this, serializer); });
                    this.sorting = DevExpress.JS.Utils.deserializeArray(querySource["Sorting"], function (item) { return new QueryBuilder.ColumnExpression(item, _this, serializer); });
                    this.grouping = DevExpress.JS.Utils.deserializeArray(querySource["Grouping"], function (item) { return new QueryBuilder.ColumnExpression(item, _this, serializer); });
                    this.tables().forEach(function (table) { _this._initializeTable(table); });
                    this.relations = DevExpress.JS.Utils.deserializeArray(querySource["Tables"]["Relations"], function (item) { return new QueryBuilder.RelationViewModel(item, _this, serializer); });
                    this["_tablesObject"]["tables"] = this.tables;
                    this["_tablesObject"]["relations"] = this.relations;
                    this.tables().reduce(function (posX, tableModel) {
                        tableModel.location.x(posX);
                        tableModel.location.y(65);
                        return posX + tableModel.size.width() + tableModel.size.width() / 2;
                    }, 30);
                    this.parameters = DevExpress.JS.Utils.deserializeArray(querySource["Parameters"], function (item) { return new DevExpress.Data.DataSourceParameter(item, serializer); });
                    this.editableName = ko.observable(this.name());
                    this.name = ko.pureComputed({
                        read: this.editableName,
                        write: function (val) { }
                    });
                    this.filterString = new DevExpress.JS.Widgets.FilterStringOptions(this._filterString, null, ko.pureComputed(function () { return (_this.tables().length === 0) && (_this.filterString && _this.filterString.value().length === 0); }));
                    this._initializeFilterStringHelper(this.filterString.helper, this.parameters, parametersEditingEnabled);
                    this.groupFilterString = new DevExpress.JS.Widgets.FilterStringOptions(this._groupFilterString, null, ko.pureComputed(function () { return !_this.columns().some(QueryBuilder.isAggregatedExpression) && (_this.groupFilterString && _this.groupFilterString.value().length === 0); }));
                    this._initializeFilterStringHelper(this.groupFilterString.helper, this.parameters, parametersEditingEnabled, new QueryBuilder.GroupFilterEditorSerializer());
                    var _pageWidth = ko.observable(0);
                    this.pageWidth = ko.pureComputed({
                        read: function () {
                            var result = 500;
                            _this.tables().forEach(function (table) {
                                var right = table.location.x() + table.size.width();
                                if (right > result) {
                                    result = right;
                                }
                            });
                            return Math.max(_pageWidth(), result);
                        },
                        write: function (value) {
                            _pageWidth(value);
                        }
                    });
                    this.pageHeight = ko.pureComputed(function () {
                        var result = 500;
                        _this.tables().forEach(function (table) {
                            var bottom = table.location.y() + table.size.height();
                            if (bottom > result) {
                                result = bottom;
                            }
                        });
                        return result;
                    });
                    this.margins = Designer.Margins.fromString();
                    this.isValid = ko.pureComputed(function () { return _this._validate(); });
                    var isAllColumnsAllTablesExpression = function (column) { return !column.table() && column.itemType() === QueryBuilder.ColumnType.AllColumns; };
                    this.allColumnsInTablesSelected = ko.computed({
                        read: function () { return _this.columns().some(isAllColumnsAllTablesExpression); },
                        write: function (value) {
                            if (value) {
                                _this.columns.push(new QueryBuilder.ColumnExpression({ "@ItemType": "AllColumns" }, _this, serializer));
                            }
                            else {
                                _this.columns.remove(isAllColumnsAllTablesExpression);
                            }
                        }
                    });
                }
                QueryViewModel.prototype._initializeTable = function (table) {
                    this.dbSchemaProvider.getDbTable(table.name())
                        .done(function (dbTable) {
                        table.createColumns(dbTable);
                    });
                };
                QueryViewModel.prototype._initializeFilterStringHelper = function (helper, parameters, parametersEditingEnabled, serializer) {
                    helper.handlers.changeParameter = function (criteria, popupService) {
                        return {
                            data: new DevExpress.JS.Widgets.FilterEditorAddOn(criteria, popupService, "changeParameter", "items", "dxqb-filtereditor-parameterspopup"),
                            templateName: "dxqb-filtereditor-changeparameter"
                        };
                    };
                    helper.mapper.Parameter = QueryBuilder.OperandParameterQBSurface;
                    helper.mapper.Property = QueryBuilder.OperandPropertyQBSurface;
                    helper.canCreateParameters = true;
                    helper.canSelectLists = false;
                    helper.parameters = this.parameters;
                    helper.getDisplayPropertyName = function () { return $.Deferred().resolve("").promise(); };
                    helper.canChoiceParameters = parametersEditingEnabled;
                    if (serializer) {
                        helper.serializer = serializer;
                    }
                };
                QueryViewModel.prototype.getInfo = function () {
                    return QueryBuilder.querySerializationsInfo;
                };
                QueryViewModel.prototype.createChild = function (info) {
                    if (info["@ControlType"] !== "Table") {
                        return _super.prototype.createChild.call(this, info);
                    }
                    var table = new QueryBuilder.TableViewModel(info, this);
                    this._initializeTable(table);
                    this.addChild(table);
                    return table;
                };
                QueryViewModel.prototype.tryToCreateRelationsByFK = function (sourceTable) {
                    var _this = this;
                    if (QueryBuilder.isJoinsResolvingDisabled)
                        return;
                    this.dbSchemaProvider.getDbSchema().done(function (dbSchema) {
                        var dbSourceTable = dbSchema.tables.filter(function (item) { return item.name === sourceTable.name(); })[0];
                        if (dbSourceTable) {
                            dbSourceTable.foreignKeys.forEach(function (fk) {
                                var pkTable = Designer.getFirstItemByPropertyValue(_this.tables.peek(), "name", fk.primaryKeyTable);
                                if (pkTable) {
                                    var column1 = Designer.getFirstItemByPropertyValue(sourceTable.columns(), "name", fk.column);
                                    var column2 = Designer.getFirstItemByPropertyValue(pkTable.columns(), "name", fk.primaryKeyColumn);
                                    if (column1 && column2) {
                                        _this.cerateJoinCondition(column1, column2);
                                    }
                                }
                            });
                        }
                        _this.tables.peek().forEach(function (table) {
                            var dbTable = dbSchema.tables.filter(function (item) { return item.name === table.name(); })[0];
                            if (dbTable) {
                                dbTable.foreignKeys.forEach(function (fk) {
                                    if (fk.primaryKeyTable === sourceTable.name()) {
                                        var column1 = Designer.getFirstItemByPropertyValue(sourceTable.columns(), "name", fk.primaryKeyColumn);
                                        var column2 = Designer.getFirstItemByPropertyValue(table.columns(), "name", fk.column);
                                        if (column1 && column2) {
                                            _this.cerateJoinCondition(column2, column1);
                                        }
                                    }
                                });
                            }
                        });
                    });
                };
                QueryViewModel.prototype.addChild = function (control) {
                    if (control instanceof QueryBuilder.RelationViewModel) {
                        if (this.relations.indexOf(control) > -1)
                            return;
                        control.parentModel(this);
                        this.relations.push(control);
                    }
                    else if (control instanceof QueryBuilder.TableViewModel) {
                        if (this.tables.indexOf(control) > -1)
                            return;
                        control.parentModel(this);
                        if (Designer.getFirstItemByPropertyValue(this.tables(), "actualName", control.name()) !== null) {
                            control.alias(Designer.getUniqueName(this.tables().map(function (table) { return table.actualName(); }), control.name() + '_'));
                        }
                        this.tables.push(control);
                    }
                    else {
                        Designer.NotifyAboutWarning("Attempt to add wrong child control.");
                    }
                };
                QueryViewModel.prototype.removeChild = function (control) {
                    if (control instanceof QueryBuilder.RelationViewModel) {
                        if (this.relations().length < 1)
                            return;
                        var relation = control;
                        var indexRelation = this.relations().indexOf(relation);
                        while (relation.conditions().length > 0)
                            relation.conditions.pop();
                        this.relations.splice(indexRelation, 1);
                    }
                    else if (control instanceof QueryBuilder.TableViewModel) {
                        if (this.tables().length < 1)
                            return;
                        this.tables.splice(this.tables().indexOf(control), 1);
                        var relations = this.relations();
                        for (var i = relations.length - 1; i > -1; i--) {
                            if (relations[i].parentTable() === control || relations[i].nestedTable() === control) {
                                this.removeChild(relations[i]);
                            }
                        }
                        this.sorting.remove(function (item) { return item.isDepended(control.actualName()); });
                        this.grouping.remove(function (item) { return item.isDepended(control.actualName()); });
                        this.columns.remove(function (item) { return item.isDepended(control.actualName()); });
                    }
                    else {
                        Designer.NotifyAboutWarning("Attempt to remove wrong child control.");
                    }
                };
                QueryViewModel.prototype.getTable = function (name) {
                    return Designer.findFirstItemMatchesCondition(this.tables(), function (item) { return item.actualName() === name; });
                };
                QueryViewModel.prototype._findTableInAncestors = function (child, probablyAncestor) {
                    var _this = this;
                    return this.relations().some(function (relation) {
                        return relation.nestedTable() === child && (relation.parentTable() === probablyAncestor || _this._findTableInAncestors(relation.parentTable(), probablyAncestor));
                    });
                };
                QueryViewModel.prototype._findHead = function (table) {
                    var result = null;
                    this.relations().some(function (relation) {
                        if (relation.nestedTable() === table)
                            result = relation;
                        return !!result;
                    });
                    return result ? this._findHead(result.parentTable()) : table;
                };
                QueryViewModel.prototype._isHead = function (table) {
                    return !this.relations().some(function (relation) { return relation.nestedTable() === table; });
                };
                QueryViewModel.prototype._reverseRelations = function (table, relationsToReverse) {
                    relationsToReverse.forEach(function (item) {
                        var tempTable = item.parentTable();
                        item.parentTable(item.nestedTable());
                        item.nestedTable(tempTable);
                        item.conditions().forEach(function (condition) {
                            var tempColumn = condition.parentColumnName();
                            condition.parentColumnName(condition.nestedColumnName());
                            condition.nestedColumnName(tempColumn);
                        });
                    });
                };
                QueryViewModel.prototype.cerateJoinCondition = function (parentColumn, nestedColumn) {
                    var parentTable = parentColumn.parentModel();
                    var nestedTable = nestedColumn.parentModel();
                    if (parentTable === nestedTable)
                        return null;
                    var isColumnsReplaced = false;
                    var relation = Designer.findFirstItemMatchesCondition(this.relations(), function (relation) {
                        isColumnsReplaced = relation.parentTable() === nestedTable && relation.nestedTable() === parentTable;
                        return relation.parentTable() === parentTable && relation.nestedTable() === nestedTable || isColumnsReplaced;
                    });
                    if (relation) {
                    }
                    else if (this._findTableInAncestors(parentTable, nestedTable)) {
                        isColumnsReplaced = true;
                    }
                    else if (this._findHead(parentTable) !== this._findHead(nestedTable) && !this._isHead(nestedTable)) {
                        var parentRelations = this._findAncestorsRelations(parentTable);
                        var nestedRelations = this._findAncestorsRelations(nestedTable);
                        if (parentRelations.outer > nestedRelations.outer) {
                            this._reverseRelations(nestedTable, nestedRelations.relations);
                        }
                        else if (parentRelations.outer < nestedRelations.outer) {
                            this._reverseRelations(parentTable, parentRelations.relations);
                            isColumnsReplaced = true;
                        }
                        else if (parentRelations.inner >= nestedRelations.inner) {
                            this._reverseRelations(nestedTable, nestedRelations.relations);
                        }
                        else if (parentRelations.inner < nestedRelations.inner) {
                            this._reverseRelations(parentTable, parentRelations.relations);
                            isColumnsReplaced = true;
                        }
                    }
                    if (isColumnsReplaced) {
                        var tempTable = parentTable;
                        parentTable = nestedTable;
                        nestedTable = tempTable;
                        var tempColumn = parentColumn;
                        parentColumn = nestedColumn;
                        nestedColumn = tempColumn;
                    }
                    relation = relation || this.createChild({
                        "@ControlType": "Relation",
                        "@Parent": parentTable.actualName(),
                        "@Nested": nestedTable.actualName(),
                        "@Type": "Inner"
                    });
                    var joinCondition = Designer.findFirstItemMatchesCondition(relation.conditions(), function (condition) {
                        return condition.parentColumn() === parentColumn && condition.nestedColumn() === nestedColumn;
                    });
                    if (!joinCondition) {
                        joinCondition = relation.createChild({ "@ControlType": "JoinCondition", "@Parent": parentColumn.name(), "@Nested": nestedColumn.name() });
                    }
                    return joinCondition;
                };
                QueryViewModel.prototype._validate = function () {
                    if (this.tables().length === 0)
                        return false;
                    var tables = this.tables().map(function (table) { return table.actualName(); });
                    this._validateTable(tables, tables[0]);
                    return tables.length < 1;
                };
                QueryViewModel.prototype._validateTable = function (tables, tableName) {
                    var _this = this;
                    var index = tables.indexOf(tableName);
                    if (index < 0)
                        return;
                    tables.splice(index, 1);
                    var connectedTables = this.relations().map(function (relation) {
                        if (relation.parentTableName() === tableName)
                            return relation.nestedTableName();
                        if (relation.nestedTableName() === tableName)
                            return relation.parentTableName();
                        return null;
                    });
                    connectedTables.forEach(function (item) { return _this._validateTable(tables, item); });
                };
                QueryViewModel.prototype.serialize = function (includeRootTag) {
                    if (includeRootTag === void 0) { includeRootTag = false; }
                    return includeRootTag ? { "Query": this.serialize() } : (new DevExpress.JS.Utils.ModelSerializer()).serialize(this);
                };
                QueryViewModel.prototype.save = function () {
                    var data = this.serialize(true);
                    if (this.onSave) {
                        this.onSave(data);
                    }
                    return data;
                };
                QueryViewModel.emptyModel = { "@ItemType": "Query", "Tables": { "SelectedTables": {}, "Relations": {} }, "Columns": {}, "Sorting": {}, "Grouping": {} };
                return QueryViewModel;
            })(QueryBuilder.QueryElementBaseViewModel);
            QueryBuilder.QueryViewModel = QueryViewModel;
            QueryBuilder.querySerializationsInfo = [
                {
                    propertyName: "_tablesObject", modelName: "Tables", info: [
                        { propertyName: "tables", modelName: "SelectedTables", array: true },
                        { propertyName: "relations", modelName: "Relations", array: true }
                    ]
                },
                { propertyName: "parameters", modelName: "Parameters", array: true },
                { propertyName: "type", modelName: "@Type" },
                { propertyName: "name", modelName: "@Name" },
                { propertyName: "editableName", displayName: "Name", editor: QueryBuilder.editorTemplates.text },
                { propertyName: "_filterString", modelName: "Filter", defaultVal: "" },
                { propertyName: "filterString", defaultVal: "", displayName: "Filter", localizationId: "DataAccessUIStringId.FiltersView_Filter", editor: QueryBuilder.editorTemplates.filterEditor },
                { propertyName: "columns", modelName: "Columns", array: true },
                { propertyName: "sorting", modelName: "Sorting", array: true },
                { propertyName: "grouping", modelName: "Grouping", array: true },
                { propertyName: "itemType", modelName: "@ItemType" },
                { propertyName: "allColumnsInTablesSelected", displayName: "Select All (*)", localizationId: "ASPxReportsStringId.ReportDesigner_QueryBuilder_SelectAll", editor: QueryBuilder.editorTemplates.bool },
                { propertyName: "distinct", modelName: "@Distinct", defaultVal: false, from: Designer.parseBool, displayName: "Select distinct", localizationId: "ASPxReportsStringId.ReportDesigner_QueryBuilder_SelectDistinct", editor: QueryBuilder.editorTemplates.bool }
            ];
            var QuerySurface = (function (_super) {
                __extends(QuerySurface, _super);
                function QuerySurface(query, zoom) {
                    var _this = this;
                    if (zoom === void 0) { zoom = ko.observable(1); }
                    _super.call(this, query, {
                        measureUnit: ko.observable("Pixels"),
                        zoom: zoom,
                        dpi: ko.observable(100)
                    }, QuerySurface._unitProperties);
                    this.tables = ko.observableArray();
                    this.relations = ko.observableArray();
                    this.allowMultiselect = false;
                    this.focused = ko.observable(false);
                    this.selected = ko.observable(false);
                    this.underCursor = ko.observable(new Designer.HoverInfo());
                    this.templateName = "dx-query-surface";
                    this.rtl = ko.observable(false);
                    this.measureUnit = this._context.measureUnit;
                    this.dpi = this._context.dpi;
                    this._context = this;
                    this.margins = { bottom: this["_bottom"], left: this["_left"], right: this["_right"], top: this["_top"] };
                    this.zoom = zoom;
                    Designer.createObservableArrayMapCollection(query.tables, this.tables, this._createSurface);
                    Designer.createObservableArrayMapCollection(query.relations, this.relations, this._createSurface);
                    this._joinedColumns = ko.computed(function () {
                        var resultColumns = [];
                        _this.relations().forEach(function (relation) {
                            relation.conditions().forEach(function (condition) {
                                var joinModel = condition.getControlModel();
                                joinModel.parentColumn() && resultColumns.push(joinModel.parentColumn());
                                joinModel.nestedColumn() && resultColumns.push(joinModel.nestedColumn());
                            });
                        });
                        return resultColumns;
                    });
                }
                QuerySurface.prototype.checkParent = function (surfaceParent) { return false; };
                QuerySurface.prototype.getChildrenCollection = function () {
                    return this.tables;
                };
                QuerySurface.prototype.isJoined = function (column) {
                    return this._joinedColumns().indexOf(column.getControlModel()) > -1;
                };
                QuerySurface._unitProperties = {
                    _width: function (o) { return o.pageWidth; },
                    _height: function (o) { return o.pageWidth; },
                    pageWidth: function (o) { return o.pageWidth; },
                    pageHeight: function (o) { return o.pageHeight; },
                    _bottom: function (o) { return o.margins.bottom; },
                    _left: function (o) { return o.margins.left; },
                    _right: function (o) { return o.margins.right; },
                    _top: function (o) { return o.margins.top; }
                };
                return QuerySurface;
            })(Designer.SurfaceElementBase);
            QueryBuilder.QuerySurface = QuerySurface;
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            var ColumnDragHandler = (function (_super) {
                __extends(ColumnDragHandler, _super);
                function ColumnDragHandler(querySurface, selection, undoEngine, snapHelper, dragHelperContent) {
                    _super.call(this, querySurface, selection, undoEngine, snapHelper);
                    this.querySurface = querySurface;
                    this.undoEngine = undoEngine;
                    this._dragColumn = ko.observable(null);
                    this._dragConditionSurface = null;
                    this.dragDropConnector = ko.observable(null);
                    this.cursor = 'arrow';
                    this.containment = '.dxrd-ghost-container';
                    this["helper"] = function (draggable) {
                        dragHelperContent.update(draggable);
                    };
                }
                ColumnDragHandler.prototype._needToCreateRelation = function () {
                    if (!(this.selection.dropTarget && this.selection.dropTarget instanceof QueryBuilder.ColumnSurface))
                        return false;
                    var table = this.selection.dropTarget.getControlModel().parentModel();
                    return table !== this.getDragColumn().parentModel();
                };
                ColumnDragHandler.prototype.startDrag = function (control) {
                    if (control instanceof Designer.Diagram.ConnectionPointSurface) {
                        var condition = control.getControlModel().parentModel();
                        this._dragConditionSurface = Designer.findSurface(condition);
                        if (!this._dragConditionSurface)
                            return;
                        this._dragConditionSurface.isVisible(false);
                        this._dragColumn((condition.startPoint() === control.getControlModel()) ? condition.nestedColumn() : condition.parentColumn());
                    }
                    else if (!(control instanceof QueryBuilder.ColumnSurface)) {
                        throw new Error("ColumnDragHandler can be applied to the Column only.");
                    }
                    else {
                        this._dragColumn(control.getControlModel());
                    }
                    var connectorModel = new Designer.Diagram.RoutedConnectorViewModel({}, this.querySurface().getControlModel());
                    this.dragDropConnector(new Designer.Diagram.RoutedConnectorSurface(connectorModel, this.surface()));
                };
                ColumnDragHandler.prototype.setConnectorPoints = function (cursorPosition) {
                    var startColumn = this._dragColumn(), connectorModel = this.dragDropConnector().getControlModel();
                    if (this._needToCreateRelation()) {
                        var points = Designer.Diagram.determineConnectingPoints(startColumn, this.selection.dropTarget.getControlModel());
                        connectorModel.startPoint().connectingPoint(points.start);
                        connectorModel.endPoint().connectingPoint(points.end);
                    }
                    else {
                        var _leftConnectionPointX = this.querySurface().rtl() ? this.querySurface().pageWidth() - startColumn.leftConnectionPoint.location.x() : startColumn.leftConnectionPoint.location.x();
                        var _rightConnectionPointX = this.querySurface().rtl() ? this.querySurface().pageWidth() - startColumn.rightConnectionPoint.location.x() : startColumn.rightConnectionPoint.location.x();
                        var point = Math.abs(_leftConnectionPointX - cursorPosition.left) > Math.abs(_rightConnectionPointX - cursorPosition.left) ?
                            startColumn.rightConnectionPoint : startColumn.leftConnectionPoint;
                        connectorModel.startPoint().connectingPoint(point);
                        this.dragDropConnector().endPoint().rect({ top: cursorPosition.top, left: cursorPosition.left });
                    }
                };
                ColumnDragHandler.prototype.drag = function (event, ui) {
                    ui.position.left += ui["scroll"].left;
                    ui.position.top += ui["scroll"].top;
                    ui["delta"].left = ui.position.left - this.surface()["underCursor"]().x - 6;
                    ui["delta"].top = ui.position.top - this.surface()["underCursor"]().y - 6;
                    this.setConnectorPoints(this._getAbsoluteSurfacePosition(ui));
                };
                ColumnDragHandler.prototype.doStopDrag = function () {
                    this.dragDropConnector(null);
                    try {
                        var editableCondition = null;
                        if (this._dragConditionSurface && !this._dragConditionSurface.isVisible()) {
                            editableCondition = this._dragConditionSurface.getControlModel();
                            this._dragConditionSurface.isVisible(true);
                        }
                        var query = this.querySurface().getControlModel();
                        if (this._needToCreateRelation()) {
                            var nestedColumn = this.selection.dropTarget.getControlModel();
                            this.undoEngine().start();
                            if (editableCondition) {
                                editableCondition.parentModel().removeChild(editableCondition);
                            }
                            var condition = query.cerateJoinCondition(this._dragColumn(), nestedColumn);
                            this.undoEngine().end();
                            if (condition !== null) {
                                this.selection.initialize(Designer.findSurface(condition));
                            }
                        }
                    }
                    finally {
                        this._dragColumn(null);
                    }
                };
                ColumnDragHandler.prototype.getDragColumn = function () {
                    return this._dragColumn();
                };
                return ColumnDragHandler;
            })(Designer.DragDropHandler);
            QueryBuilder.ColumnDragHandler = ColumnDragHandler;
            var DbObjectDragDropHandler = (function (_super) {
                __extends(DbObjectDragDropHandler, _super);
                function DbObjectDragDropHandler(surface, selection, _undoEngine, snapHelper, dragHelperContent) {
                    var _this = this;
                    _super.call(this, surface, selection, _undoEngine, snapHelper);
                    this._undoEngine = _undoEngine;
                    this._query = function () { return _this._querySurface().getControlModel(); };
                    this._querySurface = surface;
                    this.cursor = 'arrow';
                    this.containment = '.dxqb-designer';
                    this["cursorAt"] = {
                        top: 0,
                        left: 0
                    };
                    this["helper"] = function (draggable) {
                        _super.prototype.helper.call(_this, draggable);
                        _this.recalculateSize(Designer.Size.fromString("199, 123"));
                        dragHelperContent.setContent(new Designer.Rectangle(0, 0, _this._size.width(), _this._size.height()));
                    };
                    this._drop = function (memberInfo, query) {
                        var newControl = query.createChild($.extend({ "@ControlType": "Table", "@Name": memberInfo.name }, QueryBuilder.controlsFactory.controlsMap["Table"].defaultVal));
                        if (newControl.isInitialized()) {
                            query.tryToCreateRelationsByFK(newControl);
                        }
                        else {
                            newControl.isInitialized.subscribe(function () {
                                _this._undoEngine().start();
                                query.tryToCreateRelationsByFK(newControl);
                                _this._undoEngine().end();
                            });
                        }
                        return newControl;
                    };
                }
                DbObjectDragDropHandler.prototype.startDrag = function (draggable) {
                    if (draggable && draggable.name) {
                        this._query().dbSchemaProvider.getDbTable(draggable.name);
                    }
                };
                DbObjectDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
                    if (this.selection.dropTarget) {
                        var position = this._getAbsoluteSurfacePosition(ui);
                        this._querySurface().underCursor().x = position.left - this._querySurface()["absolutePosition"].x();
                        this._querySurface().underCursor().y = position.top - this._querySurface()["absolutePosition"].y();
                        var item = draggable;
                        var control = this._drop(item.data, this._query());
                        this.addControl(control, this._querySurface(), this._size);
                    }
                };
                DbObjectDragDropHandler.prototype.addControl = function (control, dropTargetSurface, size) {
                    dropTargetSurface.getControlModel().addChild(control);
                    var controlSurface = Designer.findSurface(control);
                    controlSurface.rect({ left: dropTargetSurface.underCursor().x, top: dropTargetSurface.underCursor().y, width: size.width() });
                    this.selection.initialize(controlSurface);
                };
                return DbObjectDragDropHandler;
            })(Designer.DragDropHandler);
            QueryBuilder.DbObjectDragDropHandler = DbObjectDragDropHandler;
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            QueryBuilder.controlsFactory = new Designer.ControlsFactory();
            QueryBuilder.ActionId = {
                Save: "dxqb-save",
                DataPreview: "dxqb-data-preview",
                SelectStatementPreview: "dxqb-select-statement-preview"
            };
            function registerControls() {
                Designer.Diagram.registerControls();
                QueryBuilder.controlsFactory.registerControl("Unknown", {
                    info: QueryBuilder.unknownSerializationsInfo,
                    type: Designer.ElementViewModel,
                    nonToolboxItem: true,
                    surfaceType: Designer.SurfaceElementBase,
                    isDeleteDeny: true
                });
                QueryBuilder.controlsFactory.registerControl("Relation", {
                    info: QueryBuilder.relationSerializationInfo,
                    defaultVal: {},
                    surfaceType: QueryBuilder.RelationSurface,
                    popularProperties: [],
                    type: QueryBuilder.RelationViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: true
                });
                QueryBuilder.controlsFactory.registerControl("JoinCondition", {
                    info: QueryBuilder.joinConditionSerializationInfo,
                    defaultVal: {},
                    surfaceType: QueryBuilder.JoinConditionSurface,
                    popularProperties: ["_parentColumnName", "_nestedColumnName", "joinType"],
                    type: QueryBuilder.JoinConditionViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: true
                });
                QueryBuilder.controlsFactory.registerControl("Table", {
                    info: QueryBuilder.tableSerializationInfo,
                    defaultVal: {},
                    surfaceType: QueryBuilder.TableSurface,
                    popularProperties: ["name", "alias", "columns"],
                    type: QueryBuilder.TableViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: true
                });
                QueryBuilder.controlsFactory.registerControl("Column", {
                    info: QueryBuilder.columnSerializationInfo,
                    defaultVal: {},
                    surfaceType: QueryBuilder.ColumnSurface,
                    popularProperties: ["name", "alias", "selected"],
                    type: QueryBuilder.ColumnViewModel,
                    elementActionsTypes: [],
                    nonToolboxItem: true,
                    isDeleteDeny: true
                });
                QueryBuilder.controlsFactory.registerControl("Query", {
                    info: QueryBuilder.querySerializationsInfo,
                    surfaceType: QueryBuilder.QuerySurface,
                    popularProperties: ["name", "filterString", "groupFilterString"],
                    type: QueryBuilder.QueryViewModel,
                    elementActionsTypes: [],
                    isContainer: true,
                    nonToolboxItem: true,
                    isDeleteDeny: true
                });
            }
            QueryBuilder.registerControls = registerControls;
            QueryBuilder.HandlerUri = "DXQB.axd";
            function customizeDesignerActions(designerModel, nextCustomizer) {
                var query = designerModel.model;
                return (function (actions) {
                    var del = Designer.findFirstItemMatchesCondition(actions, function (action) { return action.text === "Delete"; });
                    del.imageClassName = "dx-icon-dxrd-image-recycle-bin";
                    var undo = Designer.findFirstItemMatchesCondition(actions, function (action) { return action.text === "Undo"; });
                    undo.disabled = ko.pureComputed(function () { return designerModel.isLoading() || !designerModel.undoEngine().undoEnabled(); });
                    var redo = Designer.findFirstItemMatchesCondition(actions, function (action) { return action.text === "Redo"; });
                    actions.splice(0, actions.length, del, undo, redo);
                    actions.push({
                        id: QueryBuilder.ActionId.Save,
                        text: "Save",
                        imageClassName: "dxqb-image-save",
                        disabled: designerModel.isLoading,
                        visible: true,
                        hotKey: { ctrlKey: true, keyCode: "S".charCodeAt(0) },
                        clickAction: function () {
                            query().save();
                        },
                        hasSeparator: true
                    });
                    actions.push({
                        id: QueryBuilder.ActionId.DataPreview,
                        text: "Preview Results",
                        imageClassName: "dxrd-image-data-preview",
                        disabled: designerModel.isLoading,
                        visible: true,
                        hotKey: { ctrlKey: true, keyCode: "P".charCodeAt(0) },
                        clickAction: function () {
                            designerModel.showPreview();
                        },
                        hasSeparator: true
                    });
                    actions.push({
                        id: QueryBuilder.ActionId.SelectStatementPreview,
                        text: "Preview Select Statement",
                        imageClassName: "dxrd-image-selectstatement-preview",
                        disabled: designerModel.isLoading,
                        visible: true,
                        hotKey: { ctrlKey: true, keyCode: "E".charCodeAt(0) },
                        clickAction: function () {
                            designerModel.showStatement();
                        },
                        hasSeparator: true
                    });
                    nextCustomizer && nextCustomizer(actions);
                });
            }
            QueryBuilder.previewDataCallback = function (sqlDataSource, queryJSON) {
                return Designer.ajax(Designer.QueryBuilder.HandlerUri, 'getDataPreview', encodeURIComponent(JSON.stringify({
                    connectionString: sqlDataSource.connection.name(),
                    dataSourceBase64: sqlDataSource.base64(),
                    sqlQueryJSON: queryJSON
                })));
            };
            function selectStatementCallback(connectionString, queryJSON, dataSourceBase64) {
                var requestJson = JSON.stringify({
                    connectionString: connectionString,
                    dataSourceBase64: dataSourceBase64,
                    sqlQueryJSON: queryJSON
                });
                return Designer.ajax(QueryBuilder.HandlerUri, "getSelectStatement", encodeURIComponent(requestJson));
            }
            QueryBuilder.selectStatementCallback = selectStatementCallback;
            function updateQueryBuilderSurfaceContentSize($root, surfaceSize, surface) {
                return function () {
                    var rightAreaWidth = $root.find(".dxrd-right-panel").outerWidth();
                    var surfaceWidth = $root.width() - (rightAreaWidth + 5);
                    $root.find(".dxrd-surface-wrapper").css(surface().rtl() ?
                        { "left": rightAreaWidth, "right": 0, "width": surfaceWidth } :
                        { "left": 0, "right": rightAreaWidth, "width": surfaceWidth });
                    surfaceSize(surfaceWidth);
                    surface().pageWidth(surfaceWidth);
                };
            }
            QueryBuilder.updateQueryBuilderSurfaceContentSize = updateQueryBuilderSurfaceContentSize;
            function createIsLoadingFlag(model, dbSchemaProvider) {
                var isDbSchemaLoaded = ko.observable(false);
                dbSchemaProvider.subscribe(function () { isDbSchemaLoaded(false); });
                return ko.pureComputed(function () {
                    dbSchemaProvider.peek().getDbSchema().done(function () {
                        isDbSchemaLoaded(true);
                    });
                    if (isDbSchemaLoaded()) {
                        return model().tables.peek().some(function (table) {
                            return !table.isInitialized();
                        });
                    }
                    else {
                        return true;
                    }
                });
            }
            QueryBuilder.createIsLoadingFlag = createIsLoadingFlag;
            QueryBuilder.isJoinsResolvingDisabled = false;
            function createQueryBuilder(element, data, callbacks, localization, rtl) {
                if (rtl === void 0) { rtl = false; }
                if (localization) {
                    DevExpress.JS.Localization.addCultureInfo({
                        messages: localization
                    });
                }
                DevExpress["config"]({ rtlEnabled: !!rtl });
                registerControls();
                var query = ko.observable(), surface = ko.observable(), treeListOptions = ko.observable();
                query.subscribe(function (newValue) {
                    surface(new QueryBuilder.QuerySurface(newValue));
                    surface().rtl(rtl);
                });
                var init = function (querySource) {
                    query(new QueryBuilder.QueryViewModel(querySource, data.dbSchemaProvider(), !!data.parametersEditingEnabled));
                    treeListOptions({
                        itemsProvider: data.dbSchemaProvider(),
                        selectedPath: ko.observable()
                    });
                };
                data.querySource.subscribe(function (newValue) {
                    init(newValue);
                });
                init(data.querySource());
                var designerModel = Designer.createDesigner(query, surface, QueryBuilder.controlsFactory, undefined, undefined, undefined, rtl);
                designerModel.rootStyle = "dxqb-designer";
                designerModel.dataPreview = {
                    isLoading: ko.observable(false),
                    isVisible: ko.observable(false),
                    title: "Data Preview (First 100 Rows Displayed)",
                    template: "dxqb-data-preview",
                    data: ko.observable(),
                    okButtonHandler: function (e) {
                        e.model.isVisible(false);
                    }
                };
                designerModel.selectStatmentPreview = {
                    isLoading: ko.observable(false),
                    isVisible: ko.observable(false),
                    template: "dxqb-selectstatment-preview",
                    title: "Select Statement Preview",
                    data: ko.observable(),
                    okButtonHandler: function (e) {
                        e.model.isVisible(false);
                    }
                };
                designerModel.parts = [
                    { templateName: "dxrd-surface-template-base", model: designerModel },
                    { templateName: "dxqb-toolbar", model: designerModel },
                    { templateName: "dx-right-panel-lightweight", model: designerModel },
                    { templateName: "dxqb-popup", model: designerModel.dataPreview },
                    { templateName: "dxqb-popup", model: designerModel.selectStatmentPreview }
                ];
                designerModel.columnDragHandler = new QueryBuilder.ColumnDragHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
                designerModel.connectionPointDragHandler = designerModel.columnDragHandler;
                designerModel.resizeHandler["handles"] = "e, w";
                var tablesTop = ko.observable(0);
                designerModel.tabPanel.tabs.length = 0;
                designerModel.tabPanel.tabs.push(new Designer.TabInfo("Properties", "dxqb-properties-wrapper", {
                    editableObject: designerModel.editableObject,
                    properties: new DevExpress.JS.Widgets.ObjectProperties(ko.pureComputed(function () {
                        return designerModel.selection.focused() && designerModel.selection.focused().getControlModel();
                    }), null, 1),
                    fieldListModel: { treeListOptions: treeListOptions },
                    tablesTop: tablesTop
                }));
                designerModel.tabPanel.width(375);
                designerModel.fieldDragHandler = new QueryBuilder.DbObjectDragDropHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
                designerModel.dataBindingsProvider = designerModel.fieldListProvider = new QueryBuilder.QueryBuilderObjectsProvider(query, QueryBuilder.QueryBuilderObjectsProvider.whereClauseObjectsFilter);
                designerModel.dataBindingsGroupProvider = new QueryBuilder.QueryBuilderObjectsProvider(query, QueryBuilder.QueryBuilderObjectsProvider.groupByObjectsFilter);
                designerModel.isLoading = createIsLoadingFlag(designerModel.model, data.dbSchemaProvider);
                designerModel.actionLists = new Designer.ActionLists(surface, designerModel.selection, designerModel.undoEngine, customizeDesignerActions(designerModel, callbacks && callbacks.customizeActions));
                designerModel.selection.focused(surface());
                surface.subscribe(function (newValue) {
                    designerModel.selection.focused(newValue);
                });
                if (!designerModel.isLoading()) {
                    designerModel.undoEngine && designerModel.undoEngine().clearHistory();
                }
                designerModel.isLoading.subscribe(function (value) {
                    designerModel.undoEngine && designerModel.undoEngine().clearHistory();
                });
                designerModel.selection.focused.subscribe(function (newValue) {
                    tablesTop(null);
                    tablesTop.notifySubscribers();
                });
                $(element).empty();
                ko.cleanNode(element);
                ko.applyBindings(designerModel, element);
                var updateSurfaceContentSize_ = updateQueryBuilderSurfaceContentSize($(element).find("." + designerModel.rootStyle), designerModel.surfaceSize, surface);
                surface.subscribe(function () { updateSurfaceContentSize_(); });
                $(window).bind("resize", function () {
                    setTimeout(function () { return updateSurfaceContentSize_(); });
                });
                designerModel.tabPanel.width.subscribe(function () {
                    updateSurfaceContentSize_();
                });
                designerModel.updateSurfaceSize = function () {
                    updateSurfaceContentSize_();
                };
                designerModel.updateSurface = function () {
                    updateSurfaceContentSize_();
                    tablesTop(235);
                };
                designerModel.findControl = function (s, e) {
                    var $childs = $(".dxqb-main").children(".dxrd-control");
                    $childs.each(function (_, child) {
                        var $child = $(child);
                        if ($child.offset().top <= e.clientY && $child.offset().left <= e.clientX) {
                            designerModel.selection.focused(ko.dataFor($child[0]));
                            return;
                        }
                    });
                };
                designerModel.updateSurface();
                designerModel.showPreview = function () {
                    designerModel.dataPreview.isLoading(true);
                    designerModel.dataPreview.isVisible(true);
                    QueryBuilder.previewDataCallback(data.dbSchemaProvider().dataSource(), JSON.stringify(query().serialize(true))).done(function (data) {
                        designerModel.dataPreview.data(JSON.parse(data));
                        designerModel.dataPreview.isLoading(false);
                    }).fail(function (data) {
                        designerModel.dataPreview.isVisible(false);
                        Designer.ShowMessage(Designer.getErrorMessage(data));
                    });
                };
                designerModel.showStatement = function () {
                    designerModel.selectStatmentPreview.isLoading(true);
                    designerModel.selectStatmentPreview.isVisible(true);
                    var dataSource = data.dbSchemaProvider().dataSource();
                    selectStatementCallback(dataSource.connection.name(), JSON.stringify(query().serialize(true)), dataSource.base64()).done(function (data) {
                        designerModel.selectStatmentPreview.data(data["sqlSelectStatement"]);
                        designerModel.selectStatmentPreview.isLoading(false);
                    }).fail(function (data) {
                        designerModel.selectStatmentPreview.isVisible(false);
                        Designer.ShowMessage(Designer.getErrorMessage(data));
                    });
                };
                return designerModel;
            }
            QueryBuilder.createQueryBuilder = createQueryBuilder;
            ko.bindingHandlers['dxQueryBuilder'] = {
                init: function (element, valueAccessor) {
                    var templateHtml = $('#dxrd-querybuilder').text(), $element = $(element).append(templateHtml);
                    var values = ko.unwrap(valueAccessor());
                    var options = ko.unwrap(values.options);
                    values.designerModel(createQueryBuilder($element.children()[0], options.data, options.callbacks, options.localization, options.rtl));
                    return { controlsDescendantBindings: true };
                }
            };
            ko.bindingHandlers['dxdTableView'] = {
                init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var templateHtml = $('#dxd-tableview').text(), $element = $(element).append(templateHtml);
                    var value = ko.unwrap(valueAccessor()), appendFakeRow = ko.observable(false);
                    ko.applyBindings({ data: value, appendFakeRow: appendFakeRow, rtl: !!bindingContext.$root.rtl }, $element.children()[0]);
                    var $titles = $element.find(".dxd-tableview-titles");
                    var $content = $element.find(".dxd-tableview-data table");
                    appendFakeRow($element.height() > $titles.height() + $content.height());
                    $element.find(".dxd-tableview-titles .dxd-tableview-resizable").each(function (index, resizable) {
                        var $title = $(resizable).find(".dxd-tableview-cell-text");
                        var $column = $element.find(".dxd-tableview-data .dxd-tableview-resizable" + index);
                        if (index < value.schema.length - 1) {
                            $(resizable).resizable({
                                handles: "e",
                                alsoResize: $column.parent(),
                                resize: function (e, ui) {
                                    $title.outerWidth(ui.size.width);
                                    $column.outerWidth(ui.size.width);
                                }
                            });
                        }
                        var maxWidth = Math.max($title.width(), $column.width());
                        $title.width(maxWidth);
                        $column.width(maxWidth);
                    });
                    var contentScroll = $(".dxd-tableview-data").dxScrollView("instance");
                    contentScroll.option("onScroll", function (e) {
                        if (e.scrollOffset.left >= 0) {
                            $titles.offset({ left: $content.offset().left, top: $titles.offset().top });
                        }
                    });
                    if (!!bindingContext.$root.rtl) {
                        contentScroll.scrollTo({ left: contentScroll.scrollWidth(), top: 0 });
                    }
                    return { controlsDescendantBindings: true };
                }
            };
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var WizardViewModel = (function () {
                    function WizardViewModel() {
                        var _this = this;
                        this._stepIndex = ko.observable();
                        this._defaultWizardPage = new WizardPage(this, '', "", "");
                        this.width = ko.observable(WizardViewModel.WIZARD_DEFAULT_WIDTH);
                        this.height = ko.observable(WizardViewModel.WIZARD_DEFAULT_HEIGHT);
                        this.headerTemplate = null;
                        this.extendCssClass = null;
                        this.renderedSteps = ko.observableArray([this._defaultWizardPage]);
                        this.isVisible = ko.observable(false);
                        this.indicatorVisible = ko.observable(false);
                        this.container = function (element) { return $(element); };
                        this.isPreviousButtonDisabled = ko.pureComputed({
                            read: function () {
                                if (_this.currentStep.actionPrevious.isDisabled()) {
                                    return true;
                                }
                                for (var i = _this._stepIndex() - 1; i > -1; i--) {
                                    if (_this.steps[i].isVisible) {
                                        return false;
                                    }
                                }
                                return true;
                            },
                            deferEvaluation: true
                        });
                        this._defaultWizardPage.actionPrevious.isDisabled(true);
                        this._defaultWizardPage.actionNext.isDisabled(true);
                        this._defaultWizardPage.actionFinish.isDisabled(true);
                        this._stepIndex.subscribe(function (newIndex) {
                            if (newIndex >= 0 && newIndex < _this.steps.length && _this.renderedSteps.indexOf(_this.steps[newIndex]) < 0) {
                                _this.renderedSteps.push(_this.steps[newIndex]);
                            }
                        });
                        this.isVisible.subscribe(function (newValue) {
                            if (newValue === false)
                                _this.resetState();
                        });
                    }
                    WizardViewModel.prototype._changePage = function (goNext, currentIndex) {
                        this.steps[currentIndex].commit(this._data);
                        var newIndex = currentIndex + (goNext ? 1 : -1);
                        this._goToFirstVisiblePage(goNext, newIndex);
                    };
                    WizardViewModel.prototype._pageBeginComplited = function (goNext, startIndex) {
                        if (this.steps[startIndex].isVisible) {
                            this._stepIndex(startIndex);
                            this.indicatorVisible(false);
                        }
                        else {
                            this._changePage(goNext, startIndex);
                        }
                    };
                    WizardViewModel.prototype._goToFirstVisiblePage = function (goNext, startIndex) {
                        var _this = this;
                        if (startIndex >= this.steps.length || startIndex < 0) {
                            throw new Error("Invalid page index");
                        }
                        var result = this.steps[startIndex].beginAsync(this._data);
                        if (result) {
                            if (result["state"]() === "pending") {
                                this.indicatorVisible(true);
                            }
                            result.done(function () { _this._pageBeginComplited(goNext, startIndex); });
                            result.fail(function () { _this.indicatorVisible(false); });
                        }
                        else {
                            this._pageBeginComplited(goNext, startIndex);
                        }
                    };
                    WizardViewModel.prototype.goToNext = function () {
                        this._changePage(true, this._stepIndex());
                    };
                    WizardViewModel.prototype.goToPrevious = function () {
                        this._changePage(false, this._stepIndex());
                    };
                    Object.defineProperty(WizardViewModel.prototype, "currentStep", {
                        get: function () {
                            return this._stepIndex() > -1 && this._stepIndex() < this.steps.length ? this.steps[this._stepIndex()] : this._defaultWizardPage;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    WizardViewModel.prototype.cancel = function () {
                        this.isVisible(false);
                    };
                    WizardViewModel.prototype.start = function (data) {
                        this._data = data;
                        this._stepIndex(-1);
                        this.isVisible(true);
                        this._goToFirstVisiblePage(true, 0);
                    };
                    WizardViewModel.prototype.finish = function () {
                        this.currentStep.commit(this._data);
                        this.isVisible(false);
                        $(this).triggerHandler("_completed", this._data);
                    };
                    WizardViewModel.prototype.resetState = function () {
                        this.renderedSteps.splice(1);
                        this.steps.forEach(function (step) { step.reset(); });
                    };
                    WizardViewModel.prototype.removeHandler = function () {
                        $(this).off("_completed");
                    };
                    WizardViewModel.prototype.oncompleted = function (handler) {
                        $(this).on("_completed", handler);
                    };
                    WizardViewModel.WIZARD_DEFAULT_WIDTH = "690";
                    WizardViewModel.WIZARD_DEFAULT_HEIGHT = "505";
                    return WizardViewModel;
                })();
                Wizard.WizardViewModel = WizardViewModel;
                var WizardAction = (function () {
                    function WizardAction(handler, text) {
                        this.handler = handler;
                        this.isVisible = ko.observable(true);
                        this.isDisabled = ko.observable(false);
                        this.text = text;
                    }
                    return WizardAction;
                })();
                Wizard.WizardAction = WizardAction;
                var WizardPage = (function () {
                    function WizardPage(wizard, template, title, description) {
                        var _this = this;
                        this._begin = function (data) {
                            _this.isVisible = true;
                        };
                        this.beginAsync = function (data) {
                            _this._begin(data);
                            return null;
                        };
                        this.commit = function (data) { };
                        this.template = template;
                        this.title = title;
                        this.description = description;
                        this.wizard = wizard;
                        this.isVisible = true;
                        this.actionCancel = new WizardAction(function () { _this.wizard.cancel(); }, Designer.getLocalization("Cancel", "ASPxReportsStringId.SearchDialog_Cancel"));
                        this.actionPrevious = new WizardAction(function () { _this.wizard.goToPrevious(); }, Designer.getLocalization("Previous", "ASPxReportsStringId.ReportDesigner_Wizard_Previous"));
                        this.actionNext = new WizardAction(function () { _this.wizard.goToNext(); }, Designer.getLocalization("Next", "ASPxReportsStringId.ReportDesigner_Wizard_Next"));
                        this.actionFinish = new WizardAction(function () { _this.wizard.finish(); }, Designer.getLocalization("Finish", "ASPxReportsStringId.ReportDesigner_Wizard_Finish"));
                    }
                    WizardPage.prototype.reset = function () { };
                    return WizardPage;
                })();
                Wizard.WizardPage = WizardPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SqlDataSourceWizard = (function (_super) {
                    __extends(SqlDataSourceWizard, _super);
                    function SqlDataSourceWizard(connectionStrings, callbacks, disableCustomSql, rtl) {
                        if (rtl === void 0) { rtl = false; }
                        _super.call(this);
                        this.title = Designer.getLocalization("SQL Data Source Wizard", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_Title");
                        this.extendCssClass = "dxrd-sqldatasource-wizard";
                        this.container = function (element) { return $(element).closest('.dx-viewport'); };
                        this.steps = [
                            new Wizard.SelectConnectionString(this, connectionStrings),
                            new Wizard.CreateQueryPage(this, callbacks, disableCustomSql, rtl),
                            new Wizard.ConfigureParametersPage(this)
                        ];
                        this.connectionStrings = connectionStrings;
                    }
                    SqlDataSourceWizard.prototype.start = function (wizardModel) {
                        wizardModel = wizardModel || new SqlDataSourceWizardModel();
                        _super.prototype.start.call(this, wizardModel);
                    };
                    return SqlDataSourceWizard;
                })(Wizard.WizardViewModel);
                Wizard.SqlDataSourceWizard = SqlDataSourceWizard;
                var SqlDataSourceWizardModel = (function () {
                    function SqlDataSourceWizardModel(dataSource, queryName) {
                        var _this = this;
                        this.connectionString = ko.observable();
                        this.dataSource = dataSource || new DevExpress.Data.SqlDataSource({});
                        this.connectionString = this.dataSource.connection.name;
                        if (queryName) {
                            this.dataSource.queries().some(function (value, index) {
                                if (value.name() === queryName) {
                                    _this._queryIndex = index;
                                    return true;
                                }
                                return false;
                            });
                        }
                        else {
                            this._queryIndex = this.dataSource.queries().length;
                            this.connectionString.subscribe(function () {
                                _this.sqlQuery = null;
                            });
                        }
                        this.connectionString = this.dataSource.connection.name;
                    }
                    Object.defineProperty(SqlDataSourceWizardModel.prototype, "sqlQuery", {
                        get: function () {
                            return this.dataSource.queries()[this._queryIndex];
                        },
                        set: function (val) {
                            if (val)
                                val.parent = this.dataSource;
                            this.dataSource.queries()[this._queryIndex] = val;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SqlDataSourceWizardModel.prototype.getQueryIndex = function () {
                        return this._queryIndex;
                    };
                    return SqlDataSourceWizardModel;
                })();
                Wizard.SqlDataSourceWizardModel = SqlDataSourceWizardModel;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SelectConnectionString = (function (_super) {
                    __extends(SelectConnectionString, _super);
                    function SelectConnectionString(wizard, connectionStrings, _showPageForSingleConnectionString) {
                        var _this = this;
                        if (_showPageForSingleConnectionString === void 0) { _showPageForSingleConnectionString = false; }
                        _super.call(this, wizard);
                        this._showPageForSingleConnectionString = _showPageForSingleConnectionString;
                        this.template = "dxrd-page-connectionstring";
                        this.description = Designer.getLocalization("Choose a data connection", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_PageChooseConnection");
                        this.selectedConnectionString = ko.observableArray([]);
                        this._begin = function (data) {
                            if (data.dataSource.base64()) {
                                _this.isVisible = false;
                                _this.selectedConnectionString([]);
                            }
                            else if (_this.connectionStrings.length === 1) {
                                _this.selectedConnectionString([_this.connectionStrings[0]]);
                                _this.isVisible = _this._showPageForSingleConnectionString;
                            }
                            else {
                                var selectedString = Designer.getFirstItemByPropertyValue(_this.connectionStrings, "name", data.connectionString());
                                _this.selectedConnectionString(selectedString ? [selectedString] : []);
                                _this.isVisible = true;
                            }
                        };
                        this.commit = function (data) {
                            if (_this.selectedConnectionString()[0]) {
                                data.connectionString(_this.selectedConnectionString()[0].name);
                            }
                        };
                        this.actionPrevious.isVisible(false);
                        this.actionNext.isDisabled = ko.pureComputed(function () {
                            return _this.selectedConnectionString().length === 0;
                        });
                        this.actionFinish.isDisabled(true);
                        this.connectionStrings = connectionStrings;
                    }
                    return SelectConnectionString;
                })(Wizard.WizardPage);
                Wizard.SelectConnectionString = SelectConnectionString;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var CreateQueryPage = (function (_super) {
                    __extends(CreateQueryPage, _super);
                    function CreateQueryPage(wizard, callbacks, disableCustomSql, rtl) {
                        var _this = this;
                        if (disableCustomSql === void 0) { disableCustomSql = false; }
                        if (rtl === void 0) { rtl = false; }
                        _super.call(this, wizard);
                        this.template = "dxrd-wizard-create-query-page";
                        this.description = DevExpress.Designer.getLocalization("Create a query or select a stored procedure", DevExpress.Designer.StringId.WizardPageConfigureQuery);
                        this.queryTypeItems = [CreateQueryPage.QUERY_TEXT, CreateQueryPage.SP_TEXT];
                        this.selectedQueryType = ko.observable();
                        this.isDataLoadingInProcess = ko.observable(false);
                        this.queryControl = ko.observable();
                        this.runQueryBuilderBtnText = ko.pureComputed(function () {
                            return (!_this._selectStatementControl.sqlString() || _this._selectStatementControl.getQuery().type() === DevExpress.Data.SqlQueryType.tableQuery) ?
                                CreateQueryPage.QB_RUN_TEXT : CreateQueryPage.QB_CREATE_TEXT;
                        });
                        this._begin = function (data) {
                            if (_this._data !== data || !data.sqlQuery) {
                                _this._proceduresList.setQuery(new DevExpress.Data.StoredProcQuery({ "@Name": data.sqlQuery && data.sqlQuery.name() }, data.dataSource));
                                _this._selectStatementControl.setQuery(new DevExpress.Data.CustomSqlQuery({ "@Name": data.sqlQuery && data.sqlQuery.name() }, data.dataSource));
                                _this.selectedQueryType(CreateQueryPage.QUERY_TEXT);
                                _this._data = data;
                            }
                            if (data.sqlQuery) {
                                _this.selectedQueryType(data.sqlQuery.type() === DevExpress.Data.SqlQueryType.storedProcQuery ? CreateQueryPage.SP_TEXT : CreateQueryPage.QUERY_TEXT);
                                _this.queryControl().setQuery(data.sqlQuery);
                            }
                            _this.popupQueryBuilder.isVisible(false);
                        };
                        this.commit = function (data) {
                            var query = _this.queryControl().getQuery();
                            if (query)
                                data.sqlQuery = query;
                        };
                        this._proceduresList = new StoredProceduresQueryControl();
                        this._selectStatementControl = new SelectStatementQueryControl(function (newQuery) {
                            _this.isDataLoadingInProcess(true);
                            var queryJSON = JSON.stringify({ "Query": new DevExpress.JS.Utils.ModelSerializer().serialize(newQuery) });
                            return callbacks.selectStatement(_this._dataSource.connection.name(), queryJSON, _this._dataSource.base64())
                                .fail(function (data) {
                                var error = Designer.getErrorMessage(data);
                                Designer.ShowMessage("Unable to build a SQL string" + (error ? ": " + error : "."));
                            })
                                .always(function () { _this.isDataLoadingInProcess(false); });
                        }, disableCustomSql);
                        this.selectedQueryType.subscribe(function (value) {
                            if (value === _this.queryTypeItems[1]) {
                                _this._retrieveDbSchema(function (dbSchema) {
                                    _this._proceduresList.storedProcedures([]);
                                    _this._proceduresList.storedProcedures(dbSchema.procedures);
                                });
                                _this.queryControl(_this._proceduresList);
                            }
                            else {
                                _this.queryControl(_this._selectStatementControl);
                            }
                        });
                        this.selectedQueryType(CreateQueryPage.QUERY_TEXT);
                        this.popupQueryBuilder = new Wizard.QueryBuilderPopup(function (newQuery) { _this._selectStatementControl.setQuery(newQuery); }, rtl);
                        this.actionPrevious.isDisabled = ko.pureComputed(function () { return _this.isDataLoadingInProcess(); });
                        this.actionNext.isDisabled = ko.pureComputed(function () { return _this.isDataLoadingInProcess() || _this.queryControl().isNextDisabled(); });
                        this.actionFinish.isDisabled = ko.pureComputed(function () { return _this.isDataLoadingInProcess() || _this.queryControl().isFinishDisabled(); });
                        this.actionCancel.handler = function () {
                            _this.isDataLoadingInProcess(false);
                            wizard.cancel();
                        };
                    }
                    Object.defineProperty(CreateQueryPage.prototype, "_dataSource", {
                        get: function () {
                            return this._data && this._data.dataSource;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    CreateQueryPage.prototype._retrieveDbSchema = function (onDoneCallback) {
                        var _this = this;
                        this.isDataLoadingInProcess(true);
                        this._dataSource.dbSchemaProvider.getDbSchema().done(function (dbSchema) {
                            onDoneCallback(dbSchema);
                        }).always(function () { _this.isDataLoadingInProcess(false); });
                    };
                    CreateQueryPage.prototype.runQueryBuilder = function () {
                        var _this = this;
                        this._retrieveDbSchema(function (dbSchema) {
                            var query = _this.queryControl().getQuery();
                            if (query.type() === DevExpress.Data.SqlQueryType.tableQuery) {
                                _this.popupQueryBuilder.show(query, _this._dataSource);
                            }
                            else {
                                _this.popupQueryBuilder.show(new DevExpress.Data.TableQuery({ "@Name": query.name() }, _this._dataSource), _this._dataSource);
                            }
                        });
                    };
                    CreateQueryPage.QUERY_TEXT = Designer.getLocalization("Query", "DataAccessUIStringId.ParametersColumn_QueryName");
                    CreateQueryPage.SP_TEXT = Designer.getLocalization("Stored Procedure", "DataAccessUIStringId.WizardPageConfigureQuery_StoredProcedure");
                    CreateQueryPage.QB_RUN_TEXT = Designer.getLocalization("Run Query Builder...", "DataAccessUIStringId.Button_QueryBuilder");
                    CreateQueryPage.QB_CREATE_TEXT = Designer.getLocalization("Create New Query...", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_CreateNewQuery");
                    return CreateQueryPage;
                })(Wizard.WizardPage);
                Wizard.CreateQueryPage = CreateQueryPage;
                var SelectStatementQueryControl = (function () {
                    function SelectStatementQueryControl(retrieveTableQuerySql, disableCustomSql) {
                        var _this = this;
                        this._tableQueryString = ko.observable("");
                        this._query = ko.observable();
                        this._needToCustomizeParameters = ko.pureComputed(function () {
                            return _this._query() && (_this._query().type() === DevExpress.Data.SqlQueryType.customSqlQuery || _this._query().parameters().length > 0);
                        });
                        this.template = "dxrd-select-control";
                        this.sqlString = ko.pureComputed({
                            read: function () {
                                return _this._query() && _this._query().type() === DevExpress.Data.SqlQueryType.customSqlQuery ? _this._query().sqlString() : _this._tableQueryString();
                            },
                            write: function (val) {
                                if (_this._query().type() !== DevExpress.Data.SqlQueryType.customSqlQuery) {
                                    var customQuery = new DevExpress.Data.CustomSqlQuery({ "@Name": _this._query().name() }, _this._query().parent);
                                    customQuery.parameters(_this._query().parameters());
                                    _this._query(customQuery);
                                }
                                _this._query().sqlString(val);
                            }
                        });
                        this.isNextDisabled = ko.pureComputed(function () {
                            return !_this.sqlString() || !_this._needToCustomizeParameters();
                        });
                        this.isFinishDisabled = ko.pureComputed(function () {
                            return !_this.sqlString() || _this._needToCustomizeParameters();
                        });
                        this._retrieveTableQuerySql = retrieveTableQuerySql;
                        this.disableCustomSql = function () { return disableCustomSql; };
                    }
                    SelectStatementQueryControl.prototype.setQuery = function (query) {
                        var _this = this;
                        if (this._query() !== query && query.type() === DevExpress.Data.SqlQueryType.tableQuery) {
                            this._retrieveTableQuerySql(query).done(function (response) {
                                _this._tableQueryString(response.sqlSelectStatement);
                                _this._query(query);
                            });
                        }
                        else {
                            this._query(query);
                        }
                    };
                    SelectStatementQueryControl.prototype.getQuery = function () {
                        return this._query();
                    };
                    Object.defineProperty(SelectStatementQueryControl.prototype, "runQueryBuilderDisabled", {
                        get: function () {
                            return false;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return SelectStatementQueryControl;
                })();
                Wizard.SelectStatementQueryControl = SelectStatementQueryControl;
                var StoredProceduresQueryControl = (function (_super) {
                    __extends(StoredProceduresQueryControl, _super);
                    function StoredProceduresQueryControl() {
                        var _this = this;
                        _super.call(this);
                        this.template = "dxrd-procedures-control";
                        this.storedProcedures = ko.observableArray([]);
                        this.selectedProcedure = ko.observableArray([]);
                        this.isNextDisabled = ko.pureComputed(function () {
                            return !_this._selectedProcedure || !_this._needToProcessParameters(_this._selectedProcedure);
                        });
                        this.isFinishDisabled = ko.pureComputed(function () {
                            return !_this._selectedProcedure || _this._needToProcessParameters(_this._selectedProcedure);
                        });
                        this.storedProcedures.subscribe(function (newProcedures) {
                            if (!newProcedures) {
                                _this._selectedProcedure = null;
                            }
                            else if (_this._selectedProcedure) {
                                _this._selectedProcedure = Designer.getFirstItemByPropertyValue(_this.storedProcedures(), "name", _this._selectedProcedure.name);
                            }
                            else if (_this._query && _this._query.procName()) {
                                _this._selectedProcedure = Designer.getFirstItemByPropertyValue(_this.storedProcedures(), "name", _this._query.procName());
                            }
                            else {
                                _this._selectedProcedure = newProcedures[0];
                            }
                        });
                    }
                    StoredProceduresQueryControl.prototype._needToProcessParameters = function (procedure) {
                        return procedure.arguments.some(StoredProceduresQueryControl._availableConvertToParameter);
                    };
                    StoredProceduresQueryControl._availableConvertToParameter = function (arg) {
                        return arg.direction !== DevExpress.Data.DBStoredProcedureArgumentDirection.Out;
                    };
                    Object.defineProperty(StoredProceduresQueryControl.prototype, "_selectedProcedure", {
                        get: function () {
                            return this.selectedProcedure()[0];
                        },
                        set: function (value) {
                            this.selectedProcedure(value ? [value] : []);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    StoredProceduresQueryControl.prototype.scrollActiveItem = function (e) {
                        var model = e.model;
                        var procedure = model.selectedProcedure.peek();
                        e.component.scrollToItem(procedure[0]);
                    };
                    StoredProceduresQueryControl.generateStoredProcedureDisplayName = function (procedure) {
                        if (procedure.arguments.length === 0)
                            return procedure.name;
                        return procedure.arguments.reduce(function (value, item, index, array) {
                            return value += item.name + (index < array.length - 1 ? ", " : ")");
                        }, procedure.name + "(");
                    };
                    StoredProceduresQueryControl.prototype.setQuery = function (query) {
                        this._query = query;
                        this._selectedProcedure = Designer.getFirstItemByPropertyValue(this.storedProcedures(), "name", query.procName());
                    };
                    StoredProceduresQueryControl.prototype.getQuery = function () {
                        var _this = this;
                        if (!this._selectedProcedure)
                            return null;
                        var newQuery = new DevExpress.Data.StoredProcQuery({ "@Name": this._query.name() || this._selectedProcedure.name, "ProcName": this._selectedProcedure.name }, this._query.parent);
                        this._selectedProcedure.arguments.forEach(function (arg) {
                            if (StoredProceduresQueryControl._availableConvertToParameter(arg)) {
                                newQuery.parameters.push(Designer.getFirstItemByPropertyValue(_this._query.parameters(), "name", arg.name) || new DevExpress.Data.DataSourceParameter({ "@Name": arg.name, "@Type": DevExpress.Data.DBColumn.GetType(arg.type) }, null, DevExpress.Data.storedProcParameterSerializationsInfo(DevExpress.Data.DBColumn.GetType(arg.type))));
                            }
                        });
                        return newQuery;
                    };
                    Object.defineProperty(StoredProceduresQueryControl.prototype, "runQueryBuilderDisabled", {
                        get: function () {
                            return true;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return StoredProceduresQueryControl;
                })(Designer.Disposable);
                Wizard.StoredProceduresQueryControl = StoredProceduresQueryControl;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var ConfigureParametersPage = (function (_super) {
                    __extends(ConfigureParametersPage, _super);
                    function ConfigureParametersPage(wizard, parametersConverter) {
                        var _this = this;
                        if (parametersConverter === void 0) { parametersConverter = {
                            createParameterViewModel: function (parameter) { return parameter; },
                            getParameterFromViewModel: function (parameterViewModel) { return parameterViewModel; }
                        }; }
                        _super.call(this, wizard);
                        this.parametersConverter = parametersConverter;
                        this.template = "dxrd-page-configure-parameters";
                        this.description = Designer.getLocalization("Configure query parameters", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_PageConfigureParameters");
                        this._begin = function (data) {
                            _this.parametersEditorOptions.hideButtons(data.sqlQuery.type() === DevExpress.Data.SqlQueryType.storedProcQuery);
                            _this.parametersEditorOptions.values(ko.observableArray(data.sqlQuery.parameters().map(function (item) { return _this.parametersConverter.createParameterViewModel(item); })));
                        };
                        this.commit = function (data) {
                            data.sqlQuery.parameters(_this.parametersEditorOptions.values()().map(function (item) { return _this.parametersConverter.getParameterFromViewModel(item); }));
                        };
                        this.actionPrevious.isDisabled(false);
                        this.actionNext.isDisabled(true);
                        this.actionFinish.isDisabled(false);
                        this.parametersEditorOptions = {
                            addHandler: function () {
                                return _this.parametersConverter.createParameterViewModel(new DevExpress.Data.DataSourceParameter({
                                    "@Name": Designer.getUniqueNameForNamedObjectsArray(_this.parametersEditorOptions.values.peek().peek(), "param"),
                                    "@Type": "System.Int32"
                                }));
                            },
                            values: ko.observable(ko.observableArray([])),
                            displayName: "Parameters",
                            level: 0,
                            info: ko.observable({
                                displayName: "Parameters",
                                propertyName: "parameters",
                                modelName: "Parameter",
                                array: true,
                                editor: DevExpress.JS.Widgets.editorTemplates.commonCollection,
                                template: "#dxrd-parameter-collection-item"
                            }),
                            editorTemplate: "#dxrd-wizard-datasource-parameters",
                            hideButtons: ko.observable(false),
                            collapsed: false
                        };
                    }
                    return ConfigureParametersPage;
                })(Wizard.WizardPage);
                Wizard.ConfigureParametersPage = ConfigureParametersPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var QueryBuilderPopup = (function () {
                    function QueryBuilderPopup(applyNewQuery, rtl) {
                        var _this = this;
                        if (rtl === void 0) { rtl = false; }
                        this._query = ko.observable(null);
                        this._dbSchemaProvider = ko.observable(null);
                        this.designer = ko.observable();
                        this.qbOptions = ko.observable(null);
                        this.okButtonDisabled = ko.pureComputed(function () { return _this.designer() && !_this.designer().model().isValid(); });
                        this.isVisible = ko.observable(false);
                        this._applyQuery = applyNewQuery;
                        this._rtl = rtl;
                    }
                    QueryBuilderPopup.prototype.show = function (query, dataSource) {
                        this._dataSource = dataSource;
                        this._dbSchemaProvider(dataSource.dbSchemaProvider);
                        this._query(new DevExpress.JS.Utils.ModelSerializer().serialize(query));
                        this.qbOptions(this.qbOptions() || {
                            data: {
                                querySource: this._query,
                                dbSchemaProvider: this._dbSchemaProvider,
                                parametersEditingEnabled: true
                            },
                            callbacks: { customizeActions: QueryBuilderPopup.customizeQueryBuilderActions },
                            rtl: this._rtl
                        });
                        this.isVisible(true);
                        this.designer().updateSurface();
                    };
                    QueryBuilderPopup.prototype.cancelHandler = function () {
                        this.isVisible(false);
                    };
                    QueryBuilderPopup.prototype.previewHandler = function () {
                        this.designer().showPreview();
                    };
                    QueryBuilderPopup.prototype.okHandler = function () {
                        this.isVisible(false);
                        this._applyQuery(new DevExpress.Data.TableQuery(this.designer().model().serialize(), this._dataSource));
                    };
                    QueryBuilderPopup.prototype.onHiddenHandler = function () {
                        this.designer().dataPreview.isVisible(false);
                    };
                    QueryBuilderPopup.customizeQueryBuilderActions = function (actions) {
                        var del = Designer.findFirstItemMatchesCondition(actions, function (action) { return action.text === "Delete"; }), undo = Designer.findFirstItemMatchesCondition(actions, function (action) { return action.text === "Undo"; }), redo = Designer.findFirstItemMatchesCondition(actions, function (action) { return action.text === "Redo"; });
                        actions.splice(0, actions.length, del, undo, redo);
                    };
                    return QueryBuilderPopup;
                })();
                Wizard.QueryBuilderPopup = QueryBuilderPopup;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="sources/metadata.ts" />
/// <reference path="sources/data/dbSchema.ts" />
/// <reference path="sources/data/dbObjectsProvider.ts" />
/// <reference path="sources/queryBuilderElement.ts" />
/// <reference path="sources/queryModel/relation.ts" />
/// <reference path="sources/queryModel/table.ts" />
/// <reference path="sources/queryBuilder.ts" />
/// <reference path="sources/dragdrop.ts" />
/// <reference path="sources/initializer.ts" />
/// <reference path="sources/wizard/wizardCore.ts" />
/// <reference path="sources/wizard/sqlDataSourceWizard/wizardModel.ts" />
/// <reference path="sources/wizard/sqlDataSourceWizard/selectConnectionString.ts" />
/// <reference path="sources/wizard/sqlDataSourceWizard/createQueryPage.ts" />
/// <reference path="sources/wizard/sqlDataSourceWizard/configureParametersPage.ts" />
/// <reference path="sources/wizard/sqlDataSourceWizard/queryBuilderPopup.ts" /> 
var DevExpress;
(function (DevExpress) {
    var Data;
    (function (Data) {
        Data.dsParameterNameValidationRules = [{
                type: "custom",
                validationCallback: function (options) { return DataSourceParameter.validateName(options.value); },
                message: DevExpress.Designer.getLocalization('Name is required and should be a valid identifier.')
            }];
        Data.parameterValueSerializationsInfo = { propertyName: "value", displayName: "Value", editor: DevExpress.JS.Widgets.editorTemplates.text };
        var dsParameterName = { propertyName: "name", displayName: "Name", validationRules: Data.dsParameterNameValidationRules, editor: DevExpress.JS.Widgets.editorTemplates.text };
        var dsParameterType = {
            propertyName: "type", displayName: "Type", modelName: "@Type", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                "System.String": "String",
                "System.DateTime": "Date",
                "System.Int16": "Number (16 bit integer)",
                "System.Int32": "Number (32 bit integer)",
                "System.Int64": "Number (64 bit integer)",
                "System.Single": "Number (floating-point)",
                "System.Double": "Number (double-precision floating-point)",
                "System.Decimal": "Number (decimal)",
                "System.Boolean": "Boolean",
                "System.Guid": "Guid",
                "DevExpress.DataAccess.Expression": "Expression"
            }
        };
        var baseDSParamterSerializationsInfo = [
            { propertyName: "_name", modelName: "@Name" },
            { propertyName: "_value", modelName: "#text" },
            Data.parameterValueSerializationsInfo,
            { propertyName: "itemType", modelName: "@ItemType" }
        ];
        Data.dsParameterSerializationInfo = [dsParameterName, dsParameterType].concat(baseDSParamterSerializationsInfo);
        function storedProcParameterSerializationsInfo(type) {
            var copyParamType = $.extend(true, [], dsParameterType);
            var newValues = {};
            newValues[type] = dsParameterType.values[type];
            newValues["DevExpress.DataAccess.Expression"] = dsParameterType.values["DevExpress.DataAccess.Expression"];
            copyParamType.values = newValues;
            return [
                $.extend({ disabled: true }, dsParameterName),
                copyParamType
            ].concat(baseDSParamterSerializationsInfo);
        }
        Data.storedProcParameterSerializationsInfo = storedProcParameterSerializationsInfo;
        var DataSourceParameterTypeValue = (function () {
            function DataSourceParameterTypeValue(name, defaultValue, valueConverter) {
                this.name = name;
                this.defaultValue = defaultValue;
                this.valueConverter = valueConverter;
            }
            Object.defineProperty(DataSourceParameterTypeValue.prototype, "specifics", {
                get: function () {
                    return Data.DBColumn.GetSpecific(this.name);
                },
                enumerable: true,
                configurable: true
            });
            return DataSourceParameterTypeValue;
        })();
        var tryParseDate = function (val) {
            var date;
            try {
                date = DevExpress.JS.Localization.parseDate(val);
            }
            catch (e) {
                date = dateDefaultValue();
            }
            return date;
        };
        var dateDefaultValue = function () {
            var date = new Date();
            date.setHours(0, 0, 0, 0);
            return date;
        };
        var DataSourceParameter = (function (_super) {
            __extends(DataSourceParameter, _super);
            function DataSourceParameter(model, serializer, _serializationsInfo) {
                var _this = this;
                if (_serializationsInfo === void 0) { _serializationsInfo = Data.dsParameterSerializationInfo; }
                _super.call(this);
                this._serializationsInfo = _serializationsInfo;
                this._valueInfo = ko.observable(Data.parameterValueSerializationsInfo);
                serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                serializer.deserialize(this, $.extend(model, { "@ItemType": "Parameter" }));
                this.name = ko.pureComputed({
                    read: function () { return _this._name(); },
                    write: function (value) { if (DataSourceParameter.validateName(value))
                        _this._name(value); }
                });
                this._expressionValue = ko.observable({ value: this._value });
                this._disposables.push(this.type.subscribe(function (val) { _this._updateValueInfo(val); }));
                this.value = ko.pureComputed({
                    read: function () {
                        return _this.type() === "DevExpress.DataAccess.Expression" ? _this._expressionValue() : _this._value();
                    },
                    write: function (val) {
                        _this._value(val);
                    }
                });
                this._updateValueInfo(this.type.peek());
            }
            DataSourceParameter.prototype._getTypeValue = function (typeName) {
                var result = DataSourceParameter.typeValues.filter(function (type) { return type.name === typeName; });
                if (result.length > 0)
                    return result[0];
                return { name: typeName, defaultValue: null, specifics: "String", disableEditor: true };
            };
            DataSourceParameter.prototype._tryConvertValue = function (value, typeValue) {
                if (!DataSourceParameter._isValueValid(value))
                    return typeValue.defaultValue;
                var converter = typeValue.valueConverter || (function (val) { return val; }), newValue = converter(value);
                return DataSourceParameter._isValueValid(newValue) ? newValue : typeValue.defaultValue;
            };
            DataSourceParameter._isValueValid = function (value) {
                return value !== void 0 && value !== null && !isNaN(typeof value === "string" ? "" : value);
            };
            DataSourceParameter.prototype._updateValueInfo = function (newType) {
                var typeValue = this._getTypeValue(newType);
                var newValue = this._tryConvertValue(this._value(), typeValue);
                var expressionOptions = this._expressionValue.peek();
                this._expressionValue(null);
                this._value(null);
                this._valueInfo($.extend({}, Data.parameterValueSerializationsInfo, { editor: DevExpress.Designer.getEditorType(typeValue.name), disabled: typeValue.disableEditor === true }));
                this._expressionValue(expressionOptions);
                this._value(newValue);
            };
            Object.defineProperty(DataSourceParameter.prototype, "specifics", {
                get: function () {
                    var _this = this;
                    var result = DataSourceParameter.typeValues.filter(function (type) { return type.name === _this.type(); });
                    if (result.length > 0)
                        return result[0].specifics;
                    return "string";
                },
                enumerable: true,
                configurable: true
            });
            DataSourceParameter.validateName = function (nameCandidate) {
                return nameCandidate && !nameCandidate.match(/[~`!"№;%\^:\?*\(\)&\-\+={}\[\]\|\\\/,\.<>'\s]/);
            };
            DataSourceParameter.prototype.getInfo = function () {
                if (this.type) {
                    var info = $.extend(true, [], this._serializationsInfo);
                    info.splice(info.indexOf(info.filter(function (prop) { return prop.propertyName === "value"; })[0]), 1, this._valueInfo());
                    return info;
                }
                return this._serializationsInfo;
            };
            DataSourceParameter.typeValues = [
                new DataSourceParameterTypeValue("System.DateTime", dateDefaultValue(), tryParseDate),
                new DataSourceParameterTypeValue("System.String", ""),
                new DataSourceParameterTypeValue("System.SByte", 0, function (val) { return parseInt(val); }),
                new DataSourceParameterTypeValue("System.Int16", 0, function (val) { return parseInt(val); }),
                new DataSourceParameterTypeValue("System.Int32", 0, function (val) { return parseInt(val); }),
                new DataSourceParameterTypeValue("System.Int64", "0"),
                new DataSourceParameterTypeValue("System.Byte", 0, function (val) { return parseInt(val); }),
                new DataSourceParameterTypeValue("System.UInt16", 0, function (val) { return parseInt(val); }),
                new DataSourceParameterTypeValue("System.UInt32", 0, function (val) { return parseInt(val); }),
                new DataSourceParameterTypeValue("System.UInt64", "0"),
                new DataSourceParameterTypeValue("System.Decimal", "0"),
                new DataSourceParameterTypeValue("System.Double", 0, function (val) { return parseFloat(val); }),
                new DataSourceParameterTypeValue("System.Single", 0, function (val) { return parseFloat(val); }),
                new DataSourceParameterTypeValue("System.Boolean", false, function (val) { return val !== void 0 ? String(val).toLowerCase() === "true" : val; }),
                new DataSourceParameterTypeValue("System.Guid", "00000000-0000-0000-0000-000000000000"),
                new DataSourceParameterTypeValue("DevExpress.DataAccess.Expression", ""),
                new DataSourceParameterTypeValue("System.Char", ""),
            ];
            return DataSourceParameter;
        })(DevExpress.Designer.Disposable);
        Data.DataSourceParameter = DataSourceParameter;
    })(Data = DevExpress.Data || (DevExpress.Data = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Data;
    (function (Data) {
        var MasterDetailEditorPopupManager = (function () {
            function MasterDetailEditorPopupManager(target, popupService, action, popupItems) {
                var _this = this;
                this.showPopup = function (args) {
                    _this._popupService.title("");
                    _this._updateActions(_this.target);
                    _this._popupService.target(args.element);
                    _this._popupService.visible(true);
                };
                this.target = target;
                this._action = action;
                this._popupService = popupService;
                this._popupItems = popupItems;
            }
            MasterDetailEditorPopupManager.prototype._updateActions = function (viewModel) {
                var _this = this;
                this._popupService.data({
                    data: this._popupItems,
                    template: "dx-filtereditor-popup-common",
                    click: function (data) {
                        viewModel[_this._action](data);
                        _this._popupService.visible(false);
                    }
                });
            };
            return MasterDetailEditorPopupManager;
        })();
        Data.MasterDetailEditorPopupManager = MasterDetailEditorPopupManager;
        var MasterDetailEditor = (function () {
            function MasterDetailEditor(dataSource, saveCallBack) {
                var _this = this;
                this.isValid = ko.observable(true);
                this.popupVisible = ko.observable(false);
                this.loadPanelVisible = ko.observable(false);
                this.buttonItems = [];
                this.masterQueries = ko.observableArray();
                this.title = DevExpress.Designer.getLocalization('Master-Detail Relation Editor', DevExpress.Designer.StringId.MasterDetailRelationsEditor);
                this.popupService = new DevExpress.JS.Utils.PopupService();
                this.save = function () {
                    var emptyFieldsExist = dataSource.relations().some(function (relation) {
                        return !relation.detailQuery() || !relation.masterQuery() ||
                            relation.keyColumns().some(function (column) { return (!column.detailColumn() || !column.masterColumn()); });
                    });
                    if (emptyFieldsExist) {
                        DevExpress.Designer.ShowMessage(DevExpress.Designer.getLocalization("Some fields are empty. Please fill all empty fields or remove the corresponding conditions to proceed."));
                    }
                    else {
                        saveCallBack().done(function () { _this.popupVisible(false); });
                    }
                };
                this.createRelation = function (target) {
                    var popupItems = dataSource.resultSet.tables()
                        .filter(function (table) { return table.tableName() !== target.queryName; })
                        .map(function (table) { return { name: table.tableName() }; });
                    return {
                        data: new MasterDetailEditorPopupManager(target, _this.popupService, "create", popupItems),
                        templateName: "dx-filtereditor-create"
                    };
                };
                this.setColumn = function (target) {
                    var table = DevExpress.Designer.getFirstItemByPropertyValue(dataSource.resultSet.tables(), "tableName", target.queryName);
                    return {
                        data: new MasterDetailEditorPopupManager(target, _this.popupService, "setColumn", table ? table.columns() : []),
                        templateName: "dx-masterdetail-editor-setColumn"
                    };
                };
                this._createMainPopupButtons();
                var masterQueries = {};
                dataSource.resultSet.tables().forEach(function (table) {
                    masterQueries[table.tableName()] = new MasterQuerySurface(table.tableName(), dataSource.relations);
                });
                dataSource.relations().forEach(function (relation) {
                    masterQueries[relation.masterQuery()] = masterQueries[relation.masterQuery()] || new MasterQuerySurface(relation.masterQuery(), dataSource.relations);
                    masterQueries[relation.masterQuery()].add(relation);
                });
                this.masterQueries($.map(masterQueries, function (value) { return value; }));
            }
            MasterDetailEditor.prototype._createMainPopupButtons = function () {
                var self = this;
                this.buttonItems = [
                    { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: DevExpress.Designer.getLocalization('Save', DevExpress.Designer.StringId.DataAccessBtnOK), onClick: function () { self.save(); } } },
                    { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: DevExpress.Designer.getLocalization('Cancel', DevExpress.Designer.StringId.DataAccessBtnCancel), onClick: function () { self.popupVisible(false); } } }
                ];
            };
            return MasterDetailEditor;
        })();
        Data.MasterDetailEditor = MasterDetailEditor;
        var MasterQuerySurface = (function () {
            function MasterQuerySurface(masterQueryName, relations) {
                var _this = this;
                this.relations = ko.observableArray();
                this.queryName = masterQueryName;
                this.add = function (relation) {
                    _this.relations.push(new MasterDetailRelationSurface(relation, _this));
                };
                this.create = function (detailQueryItem) {
                    var newRelation = new Data.MasterDetailRelation({ "@Master": _this.queryName, "@Detail": detailQueryItem.name });
                    if (DevExpress.Designer.getFirstItemByPropertyValue(_this.relations(), "relationName", newRelation.name())) {
                        newRelation.name(DevExpress.Designer.getUniqueName(_this.relations().map(function (item) { return item.relationName(); }), newRelation.name() + '_'));
                    }
                    newRelation.createKeyColumn();
                    _this.add(newRelation);
                    relations.push(newRelation);
                };
                this.remove = function (relationSurface) {
                    _this.relations.remove(relationSurface);
                    relations.remove(function (item) { return item.name === relationSurface.relationName; });
                };
            }
            return MasterQuerySurface;
        })();
        Data.MasterQuerySurface = MasterQuerySurface;
        var MasterDetailRelationSurface = (function () {
            function MasterDetailRelationSurface(relation, parent) {
                var _this = this;
                this.isEditable = ko.observable(false);
                this.relationName = relation.name;
                this.keyColumns = ko.pureComputed(function () {
                    return relation.keyColumns().map(function (item) {
                        return {
                            master: new KeyColumnSurface(item.masterColumn, relation.masterQuery()),
                            detail: new KeyColumnSurface(item.detailColumn, relation.detailQuery())
                        };
                    });
                });
                this.create = function () {
                    relation.createKeyColumn();
                };
                this.remove = function (data) {
                    relation.keyColumns.remove(function (item) { return item.masterColumn === data.master.column && item.detailColumn === data.detail.column; });
                    if (relation.keyColumns().length === 0)
                        parent.remove(_this);
                };
            }
            return MasterDetailRelationSurface;
        })();
        Data.MasterDetailRelationSurface = MasterDetailRelationSurface;
        var KeyColumnSurface = (function () {
            function KeyColumnSurface(column, queryName) {
                var _this = this;
                this.column = column;
                this.queryName = queryName;
                this.setColumn = function (resultColumn) {
                    _this.column(resultColumn.name());
                };
            }
            return KeyColumnSurface;
        })();
        Data.KeyColumnSurface = KeyColumnSurface;
    })(Data = DevExpress.Data || (DevExpress.Data = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Data;
    (function (Data) {
        var resultSetSerializationInfo = [
            { propertyName: "name", modelName: "@Name" },
            { propertyName: "tables", modelName: "Views", array: true }
        ];
        var ResultSet = (function () {
            function ResultSet(model, serializer) {
                serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                serializer.deserialize(this, model);
                this.tables = DevExpress.JS.Utils.deserializeArray(model["Views"], function (item) {
                    return new ResultTable(item, serializer);
                });
            }
            ResultSet.prototype.getInfo = function () {
                return resultSetSerializationInfo;
            };
            return ResultSet;
        })();
        Data.ResultSet = ResultSet;
        var resultTableSerializationInfo = [
            { propertyName: "tableName", modelName: "@Name" },
            {
                propertyName: "columns", modelName: "Fields", array: true, info: [
                    { propertyName: "name", modelName: "@Name" },
                    { propertyName: "propertyType", modelName: "@Type" }
                ]
            }
        ];
        var ResultTable = (function () {
            function ResultTable(model, serializer) {
                serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                serializer.deserialize(this, model);
            }
            ResultTable.prototype.getInfo = function () {
                return resultTableSerializationInfo;
            };
            return ResultTable;
        })();
        Data.ResultTable = ResultTable;
    })(Data = DevExpress.Data || (DevExpress.Data = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Data;
    (function (Data) {
        Data.SqlQueryType = {
            customSqlQuery: "CustomSqlQuery",
            tableQuery: "SelectQuery",
            storedProcQuery: "StoredProcQuery"
        };
        function generateQueryUniqueName(queries, query) {
            var name = (query.name() || query.generateName()).replace('.', '_');
            return DevExpress.Designer.findFirstItemMatchesCondition(queries, function (item) { return item.name() === name; }) ?
                DevExpress.Designer.getUniqueNameForNamedObjectsArray(queries, name + "_") : name;
        }
        Data.generateQueryUniqueName = generateQueryUniqueName;
        var SqlDataSource = (function (_super) {
            __extends(SqlDataSource, _super);
            function SqlDataSource(model, base64, serializer) {
                var _this = this;
                _super.call(this);
                serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                serializer.deserialize(this, $.extend(model, { "@ItemType": "SqlDataSource" }));
                this.base64 = function () { return base64; };
                this.queries = DevExpress.JS.Utils.deserializeArray(model["Queries"], function (item) {
                    if (item["@Type"] === Data.SqlQueryType.customSqlQuery) {
                        return new CustomSqlQuery(item, _this, serializer);
                    }
                    else if (item["@Type"] === Data.SqlQueryType.tableQuery) {
                        return new TableQuery(item, _this, serializer);
                    }
                    else if (item["@Type"] === Data.SqlQueryType.storedProcQuery) {
                        return new StoredProcQuery(item, _this, serializer);
                    }
                    else {
                        throw new Error("Unknown sql query type.");
                    }
                });
                this.relations = DevExpress.JS.Utils.deserializeArray(model["Relations"], function (item) {
                    return new MasterDetailRelation(item, serializer);
                });
                this.dbSchemaProvider = new Data.DBSchemaProvider(this);
                this._disposables.push(this.connection.name.subscribe(function () {
                    _this.queries([]);
                    _this.relations([]);
                    _this.resultSet = null;
                }));
            }
            SqlDataSource.prototype.getInfo = function () {
                return sqlDataSourceSerializationInfo;
            };
            return SqlDataSource;
        })(DevExpress.Designer.Disposable);
        Data.SqlDataSource = SqlDataSource;
        var SqlDataSourceConnection = (function () {
            function SqlDataSourceConnection(model, serializer) {
                this.name = ko.observable();
                serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                serializer.deserialize(this, model);
            }
            SqlDataSourceConnection.from = function (model, serializer) {
                return new SqlDataSourceConnection(model, serializer);
            };
            SqlDataSourceConnection.prototype.getInfo = function () {
                return sqlDataSourceConnectionSerializationInfo;
            };
            return SqlDataSourceConnection;
        })();
        Data.SqlDataSourceConnection = SqlDataSourceConnection;
        var sqlDataSourceConnectionSerializationInfo = [
            { propertyName: "name", modelName: "@Name" },
            { propertyName: "fromAppConfig", modelName: "@FromAppConfig", defaultVal: false, from: DevExpress.Designer.parseBool }
        ];
        Data.masterDetailRelationSerializationsInfo = [
            { propertyName: "masterQuery", modelName: "@Master" },
            { propertyName: "detailQuery", modelName: "@Detail" },
            { propertyName: "_customName", modelName: "@Name" },
            {
                propertyName: "keyColumns", modelName: "KeyColumns", array: true, info: [
                    { propertyName: "masterColumn", modelName: "@Master" },
                    { propertyName: "detailColumn", modelName: "@Detail" },
                    { propertyName: "itemType", modelName: "@ItemType" }
                ]
            },
            { propertyName: "itemType", modelName: "@ItemType" }
        ];
        var sqlDataSourceSerializationInfo = [
            { propertyName: "name", modelName: "Name" },
            { propertyName: "connection", modelName: "Connection", from: SqlDataSourceConnection.from },
            { propertyName: "queries", modelName: "Query", array: true },
            { propertyName: "relations", modelName: "Relations", array: true },
            {
                propertyName: "resultSet", modelName: "ResultSchema", from: function (val, serializer) {
                    return !val ? null : new Data.ResultSet(val["DataSet"], serializer);
                }
            },
            { propertyName: "itemType", modelName: "@ItemType" }
        ];
        Data.customQuerySerializationsInfo = [
            { propertyName: "type", modelName: "@Type" },
            { propertyName: "name", modelName: "@Name" },
            { propertyName: "sqlString", modelName: "Sql", defaultVal: "" },
            { propertyName: "parameters", modelName: "Parameters", array: true },
            { propertyName: "itemType", modelName: "@ItemType" }
        ];
        var CustomSqlQuery = (function () {
            function CustomSqlQuery(model, parent, serializer) {
                this.parent = parent;
                (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(this, $.extend(model, { "@ItemType": "Query" }));
                this.type = ko.pureComputed(function () { return Data.SqlQueryType.customSqlQuery; });
                this.parameters = DevExpress.JS.Utils.deserializeArray(model["Parameters"], function (item) {
                    return new Data.DataSourceParameter(item, serializer);
                });
            }
            CustomSqlQuery.prototype.getInfo = function () {
                return Data.customQuerySerializationsInfo;
            };
            CustomSqlQuery.prototype.generateName = function () {
                return "CustomSqlQuery";
            };
            return CustomSqlQuery;
        })();
        Data.CustomSqlQuery = CustomSqlQuery;
        Data.tableQuerySerializationsInfo = [
            { propertyName: "type", modelName: "@Type" },
            { propertyName: "name", modelName: "@Name" },
            { propertyName: "parameters", modelName: "Parameters", array: true },
            {
                propertyName: "_tablesObject", modelName: "Tables", info: [
                    {
                        propertyName: "tables", modelName: "SelectedTables", array: true, info: [
                            { propertyName: "name", modelName: "@Name" },
                            { propertyName: "alias", modelName: "@Alias" }
                        ]
                    }
                ]
            },
            { propertyName: "filterString", modelName: "Filter", defaultVal: "" },
            { propertyName: "itemType", modelName: "@ItemType" }
        ];
        var TableQuery = (function () {
            function TableQuery(model, parent, serializer) {
                this.parent = parent;
                (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(this, $.extend(model, { "@ItemType": "Query" }));
                this.type = ko.pureComputed(function () { return Data.SqlQueryType.tableQuery; });
                this.parameters = DevExpress.JS.Utils.deserializeArray(model["Parameters"], function (item) { return new Data.DataSourceParameter(item, serializer); });
            }
            TableQuery.prototype.tables = function () {
                return this["_tablesObject"]["tables"]();
            };
            TableQuery.prototype.getInfo = function () {
                return Data.tableQuerySerializationsInfo;
            };
            TableQuery.prototype.generateName = function () {
                return this.tables().length > 0 ? (this.tables()[0].alias() || this.tables()[0].name()) : "SelectQuery";
            };
            return TableQuery;
        })();
        Data.TableQuery = TableQuery;
        Data.storedProcQuerySerializationsInfo = [
            { propertyName: "type", modelName: "@Type" },
            { propertyName: "name", modelName: "@Name" },
            { propertyName: "procName", modelName: "ProcName" },
            { propertyName: "parameters", modelName: "Parameters", array: true },
            { propertyName: "itemType", modelName: "@ItemType" }
        ];
        var StoredProcQuery = (function () {
            function StoredProcQuery(model, parent, serializer) {
                this.parent = parent;
                (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(this, $.extend(model, { "@ItemType": "Query" }));
                this.type = ko.pureComputed(function () { return Data.SqlQueryType.storedProcQuery; });
                this.parameters = DevExpress.JS.Utils.deserializeArray(model["Parameters"], function (item) { return new Data.DataSourceParameter(item, serializer, Data.storedProcParameterSerializationsInfo(item["@Type"])); });
            }
            StoredProcQuery.prototype.getInfo = function () {
                return Data.storedProcQuerySerializationsInfo;
            };
            StoredProcQuery.prototype.generateName = function () {
                return this.procName() || "Query";
            };
            return StoredProcQuery;
        })();
        Data.StoredProcQuery = StoredProcQuery;
        var MasterDetailRelation = (function () {
            function MasterDetailRelation(model, serializer) {
                var _this = this;
                this.name = ko.pureComputed({
                    read: function () {
                        return _this._customName() || _this.masterQuery() + _this.detailQuery();
                    },
                    write: function (value) {
                        _this._customName(value);
                    },
                    deferEvaluation: true
                });
                (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(this, $.extend(model, { "@ItemType": "Relation" }));
            }
            MasterDetailRelation.prototype.createKeyColumn = function () {
                var newKeyColumn = {
                    masterColumn: ko.observable(),
                    detailColumn: ko.observable(),
                    itemType: "KeyColumn"
                };
                this.keyColumns.push(newKeyColumn);
            };
            MasterDetailRelation.prototype.getInfo = function () {
                return Data.masterDetailRelationSerializationsInfo;
            };
            return MasterDetailRelation;
        })();
        Data.MasterDetailRelation = MasterDetailRelation;
    })(Data = DevExpress.Data || (DevExpress.Data = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            var OperandPropertyQBSurface = (function (_super) {
                __extends(OperandPropertyQBSurface, _super);
                function OperandPropertyQBSurface(operator, parent, fieldListProvider, path) {
                    _super.call(this, operator, parent, fieldListProvider, path);
                }
                OperandPropertyQBSurface.prototype._updateSpecifics = function () {
                    OperandPropertyQBSurface.updateSpecifics(this);
                };
                OperandPropertyQBSurface.updateSpecifics = function (propertySurface) {
                    var fieldList = ko.unwrap(propertySurface.fieldListProvider);
                    if (fieldList && fieldList.getColumnInfo) {
                        var item = fieldList.getColumnInfo(propertySurface.propertyName());
                        if (item) {
                            propertySurface.specifics(item.specifics.toLowerCase());
                        }
                    }
                };
                return OperandPropertyQBSurface;
            })(DevExpress.JS.Widgets.OperandPropertySurface);
            QueryBuilder.OperandPropertyQBSurface = OperandPropertyQBSurface;
            var OperandParameterQBSurface = (function (_super) {
                __extends(OperandParameterQBSurface, _super);
                function OperandParameterQBSurface(operator, parent, fieldListProvider, path) {
                    var _this = this;
                    _super.call(this, operator, parent, fieldListProvider, path);
                    this.createParameter = function () {
                        _this.model.parameterName = _this.parameterName();
                        ko.unwrap(_this.fieldListProvider)["createParameter"](_this.parameterName(), _this.fieldsOptions() && _this.fieldsOptions().selected() && _this.fieldsOptions().selected()["dataType"] || "System.String");
                    };
                    this._parameterName = ko.observable("");
                    this.isEditable = ko.observable(false);
                    this._parameterName(operator.parameterName);
                    this.fieldsOptions = parent.leftPart.fieldsOptions;
                    this.parameterName = ko.pureComputed({
                        read: function () {
                            return _this._parameterName() || OperandParameterQBSurface.defaultDisplay;
                        },
                        write: function (newVal) {
                            if (newVal !== OperandParameterQBSurface.defaultDisplay) {
                                _this.model.parameterName = ko.unwrap(newVal);
                                _this._parameterName(_this.model.parameterName);
                            }
                        }
                    });
                }
                OperandParameterQBSurface.defaultDisplay = "Create new parameter";
                return OperandParameterQBSurface;
            })(DevExpress.JS.Widgets.OperandParameterSurface);
            QueryBuilder.OperandParameterQBSurface = OperandParameterQBSurface;
            function isAggregatedExpression(object) {
                return object.aggregate() !== QueryBuilder.AggregationType.None;
            }
            QueryBuilder.isAggregatedExpression = isAggregatedExpression;
            var QueryBuilderObjectsProvider = (function () {
                function QueryBuilderObjectsProvider(query, objectFilter) {
                    this.getItems = function (pathRequest) {
                        var result = $.Deferred();
                        var items = [];
                        if (pathRequest.fullPath === "") {
                            items = objectFilter.filterTables(query().tables())
                                .map(QueryBuilderObjectsProvider._createTableInfo);
                        }
                        else {
                            var table = Designer.findFirstItemMatchesCondition(query().tables(), function (table) { return table.actualName() === pathRequest.fullPath; });
                            items = objectFilter.filterColumns(table && table.columns() || [])
                                .map(function (column) { return QueryBuilderObjectsProvider._createColumnInfo(column, objectFilter); });
                        }
                        result.resolve(items);
                        return result.promise();
                    };
                    this.createParameter = function (name, dataType) {
                        if (name !== "" && name !== OperandParameterQBSurface.defaultDisplay && query().parameters().filter(function (parameter) { return parameter.name() === name; }).length === 0) {
                            var parameter = new DevExpress.Data.DataSourceParameter({ "@Name": name, "@Type": dataType });
                            query().parameters.push(parameter);
                        }
                    };
                    this.getColumnInfo = function (propertyName) {
                        if (propertyName) {
                            var table = Designer.findFirstItemMatchesCondition(query().tables(), function (t) { return propertyName.indexOf(t.name() + ".") === 0; });
                            if (table) {
                                var column = Designer.findFirstItemMatchesCondition(objectFilter.filterColumns(table.columns() || []), function (c) { return propertyName === table.name() + "." + objectFilter.getColumnName(c); });
                                return column ? QueryBuilderObjectsProvider._createColumnInfo(column, objectFilter) : null;
                            }
                        }
                        return null;
                    };
                }
                QueryBuilderObjectsProvider._createTableInfo = function (table) {
                    return {
                        displayName: table.actualName(),
                        name: table.actualName(),
                        isList: true,
                        specifics: "Default",
                        collapsed: ko.observable(true)
                    };
                };
                QueryBuilderObjectsProvider._createColumnInfo = function (column, objectFilter) {
                    return {
                        displayName: objectFilter.getColumnName(column),
                        isList: false,
                        specifics: column.specifics,
                        dataType: column.dataType.peek(),
                        name: objectFilter.getColumnName(column)
                    };
                };
                QueryBuilderObjectsProvider.whereClauseObjectsFilter = {
                    filterColumns: function (columns) { return columns; },
                    filterTables: function (tables) { return tables; },
                    getColumnName: function (column) { return column.name.peek(); }
                };
                QueryBuilderObjectsProvider.groupByObjectsFilter = {
                    filterColumns: function (columns) { return columns.filter(isAggregatedExpression); },
                    filterTables: function (tables) { return tables.filter(function (table) { return table.columns().some(isAggregatedExpression); }); },
                    getColumnName: function (column) { return column.actualName.peek(); }
                };
                return QueryBuilderObjectsProvider;
            })();
            QueryBuilder.QueryBuilderObjectsProvider = QueryBuilderObjectsProvider;
            var GroupFilterEditorSerializer = (function (_super) {
                __extends(GroupFilterEditorSerializer, _super);
                function GroupFilterEditorSerializer() {
                    _super.apply(this, arguments);
                }
                GroupFilterEditorSerializer.prototype.serializeOperandProperty = function (operandProperty) {
                    return "[" + operandProperty.propertyName.split(".")[1] + "]";
                };
                return GroupFilterEditorSerializer;
            })(DevExpress.JS.Widgets.FilterEditorSerializer);
            QueryBuilder.GroupFilterEditorSerializer = GroupFilterEditorSerializer;
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            QueryBuilder.allColumnsSerializationInfo = [QueryBuilder.name, QueryBuilder.selected];
            var AllColumnsViewModel = (function (_super) {
                __extends(AllColumnsViewModel, _super);
                function AllColumnsViewModel(parent, serializer) {
                    _super.call(this, { "@ControlType": "Column" }, parent, serializer);
                    var query = parent.parentModel();
                    var targetColumn = ko.pureComputed(function () {
                        return Designer.findFirstItemMatchesCondition(query.columns(), function (item) {
                            return parent.actualName() === item.table() && QueryBuilder.ColumnType.AllColumns === item.itemType();
                        });
                    });
                    this.selected = ko.pureComputed({
                        read: function () { return !!targetColumn(); },
                        write: function (value) {
                            if (!!targetColumn() === value)
                                return;
                            if (value) {
                                query.columns.push(new QueryBuilder.ColumnExpression({ "@ItemType": QueryBuilder.ColumnType.AllColumns, "@Table": parent.actualName() }, query, serializer));
                            }
                            else {
                                query.columns.remove(function (item) { return parent.actualName() === item.table() && QueryBuilder.ColumnType.AllColumns === item.itemType(); });
                            }
                        }
                    });
                    var name = Designer.getLocalization("(All Columns)", "DataAccessStringId.QueryBuilder_AllColumns");
                    this.name = ko.pureComputed(function () { return (name.charAt(0) === "*" ? name : "* " + name); });
                }
                AllColumnsViewModel.prototype.getInfo = function () {
                    return QueryBuilder.allColumnsSerializationInfo;
                };
                return AllColumnsViewModel;
            })(QueryBuilder.QueryElementBaseViewModel);
            QueryBuilder.AllColumnsViewModel = AllColumnsViewModel;
            var AllColumnsSurface = (function (_super) {
                __extends(AllColumnsSurface, _super);
                function AllColumnsSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, null);
                    this.template = "dxqb-table-asterisk-field";
                    this.toggleSelected = function () {
                        _this.getControlModel().selected(!_this.getControlModel().selected());
                    };
                    this.selectedWrapper = ko.pureComputed(function () {
                        return _this.getControlModel().selected();
                    });
                    this.isOverAsterisk = ko.pureComputed(function () {
                        return _this.underCursor().isOver && !Designer.DragDropHandler.started();
                    });
                }
                return AllColumnsSurface;
            })(Designer.SurfaceElementBase);
            QueryBuilder.AllColumnsSurface = AllColumnsSurface;
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            QueryBuilder.AggregationType = {
                None: "None",
                Count: "Count",
                Max: "Max",
                Min: "Min",
                Avg: "Avg",
                Sum: "Sum"
            };
            QueryBuilder.columnSerializationInfo = [
                QueryBuilder.name,
                { propertyName: "displayType", displayName: "Type", disabled: true, editor: QueryBuilder.editorTemplates.text },
                { propertyName: "alias", displayName: "Alias", localizationId: "DataAccessUIStringId.QueryBuilderColumns_Alias", editor: QueryBuilder.editorTemplates.text },
                QueryBuilder.selected,
                {
                    propertyName: "sortingType",
                    displayName: "Sort Type",
                    editor: QueryBuilder.editorTemplates.combobox,
                    defaultVal: "Unsorted",
                    values: {
                        "Unsorted": Designer.getLocalization("Unsorted", "DataAccessUIStringId.SortingTypeNone"),
                        "Ascending": Designer.getLocalization("Ascending", "DataAccessUIStringId.SortingTypeAscending"),
                        "Descending": Designer.getLocalization("Descending", "DataAccessUIStringId.QueryBuilder_SortDescending")
                    },
                    localizationId: "ASPxReportsStringId.ReportDesigner_QueryBuilder_SortType"
                },
                { propertyName: "sortOrder", displayName: "Sort Order", editor: QueryBuilder.editorTemplates.numeric, localizationId: "DataAccessUIStringId.QueryBuilderColumns_SortOrder" },
                { propertyName: "groupBy", displayName: "Group By", editor: QueryBuilder.editorTemplates.bool, defaultVal: false, localizationId: "DataAccessUIStringId.QueryBuilderColumns_GroupBy" },
                {
                    propertyName: "aggregate",
                    displayName: "Aggregate",
                    editor: QueryBuilder.editorTemplates.combobox,
                    values: QueryBuilder.AggregationType,
                    defaultVal: QueryBuilder.AggregationType.None,
                    localizationId: "DataAccessUIStringId.QueryBuilderColumns_Aggregate"
                }
            ];
            var ColumnViewModel = (function (_super) {
                __extends(ColumnViewModel, _super);
                function ColumnViewModel(model, dbColumn, parent, serializer) {
                    var _this = this;
                    _super.call(this, $.extend({ "@ControlType": "Column" }, model), parent, serializer);
                    this.displayType = ko.pureComputed(function () {
                        return DevExpress.Data.DBColumnType[dbColumn.type] + (dbColumn.size ? '(' + dbColumn.size + ')' : "");
                    });
                    this.dataType = ko.pureComputed(function () {
                        return DevExpress.Data.DBColumn.GetType(dbColumn.type);
                    });
                    this.actualName = ko.pureComputed(function () {
                        return _this.alias() || _this.name();
                    });
                    var points = parent.getColumnConnectionPoints(this);
                    this.rightConnectionPoint = {
                        side: ko.observable(Designer.Diagram.PointSide.East),
                        location: points.right
                    };
                    this.leftConnectionPoint = {
                        side: ko.observable(Designer.Diagram.PointSide.West),
                        location: points.left
                    };
                    var query = parent.parentModel();
                    var targetColumn = ko.pureComputed(function () { return QueryBuilder.ColumnExpressionCollectionHelper.find(query.columns, parent.actualName(), _this.name()); });
                    this.aggregate = ko.pureComputed({
                        read: function () { return targetColumn() ? targetColumn().aggregate() : QueryBuilder.AggregationType.None; },
                        write: function (value) {
                            targetColumn() && targetColumn().aggregate(value);
                        }
                    });
                    this.alias = ko.pureComputed({
                        read: function () { return targetColumn() ? targetColumn().alias() : ""; },
                        write: function (value) {
                            targetColumn() && targetColumn().alias(value || null);
                        }
                    });
                    var orderByItem = ko.pureComputed(function () { return QueryBuilder.ColumnExpressionCollectionHelper.find(query.sorting, parent.actualName(), _this.name()); });
                    this.sortingType = ko.computed({
                        read: function () {
                            if (!orderByItem())
                                return "Unsorted";
                            return orderByItem().descending() ? "Descending" : "Ascending";
                        },
                        write: function (newValue) {
                            if (newValue !== "Unsorted") {
                                if (orderByItem()) {
                                    orderByItem().descending(newValue === "Descending");
                                }
                                else {
                                    QueryBuilder.ColumnExpressionCollectionHelper.addNew(query, query.sorting, parent.actualName(), _this.name())
                                        .descending(newValue === "Descending");
                                }
                            }
                            else if (orderByItem()) {
                                QueryBuilder.ColumnExpressionCollectionHelper.remove(query.sorting, parent.actualName(), _this.name());
                            }
                        }
                    });
                    this.sortOrder = ko.computed({
                        read: function () {
                            var index = query.sorting().indexOf(orderByItem());
                            return index < 0 ? undefined : index + 1;
                        },
                        write: function (newValue) {
                            if (!orderByItem())
                                return;
                            newValue = Math.min(newValue, query.sorting().length);
                            newValue = Math.max(newValue, 1);
                            var oldValue = query.sorting().indexOf(orderByItem());
                            var item = query.sorting.splice(oldValue, 1);
                            query.sorting.splice(newValue - 1, 0, item[0]);
                        }
                    });
                    var groupByItem = ko.computed(function () { return QueryBuilder.ColumnExpressionCollectionHelper.find(query.grouping, parent.actualName(), _this.name()); });
                    this.aggregate.subscribe(function (value) {
                        if (value !== QueryBuilder.AggregationType.None) {
                            _this.groupBy(false);
                            if (!_this.alias() || _this._isAliasAutoGenerated()) {
                                _this.alias(_this.name() + '_' + value);
                            }
                        }
                        else if (_this._isAliasAutoGenerated()) {
                            _this.alias(null);
                        }
                    });
                    this.groupBy = ko.computed({
                        read: function () { return !!groupByItem(); },
                        write: function (value) {
                            if (value) {
                                QueryBuilder.ColumnExpressionCollectionHelper.addNew(query, query.grouping, parent.actualName(), _this.name());
                                _this.aggregate(QueryBuilder.AggregationType.None);
                            }
                            else {
                                QueryBuilder.ColumnExpressionCollectionHelper.remove(query.grouping, parent.actualName(), _this.name());
                            }
                        }
                    });
                    this.selected = ko.pureComputed({
                        read: function () { return !!targetColumn(); },
                        write: function (value) {
                            if (!!targetColumn() === value)
                                return;
                            if (value) {
                                QueryBuilder.ColumnExpressionCollectionHelper.addNew(query, query.columns, parent.actualName(), _this.name());
                            }
                            else {
                                QueryBuilder.ColumnExpressionCollectionHelper.remove(query.columns, parent.actualName(), _this.name());
                            }
                        }
                    });
                }
                ColumnViewModel.prototype._isAliasAutoGenerated = function () {
                    if (!this.alias() || this.alias().indexOf(this.name() + '_') !== 0)
                        return false;
                    var funcName = this.alias().substring(this.name().length + 1);
                    return Object.keys(QueryBuilder.AggregationType).indexOf(funcName) > 0;
                };
                ColumnViewModel.prototype.getInfo = function () {
                    return QueryBuilder.columnSerializationInfo;
                };
                ColumnViewModel.prototype.isPropertyDisabled = function (name) {
                    if (name === "sortOrder") {
                        return this.sortingType() === "Unsorted";
                    }
                    else if (name === "aggregate" || name === "alias") {
                        return !this.selected();
                    }
                };
                Object.defineProperty(ColumnViewModel.prototype, "specifics", {
                    get: function () {
                        return DevExpress.Data.DBColumn.GetSpecific(this.dataType());
                    },
                    enumerable: true,
                    configurable: true
                });
                return ColumnViewModel;
            })(QueryBuilder.QueryElementBaseViewModel);
            QueryBuilder.ColumnViewModel = ColumnViewModel;
            var ColumnSurface = (function (_super) {
                __extends(ColumnSurface, _super);
                function ColumnSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, null);
                    this.template = "dxqb-table-field";
                    this.toggleSelected = function () {
                        _this.getControlModel().selected(!_this.getControlModel().selected());
                    };
                    this.selectedWrapper = ko.pureComputed(function () {
                        return _this.getControlModel().selected();
                    });
                    this.isAggregate = ko.pureComputed(function () {
                        return _this.getControlModel().aggregate() !== QueryBuilder.AggregationType.None;
                    });
                    this.isAscending = ko.pureComputed(function () {
                        return _this.getControlModel().sortingType() === "Ascending";
                    });
                    this.isDescending = ko.pureComputed(function () {
                        return _this.getControlModel().sortingType() === "Descending";
                    });
                    this.cssClasses = function (query, columnDragHandler, parent) {
                        if (!_this._isJoined) {
                            _this._isJoined = ko.pureComputed(function () {
                                return query.isJoined(_this) || _this.getControlModel() === columnDragHandler.getDragColumn();
                            });
                        }
                        if (!_this._isHovered) {
                            _this._isHovered = ko.pureComputed(function () {
                                var isColumnDragStarted = !!columnDragHandler.getDragColumn();
                                var isCurrentTableNotParentForDraggedColumn = isColumnDragStarted && _this.getControlModel().parentModel() !== columnDragHandler.getDragColumn().parentModel();
                                return _this.underCursor().isOver && (!Designer.DragDropHandler.started() || isCurrentTableNotParentForDraggedColumn);
                            });
                        }
                        return {
                            'dxqb-table-field-selected': _this.selected,
                            'dxqb-table-field-joined': _this._isJoined,
                            'dxqb-table-field-undercursor': _this._isHovered
                        };
                    };
                }
                return ColumnSurface;
            })(Designer.SurfaceElementBase);
            QueryBuilder.ColumnSurface = ColumnSurface;
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var QueryBuilder;
        (function (QueryBuilder) {
            QueryBuilder.ColumnType = {
                RecordsCount: "RecordsCount",
                Column: "Column",
                Expression: "Expression",
                AllColumns: "AllColumns"
            };
            QueryBuilder.columnExpressionSerializationsInfo = [
                { propertyName: "expression", modelName: "#text" },
                { propertyName: "table", modelName: "@Table" },
                { propertyName: "column", modelName: "@Name" },
                { propertyName: "aggregate", modelName: "@Aggregate", defaultVal: QueryBuilder.AggregationType.None },
                { propertyName: "alias", modelName: "@Alias" },
                { propertyName: "descending", modelName: "@Descending", defaultVal: false },
                { propertyName: "itemType", modelName: "@ItemType" }
            ];
            var ColumnExpression = (function () {
                function ColumnExpression(model, query, serializer) {
                    var _this = this;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this._dependedTables = [];
                    if (this.table()) {
                        var tableRef = query.getTable(this.table());
                        this.table = ko.pureComputed(function () { return tableRef.actualName(); });
                        this._dependedTables.push(tableRef);
                    }
                    else if (this.expression()) {
                        try {
                            this._criteria = DevExpress.JS.Data.CriteriaOperator.parse(this.expression());
                            DevExpress.JS.Data.criteriaForEach(this._criteria, function (operand) {
                                if (operand instanceof DevExpress.JS.Data.OperandProperty) {
                                    var dependedTable = Designer.findFirstItemMatchesCondition(query.tables(), function (table) { return operand.propertyName.indexOf(table.actualName() + ".") === 0; });
                                    dependedTable && _this._dependedTables.push(dependedTable);
                                }
                            });
                        }
                        catch (e) {
                        }
                    }
                }
                ColumnExpression.prototype.actualName = function () {
                    return this.alias() || this.column();
                };
                ColumnExpression.prototype.getInfo = function () {
                    return QueryBuilder.columnExpressionSerializationsInfo;
                };
                ColumnExpression.prototype.isDepended = function (tableActualName) {
                    return !!Designer.findFirstItemMatchesCondition(this._dependedTables, function (depended) { return depended.actualName() === tableActualName; });
                };
                return ColumnExpression;
            })();
            QueryBuilder.ColumnExpression = ColumnExpression;
            var ColumnExpressionCollectionHelper = (function () {
                function ColumnExpressionCollectionHelper() {
                }
                ColumnExpressionCollectionHelper.find = function (collection, tableName, columnName) {
                    return Designer.findFirstItemMatchesCondition(collection(), function (item) { return item.column() === columnName && item.table() === tableName; });
                };
                ColumnExpressionCollectionHelper.findByName = function (collection, actualName) {
                    return Designer.findFirstItemMatchesCondition(collection(), function (item) { return item.actualName() === actualName; });
                };
                ColumnExpressionCollectionHelper.removeDependend = function (collection, tableName) {
                    collection.remove(function (item) { return item.isDepended(tableName); });
                };
                ColumnExpressionCollectionHelper.addNew = function (query, collection, table, column) {
                    var newItem = new ColumnExpression({ "@Table": table, "@Name": column, "@ItemType": "Column" }, query);
                    if (query.columns === collection && !newItem.alias() && ColumnExpressionCollectionHelper.findByName(collection, newItem.actualName())) {
                        var alias = newItem.table() + "_" + newItem.column();
                        if (ColumnExpressionCollectionHelper.findByName(collection, alias)) {
                            alias = Designer.getUniqueName(collection().map(function (item) { return item.actualName(); }), alias + "_");
                        }
                        newItem.alias(alias);
                    }
                    collection.push(newItem);
                    return newItem;
                };
                ColumnExpressionCollectionHelper.remove = function (collection, tableName, columnName) {
                    collection.remove(function (item) { return item.column() === columnName && item.table() === tableName; });
                };
                return ColumnExpressionCollectionHelper;
            })();
            QueryBuilder.ColumnExpressionCollectionHelper = ColumnExpressionCollectionHelper;
        })(QueryBuilder = Designer.QueryBuilder || (Designer.QueryBuilder = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
//# sourceMappingURL=dx-query-builder-core.js.map
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var CollectionLookupEditorModel = (function (_super) {
                __extends(CollectionLookupEditorModel, _super);
                function CollectionLookupEditorModel(info, level, parentDisabled) {
                    _super.call(this, info, level, parentDisabled);
                    this.selectedItem = ko.observable();
                }
                return CollectionLookupEditorModel;
            })(DevExpress.JS.Widgets.Editor);
            Chart.CollectionLookupEditorModel = CollectionLookupEditorModel;
            var ChartDataMemberEditor = (function (_super) {
                __extends(ChartDataMemberEditor, _super);
                function ChartDataMemberEditor(info, level, parentDisabled) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled);
                    this.treeListController.itemsFilter = function (item) {
                        if (_this.name === "argumentDataMember") {
                            return _this._getArgumentDataMemberFilter(item);
                        }
                        else {
                            return _this._getValueDataMemberFilter(item);
                        }
                    };
                }
                ChartDataMemberEditor.prototype._getArgumentDataMemberFilter = function (item) {
                    var scaleType = this._model() && this._model()["argumentScaleType"]();
                    var itemSpecifics = item.specifics.toLowerCase();
                    if (scaleType === "Numerical") {
                        return itemSpecifics === "integer" || itemSpecifics == "float";
                    }
                    else if (scaleType === "DateTime") {
                        return itemSpecifics === "date";
                    }
                    else {
                        return true;
                    }
                };
                ChartDataMemberEditor.prototype._getValueDataMemberFilter = function (item) {
                    var itemSpecifics = item.specifics.toLowerCase();
                    if (this.name === "weight") {
                        return itemSpecifics === "integer" || itemSpecifics == "float";
                    }
                    else {
                        var scaleType = this._model() && this._model()["valueScaleType"]();
                        if (scaleType === "Numerical") {
                            return itemSpecifics === "integer" || itemSpecifics == "float";
                        }
                        else {
                            return itemSpecifics === "date";
                        }
                    }
                };
                return ChartDataMemberEditor;
            })(Designer.Widgets.FieldListEditor);
            Chart.ChartDataMemberEditor = ChartDataMemberEditor;
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="widgets/widgets.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            Chart.editorTemplates = {
                dataSource: { header: "dxrd-datasource" },
                series: { header: "dxrd-collection-lookup-header", content: "dxrd-series-item", editorType: Chart.CollectionLookupEditorModel },
                titles: { header: "dxrd-collection-lookup-header", content: "dxrd-titles-item", editorType: Chart.CollectionLookupEditorModel },
                views: { header: "dxrd-viewSelect" },
                fieldChart: { header: "dxcd-field", editorType: Designer.Widgets.FieldListEditor },
                valueDataMember: { header: "dxcd-field", editorType: Chart.ChartDataMemberEditor }
            };
            Chart.defaultBooleanValues = {
                "True": "True",
                "False": "False",
                "Default": "Default"
            }, Chart.scaleTypeValues = {
                "Qualitative": "Qualitative",
                "Numerical": "Numerical",
                "DateTime": "DateTime",
                "Auto": "Auto"
            }, Chart.stringAlignmentValues = {
                "Near": "Near",
                "Center": "Center",
                "Far": "Far"
            };
            Chart.angle = { propertyName: "angle", modelName: "@Angle", defaultVal: 0, from: Designer.floatFromModel, displayName: "Angle", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.borderColor = { propertyName: "borderColor", modelName: "@BorderColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Border Color", editor: Designer.Widgets.editorTemplates.customColorEditor };
            Chart.backColor = { propertyName: "backColor", modelName: "@BackColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Background Color", editor: Designer.Widgets.editorTemplates.customColorEditor };
            Chart.dataMember = { propertyName: "dataMember", modelName: "@DataMember" };
            Chart.text = { propertyName: "text", modelName: "@Text", defaultVal: "", displayName: "Text", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Chart.visible = { propertyName: "visible", modelName: "@Visible", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Visible" };
            Chart.name = { propertyName: "name", modelName: "@Name", displayName: "Name", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Chart.thickness = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.visibility = { propertyName: "visibility", modelName: "@Visibility", displayName: "Visibility", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.defaultBooleanValues }, Chart.color = { propertyName: "color", modelName: "@Color", displayName: "Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor }, Chart.titleAlignment = { propertyName: "titleAlignment", modelName: "@Alignment", displayName: "Alignment", defaultVal: "Center", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.stringAlignmentValues }, Chart.textPattern = { propertyName: "textPattern", modelName: "@TextPattern", displayName: "Text Pattern", editor: DevExpress.JS.Widgets.editorTemplates.text }, Chart.textAlignment = { propertyName: "textAlignment", modelName: "@TextAlignment", displayName: "Text Alignment", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.stringAlignmentValues }, Chart.maxLineCount = { propertyName: "maxLineCount", modelName: "@MaxLineCount", displayName: "Max Line Count", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.maxWidth = { propertyName: "maxWidth", modelName: "@MaxWidth", displayName: "Max Width", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.textColor = { propertyName: "textColor", modelName: "@TextColor", displayName: "Text Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor }, Chart.antialiasing = { propertyName: "antialiasing", modelName: "@Antialiasing", displayName: "Antialiasing", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Chart.font = { propertyName: "font", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 8pt", editor: DevExpress.JS.Widgets.editorTemplates.font };
            Chart.enableAxisXZooming = { propertyName: "enableAxisXZooming", modelName: "@EnableAxisXZooming", displayName: "Enable Axis X Zooming" }, Chart.enableAxisXScrolling = { propertyName: "enableAxisXScrolling", modelName: "@EnableAxisXScrolling", displayName: "Enable Axis X Scrolling" }, Chart.enableAxisYZooming = { propertyName: "enableAxisYZooming", modelName: "@EnableAxisYZooming", displayName: "Enable Axis Y Zooming" }, Chart.enableAxisYScrolling = { propertyName: "enableAxisYScrolling", modelName: "@EnableAxisYScrolling", displayName: "Enable Axis Y Scrolling" }, Chart.rotated = { propertyName: "rotated", modelName: "@Rotated", displayName: "Rotated", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Chart.typeNameNotShow = { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" };
            Chart.left = { propertyName: "left", modelName: "@Left", displayName: "Left", localizationId: "DevExpress.XtraPrinting.PaddingInfo.Left", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.right = { propertyName: "right", modelName: "@Top", displayName: "Top", localizationId: "DevExpress.XtraPrinting.PaddingInfo.Top", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.top = { propertyName: "top", modelName: "@Right", displayName: "Right", localizationId: "DevExpress.XtraPrinting.PaddingInfo.Right", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.bottom = { propertyName: "bottom", modelName: "@Bottom", displayName: "Bottom", localizationId: "DevExpress.XtraPrinting.PaddingInfo.Bottom", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.margin = { propertyName: "chartMargins", modelName: "Margins", displayName: "Margins", info: [Chart.left, Chart.right, Chart.top, Chart.bottom], editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.font18 = { propertyName: "font18", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 18pt", editor: DevExpress.JS.Widgets.editorTemplates.font }, Chart.font12 = { propertyName: "font12", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 12pt", editor: DevExpress.JS.Widgets.editorTemplates.font }, Chart.font8 = { propertyName: "font8", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 8pt", editor: DevExpress.JS.Widgets.editorTemplates.font };
            Chart.paneSerializationsInfo = [Chart.enableAxisXScrolling, Chart.enableAxisYScrolling, Chart.enableAxisYZooming, Chart.enableAxisXZooming, Chart.backColor, Chart.borderColor], Chart.defaultPane = { propertyName: "defaultPane", modelName: "DefaultPane", displayName: "Default Pane", info: Chart.paneSerializationsInfo, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="metadata.ts" />
/// <reference path="widgets/widgets.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var minValue = { propertyName: "minValue", modelName: "@MinValueSerializable", displayName: "Min Value", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, maxValue = { propertyName: "maxValue", modelName: "@MaxValueSerializable", displayName: "Max Value", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, auto = { propertyName: "auto", modelName: "@Auto", displayName: "Auto", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, autoSideMargins = { propertyName: "autoSideMargins", modelName: "@AutoSideMargins", displayName: "Auto Side Margins", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, sideMarginsValue = { propertyName: "sideMarginsValue", modelName: "@SideMarginsValue", displayName: "Side Margins Value", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.visualRangeSerializationsInfo = [auto, autoSideMargins, minValue, maxValue, sideMarginsValue], Chart.visualRange = { propertyName: "visualRange", modelName: "VisualRange", displayName: "Visual Range", info: Chart.visualRangeSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var alwaysShowZeroLevel = { propertyName: "alwaysShowZeroLevel", modelName: "@AlwaysShowZeroLevel", displayName: "Always Show Zero Level", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool };
            Chart.wholeRangeSerializationsInfo = Chart.visualRangeSerializationsInfo.concat(alwaysShowZeroLevel), Chart.wholeRange = { propertyName: "wholeRange", modelName: "WholeRange", displayName: "Whole Range", info: Chart.wholeRangeSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.radarWholeRange = { propertyName: "radarWholeRange", modelName: "WholeRange", displayName: "Whole Range", info: Chart.visualRangeSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var dashStyle = {
                propertyName: "dashStyle", modelName: "@DashStyle", displayName: "Dash Style", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Empty": "Empty",
                    "Solid": "Solid",
                    "Dash": "Dash",
                    "Dot": "Dot",
                    "DashDot": "DashDot",
                    "DashDotDot": "DashDotDot"
                }
            };
            Chart.lineStyleSerializationsInfo = [Chart.thickness, dashStyle], Chart.lineStyle = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", info: Chart.lineStyleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.minorLineStyle = { propertyName: "minorLineStyle", modelName: "MinorLineStyle", displayName: "Minor Line Style", info: Chart.lineStyleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var scaleMode = {
                propertyName: "scaleName", modelName: "@ScaleMode", displayName: "Scale Mode", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Automatic": "Automatic",
                    "Manual": "Manual",
                    "Continuous": "Continuous"
                }
            }, aggregateFunction = {
                propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: "Aggregate Function",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "None": "None",
                    "Average": "Average",
                    "Sum": "Sum",
                    "Minimum": "Minimum",
                    "Maximum": "Maximum",
                    "Count": "Count",
                    "Financial": "Financial"
                }
            }, gridSpacing = { propertyName: "gridSpacing", modelName: "@GridSpacing", displayName: "Grid Spacing", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, autoGrid = { propertyName: "autoGrid", modelName: "@AutoGrid", displayName: "Auto Grid", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool }, gridOffset = { propertyName: "gridOffset", modelName: "@GridOffset", displayName: "Grid Offset", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.scaleOptionsBaseSerializationsInfo = [autoGrid, aggregateFunction, gridOffset, gridSpacing, scaleMode];
            var numericMeasureUnit = {
                propertyName: "measureUnit", modelName: "@MeasureUnit", displayName: "Measure Unit",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Ones": "Ones",
                    "Tens": "Tens",
                    "Hundreds": "Hundreds",
                    "Thousands": "Thousands",
                    "Millions": "Millions",
                    "Billions": "Billions",
                    "Custom": "Custom"
                }
            }, numericGridAlignment = {
                propertyName: "gridAlignment", modelName: "@GridAlignment", displayName: "Grid Alignment",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Ones": "Ones",
                    "Tens": "Tens",
                    "Hundreds": "Hundreds",
                    "Thousands": "Thousands",
                    "Millions": "Millions",
                    "Billions": "Billions",
                    "Custom": "Custom"
                }
            }, customGridAlignment = { propertyName: "customGridAlignment", modelName: "@CustomGridAlignment", defaultVal: null, displayName: "Custom Grid Alignment", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, customMeasureUnit = { propertyName: "customMeasureUnit", modelName: "@CustomMeasureUnit", defaultVal: null, displayName: "Custom Measure Unit", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.numericScaleOptionsSerializationsInfo = [numericMeasureUnit, numericGridAlignment, customGridAlignment, customMeasureUnit].concat(Chart.scaleOptionsBaseSerializationsInfo), Chart.numericScaleOptions = { propertyName: "numericScaleOptions", modelName: "NumericScaleOptions", displayName: "Numeric Scale Options", info: Chart.numericScaleOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.radarAxisYNumericScaleOptionsSerializationsInfo = [autoGrid, numericGridAlignment, gridOffset, gridSpacing], Chart.radarAxisYNumericScaleOptions = { propertyName: "radarAxisYNumericScaleOptions", modelName: "NumericScaleOptions", displayName: "Numeric Scale Options", info: Chart.radarAxisYNumericScaleOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.radarAxisXNumericScaleOptionsSerializationsInfo = Chart.radarAxisYNumericScaleOptionsSerializationsInfo.concat(scaleMode), Chart.radarAxisXNumericScaleOptions = { propertyName: "radarAxisXNumericScaleOptions", modelName: "NumericScaleOptions", displayName: "Numeric Scale Options", info: Chart.radarAxisXNumericScaleOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var dateMeasureUnit = {
                propertyName: "measureUnit", modelName: "@MeasureUnit", displayName: "Measure Unit",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Millisecond": "Millisecond",
                    "Second ": "Second",
                    "Minute": "Minute",
                    "Hour": "Hour",
                    "Day": "Day",
                    "Week": "Week",
                    "Month": "Month",
                    "Quarter": "Quarter",
                    "Year": "Year"
                }
            }, dateGridAlignment = {
                propertyName: "gridAlignment", modelName: "@GridAlignment", displayName: "Grid Alignment",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Millisecond": "Millisecond",
                    "Second ": "Second",
                    "Minute": "Minute",
                    "Hour": "Hour",
                    "Day": "Day",
                    "Week": "Week",
                    "Month": "Month",
                    "Quarter": "Quarter",
                    "Year": "Year"
                }
            }, workdaysOnly = { propertyName: "workdaysOnly", modelName: "@WorkdaysOnly", displayName: "Workdays Only", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool };
            Chart.dateTimeScaleOptionsSerializationsInfo = [dateGridAlignment, dateMeasureUnit, workdaysOnly].concat(Chart.scaleOptionsBaseSerializationsInfo), Chart.dateTimeScaleOptions = { propertyName: "dateTimeScaleOptions", modelName: "DateTimeScaleOptions", displayName: "Date-Time Scale Options", info: Chart.dateTimeScaleOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var visibleInPanesSerializable = { propertyName: "visibleInPanesSerializable", modelName: "@VisibleInPanesSerializable", displayName: "Visible In Panes Serializable", editor: DevExpress.JS.Widgets.editorTemplates.text }, minorVisible = { propertyName: "minorVisible", modelName: "@MinorVisible", displayName: "Minor Visible", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, minorColor = { propertyName: "minorColor", modelName: "@MinorColor", displayName: "Minor Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor };
            var visibleDefaultValueFalse = { propertyName: "chartVisible", modelName: "@Visible", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Visible" }, gridLinesAxisBaseSerializationsInfo = [minorVisible, Chart.color, minorColor, Chart.lineStyle, Chart.minorLineStyle];
            Chart.gridLinesAxisXSerializationsInfo = [visibleDefaultValueFalse].concat(gridLinesAxisBaseSerializationsInfo), Chart.gridLinesAxisX = { propertyName: "gridLinesAxisX", modelName: "GridLines", displayName: "Grid Lines", info: Chart.gridLinesAxisXSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.gridLinesAxisYSerializationsInfo = [Chart.visible].concat(gridLinesAxisBaseSerializationsInfo), Chart.gridLinesAxisY = { propertyName: "gridLinesAxisY", modelName: "GridLines", displayName: "Grid Lines", info: Chart.gridLinesAxisYSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.radarGridLinesAxisXSerializationsInfo = [Chart.visible].concat(gridLinesAxisBaseSerializationsInfo), Chart.radarGridLinesAxisX = { propertyName: "radarGridLinesAxisX", modelName: "GridLines", displayName: "Grid Lines", info: Chart.radarGridLinesAxisXSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var straggered = { propertyName: "straggered", modelName: "@Straggered", displayName: "Straggered", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool }, allowStagger = { propertyName: "allowStagger", modelName: "@AllowStagger", displayName: "Allow Stagger", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool }, allowRotate = { propertyName: "allowRotate", modelName: "@AllowRotate", displayName: "Allow Rotate", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool }, allowHide = { propertyName: "allowHide", modelName: "@AllowHide", displayName: "Allow Hide", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool }, minIndent = { propertyName: "minIndent", modelName: "@MinIndent", displayName: "Min Indent", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, axisLabelResolveOverlappingOptionsSerializationsInfo = [allowStagger, allowRotate, allowHide, minIndent], axisLabelResolveOverlappingOptions = { propertyName: "resolveOverlappingOptions", modelName: "ResolveOverlappingOptions", displayName: "Resolve Overlapping Options", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: axisLabelResolveOverlappingOptionsSerializationsInfo }, enableAntialiasing = { propertyName: "enableAntialiasing", modelName: "@EnableAntialiasing", displayName: "Enable Antialiasing", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.defaultBooleanValues };
            var axisLabelBaseSerializationsInfo = [enableAntialiasing, Chart.font, Chart.maxLineCount, Chart.maxWidth, axisLabelResolveOverlappingOptions, Chart.textAlignment, Chart.textColor, Chart.textPattern, Chart.visible];
            Chart.axisLabelSerializationsInfo = [Chart.angle, straggered].concat(axisLabelBaseSerializationsInfo), Chart.axisLabel = { propertyName: "axisLabel", modelName: "Label", displayName: "Label", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: Chart.axisLabelSerializationsInfo };
            Chart.minorCount = { propertyName: "minorCount", modelName: "@MinorCount", displayName: "Minor Count", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.interlaced = { propertyName: "interlaced", modelName: "@Interlaced", displayName: "Interlaced", from: Designer.parseBool, defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool }, Chart.interlacedColor = { propertyName: "interlacedColor", modelName: "@InterlacedColor", displayName: "Interlaced Color", editor: Designer.Widgets.editorTemplates.customColorEditor, from: Designer.colorFromString };
            Chart.axisBaseSerializationsInfo = [Chart.visualRange, Chart.wholeRange, Chart.numericScaleOptions, Chart.dateTimeScaleOptions, Chart.minorCount, Chart.interlacedColor];
            var fillMode = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Empty": "Empty",
                    "Solid": "Solid",
                    "Gradient": "Gradient",
                    "Hatch": "Hatch"
                }
            }, fillStyle2D = [fillMode];
            Chart.rectangleFillStyleSerializationsInfo = [].concat(fillStyle2D), Chart.interlacedFillStyle = { propertyName: "InterlacedFillStyle", modelName: "InterlacedFillStyle", displayName: "Interlaced Fill Style", info: Chart.rectangleFillStyleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var crossAxis = { propertyName: "crossAxis", modelName: "@CrossAxis", displayName: "Cross Axis", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool }, minorThickness = { propertyName: "minorThickness", modelName: "@MinorThickness", displayName: "Minor Thickness", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1 }, minorLenght = { propertyName: "minorLength", modelName: "@MinorLength", displayName: "Minor Length", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 2 }, lenghtinfo = { propertyName: "lenght", modelName: "@Length", displayName: "Length", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 5 }, tickmarksMinorVisible = { propertyName: "minorVisible", modelName: "@MinorVisible", displayName: "Minor Visible", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, tickmarksBaseSerializationsInfo = [Chart.visible, tickmarksMinorVisible, crossAxis, Chart.thickness, minorThickness, lenghtinfo, minorLenght], tickmarksSerializationsInfo = [].concat(tickmarksBaseSerializationsInfo);
            Chart.tickmarks = { propertyName: "tickmarks", modelName: "Tickmarks", displayName: "Tickmarks", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: tickmarksSerializationsInfo };
            Chart.axisAlignment = {
                propertyName: "axisAlignment", modelName: "@AxisAlignment",
                displayName: "Alignment", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Near": "Near",
                    "Zero": "Zero",
                    "Far": "Far"
                }
            };
            var pattern = { propertyName: "pattern", modelName: "@Pattern", displayName: "Pattern", editor: DevExpress.JS.Widgets.editorTemplates.text }, crosshairAxisLabelOptionsSerializationsInfo = [Chart.visibility, pattern, Chart.backColor, Chart.textColor, Chart.font];
            Chart.crosshairAxisLabelOptions = { propertyName: "crosshairAxisLabelOptions", modelName: "CrosshairAxisLabelOptions", displayName: "Crosshair Axis Label Options", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: crosshairAxisLabelOptionsSerializationsInfo };
            var axisTitleVisibility = { propertyName: "axisTitleVisibility", modelName: "@Visibility", displayName: "Visibility", defaultVal: "False", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.defaultBooleanValues };
            Chart.axisTitleSerializationsInfo = [Chart.text, Chart.titleAlignment, Chart.antialiasing, axisTitleVisibility, Chart.textColor, Chart.font12], Chart.axisTitle = { propertyName: "axisTitle", modelName: "Title", displayName: "Title", defaultVal: {}, info: Chart.axisTitleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var crosshairLabelVisibility = { propertyName: "crosshairLabelVisibility", modelName: "@CrosshairLabelVisibility", displayName: "Crosshair Label Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.defaultBooleanValues };
            Chart.axis2DSerializationsInfo = [Chart.interlaced, Chart.interlacedFillStyle, Chart.tickmarks, Chart.axisTitle, Chart.visibility, Chart.axisAlignment, Chart.axisLabel, Chart.thickness,
                Chart.color, crosshairLabelVisibility, visibleInPanesSerializable, Chart.crosshairAxisLabelOptions, visibleInPanesSerializable].concat(Chart.axisBaseSerializationsInfo);
            Chart.axisY3DInterlaced = { propertyName: "axisY3DInterlaced", modelName: "@Interlaced", displayName: "Interlaced", from: Designer.parseBool, defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            var fillMode3D = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Empty": "Empty",
                    "Solid": "Solid",
                    "Gradient": "Gradient"
                }
            }, fillStyle3D = [fillMode];
            var rectangleFillStyle3DSerializationsInfo = [].concat(fillStyle3D), rectangleFillStyle3D = { propertyName: "interlacedFillStyle", modelName: "InterlacedFillStyle", displayName: "Interlaced Fill Style", info: rectangleFillStyle3DSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, axisLabel3DPosition = {
                propertyName: "axisLabel3DPosition", modelName: "@AxisLabel3DPosition", displayName: "Axis Label 3D Position",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Bottom": "Bottom",
                    "Left": "Left",
                    "Right": "Right",
                    "Top": "Top",
                    "Auto": "Auto"
                }
            };
            Chart.axisLabel3DSerializationsInfo = [axisLabel3DPosition].concat(Chart.axisLabelSerializationsInfo), Chart.axisLabel3D = { propertyName: "axisLabel3D", modelName: "Label", displayName: "Label", info: Chart.axisLabel3DSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.axis3DSerializationsInfo = [rectangleFillStyle3D, Chart.axisLabel3D].concat(Chart.axisBaseSerializationsInfo);
            var sizeInPixels = { propertyName: "sizeInPixels", modelName: "@SizeInPixels", displayName: "Size In Pixels", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, scaleBreakStyle = {
                propertyName: "style", modelName: "@Style", displayName: "Style", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Straight": "Straight",
                    "Ragged": "Ragged",
                    "Waved": "Waved"
                }
            }, scaleBreaksOptionsSerializationsInfo = [sizeInPixels, Chart.color, scaleBreakStyle];
            Chart.scaleBreaksOptions = { propertyName: "scaleBreakOptions", modelName: "ScaleBreakOptions", displayName: "Scale Break Options", info: scaleBreaksOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var enabled = { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, maxCount = { propertyName: "maxCount", modelName: "@MaxCount", displayName: "Max Count", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, autoScaleBreaksSerializationsInfo = [enabled, maxCount];
            Chart.autoScaleBreaks = { propertyName: "autoScaleBreaks", modelName: "AutoScaleBreaks", displayName: "Auto Scale Breaks", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: autoScaleBreaksSerializationsInfo }, Chart.reverse = { propertyName: "axisReverse", modelName: "@Reverse", displayName: "Reverse", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            Chart.axisSerializationsInfo = [Chart.reverse, Chart.scaleBreaksOptions, Chart.autoScaleBreaks].concat(Chart.axis2DSerializationsInfo);
            Chart.axisXYSerializationsInfo = [Chart.visible].concat(Chart.axisSerializationsInfo);
            Chart.topLevel = { propertyName: "topLevel", modelName: "@TopLevel", displayName: "Top Level", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.radarAxisXLabelTextDirection = {
                propertyName: "textDirection", modelName: "TextDirection", displayName: "Text Direction", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "LeftToRight": "LeftToRight",
                    "TopToBottom": "TopToBottom",
                    "BottomToTop": "BottomToTop",
                    "Radial": "Radial",
                    "Tangent": "Tangent"
                }
            };
            Chart.radarAxisXLabelSerializationsInfo = axisLabelBaseSerializationsInfo.concat(Chart.radarAxisXLabelTextDirection), Chart.radarAxisXLabel = { propertyName: "radarAxisXLabel", modelName: "Label", displayName: "Label", info: Chart.radarAxisXLabelSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.radarAxisYLabel = { propertyName: "radarAxisYLabel", modelName: "Label", displayName: "Label", info: axisLabelBaseSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var radarAxisSerializationsInfo = [Chart.interlaced, Chart.interlacedColor, Chart.interlacedFillStyle, Chart.visualRange, Chart.minorCount], radarAxisXSerializationsInfo = [Chart.radarAxisXNumericScaleOptions, Chart.radarWholeRange, Chart.radarGridLinesAxisX, Chart.radarAxisXLabel].concat(radarAxisSerializationsInfo), radarAxisYSerializationsInfo = [Chart.color, Chart.thickness, Chart.visible, Chart.radarAxisYNumericScaleOptions, Chart.topLevel, Chart.wholeRange, Chart.gridLinesAxisY, Chart.radarAxisYLabel, Chart.tickmarks].concat(radarAxisSerializationsInfo);
            Chart.radarAxisX = { propertyName: "axisX", modelName: "AxisX", displayName: "Axis X", info: radarAxisXSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.radarAxisY = { propertyName: "axisY", modelName: "AxisY", displayName: "Axis Y", info: radarAxisYSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.axisX3D = { propertyName: "axisX", modelName: "AxisX", displayName: "Axis X", info: [Chart.gridLinesAxisX, Chart.interlaced].concat(Chart.axis3DSerializationsInfo), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.axisY3D = { propertyName: "axisY", modelName: "AxisY", displayName: "Axis Y", info: [Chart.gridLinesAxisY, Chart.axisY3DInterlaced].concat(Chart.axis3DSerializationsInfo), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.axisX = { propertyName: "axisX", modelName: "AxisX", displayName: "Axis X", defaultVal: {}, info: [Chart.gridLinesAxisX].concat(Chart.axisXYSerializationsInfo), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.axisY = { propertyName: "axisY", modelName: "AxisY", displayName: "Axis Y", defaultVal: {}, info: [Chart.gridLinesAxisY].concat(Chart.axisXYSerializationsInfo), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="metadata.ts" />
/// <reference path="widgets/widgets.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            Chart.dimension = { propertyName: "dimension", modelName: "@Dimension", displayName: "Dimension", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.equalPieSize = { propertyName: "equalPieSize", modelName: "@EqualPieSize", displayName: "EqualPieSize", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Chart.typeNameNotShowDiagram = { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" };
            Chart.diagramSerializationsInfo = [Chart.typeNameNotShowDiagram, Chart.defaultPane], Chart.radarSerializationsInfo = [Chart.radarAxisX, Chart.radarAxisY, Chart.margin, Chart.backColor].concat(Chart.diagramSerializationsInfo), Chart.polarSerializationsInfo = [Chart.radarAxisX, Chart.radarAxisY, Chart.margin, Chart.backColor].concat(Chart.diagramSerializationsInfo), Chart.simple3DSerializationsInfo = [Chart.dimension, Chart.margin, Chart.equalPieSize].concat(Chart.diagramSerializationsInfo), Chart.funnel3DSerializationsInfo = [].concat(Chart.simple3DSerializationsInfo), Chart.simpleSerializationsInfo = [Chart.dimension, Chart.margin, Chart.equalPieSize].concat(Chart.diagramSerializationsInfo), Chart.XY2DSerializationsInfo = [Chart.margin, Chart.defaultPane, Chart.enableAxisXScrolling, Chart.enableAxisXZooming, Chart.enableAxisYScrolling, Chart.enableAxisYZooming, Chart.typeNameNotShowDiagram], Chart.XYSerializationsInfo = [Chart.axisX, Chart.axisY, Chart.rotated].concat(Chart.XY2DSerializationsInfo), Chart.XY3DSerializationsInfo = [Chart.axisX3D, Chart.axisY3D, Chart.backColor, Chart.typeNameNotShowDiagram], Chart.GanttDiagramSerializationsInfo = [].concat(Chart.XYSerializationsInfo);
            var XYObject = { info: Chart.XYSerializationsInfo, type: "XYDiagram" }, XY2DObject = { info: Chart.XY2DSerializationsInfo, type: "SwiftPlotDiagram" }, XY3DObject = { info: Chart.XY3DSerializationsInfo, type: "XYDiagram3D" }, radarObject = { info: Chart.radarSerializationsInfo, type: "RadarDiagram" }, polarObject = { info: Chart.polarSerializationsInfo, type: "PolarDiagram" }, simpleObject = { info: Chart.simpleSerializationsInfo, type: "SimpleDiagram" }, simple3DObject = { info: Chart.simple3DSerializationsInfo, type: "SimpleDiagram3D" }, funnel3DObject = { info: Chart.funnel3DSerializationsInfo, type: "FunnelDiagram" }, gantObject = { info: Chart.GanttDiagramSerializationsInfo, type: "GanttDiagram" };
            Chart.diagramMapper = {
                "SideBySideBarSeriesView": XYObject,
                "StackedBarSeriesView": XYObject,
                "FullStackedBarSeriesView": XYObject,
                "SideBySideStackedBarSeriesView": XYObject,
                "SideBySideFullStackedBarSeriesView": XYObject,
                "SideBySideBar3DSeriesView": XY3DObject,
                "StackedBar3DSeriesView": XY3DObject,
                "FullStackedBar3DSeriesView": XY3DObject,
                "SideBySideStackedBar3DSeriesView": XY3DObject,
                "SideBySideFullStackedBar3DSeriesView": XY3DObject,
                "ManhattanBarSeriesView": XY3DObject,
                "PointSeriesView": XYObject,
                "BubbleSeriesView": XYObject,
                "LineSeriesView": XYObject,
                "StackedLineSeriesView": XYObject,
                "FullStackedLineSeriesView": XYObject,
                "StepLineSeriesView": XYObject,
                "SplineSeriesView": XYObject,
                "ScatterLineSeriesView": XYObject,
                "SwiftPlotSeriesView": XY2DObject,
                "Line3DSeriesView": XY3DObject,
                "StackedLine3DSeriesView": XY3DObject,
                "FullStackedLine3DSeriesView": XY3DObject,
                "StepLine3DSeriesView": XY3DObject,
                "Spline3DSeriesView": XY3DObject,
                "PieSeriesView": simpleObject,
                "DoughnutSeriesView": simpleObject,
                "NestedDoughnutSeriesView": simpleObject,
                "Pie3DSeriesView": simple3DObject,
                "Doughnut3DSeriesView": simple3DObject,
                "FunnelSeriesView": simpleObject,
                "Funnel3DSeriesView": funnel3DObject,
                "AreaSeriesView": XYObject,
                "StackedAreaSeriesView": XYObject,
                "FullStackedAreaSeriesView": XYObject,
                "StepAreaSeriesView": XYObject,
                "SplineAreaSeriesView": XYObject,
                "StackedSplineAreaSeriesView": XYObject,
                "FullStackedSplineAreaSeriesView": XYObject,
                "Area3DSeriesView": XY3DObject,
                "StackedArea3DSeriesView": XY3DObject,
                "FullStackedArea3DSeriesView": XY3DObject,
                "StepArea3DSeriesView": XY3DObject,
                "SplineArea3DSeriesView": XY3DObject,
                "StackedSplineArea3DSeriesView": XY3DObject,
                "FullStackedSplineArea3DSeriesView": XY3DObject,
                "OverlappedRangeBarSeriesView": XYObject,
                "SideBySideRangeBarSeriesView": XYObject,
                "RangeAreaSeriesView": XYObject,
                "RangeArea3DSeriesView": XY3DObject,
                "RadarPointSeriesView": radarObject,
                "RadarLineSeriesView": radarObject,
                "RadarAreaSeriesView": radarObject,
                "PolarPointSeriesView": polarObject,
                "PolarLineSeriesView": polarObject,
                "PolarAreaSeriesView": polarObject,
                "StockSeriesView": XYObject,
                "CandleStickSeriesView": XYObject,
                "OverlappedGanttSeriesView": gantObject,
                "SideBySideGanttSeriesView": gantObject
            };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="metadata.ts" />
/// <reference path="widgets/widgets.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var FillStyle = (function (_super) {
                __extends(FillStyle, _super);
                function FillStyle(model, parent, info, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer, info);
                    this.parent = parent;
                    this.updateOptions(this.fillMode(), serializer, model["Options"]);
                    this._disposables.push(this.fillMode.subscribe(function (newValue) {
                        _this.updateOptions(newValue, serializer, {});
                    }));
                }
                FillStyle.prototype.isPropertyVisible = function (propertyName) {
                    return propertyName !== "options" || (propertyName === "options" && this[propertyName]());
                };
                FillStyle.prototype.updateOptions = function (fillMode, serializer, optionsObject) {
                    var newObject = $.extend({ "@TypeNameSerializable": optionsTypeMap[fillMode] }, optionsObject);
                    var optionsInfo = Chart.barSeriesViewGroup.indexOf(this.parent.typeName()) !== -1 ? Chart.barStyle2DMap[fillMode] : Chart.barStyle3DMap[fillMode];
                    this.options(new Designer.SerializableModel(newObject, serializer, optionsInfo));
                };
                return FillStyle;
            })(Designer.SerializableModel);
            Chart.FillStyle = FillStyle;
            Chart.typeNameSerializable = {
                propertyName: "typeName", modelName: "@TypeNameSerializable", displayName: "Type", defaultVal: "", editor: Chart.editorTemplates.views, values: {
                    "SideBySideBarSeriesView": "Bar",
                    "StackedBarSeriesView": "Bar Stacked",
                    "FullStackedBarSeriesView": "Bar Stacked 100%",
                    "SideBySideStackedBarSeriesView": "Side By Side Bar Stacked",
                    "SideBySideFullStackedBarSeriesView": "Side By Side Bar Stacked 100%",
                    "SideBySideBar3DSeriesView": "Bar 3D",
                    "StackedBar3DSeriesView": "Bar 3D Stacked",
                    "FullStackedBar3DSeriesView": "Bar 3D Stacked 100%",
                    "SideBySideStackedBar3DSeriesView": "Side By Side Bar 3D Stacked ",
                    "SideBySideFullStackedBar3DSeriesView": "Side By Side Bar 3D Stacked 100%",
                    "ManhattanBarSeriesView": "Manhattan Bar",
                    "PointSeriesView": "Point",
                    "BubbleSeriesView": "Bubble",
                    "LineSeriesView": "Line",
                    "StackedLineSeriesView": "Line Stacked",
                    "FullStackedLineSeriesView": "Line Stacked 100%",
                    "StepLineSeriesView": "Step Line",
                    "SplineSeriesView": "Spline",
                    "ScatterLineSeriesView": "Scatter Line",
                    "SwiftPlotSeriesView": "Swift Plot",
                    "Line3DSeriesView": "Line 3D",
                    "StackedLine3DSeriesView": "Line 3D Stacked",
                    "FullStackedLine3DSeriesView": "Line 3D Stacked 100%",
                    "StepLine3DSeriesView": "Step Line 3D",
                    "Spline3DSeriesView": "Spline 3D",
                    "PieSeriesView": "Pie",
                    "DoughnutSeriesView": "Doughnut",
                    "NestedDoughnutSeriesView": "Nested Doughnut",
                    "Pie3DSeriesView": "Pie 3D",
                    "Doughnut3DSeriesView": "Doughnut 3D",
                    "FunnelSeriesView": "Funnel",
                    "Funnel3DSeriesView": "Funnel 3D",
                    "AreaSeriesView": "Area",
                    "StackedAreaSeriesView": "Area Stacked",
                    "FullStackedAreaSeriesView": "Area Stacked 100%",
                    "StepAreaSeriesView": "Step Area",
                    "SplineAreaSeriesView": "Spline Area",
                    "StackedSplineAreaSeriesView": "Spline Area Stacked",
                    "FullStackedSplineAreaSeriesView": "Spline Area Stacked 100%",
                    "Area3DSeriesView": "Area 3D",
                    "StackedArea3DSeriesView": "Area 3D Stacked",
                    "FullStackedArea3DSeriesView": "Area 3D Stacked 100%",
                    "StepArea3DSeriesView": "Step 3D Area",
                    "SplineArea3DSeriesView": "Spline 3D Area",
                    "StackedSplineArea3DSeriesView": "Spline Area 3D Stacked",
                    "FullStackedSplineArea3DSeriesView": "Spline Area 3D Stacked 100%",
                    "OverlappedRangeBarSeriesView": "Range Bar",
                    "SideBySideRangeBarSeriesView": "Side By Side Range Bar",
                    "RangeAreaSeriesView": "Range Area",
                    "RangeArea3DSeriesView": "Range Area 3D",
                    "RadarPointSeriesView": "Radar Point",
                    "RadarLineSeriesView": "Radar Line",
                    "RadarAreaSeriesView": "Radar Area",
                    "PolarPointSeriesView": "Polar Point",
                    "PolarLineSeriesView": "Polar Line",
                    "PolarAreaSeriesView": "Polar Area",
                    "StockSeriesView": "Stock Series",
                    "CandleStickSeriesView": "Candle Stick",
                    "OverlappedGanttSeriesView": "Gantt",
                    "SideBySideGanttSeriesView": "Side By Side Gantt"
                }
            };
            Chart.barSeriesViewGroup = ["SideBySideBarSeriesView", "StackedBarSeriesView", "FullStackedBarSeriesView", "SideBySideStackedBarSeriesView", "SideBySideFullStackedBarSeriesView", "OverlappedRangeBarSeriesView", "SideBySideRangeBarSeriesView", "OverlappedGanttSeriesView", "SideBySideGanttSeriesView"];
            Chart.bar3DSeriesViewGroup = ["SideBySideBar3DSeriesView", "StackedBar3DSeriesView", "FullStackedBar3DSeriesView", "SideBySideStackedBar3DSeriesView", "SideBySideFullStackedBar3DSeriesView", "ManhattanBarSeriesView"];
            Chart.barWidth = { propertyName: "barWidth", modelName: "@BarWidth", displayName: "Bar Width", defaultVal: 0.6, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.colorEach = { propertyName: "colorEach", modelName: "@ColorEach", displayName: "Color Each", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            Chart.tag = { propertyName: "tag", modelName: "@Tag", displayName: "Tag", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Chart.borderSerializationsInfo = [Chart.color, Chart.thickness, Chart.visibility], Chart.border = { propertyName: "border", modelName: "Border", displayName: "Border", info: Chart.borderSerializationsInfo, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var color2 = { propertyName: "color2", modelName: "@Color2", displayName: "Color2", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor }, typeNameSerializableOptions = { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" };
            Chart.fillMode = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", defaultVal: "Empty", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Empty": "Empty",
                    "Solid": "Solid",
                    "Gradient": "Gradient",
                    "Hatch": "Hatch"
                }
            };
            var rectangleGradientMode = {
                propertyName: "gradientMode", modelName: "@GradientMode", displayName: "Gradient Mode", defaultVal: "TopToBottom", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "TopToBottom": "Top To Bottom",
                    "BottomToTop": "Bottom To Top",
                    "LeftToRight": "Left To Right",
                    "RightToLeft": "Right To Left",
                    "TopLeftToBottomRight": "Top Left To Bottom Right",
                    "BottomRightToTopLeft": "Bottom Right To Top Left",
                    "TopRightToBottomLeft": "Top Right To Bottom Left",
                    "BottomLeftToTopRight": "Bottom Left To Top Right",
                    "FromCenterHorizontal": "From Center Horizontal",
                    "ToCenterHorizontal": "To Center Horizontal",
                    "FromCenterVertical": "From Center Vertical",
                    "ToCenterVertical": "To Center Vertical"
                }
            }, rectangleGradientFillOptionsInfo = [rectangleGradientMode, color2, Chart.tag, { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" }];
            var hatchStyle = {
                propertyName: "hatchStyle", modelName: "@HatchStyle", displayName: "Hatch Style", defaultVal: "BackwardDiagonal", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Horizontal": "Horizontal",
                    "Vertical": "Vertical",
                    "ForwardDiagonal": "ForwardDiagonal",
                    "BackwardDiagonal": "BackwardDiagonal",
                    "LargeGrid": "LargeGrid",
                    "DiagonalCross": "DiagonalCross",
                    "Percent05": "Percent05",
                    "Percent10": "Percent10",
                    "Percent20": "Percent20",
                    "Percent25": "Percent25",
                    "Percent30": "Percent30",
                    "Percent40": "Percent40",
                    "Percent50": "Percent50",
                    "Percent60": "Percent60",
                    "Percent70": "Percent70",
                    "Percent75": "Percent75",
                    "Percent80": "Percent80",
                    "Percent90": "Percent90",
                    "LightDownwardDiagonal": "LightDownwardDiagonal",
                    "LightUpwardDiagonal": "LightUpwardDiagonal",
                    "DarkDownwardDiagonal": "DarkDownwardDiagonal",
                    "DarkUpwardDiagonal": "DarkUpwardDiagonal",
                    "WideDownwardDiagonal": "WideDownwardDiagonal",
                    "WideUpwardDiagonal": "WideUpwardDiagonal",
                    "LightVertical": "LightVertical",
                    "LightHorizontal": "LightHorizontal",
                    "NarrowVertical": "NarrowVertical",
                    "NarrowHorizontal": "NarrowHorizontal",
                    "DarkVertical": "DarkVertical",
                    "DarkHorizontal": "DarkHorizontal",
                    "DashedDownwardDiagonal": "DashedDownwardDiagonal",
                    "DashedUpwardDiagonal": "DashedUpwardDiagonal",
                    "DashedHorizontal": "DashedHorizontal",
                    "DashedVertical": "DashedVertical",
                    "SmallConfetti": "SmallConfetti",
                    "LargeConfetti": "LargeConfetti",
                    "ZigZag": "ZigZag",
                    "Wave": "Wave",
                    "DiagonalBrick": "DiagonalBrick",
                    "HorizontalBrick": "HorizontalBrick",
                    "Weave": "Weave",
                    "Plaid": "Plaid",
                    "Divot": "Divot",
                    "DottedGrid": "DottedGrid",
                    "DottedDiamond": "DottedDiamond",
                    "Shingle": "Shingle",
                    "Trellis": "Trellis",
                    "Sphere": "Sphere",
                    "SmallGrid": "SmallGrid",
                    "SmallCheckerBoard": "SmallCheckerBoard",
                    "LargeCheckerBoard": "LargeCheckerBoard",
                    "OutlinedDiamond": "OutlinedDiamond",
                    "SolidDiamond": "SolidDiamond"
                }
            }, hatchFillOptionsInfo = [hatchStyle, color2, Chart.tag, typeNameSerializableOptions];
            Chart.fillStyleOptionsSerialize = { propertyName: "options", modelName: "Options", displayName: "Options", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.fillMode3D = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", defaultVal: "Empty", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Empty": "Empty",
                    "Solid": "Solid",
                    "Gradient": "Gradient"
                }
            };
            Chart.fillStyle = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.viewSerializationsInfo = [Chart.typeNameSerializable, Chart.color, Chart.colorEach, Chart.border, Chart.tag];
            Chart.barStyle2DMap = {
                "Empty": [],
                "Solid": [Chart.tag],
                "Gradient": rectangleGradientFillOptionsInfo,
                "Hatch": hatchFillOptionsInfo
            };
            Chart.barStyle3DMap = {
                "Empty": [],
                "Solid": [Chart.tag],
                "Gradient": rectangleGradientFillOptionsInfo
            };
            var optionsTypeMap = {
                "Gradient": "RectangleGradientFillOptions",
                "Hatch": "HatchFillOptions"
            };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="axis.ts" />
/// <reference path="diagram.ts" />
/// <reference path="seriesview.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var DataMemberBase = (function (_super) {
                __extends(DataMemberBase, _super);
                function DataMemberBase(value, valueScaleType) {
                    var _this = this;
                    _super.call(this);
                    this._separator = ';';
                    this._assignValueDataMembers(this, value);
                    if (valueScaleType) {
                        this.valueScaleType = valueScaleType;
                        this._disposables.push(this.valueScaleType.subscribe(function (newVal) {
                            _this._assignValueDataMembers(_this, "");
                        }));
                    }
                }
                DataMemberBase.prototype._assignValueDataMembers = function (valueDataMember, value) {
                    var values = (value || "").split(this._separator);
                    valueDataMember.arrayValueDataMemberNames.forEach(function (name, index) {
                        if (valueDataMember[name])
                            valueDataMember[name](values[index] || "");
                        else
                            valueDataMember[name] = ko.observable(values[index] || "");
                    });
                };
                DataMemberBase.prototype._valueDataMembersToString = function (valueDataMember) {
                    var result = [];
                    valueDataMember.arrayValueDataMemberNames.forEach(function (name) {
                        result.push(valueDataMember[name]() || "");
                    });
                    return result.join(this._separator);
                };
                DataMemberBase.prototype.toString = function () {
                    var _this = this;
                    var shouldSerialize = false;
                    this.arrayValueDataMemberNames.forEach(function (name) {
                        shouldSerialize = shouldSerialize || _this[name]();
                    });
                    return shouldSerialize ? this._valueDataMembersToString(this) : null;
                };
                return DataMemberBase;
            })(Designer.Disposable);
            Chart.DataMemberBase = DataMemberBase;
            var CommonValueDataMembers = (function (_super) {
                __extends(CommonValueDataMembers, _super);
                function CommonValueDataMembers() {
                    _super.apply(this, arguments);
                }
                CommonValueDataMembers.from = function (value) {
                    return new CommonValueDataMembers(value, null);
                };
                CommonValueDataMembers.toJson = function (value) {
                    return value.toString() || {};
                };
                CommonValueDataMembers.prototype.getInfo = function () {
                    return valueDataMembersSerializationsInfo;
                };
                Object.defineProperty(CommonValueDataMembers.prototype, "arrayValueDataMemberNames", {
                    get: function () { return ["value"]; },
                    enumerable: true,
                    configurable: true
                });
                return CommonValueDataMembers;
            })(DataMemberBase);
            Chart.CommonValueDataMembers = CommonValueDataMembers;
            var ValueWeightDataMembers = (function (_super) {
                __extends(ValueWeightDataMembers, _super);
                function ValueWeightDataMembers() {
                    _super.apply(this, arguments);
                }
                ValueWeightDataMembers.prototype.getInfo = function () {
                    return valueWeightDataMembersSerializationsInfo;
                };
                Object.defineProperty(ValueWeightDataMembers.prototype, "arrayValueDataMemberNames", {
                    get: function () { return ["value", "weight"]; },
                    enumerable: true,
                    configurable: true
                });
                return ValueWeightDataMembers;
            })(DataMemberBase);
            Chart.ValueWeightDataMembers = ValueWeightDataMembers;
            var Value1Value2DataMembers = (function (_super) {
                __extends(Value1Value2DataMembers, _super);
                function Value1Value2DataMembers() {
                    _super.apply(this, arguments);
                }
                Value1Value2DataMembers.prototype.getInfo = function () {
                    return value1Value2DataMembersSerializationsInfo;
                };
                Object.defineProperty(Value1Value2DataMembers.prototype, "arrayValueDataMemberNames", {
                    get: function () { return ["value1", "value2"]; },
                    enumerable: true,
                    configurable: true
                });
                return Value1Value2DataMembers;
            })(DataMemberBase);
            Chart.Value1Value2DataMembers = Value1Value2DataMembers;
            var StockValueDataMembers = (function (_super) {
                __extends(StockValueDataMembers, _super);
                function StockValueDataMembers() {
                    _super.apply(this, arguments);
                }
                StockValueDataMembers.prototype.getInfo = function () {
                    return stockDataMembersSerializationsInfo;
                };
                Object.defineProperty(StockValueDataMembers.prototype, "arrayValueDataMemberNames", {
                    get: function () { return ["low", "hight", "open", "close"]; },
                    enumerable: true,
                    configurable: true
                });
                return StockValueDataMembers;
            })(DataMemberBase);
            Chart.StockValueDataMembers = StockValueDataMembers;
            var viewTypesDataMembers = {
                "BubbleSeriesView": ValueWeightDataMembers,
                "OverlappedRangeBarSeriesView": Value1Value2DataMembers,
                "SideBySideRangeBarSeriesView": Value1Value2DataMembers,
                "RangeAreaSeriesView": Value1Value2DataMembers,
                "RangeArea3DSeriesView": Value1Value2DataMembers,
                "OverlappedGanttSeriesView": Value1Value2DataMembers,
                "SideBySideGanttSeriesView": Value1Value2DataMembers,
                "StockSeriesView": StockValueDataMembers,
                "CandleStickSeriesView": StockValueDataMembers
            };
            var ChartViewModel = (function (_super) {
                __extends(ChartViewModel, _super);
                function ChartViewModel(model, serializer) {
                    var _this = this;
                    _super.call(this, Designer.cutRefs(model), serializer, Chart.chartSerializationsInfo);
                    this.displayName = ko.observable(Designer.getLocalization("Chart"));
                    var oldType = ko.observable("");
                    this.diagram = ko.pureComputed(function () {
                        var diagramModel = model && model["Diagram"] || {};
                        model["Diagram"] = null;
                        var typeName = "";
                        if (_this.dataContainer.seriesDataMember() || _this.dataContainer.series().length === 0) {
                            typeName = _this.dataContainer.seriesTemplate.view.typeName();
                        }
                        else {
                            typeName = _this.dataContainer.series()[0].view.typeName();
                        }
                        if (oldType.peek() !== Chart.diagramMapper[typeName].type) {
                            oldType(Chart.diagramMapper[typeName].type);
                            return DiagramViewModel.createDiagram(diagramModel, typeName, serializer);
                        }
                        return _this.diagram.peek();
                    });
                    this.titles = DevExpress.JS.Utils.deserializeArray(model && model.Titles || [], function (title) { return new TitleViewModel(title, _this.titles, serializer); });
                    this.titles().forEach(function (title) {
                        title.parent = _this.titles;
                    });
                    this.titles()["displayName"] = ko.observable(Designer.getLocalization("Titles"));
                    var actions = [
                        {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-top_left",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Alignment": "Near" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-top_center",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Alignment": "Center" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-top_right",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Alignment": "Far" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-right_top_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Right", "@Alignment": "Near" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-right_center_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Right", "@Alignment": "Center" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-right_bottom_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Right", "@Alignment": "Far" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-bottom_left",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Bottom", "@Alignment": "Near" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-bottom_center",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Bottom", "@Alignment": "Center" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-bottom_right",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Bottom", "@Alignment": "Far" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-left_bottom_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Left", "@Alignment": "Near" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-left_center_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Left", "@Alignment": "Center" }); }
                        }, {
                            text: "Add Title",
                            imageClassName: "dxrd-image-chart-title-left_top_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Left", "@Alignment": "Far" }); }
                        }];
                    this.titles()["innerActions"] = createInnerActionsWithPopover("Add Title", "addtitles-action", actions);
                }
                ChartViewModel.from = function (model, serializer) {
                    return new ChartViewModel(model || {}, serializer);
                };
                ChartViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.chartSerializationsInfo, refs);
                };
                ChartViewModel.prototype.addTitle = function (model) {
                    this.titles()["innerActions"][0].closePopover();
                    this.titles.push(new TitleViewModel(model, this.titles));
                };
                return ChartViewModel;
            })(Designer.SerializableModel);
            Chart.ChartViewModel = ChartViewModel;
            var TitleViewModel = (function (_super) {
                __extends(TitleViewModel, _super);
                function TitleViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer, Chart.titleSerializationsInfo);
                    this.parent = parent;
                    this.name = ko.pureComputed({
                        read: function () { return _this["text"] ? _this["text"]() : "title"; },
                        write: function (val) { _this["text"](val); }
                    });
                    this["displayName"] = this.name;
                    this["className"] = ko.pureComputed(function () {
                        return "titleviewmodel";
                    });
                    this["innerActions"] = [
                        {
                            text: "Remove Title",
                            imageClassName: "dxrd-image-recycle-bin",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.parent.remove(_this); },
                        },
                    ];
                }
                TitleViewModel.from = function (model, serializer) {
                    return new TitleViewModel(model || {}, null, serializer);
                };
                TitleViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.titleSerializationsInfo, refs);
                };
                return TitleViewModel;
            })(Designer.SerializableModel);
            Chart.TitleViewModel = TitleViewModel;
            var DataContainerViewModel = (function (_super) {
                __extends(DataContainerViewModel, _super);
                function DataContainerViewModel(model, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer, Chart.dataContainerSerializationsInfo);
                    this.displayName = ko.observable(Designer.getLocalization("Data Container"));
                    this.series = DevExpress.JS.Utils.deserializeArray(model && model.SeriesSerializable || [], function (item) { return new SeriesViewModel(item, _this.series, serializer); });
                    this.series().forEach(function (series) {
                        series.parent = _this.series;
                    });
                    this.series()["displayName"] = ko.observable(Designer.getLocalization("Series"));
                    var typeArray = Chart.typeNameSerializable.values;
                    var actions = [];
                    for (var name in typeArray) {
                        actions.push({
                            text: typeArray[name],
                            imageClassName: "dx-image-fieldlist-" + SeriesViewModel.getClassName(name),
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: (function (typeName) { return function (item) {
                                _this.series()["innerActions"][0].closePopover();
                                _this.series.push(new SeriesViewModel({ "View": { "@TypeNameSerializable": typeName } }, _this.series));
                            }; })(name)
                        });
                    }
                    this.series()["innerActions"] = createInnerActionsWithPopover("Add Series", "addseries-action", actions);
                }
                DataContainerViewModel.from = function (model, serializer) {
                    return new DataContainerViewModel(model || {}, serializer);
                };
                DataContainerViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.dataContainerSerializationsInfo, refs);
                };
                return DataContainerViewModel;
            })(Designer.SerializableModel);
            Chart.DataContainerViewModel = DataContainerViewModel;
            Chart.dataFilterSerializationsInfo = [
                { propertyName: "columnName", displayName: "Column Name", editor: ko.bindingHandlers["displayNameExtender"] ? Designer.Widgets.editorTemplates.field : Chart.editorTemplates.fieldChart, modelName: "@ColumnNameSerializable" },
                {
                    propertyName: "dataType", displayName: "Data Type", defaultVal: "System.String", editor: DevExpress.JS.Widgets.editorTemplates.combobox, modelName: "@DataTypeSerializable",
                    values: {
                        "System.Boolean": "System.Boolean",
                        "System.Byte": "System.Byte",
                        "System.Char": "System.Char",
                        "System.DateTime": "System.DateTime",
                        "System.Decimal": "System.Decimal",
                        "System.Double": "System.Double",
                        "System.Guid": "System.Guid",
                        "System.Int16": "System.Int16",
                        "System.Int32": "System.Int32",
                        "System.Int64": "System.Int64",
                        "System.SByte": "System.SByte",
                        "System.Single": "System.Single",
                        "System.String": "System.String",
                        "System.TimeSpan": "System.TimeSpan",
                        "System.UInt16": "System.UInt16",
                        "System.UInt32": "System.UInt32",
                        "System.UInt64": "System.UInt64",
                    }
                },
                {
                    propertyName: "condition", displayName: "Condition", defaultVal: "Equal", editor: DevExpress.JS.Widgets.editorTemplates.combobox, modelName: "@Condition",
                    values: {
                        "Equal": "Equal",
                        "GreaterThan": "GreaterThan",
                        "GreaterThanOrEqual": "GreaterThanOrEqual",
                        "LessThan": "LessThan",
                        "LessThanOrEqual": "LessThanOrEqual",
                        "NotEqual": "NotEqual"
                    }
                },
                { propertyName: "value", displayName: "Value", editor: DevExpress.JS.Widgets.editorTemplates.text, modelName: "@InvariantValueSerializable" }
            ];
            var DataFilterModel = (function () {
                function DataFilterModel(model, serializer) {
                    var _this = this;
                    this.columnName = ko.observable("");
                    serializer.deserialize(this, model);
                    this.name = ko.pureComputed(function () {
                        return !!_this.columnName() ? _this.columnName() : "DataFilter";
                    });
                }
                DataFilterModel.createNew = function () {
                    return new DataFilterModel({}, new DevExpress.JS.Utils.ModelSerializer());
                };
                DataFilterModel.prototype.getInfo = function () {
                    return Chart.dataFilterSerializationsInfo;
                };
                return DataFilterModel;
            })();
            Chart.DataFilterModel = DataFilterModel;
            var SeriesTemplateViewModel = (function (_super) {
                __extends(SeriesTemplateViewModel, _super);
                function SeriesTemplateViewModel(model, serializer, info) {
                    var _this = this;
                    _super.call(this, model, serializer, info);
                    this.displayName = ko.observable(Designer.getLocalization("Series Template"));
                    if (this.valueDataMembers) {
                        ko.unwrap(this.valueDataMembers).dispose();
                    }
                    this.valueDataMembers = ko.observable(new (viewTypesDataMembers[this.view.typeName()] || CommonValueDataMembers)(this.valueDataMembers.toString(), this["valueScaleType"]));
                    this.dataFilters = DevExpress.JS.Utils.deserializeArray(model.DataFilters, function (item) { return new DataFilterModel(item, serializer); });
                    this._disposables.push(ko.computed(function () {
                        _this.dataFilters().forEach(function (dataFilter) {
                            if (!dataFilter["getPath"]) {
                                dataFilter["getPath"] = function (propertyName) {
                                    return _this["getPath"]("argumentDataMember");
                                };
                            }
                        });
                    }));
                    this._disposables.push(ko.computed(function () {
                        if (_this.label && _this.label.typeNameSerializable) {
                            _this.label.typeNameSerializable(mapTypes[_this.view.typeName()]);
                        }
                    }));
                    this.argumentScaleType.subscribe(function (newVal) {
                        if (newVal !== "Auto" && newVal !== "Qualitative")
                            _this.argumentDataMember("");
                    });
                    this._disposables.push(ko.computed(function () {
                        _this.valueDataMembers.peek().dispose();
                        _this.valueDataMembers(new (viewTypesDataMembers[_this.view.typeName()] || CommonValueDataMembers)(_this.valueDataMembers.peek().toString(), _this["valueScaleType"]));
                    }));
                }
                SeriesTemplateViewModel.from = function (model, serializer) {
                    return new SeriesTemplateViewModel(model || {}, serializer, Chart.seriesTemplateSerializationsInfo);
                };
                SeriesTemplateViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.seriesTemplateSerializationsInfo, refs);
                };
                return SeriesTemplateViewModel;
            })(Designer.SerializableModel);
            Chart.SeriesTemplateViewModel = SeriesTemplateViewModel;
            var SeriesViewModel = (function (_super) {
                __extends(SeriesViewModel, _super);
                function SeriesViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer, Chart.seriesSerializationsInfo);
                    this.isIncompatible = ko.observable(false);
                    this.parent = parent;
                    this["displayName"] = ko.pureComputed(function () {
                        return _this.isIncompatible() ? "(incompatible) " + _this["name"]() : _this["name"]();
                    });
                    this["className"] = ko.pureComputed(function () {
                        return SeriesViewModel.getClassName(_this.view.typeName());
                    });
                    this["innerActions"] = [
                        {
                            text: "Remove Series",
                            imageClassName: "dxrd-image-recycle-bin",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.parent.remove(_this); },
                        },
                    ];
                }
                SeriesViewModel.from = function (model, serializer) {
                    return new SeriesViewModel(model || {}, null, serializer);
                };
                SeriesViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.seriesSerializationsInfo, refs);
                };
                SeriesViewModel.getClassName = function (typeName) {
                    return typeName.toLowerCase().split("seriesview")[0];
                };
                return SeriesViewModel;
            })(SeriesTemplateViewModel);
            Chart.SeriesViewModel = SeriesViewModel;
            var SeriesViewViewModel = (function (_super) {
                __extends(SeriesViewViewModel, _super);
                function SeriesViewViewModel(model, serializer) {
                    var _this = this;
                    this._info = ko.observable(Chart.viewSerializationsInfo);
                    this.getInfo = function () { return _this._info(); };
                    _super.call(this, model, serializer);
                    if (this.typeName && this.typeName() === "")
                        this.typeName("SideBySideBarSeriesView");
                    this._updateFillStyle(this.typeName(), serializer, model["FillStyle"]);
                    this.typeName.subscribe(function (newValue) {
                        _this._updateFillStyle(newValue, serializer, {});
                    });
                }
                SeriesViewViewModel.from = function (model, serializer) {
                    return new SeriesViewViewModel(model || {}, serializer);
                };
                SeriesViewViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, value.getInfo(), refs);
                };
                SeriesViewViewModel.prototype._updateFillStyle = function (typeName, serializer, styleObject) {
                    var newObject = $.extend({}, styleObject);
                    if (Chart.barSeriesViewGroup.indexOf(typeName) !== -1) {
                        this.fillStyle = ko.observable(new Chart.FillStyle(newObject, this, [Chart.fillMode, Chart.fillStyleOptionsSerialize], serializer));
                        this.barWidth = ko.observable(0.6);
                        this._info(Chart.viewSerializationsInfo.concat([Chart.barWidth, Chart.fillStyle]));
                    }
                    else if (Chart.bar3DSeriesViewGroup.indexOf(typeName) !== -1) {
                        this.fillStyle = ko.observable(new Chart.FillStyle(newObject, this, [Chart.fillMode3D, Chart.fillStyleOptionsSerialize], serializer));
                        this.barWidth = ko.observable(0.6);
                        this._info(Chart.viewSerializationsInfo.concat([Chart.barWidth, Chart.fillStyle]));
                    }
                    else {
                        delete this.fillStyle;
                        delete this.barWidth;
                        this._info(Chart.viewSerializationsInfo);
                    }
                };
                return SeriesViewViewModel;
            })(Designer.SerializableModel);
            Chart.SeriesViewViewModel = SeriesViewViewModel;
            var SeriesLabelViewModel = (function (_super) {
                __extends(SeriesLabelViewModel, _super);
                function SeriesLabelViewModel(model, serializer) {
                    _super.call(this, model, serializer, seriesLabelSerializationsInfo);
                }
                SeriesLabelViewModel.from = function (model, serializer) {
                    return new SeriesLabelViewModel(model || {}, serializer);
                };
                SeriesLabelViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, seriesLabelSerializationsInfo, refs);
                };
                return SeriesLabelViewModel;
            })(Designer.SerializableModel);
            Chart.SeriesLabelViewModel = SeriesLabelViewModel;
            var DiagramViewModel = (function (_super) {
                __extends(DiagramViewModel, _super);
                function DiagramViewModel(model, serializer) {
                    _super.call(this, model, serializer, Chart.diagramSerializationsInfo);
                    this.displayName = ko.observable(Designer.getLocalization("Diagram"));
                    DiagramViewModel.initDisplayName(this);
                }
                DiagramViewModel.createDiagram = function (model, type, serializer) {
                    if (serializer === void 0) { serializer = null; }
                    var newDiagram = { "getInfo": function () { return Chart.diagramMapper[type].info; } };
                    (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(newDiagram, $.extend(model, { "@TypeNameSerializable": Chart.diagramMapper[type].type }));
                    this.initDisplayName(newDiagram);
                    return newDiagram;
                };
                DiagramViewModel.from = function (model, serializer) {
                    return new DiagramViewModel(model || {}, serializer);
                };
                DiagramViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, refs);
                };
                DiagramViewModel.initDisplayName = function (diagram) {
                    diagram["displayName"] = diagram["typeNameSerializable"];
                    if (diagram["axisX"]) {
                        diagram["axisX"].displayName = ko.observable(Designer.getLocalization("Axis X"));
                    }
                    if (diagram["axisY"]) {
                        diagram["axisY"].displayName = ko.observable(Designer.getLocalization("Axis Y"));
                    }
                };
                return DiagramViewModel;
            })(Designer.SerializableModel);
            Chart.DiagramViewModel = DiagramViewModel;
            var LegendViewModel = (function (_super) {
                __extends(LegendViewModel, _super);
                function LegendViewModel(model, serializer) {
                    _super.call(this, model, serializer, Chart.legendSerializationsInfo);
                    this.displayName = ko.observable(Designer.getLocalization("Legend"));
                }
                LegendViewModel.from = function (model, serializer) {
                    return new LegendViewModel(model || {}, serializer);
                };
                LegendViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.legendSerializationsInfo, refs);
                };
                return LegendViewModel;
            })(Designer.SerializableModel);
            Chart.LegendViewModel = LegendViewModel;
            function createInnerActionsWithPopover(text, id, actions) {
                var object = {
                    text: text,
                    imageClassName: "dxrd-image-add",
                    disabled: ko.observable(false),
                    id: id,
                    _visible: ko.observable(false),
                    popoverVisible: null,
                    togglePopoverVisible: null,
                    closePopover: null,
                    templateName: "dxrd-collectionactions-template",
                    actions: actions
                };
                object.popoverVisible = ko.pureComputed(function () {
                    return object._visible();
                });
                object.togglePopoverVisible = function () {
                    object._visible(!object._visible());
                };
                object.closePopover = function () {
                    object._visible(false);
                };
                return [object];
            }
            ;
            var valueDataMembersSerializationsInfo = [
                { propertyName: "value", displayName: "Value", editor: Chart.editorTemplates.valueDataMember },
            ];
            var valueWeightDataMembersSerializationsInfo = [
                { propertyName: "value", displayName: "Value", editor: Chart.editorTemplates.valueDataMember },
                { propertyName: "weight", displayName: "Weight", editor: Chart.editorTemplates.valueDataMember },
            ];
            var value1Value2DataMembersSerializationsInfo = [
                { propertyName: "value1", displayName: "Value 1", editor: Chart.editorTemplates.valueDataMember },
                { propertyName: "value2", displayName: "Value 2", editor: Chart.editorTemplates.valueDataMember },
            ];
            var stockDataMembersSerializationsInfo = [
                { propertyName: "low", displayName: "Low", editor: Chart.editorTemplates.valueDataMember },
                { propertyName: "hight", displayName: "Hight", editor: Chart.editorTemplates.valueDataMember },
                { propertyName: "open", displayName: "Open", editor: Chart.editorTemplates.valueDataMember },
                { propertyName: "close", displayName: "Close", editor: Chart.editorTemplates.valueDataMember },
            ];
            var mapTypes = {
                "SideBySideBarSeriesView": "SideBySideBarSeriesLabel",
                "StackedBarSeriesView": "StackedBarSeriesLabel",
                "FullStackedBarSeriesView": "FullStackedBarSeriesLabel",
                "SideBySideStackedBarSeriesView": "StackedBarSeriesLabel",
                "SideBySideFullStackedBarSeriesView": "FullStackedBarSeriesLabel",
                "SideBySideBar3DSeriesView": "Bar3DSeriesLabel",
                "StackedBar3DSeriesView": "StackedBar3DSeriesLabel",
                "FullStackedBar3DSeriesView": "FullStackedBar3DSeriesLabel",
                "SideBySideStackedBar3DSeriesView": "StackedBar3DSeriesLabel",
                "SideBySideFullStackedBar3DSeriesView": "FullStackedBar3DSeriesLabel",
                "ManhattanBarSeriesView": "Bar3DSeriesLabel",
                "PointSeriesView": "PointSeriesLabel",
                "BubbleSeriesView": "BubbleSeriesLabel",
                "LineSeriesView": "PointSeriesLabel",
                "StackedLineSeriesView": "StackedLineSeriesLabel",
                "FullStackedLineSeriesView": "StackedLineSeriesLabel",
                "StepLineSeriesView": "PointSeriesLabel",
                "SplineSeriesView": "PointSeriesLabel",
                "ScatterLineSeriesView": "PointSeriesLabel",
                "SwiftPlotSeriesView": null,
                "Line3DSeriesView": "Line3DSeriesLabel",
                "StackedLine3DSeriesView": "StackedLine3DSeriesLabel",
                "FullStackedLine3DSeriesView": "StackedLine3DSeriesLabel",
                "StepLine3DSeriesView": "Line3DSeriesLabel",
                "Spline3DSeriesView": "Line3DSeriesLabel",
                "PieSeriesView": "PieSeriesLabel",
                "DoughnutSeriesView": "DoughnutSeriesLabel",
                "NestedDoughnutSeriesView": "NestedDoughnutSeriesLabel",
                "Pie3DSeriesView": "Pie3DSeriesLabel",
                "Doughnut3DSeriesView": "Doughnut3DSeriesLabel",
                "FunnelSeriesView": "FunnelSeriesLabel",
                "Funnel3DSeriesView": "Funnel3DSeriesLabel",
                "AreaSeriesView": "PointSeriesLabel",
                "StackedAreaSeriesView": "PointSeriesLabel",
                "FullStackedAreaSeriesView": "FullStackedAreaSeriesLabel",
                "StepAreaSeriesView": "PointSeriesLabel",
                "SplineAreaSeriesView": "PointSeriesLabel",
                "StackedSplineAreaSeriesView": "PointSeriesLabel",
                "FullStackedSplineAreaSeriesView": "FullStackedSplineAreaSeriesLabel",
                "Area3DSeriesView": "Area3DSeriesLabel",
                "StackedArea3DSeriesView": "StackedArea3DSeriesLabel",
                "FullStackedArea3DSeriesView": "FullStackedArea3DSeriesLabel",
                "StepArea3DSeriesView": "Area3DSeriesLabel",
                "SplineArea3DSeriesView": "Area3DSeriesLabel",
                "StackedSplineArea3DSeriesView": "StackedArea3DSeriesLabel",
                "FullStackedSplineArea3DSeriesView": "FullStackedArea3DSeriesLabel",
                "OverlappedRangeBarSeriesView": "RangeBarSeriesLabel",
                "SideBySideRangeBarSeriesView": "RangeBarSeriesLabel",
                "RangeAreaSeriesView": "RangeAreaSeriesLabel",
                "RangeArea3DSeriesView": "RangeArea3DSeriesLabel",
                "RadarPointSeriesView": "RadarPointSeriesLabel",
                "RadarLineSeriesView": "RadarPointSeriesLabel",
                "RadarAreaSeriesView": "RadarPointSeriesLabel",
                "PolarPointSeriesView": "RadarPointSeriesLabel",
                "PolarLineSeriesView": "RadarPointSeriesLabel",
                "PolarAreaSeriesView": "RadarPointSeriesLabel",
                "StockSeriesView": "StockSeriesLabel",
                "CandleStickSeriesView": "StockSeriesLabel",
                "OverlappedGanttSeriesView": "RangeBarSeriesLabel",
                "SideBySideGanttSeriesView": "RangeBarSeriesLabel"
            };
            Chart.diagram = { propertyName: "diagram", modelName: "Diagram" };
            var sideBySideEqualBarWidth = { propertyName: "sideBySideEqualBarWidth", modelName: "@SideBySideEqualBarWidth", displayName: "Side By Side Equal Bar Width", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, sideBySideBarDistanceFixed = { propertyName: "sideBySideBarDistanceFixed", modelName: "@SideBySideBarDistanceFixed", displayName: "Side By Side Bar Distance Fixed", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, sideBySideBarDistance = { propertyName: "sideBySideBarDistance", modelName: "@SideBySideBarDistance", displayName: "Side By Side Bar Distance", defaultVal: 0.0, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.seriesPointsSorting = {
                propertyName: "seriesPointsSorting", modelName: "@SeriesPointsSorting", displayName: "Series Points Sorting", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "None": "None",
                    "Ascending": "Ascending",
                    "Descending": "Descending"
                }
            }, Chart.seriesPointsSortingKey = {
                propertyName: "seriesPointsSortingKey", modelName: "@SeriesPointsSortingKey", displayName: "Series Points Sorting Key", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Argument": "Argument",
                    "Value_1": "Value_1",
                    "Value_2": "Value_2",
                    "Value_3": "Value_3",
                    "Value_4": "Value_4"
                }
            }, Chart.checkedInLegend = { propertyName: "checkedInLegend", modelName: "@CheckedInLegend", displayName: "Checked In Legend", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Chart.checkableInLegend = { propertyName: "checkableInLegend", modelName: "@CheckableInLegend", displayName: "Checkable In Legend", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Chart.legendTextPattern = { propertyName: "legendTextPattern", modelName: "@LegendTextPattern", displayName: "Legend Text Pattern", editor: DevExpress.JS.Widgets.editorTemplates.text }, Chart.legendText = { propertyName: "legendText", modelName: "@LegendText", displayName: "Legend Text", editor: DevExpress.JS.Widgets.editorTemplates.text }, Chart.tag_type = { propertyName: "tag_type", modelName: "@Tag_type", displayName: "Tag_type", editor: DevExpress.JS.Widgets.editorTemplates.text }, Chart.argumentScaleType = { propertyName: "argumentScaleType", modelName: "@ArgumentScaleType", displayName: "Argument Scale Type", defaultVal: "Auto", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.scaleTypeValues }, Chart.valueScaleType = {
                propertyName: "valueScaleType", modelName: "@ValueScaleType", displayName: "Value Scale Type", defaultVal: "Numerical", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Numerical": "Numerical",
                    "DateTime": "DateTime"
                }
            }, Chart.labelsVisibility = { propertyName: "labelsVisibility", modelName: "@LabelsVisibility", displayName: "Labels Visibility", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.defaultBooleanValues }, Chart.argumentDataMember = { propertyName: "argumentDataMember", modelName: "@ArgumentDataMember", displayName: "Argument Data Member", defaultVal: "", editor: Chart.editorTemplates.valueDataMember }, Chart.valueDataMembersSerializable = { propertyName: "valueDataMembers", modelName: "@ValueDataMembersSerializable", displayName: "Value Data Members", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, from: CommonValueDataMembers.from, toJsonObject: CommonValueDataMembers.toJson }, Chart.showInLegend = { propertyName: "showInLegend", modelName: "@ShowInLegend", displayName: "Show In Legend", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            var transparency = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, size = { propertyName: "size", modelName: "@Size", displayName: "Size", defaultVal: 2, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            var enabled = { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, mode = {
                propertyName: "mode", modelName: "@Mode", displayName: "Mode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Count", values: {
                    "Count": "Count",
                    "ThresholdValue": "Threshold Value",
                    "ThresholdPercent": "Threshold Percent"
                }
            }, count = { propertyName: "count", modelName: "@Count", displayName: "Count", defaultVal: 5, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, showOthers = { propertyName: "showOthers", modelName: "@ShowOthers", displayName: "Show Others", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, othersArgument = { propertyName: "othersArgument", modelName: "@OthersArgument", displayName: "Others Argument", editor: DevExpress.JS.Widgets.editorTemplates.text }, thresholdValue = { propertyName: "thresholdValue", modelName: "@ThresholdValue", displayName: "Threshold Value", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, thresholdPercent = { propertyName: "thresholdPercent", modelName: "@ThresholdPercent", displayName: "Threshold Percent", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.textOrientation = {
                propertyName: "textOrientation", modelName: "@TextOrientation", displayName: "Text Orientation", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Horizontal ": "Horizontal",
                    "TopToBottom": "Top To Bottom",
                    "BottomToTop": "Bottom To Top"
                }
            }, Chart.resolveOverlappingMode = {
                propertyName: "resolveOverlappingMode", modelName: "@ResolveOverlappingMode", displayName: "Resolve Overlapping Mode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "None": "None",
                    "Default": "Default",
                    "HideOverlapped": "Hide Overlapped",
                    "JustifyAroundPoint": "Justify Around Point",
                    "JustifyAllAroundPoint": "Justify All Around Point"
                }
            }, Chart.lineColor = { propertyName: "lineColor", modelName: "@LineColor", displayName: "Line Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor }, Chart.lineVisibility = { propertyName: "lineVisibility", modelName: "@LineVisibility", displayName: "Line Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.defaultBooleanValues }, Chart.lineLength = { propertyName: "lineLength", modelName: "@LineLength", displayName: "Line Length", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.barPosition = {
                propertyName: "barPosition", modelName: "@Position", displayName: "Position", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Top": "Top",
                    "Center": "Center",
                    "TopInside": "Top Inside",
                    "BottomInside": "Bottom Inside"
                }
            }, Chart.showForZeroValues = { propertyName: "showForZeroValues", modelName: "@ShowForZeroValues", displayName: "Show for Zero Values", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            var dashStyle = {
                propertyName: "dashStyle", modelName: "@DashStyle", displayName: "Dash Style", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Empty": "Empty",
                    "Solid": "Solid",
                    "Dash": "Dash",
                    "Dot": "Dot",
                    "DashDot": "Dash-Dot",
                    "DashDotDot": "Dash-Dot-Dot"
                }
            };
            var markerVisibility = { propertyName: "markerVisibility", modelName: "@MarkerVisibility", displayName: "Marker Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Chart.defaultBooleanValues }, markerKind = {
                propertyName: "kind", modelName: "@Kind", displayName: "Kind", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Square": "Square",
                    "Diamond": "Diamond",
                    "Triangle": "Triangle",
                    "InvertedTriangle": "Inverted Triangle",
                    "Circle": "Circle",
                    "Plus": "Plus",
                    "Cross": "Cross",
                    "Star": "Star",
                    "Pentagon": "Pentagon",
                    "Hexagon": "Hexagon"
                }
            }, borderVisible = { propertyName: "borderVisible", modelName: "@BorderVisible", displayName: "Border Visible", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            Chart.direction = {
                propertyName: "direction", modelName: "@Direction", displayName: "Direction", defaultVal: "TopToBottom", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "TopToBottom": "Top To Bottom",
                    "BottomToTop": "Bottom To Top",
                    "LeftToRight": "Left To Right",
                    "RightToLeft": "Right To Left"
                }
            }, Chart.alignmentVertical = {
                propertyName: "alignmentVertical", modelName: "@AlignmentVertical", displayName: "Alignment Vertical", defaultVal: "Top", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Top": "Top",
                    "TopOutside": "Top Outside",
                    "Center": "Center",
                    "Bottom": "Bottom",
                    "BottomOutside": "Bottom Outside"
                }
            }, Chart.alignmentHorizontal = {
                propertyName: "alignmentHorizontal", modelName: "@AlignmentHorizontal", displayName: "Alignment Horizontal", defaultVal: "RightOutside", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Left": "Left",
                    "LeftOutside": "Left Outside",
                    "Center": "Center",
                    "Right": "Right",
                    "RightOutside": "Right Outside"
                }
            };
            Chart.dock = {
                propertyName: "dock", modelName: "@Dock", displayName: "Dock", defaultVal: "Top", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Top": "Top",
                    "Bottom": "Bottom",
                    "Left": "Left",
                    "Right": "Right"
                }
            };
            Chart.chartTitleText = { propertyName: "text", modelName: "@Text", displayName: "Text", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Chart.padding = { propertyName: "chartPadding", modelName: "Padding", displayName: "Padding", info: [Chart.left, Chart.right, Chart.top, Chart.bottom], editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var lineMarkerOptionsSerializationsInfo = [Chart.color, Chart.colorEach, markerVisibility], lineMarker = { propertyName: "lineMarker", modelName: "LineMarker", displayName: "Line Marker", info: lineMarkerOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var topNOptionsSerializationsInfo = [enabled, mode, count, thresholdPercent, thresholdValue, showOthers, othersArgument], topNOptions = { propertyName: "topNOptions", modelName: "TopNOptions", displayName: "Top N Options", info: topNOptionsSerializationsInfo, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var lineStyleSerializationsInfo = [Chart.thickness, dashStyle], lineStyle = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", info: lineStyleSerializationsInfo, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var seriesLabelSerializationsInfo = [Chart.typeNameNotShow, Chart.textPattern, Chart.textAlignment, Chart.maxLineCount, Chart.maxWidth, Chart.textOrientation, Chart.resolveOverlappingMode,
                Chart.lineColor, Chart.lineVisibility, Chart.lineLength, Chart.antialiasing, Chart.backColor, Chart.textColor, Chart.barPosition, Chart.showForZeroValues, Chart.font8, lineStyle, Chart.border];
            Chart.seriesLabel = { propertyName: "label", modelName: "Label", displayName: "Label", info: seriesLabelSerializationsInfo, defaultVal: {}, from: SeriesLabelViewModel.from, toJsonObject: SeriesLabelViewModel.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var autoBindingSettingsEnabled = { propertyName: "autoBindingSettingsEnabled", modelName: "@AutoBindingSettingsEnabled", displayName: "Auto Binding Settings Enabled", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool }, autoLayoutSettingsEnabled = { propertyName: "autoLayoutSettingsEnabled", modelName: "@AutoLayoutSettingsEnabled", displayName: "Auto Layout Settings Enabled", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Chart.pivotGridDataSourceOptions = { propertyName: "pivotGridDataSourceOptions", modelName: "PivotGridDataSourceOptions", displayName: "Pivot Grid Data Source Options", info: [autoBindingSettingsEnabled, autoLayoutSettingsEnabled], editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var dataFilters = {
                modelName: "DataFilters", displayName: "Data Filters", propertyName: "dataFilters",
                editor: DevExpress.JS.Widgets.editorTemplates.commonCollection, array: true, addHandler: DataFilterModel.createNew, template: '#dxrd-collectionItemWithAccordion'
            };
            var dataFiltersConjunctionMode = {
                modelName: "@DataFiltersConjunctionMode", defaultVal: "And", displayName: "Data Filters Conjunction Mode", propertyName: "dataFiltersConjunctionMode", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "And": "And",
                    "Or": "Or"
                }
            };
            var summaryFunctionSerializationInfo = {
                propertyName: "summaryFunction", displayName: "Summary Function", modelName: "@SummaryFunction", editor: DevExpress.JS.Widgets.editorTemplates.text
            };
            var colorDataMember = { propertyName: "colorDataMember", displayName: "Color Data Member", defaultVal: "", modelName: "@ColorDataMember", editor: ko.bindingHandlers["displayNameExtender"] ? Designer.Widgets.editorTemplates.field : Chart.editorTemplates.fieldChart };
            Chart.view = {
                propertyName: "view", modelName: "View", displayName: "View", defaultVal: {},
                from: SeriesViewViewModel.from, toJsonObject: SeriesViewViewModel.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor
            }, Chart.seriesTemplateSerializationsInfo = [Chart.view, Chart.argumentDataMember, Chart.valueDataMembersSerializable, colorDataMember, Chart.argumentScaleType, Chart.seriesPointsSorting, Chart.seriesPointsSortingKey, Chart.valueScaleType, Chart.checkableInLegend, Chart.checkedInLegend, Chart.showInLegend, Chart.legendText, Chart.legendTextPattern, Chart.labelsVisibility, summaryFunctionSerializationInfo, dataFiltersConjunctionMode, dataFilters, Chart.seriesLabel, topNOptions, Chart.visible], Chart.seriesTemplate = { propertyName: "seriesTemplate", modelName: "SeriesTemplate", displayName: "Series Template", info: Chart.seriesTemplateSerializationsInfo, from: SeriesTemplateViewModel.from, toJsonObject: SeriesTemplateViewModel.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.seriesSerializationsInfo = [Chart.name].concat(Chart.seriesTemplateSerializationsInfo), Chart.seriesSerializable = { propertyName: "series", modelName: "SeriesSerializable", displayName: "Series", array: true, editor: Chart.editorTemplates.series }, Chart.seriesDataMember = { propertyName: "seriesDataMember", modelName: "@SeriesDataMember", displayName: "Series Data Member", editor: ko.bindingHandlers["displayNameExtender"] ? Designer.Widgets.editorTemplates.field : Chart.editorTemplates.fieldChart }, Chart.dataContainerSerializationsInfo = [Chart.seriesDataMember, Chart.seriesSerializable, Chart.seriesTemplate, Chart.dataMember, Chart.pivotGridDataSourceOptions], Chart.dataContainer = { propertyName: "dataContainer", modelName: "DataContainer", displayName: "Data Container", info: Chart.dataContainerSerializationsInfo, from: DataContainerViewModel.from, toJsonObject: DataContainerViewModel.toJson, editor: Designer.Widgets.editorTemplates.objecteditorCustom };
            Chart.titleSerializationsInfo = [Chart.chartTitleText, Chart.textColor, Chart.dock, Chart.titleAlignment, Chart.visibility, Chart.font18], Chart.titles = { propertyName: "titles", modelName: "Titles", displayName: "Titles", array: true, from: TitleViewModel.from, toJsonObject: TitleViewModel.toJson, editor: Chart.editorTemplates.titles };
            Chart.legendSerializationsInfo = [Chart.textColor, Chart.backColor, Chart.direction, Chart.alignmentVertical, Chart.alignmentHorizontal, Chart.visibility, Chart.border, Chart.margin, Chart.padding, Chart.font8], Chart.legend = { propertyName: "legend", modelName: "Legend", displayName: "Legend", info: Chart.legendSerializationsInfo, from: LegendViewModel.from, toJsonObject: LegendViewModel.toJson, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.appearanceName = {
                propertyName: "appearanceName", modelName: "@AppearanceNameSerializable", displayName: "Appearance Name", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Nature Colors": "Nature Colors",
                    "Pastel Kit": "Pastel Kit",
                    "In A Fog": "In A Fog",
                    "Terracotta Pie": "Terracotta Pie",
                    "Northern Lights": "Northern Lights",
                    "Chameleon": "Chameleon",
                    "The Trees": "The Trees",
                    "Light": "Light",
                    "Gray": "Gray",
                    "Dark": "Dark",
                    "Dark Flat": "Dark Flat",
                    "Default": "Default"
                }
            }, Chart.paletteName = {
                propertyName: "paletteName", modelName: "@PaletteName", displayName: "Palette Name", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Default": "Default",
                    "Nature Colors": "Nature Colors",
                    "Pastel Kit": "Pastel Kit",
                    "In A Fog": "In A Fog",
                    "Terracotta Pie": "Terracotta Pie",
                    "Northern Lights": "Northern Lights",
                    "Chameleon": "Chameleon",
                    "The Trees": "The Trees",
                    "Mixed": "Mixed",
                    "Office": "Office",
                    "Black and White": "Black and White",
                    "Grayscale": "Grayscale",
                    "Apex": "Apex",
                    "Aspect": "Aspect",
                    "Civic": "Civic",
                    "Concourse": "Concourse",
                    "Equity": "Equity",
                    "Flow": "Flow",
                    "Foundry": "Foundry",
                    "Median": "Median",
                    "Metro": "Metro",
                    "Module": "Module",
                    "Opulent": "Opulent",
                    "Oriel": "Oriel",
                    "Origin": "Origin",
                    "Paper": "Paper",
                    "Solstice": "Solstice",
                    "Technic": "Technic",
                    "Trek": "Trek",
                    "Urban": "Urban",
                    "Verve": "Verve",
                    "Office2013": "Office2013",
                    "Blue Warm": "Blue Warm",
                    "Blue": "Blue",
                    "Blue II": "Blue II",
                    "Blue Green": "Blue Green",
                    "Green": "Green",
                    "Green Yellow": "Green Yellow",
                    "Yellow": "Yellow",
                    "Yellow Orange": "Yellow Orange",
                    "Orange": "Orange",
                    "Orange Red": "Orange Red",
                    "Red Orange": "Red Orange",
                    "Red": "Red",
                    "Red Violet": "Red Violet",
                    "Violet": "Violet",
                    "Violet II": "Violet II",
                    "Marquee": "Marquee",
                    "Slipstream": "Slipstream"
                }
            };
            Chart.chartSerializationsInfo = [Chart.appearanceName, Chart.paletteName, Chart.dataContainer, Chart.diagram, Chart.titles, Chart.legend], Chart.chart = { propertyName: "chart", modelName: "Chart", displayName: "Chart", from: ChartViewModel.from, toJsonObject: ChartViewModel.toJson };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="chart.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var DataSourceMemberHelper = (function () {
                function DataSourceMemberHelper(dataSource, targetMember) {
                    var _this = this;
                    this._dataSourceMember = {
                        fullPath: ko.pureComputed({
                            read: function () {
                                if (dataSource()) {
                                    return dataSource().id + (targetMember() ? "." + targetMember() : "");
                                }
                                return targetMember();
                            },
                            write: function (val) {
                                targetMember((new DevExpress.JS.Widgets.PathRequest(val)).path);
                            }
                        }),
                        displayExpr: function (value) {
                            return (new DevExpress.JS.Widgets.PathRequest(value)).path;
                        }
                    };
                    this.dataSourceMemberEditable = ko.pureComputed({
                        read: function () { return _this._dataSourceMember; },
                        write: function (value) { _this._dataSourceMember.fullPath(value); }
                    });
                }
                return DataSourceMemberHelper;
            })();
            Chart.DataSourceMemberHelper = DataSourceMemberHelper;
            var ChartControlViewModel = (function (_super) {
                __extends(ChartControlViewModel, _super);
                function ChartControlViewModel(chartSource, dataSource, size) {
                    var _this = this;
                    var serializer = new DevExpress.JS.Utils.ModelSerializer();
                    _super.call(this, chartSource, null, serializer);
                    this.dataSource = ko.observable(dataSource);
                    this._chartStructure = ko.observable();
                    this._chartElement = ko.observable(null);
                    this.controlType = "ChartControl";
                    this.name("ChartControl");
                    this.size = size;
                    this["appearanceName"] = this.chart["appearanceName"];
                    this["paletteName"] = this.chart["paletteName"];
                    this._disposables.push(ko.computed(function () {
                        _this.rotated = _this.chart.diagram() && _this.chart.diagram()["rotated"] ? _this.chart.diagram()["rotated"] : undefined;
                    }));
                    this.fakeChart = {
                        seriesTemplate: this.chart.dataContainer.seriesTemplate,
                        series: this.chart.dataContainer.series,
                        titles: this.chart.titles,
                        legend: this.chart["legend"],
                        axisX: ko.pureComputed(function () {
                            return _this.chart.diagram() && _this.chart.diagram()["axisX"];
                        }),
                        axisY: ko.pureComputed(function () {
                            return _this.chart.diagram() && _this.chart.diagram()["axisY"];
                        }),
                        getInfo: function () { return fakeChartSerializationInfo; }
                    };
                    this._chartStructureProvider = new Designer.ObjectStructureProvider(this.fakeChart, "Chart");
                    this.chartStructureTreeListController = new Designer.ObjectStructureTreeListController(["chart", "Chart", "titles", "legend", "series", "axisX", "axisY", "seriesTemplate", "TitleViewModel", "SeriesViewModel"], ["chart", "titles", "series"]);
                    this._chartStructure({
                        "itemsProvider": this._chartStructureProvider,
                        "treeListController": this.chartStructureTreeListController,
                        "selectedPath": this._chartStructureProvider.selectedPath
                    });
                    this.chart.dataContainer.series().forEach(function (series) {
                        series["isPropertyDisabled"] = function (propertyName) {
                            return _this.dataSource() === null
                                && (propertyName === "argumentDataMember"
                                    || propertyName === "valueDataMembers"
                                    || propertyName === "dataFilters"
                                    || propertyName === "colorDataMember");
                        };
                        series["getPath"] = function (propertyName) {
                            if (propertyName === "argumentDataMember") {
                                return _this.getPath("seriesDataMember");
                            }
                        };
                        series.valueDataMembers()["getPath"] = function (propertyName) {
                            return _this.getPath("seriesDataMember");
                        };
                        series.valueDataMembers.subscribe(function (newVal) {
                            newVal["getPath"] = function (propertyName) {
                                return _this.getPath("seriesDataMember");
                            };
                        });
                    });
                    this._disposables.push(this.chart.dataContainer.series.subscribe(function (args) {
                        if (args[0].status === "added") {
                            args[0].value["getPath"] = function (propertyName) {
                                if (propertyName === "argumentDataMember") {
                                    return _this.getPath("seriesDataMember");
                                }
                            };
                            args[0].value["isPropertyDisabled"] = function (propertyName) {
                                return _this.dataSource() === null
                                    && (propertyName === "argumentDataMember"
                                        || propertyName === "valueDataMembers"
                                        || propertyName === "dataFilters"
                                        || propertyName === "colorDataMember");
                            };
                            args[0].value.valueDataMembers()["getPath"] = function (propertyName) {
                                return _this.getPath("seriesDataMember");
                            };
                            args[0].value.valueDataMembers.subscribe(function (newVal) {
                                newVal["getPath"] = function (propertyName) {
                                    return _this.getPath("seriesDataMember");
                                };
                            });
                        }
                    }, null, "arrayChange"));
                    this.chart.dataContainer.seriesTemplate["isPropertyDisabled"] = function (propertyName) {
                        return _this.dataSource() === null
                            && (propertyName === "argumentDataMember"
                                || propertyName === "valueDataMembers"
                                || propertyName === "dataFilters"
                                || propertyName === "colorDataMember");
                    };
                    this.chart.dataContainer.seriesTemplate["getPath"] = function (propertyName) {
                        return _this.getPath("seriesDataMember");
                    };
                    this.chart.dataContainer.seriesTemplate.valueDataMembers()["getPath"] = function (propertyName) {
                        return _this.getPath("seriesDataMember");
                    };
                    this["dataMember"] = this.chart.dataContainer.dataMember;
                    this["seriesDataMember"] = this.chart.dataContainer.seriesDataMember;
                    this["pivotGridDataSourceOptions"] = this.chart.dataContainer["pivotGridDataSourceOptions"];
                    this._disposables.push(this._chartStructureProvider.selectedMember.subscribe(function (newValue) {
                        var selectedElement = null;
                        var pathComponets = _this._chartStructureProvider.selectedPath().split(".");
                        if (newValue && pathComponets.length > 1) {
                            selectedElement = newValue;
                            if (selectedElement.getInfo === void 0) {
                                var propertySerializationInfo = fakeChartSerializationInfo.filter(function (info) { return info.propertyName === pathComponets[1]; })[0];
                                if (propertySerializationInfo.info) {
                                    selectedElement.getInfo = function () {
                                        return propertySerializationInfo.info;
                                    };
                                }
                                else {
                                    selectedElement = {
                                        element: selectedElement,
                                        getInfo: function () {
                                            return [$.extend({}, propertySerializationInfo, { propertyName: "element" })];
                                        }
                                    };
                                }
                            }
                        }
                        _this._chartElement(selectedElement);
                    }));
                    this._chartStructureProvider.selectedPath("");
                    this._disposables.push(this.chart.dataContainer.series.subscribe(this._createCollectionSubscriptionDelegate("Chart", "series"), null, "arrayChange"));
                    this._disposables.push(this.chart.titles.subscribe(this._createCollectionSubscriptionDelegate("Chart", "titles"), null, "arrayChange"));
                }
                ChartControlViewModel.prototype.getInfo = function () {
                    return Chart.chartControlSerializationsInfo;
                };
                ChartControlViewModel.prototype.getControlFactory = function () {
                    return Chart.controlsFactory;
                };
                ChartControlViewModel.prototype._createCollectionSubscriptionDelegate = function (propertyPath, propertyName) {
                    var self = this, path = propertyPath + "." + propertyName;
                    return function (args) {
                        args.forEach(function (changeSet) {
                            if (changeSet.status) {
                                if (changeSet.status === "deleted") {
                                    self._chartStructureProvider.selectedPath(path);
                                    if (self.fakeChart[propertyName]().length !== 0) {
                                        self._chartStructureProvider.selectedPath(path + ".0");
                                    }
                                }
                                else {
                                    if (!changeSet.value.name()) {
                                        var prefix = propertyName.charAt(0).toUpperCase() + propertyName.substr(1) + " ";
                                        changeSet.value.name(Designer.getUniqueNameForNamedObjectsArray(self.fakeChart[propertyName](), prefix));
                                    }
                                    self._chartStructureProvider.selectedPath(path + "." + changeSet.index.toString());
                                }
                            }
                        });
                    };
                };
                ChartControlViewModel.prototype.getPath = function (propertyName) {
                    var dataSourceName = this.dataSource() ? this.dataSource().id || this.dataSource().ref : "";
                    if (propertyName === "seriesDataMember") {
                        return dataSourceName + (this.chart.dataContainer.dataMember() ? "." + this.chart.dataContainer.dataMember() : "");
                    }
                    else if (propertyName === "dataMember") {
                        return dataSourceName;
                    }
                };
                ChartControlViewModel.prototype.serialize = function () {
                    return (new DevExpress.JS.Utils.ModelSerializer()).serialize(this);
                };
                ChartControlViewModel.prototype.save = function () {
                    var data = this.serialize();
                    if (this.onSave) {
                        this.onSave(data);
                    }
                    return data;
                };
                return ChartControlViewModel;
            })(Designer.ElementViewModel);
            Chart.ChartControlViewModel = ChartControlViewModel;
            Chart.margins = { propertyName: "margins", modelName: "@Margins", from: Designer.Margins.fromString, displayName: "Margins" };
            Chart.pageWidth = { propertyName: "pageWidth", modelName: "@PageWidth", defaultVal: 850, from: Designer.floatFromModel, displayName: "Page Width", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.pageHeight = { propertyName: "pageHeight", modelName: "@PageHeight", defaultVal: 1250, from: Designer.floatFromModel, displayName: "Page Height", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            var fakeChartSerializationInfo = [Chart.seriesTemplate, Chart.seriesSerializable, Chart.titles, Chart.legend, Chart.axisX, Chart.axisY];
            Chart.size = { propertyName: "size", modelName: "@SizeF", from: Designer.Size.fromString, displayName: "Size", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.chartStructure = { propertyName: "_chartStructure", displayName: "Chart Structure", editor: Designer.Widgets.editorTemplates.treelist };
            Chart.chartElement = { propertyName: "_chartElement", displayName: "Selected Element", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.chartControlSerializationsInfo = [Chart.name, Chart.chart, Chart.chartStructure, Chart.chartElement, Chart.size, Chart.margins];
            var ChartControlSurface = (function (_super) {
                __extends(ChartControlSurface, _super);
                function ChartControlSurface(control, zoom) {
                    var _this = this;
                    if (zoom === void 0) { zoom = ko.observable(1); }
                    _super.call(this, control, {
                        measureUnit: ko.observable("Pixels"),
                        zoom: zoom,
                        dpi: ko.observable(100)
                    }, ChartControlSurface._unitProperties);
                    this.imageSrc = ko.observable("");
                    this.allowMultiselect = false;
                    this.focused = ko.observable(false);
                    this.selected = ko.observable(false);
                    this.underCursor = ko.observable(new Designer.HoverInfo());
                    this.templateName = "dx-chart-surface";
                    this.margins = { bottom: this["_bottom"], left: this["_left"], right: this["_right"], top: this["_top"] };
                    this.zoom = zoom;
                    this._disposables.push(ko.computed(function () {
                        var series = control.chart.dataContainer.series();
                        series.forEach(function (val) {
                            val.view.typeName();
                        });
                        var _self = _this;
                        if (Designer.Chart.HandlerUri) {
                            Chart.ChartRequests.getChartImage(Designer.Chart.HandlerUri, control["chart"], control.size.width() * zoom(), control.size.height() * zoom()).done(function (result) {
                                var allSeries = _self._control.chart.dataContainer.series();
                                allSeries.forEach(function (val) {
                                    val.isIncompatible(false);
                                });
                                _self.imageSrc("data:image/x;base64," + result.Image);
                                result.Indexes.forEach(function (val) {
                                    var series = allSeries[val];
                                    series.isIncompatible(true);
                                });
                            })
                                .fail(function (result) {
                                Designer.NotifyAboutWarning("Impossible to get chart image.");
                            });
                        }
                    }).extend({ throttle: 1 }));
                }
                Object.defineProperty(ChartControlSurface.prototype, "measureUnit", {
                    get: function () {
                        return this._context.measureUnit;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ChartControlSurface.prototype, "dpi", {
                    get: function () {
                        return this._context.dpi;
                    },
                    enumerable: true,
                    configurable: true
                });
                ChartControlSurface.prototype.checkParent = function (surfaceParent) { return false; };
                ChartControlSurface.prototype.getChildrenCollection = function () {
                    return ko.observableArray([]);
                };
                ChartControlSurface._unitProperties = {
                    _width: function (o) { return o.size.width; },
                    _height: function (o) { return o.size.height; },
                    height: function (o) { return o.size.height; },
                    width: function (o) { return o.size.width; },
                    _bottom: function (o) { return o.margins.bottom; },
                    _left: function (o) { return o.margins.left; },
                    _right: function (o) { return o.margins.right; },
                    _top: function (o) { return o.margins.top; }
                };
                return ChartControlSurface;
            })(Designer.SurfaceElementBase);
            Chart.ChartControlSurface = ChartControlSurface;
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var ChartRequests = (function () {
                function ChartRequests() {
                }
                ChartRequests.getChartImage = function (uri, chart, width, height) {
                    return Designer.ajax(uri, 'chart', encodeURIComponent(JSON.stringify({
                        width: width,
                        height: height,
                        Chart: JSON.stringify({
                            'ChartXmlSerializer': {
                                '@version': "14.2.0.0",
                                Chart: new DevExpress.JS.Utils.ModelSerializer().serialize(chart, Chart.chartSerializationsInfo)
                            }
                        })
                    })));
                };
                ChartRequests.fieldListCallback = function (request) {
                    var requestJson = JSON.stringify(request);
                    var encodedJson = encodeURIComponent(requestJson);
                    return Designer.ajax(Chart.HandlerUri, 'fieldList', encodedJson);
                };
                return ChartRequests;
            })();
            Chart.ChartRequests = ChartRequests;
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="chartcontrol.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            Chart.ActionId = {
                Save: "dxxcd-save"
            };
            Chart.controlsFactory = new Designer.ControlsFactory();
            function registerControls() {
                Chart.controlsFactory.registerControl("ChartControl", {
                    info: Chart.chartControlSerializationsInfo,
                    surfaceType: Chart.ChartControlSurface,
                    type: Chart.ChartControlViewModel,
                    elementActionsTypes: [],
                    isContainer: true,
                    nonToolboxItem: true
                });
            }
            Chart.registerControls = registerControls;
            Chart.HandlerUri = "DXXCD.axd";
            function customizeDesignerActions(designerModel, nextCustomizer) {
                var chart = designerModel.model;
                return (function (actions) {
                    var save = {
                        id: Chart.ActionId.Save,
                        text: "Save",
                        imageClassName: "dxrd-image-save",
                        disabled: ko.observable(false),
                        visible: true,
                        hasSeparator: false,
                        hotKey: { ctrlKey: true, keyCode: "S".charCodeAt(0) },
                        clickAction: function () {
                            chart().save();
                        }
                    };
                    actions.push(save);
                    nextCustomizer && nextCustomizer(actions);
                });
            }
            function updateChartSurfaceContentSize(surfaceSize) {
                return function () {
                    var rightAreaWidth = $(".dxcd-designer .dxrd-right-panel").outerWidth() + $(".dxcd-right-tabs").outerWidth();
                    var leftAreaWidth = $(".dxcd-designer .dx-chart-left-panel").outerWidth();
                    $(".dxrd-surface-wrapper").css("right", rightAreaWidth);
                    $(".dxrd-surface-wrapper").css("left", leftAreaWidth);
                    var otherWidth = rightAreaWidth + leftAreaWidth, surfaceWidth = $(".dxrd-designer").width() - (otherWidth + 5);
                    $(".dxrd-surface-wrapper").css("width", surfaceWidth);
                    surfaceSize(surfaceWidth);
                };
            }
            Chart.updateChartSurfaceContentSize = updateChartSurfaceContentSize;
            function createChartDesigner(element, data, callbacks, localization, rtl) {
                if (localization) {
                    DevExpress.JS.Localization.addCultureInfo(localization);
                }
                callbacks.fieldLists = callbacks.fieldLists || Chart.ChartRequests.fieldListCallback;
                registerControls();
                var chartControlModel = ko.observable(), surface = ko.observable(), dataBindingsProvider = ko.observable(), size = new Designer.Size(data.width, data.height);
                var init = function (chartSourceValue) {
                    chartControlModel(new Chart.ChartControlViewModel(data.chartSource(), data.dataSource, size));
                    surface(new Chart.ChartControlSurface(chartControlModel())),
                        dataBindingsProvider(new Designer.FieldListProvider(callbacks.fieldLists, ko.observableArray([data.dataSource])));
                };
                data.chartSource.subscribe(function (newValue) {
                    init(newValue);
                    designerModel.chartStructure = chartControlModel()._chartStructure;
                    designerModel.selectedElement = chartControlModel()._chartElement;
                });
                init(data.chartSource());
                var designerModel = Designer.createDesigner(chartControlModel, surface, Chart.controlsFactory, undefined, undefined, undefined, rtl);
                designerModel.rootStyle = "dxrd-designer dxcd-designer";
                designerModel.chartStructure = chartControlModel()._chartStructure;
                designerModel.selectedElement = new DevExpress.JS.Widgets.ObjectProperties(chartControlModel()._chartElement);
                designerModel.parts = [
                    { templateName: "dx-chart-middlePart", model: designerModel },
                    { templateName: "dxcd-toolbar", model: designerModel },
                    { templateName: "dx-right-panel-lightweight", model: designerModel },
                    { templateName: "dx-chart-leftPanel", model: designerModel }
                ];
                designerModel.tabPanel.tabs[0].template = "dxrd-propertygridtab";
                designerModel.dataBindingsProvider = dataBindingsProvider;
                designerModel.actionLists = new Designer.ActionLists(surface, designerModel.selection, designerModel.undoEngine, customizeDesignerActions(designerModel, callbacks.customizeActions));
                designerModel.actionLists.toolbarItems = designerModel.actionLists.toolbarItems.filter(function (item) { return ["Cut", "Copy", "Paste", "Delete"].indexOf(item.text) === -1; });
                designerModel.actionLists.toolbarItems[0].hasSeparator = true;
                var lastItem = designerModel.actionLists.toolbarItems.pop();
                designerModel.actionLists.toolbarItems = [].concat(lastItem, designerModel.actionLists.toolbarItems);
                designerModel.isLoading(false);
                designerModel.selection.focused(surface());
                $(element).children().remove();
                ko.applyBindings(designerModel, element);
                var updateSurfaceContentSize_ = updateChartSurfaceContentSize(designerModel.surfaceSize);
                $(window).bind("resize", function () {
                    updateSurfaceContentSize_();
                });
                designerModel.tabPanel.width.subscribe(function () {
                    updateSurfaceContentSize_();
                });
                designerModel.updateSurfaceSize = function () {
                    updateSurfaceContentSize_();
                };
                designerModel.updateSurfaceSize();
                return designerModel;
            }
            Chart.createChartDesigner = createChartDesigner;
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.pageBorderColor = { propertyName: "pageBorderColor", modelName: "@PageBorderColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Page Border Color", editor: Designer.Widgets.editorTemplates.customColorEditor, defaultVal: "Black" };
            Report.pageBorderWidth = { propertyName: "pageBorderWidth", modelName: "@PageBorderWidth", displayName: "Page Border Width", from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1 };
            Report.pageRange = { propertyName: "pageRange", modelName: "@PageRange", displayName: "Page Range", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "" };
            Report.expotOptionsTitle = { propertyName: "title", modelName: "@Title", displayName: "Title", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "Document" };
            Report.tableLayout = { propertyName: "tableLayout", modelName: "@TableLayout", displayName: "Table Layout", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, defaultVal: true };
            Report.allowURLsWithJSContent = { propertyName: "allowURLsWithJSContent", modelName: "@AllowURLsWithJSContent", displayName: "Allow URLs with JS Content", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, defaultVal: true };
            Report.useHRefHyperlinks = { propertyName: "useHRefHyperlinks", modelName: "@UseHRefHyperlinks", displayName: "Use HRef Hyperlinks", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, defaultVal: false };
            Report.exportWatermarks = { propertyName: "exportWatermarks", modelName: "@ExportWatermarks", displayName: "Export Watermarks", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            Report.inlineCss = { propertyName: "inlineCss", modelName: "@InlineCss", displayName: "Inline Css", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            Report.removeSecondarySymbols = { propertyName: "removeSecondarySymbols", modelName: "@RemoveSecondarySymbols", displayName: "Remove Secondary Symbols", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, defaultVal: false };
            Report.characterSet = {
                propertyName: "characterSet", modelName: "@CharacterSet", displayName: "Character Set", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "utf-8",
                values: {
                    "windows-1256": "Arabic (Windows)",
                    "iso-8859-4": "Baltic (ISO)",
                    "windows-1257": "Baltic (Windows)",
                    "iso-8859-2": "Central European (ISO)",
                    "windows-1250": "Central European (Windows)",
                    "iso-8859-5": "Cyrillic (ISO)",
                    "koi8-r": "Cyrillic (KOI8-r)",
                    "windows-1251": "Cyrillic (Windows)",
                    "iso-8859-15": "Latin 9 (ISO)",
                    "utf-7": "Unicode (UTF-7)",
                    "utf-8": "Unicode (UTF-8)",
                    "iso-8859-1": "Western European (ISO)",
                    "windows-1252": "Western European (Windows)"
                }
            };
            Report.defaultExportModePreview = {
                "SingleFile": "Single File",
                "SingleFilePageByPage": "Single File PageByPage"
            };
            Report.defaultExportModeMerdedPreview = {
                "SingleFilePageByPage": "Single File PageByPage"
            };
            Report.defaultExportMode = {
                "SingleFile": "Single File",
                "SingleFilePageByPage": "Single File PageByPage",
                "DifferentFiles": "Different Files"
            };
            Report.rtfExportMode = {
                propertyName: "rtfExportMode", modelName: "@ExportMode", defaultVal: "SingleFilePageByPage",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Export Mode",
                values: $.extend({}, Report.defaultExportModePreview)
            };
            Report.rtfExportModeMergedPreview = $.extend({}, Report.rtfExportMode, {
                from: excludeModesForMergedDocuments,
                values: $.extend({}, Report.defaultExportModeMerdedPreview)
            });
            Report.htmlExportMode = {
                propertyName: "htmlExportMode", modelName: "@ExportMode", defaultVal: "SingleFile",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Export Mode",
                values: $.extend({}, Report.defaultExportMode)
            };
            Report.embedImagesInHTML = {
                propertyName: "embedImagesInHTML", modelName: "@EmbedImagesInHTML", defaultVal: false,
                editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, displayName: "Embed Images In HTML"
            };
            Report.imageExportMode = {
                propertyName: "imageExportMode", modelName: "@ExportMode", defaultVal: "SingleFile",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Export Mode",
                values: $.extend({}, Report.defaultExportMode)
            };
            Report.xlsExportMode = {
                propertyName: "xlsExportMode", modelName: "@ExportMode", defaultVal: "SingleFile",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Export Mode",
                values: $.extend({}, Report.defaultExportMode)
            };
            Report.xlsxExportMode = {
                propertyName: "xlsxExportMode", modelName: "@ExportMode", defaultVal: "SingleFile",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Export Mode",
                values: $.extend({}, Report.defaultExportMode)
            };
            Report.textExportMode = {
                propertyName: "textExportMode", modelName: "@TextExportMode", displayName: "Text Export Mode", defaultVal: "Text", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Text": "Text",
                    "Value": "Value"
                }
            };
            Report.xlsTextExportMode = {
                propertyName: "textExportMode", modelName: "@TextExportMode", displayName: "Text Export Mode", defaultVal: "Value", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Text": "Text",
                    "Value": "Value"
                }
            };
            Report.csvTextSeparator = { propertyName: "separator", modelName: "@Separator", displayName: "Separator", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "," };
            Report.textEncodingType = {
                propertyName: "encodingType", modelName: "@EncodingType", displayName: "Encoding", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Default", from: Designer.fromEnum,
                values: {
                    "Default": "Windows-1252",
                    "ASCII": "us-ascii",
                    "Unicode": "utf-16",
                    "BigEndianUnicode": "utf-16BE",
                    "UTF7": "utf-7",
                    "UTF8": "utf-8",
                    "UTF32": "utf-32"
                }
            };
            Report.xlsExportHyperlinks = {
                propertyName: "exportHyperlinks", modelName: "@ExportHyperlinks", displayName: "Export Hyperlinks", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool
            };
            Report.xlsRawDataMode = {
                propertyName: "rawDataMode", modelName: "@RawDataMode", displayName: "Raw Data Mode", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool
            };
            Report.xlsShowGridLines = {
                propertyName: "showGridLines", modelName: "@ShowGridLines", displayName: "Show Grid Lines", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool
            };
            Report.xlsExportOptionsSheetName = {
                propertyName: "sheetName", modelName: "@SheetName", displayName: "Sheet Name", defaultVal: "Sheet", editor: DevExpress.JS.Widgets.editorTemplates.text
            };
            function excludeModesForMergedDocuments(val) {
                return ko.observable("SingleFilePageByPage");
            }
            Report.excludeModesForMergedDocuments = excludeModesForMergedDocuments;
            function excludeDifferentFilesMode(val) {
                return ko.observable(val === "DifferentFiles" ? "SingleFile" : val);
            }
            Report.excludeDifferentFilesMode = excludeDifferentFilesMode;
            Report.htmlExportModePreviewBase = {
                propertyName: Report.htmlExportMode.propertyName, modelName: Report.htmlExportMode.modelName, defaultVal: Report.htmlExportMode.defaultVal,
                editor: Report.htmlExportMode.editor, displayName: Report.htmlExportMode.displayName
            };
            Report.htmlExportModePreview = $.extend({}, Report.htmlExportModePreviewBase, {
                from: excludeDifferentFilesMode,
                values: $.extend({}, Report.defaultExportModePreview)
            });
            Report.htmlExportModeMergedPreview = $.extend({}, Report.htmlExportModePreviewBase, {
                from: excludeModesForMergedDocuments,
                values: $.extend({}, Report.defaultExportModeMerdedPreview)
            });
            Report.xlsExportModePreviewBase = {
                propertyName: Report.xlsExportMode.propertyName, modelName: Report.xlsExportMode.modelName, defaultVal: Report.xlsExportMode.defaultVal,
                editor: Report.xlsExportMode.editor, displayName: Report.xlsExportMode.displayName
            };
            Report.xlsExportModePreview = $.extend({}, Report.xlsExportModePreviewBase, {
                from: excludeDifferentFilesMode,
                values: $.extend({}, Report.defaultExportModePreview)
            });
            Report.xlsExportModeMergedPreview = $.extend({}, Report.xlsExportModePreviewBase, {
                from: excludeModesForMergedDocuments,
                values: $.extend({}, Report.defaultExportModeMerdedPreview)
            });
            Report.imageExportModePreviewBase = {
                propertyName: Report.imageExportMode.propertyName, modelName: Report.imageExportMode.modelName, defaultVal: Report.imageExportMode.defaultVal,
                editor: Report.imageExportMode.editor, displayName: Report.imageExportMode.displayName
            };
            Report.imageExportModePreview = $.extend({}, Report.imageExportModePreviewBase, {
                from: excludeDifferentFilesMode,
                values: $.extend({}, Report.defaultExportModePreview)
            });
            Report.imageExportModeMergedPreview = $.extend({}, Report.imageExportModePreviewBase, {
                from: excludeModesForMergedDocuments,
                values: $.extend({}, Report.defaultExportModeMerdedPreview)
            });
            Report.xlsxExportModePreviewBase = {
                propertyName: Report.xlsxExportMode.propertyName, modelName: Report.xlsxExportMode.modelName, defaultVal: Report.xlsxExportMode.defaultVal,
                editor: Report.xlsxExportMode.editor, displayName: Report.xlsxExportMode.displayName,
            };
            Report.xlsxExportModePreview = $.extend({}, Report.xlsxExportModePreviewBase, {
                from: excludeDifferentFilesMode,
                values: $.extend({}, Report.defaultExportModePreview)
            });
            Report.xlsxExportModeMergedPreview = $.extend({}, Report.xlsxExportModePreviewBase, {
                from: excludeModesForMergedDocuments,
                values: $.extend({}, Report.defaultExportModeMerdedPreview)
            });
            Report.previewBackColor = { propertyName: "backColor", modelName: "@BackColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString };
            Report.previewSides = { propertyName: "borders", modelName: "@Sides" };
            Report.previewBorderColor = { propertyName: "borderColor", modelName: "@BorderColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString };
            Report.previewBorderStyle = { propertyName: "borderStyle", modelName: "@BorderStyle" };
            Report.previewBorderDashStyle = { propertyName: "borderDashStyle", modelName: "@BorderDashStyle" };
            Report.previewBorderWidth = { propertyName: "borderWidth", modelName: "@BorderWidthSerializable", from: Designer.floatFromModel };
            Report.previewForeColor = { propertyName: "foreColor", modelName: "@ForeColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString };
            Report.previewFont = { propertyName: "font", modelName: "@Font" };
            Report.previewPadding = { propertyName: "padding", modelName: "@Padding", from: Designer.Widgets.PaddingModel.from };
            Report.previewTextAlignment = { propertyName: "textAlignment", modelName: "@TextAlignment" };
            Report.brickStyleSerializationsInfo = [
                Report.previewBackColor,
                Report.previewSides,
                Report.previewBorderColor,
                Report.previewBorderStyle,
                Report.previewBorderDashStyle,
                Report.previewBorderWidth,
                Report.previewForeColor,
                Report.previewFont,
                Report.previewPadding,
                Report.previewTextAlignment
            ];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            Preview.AsyncExportApproach = false;
            var ExportOptionsModel = (function () {
                function ExportOptionsModel(reportPreview) {
                    var _this = this;
                    this.actions = [];
                    this._reportPreview = reportPreview;
                    this.tabInfo = new DevExpress.Designer.TabInfo(DevExpress.Designer.getLocalization("Export Options"), "dxrd-preview-export-options", reportPreview.exportOptionsModel, "properties", ko.pureComputed(function () { return !!reportPreview.exportOptionsModel(); }));
                    this.actions.push({
                        id: Preview.ActionId.ExportTo,
                        text: "Export To",
                        disabled: reportPreview.exportDisabled,
                        visible: true,
                        clickAction: function (model) {
                            if (reportPreview.exportDisabled())
                                return;
                            _this._exportDocumentByFormat(model.itemData.format);
                        },
                        items: ko.pureComputed(function () {
                            var result = _this._getExportFormatItems();
                            return [{
                                    text: "Export To",
                                    imageClassName: "dxrd-image-export-to",
                                    items: result
                                }];
                        }),
                        templateName: "dxrd-preview-export-to"
                    });
                }
                ExportOptionsModel.prototype._getExportFormatItems = function () {
                    var result = [];
                    var exportOptionsModel = this._reportPreview.exportOptionsModel();
                    if (exportOptionsModel) {
                        exportOptionsModel.pdf && result.push({ text: 'PDF', format: 'pdf' });
                        exportOptionsModel.xls && result.push({ text: 'XLS', format: 'xls' });
                        exportOptionsModel.xlsx && result.push({ text: 'XLSX', format: 'xlsx' });
                        exportOptionsModel.rtf && result.push({ text: 'RTF', format: 'rtf' });
                        exportOptionsModel.mht && result.push({ text: 'MHT', format: 'mht' });
                        exportOptionsModel.html && result.push({ text: 'HTML', format: 'html' });
                        exportOptionsModel.textExportOptions && result.push({ text: 'Text', format: 'txt' });
                        exportOptionsModel.csv && result.push({ text: 'CSV', format: 'csv' });
                        exportOptionsModel.image && result.push({ text: 'Image', format: 'image' });
                    }
                    ;
                    return result;
                };
                ExportOptionsModel.prototype._exportDocumentByFormat = function (format) {
                    format && this._reportPreview.exportDocumentTo(format);
                };
                ExportOptionsModel.prototype.getActions = function (context) {
                    return this.actions;
                };
                return ExportOptionsModel;
            })();
            Preview.ExportOptionsModel = ExportOptionsModel;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var CsvExportOptions = (function () {
                function CsvExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                CsvExportOptions.from = function (model, serializer) {
                    return new CsvExportOptions(model || {}, serializer);
                };
                CsvExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, csvExportOptionsSerializationInfo, refs);
                };
                CsvExportOptions.prototype.getInfo = function () {
                    return csvExportOptionsSerializationInfo;
                };
                return CsvExportOptions;
            })();
            Report.CsvExportOptions = CsvExportOptions;
            var csvExportOptionsSerializationInfo = [
                Report.textEncodingType,
                Report.textExportMode,
                { propertyName: "quoteStringsWithSeparators", modelName: "@QuoteStringsWithSeparators", displayName: "Quote Strings with Separators", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                Report.csvTextSeparator,
                { propertyName: "skipEmptyRows", modelName: "@SkipEmptyRows", displayName: "Skip Empty Rows", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "skipEmptyColumns", modelName: "@SkipEmptyColumns", displayName: "Skip Empty Columns", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }
            ];
            var ImageExportOptions = (function () {
                function ImageExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                ImageExportOptions.from = function (model, serializer) {
                    return new ImageExportOptions(model || {}, serializer);
                };
                ImageExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, imageExportOptionsSerializationInfo, refs);
                };
                ImageExportOptions.prototype.getInfo = function () {
                    return imageExportOptionsSerializationInfo;
                };
                ImageExportOptions.prototype.isPropertyDisabled = function (name) {
                    return ((name === "pageRange") || (name === "pageBorderWidth")) && this.imageExportMode() === "SingleFile";
                };
                return ImageExportOptions;
            })();
            Report.ImageExportOptions = ImageExportOptions;
            var imageExportOptionsSerializationInfoBase = [
                Report.pageBorderColor,
                Report.pageBorderWidth,
                Report.pageRange,
                { propertyName: "resolution", modelName: "@Resolution", displayName: "Resolution", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 96 },
                {
                    propertyName: "format", modelName: "@Format", displayName: "Format", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Png", from: Designer.fromEnum,
                    values: {
                        "Bmp": "BMP",
                        "Gif": "GIF",
                        "Jpeg": "JPEG",
                        "Png": "PNG",
                        "Emf": "EMF",
                        "Wmf": "WMF",
                        "Tiff": "TIFF"
                    }
                }
            ];
            var imageExportOptionsSerializationInfo = [Report.imageExportMode,
                { propertyName: "retainBackgroundTransparency", modelName: "@RetainBackgroundTransparency", displayName: "Retain Background Transparency", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                {
                    propertyName: "textRenderingMode", modelName: "@TextRenderingMode", displayName: "Text Rendering Mode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "SystemDefault", from: Designer.fromEnum,
                    values: {
                        "SystemDefault": "SystemDefault",
                        "SingleBitPerPixelGridFit": "SingleBitPerPixelGridFit",
                        "SingleBitPerPixel": "SingleBitPerPixel",
                        "AntiAliasGridFit": "AntiAliasGridFit",
                        "AntiAlias": "AntiAlias",
                        "ClearTypeGridFit": "ClearTypeGridFit"
                    }
                }
            ].concat(imageExportOptionsSerializationInfoBase);
            var htmlExportOptionsSerializationInfoBase = [
                Report.pageBorderColor,
                Report.pageBorderWidth,
                Report.pageRange,
                Report.expotOptionsTitle,
                Report.tableLayout,
                Report.useHRefHyperlinks,
                Report.allowURLsWithJSContent,
                Report.removeSecondarySymbols,
                Report.exportWatermarks,
                Report.characterSet
            ];
            var htmlExportOptionsSerializationInfo = [Report.htmlExportMode, Report.embedImagesInHTML, Report.inlineCss].concat(htmlExportOptionsSerializationInfoBase);
            var HtmlExportOptions = (function () {
                function HtmlExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                HtmlExportOptions.from = function (model, serializer) {
                    return new HtmlExportOptions(model || {}, serializer);
                };
                HtmlExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, htmlExportOptionsSerializationInfo, refs);
                };
                HtmlExportOptions.prototype.getInfo = function () {
                    return htmlExportOptionsSerializationInfo;
                };
                HtmlExportOptions.prototype.isPropertyDisabled = function (name) {
                    return ((name === "pageRange") || (name === "pageBorderWidth") || (name === "exportWatermarks")) && this.htmlExportMode() === "SingleFile";
                };
                return HtmlExportOptions;
            })();
            Report.HtmlExportOptions = HtmlExportOptions;
            var mhtExportOptionsSerializationInfoBase = [
                Report.pageBorderColor,
                Report.pageBorderWidth,
                Report.pageRange,
                Report.expotOptionsTitle,
                Report.characterSet,
                Report.tableLayout,
                Report.useHRefHyperlinks,
                Report.allowURLsWithJSContent,
                Report.removeSecondarySymbols,
                Report.exportWatermarks
            ];
            var mhtExportOptionsSerializationInfo = [Report.htmlExportMode, Report.inlineCss].concat(mhtExportOptionsSerializationInfoBase);
            var MhtExportOptions = (function () {
                function MhtExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                MhtExportOptions.from = function (model, serializer) {
                    return new MhtExportOptions(model || {}, serializer);
                };
                MhtExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, mhtExportOptionsSerializationInfo, refs);
                };
                MhtExportOptions.prototype.getInfo = function () {
                    return mhtExportOptionsSerializationInfo;
                };
                MhtExportOptions.prototype.isPropertyDisabled = function (name) {
                    return ((name === "pageRange") || (name === "pageBorderWidth")) && this.htmlExportMode() === "SingleFile";
                };
                return MhtExportOptions;
            })();
            Report.MhtExportOptions = MhtExportOptions;
            var PdfExportDocumentOptions = (function () {
                function PdfExportDocumentOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                PdfExportDocumentOptions.from = function (model, serializer) {
                    return new PdfExportDocumentOptions(model || {}, serializer);
                };
                PdfExportDocumentOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, pdfExportDocumentOptionsSerializationInfo, refs);
                };
                PdfExportDocumentOptions.prototype.getInfo = function () {
                    return pdfExportDocumentOptionsSerializationInfo;
                };
                return PdfExportDocumentOptions;
            })();
            Report.PdfExportDocumentOptions = PdfExportDocumentOptions;
            var author = { propertyName: "author", modelName: "@Author", displayName: "Author", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, application = { propertyName: "application", modelName: "@Application", displayName: "Application", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, title = { propertyName: "title", modelName: "@Title", displayName: "Title", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, subject = { propertyName: "subject", modelName: "@Subject", displayName: "Subject", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text };
            var pdfExportDocumentOptionsSerializationInfo = [
                author, application, title, subject,
                { propertyName: "keywords", modelName: "@Keywords", displayName: "Keywords", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }
            ];
            var PdfPermissionsOptions = (function () {
                function PdfPermissionsOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                PdfPermissionsOptions.from = function (model, serializer) {
                    return new PdfPermissionsOptions(model || {}, serializer);
                };
                PdfPermissionsOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, pdfExportPermissionsOptionsSerializationInfo, refs);
                };
                PdfPermissionsOptions.prototype.getInfo = function () {
                    return pdfExportPermissionsOptionsSerializationInfo;
                };
                return PdfPermissionsOptions;
            })();
            Report.PdfPermissionsOptions = PdfPermissionsOptions;
            var pdfExportPermissionsOptionsSerializationInfo = [
                {
                    propertyName: "printingPermissions", modelName: "@PrintingPermissions", displayName: "Printing Permissions", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    values: {
                        "None": "None",
                        "LowResolution": "LowResolution",
                        "HighResolution": "HighResolution"
                    }
                },
                {
                    propertyName: "changingPermissions", modelName: "@ChangingPermissions", displayName: "Changing Permissions", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    values: {
                        "None": "None",
                        "InsertingDeletingRotating": "InsertingDeletingRotating",
                        "FillingSigning": "FillingSigning",
                        "CommentingFillingSigning": "CommentingFillingSigning",
                        "AnyExceptExtractingPages": "AnyExceptExtractingPages"
                    }
                },
                { propertyName: "enableCopying", modelName: "@EnableCopying", displayName: "Enable Copying", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "enableScreenReaders", modelName: "@EnableScreenReaders", displayName: "Enable Screen Readers", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }
            ];
            var PdfPasswordSecurityOptions = (function () {
                function PdfPasswordSecurityOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                PdfPasswordSecurityOptions.from = function (model, serializer) {
                    return new PdfPasswordSecurityOptions(model || {}, serializer);
                };
                PdfPasswordSecurityOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, pdfExportPasswordSecurityOptionsSerializationInfo, refs);
                };
                PdfPasswordSecurityOptions.prototype.getInfo = function () {
                    return pdfExportPasswordSecurityOptionsSerializationInfo;
                };
                PdfPasswordSecurityOptions.prototype.isPropertyDisabled = function (name) {
                    var openPass = this.openPassword();
                    if (!this.permissionsPassword()) {
                        if (name === "permissionsOptions")
                            return true;
                        if (!openPass && name === pdfEncryptionLevel.propertyName)
                            return true;
                    }
                };
                PdfPasswordSecurityOptions.prototype.hasSensitiveData = function () {
                    return !!(this.openPassword() || this.permissionsPassword());
                };
                return PdfPasswordSecurityOptions;
            })();
            Report.PdfPasswordSecurityOptions = PdfPasswordSecurityOptions;
            var pdfEncryptionLevel = {
                propertyName: "encryptionLevel", modelName: "@EncryptionLevel", displayName: "Encryption Level", defaultVal: "AES128", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "ARC4": "ARC4",
                    "AES128": "AES128",
                    "AES256": "AES256",
                }
            };
            var pdfExportPasswordSecurityOptionsSerializationInfo = [
                { propertyName: "openPassword", modelName: "@OpenPassword", displayName: "Open Password", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text, editorOptions: { mode: 'password' } },
                pdfEncryptionLevel,
                { propertyName: "permissionsPassword", modelName: "@PermissionsPassword", displayName: "Permissions Password", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text, editorOptions: { mode: 'password' } },
                { propertyName: "permissionsOptions", modelName: "PermissionsOptions", displayName: "Pdf Permissions Options", from: PdfPermissionsOptions.from, toJsonObject: PdfPermissionsOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }
            ];
            var PdfExportOptions = (function () {
                function PdfExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                PdfExportOptions.from = function (model, serializer) {
                    return new PdfExportOptions(model || {}, serializer);
                };
                PdfExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, pdfExportOptionsSerializationInfo, refs);
                };
                PdfExportOptions.prototype.getInfo = function () {
                    return pdfExportOptionsSerializationInfo;
                };
                PdfExportOptions.prototype.isPropertyDisabled = function (name) {
                    return false;
                };
                PdfExportOptions.prototype.hasSensitiveData = function () {
                    return this.pdfPasswordSecurityOptions && this.pdfPasswordSecurityOptions.hasSensitiveData();
                };
                return PdfExportOptions;
            })();
            Report.PdfExportOptions = PdfExportOptions;
            var pdfExportOptionsSerializationInfo = [
                { propertyName: "convertImagesToJpeg", modelName: "@ConvertImagesToJpeg", displayName: "Convert Images to Jpeg", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "showPrintDialogOnOpen", modelName: "@ShowPrintDialogOnOpen", displayName: "Show Print Dialog on Open", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "compressed", modelName: "@Compressed", displayName: "Compressed", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "neverEmbeddedFonts", modelName: "@NeverEmbeddedFonts", displayName: "Never Embedded Fonts", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                {
                    propertyName: "imageQuality", modelName: "@ImageQuality", displayName: "Image Quality", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Highest", from: Designer.fromEnum,
                    values: {
                        "Lowest": "Lowest",
                        "Low": "Low",
                        "Medium": "Medium",
                        "Hight": "Hight",
                        "Highest": "Highest"
                    }
                },
                {
                    propertyName: "pdfACompatibility", modelName: "@PdfACompatibility", displayName: "PDF A Compatibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "None", from: Designer.fromEnum,
                    values: {
                        "Hight": "None",
                        "PdfA1b": "PdfA1b",
                        "PdfA2b": "PdfA2b",
                        "PdfA3b": "PdfA3b"
                    }
                },
                Report.pageRange,
                { propertyName: "documentOptions", modelName: "DocumentOptions", displayName: "Document Options", from: PdfExportDocumentOptions.from, toJsonObject: PdfExportDocumentOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "pdfPasswordSecurityOptions", modelName: "PasswordSecurityOptions", displayName: "Pdf Password Security Options", from: PdfPasswordSecurityOptions.from, toJsonObject: PdfPasswordSecurityOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }
            ];
            var RtfExportOptions = (function () {
                function RtfExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                RtfExportOptions.from = function (model, serializer) {
                    return new RtfExportOptions(model || {}, serializer);
                };
                RtfExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, rtfExportOptionsSerializationInfo, refs);
                };
                RtfExportOptions.prototype.getInfo = function () {
                    return rtfExportOptionsSerializationInfo;
                };
                RtfExportOptions.prototype.isPropertyDisabled = function (name) {
                    return ((name === "pageRange") || (name === "exportWatermarks")) && this.rtfExportMode() === "SingleFile";
                };
                return RtfExportOptions;
            })();
            Report.RtfExportOptions = RtfExportOptions;
            var rtfExportOptionsSerializationInfoBase = [
                Report.pageRange,
                Report.exportWatermarks
            ];
            var rtfExportOptionsSerializationInfo = [
                { propertyName: "emptyFirstPageHeaderFooter", modelName: "@EmptyFirstPageHeaderFooter", displayName: "Empty First Page Header Footer", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "exportPageBreaks", modelName: "@ExportPageBreaks", displayName: "Export Page Breaks", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "keepRowHeight", modelName: "@KeepRowHeight", displayName: "Keep Row Height", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                Report.rtfExportMode
            ].concat(rtfExportOptionsSerializationInfoBase);
            var TextExportOptions = (function () {
                function TextExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                TextExportOptions.from = function (model, serializer) {
                    return new TextExportOptions(model || {}, serializer);
                };
                TextExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, textExportOptionsSerializationInfo, refs);
                };
                TextExportOptions.prototype.getInfo = function () {
                    return textExportOptionsSerializationInfo;
                };
                return TextExportOptions;
            })();
            Report.TextExportOptions = TextExportOptions;
            var textExportOptionsSerializationInfo = [
                Report.textEncodingType,
                { propertyName: "quoteStringsWithSeparators", modelName: "@QuoteStringsWithSeparators", displayName: "Quote Strings with Separators", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "separator", modelName: "@Separator", displayName: "Separator", defaultVal: "TAB", editor: DevExpress.JS.Widgets.editorTemplates.text },
                Report.textExportMode
            ];
            var documentOptionsSerializationsInfo = [
                author, application, title, subject,
                { propertyName: "tags", modelName: "@Tags", displayName: "Tags", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "category", modelName: "@Category", displayName: "Category", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "comments", modelName: "@Comments", displayName: "Comments", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "company", modelName: "@Company", displayName: "Company", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }
            ];
            var documentOptions = { propertyName: "documentOptions", modelName: "DocumentOptions", displayName: "Document Options", info: documentOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var encryptionOptionsSerializationsInfo = [
                {
                    propertyName: "type", modelName: "@Type", displayName: "Type", defaultVal: "Strong", editor: DevExpress.JS.Widgets.editorTemplates.combobox, from: Designer.fromEnum,
                    values: {
                        "Strong": "Strong",
                        "Compatible": "Compatible"
                    }
                },
                { propertyName: "password", modelName: "@Password", displayName: "Password", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text, editorOptions: { mode: 'password' } }
            ];
            var encryptionOptions = { propertyName: "encryptionOptions", modelName: "EncryptionOptions", displayName: "Encryption Options", info: encryptionOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var xlsExportOptionsSerializationInfoCommon = [
                Report.xlsExportHyperlinks,
                Report.pageRange,
                Report.xlsRawDataMode,
                Report.xlsExportOptionsSheetName,
                Report.xlsShowGridLines,
                Report.xlsTextExportMode,
                { propertyName: "rasterizeImages", modelName: "@RasterizeImages", displayName: "Rasterize Images", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "rasterizationResolution", modelName: "@RasterizationResolution", displayName: "Rasterization Resolution", defaultVal: 96, editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "fitToPrintedPageWidth", modelName: "@FitToPrintedPageWidth", displayName: "Fit To Printed Page Width", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "fitToPrintedPageHeight", modelName: "@FitToPrintedPageHeight", displayName: "Fit To Printed Page Height", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                {
                    propertyName: "ignoreErrors", modelName: "@IgnoreErrors", displayName: "Ignore Errors", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "None", from: Designer.fromEnum, values: {
                        "None": "None",
                        "NumberStoredAsText": "Number Stored As Text"
                    }
                },
                {
                    propertyName: "rightToLeftDocument", modelName: "@RightToLeftDocument", displayName: "Right To Left Document", defaultVal: "Default", from: Designer.fromEnum, editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                        "True": "True",
                        "False": "False",
                        "Default": "Default"
                    }
                },
                documentOptions,
                encryptionOptions
            ];
            var xlsExportOptionsSerializationInfoBase = [
                { propertyName: "suppress256ColumnsWarning", modelName: "@Suppress256ColumnsWarning", displayName: "Suppress 256 Columns Warning", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "suppress65536RowsWarning", modelName: "@Suppress65536RowsWarning", displayName: "Suppress 65536 Rows Warning", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                {
                    propertyName: "workbookColorPaletteCompliance", modelName: "@WorkbookColorPaletteCompliance", displayName: "Workbook Color Palette Compliance", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "ReducePaletteForExactColors", from: Designer.fromEnum,
                    values: {
                        "ReducePaletteForExactColors": "ReducePaletteForExactColors",
                        "AdjustColorsToDefaultPalette": "AdjustColorsToDefaultPalette"
                    }
                }
            ];
            var xlsExportOptionsSerializationInfo = [Report.xlsExportMode].concat(xlsExportOptionsSerializationInfoCommon, xlsExportOptionsSerializationInfoBase);
            var XlsExportOptions = (function () {
                function XlsExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                XlsExportOptions.from = function (model, serializer) {
                    return new XlsExportOptions(model || {}, serializer);
                };
                XlsExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, xlsExportOptionsSerializationInfo, refs);
                };
                XlsExportOptions.prototype.getInfo = function () {
                    return xlsExportOptionsSerializationInfo;
                };
                XlsExportOptions.prototype.isPropertyDisabled = function (name) {
                    return name === "pageRange" && this.xlsExportMode() === "SingleFile";
                };
                XlsExportOptions.prototype.hasSensitiveData = function () {
                    return !!(this.encryptionOptions && this.encryptionOptions.password());
                };
                return XlsExportOptions;
            })();
            Report.XlsExportOptions = XlsExportOptions;
            var xlsxExportOptionsSerializationInfo = [Report.xlsxExportMode].concat(xlsExportOptionsSerializationInfoCommon);
            var XlsxExportOptions = (function () {
                function XlsxExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                XlsxExportOptions.from = function (model, serializer) {
                    return new XlsxExportOptions(model || {}, serializer);
                };
                XlsxExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, xlsxExportOptionsSerializationInfo, refs);
                };
                XlsxExportOptions.prototype.getInfo = function () {
                    return xlsxExportOptionsSerializationInfo;
                };
                XlsxExportOptions.prototype.isPropertyDisabled = function (name) {
                    return name === "pageRange" && this.xlsxExportMode() === "SingleFile";
                };
                XlsxExportOptions.prototype.hasSensitiveData = function () {
                    return !!(this.encryptionOptions && this.encryptionOptions.password());
                };
                return XlsxExportOptions;
            })();
            Report.XlsxExportOptions = XlsxExportOptions;
            var ExportOptions = (function () {
                function ExportOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                ExportOptions.from = function (model, serializer) {
                    return new ExportOptions(model || {}, serializer);
                };
                ExportOptions.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, exportOptionsSerializationInfo, refs);
                };
                ExportOptions.prototype.getInfo = function () {
                    return exportOptionsSerializationInfo;
                };
                return ExportOptions;
            })();
            Report.ExportOptions = ExportOptions;
            var nativeFormatOptionsSerializationInfo = [
                { propertyName: "compressed", modelName: "@Compressed", displayName: "Compressed", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                { propertyName: "showOptionsBeforeSave", modelName: "@ShowOptionsBeforeSave", displayName: "Show Options Before Save", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }
            ];
            var additionalRecipientSerializationsInfo = [
                { propertyName: "ContactName", modelName: "@ContactName", displayName: "ContactName", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "Address", modelName: "@Address", displayName: "Address", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "Prefix", modelName: "@Prefix", displayName: "Prefix", defaultVal: "SMTP:", editor: DevExpress.JS.Widgets.editorTemplates.text },
                {
                    propertyName: "fieldType", modelName: "@FieldType", displayName: "Field Type", defaultVal: "TO", editor: DevExpress.JS.Widgets.editorTemplates.combobox, from: Designer.fromEnum,
                    values: {
                        "TO": "TO",
                        "CC": "CC",
                        "BCC": "BCC"
                    }
                },
            ];
            var AdditionalRecipientModel = (function () {
                function AdditionalRecipientModel(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                AdditionalRecipientModel.prototype.getInfo = function () {
                    return additionalRecipientSerializationsInfo;
                };
                AdditionalRecipientModel.createNew = function () {
                    return new AdditionalRecipientModel({});
                };
                return AdditionalRecipientModel;
            })();
            Report.AdditionalRecipientModel = AdditionalRecipientModel;
            Report.additionalRecipients = { propertyName: "additionalRecipients", modelName: "AdditionalRecipients", displayName: "Additional Recipients", array: true, editor: DevExpress.JS.Widgets.editorTemplates.commonCollection, addHandler: DevExpress.Designer.Report.AdditionalRecipientModel.createNew, template: '#dxrd-commonCollectionItem' };
            var emailOptionsSerializationInfo = [
                { propertyName: "recipientName", modelName: "@RecipientName", displayName: "Recipient Name", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "recipientAddress", modelName: "@RecipientAddress", displayName: "Recipient Address", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "recipientAddressPrefix", modelName: "@RecipientAddressPrefix", displayName: "Recipient Address Prefix", defaultVal: "SMTP:", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "subject", modelName: "@Subject", displayName: "Subject", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "body", modelName: "@Body", displayName: "Body", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                Report.additionalRecipients
            ];
            var exportOptionsSerializationInfo = [
                { propertyName: "csv", modelName: "Csv", displayName: "CSV Export Options", from: CsvExportOptions.from, toJsonObject: CsvExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "email", modelName: "Email", displayName: "E-mail Options", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: emailOptionsSerializationInfo },
                { propertyName: "html", modelName: "Html", displayName: "HTML Export Options", from: HtmlExportOptions.from, toJsonObject: HtmlExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "image", modelName: "Image", displayName: "Image Export Options", from: ImageExportOptions.from, toJsonObject: ImageExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "mailMessage", modelName: "MailMessage", displayName: "Mail Message Export Options", from: MhtExportOptions.from, toJsonObject: MhtExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "mht", modelName: "Mht", displayName: "MHT Export Options", from: MhtExportOptions.from, toJsonObject: MhtExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "nativeFormat", modelName: "NativeFormat", displayName: "Native Format Options", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: nativeFormatOptionsSerializationInfo },
                { propertyName: "pdf", modelName: "Pdf", displayName: "PDF Export Options", from: PdfExportOptions.from, toJsonObject: PdfExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "rtf", modelName: "Rtf", displayName: "RTF Export Options", from: RtfExportOptions.from, toJsonObject: RtfExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "textExportOptions", modelName: "Text", displayName: "Text Export Options", from: TextExportOptions.from, toJsonObject: TextExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "xls", modelName: "Xls", displayName: "XLS Export Options", from: XlsExportOptions.from, toJsonObject: XlsExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                { propertyName: "xlsx", modelName: "Xlsx", displayName: "XLSx Export Options", from: XlsxExportOptions.from, toJsonObject: XlsxExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }
            ];
            var htmlExportOptionsSerializationInfoPreview = [].concat(htmlExportOptionsSerializationInfoBase);
            var HtmlExportOptionsPreview = (function (_super) {
                __extends(HtmlExportOptionsPreview, _super);
                function HtmlExportOptionsPreview() {
                    _super.apply(this, arguments);
                }
                HtmlExportOptionsPreview.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, value.getInfo(), refs);
                };
                HtmlExportOptionsPreview.prototype.getInfo = function () {
                    var variableInfo = this._getVariableInfo();
                    return variableInfo.concat(htmlExportOptionsSerializationInfoPreview);
                };
                HtmlExportOptionsPreview.prototype._getVariableInfo = function () {
                    return [Report.htmlExportModePreview];
                };
                return HtmlExportOptionsPreview;
            })(HtmlExportOptions);
            Report.HtmlExportOptionsPreview = HtmlExportOptionsPreview;
            var HtmlExportOptionsMergedPreview = (function (_super) {
                __extends(HtmlExportOptionsMergedPreview, _super);
                function HtmlExportOptionsMergedPreview() {
                    _super.apply(this, arguments);
                }
                HtmlExportOptionsMergedPreview.prototype._getVariableInfo = function () {
                    return [Report.htmlExportModeMergedPreview];
                };
                HtmlExportOptionsMergedPreview.prototype.isPropertyDisabled = function (name) {
                    return _super.prototype.isPropertyDisabled.call(this, name) || name === Report.htmlExportModeMergedPreview.propertyName;
                };
                return HtmlExportOptionsMergedPreview;
            })(HtmlExportOptionsPreview);
            Report.HtmlExportOptionsMergedPreview = HtmlExportOptionsMergedPreview;
            var imageExportOptionsSerializationInfoPreview = [].concat(imageExportOptionsSerializationInfoBase);
            var ImageExportOptionsPreview = (function (_super) {
                __extends(ImageExportOptionsPreview, _super);
                function ImageExportOptionsPreview() {
                    _super.apply(this, arguments);
                }
                ImageExportOptionsPreview.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, value.getInfo(), refs);
                };
                ImageExportOptionsPreview.prototype.getInfo = function () {
                    var variableInfo = this._getVariableInfo();
                    return variableInfo.concat(imageExportOptionsSerializationInfoPreview);
                };
                ImageExportOptionsPreview.prototype._getVariableInfo = function () {
                    return [Report.imageExportModePreview];
                };
                return ImageExportOptionsPreview;
            })(ImageExportOptions);
            Report.ImageExportOptionsPreview = ImageExportOptionsPreview;
            var ImageExportOptionsMergedPreview = (function (_super) {
                __extends(ImageExportOptionsMergedPreview, _super);
                function ImageExportOptionsMergedPreview() {
                    _super.apply(this, arguments);
                }
                ImageExportOptionsMergedPreview.prototype._getVariableInfo = function () {
                    return [Report.imageExportModeMergedPreview];
                };
                ImageExportOptionsMergedPreview.prototype.isPropertyDisabled = function (name) {
                    return _super.prototype.isPropertyDisabled.call(this, name) || name === Report.imageExportModeMergedPreview.propertyName;
                };
                return ImageExportOptionsMergedPreview;
            })(ImageExportOptionsPreview);
            Report.ImageExportOptionsMergedPreview = ImageExportOptionsMergedPreview;
            var mhtExportOptionsSerializationInfoPreview = [].concat(mhtExportOptionsSerializationInfoBase);
            var MhtExportOptionsPreview = (function (_super) {
                __extends(MhtExportOptionsPreview, _super);
                function MhtExportOptionsPreview() {
                    _super.apply(this, arguments);
                }
                MhtExportOptionsPreview.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, value.getInfo(), refs);
                };
                MhtExportOptionsPreview.prototype.getInfo = function () {
                    var variableInfo = this._getVariableInfo();
                    return variableInfo.concat(mhtExportOptionsSerializationInfoPreview);
                };
                MhtExportOptionsPreview.prototype._getVariableInfo = function () {
                    return [Report.htmlExportModePreview];
                };
                return MhtExportOptionsPreview;
            })(MhtExportOptions);
            Report.MhtExportOptionsPreview = MhtExportOptionsPreview;
            var MhtExportOptionsMergedPreview = (function (_super) {
                __extends(MhtExportOptionsMergedPreview, _super);
                function MhtExportOptionsMergedPreview() {
                    _super.apply(this, arguments);
                }
                MhtExportOptionsMergedPreview.prototype._getVariableInfo = function () {
                    return [Report.htmlExportModeMergedPreview];
                };
                MhtExportOptionsMergedPreview.prototype.isPropertyDisabled = function (name) {
                    return _super.prototype.isPropertyDisabled.call(this, name) || name === Report.htmlExportModeMergedPreview.propertyName;
                };
                return MhtExportOptionsMergedPreview;
            })(MhtExportOptionsPreview);
            Report.MhtExportOptionsMergedPreview = MhtExportOptionsMergedPreview;
            var rtfExportOptionsSerializationInfoPreview = [].concat(rtfExportOptionsSerializationInfoBase);
            var RtfExportOptionsPreview = (function (_super) {
                __extends(RtfExportOptionsPreview, _super);
                function RtfExportOptionsPreview() {
                    _super.apply(this, arguments);
                }
                RtfExportOptionsPreview.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, value.getInfo(), refs);
                };
                RtfExportOptionsPreview.prototype.getInfo = function () {
                    var variableInfo = this._getVariableInfo();
                    return variableInfo.concat(rtfExportOptionsSerializationInfoPreview);
                };
                RtfExportOptionsPreview.prototype._getVariableInfo = function () {
                    return [Report.rtfExportMode];
                };
                return RtfExportOptionsPreview;
            })(RtfExportOptions);
            Report.RtfExportOptionsPreview = RtfExportOptionsPreview;
            var RtfExportOptionsMergedPreview = (function (_super) {
                __extends(RtfExportOptionsMergedPreview, _super);
                function RtfExportOptionsMergedPreview() {
                    _super.apply(this, arguments);
                }
                RtfExportOptionsMergedPreview.prototype._getVariableInfo = function () {
                    return [Report.rtfExportModeMergedPreview];
                };
                RtfExportOptionsMergedPreview.prototype.isPropertyDisabled = function (name) {
                    return _super.prototype.isPropertyDisabled.call(this, name) || name === Report.rtfExportModeMergedPreview.propertyName;
                };
                return RtfExportOptionsMergedPreview;
            })(RtfExportOptionsPreview);
            Report.RtfExportOptionsMergedPreview = RtfExportOptionsMergedPreview;
            var xlsExportOptionsSerializationInfoPreview = [].concat(xlsExportOptionsSerializationInfoBase, xlsExportOptionsSerializationInfoCommon);
            var XlsExportOptionsPreview = (function (_super) {
                __extends(XlsExportOptionsPreview, _super);
                function XlsExportOptionsPreview() {
                    _super.apply(this, arguments);
                }
                XlsExportOptionsPreview.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, value.getInfo(), refs);
                };
                XlsExportOptionsPreview.prototype.getInfo = function () {
                    var variableInfo = this._getVariableInfo();
                    return variableInfo.concat(xlsExportOptionsSerializationInfoPreview);
                };
                XlsExportOptionsPreview.prototype._getVariableInfo = function () {
                    return [Report.xlsExportModePreview];
                };
                return XlsExportOptionsPreview;
            })(XlsExportOptions);
            Report.XlsExportOptionsPreview = XlsExportOptionsPreview;
            var XlsExportOptionsMergedPreview = (function (_super) {
                __extends(XlsExportOptionsMergedPreview, _super);
                function XlsExportOptionsMergedPreview() {
                    _super.apply(this, arguments);
                }
                XlsExportOptionsMergedPreview.prototype._getVariableInfo = function () {
                    return [Report.xlsExportModeMergedPreview];
                };
                XlsExportOptionsMergedPreview.prototype.isPropertyDisabled = function (name) {
                    return _super.prototype.isPropertyDisabled.call(this, name) || name === Report.xlsExportModeMergedPreview.propertyName;
                };
                return XlsExportOptionsMergedPreview;
            })(XlsExportOptionsPreview);
            Report.XlsExportOptionsMergedPreview = XlsExportOptionsMergedPreview;
            var xlsxExportOptionsSerializationInfoPreview = [].concat(xlsExportOptionsSerializationInfoCommon);
            var XlsxExportOptionsPreview = (function (_super) {
                __extends(XlsxExportOptionsPreview, _super);
                function XlsxExportOptionsPreview() {
                    _super.apply(this, arguments);
                }
                XlsxExportOptionsPreview.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, value.getInfo(), refs);
                };
                XlsxExportOptionsPreview.prototype.getInfo = function () {
                    var variableInfo = this._getVariableInfo();
                    return variableInfo.concat(xlsxExportOptionsSerializationInfoPreview);
                };
                XlsxExportOptionsPreview.prototype._getVariableInfo = function () {
                    return [Report.xlsxExportModePreview];
                };
                return XlsxExportOptionsPreview;
            })(XlsxExportOptions);
            Report.XlsxExportOptionsPreview = XlsxExportOptionsPreview;
            var XlsxExportOptionsMergedPreview = (function (_super) {
                __extends(XlsxExportOptionsMergedPreview, _super);
                function XlsxExportOptionsMergedPreview() {
                    _super.apply(this, arguments);
                }
                XlsxExportOptionsMergedPreview.prototype._getVariableInfo = function () {
                    return [Report.xlsxExportModeMergedPreview];
                };
                XlsxExportOptionsMergedPreview.prototype.isPropertyDisabled = function (name) {
                    return _super.prototype.isPropertyDisabled.call(this, name) || name === Report.xlsxExportModeMergedPreview.propertyName;
                };
                return XlsxExportOptionsMergedPreview;
            })(XlsxExportOptionsPreview);
            Report.XlsxExportOptionsMergedPreview = XlsxExportOptionsMergedPreview;
            var ExportOptionsPreview = (function (_super) {
                __extends(ExportOptionsPreview, _super);
                function ExportOptionsPreview() {
                    _super.apply(this, arguments);
                }
                ExportOptionsPreview.prototype._generateFromFunction = function (exportType) {
                    return function (model, serializer) {
                        return new exportType(model || {}, serializer);
                    };
                };
                ExportOptionsPreview.prototype._generateInfo = function () {
                    return [
                        { propertyName: "csv", modelName: "Csv", displayName: "CSV Export Options", from: CsvExportOptions.from, toJsonObject: CsvExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "html", modelName: "Html", displayName: "HTML Export Options", from: this._generateFromFunction(HtmlExportOptionsPreview), toJsonObject: HtmlExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "image", modelName: "Image", displayName: "Image Export Options", from: this._generateFromFunction(ImageExportOptionsPreview), toJsonObject: ImageExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "mht", modelName: "Mht", displayName: "MHT Export Options", from: this._generateFromFunction(MhtExportOptionsPreview), toJsonObject: MhtExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "pdf", modelName: "Pdf", displayName: "PDF Export Options", from: PdfExportOptions.from, toJsonObject: PdfExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "rtf", modelName: "Rtf", displayName: "RTF Export Options", from: this._generateFromFunction(RtfExportOptionsPreview), toJsonObject: RtfExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "textExportOptions", modelName: "Text", displayName: "Text Export Options", from: TextExportOptions.from, toJsonObject: TextExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "xls", modelName: "Xls", displayName: "XLS Export Options", from: this._generateFromFunction(XlsExportOptionsPreview), toJsonObject: XlsExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "xlsx", modelName: "Xlsx", displayName: "XLSx Export Options", from: this._generateFromFunction(XlsxExportOptionsPreview), toJsonObject: XlsxExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }
                    ];
                };
                ExportOptionsPreview.prototype.hasSensitiveData = function () {
                    return (this.xls && this.xls.hasSensitiveData())
                        || (this.xlsx && this.xlsx.hasSensitiveData())
                        || (this.pdf && this.pdf.hasSensitiveData());
                };
                ExportOptionsPreview.prototype.getInfo = function () {
                    return this._generateInfo();
                };
                return ExportOptionsPreview;
            })(ExportOptions);
            Report.ExportOptionsPreview = ExportOptionsPreview;
            var ExportOptionsMergedPreview = (function (_super) {
                __extends(ExportOptionsMergedPreview, _super);
                function ExportOptionsMergedPreview() {
                    _super.apply(this, arguments);
                }
                ExportOptionsMergedPreview.prototype._generateInfo = function () {
                    return [
                        { propertyName: "csv", modelName: "Csv", displayName: "CSV Export Options", from: CsvExportOptions.from, toJsonObject: CsvExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "html", modelName: "Html", displayName: "HTML Export Options", from: this._generateFromFunction(HtmlExportOptionsMergedPreview), toJsonObject: HtmlExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "image", modelName: "Image", displayName: "Image Export Options", from: this._generateFromFunction(ImageExportOptionsMergedPreview), toJsonObject: ImageExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "mht", modelName: "Mht", displayName: "MHT Export Options", from: this._generateFromFunction(MhtExportOptionsMergedPreview), toJsonObject: MhtExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "pdf", modelName: "Pdf", displayName: "PDF Export Options", from: PdfExportOptions.from, toJsonObject: PdfExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "rtf", modelName: "Rtf", displayName: "RTF Export Options", from: this._generateFromFunction(RtfExportOptionsMergedPreview), toJsonObject: RtfExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "textExportOptions", modelName: "Text", displayName: "Text Export Options", from: TextExportOptions.from, toJsonObject: TextExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "xls", modelName: "Xls", displayName: "XLS Export Options", from: this._generateFromFunction(XlsExportOptionsMergedPreview), toJsonObject: XlsExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor },
                        { propertyName: "xlsx", modelName: "Xlsx", displayName: "XLSx Export Options", from: this._generateFromFunction(XlsxExportOptionsMergedPreview), toJsonObject: XlsxExportOptionsPreview.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }
                    ];
                };
                return ExportOptionsMergedPreview;
            })(ExportOptionsPreview);
            Report.ExportOptionsMergedPreview = ExportOptionsMergedPreview;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            Preview.previewDefaultResolution = 96;
            function convetToPercent(childSize, parentSize) {
                return childSize * 100 / parentSize + '%';
            }
            Preview.convetToPercent = convetToPercent;
            function brickText(brick, editingFieldsProvider) {
                var fields = editingFieldsProvider ? editingFieldsProvider() : [];
                if (brick.efIndex && brick.efIndex > 0 && brick.efIndex <= fields.length && fields[brick.efIndex - 1].type() === "text") {
                    return fields[brick.efIndex - 1].editValue();
                }
                else {
                    var brickTextProperty = brick.content && brick.content.filter(function (x) { return x.Key === "text"; })[0];
                    return brickTextProperty && brickTextProperty.Value;
                }
            }
            Preview.brickText = brickText;
            function initializeBrick(brick, processClick, zoom, editingFieldBricks) {
                if (!brick) {
                    return;
                }
                !!brick.active && !!brick.active(false) || (brick.active = ko.observable(false));
                brick["onClick"] = function () { processClick && processClick(brick); };
                brick.bricks && brick.bricks.forEach(function (childBrick) {
                    childBrick[brick.rtl ? 'rightP' : 'leftP'] = convetToPercent(childBrick.left, brick.width);
                    childBrick.widthP = convetToPercent(childBrick.width, brick.width);
                    childBrick.topP = convetToPercent(childBrick.top, brick.height);
                    childBrick.heightP = convetToPercent(childBrick.height, brick.height);
                    initializeBrick(childBrick, processClick, zoom, editingFieldBricks);
                });
                if (brick.efIndex > 0) {
                    editingFieldBricks.push(brick);
                }
                brick.text = function () { return brickText(brick); };
            }
            Preview.initializeBrick = initializeBrick;
            var PreviewPageBrickProvider = (function () {
                function PreviewPageBrickProvider(handlerUri, documentId, ignoreErrorPredicate) {
                    this.getBricks = function (pageIndex) {
                        return DevExpress.Designer.ajax(handlerUri, 'getBrickMap', encodeURIComponent(JSON.stringify({ pageIndex: pageIndex, documentId: documentId })), undefined, ignoreErrorPredicate);
                    };
                }
                return PreviewPageBrickProvider;
            })();
            Preview.PreviewPageBrickProvider = PreviewPageBrickProvider;
            function getCurrentResolution(zoom) {
                return Math.floor((zoom || 1) * Preview.previewDefaultResolution);
            }
            Preview.getCurrentResolution = getCurrentResolution;
            var PreviewPage = (function (_super) {
                __extends(PreviewPage, _super);
                function PreviewPage(pageIndex, width, height, zoom, documentId, color, brickProvider, loading, processClick, previewEditingFields) {
                    var _this = this;
                    _super.call(this);
                    this.editingFields = null;
                    this.isClientVisible = ko.observable(false);
                    this.originalHeight = ko.observable(0);
                    this.originalWidth = ko.observable(0);
                    this.loadingText = DevExpress.Designer.getLocalization("Loading...");
                    this.realZoom = ko.observable(1);
                    this.actualResolution = 0;
                    this.pageLoadFailed = ko.observable(false);
                    this.imageSrc = ko.observable("");
                    this.cachedImageSrc = ko.observable("");
                    this.brick = ko.observable(null);
                    this.brickLoading = ko.observable(true);
                    this.active = ko.observable(false);
                    this.maxZoom = 0;
                    this.disableResolutionReduction = false;
                    this._lastZoom = 0;
                    this._selectedBrickPath = null;
                    this.pageIndex = pageIndex;
                    this.documentId = documentId || ko.observable(null);
                    this.brickProvider = brickProvider;
                    this.pageLoading = loading || ko.observable(true);
                    this.originalHeight(ko.unwrap(height));
                    this.originalWidth(ko.unwrap(width));
                    this.zoom = zoom;
                    this.isClientVisible.subscribe(function (newVal) {
                        if (_this.isClientVisible()) {
                            _this._setPageImgSrc(documentId(), _this.zoom());
                        }
                    });
                    this.color = color;
                    this.width = ko.pureComputed(function () {
                        return Math.ceil(_this.originalWidth() * getCurrentResolution(_this.zoom()) / Preview.previewDefaultResolution);
                    });
                    this.height = ko.pureComputed(function () {
                        return Math.ceil(_this.originalHeight() * getCurrentResolution(_this.zoom()) / Preview.previewDefaultResolution);
                    });
                    var _self = this;
                    this.isEmpty = pageIndex === -1 && !brickProvider && !processClick;
                    this.onPageLoaded = function (_s, _e) {
                        _self.pageLoading(false);
                        _self.pageLoadFailed(false);
                        if (_self.cachedImageSrc() !== _self.imageSrc()) {
                            _self.originalHeight() && ko.isObservable(height) && height(_self.originalHeight());
                            _self.originalWidth() && ko.isObservable(width) && width(_self.originalWidth());
                            if (!_self.brick() && _self.brickProvider) {
                                _self.brickProvider.getBricks(_self.pageIndex)
                                    .done(function (result) {
                                    try {
                                        if (!result || !result.brick) {
                                            return;
                                        }
                                        _self.brickColumnWidthArray = result.columnWidthArray;
                                        _self.originalWidth(result.brick.width);
                                        _self.originalHeight(result.brick.height);
                                        var editignFieldBricks = [];
                                        _self.initializeBrick(result.brick, processClick, _self.zoom, editignFieldBricks);
                                        _self._initializeEditingFields(editignFieldBricks, previewEditingFields, result.brick.width, result.brick.height);
                                        _self._selectedBrickPath && _self.selectBrick(_self._selectedBrickPath);
                                    }
                                    finally {
                                        _self.brickLoading(false);
                                    }
                                }).fail(function (error) {
                                    _self.brickLoading(false);
                                });
                            }
                            else {
                                _self.brickLoading(false);
                            }
                            _self.cachedImageSrc(_self.imageSrc());
                        }
                    };
                    this.onPageLoadFailed = function (s, e) {
                        if (_self.pageIndex !== -1 && _self.isClientVisible()) {
                            _self.pageLoadFailed(true);
                            _self.pageLoading(false);
                            _self.brickLoading(false);
                        }
                    };
                    this.resetBrickRecusive = function (brick) {
                        if (brick && brick.active) {
                            brick.active(false);
                            if (brick.bricks) {
                                brick.bricks.forEach(function (childBrick) { _self.resetBrickRecusive(childBrick); });
                            }
                        }
                    };
                    this.selectBrick = function (path, ctrlKey) {
                        processClick && processClick(null);
                        var currentBrick = _self.brick();
                        !ctrlKey && _self.resetBrickRecusive(currentBrick);
                        if (!path) {
                            return;
                        }
                        if (!currentBrick) {
                            _self._selectedBrickPath = path;
                            return;
                        }
                        var pathElements = path.split(",");
                        pathElements.forEach(function (el) {
                            currentBrick = currentBrick.bricks[parseInt(el)];
                        });
                        currentBrick.active(true);
                    };
                    this._disposables.push(ko.computed(function () {
                        if (!_this.active()) {
                            _this.resetBrickRecusive(_this.brick());
                            _this._selectedBrickPath = null;
                        }
                    }));
                }
                PreviewPage.prototype._initializeEditingFields = function (editingFieldBricks, previewEditngFields, originalWidth, originalHeight) {
                    var _this = this;
                    if (this.editingFields) {
                        this.editingFields.dispose();
                    }
                    this.editingFields = ko.pureComputed(function () {
                        if (!previewEditngFields || editingFieldBricks.length === 0) {
                            return [];
                        }
                        var allEditingFields = previewEditngFields();
                        var pageFieldViewModels = [];
                        for (var i = 0; i < editingFieldBricks.length; i++) {
                            var brick = editingFieldBricks[i];
                            var editingField = allEditingFields[brick.efIndex - 1];
                            if (!editingField)
                                return [];
                            pageFieldViewModels.push(editingField.createViewModel(_this.realZoom, originalWidth, originalHeight, function () { return allEditingFields; }, brick.absoluteBounds));
                            brick.text = function () { return brickText(brick, function () { return allEditingFields; }); };
                        }
                        return pageFieldViewModels;
                    });
                };
                PreviewPage.prototype.updateSize = function (zoom) {
                    var newResolution = getCurrentResolution(zoom);
                    this.realZoom(newResolution / Preview.previewDefaultResolution);
                    return newResolution;
                };
                PreviewPage.prototype.clearBricks = function () {
                    this.brick(null);
                    this.brickLoading(true);
                };
                PreviewPage.prototype._setPageImgSrc = function (documentId, zoom) {
                    this.pageLoadFailed(false);
                    if (!documentId || this.pageIndex === -1) {
                        this.imageSrc(null);
                        return;
                    }
                    if (this.maxZoom && this.maxZoom < zoom) {
                        zoom = this.maxZoom;
                    }
                    if (this._lastZoom < zoom) {
                        this._lastZoom = zoom;
                    }
                    else {
                        if (this.actualResolution && this.disableResolutionReduction && this.imageSrc())
                            return;
                    }
                    var newResolution = this.updateSize(zoom);
                    if ((this.actualResolution === newResolution || newResolution < 9) && this.imageSrc()) {
                        return;
                    }
                    this.actualResolution = newResolution;
                    var imageResolution = Math.floor(newResolution * (window["devicePixelRatio"] || 1));
                    this.imageSrc(Preview.HandlerUri +
                        "?actionKey=getPage&unifier=" + Preview.generateGuid() +
                        "&arg=" + encodeURIComponent(JSON.stringify({ pageIndex: this.pageIndex, documentId: documentId, resolution: imageResolution })));
                };
                PreviewPage.prototype.initializeBrick = function (brick, processClick, zoom, editingFieldBricks) {
                    initializeBrick(brick, processClick, this.zoom, editingFieldBricks);
                    brick['leftP'] = convetToPercent(brick.left, this.originalWidth());
                    brick.topP = convetToPercent(brick.top, this.originalHeight());
                    brick.widthP = convetToPercent(brick.width, this.originalWidth());
                    brick.heightP = convetToPercent(brick.height, this.originalHeight());
                    this.brick(brick);
                };
                return PreviewPage;
            })(DevExpress.Designer.Disposable);
            Preview.PreviewPage = PreviewPage;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            Preview.formatSearchResult = function (value) { return value && ('page ' + (value.pageIndex + 1)); };
            Preview.searchAvailable = ko.observable(true);
            var SearchViewModel = (function (_super) {
                __extends(SearchViewModel, _super);
                function SearchViewModel(reportPreview) {
                    var _this = this;
                    _super.call(this);
                    this.actions = [];
                    this.focusRequested = ko.observable(true);
                    this.matchWholeWord = ko.observable(false);
                    this.matchCase = ko.observable(false);
                    this.searchUp = ko.observable(false);
                    this.searchText = ko.observable();
                    this.searchResult = ko.observable();
                    this.loading = ko.observable(false);
                    this.resetSearchResult();
                    this._resultNavigator = SearchViewModel.createResultNavigator(this, reportPreview);
                    this.clean = function () { _this.searchText(""); };
                    var lastMatchCase = this.matchCase();
                    var lastMatchWholeWord = this.matchWholeWord();
                    this._disposables.push(reportPreview._currentDocumentId.subscribe(function (newVal) {
                        _this.resetSearchResult();
                    }));
                    this._disposables.push(reportPreview._currentReportId.subscribe(function (newVal) {
                        _this.resetSearchResult();
                    }));
                    this.findUp = function () { _this.searchUp(true); _this.findNext(); };
                    this.findDown = function () { _this.searchUp(false); _this.findNext(); };
                    this.goToResult = function (result) { _this._resultNavigator.goToResult(result.id); };
                    var newSearch = function (text) {
                        _this.searchResult([]);
                        _this._resultNavigator.currentResult(null);
                        lastMatchCase = _this.matchCase();
                        lastMatchWholeWord = _this.matchWholeWord();
                        if (!text) {
                            reportPreview.pages() && reportPreview.pages()[reportPreview.pageIndex()] && reportPreview.pages()[reportPreview.pageIndex()].selectBrick("");
                            return;
                        }
                        var mCase = _this.matchCase();
                        var text = mCase ? _this.searchText() : _this.searchText().toLocaleLowerCase();
                        var cache = _this.matchWholeWord()
                            ? mCase ? _this._cachedWholeWordWithCaseRequests : _this._cachedWholeWordRequests
                            : mCase ? _this._cachedCaseSensitiveRequests : _this._cachedRequests;
                        if (cache[text]) {
                            _this.searchResult(cache[text]);
                            return;
                        }
                        _this.loading(true);
                        var self = _this;
                        reportPreview.requestWrapper.findTextRequest(text).done(function (result) {
                            self.findTextRequestDone(result, cache[text]);
                        }).fail(function (error) {
                            self.loading(false);
                            reportPreview._processError(DevExpress.Designer.getLocalization("An error occurred during search"), error);
                        });
                    };
                    this.findNext = function () {
                        if (_this.loading()) {
                            return;
                        }
                        (lastMatchCase === _this.matchCase() || _this.searchText().toUpperCase() === _this.searchText().toLowerCase()) && lastMatchWholeWord === _this.matchWholeWord() && _this._resultNavigator.next(_this.searchUp()) || newSearch(_this.searchText());
                    };
                    this._disposables.push(this.searchText.subscribe(function (newVal) { newSearch(newVal); }));
                    var disabled = ko.pureComputed(function () {
                        var documentId = reportPreview["_currentDocumentId"]();
                        var pageIndex = reportPreview.pageIndex();
                        return reportPreview.documentBuilding() || !documentId || pageIndex === -1;
                    });
                    this.actions.push({
                        id: Preview.ActionId.Search,
                        text: "Search",
                        imageClassName: "dxrd-image-search",
                        disabled: disabled,
                        visible: ko.pureComputed(function () { return Preview.searchAvailable(); }),
                        hasSeparator: true,
                        hotKey: { ctrlKey: false, keyCode: 70 },
                        clickAction: function () {
                            if (!_this.tabInfo.active()) {
                                _this.tabInfo.active(true);
                            }
                            else {
                                _this.tabInfo.active.notifySubscribers(true);
                            }
                        }
                    });
                    this.tabInfo = new DevExpress.Designer.TabInfo(DevExpress.Designer.getLocalization("Search"), "dxrd-preview-search", this, "search", ko.pureComputed(function () { return !disabled() && Preview.searchAvailable(); }));
                    this._disposables.push(this.tabInfo.active.subscribe(function (newVal) {
                        newVal && setTimeout(function () { return _this.focusRequested.notifySubscribers(); }, 100);
                    }));
                }
                SearchViewModel.prototype.resetSearchResult = function () {
                    this._cachedRequests = {};
                    this._cachedWholeWordRequests = {};
                    this._cachedCaseSensitiveRequests = {};
                    this._cachedWholeWordWithCaseRequests = {};
                    this.searchResult([]);
                    this.searchText("");
                };
                SearchViewModel.prototype.findTextRequestDone = function (result, cache) {
                    this.loading(false);
                    if (!result) {
                        this.searchResult([]);
                        return;
                    }
                    cache = (result.success ? result.matches : []) || [];
                    this.searchResult(cache);
                };
                SearchViewModel.prototype.getActions = function (context) {
                    return this.actions;
                };
                Object.defineProperty(SearchViewModel.prototype, "disabled", {
                    get: function () { return this.loading(); },
                    enumerable: true,
                    configurable: true
                });
                SearchViewModel.createResultNavigator = function (seacrhModel, reportPreview) {
                    return new SearchResultNavigator(seacrhModel, reportPreview);
                };
                return SearchViewModel;
            })(DevExpress.Designer.Disposable);
            Preview.SearchViewModel = SearchViewModel;
            var SearchResultNavigator = (function (_super) {
                __extends(SearchResultNavigator, _super);
                function SearchResultNavigator(searchModel, reportPreview) {
                    var _this = this;
                    _super.call(this);
                    this.currentResult = ko.observable(null);
                    var goToMatchedResult = function (foundResult) {
                        if (!foundResult) {
                            return;
                        }
                        reportPreview.goToPage && reportPreview.goToPage(foundResult.pageIndex);
                        var page = reportPreview.pages.peek()[foundResult.pageIndex];
                        page && page.selectBrick(foundResult.indexes);
                    };
                    this.getFirstMatchFromPage = function (pageIndex, up, thisPageOnly) {
                        if (!searchModel.searchResult() || searchModel.searchResult().length === 0) {
                            return null;
                        }
                        var firstMatch;
                        var sortOutResult = function (index) {
                            searchModel.searchResult().forEach(function (m) {
                                if (thisPageOnly && m.pageIndex === index) {
                                    if (!firstMatch || (m.id < firstMatch.id && !up || m.id > firstMatch.id && up)) {
                                        firstMatch = m;
                                    }
                                }
                                else {
                                    if (m.pageIndex >= index && !up && (!firstMatch || m.id < firstMatch.id) || m.pageIndex <= index && up && (!firstMatch || m.id > firstMatch.id)) {
                                        firstMatch = m;
                                    }
                                }
                            });
                        };
                        sortOutResult(pageIndex);
                        !firstMatch && sortOutResult(up ? reportPreview.pages().length : 0);
                        return firstMatch;
                    };
                    var _setCurrentResult = function (highlight, resultId, thisPageOnly) {
                        if (searchModel.searchResult() && searchModel.searchResult().length !== 0) {
                            var currentResult = (resultId >= 0 && searchModel.searchResult().length > resultId) ?
                                searchModel.searchResult()[resultId] :
                                _this.getFirstMatchFromPage(reportPreview.pageIndex.peek(), searchModel.searchUp.peek(), thisPageOnly);
                            _this.currentResult(currentResult);
                            highlight && goToMatchedResult(_this.currentResult.peek());
                        }
                        else {
                            reportPreview.pages() && reportPreview.pages()[reportPreview.pageIndex()] && reportPreview.pages()[reportPreview.pageIndex()].selectBrick("");
                        }
                    };
                    this.goToResult = function (id) {
                        if (id !== 0 && !id) {
                            return null;
                        }
                        _setCurrentResult(true, id);
                    };
                    this._disposables.push(reportPreview.pageIndex.subscribe(function (newPageIndex) {
                        _this.currentResult(null);
                    }));
                    this._disposables.push(searchModel.searchResult.subscribe(function () {
                        _setCurrentResult(true);
                    }));
                    this.next = function (up) {
                        if (!searchModel.searchResult()) {
                            return false;
                        }
                        !_this.currentResult() && _this.currentResult(_this.getFirstMatchFromPage(reportPreview.pageIndex(), up));
                        if (!_this.currentResult()) {
                            return false;
                        }
                        var id, currentId = _this.currentResult().id;
                        if (up) {
                            id = (currentId === 0) ? searchModel.searchResult().length - 1 : (currentId - 1);
                        }
                        else {
                            id = (currentId === searchModel.searchResult().length - 1) ? 0 : (currentId + 1);
                        }
                        _this.currentResult(searchModel.searchResult()[id]);
                        goToMatchedResult(_this.currentResult());
                        return true;
                    };
                }
                return SearchResultNavigator;
            })(DevExpress.Designer.Disposable);
            Preview.SearchResultNavigator = SearchResultNavigator;
            var editor_prefix = "dx-searcheditor", EDITOR_CLASS = editor_prefix + "", EDITOR_BUTTON_CLASS = editor_prefix + "-button dx-widget dx-dropdowneditor-button", EDITOR_BUTTON_SELECTOR = "." + editor_prefix + "-button", EDITOR_BUTTON_ICON = editor_prefix + "-icon dx-dropdowneditor-icon dx-icon-dxrd-image-move";
            var dxSearchEditor = (function (_super) {
                __extends(dxSearchEditor, _super);
                function dxSearchEditor(element, options) {
                    var _this = this;
                    options["onEnterKey"] = function (e) {
                        if (DevExpress.browser && DevExpress.browser.msie && e && e.component) {
                            e.component.blur();
                            e.component.focus();
                        }
                        _this.findNext(e && e.jQueryEvent && e.jQueryEvent.shiftKey);
                    };
                    options["onFocusOut"] = function (e) {
                        _this._searchModel.searchText(_this.option("text"));
                    };
                    _super.call(this, element, options);
                    this._activeStateUnit = EDITOR_BUTTON_SELECTOR;
                    this._focusRequestRaised = function () { _this.focus(); };
                    this._searchModel = options.searchModel;
                    this._searchModel.focusRequested.subscribe(function (val) { return _this._focusRequestRaised(); });
                }
                dxSearchEditor.prototype.findNext = function (searchUp) {
                    if (this._searchModel.searchText() !== this.option("text")) {
                        this._searchModel.searchText(this.option("text"));
                    }
                    else {
                        try {
                            if (searchUp) {
                                (!this._searchModel.loading()) && this._searchModel.findUp();
                            }
                            else {
                                (!this._searchModel.loading()) && this._searchModel.findDown();
                            }
                        }
                        finally {
                            return true;
                        }
                    }
                };
                dxSearchEditor.prototype._init = function () {
                    _super.prototype._init.call(this);
                    this.element().addClass(EDITOR_CLASS);
                };
                dxSearchEditor.prototype._render = function () {
                    _super.prototype._render.call(this);
                    this._renderButton("Down");
                    this._renderButton("Up");
                };
                dxSearchEditor.prototype._renderButton = function (direction) {
                    this._button = $("<div />").addClass(EDITOR_BUTTON_CLASS);
                    this._attachButtonEvents(direction);
                    this._buttonIcon = $("<div />").addClass(EDITOR_BUTTON_ICON + direction.toLowerCase()).appendTo(this._button);
                    var buttonsContainer = _super.prototype._buttonsContainer.call(this);
                    this._button.appendTo(buttonsContainer);
                };
                dxSearchEditor.prototype._attachButtonEvents = function (direction) {
                    var _this = this;
                    this._button.off("click");
                    if (!this.option("disabled")) {
                        this._button.on("click", function (e) {
                            _this.findNext(direction.toLowerCase() === "up") && e.stopPropagation();
                        });
                    }
                };
                return dxSearchEditor;
            })(DevExpress.ui.dxTextBox);
            Preview.dxSearchEditor = dxSearchEditor;
            DevExpress.registerComponent("dxSearchEditor", dxSearchEditor);
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var DocumentMapModel = (function () {
                function DocumentMapModel(reportPreview) {
                    var _this = this;
                    var treeListController = new DocumentMapTreeListController();
                    this.isEmpty = ko.pureComputed(function () {
                        return !(reportPreview.documentMap() && reportPreview.documentMap().nodes && (reportPreview.documentMap().nodes.length !== 0));
                    });
                    treeListController.clickHandler = function (item) {
                        var bookmark = item.data.bookmark;
                        if (bookmark) {
                            var pageIndex = bookmark.pageIndex < 0 ? 0 : bookmark.pageIndex;
                            reportPreview.pages.peek()[pageIndex].selectBrick(bookmark.indexes);
                        }
                    };
                    this.documentMapOptions = ko.pureComputed(function () {
                        var rootNodeSubscribtion = treeListController.selectedItem.subscribe(function (item) {
                            item.path === "0" && item.collapsed() && item.toggleCollapsed();
                            rootNodeSubscribtion.dispose();
                        });
                        return {
                            itemsProvider: new DocumentMapItemsProvider(reportPreview.documentMap()),
                            selectedPath: ko.observable("0"),
                            treeListController: treeListController
                        };
                    });
                    this.tabInfo = new DevExpress.Designer.TabInfo(DevExpress.Designer.getLocalization("Document Map"), "dxrd-preview-document-map", this, "reportexplorer", ko.pureComputed(function () { return !_this.isEmpty(); }));
                }
                return DocumentMapModel;
            })();
            Preview.DocumentMapModel = DocumentMapModel;
            var DocumentMapItemsProvider = (function () {
                function DocumentMapItemsProvider(bookmark) {
                    var _this = this;
                    this.bookmarkDict = {};
                    this.getItems = function (pathRequest) {
                        var result = $.Deferred();
                        if (bookmark) {
                            if (pathRequest.fullPath) {
                                var nodes = _this._selectNode(bookmark, pathRequest.fullPath);
                                result.resolve(nodes);
                            }
                            else {
                                var root = _this._getRootNode(bookmark);
                                result.resolve(root);
                            }
                        }
                        return result.promise();
                    };
                }
                DocumentMapItemsProvider.prototype._selectNode = function (root, path) {
                    if (!!this.bookmarkDict[path]) {
                        return this.bookmarkDict[path];
                    }
                    var pathComponents = path.split("."), currentNode = root;
                    if (pathComponents[0] !== "0") {
                        return null;
                    }
                    for (var i = 1, index = pathComponents[i]; i < pathComponents.length; i++, index = pathComponents[i]) {
                        if (currentNode && currentNode.nodes && currentNode.nodes[index]) {
                            currentNode = currentNode.nodes[index];
                        }
                        else {
                            return null;
                        }
                    }
                    var result = DocumentMapItemsProvider.fillNode(currentNode);
                    if (result && result.length !== 0) {
                        this.bookmarkDict[path] = result;
                    }
                    return result;
                };
                DocumentMapItemsProvider.fillNode = function (bookmark) {
                    if (!bookmark || !bookmark.nodes || bookmark.nodes.length <= 0) {
                        return null;
                    }
                    return bookmark.nodes.map(function (node, i) { return { name: i + "", displayName: node.text, isList: node.nodes && node.nodes.length > 0, bookmark: node, specifics: "node" }; });
                };
                DocumentMapItemsProvider.prototype._getRootNode = function (bookmark) {
                    return [{ name: "0", displayName: bookmark.text, isList: bookmark.nodes && bookmark.nodes.length > 0, bookmark: bookmark, specifics: "node" }];
                };
                return DocumentMapItemsProvider;
            })();
            Preview.DocumentMapItemsProvider = DocumentMapItemsProvider;
            var DocumentMapTreeListController = (function () {
                function DocumentMapTreeListController() {
                    this.selectedItem = ko.observable(null);
                    this.clickHandler = function (item) { return void 0; };
                }
                DocumentMapTreeListController.prototype.itemsFilter = function (item) {
                    return true;
                };
                DocumentMapTreeListController.prototype.hasItems = function (item) {
                    return item.isList === true;
                };
                DocumentMapTreeListController.prototype.canSelect = function (value) {
                    return true;
                };
                DocumentMapTreeListController.prototype.select = function (value) {
                    if (this.canSelect(value) && value !== this.selectedItem.peek()) {
                        this.selectedItem.peek() && this.selectedItem.peek().isSelected(false);
                        this.selectedItem(value);
                        value.isSelected(true);
                    }
                };
                return DocumentMapTreeListController;
            })();
            Preview.DocumentMapTreeListController = DocumentMapTreeListController;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var ParameterHelper = (function () {
                function ParameterHelper() {
                    this._customizeParameterEditors = ko.observable();
                }
                ParameterHelper.prototype._isKnownEnumType = function (type) {
                    return !!this._knownEnums && this._knownEnums.some(function (knownEnumType) { return knownEnumType.enumType === type; });
                };
                ParameterHelper.getSerializationValue = function (value, dateConverter) {
                    if (value instanceof Array) {
                        return value.map(function (item) {
                            var itemValue = ko.isObservable(item.value) ? item.value() : item;
                            return (itemValue instanceof Date) ? dateConverter(itemValue) : itemValue;
                        });
                    }
                    return (value instanceof Date) ? dateConverter(value) : value;
                };
                ParameterHelper.prototype.initialize = function (knownEnums, callbacks) {
                    if (arguments.length > 0) {
                        this._knownEnums = knownEnums;
                        if (callbacks) {
                            callbacks.customizeParameterEditors && this._customizeParameterEditors(callbacks.customizeParameterEditors);
                            callbacks.customizeParameterLookUpSource && (this.customizeParameterLookUpSource = callbacks.customizeParameterLookUpSource);
                        }
                    }
                };
                ParameterHelper.prototype.createInfo = function (parameter) {
                    var parameterDescriptor = parameter.getParameterDescriptor();
                    var typeString = this.isEnumType(parameter) ? "Enum" : ko.unwrap(parameterDescriptor.type);
                    var info = {
                        propertyName: "value",
                        displayName: parameterDescriptor["displayName"],
                        editor: DevExpress.Designer.getEditorType(typeString)
                    };
                    this.assignValueStore(info, parameter);
                    return info;
                };
                ParameterHelper.prototype.assignValueStore = function (info, parameter) {
                    var items = this.getEnumCollection(parameter);
                    info['valueStore'] = this.getItemsSource(parameter.getParameterDescriptor(), items, true);
                };
                ParameterHelper.prototype.createMultiValue = function (parameter, value) {
                    var newValue = ko.observable();
                    if (value !== null && value !== void 0) {
                        newValue(value);
                    }
                    return { value: newValue, getInfo: function () { return [parameter.multiValueInfo()]; } };
                };
                ParameterHelper.prototype.createMultiValueArray = function (fromArray, parameter, convertSingleValue) {
                    var _this = this;
                    var converter = convertSingleValue ? convertSingleValue : this.getValueConverter(ko.unwrap(parameter.type));
                    return ko.observableArray(fromArray.map(function (item) {
                        return _this.createMultiValue(parameter, converter(item));
                    }));
                };
                ParameterHelper.prototype.isEnumType = function (parameter) {
                    return this._isKnownEnumType(ko.unwrap(parameter.type));
                };
                ParameterHelper.prototype.getItemsSource = function (parameterDescriptor, items, sort) {
                    if (items) {
                        var newItems;
                        if (this.customizeParameterLookUpSource)
                            newItems = this.customizeParameterLookUpSource(parameterDescriptor, items.slice(0));
                        return newItems ? newItems : new DevExpress.data.DataSource({
                            store: sort ? new DevExpress.Designer.SortedArrayStore(items, "displayValue") : new DevExpress.data.ArrayStore(items),
                            paginate: true,
                            pageSize: 100
                        });
                    }
                    return items;
                };
                ParameterHelper.prototype.getEnumCollection = function (parameter) {
                    var type = ko.unwrap(parameter.type);
                    if (this._isKnownEnumType(type)) {
                        var currentKnownEnumInfo = this._knownEnums.filter(function (knownEnumType) { return knownEnumType.enumType === type; })[0];
                        if (currentKnownEnumInfo && currentKnownEnumInfo.values && currentKnownEnumInfo.values.length !== 0) {
                            return currentKnownEnumInfo.values.map(function (val) { return { value: val.value, displayValue: val.displayName }; });
                        }
                    }
                };
                ParameterHelper.prototype.getParameterInfo = function (parameter) {
                    var _this = this;
                    var valueInfo = this.createInfo(parameter);
                    parameter.multiValueInfo($.extend(true, {}, valueInfo, { propertyName: "value" }));
                    if (ko.unwrap(parameter.isMultiValue)) {
                        valueInfo.editor = DevExpress.Designer.getEditorType(parameter["isMultiValueWithLookUp"] ? "multiValueWithLookUp" : "multiValue");
                        valueInfo["addHandler"] = function () { return _this.createMultiValue(parameter); };
                    }
                    if (this._customizeParameterEditors()) {
                        this._customizeParameterEditors()(parameter.getParameterDescriptor(), valueInfo);
                    }
                    return valueInfo;
                };
                ParameterHelper.prototype.getValueConverter = function (type) {
                    return (function (val) { return val; });
                };
                return ParameterHelper;
            })();
            Preview.ParameterHelper = ParameterHelper;
            var PreviewParameterHelper = (function (_super) {
                __extends(PreviewParameterHelper, _super);
                function PreviewParameterHelper(knownEnums, callbacks) {
                    _super.call(this);
                    this.initialize(knownEnums, callbacks);
                }
                PreviewParameterHelper.prototype.mapLookUpValues = function (type, lookUpValues) {
                    var converter = this.getValueConverter(type);
                    return $.map(lookUpValues || [], function (lookUpValue) { return { value: converter(lookUpValue.Value), displayValue: lookUpValue.Description }; });
                };
                PreviewParameterHelper.fixPropertyName = function (propertyName) {
                    return propertyName.replace(/\./g, '_');
                };
                PreviewParameterHelper.prototype.createInfo = function (parameter) {
                    var info = _super.prototype.createInfo.call(this, parameter);
                    info.propertyName = PreviewParameterHelper.fixPropertyName(parameter.path);
                    if (!parameter.isMultiValue && (parameter.lookUpValues() || this.isEnumType(parameter)))
                        info.editorOptions = { searchEnabled: false };
                    if (parameter.type === "System.DateTime") {
                        info.validationRules = [{ type: 'required', message: DevExpress.Designer.getLocalization('The value cannot be empty') }];
                    }
                    return info;
                };
                PreviewParameterHelper.prototype.assignValueStore = function (info, parameter) {
                    var _helper = this;
                    if (!parameter.isMultiValueWithLookUp) {
                        Object.defineProperty(info, 'valueStore', {
                            get: function () {
                                var items = [];
                                var needSorting = false;
                                if (parameter.isFilteredLookUpSettings || parameter.lookUpValues() && parameter.lookUpValues().length !== 0) {
                                    items = parameter.lookUpValues();
                                }
                                else {
                                    items = _helper.getEnumCollection(parameter);
                                    needSorting = true;
                                }
                                if (parameter.valueStoreCache)
                                    return parameter.valueStoreCache;
                                var itemsSource = _helper.getItemsSource(parameter.getParameterDescriptor(), items, needSorting);
                                if (itemsSource)
                                    parameter.valueStoreCache = itemsSource;
                                return itemsSource;
                            },
                            set: function (values) {
                                parameter.lookUpValues(values);
                            }
                        });
                    }
                };
                PreviewParameterHelper.prototype.isEnumType = function (parameter) {
                    return parameter.isFilteredLookUpSettings || !!parameter.lookUpValues() || _super.prototype.isEnumType.call(this, parameter);
                };
                PreviewParameterHelper.prototype.getValueConverter = function (type) {
                    if (type === "System.DateTime") {
                        return function (dateString) { return DevExpress.JS.Localization.parseDate(dateString); };
                    }
                    return _super.prototype.getValueConverter.call(this, type);
                };
                return PreviewParameterHelper;
            })(ParameterHelper);
            Preview.PreviewParameterHelper = PreviewParameterHelper;
            var PreviewParameter = (function (_super) {
                __extends(PreviewParameter, _super);
                function PreviewParameter(parameterInfo, parameterHelper) {
                    var _this = this;
                    _super.call(this);
                    this.valueInfo = ko.observable();
                    this.lookUpValues = ko.observableArray();
                    this.valueStoreCache = null;
                    this.multiValueInfo = ko.observable();
                    this.type = parameterInfo.TypeString;
                    this.path = parameterInfo.Path;
                    this.visible = parameterInfo.Visible;
                    this.isFilteredLookUpSettings = parameterInfo.IsFilteredLookUpSettings;
                    this._originalLookUpValues = parameterInfo.LookUpValues ? parameterHelper.mapLookUpValues(this.type, parameterInfo.LookUpValues || []) : null;
                    this.lookUpValues(this._originalLookUpValues);
                    this.lookUpValues.subscribe(function () { _this.valueStoreCache = null; });
                    this.isMultiValue = parameterInfo.MultiValue;
                    this.isMultiValueWithLookUp = this.isMultiValue && !!this.lookUpValues();
                    this.getParameterDescriptor = function () {
                        return {
                            description: parameterInfo.Description,
                            displayName: parameterInfo.Description || parameterInfo.Name,
                            name: parameterInfo.Name,
                            type: parameterInfo.TypeString,
                            value: parameterInfo.Value,
                            multiValue: parameterInfo.MultiValue,
                            visible: parameterInfo.Visible
                        };
                    };
                    this._disposables.push(ko.computed(function () {
                        var info = parameterHelper.getParameterInfo(_this);
                        info.propertyName = PreviewParameterHelper.fixPropertyName(parameterInfo.Path);
                        _this.valueInfo(info);
                    }));
                    this._originalValue = parameterInfo.Value;
                    this.initialize(this._originalValue, parameterHelper);
                }
                PreviewParameter.prototype.safeAssignObservable = function (name, value) {
                    if (this[name]) {
                        this[name](value());
                    }
                    else {
                        this[name] = value;
                    }
                };
                PreviewParameter.prototype.initialize = function (value, parameterHelper) {
                    var _this = this;
                    if (this.isMultiValueWithLookUp) {
                        this.safeAssignObservable("_value", ko.observableArray((value || []).map(function (arrayItem) {
                            return parameterHelper.getValueConverter(_this.type)(arrayItem);
                        })));
                        var multiValuesHelper = new DevExpress.Designer.Widgets.MultiValuesHelper(this._value, this.lookUpValues());
                        var newItems;
                        if (parameterHelper.customizeParameterLookUpSource)
                            newItems = parameterHelper.customizeParameterLookUpSource(this.getParameterDescriptor(), multiValuesHelper.displayItems);
                        if (newItems) {
                            multiValuesHelper.dataSource = newItems;
                        }
                        else {
                            multiValuesHelper.dataSource = new DevExpress.data.DataSource({ store: multiValuesHelper.displayItems, pageSize: 100, paginate: true });
                        }
                        this.safeAssignObservable("value", ko.observable(multiValuesHelper));
                    }
                    else if (this.isMultiValue) {
                        this.safeAssignObservable("value", parameterHelper.createMultiValueArray(value, this));
                    }
                    else {
                        this.safeAssignObservable("value", ko.observable(parameterHelper.getValueConverter(this.type)(value)));
                    }
                };
                return PreviewParameter;
            })(DevExpress.Designer.Disposable);
            Preview.PreviewParameter = PreviewParameter;
            var PreviewParametersViewModel = (function (_super) {
                __extends(PreviewParametersViewModel, _super);
                function PreviewParametersViewModel(reportPreview, parameterHelper) {
                    var _this = this;
                    _super.call(this);
                    this._parameters = [];
                    this._getLookUpValueRequest = function (argsObject) {
                        return DevExpress.Designer.ajax(Preview.HandlerUri, 'getLookUpValues', encodeURIComponent(JSON.stringify(argsObject)));
                    };
                    this._getDoneGetLookUpValueHandler = function () {
                        var parametersViewModel = _this;
                        return function (response) {
                            try {
                                if (!response || !response.parameters) {
                                    return;
                                }
                                response.parameters.forEach(function (lookUpCollection) {
                                    var matchedParameter = parametersViewModel._parameters.filter(function (p) { return p.path === lookUpCollection.Key; })[0];
                                    if (!parametersViewModel._shouldProcessParameter(matchedParameter))
                                        return;
                                    parametersViewModel._setLookUpValues(matchedParameter, lookUpCollection.Value, matchedParameter.visible);
                                });
                            }
                            finally {
                                parametersViewModel.parametersLoading(false);
                            }
                        };
                    };
                    this._getFailGetLookUpValueHandler = function () {
                        var parametersViewModel = _this;
                        return function (jqXHRError) {
                            parametersViewModel.parametersLoading(false);
                            parametersViewModel._reportPreview._processError(DevExpress.Designer.getLocalization("Cannot supply filtered lookup values to a report parameter editor"), jqXHRError);
                        };
                    };
                    this.getInfo = ko.observable(null);
                    this.needToRefreshLookUps = ko.observable(false);
                    this.isEmpty = ko.observable(true);
                    this.processInvisibleParameters = false;
                    this.parametersLoading = ko.observable(false);
                    this._reportPreview = reportPreview;
                    this.parameterHelper = parameterHelper || new PreviewParameterHelper();
                    var _self = this;
                    this.submit = function () {
                        if (_self.parametersLoading()) {
                            return;
                        }
                        _self.parametersLoading(true);
                        var promise = reportPreview.startBuild();
                        promise && promise.done(function (val) { _self.parametersLoading(false); });
                    };
                    this._disposables.push(reportPreview.originalParametersInfo.subscribe(function (originalParametersInfo) {
                        _this.initialize(originalParametersInfo);
                    }));
                    this.initialize(reportPreview.originalParametersInfo());
                    var notEmpty = ko.pureComputed(function () { return !_this.isEmpty(); });
                    this.tabInfo = new DevExpress.Designer.TabInfo(DevExpress.Designer.getLocalization("Parameters"), "dxrd-preview-parameters", this, "parameters", notEmpty);
                    var popupVisibleSwitch = ko.observable(false);
                    var popupVisible = ko.pureComputed({
                        read: function () {
                            return notEmpty() && popupVisibleSwitch();
                        },
                        write: function (newVal) {
                            return popupVisibleSwitch(newVal);
                        }
                    });
                    this.popupInfo = { visible: popupVisible, notEmpty: notEmpty };
                }
                Object.defineProperty(PreviewParametersViewModel.prototype, "_visibleParameters", {
                    get: function () {
                        return this._parameters.filter(function (p) { return p.visible; });
                    },
                    enumerable: true,
                    configurable: true
                });
                PreviewParametersViewModel.prototype._shouldProcessParameter = function (param) {
                    return this.processInvisibleParameters || (param && param.visible);
                };
                PreviewParametersViewModel.prototype._convertLocalDateToUTC = function (localDate) {
                    return new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), localDate.getHours(), localDate.getMinutes(), localDate.getSeconds()));
                };
                PreviewParametersViewModel.prototype._add = function (parameterInfo) {
                    var _this = this;
                    var parameter = new PreviewParameter(parameterInfo, this.parameterHelper);
                    this._parameters.push(parameter);
                    var needToRefreshLookUps = this.needToRefreshLookUps() || (this._shouldProcessParameter(parameter)) && parameter.isFilteredLookUpSettings;
                    this.needToRefreshLookUps(needToRefreshLookUps);
                    if (this._shouldProcessParameter(parameter)) {
                        this._disposables.push((parameter.isMultiValueWithLookUp ? parameter._value : parameter.value).subscribe(function (newValue) {
                            if (!_this.parametersLoading() && _this.needToRefreshLookUps()) {
                                _this.getLookUpValues(parameter.path);
                            }
                        }));
                    }
                    if (!parameterInfo.Visible) {
                        return;
                    }
                    this.isEmpty(false);
                    var parameterPropertyName = PreviewParameterHelper.fixPropertyName(parameter.path);
                    this[parameterPropertyName] = parameter.value;
                };
                PreviewParametersViewModel.prototype._setLookUpValues = function (parameter, lookUpValues, assignFirstLookUpValue) {
                    parameter.lookUpValues(this.parameterHelper.mapLookUpValues(parameter.type, lookUpValues));
                    var _parameterValuesContainedInLookUps = this._getParameterValuesContainedInLookups(lookUpValues, parameter);
                    if (parameter.isMultiValue) {
                        parameter.initialize(_parameterValuesContainedInLookUps.length > 0 ? _parameterValuesContainedInLookUps : [], this.parameterHelper);
                    }
                    else {
                        parameter.initialize(_parameterValuesContainedInLookUps[0] && _parameterValuesContainedInLookUps[0].Value || (assignFirstLookUpValue && lookUpValues.length > 0 ? lookUpValues[0].Value : null), this.parameterHelper);
                    }
                };
                PreviewParametersViewModel.prototype._getParameterValuesContainedInLookups = function (parameterLookUpValues, parameter) {
                    var _this = this;
                    if (parameterLookUpValues) {
                        if (parameter.isMultiValue) {
                            var selectedItems = (parameter.value() && parameter.value().selectedItems() || []).map(function (item) { return item.value; });
                            return selectedItems.filter(function (item) { return _this._filterParameterValuesContainsInLookups(parameterLookUpValues, parameter.type, item).length > 0; });
                        }
                        else {
                            return this._filterParameterValuesContainsInLookups(parameterLookUpValues, parameter.type, parameter.value());
                        }
                    }
                    return [];
                };
                PreviewParametersViewModel.prototype._filterParameterValuesContainsInLookups = function (parameterLookUpValues, parameterType, value) {
                    var _this = this;
                    return parameterLookUpValues.filter(function (x) {
                        return _this._compareValues(_this.parameterHelper.getValueConverter(parameterType)(x.Value), value);
                    });
                };
                PreviewParametersViewModel.prototype._compareValues = function (value1, value2) {
                    if (value1 instanceof Date && value2 instanceof Date) {
                        return value1 - value2 === 0;
                    }
                    return value1 === value2;
                };
                PreviewParametersViewModel.prototype.initialize = function (originalParametersInfo) {
                    var _this = this;
                    this._parameters.forEach(function (usedParameter) {
                        delete _this[PreviewParameterHelper.fixPropertyName(usedParameter.path)];
                    });
                    this._parameters = [];
                    if (!originalParametersInfo) {
                        this.isEmpty(true);
                        this.getInfo([]);
                        return;
                    }
                    this.parameterHelper.initialize(originalParametersInfo.knownEnums);
                    (originalParametersInfo.parameters || []).forEach(function (parameter) {
                        _this._add(parameter);
                    });
                    if (this._visibleParameters.length === 0) {
                        this.isEmpty(true);
                    }
                    var info = this._visibleParameters.map(function (parameter) {
                        return parameter.valueInfo();
                    });
                    this.getInfo(info);
                    if (this._reportPreview.documentId)
                        return;
                    if (!originalParametersInfo.shouldRequestParameters || this.isEmpty()) {
                        this.submit();
                    }
                    else {
                        this._reportPreview.removeEmptyPages();
                        this.tabInfo.active(true);
                        this.popupInfo.visible(true);
                        this._reportPreview.pageLoading(false);
                    }
                };
                PreviewParametersViewModel.prototype.getPathsAfterPath = function (parameterPath) {
                    var _this = this;
                    var startIndex = 0;
                    for (var index = 0; index < this._parameters.length; index++) {
                        if (this._parameters[index].path === parameterPath) {
                            startIndex = index + 1;
                            break;
                        }
                    }
                    var paths = this._parameters
                        .filter(function (param, index) {
                        return (_this._shouldProcessParameter(param) && param.isFilteredLookUpSettings && (index >= startIndex));
                    })
                        .map(function (x) { return x.path; });
                    return paths || [];
                };
                PreviewParametersViewModel.prototype.serializeParameters = function () {
                    var params = [], self = this;
                    this._parameters.forEach(function (parameter) {
                        var convertItem = function (item) {
                            return (parameter.type === "System.DateTime" && !!item && (item instanceof Date)) ? self._convertLocalDateToUTC(item) : item;
                        };
                        var value = parameter.isMultiValueWithLookUp ? parameter._value() : parameter.value();
                        params.push({ Value: ParameterHelper.getSerializationValue(value, convertItem), Key: parameter.path, TypeString: parameter.type });
                    });
                    return params;
                };
                PreviewParametersViewModel.prototype.restore = function () {
                    var _this = this;
                    if (this.parametersLoading()) {
                        return;
                    }
                    try {
                        this.parametersLoading(true);
                        this._parameters.forEach(function (parameter) {
                            if (!_this._shouldProcessParameter(parameter))
                                return;
                            parameter.lookUpValues(parameter._originalLookUpValues);
                            parameter.initialize(parameter._originalValue, _this.parameterHelper);
                        });
                    }
                    finally {
                        this.parametersLoading(false);
                    }
                };
                PreviewParametersViewModel.prototype.isPropertyDisabled = function (name) {
                    return this.parametersLoading();
                };
                PreviewParametersViewModel.prototype.getLookUpValues = function (changedParameterPath) {
                    var requiredParameterPaths = this.getPathsAfterPath(changedParameterPath);
                    if (!requiredParameterPaths || requiredParameterPaths.length === 0) {
                        return;
                    }
                    this.parametersLoading(true);
                    var argsObject = {
                        reportId: this._reportPreview.reportId,
                        requiredParameterPaths: requiredParameterPaths,
                        parameters: this.serializeParameters(),
                        timeZoneOffset: 0 - new Date().getTimezoneOffset()
                    };
                    this._getLookUpValueRequest(argsObject)
                        .done(this._getDoneGetLookUpValueHandler())
                        .fail(this._getFailGetLookUpValueHandler());
                };
                return PreviewParametersViewModel;
            })(DevExpress.Designer.Disposable);
            Preview.PreviewParametersViewModel = PreviewParametersViewModel;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            DevExpress.JS.Utils.getLocalization = DevExpress.Designer.getLocalization;
            Preview.HandlerUri = "DXXRDV.axd";
            Preview.TimeOut = 120000;
            Preview.MessageHandler = {
                processError: function (message, showForUser) { DevExpress.Designer.NotifyAboutWarning(message, showForUser); },
                processMessage: function (message, showForUser) { DevExpress.Designer.NotifyAboutWarning(message, showForUser); },
                processWarning: function (message, showForUser) { DevExpress.Designer.NotifyAboutWarning(message, showForUser); }
            };
            Preview.generateGuid = function () {
                var getNewQuartet = function (i) {
                    return Math.floor((1 + Math.random()) * Math.pow(0x10000, i)).toString(16).substring(1);
                };
                return getNewQuartet(2) + '-' + getNewQuartet(1) + '-' + getNewQuartet(1) + '-' + getNewQuartet(1) + '-' + getNewQuartet(3);
            };
            var ReportPreview = (function (_super) {
                __extends(ReportPreview, _super);
                function ReportPreview(handlerUri, previewRequestWrapper, previewHandlersHelper, rtl) {
                    var _this = this;
                    if (rtl === void 0) { rtl = false; }
                    _super.call(this);
                    this.getPreviewPageBrickProvider = function (handlerUri, documentId) {
                        var ignoreErrorPredicate = function () {
                            return _this._closeDocumentRequests[documentId];
                        };
                        return new Preview.PreviewPageBrickProvider(handlerUri, documentId, ignoreErrorPredicate);
                    };
                    this.predefinedZoomLevels = ko.observableArray([5, 2, 1.5, 1, 0.75, 0.5, 0.25]);
                    this._pageWidth = ko.observable(818);
                    this._pageHeight = ko.observable(1058);
                    this._pageBackColor = ko.observable('');
                    this._currentReportId = ko.observable(null);
                    this._currentDocumentId = ko.observable(null);
                    this._currentOperationId = ko.observable(null);
                    this._stopBuildRequests = {};
                    this._closeDocumentRequests = {};
                    this._editingFields = ko.observable([]);
                    this._startBuildOperationId = "";
                    this._editingValuesSubscriptions = [];
                    this._drillDownState = [];
                    this.rtlReport = ko.observable(false);
                    this.currentPage = ko.observable(null);
                    this.originalParametersInfo = ko.observable(null);
                    this.pageIndex = ko.observable(-1);
                    this.showMultipagePreview = ko.observable(false);
                    this.documentMap = ko.observable();
                    this.exportOptionsModel = ko.observable();
                    this.pageLoading = ko.observable(false);
                    this.documentBuilding = ko.observable(false);
                    this.progressBar = new Preview.ProgressViewModel();
                    this.pages = ko.observableArray([]).extend({ rateLimit: { timeout: 20, method: "notifyWhenChangesStop" } });
                    this.isAutoFit = ko.observable(true);
                    this.exportDisabled = ko.pureComputed(function () {
                        var inProgress = _this.progressBar.inProgress();
                        var documentBuilding = _this.documentBuilding();
                        return _this.pageIndex() === -1 || inProgress || documentBuilding;
                    });
                    this._zoom = ko.observable(1);
                    this.zoom = ko.pureComputed({
                        read: function () {
                            if (_this.isAutoFit() || _this._zoom() === 0) {
                                return 0;
                            }
                            return _this._zoom();
                        },
                        write: function (val) {
                            if (val !== 0) {
                                _this._zoom(val);
                                _this.isAutoFit(false);
                            }
                            else {
                                _this.isAutoFit(true);
                            }
                        }
                    });
                    this.editingFieldsProvider = function () { return _this._editingFields(); };
                    this._currentPageText = ko.pureComputed(function () {
                        if (_this.pageIndex() === -1) {
                            return DevExpress.Designer.getLocalization('0 pages');
                        }
                        else {
                            var ofText = DevExpress.Designer.getLocalization('of');
                            return (_this.pageIndex() + 1) + " " + ofText + " " + _this.pages().length;
                        }
                    });
                    this._raiseOnSizeChanged = function () { _this.onSizeChanged() && _this.onSizeChanged()(); };
                    this.previewSize = ko.observable(0);
                    this.onSizeChanged = ko.observable();
                    this.previewVisible = ko.observable(false);
                    this.editingFieldsHighlighted = ko.observable(false);
                    this.canSwitchToDesigner = true;
                    this.allowURLsWithJSContent = false;
                    Preview.HandlerUri = handlerUri || Preview.HandlerUri;
                    this.previewHandlersHelper = previewHandlersHelper || new Preview.PreviewHandlersHelper(this);
                    this.requestWrapper = previewRequestWrapper || new Preview.PreviewRequestWrapper();
                    this.rtlViewer = rtl;
                    this.documentBuilding.subscribe(function (newVal) {
                        if (!newVal) {
                            for (var i = 0; i < _this.pages().length; i++) {
                                var page = _this.pages()[i];
                                if (!page.pageLoading()) {
                                    page.clearBricks();
                                }
                            }
                        }
                    });
                    this._disposables.push(this.previewSize.subscribe(function () { return _this._raiseOnSizeChanged(); }));
                    this._disposables.push(this._zoom.subscribe(function () {
                        if (_this.showMultipagePreview()) {
                            _this.pages().forEach(function (page) {
                                page.updateSize(page.zoom());
                                page.isClientVisible(false);
                            });
                            _this._raiseOnSizeChanged();
                        }
                        else {
                            var currentPage = _this.pages()[_this.pageIndex()];
                            currentPage && currentPage.isClientVisible.notifySubscribers(currentPage.isClientVisible.peek());
                        }
                    }));
                    ko.computed(function () {
                        var pagesArray = _this.pages();
                        var pageIndex = _this.pageIndex();
                        if (!pagesArray || pageIndex >= pagesArray.length)
                            return;
                        var currentPage = null;
                        if (pageIndex >= 0)
                            currentPage = pagesArray[pageIndex];
                        if (currentPage != _this.currentPage.peek())
                            _this.currentPage(currentPage);
                    });
                }
                ReportPreview.prototype._doDrillDown = function (drillDownKey) {
                    this._drillDownState.filter(function (x) { return x.Key === drillDownKey && (x.Value = !x.Value); });
                    this.closeDocument();
                    this.progressBar.complete();
                    this.documentMap(null);
                    for (var i = this.pages().length - 1; i >= 0; i--) {
                        var page = this.pages()[i];
                        if (i > this.pageIndex()) {
                            this.pages.remove(page);
                        }
                        else {
                            page.pageIndex = -1;
                            page.brick(null);
                            page._setPageImgSrc(null, 1);
                        }
                    }
                    this._startBuildRequest();
                };
                ReportPreview.prototype.removeEmptyPages = function (all) {
                    all && this.pages.removeAll();
                    for (var idx = this.pages().length - 1; idx >= 0; idx--) {
                        var tempPage = this.pages()[idx];
                        (tempPage.isEmpty || tempPage.pageIndex === -1) && this.pages.remove(tempPage);
                    }
                };
                ReportPreview.prototype._initialize = function () {
                    this._drillDownState = [];
                    this.closeDocument();
                    this._clearEditingFields();
                    this.documentMap(null);
                    this.pageIndex(-1);
                    this.pageLoading(true);
                    this.progressBar.complete();
                    this.pages([this.createPage(-1, this._pageWidth, this._pageHeight, this._zoom, this._currentDocumentId, this._pageBackColor.peek(), null, this.pageLoading)]);
                };
                ReportPreview.prototype._clearEditingFields = function () {
                    this._editingFields([]);
                    this._editingValuesSubscriptions.forEach(function (item) { return item.dispose(); });
                    this._editingValuesSubscriptions = [];
                };
                ReportPreview.prototype.createPage = function (pageIndex, width, height, zoom, documentId, color, brickProvider, loading, processClick) {
                    return new Preview.PreviewPage(pageIndex, width, height, zoom, documentId, color, brickProvider, loading, processClick, this._editingFields);
                };
                ReportPreview.prototype._cleanTabInfo = function () {
                    this.exportOptionsModel(null);
                    this.documentMap(null);
                };
                ReportPreview.prototype._clearReportInfo = function () {
                    this._cleanTabInfo();
                    this.closeReport();
                    this.originalParametersInfo(null);
                };
                ReportPreview.prototype._export = function (args, actionUri, printable) {
                    var _this = this;
                    var deffered = $.Deferred();
                    if (this._editingFields().length > 0 || Preview.AsyncExportApproach || this.exportOptionsModel().hasSensitiveData()) {
                        var self = this;
                        this.progressBar.text(DevExpress.Designer.getLocalization('Exporting the document...'));
                        this.progressBar.cancelText(DevExpress.Designer.getLocalization('Cancel'));
                        this.progressBar.startProgress(function () { _this._currentOperationId(null); });
                        this.requestWrapper.getStartExportOperation(args)
                            .done(function (response) { self.previewHandlersHelper.doneStartExportHandler(deffered, printable, response); })
                            .fail(function (error) { self.previewHandlersHelper.errorStartExportHandler(deffered, error); });
                    }
                    else {
                        deffered.resolve(true);
                        this._safelyRunWindowOpen(actionUri + "?actionKey=exportTo&arg=" + args);
                    }
                    return deffered.promise();
                };
                ReportPreview.prototype._safelyRunWindowOpen = function (url, target) {
                    if (target === void 0) { target = "_blank"; }
                    var newWindow = window.open(url, target);
                    target === "_blank" && newWindow && (newWindow.opener = null);
                    return newWindow;
                };
                ReportPreview.prototype.createBrickClickProcessor = function (cyclePageIndex) {
                    var _self = this;
                    return function (brick) {
                        _self.goToPage(cyclePageIndex, true);
                        brick && _self.pages()[cyclePageIndex].selectBrick("");
                        if (_self.customProcessBrickClick && _self.customProcessBrickClick(cyclePageIndex, brick)) {
                            return;
                        }
                        if (brick && brick.navigation) {
                            brick.navigation.drillDownKey && _self.reportId && _self._doDrillDown && _self._doDrillDown(brick.navigation.drillDownKey);
                            if (brick.navigation.pageIndex >= 0) {
                                var targetPage = _self.pages().filter(function (page) { return page.pageIndex === brick.navigation.pageIndex; })[0];
                                if (targetPage) {
                                    _self.goToPage(brick.navigation.pageIndex);
                                    targetPage.selectBrick(brick.navigation.indexes);
                                }
                            }
                            else {
                                var validateUrl = function (url) {
                                    var isUrlString = typeof url === "string";
                                    if (isUrlString) {
                                        url = url.toLocaleLowerCase();
                                    }
                                    if (url === "empty") {
                                        return false;
                                    }
                                    return _self.allowURLsWithJSContent || (isUrlString && (url.indexOf("javascript:") === -1));
                                };
                                if (brick.navigation.url && validateUrl(brick.navigation.url)) {
                                    _self._safelyRunWindowOpen(brick.navigation.url, brick.navigation.target || "_blank");
                                }
                            }
                        }
                    };
                };
                ReportPreview.prototype.openReport = function (reportName) {
                    var _this = this;
                    this._clearReportInfo();
                    var deferred = $.Deferred();
                    this._openReportOperationDeferred = deferred;
                    this.requestWrapper.openReport(reportName).done(function (response) {
                        deferred.resolve(response);
                    }).fail(function (error) {
                        deferred.reject(error);
                        _this._processError(DevExpress.Designer.getLocalization("Could not open report '" + reportName + "'"), error);
                    });
                    return this.initialize(deferred.promise());
                };
                ReportPreview.prototype.drillThrough = function (customData, closeCurrentReport) {
                    var _this = this;
                    if (closeCurrentReport === void 0) { closeCurrentReport = true; }
                    var deferred = $.Deferred();
                    this.requestWrapper.drillThrough(customData).done(function (response) {
                        if (closeCurrentReport) {
                            _this._clearReportInfo();
                            _this.initialize(deferred.promise());
                        }
                        deferred.resolve(response);
                    }).fail(function (error) {
                        deferred.reject(error);
                        _this._processError(DevExpress.Designer.getLocalization("Drill through operation failed"), error);
                    });
                    return deferred.promise();
                };
                ReportPreview.prototype.initialize = function (initializeDataPromise) {
                    var _this = this;
                    this._currentReportId(null);
                    this._currentDocumentId(null);
                    this._initialize();
                    initializeDataPromise.done(function (previewInitialize) {
                        if (previewInitialize && !previewInitialize.error && (previewInitialize.reportId || previewInitialize.documentId)) {
                            _this._currentReportId(previewInitialize.reportId);
                            _this._currentDocumentId(previewInitialize.documentId);
                            _this.rtlReport(previewInitialize.rtlReport);
                            var pageSettings = previewInitialize.pageSettings;
                            if (pageSettings) {
                                if (pageSettings.height)
                                    _this._pageHeight(pageSettings.height);
                                if (pageSettings.width)
                                    _this._pageWidth(pageSettings.width);
                                _this._pageBackColor((pageSettings.color && _this.readerMode) ? 'rgba(' + pageSettings.color + ')' : '');
                            }
                            var deserializedExportOptions = _this._deserializeExportOptions(previewInitialize.exportOptions);
                            _this.exportOptionsModel(deserializedExportOptions);
                            _this.originalParametersInfo(previewInitialize.parametersInfo);
                            if (previewInitialize.documentId) {
                                var doGetBuildStatusFunc = _this.getDoGetBuildStatusFunc();
                                doGetBuildStatusFunc(previewInitialize.documentId);
                            }
                        }
                        else {
                            _this.pageLoading(false);
                            _this._processError(DevExpress.Designer.getLocalization("The report preview initialization has failed"), previewInitialize && previewInitialize.error);
                        }
                    }).fail(function (error) {
                        _this.removeEmptyPages();
                    });
                    return initializeDataPromise;
                };
                ReportPreview.prototype._deserializeExportOptions = function (exportOptionsString, isMerged) {
                    var jsonModel = exportOptionsString && JSON.parse(exportOptionsString);
                    return (!this.reportId || isMerged) ? new DevExpress.Designer.Report.ExportOptionsMergedPreview(jsonModel) : new DevExpress.Designer.Report.ExportOptionsPreview(jsonModel);
                };
                ReportPreview.prototype.deactivate = function () {
                    this._initialize();
                    this._cleanTabInfo();
                    this.closeReport();
                    this._currentDocumentId(null);
                    this._currentReportId(null);
                };
                ReportPreview.prototype.startBuild = function () {
                    this._initialize();
                    return this._startBuildRequest();
                };
                ReportPreview.prototype._initializeStartBuild = function () {
                    var _this = this;
                    if (this.documentBuilding() || this._startBuildOperationId) {
                        return false;
                    }
                    this._startBuildOperationId = Preview.generateGuid();
                    this._currentDocumentId(null);
                    this.progressBar.text(DevExpress.Designer.getLocalization('Document is building...'));
                    this.progressBar.cancelText(DevExpress.Designer.getLocalization('Cancel'));
                    this.progressBar.startProgress(function () { _this.documentBuilding(false); }, function () { _this.stopBuild(); });
                    this.documentBuilding(true);
                    return true;
                };
                ReportPreview.prototype._startBuildRequest = function () {
                    var _this = this;
                    if (!this._initializeStartBuild()) {
                        return null;
                    }
                    var deffered = $.Deferred();
                    this.requestWrapper.startBuildRequest()
                        .done(function (response) { _this.previewHandlersHelper.doneStartBuildHandler(deffered, response); })
                        .fail(function (error) { _this.previewHandlersHelper.errorStartBuildHandler(deffered, error, _this._startBuildOperationId); });
                    return deffered.promise();
                };
                ReportPreview.prototype.getExportStatus = function (operationId) {
                    var _this = this;
                    var deffered = $.Deferred();
                    setTimeout(function () {
                        _this.requestWrapper.getExportStatusRequest(operationId)
                            .done(function (response) { _this.previewHandlersHelper.doneExportStatusHandler(deffered, operationId, response); })
                            .fail(function (error) { _this.previewHandlersHelper.errorExportStatusHandler(deffered, error); });
                    }, 250);
                    return deffered.promise();
                };
                ReportPreview.prototype.getExportResult = function (operationId, printDisposition) {
                    var arg = encodeURIComponent(JSON.stringify({ id: operationId, printable: !!printDisposition }));
                    var newWindow = this._safelyRunWindowOpen(Preview.HandlerUri + "?actionKey=getExportResult&arg=" + arg);
                };
                ReportPreview.prototype.getBuildStatus = function (documentId) {
                    var _this = this;
                    var deffered = $.Deferred();
                    setTimeout(function () {
                        var ignorePredicate = function () { return _this._closeDocumentRequests[documentId]; };
                        _this.requestWrapper.getBuildStatusRequest(documentId, ignorePredicate)
                            .done(function (response) { _this.previewHandlersHelper.doneGetBuildStatusHandler(deffered, documentId, response, ignorePredicate); })
                            .fail(function (error) { _this.previewHandlersHelper.errorGetBuildStatusHandler(deffered, error, ignorePredicate); });
                    }, 250);
                    return deffered.promise();
                };
                ReportPreview.prototype.getDoGetBuildStatusFunc = function () {
                    var preview = this;
                    var doGetBuildStatus = function (documentId) {
                        var promise = preview.getBuildStatus(documentId);
                        promise.done(function (result) {
                            if (result && result.requestAgain && !preview._stopBuildRequests[documentId] && !preview._closeDocumentRequests[documentId]) {
                                doGetBuildStatus(documentId);
                            }
                            else {
                                try {
                                    if (result.error || !result.requestAgain && !result.pageCount) {
                                        preview.removeEmptyPages(!result.pageCount);
                                        return;
                                    }
                                    if (!result.completed) {
                                        return;
                                    }
                                    preview.getDocumentData(documentId);
                                    preview.pages().forEach(function (page) {
                                        page.updateSize(preview._zoom());
                                        var isCurrentPage = page.pageIndex === preview.pageIndex();
                                        page.actualResolution = 0;
                                        page.isClientVisible(isCurrentPage);
                                        isCurrentPage && page._setPageImgSrc(documentId, preview._zoom());
                                    });
                                }
                                finally {
                                    preview.progressBar.complete();
                                    setTimeout(preview._raiseOnSizeChanged, 1000);
                                }
                            }
                        });
                    };
                    return doGetBuildStatus;
                };
                ReportPreview.prototype.getDocumentData = function (documentId) {
                    var _this = this;
                    var ignoreErrorPredicate = function () { return _this._closeDocumentRequests[documentId]; };
                    this.requestWrapper.getDocumentData(documentId, ignoreErrorPredicate)
                        .done(function (response) {
                        if (!response) {
                            return;
                        }
                        _this._drillDownState = response.drillDownKeys || [];
                        if (response.canPerformContinuousExport === false && _this.reportId) {
                            var deserializedExportOptions = _this._deserializeExportOptions(response.exportOptions || {}, true);
                            _this.exportOptionsModel(deserializedExportOptions);
                        }
                        _this.documentMap(response.documentMap);
                        _this._clearEditingFields();
                        _this._editingFields((response.editingFields || []).map(function (item, index) {
                            var field = new Preview.EditingField(item, index);
                            var subscription = field.editValue.subscribe(function (newValue) {
                                field.refreshHtmlValue(_this.requestWrapper, newValue);
                                _this.editingFieldChanged && _this.editingFieldChanged(field);
                            });
                            _this._editingValuesSubscriptions.push(subscription);
                            return field;
                        }));
                    })
                        .fail(function (error) {
                        if (!ignoreErrorPredicate())
                            _this._processError(DevExpress.Designer.getLocalization("Cannot obtain additional document data for the current document"), error);
                    });
                };
                ReportPreview.prototype.exportDocumentTo = function (format) {
                    if (!this._currentDocumentId())
                        return;
                    var serializedExportOptions = this.exportOptionsModel() ? JSON.stringify(new DevExpress.JS.Utils.ModelSerializer().serialize(this.exportOptionsModel())) : null;
                    var args = encodeURIComponent(JSON.stringify({
                        documentId: this._currentDocumentId(),
                        exportOptions: serializedExportOptions,
                        format: format,
                        editingFieldValues: this._editingFields && this._editingFields().map(function (item) { return item.editValue(); })
                    }));
                    this._export(args, Preview.HandlerUri);
                };
                ReportPreview.prototype.printDocument = function (pageIndex) {
                    if (!this._currentDocumentId())
                        return;
                    var exportOptions = new DevExpress.Designer.Report.ExportOptionsPreview({});
                    exportOptions.pdf["showPrintDialogOnOpen"] = true;
                    pageIndex = parseInt(pageIndex);
                    if ((!!pageIndex && pageIndex > 0 || pageIndex === 0) && (this.pages().length > pageIndex)) {
                        (exportOptions.pdf["pageRange"] = pageIndex + 1);
                    }
                    var serializedExportOptions = JSON.stringify(new DevExpress.JS.Utils.ModelSerializer().serialize(exportOptions));
                    var args = encodeURIComponent(JSON.stringify({
                        documentId: this._currentDocumentId(),
                        exportOptions: serializedExportOptions,
                        format: "printpdf",
                        editingFieldValues: this._editingFields && this._editingFields().map(function (item) { return item.editValue(); })
                    }));
                    this._export(args, Preview.HandlerUri, true);
                };
                ReportPreview.prototype.stopBuild = function (documentId) {
                    var id = documentId || this._currentDocumentId();
                    if (!id) {
                        this._startBuildOperationId && (this._stopBuildRequests[this._startBuildOperationId] = true);
                        return;
                    }
                    this._stopBuildRequests[id] = true;
                    this.progressBar.complete();
                    this.requestWrapper.stopBuild(id);
                };
                ReportPreview.prototype.closeDocument = function (documentId) {
                    var _documentId = documentId || this._currentDocumentId();
                    if (!_documentId) {
                        this._startBuildOperationId && (this._closeDocumentRequests[this._startBuildOperationId] = true);
                        return;
                    }
                    this._closeDocumentRequests[_documentId] = true;
                    this.progressBar.complete();
                    this.requestWrapper.sendCloseRequest(_documentId);
                };
                ReportPreview.prototype.closeReport = function (reportId) {
                    this._openReportOperationDeferred && this._openReportOperationDeferred.reject();
                    if (!this._currentReportId()) {
                        return;
                    }
                    this.requestWrapper.sendCloseRequest(null, this._currentReportId());
                };
                ReportPreview.prototype.goToPage = function (pageIndex, forcePageChanging) {
                    if (!forcePageChanging && this.pageIndex.peek() === pageIndex || this.pages.peek().length === 0 || pageIndex < 0 || pageIndex >= this.pages.peek().length) {
                        return;
                    }
                    this.pages.peek().forEach(function (page) {
                        var visible = page.pageIndex === pageIndex;
                        page.active(visible);
                        page.isClientVisible(visible);
                    });
                    this.pageIndex(pageIndex);
                };
                ReportPreview.prototype.getSelectedContent = function () {
                    var currentPage = this.pages()[this.pageIndex()];
                    if (!currentPage || !currentPage.brickColumnWidthArray) {
                        return "";
                    }
                    var activeBricks = [];
                    var getActiveBricks = function (currentBrick, resultArray) {
                        if (!currentBrick) {
                            return;
                        }
                        currentBrick.active() && currentBrick.genlIndex != -1 && activeBricks.push(currentBrick);
                        currentBrick.bricks && currentBrick.bricks.length != 0 && currentBrick.bricks.forEach(function (innerBrick) { getActiveBricks(innerBrick, resultArray); });
                    };
                    getActiveBricks(currentPage.brick(), activeBricks);
                    if (!activeBricks) {
                        return "";
                    }
                    var sortedActiveBricks = [];
                    var extendWithSpaces = function (width, text) {
                        text = text || "";
                        var spaceCount = width - text.length;
                        for (var i = 0; i <= spaceCount; i++) {
                            text += " ";
                        }
                        return text;
                    };
                    var firstUsedColumn = currentPage.brickColumnWidthArray.length, lastUsedColumn = -1;
                    activeBricks.forEach(function (activeBrick) {
                        var row = sortedActiveBricks[activeBrick.row];
                        if (!row) {
                            row = [];
                            sortedActiveBricks[activeBrick.row] = row;
                        }
                        row[activeBrick.col] = activeBrick.text();
                        if (firstUsedColumn > activeBrick.col) {
                            firstUsedColumn = activeBrick.col;
                        }
                        if (lastUsedColumn < activeBrick.col) {
                            lastUsedColumn = activeBrick.col;
                        }
                    });
                    var result = "";
                    sortedActiveBricks.forEach(function (row) {
                        for (var c = firstUsedColumn; c <= lastUsedColumn; c++) {
                            result += extendWithSpaces(currentPage.brickColumnWidthArray[c], row[c]);
                        }
                        result += "\r\n";
                    });
                    return result;
                };
                ReportPreview.prototype._processError = function (error, jqXHR, showForUser) {
                    if (showForUser === void 0) { showForUser = true; }
                    var serverError = DevExpress.Designer.getErrorMessage(jqXHR);
                    serverError && (error += ": " + serverError);
                    Preview.MessageHandler.processError(error, showForUser);
                };
                Object.defineProperty(ReportPreview.prototype, "reportId", {
                    get: function () {
                        return this._currentReportId();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ReportPreview.prototype, "documentId", {
                    get: function () {
                        return this._currentDocumentId();
                    },
                    enumerable: true,
                    configurable: true
                });
                return ReportPreview;
            })(DevExpress.Designer.Disposable);
            Preview.ReportPreview = ReportPreview;
            function updatePreviewContentSize(previewSize, root, rtl) {
                return function () {
                    var $root = $(root);
                    var rightAreaWidth = $root.find(".dxrd-preview .dxrd-right-panel").outerWidth() + $root.find(".dxrd-right-tabs").outerWidth();
                    var surfaceWidth = $root.find(".dxrd-preview").width() - (rightAreaWidth + 5);
                    var cssStyleData = rtl ? { 'right': '', 'left': rightAreaWidth } : { 'right': rightAreaWidth, 'left': '' };
                    cssStyleData['width'] = surfaceWidth;
                    $root.find(".dxrd-preview-wrapper").css(cssStyleData);
                    previewSize(surfaceWidth);
                };
            }
            Preview.updatePreviewContentSize = updatePreviewContentSize;
            function updatePreviewZoomWithAutoFit(width, height, element, direction) {
                if (direction === void 0) { direction = "both"; }
                var $element = $(element);
                var $previewWrapper = $element.closest(".dxrd-preview-wrapper");
                var $preview = $element.closest(".dxrd-preview");
                if ($previewWrapper.length === 0 || $preview.length === 0) {
                    return 1;
                }
                var rightAreaWidth = $preview.find(".dxrd-right-panel").outerWidth() + $preview.find(".dxrd-right-tabs").outerWidth();
                var surfaceWidth = $preview.width() - (rightAreaWidth > 0 ? (rightAreaWidth + 10) : 0);
                var topAreaHeight = parseFloat($previewWrapper.css("top").split("px")[0]);
                var designerHeight = $preview.outerHeight();
                var surfaceHeight = designerHeight - topAreaHeight;
                var heightZoom = surfaceHeight / (height + 6);
                var widthZoom = surfaceWidth / width;
                if (direction === 'horizontal') {
                    return widthZoom;
                }
                return Math.min(heightZoom, widthZoom);
            }
            Preview.updatePreviewZoomWithAutoFit = updatePreviewZoomWithAutoFit;
            function createDesktopPreview(element, callbacks, parametersInfo, handlerUri, previewVisible, applyBindings, allowURLsWithJSContent, rtl) {
                if (previewVisible === void 0) { previewVisible = true; }
                if (applyBindings === void 0) { applyBindings = true; }
                if (allowURLsWithJSContent === void 0) { allowURLsWithJSContent = false; }
                var previewWrapper = new Preview.PreviewRequestWrapper(), reportPreview = new ReportPreview(handlerUri, previewWrapper, undefined, rtl), searchModel = new Preview.SearchViewModel(reportPreview);
                var documentMapModel = new Preview.DocumentMapModel(reportPreview);
                var parametersModel = new Preview.PreviewParametersViewModel(reportPreview, new Preview.PreviewParameterHelper(parametersInfo && parametersInfo.knownEnums, callbacks));
                var exportModel = new Preview.ExportOptionsModel(reportPreview);
                reportPreview.canSwitchToDesigner = !previewVisible;
                reportPreview.allowURLsWithJSContent = allowURLsWithJSContent;
                previewWrapper.initialize(reportPreview, parametersModel, searchModel);
                var tabPanel = new DevExpress.Designer.TabPanel([
                    parametersModel.tabInfo,
                    exportModel.tabInfo,
                    searchModel.tabInfo,
                    documentMapModel.tabInfo
                ], true, rtl);
                tabPanel.collapsed(true);
                var globalActionProviders = ko.observableArray([new Preview.PreviewActions(reportPreview), exportModel, searchModel, new Preview.PreviewDesignerActions(reportPreview)]);
                var actionLists = new Preview.ActionLists(reportPreview, globalActionProviders, callbacks && callbacks.customizeActions, reportPreview.previewVisible);
                reportPreview.previewVisible(previewVisible);
                var designerModel = {
                    rootStyle: { 'dxrd-preview': true },
                    reportPreview: reportPreview,
                    parametersModel: parametersModel,
                    exportModel: exportModel,
                    searchModel: searchModel,
                    documentMapModel: documentMapModel,
                    tabPanel: tabPanel,
                    actionLists: actionLists,
                    rtl: reportPreview.rtlViewer
                };
                designerModel.parts = [
                    { templateName: 'dxrd-preview-toolbar-scrollable', model: { actionLists: actionLists } },
                    { templateName: 'dxrdp-surface', model: designerModel.reportPreview },
                    { templateName: 'dxrd-right-panel-template-base', model: designerModel }
                ];
                var updatePreviewContentSize_ = updatePreviewContentSize(reportPreview.previewSize, element, rtl);
                $(window).bind("resize", function () {
                    updatePreviewContentSize_();
                });
                tabPanel.width.subscribe(function () {
                    setTimeout(updatePreviewContentSize_, 1);
                });
                designerModel.updateSurfaceSize = function () {
                    updatePreviewContentSize_();
                };
                updatePreviewContentSize_();
                if (element && !reportPreview.canSwitchToDesigner && applyBindings) {
                    $(element).children().remove();
                    ko.applyBindings(designerModel, element);
                }
                return designerModel;
            }
            Preview.createDesktopPreview = createDesktopPreview;
            function createPreview(element, callbacks, localization, parametersInfo, handlerUri, previewVisible, rtl, isMobile, mobileModeSettings, applyBindings, allowURLsWithJSContent) {
                if (previewVisible === void 0) { previewVisible = true; }
                if (applyBindings === void 0) { applyBindings = true; }
                if (allowURLsWithJSContent === void 0) { allowURLsWithJSContent = false; }
                if (!localization) {
                    localization = {};
                    Object.keys(DevExpress.Designer.localization_values).forEach(function (value) {
                        localization[DevExpress.Designer.localization_values[value]] = value;
                    });
                }
                DevExpress.JS.Localization.addCultureInfo({
                    messages: localization
                });
                DevExpress["config"]({ rtlEnabled: !!rtl });
                if (isMobile) {
                    return Preview.createMobilePreview(element, callbacks, parametersInfo, handlerUri, previewVisible, applyBindings, allowURLsWithJSContent, mobileModeSettings);
                }
                else {
                    return createDesktopPreview(element, callbacks, parametersInfo, handlerUri, previewVisible, applyBindings, allowURLsWithJSContent, rtl);
                }
            }
            Preview.createPreview = createPreview;
            function createAndInitPreviewModel(viewerModel, element, callbacks, applyBindings) {
                var previewModel = DevExpress.Report.Preview.createPreview(element, callbacks, viewerModel.localization, viewerModel.parametersInfo, viewerModel.handlerUri, undefined, viewerModel.rtl, viewerModel.isMobile, viewerModel.mobileModeSettings, applyBindings, viewerModel.allowURLsWithJSContent);
                if (viewerModel.reportId || viewerModel.documentId) {
                    previewModel.reportPreview.initialize($.Deferred().resolve(viewerModel));
                }
                return previewModel;
            }
            Preview.createAndInitPreviewModel = createAndInitPreviewModel;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="sources/metadata.ts" />
/// <reference path="sources/exportoptions.ts" />
/// <reference path="sources/preview-page.ts" />
/// <reference path="sources/preview-search.ts" />
/// <reference path="sources/preview-document-map.ts" />
/// <reference path="sources/preview-parameters.ts" />
/// <reference path="sources/preview.ts" /> 
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            Preview.ActionId = {
                Design: "dxxrp-design",
                FirstPage: "dxxrp-first-page",
                PrevPage: "dxxrp-prev-page",
                Pagination: "dxxrp-pagination",
                NextPage: "dxxrp-next-page",
                LastPage: "dxxrp-last-page",
                MultipageToggle: "dxxrp-multipage-toggle",
                HightlightEditingFields: "dxxrp-highlight-editing-fields",
                ZoomOut: "dxxrp-zoom-out",
                ZoomSelector: "dxxrp-zoom-selector",
                ZoomIn: "dxxrp-zoom-in",
                Print: "dxxrp-print",
                PrintPage: "dxxrp-print-page",
                ExportTo: "dxxrp-export-menu",
                Search: "dxxrp-search"
            };
            var PreviewDesignerActions = (function () {
                function PreviewDesignerActions(reportPreview) {
                    this.actions = [];
                    this.actions.push({
                        id: Preview.ActionId.Design,
                        text: DevExpress.Designer.getLocalization("Design"),
                        imageClassName: "dxrd-image-design",
                        disabled: ko.observable(false),
                        visible: reportPreview.canSwitchToDesigner,
                        hotKey: { ctrlKey: true, keyCode: 68 },
                        clickAction: function () {
                            reportPreview.previewVisible(false);
                            reportPreview.deactivate();
                        }
                    });
                }
                PreviewDesignerActions.prototype.getActions = function (context) {
                    return this.actions;
                };
                return PreviewDesignerActions;
            })();
            Preview.PreviewDesignerActions = PreviewDesignerActions;
            var ActionLists = (function (_super) {
                __extends(ActionLists, _super);
                function ActionLists(reportPreview, globalActionProviders, customizeActions, enabled) {
                    _super.call(this, enabled);
                    this._reportPreview = reportPreview;
                    this.globalActionProviders = globalActionProviders;
                    this.toolbarItems = ko.computed(function () {
                        var globalActions = [];
                        globalActionProviders().forEach(function (actionProvider) {
                            globalActions.push.apply(globalActions, actionProvider.getActions(reportPreview));
                        });
                        customizeActions && customizeActions(globalActions);
                        return globalActions;
                    });
                }
                ActionLists.prototype.processShortcut = function (actions, e) {
                    if (this.shouldIgnoreProcessing(e))
                        return;
                    _super.prototype.processShortcut.call(this, actions, e);
                };
                return ActionLists;
            })(DevExpress.Designer.ActionListsBase);
            Preview.ActionLists = ActionLists;
            var PreviewActions = (function () {
                function PreviewActions(reportPreview) {
                    this.actions = [];
                    var zoomStep = ko.observable(0.01);
                    var printDisabled = ko.pureComputed(function () {
                        var inProgress = reportPreview.progressBar.inProgress();
                        var documentBuilding = reportPreview.documentBuilding();
                        return reportPreview.pageIndex() === -1 || inProgress || documentBuilding;
                    });
                    this.actions.push({
                        id: Preview.ActionId.FirstPage,
                        text: DevExpress.Designer.getLocalization("First Page"),
                        imageClassName: "dxrd-image-preview-first",
                        disabled: ko.pureComputed(function () { return reportPreview.pageIndex() < 1; }),
                        visible: ko.pureComputed(function () { return reportPreview.previewVisible(); }),
                        hotKey: { ctrlKey: true, keyCode: 37 },
                        clickAction: function () {
                            if (reportPreview.pageIndex() > 0) {
                                reportPreview.goToPage(0);
                            }
                        }
                    });
                    this.actions.push({
                        id: Preview.ActionId.PrevPage,
                        text: DevExpress.Designer.getLocalization("Previous Page"),
                        imageClassName: "dxrd-image-preview-prev",
                        disabled: ko.pureComputed(function () { return reportPreview.pageIndex() < 1; }),
                        visible: ko.pureComputed(function () { return reportPreview.previewVisible(); }),
                        hotKey: { ctrlKey: false, keyCode: 37 },
                        clickAction: function () {
                            if (reportPreview.pageIndex() >= 1) {
                                reportPreview.goToPage(reportPreview.pageIndex() - 1);
                            }
                        },
                    });
                    var paginationSelectBoxViewModel = {
                        id: Preview.ActionId.Pagination,
                        text: "Pagination",
                        imageClassName: "dxrd-image-pager",
                        disabled: ko.observable(false),
                        visible: ko.pureComputed(function () { return reportPreview.previewVisible(); }),
                        clickAction: $.noop,
                        selectedItem: ko.pureComputed({
                            read: function () {
                                if (reportPreview.pageIndex() < 0) {
                                    return null;
                                }
                                var items = paginationSelectBoxViewModel.pageItems();
                                return items && items.store && (items.store.length > reportPreview.pageIndex()) && items.store[reportPreview.pageIndex()];
                            },
                            write: function (newValue) {
                                if (!!newValue && (newValue.index || newValue.index === 0)) {
                                    reportPreview.goToPage(newValue.index);
                                }
                            },
                            deferEvaluation: true
                        }),
                        pageItems: ko.pureComputed(function () {
                            var pageCount = reportPreview.pages().length;
                            if (pageCount === 0 || reportPreview.pageIndex.peek() === -1) {
                                return [];
                            }
                            var pagesArray = new Array();
                            for (var i = 0; i < pageCount;) {
                                pagesArray.push({ index: i, text: ++i });
                            }
                            return {
                                store: pagesArray,
                                paginate: pageCount > 200,
                                pageSize: 100
                            };
                        }),
                        currentPage: reportPreview._currentPageText,
                        focusOut: function (e) {
                            if (!paginationSelectBoxViewModel._isPageChanged(e.component.option("text"))) {
                                reportPreview._currentPageText.notifySubscribers(reportPreview._currentPageText());
                            }
                        },
                        keyUp: function (e) {
                            if (e.jQueryEvent.which !== 13)
                                return;
                            if (paginationSelectBoxViewModel._isPageChanged(e.component.option("text"))) {
                                paginationSelectBoxViewModel.opened(false);
                            }
                        },
                        _isPageChanged: function (value) {
                            var val = parseInt && parseInt(value);
                            if (!!val && val-- > 0 && val < reportPreview.pages().length) {
                                reportPreview.goToPage(val);
                                return true;
                            }
                            return false;
                        },
                        displayExpr: function (value) {
                            var pageIndex = reportPreview.pageIndex.peek();
                            if (pageIndex === -1 || !value || pageIndex === value.index) {
                                return reportPreview._currentPageText.peek();
                            }
                            else {
                                return value.text;
                            }
                        },
                        itemTemplate: function (value) { return value.text; },
                        searchMode: 'startswith',
                        searchEnabled: ko.observable(true),
                        searchTimeout: 10,
                        opened: ko.observable(false),
                        templateName: "dxrd-preview-pager"
                    };
                    this.actions.push(paginationSelectBoxViewModel);
                    this.actions.push({
                        id: Preview.ActionId.NextPage,
                        text: DevExpress.Designer.getLocalization("Next Page"),
                        imageClassName: "dxrd-image-preview-next",
                        disabled: ko.pureComputed(function () { return reportPreview.pageIndex() < 0 || reportPreview.pageIndex() >= reportPreview.pages().length - 1; }),
                        visible: ko.pureComputed(function () { return reportPreview.previewVisible(); }),
                        hotKey: { ctrlKey: false, keyCode: 39 },
                        clickAction: function () {
                            if (reportPreview.pageIndex() < reportPreview.pages().length - 1) {
                                reportPreview.goToPage(reportPreview.pageIndex() + 1);
                            }
                        }
                    });
                    this.actions.push({
                        id: Preview.ActionId.LastPage,
                        text: DevExpress.Designer.getLocalization("Last Page"),
                        imageClassName: "dxrd-image-preview-last",
                        disabled: ko.pureComputed(function () { return reportPreview.pageIndex() < 0 || reportPreview.pageIndex() >= reportPreview.pages().length - 1; }),
                        visible: ko.pureComputed(function () { return reportPreview.previewVisible(); }),
                        hotKey: { ctrlKey: true, keyCode: 39 },
                        clickAction: function () {
                            if (reportPreview.pageIndex() < reportPreview.pages().length - 1) {
                                reportPreview.goToPage(reportPreview.pages().length - 1);
                            }
                        }
                    });
                    this.actions.push({
                        id: Preview.ActionId.MultipageToggle,
                        text: DevExpress.Designer.getLocalization("Toggle Multipage Mode"),
                        imageClassName: ko.pureComputed(function () { return reportPreview.showMultipagePreview() ? "dxrd-image-preview-single-page" : "dxrd-image-preview-multipage"; }),
                        disabled: ko.observable(false),
                        visible: ko.pureComputed(function () { return reportPreview.previewVisible(); }),
                        hotKey: { ctrlKey: true, keyCode: 77 },
                        clickAction: function () {
                            var zoom = reportPreview._zoom();
                            reportPreview.showMultipagePreview(!reportPreview.showMultipagePreview());
                            reportPreview.zoom(zoom);
                        },
                        hasSeparator: true
                    });
                    this.actions.push({
                        id: Preview.ActionId.ZoomOut,
                        text: DevExpress.Designer.getLocalization("Zoom Out"),
                        imageClassName: "dxrd-image-zoomout",
                        disabled: ko.observable(false),
                        visible: true,
                        zoomStep: zoomStep,
                        hotKey: { ctrlKey: false, keyCode: 109 },
                        clickAction: function () {
                            var zoomLevel = reportPreview.zoom() || reportPreview._zoom();
                            reportPreview.zoom(Math.max(zoomLevel - zoomStep(), 0.01));
                        },
                        hasSeparator: true
                    });
                    this.actions.push({
                        id: Preview.ActionId.ZoomSelector,
                        text: DevExpress.Designer.getLocalization('Zoom to Whole Page'),
                        imageClassName: "dxrd-image-zoom",
                        disabled: ko.observable(false),
                        visible: true,
                        hotKey: { ctrlKey: true, keyCode: 187 },
                        clickAction: function () {
                            reportPreview.zoom(0);
                        },
                        templateName: "dxrd-zoom-autofit-select-template",
                        zoom: reportPreview.zoom,
                        zoomLevels: reportPreview.predefinedZoomLevels,
                        zoomItems: ko.pureComputed(function () {
                            var items = reportPreview.predefinedZoomLevels.slice(0);
                            if (reportPreview.showMultipagePreview() === false && items.indexOf(0) === -1) {
                                items.push(0);
                            }
                            return items;
                        })
                    });
                    this.actions.push({
                        id: Preview.ActionId.ZoomIn,
                        text: DevExpress.Designer.getLocalization("Zoom In"),
                        imageClassName: "dxrd-image-zoomin",
                        disabled: ko.observable(false),
                        visible: true,
                        zoomStep: zoomStep,
                        hotKey: { ctrlKey: false, keyCode: 107 },
                        clickAction: function () {
                            var zoomLevel = reportPreview.zoom() || reportPreview._zoom();
                            reportPreview.zoom(Math.min(zoomLevel + zoomStep(), 10));
                        }
                    });
                    this.actions.push({
                        id: Preview.ActionId.HightlightEditingFields,
                        text: DevExpress.Designer.getLocalization("Highlight Editing Fields"),
                        imageClassName: "dxrp-image-hightlight-editing-fields",
                        disabled: ko.pureComputed(function () { return reportPreview.editingFieldsProvider().length < 1; }),
                        visible: ko.pureComputed(function () { return reportPreview.previewVisible(); }),
                        selected: ko.pureComputed(function () { return reportPreview.editingFieldsHighlighted(); }),
                        hotKey: { ctrlKey: true, keyCode: 72 },
                        clickAction: function () {
                            reportPreview.editingFieldsHighlighted(!reportPreview.editingFieldsHighlighted());
                        },
                        hasSeparator: true
                    });
                    this.actions.push({
                        id: Preview.ActionId.Print,
                        text: DevExpress.Designer.getLocalization("Print"),
                        imageClassName: "dxrd-image-print",
                        hasSeparator: true,
                        disabled: printDisabled,
                        visible: true,
                        hotKey: { ctrlKey: true, keyCode: 80 },
                        clickAction: function () {
                            if (printDisabled()) {
                                return;
                            }
                            reportPreview.printDocument();
                        }
                    });
                    this.actions.push({
                        id: Preview.ActionId.PrintPage,
                        text: DevExpress.Designer.getLocalization("Print Page"),
                        imageClassName: "dxrd-image-print-page",
                        disabled: printDisabled,
                        visible: true,
                        hotKey: { ctrlKey: true, keyCode: 49 },
                        clickAction: function () {
                            if (printDisabled()) {
                                return;
                            }
                            reportPreview.printDocument(reportPreview.pageIndex());
                        }
                    });
                }
                PreviewActions.prototype.getActions = function (context) {
                    return this.actions;
                };
                return PreviewActions;
            })();
            Preview.PreviewActions = PreviewActions;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var EditingField = (function () {
                function EditingField(model, index) {
                    this._needToUseHtml = false;
                    this._index = -1;
                    this._model = model;
                    this._index = index;
                    this.readOnly = ko.observable(model.readOnly);
                    this.editValue = ko.observable(model.editValue);
                    this.htmlValue = ko.observable(model.htmlValue);
                }
                EditingField.prototype.editorName = function () { return this._model.editorName; };
                EditingField.prototype.id = function () { return this._model.id; };
                EditingField.prototype.groupID = function () { return this._model.groupID; };
                EditingField.prototype.pageIndex = function () { return this._model.pageIndex; };
                EditingField.prototype.type = function () { return this._model.type; };
                EditingField.prototype.model = function () {
                    return $.extend({}, this._model, {
                        readOnly: this.readOnly.peek(),
                        editValue: this.editValue.peek(),
                        htmlValue: this.htmlValue.peek(),
                    });
                };
                EditingField.prototype.createViewModel = function (zoom, pageWidth, pageHeight, editingFieldsProvider, bounds) {
                    if (this._model.type === "check") {
                        return new Preview.CheckEditingFieldViewModel(this, pageWidth, pageHeight, zoom, editingFieldsProvider);
                    }
                    else if (this._model.type === "text") {
                        this._needToUseHtml = bounds.height !== this._model.bounds.height || !!this._model.brickOptions.formatString;
                        if (!this._needToUseHtml) {
                            this.htmlValue(null);
                        }
                        return new Preview.TextEditFieldViewModel(this, pageWidth, pageHeight, zoom, bounds);
                    }
                    else if (this._model.type === "charactercomb") {
                        return new Preview.CharacterCombEditingFieldViewModel(this, pageWidth, pageHeight, zoom, bounds);
                    }
                };
                EditingField.prototype.refreshHtmlValue = function (htmlProvider, newValue) {
                    var _this = this;
                    this.htmlValue(null);
                    if (this._needToUseHtml) {
                        htmlProvider.getEditingFieldHtml(newValue, this._index).done(function (html) {
                            _this.htmlValue(html);
                        });
                    }
                };
                return EditingField;
            })();
            Preview.EditingField = EditingField;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        Report.Categories = {
            Numeric: function () { return "Numeric"; },
            DateTime: function () { return "Date-Time"; },
            Letters: function () { return "Letters"; }
        };
        function getCharFromKeyCode(e) {
            var code = 0;
            if (navigator.userAgent.toLowerCase().indexOf('firefox') === -1) {
                code = e.keyCode;
            }
            else if (e.ctrlKey === false) {
                code = e.charCode;
            }
            if (code) {
                return String.fromCharCode(code);
            }
        }
        var EditingFieldExtensions = (function () {
            function EditingFieldExtensions() {
                this._editors = {};
            }
            EditingFieldExtensions.instance = function () {
                if (!EditingFieldExtensions._instance) {
                    EditingFieldExtensions._instance = new EditingFieldExtensions();
                    EditingFieldExtensions._instance._registerStandartEditors();
                }
                return EditingFieldExtensions._instance;
            };
            EditingFieldExtensions.prototype._registerStandartEditors = function () {
                EditingFieldExtensions.registerRegExpEditor("Integer", "Integer", Report.Categories.Numeric(), /^-?\d+$/, "0");
                EditingFieldExtensions.registerRegExpEditor("IntegerPositive", "Integer Positive", Report.Categories.Numeric(), /^\d+$/, "0");
                EditingFieldExtensions.registerRegExpEditor("FixedPoint", "Fixed - Point", Report.Categories.Numeric(), /^-?\d+([\.,]?\d*)?$/, "0");
                EditingFieldExtensions.registerRegExpEditor("FixedPointPositive", "Fixed - Point Positive", Report.Categories.Numeric(), /^\d+([\.,]?\d*)?$/, "0");
                EditingFieldExtensions.registerEditor("Date", "Date", Report.Categories.DateTime(), {
                    onPreRender: function (data) {
                        data.options.value(Globalize["formatDate"](Globalize.parseDate(data.options.value()) || new Date(Date.now())));
                    },
                    onValueChanged: function (e) {
                        e.model.value(e.component.option("text"));
                    }
                }, "dxrp-editing-field-datetime");
                EditingFieldExtensions.registerRegExpEditor("OnlyLatinLetters", "Only Latin Letters", Report.Categories.Letters(), /^[a-zA-Z]*$/, "");
            };
            EditingFieldExtensions.registerEditor = function (name, displayName, category, options, template) {
                EditingFieldExtensions.instance()._editors[name] = {
                    name: name,
                    displayName: displayName,
                    category: category,
                    options: options,
                    template: template
                };
            };
            EditingFieldExtensions.registerMaskEditor = function (editorID, displayName, category, mask) {
                EditingFieldExtensions.registerEditor(editorID, displayName, category, { mask: mask });
            };
            EditingFieldExtensions.registerRegExpEditor = function (editorID, displayName, category, regExp, defaultVal) {
                var options = {
                    onFocusIn: function (e) {
                        var $input = $(e.element).find("input").eq(0);
                        var currentValue = $input.val();
                        if (!regExp.test(currentValue))
                            $input.val(defaultVal);
                        $input = null;
                    },
                    onKeyPress: function (e) {
                        var char = getCharFromKeyCode(e.jQueryEvent);
                        if (!char)
                            return;
                        var $input = $(e.element).find("input").eq(0);
                        var caretPosition = getCaretPosition($input.get(0)).start;
                        var currentValue = $input.val();
                        if (caretPosition < 0) {
                            caretPosition = currentValue ? currentValue.length : 0;
                        }
                        var result = [currentValue.slice(0, caretPosition), char, currentValue.slice(caretPosition)].join('');
                        if (!regExp.test(result))
                            e.jQueryEvent.preventDefault();
                        $input = null;
                    },
                    onPaste: function (e) {
                        var clipboardData = e.jQueryEvent.originalEvent.clipboardData || window["clipboardData"] || {};
                        var pastedData = clipboardData && clipboardData.getData && clipboardData.getData('Text');
                        if (typeof pastedData !== "string")
                            return;
                        var $input = $(e.element).find("input").eq(0);
                        var caretPosition = getCaretPosition($input.get(0));
                        var currentValue = $input.val();
                        if (caretPosition.start < 0) {
                            caretPosition.end = caretPosition.start = currentValue ? currentValue.length : 0;
                        }
                        var result = [currentValue.slice(0, caretPosition.start), pastedData, currentValue.slice(caretPosition.end)].join('');
                        if (!regExp.test(result))
                            e.jQueryEvent.preventDefault();
                        $input = null;
                    }
                };
                EditingFieldExtensions.registerEditor(editorID, displayName, category, options);
            };
            EditingFieldExtensions.unregisterEditor = function (editorID) {
                delete EditingFieldExtensions.instance()._editors[editorID];
            };
            EditingFieldExtensions.prototype.categories = function () {
                var categories = [];
                for (var p in this._editors) {
                    var category = this._editors[p].category;
                    if (categories.indexOf(category) === -1) {
                        categories.push(category);
                    }
                }
                return categories;
            };
            EditingFieldExtensions.prototype.editors = function () {
                var _this = this;
                return Object.keys(this._editors).map(function (key) { return _this._editors[key]; });
            };
            EditingFieldExtensions.prototype.editorsByCategory = function (category) {
                var editors = [];
                for (var p in this._editors) {
                    if (this._editors[p].category === category) {
                        editors.push(this._editors[p]);
                    }
                }
                return editors;
            };
            EditingFieldExtensions.prototype.editor = function (editorID) {
                return this._editors[editorID];
            };
            return EditingFieldExtensions;
        })();
        Report.EditingFieldExtensions = EditingFieldExtensions;
        function getCaretPosition(el) {
            var start = -1, end = -1, normalizedValue, range, textInputRange, len, endRange;
            try {
                if (typeof el.selectionStart == "number" && typeof el.selectionEnd == "number") {
                    start = el.selectionStart;
                    end = el.selectionEnd;
                }
                else if (document["selection"]) {
                    range = document["selection"].createRange();
                    if (range && range.parentElement() == el) {
                        len = el.value.length;
                        normalizedValue = el.value.replace(/\r\n/g, "\n");
                        textInputRange = el.createTextRange();
                        textInputRange.moveToBookmark(range.getBookmark());
                        endRange = el.createTextRange();
                        endRange.collapse(false);
                        if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                            start = end = len;
                        }
                        else {
                            start = -textInputRange.moveStart("character", -len);
                            start += normalizedValue.slice(0, start).split("\n").length - 1;
                            if (textInputRange.compareEndPoints("EndToEnd", endRange) > -1) {
                                end = len;
                            }
                            else {
                                end = -textInputRange.moveEnd("character", -len);
                                end += normalizedValue.slice(0, end).split("\n").length - 1;
                            }
                        }
                    }
                }
            }
            catch (e) {
            }
            return {
                start: start,
                end: end
            };
        }
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            (function (CheckState) {
                CheckState[CheckState["Unchecked"] = 0] = "Unchecked";
                CheckState[CheckState["Checked"] = 1] = "Checked";
                CheckState[CheckState["Indeterminate"] = 2] = "Indeterminate";
            })(Preview.CheckState || (Preview.CheckState = {}));
            var CheckState = Preview.CheckState;
            ;
            var TextEditFieldViewModel = (function () {
                function TextEditFieldViewModel(field, pageWidth, pageHeight, zoom, bounds) {
                    var _this = this;
                    this.template = "dxrp-editing-field-container";
                    this.htmlValue = function () { return _this.field.htmlValue(); };
                    this.wordWrap = true;
                    this.active = ko.observable(false);
                    var brickStyle = field.model().brickOptions;
                    var style = { rtl: function () { return brickStyle.rtl; } };
                    new DevExpress.JS.Utils.ModelSerializer().deserialize(style, JSON.parse(brickStyle.style), DevExpress.Designer.Report.brickStyleSerializationsInfo);
                    var cssCalculator = new DevExpress.Designer.CssCalculator(style, ko.observable(!!brickStyle.rtlLayout));
                    var padding = cssCalculator.paddingsCss();
                    var verticalPadding = parseInt(padding["paddingTop"]) + parseInt(padding["paddingBottom"]);
                    if (cssCalculator.borderCss()["borderTop"] !== "none") {
                        verticalPadding += style["borderWidth"]();
                    }
                    if (cssCalculator.borderCss()["borderBottom"] !== "none") {
                        verticalPadding += style["borderWidth"]();
                    }
                    this.breakOffsetStyle = function () {
                        return {
                            top: bounds.offset.y * -100 / bounds.height + "%",
                            left: bounds.offset.x * -100 / bounds.width + "%"
                        };
                    };
                    this.textStyle = function () { return $.extend({}, cssCalculator.fontCss(), cssCalculator.foreColorCss(), cssCalculator.textAlignmentCss()); };
                    this.zoom = zoom;
                    this.field = field;
                    if (brickStyle.wordWrap != undefined) {
                        this.wordWrap = brickStyle.wordWrap;
                    }
                    this.hideEditor = function () {
                        setTimeout(function () {
                            _this.active(false);
                        });
                    };
                    var editor = DevExpress.Report.EditingFieldExtensions.instance().editor(field.editorName());
                    var editorOptions = $.extend(true, {}, editor && editor.options || {});
                    this.data = {
                        value: field.editValue,
                        hideEditor: this.hideEditor,
                        textStyle: this.textStyle,
                        options: editorOptions
                    };
                    var isCustomEditor = !!(editor && editor.template && editor.template !== "dxrp-editing-field-datetime");
                    if (!isCustomEditor) {
                        this.data.options = $.extend(editorOptions, {
                            value: field.editValue,
                            onFocusOut: this.hideEditor,
                            valueChangeEvent: "blur"
                        });
                    }
                    if (editor) {
                        this.editorTemplate = editor.template || "dxrp-editing-field-mask";
                    }
                    else {
                        this.editorTemplate = "dxrp-editing-field-text";
                    }
                    this.containerStyle = ko.pureComputed(function () {
                        return $.extend({
                            width: bounds.width + "px",
                            height: bounds.height + "px",
                            "line-height": (bounds.height - verticalPadding) + "px",
                            top: bounds.top * 100 / pageHeight + "%",
                            left: bounds.left * 100 / pageWidth + "%"
                        }, _this.active() || !_this.htmlValue() ? cssCalculator.borderCss() : { border: 'none' }, isCustomEditor && _this.active() || (!!_this.htmlValue() && !_this.active()) ? { padding: 0 } : cssCalculator.paddingsCss(), { "border-color": "transparent" });
                    });
                    this.borderStyle = ko.pureComputed(function () {
                        if (style["borderWidth"]() > 0 && style["borders"]() !== "None") {
                            return {
                                left: "-" + style["borderWidth"]() + "px",
                                top: "-" + style["borderWidth"]() + "px",
                                paddingRight: (style["borderWidth"]() * 2 - 2) + "px",
                                paddingBottom: (style["borderWidth"]() * 2 - 2) + "px"
                            };
                        }
                    });
                }
                TextEditFieldViewModel.prototype.activateEditor = function (viewModel, e) {
                    if (this.field.readOnly()) {
                        return;
                    }
                    var data = viewModel.data;
                    if (data && data.options && data.options.onPreRender) {
                        data.options.onPreRender(this.data);
                    }
                    this.active(true);
                    var elementFocused = false;
                    if (viewModel.options && viewModel.options.onEditorShown) {
                        elementFocused = viewModel.options.onEditorShown(this.data, $(e && e.currentTarget).first().get(0));
                    }
                    if (!elementFocused) {
                        $(e && e.currentTarget).find(":focusable").eq(0).focus();
                    }
                };
                return TextEditFieldViewModel;
            })();
            Preview.TextEditFieldViewModel = TextEditFieldViewModel;
            ko.bindingHandlers["childStyle"] = {
                init: function (element, valueAccessor) {
                    var values = valueAccessor();
                    $(element).find(values.selector).css(values.style);
                }
            };
            var CheckEditingFieldViewModel = (function () {
                function CheckEditingFieldViewModel(field, pageWidth, pageHeight, zoom, editingFieldsProvider) {
                    this.focused = ko.observable(false);
                    this._editingFieldsProvider = editingFieldsProvider;
                    this.template = "dxrp-editing-field-checkbox";
                    this.field = field;
                    this.zoom = zoom;
                    var bounds = this.field.model().bounds;
                    var checkBounds = this.field.model().brickOptions.checkBoxBounds;
                    var rtl = this.field.model().brickOptions.rtlLayout;
                    this.containerStyle = function () {
                        return {
                            height: bounds.height + "px",
                            width: bounds.width + "px",
                            top: bounds.top * 100 / pageHeight + "%",
                            left: bounds.left * 100 / pageWidth + "%"
                        };
                    };
                    this.checkStyle = function () {
                        var result = {
                            height: checkBounds.height + "px",
                            width: checkBounds.width + "px",
                            top: checkBounds.top + "px",
                            left: (rtl ? (bounds.width - checkBounds.left - checkBounds.width) : checkBounds.left) + "px"
                        };
                        return result;
                    };
                }
                CheckEditingFieldViewModel.prototype._toggleCheckState = function () {
                    if (this.field.editValue() === CheckState.Checked) {
                        this.field.editValue(CheckState.Unchecked);
                    }
                    else {
                        this.field.editValue(CheckState.Checked);
                    }
                };
                CheckEditingFieldViewModel.prototype.onKeyDown = function (_, e) {
                    if (e.keyCode == 32) {
                        this.toggleCheckState();
                    }
                    else {
                    }
                };
                CheckEditingFieldViewModel.prototype.onBlur = function () {
                    this.focused(false);
                };
                CheckEditingFieldViewModel.prototype.onFocus = function () {
                    this.focused(true);
                };
                CheckEditingFieldViewModel.prototype.onClick = function (_, e) {
                    this.toggleCheckState();
                };
                CheckEditingFieldViewModel.prototype.checked = function () {
                    if (this.field.editValue() === CheckState.Checked) {
                        return true;
                    }
                    if (this.field.editValue() === CheckState.Unchecked) {
                        return false;
                    }
                };
                CheckEditingFieldViewModel.prototype.toggleCheckState = function () {
                    var _this = this;
                    if (this.field.readOnly())
                        return;
                    if (!this.field.groupID()) {
                        this._toggleCheckState();
                    }
                    else if (this.checked() === false) {
                        this._editingFieldsProvider().forEach(function (value) {
                            if (value.groupID() === _this.field.groupID()) {
                                value.editValue(CheckState.Unchecked);
                            }
                        });
                        this._toggleCheckState();
                    }
                };
                return CheckEditingFieldViewModel;
            })();
            Preview.CheckEditingFieldViewModel = CheckEditingFieldViewModel;
            var CharacterCombEditingFieldViewModel = (function () {
                function CharacterCombEditingFieldViewModel(field, pageWidth, pageHeight, zoom, bounds) {
                    var _this = this;
                    this.field = field;
                    this.template = "dxrp-character-comb-editing-field";
                    this.active = ko.observable(false);
                    var brickStyle = field.model().brickOptions;
                    var style = { rtl: function () { return brickStyle.rtl; } };
                    new DevExpress.JS.Utils.ModelSerializer().deserialize(style, JSON.parse(brickStyle.style), DevExpress.Designer.Report.brickStyleSerializationsInfo);
                    var cssCalculator = new DevExpress.Designer.CssCalculator(style, ko.observable(!!brickStyle.rtlLayout));
                    var verticalPadding = parseInt(cssCalculator.paddingsCss()["paddingTop"]) + parseInt(cssCalculator.paddingsCss()["paddingBottom"]);
                    var borderCss = cssCalculator.borderCss();
                    if (borderCss["borderTop"] !== "none") {
                        verticalPadding += style["borderWidth"]();
                    }
                    if (borderCss["borderBottom"] !== "none") {
                        verticalPadding += style["borderWidth"]();
                    }
                    this.textStyle = function () { return $.extend({}, cssCalculator.fontCss(), cssCalculator.foreColorCss(), cssCalculator.textAlignmentCss()); };
                    this.containerStyle = ko.pureComputed(function () {
                        return $.extend({
                            width: bounds.width + "px",
                            height: bounds.height + "px",
                            "line-height": (bounds.height - verticalPadding) + "px",
                            top: bounds.top * 100 / pageHeight + "%",
                            left: bounds.left * 100 / pageWidth + "%"
                        }, cssCalculator.fontCss(), cssCalculator.foreColorCss());
                    });
                    var cellVerticalPadding = 0;
                    var borderCellStyle = "none";
                    ["Left", "Top", "Right", "Bottom"].forEach(function (item) {
                        if (borderCss["border" + item] !== "none") {
                            borderCellStyle = borderCss["border" + item];
                            cellVerticalPadding = style["borderWidth"]() * 2;
                        }
                    });
                    var cellStyle = {
                        "border": borderCellStyle,
                        "text-align": "center",
                        "position": "absolute",
                        "box-sizing": "border-box",
                        "border-color": "transparent"
                    };
                    var characterCombBounds = field.model().brickOptions.characterCombBounds;
                    this.cells = [];
                    var rowTops = {};
                    for (var i = 0; i < characterCombBounds.length; i++) {
                        this.cells.push({
                            style: $.extend({
                                width: characterCombBounds[i].width + "px",
                                height: characterCombBounds[i].height + "px",
                                "line-height": (characterCombBounds[i].height - cellVerticalPadding) + "px",
                                top: characterCombBounds[i].top + "px",
                                left: characterCombBounds[i].left + "px"
                            }, cellStyle),
                            text: ""
                        });
                        rowTops[characterCombBounds[i].top] = i;
                    }
                    var rowsCount = Object.keys(rowTops).length;
                    var colsCount = this.cells.length / rowsCount;
                    CharacterCombEditingFieldViewModel.setText(this.cells, style["textAlignment"](), style.rtl(), field.editValue.peek(), rowsCount, colsCount);
                    field.editValue.subscribe(function (newValue) {
                        CharacterCombEditingFieldViewModel.setText(_this.cells, style["textAlignment"](), style.rtl(), newValue, rowsCount, colsCount);
                    });
                    this.zoom = zoom;
                }
                CharacterCombEditingFieldViewModel.prototype.activateEditor = function (viewModel, e) {
                    if (!this.field.readOnly()) {
                        this.active(true);
                        $(e && e.currentTarget).find(":focusable").eq(0).focus();
                    }
                };
                CharacterCombEditingFieldViewModel.prototype.hideEditor = function () {
                    var _this = this;
                    setTimeout(function () {
                        _this.active(false);
                    });
                };
                CharacterCombEditingFieldViewModel.setText = function (cells, textAlignment, rtl, text, rowsCount, colsCount) {
                    for (var j = 0; j < cells.length; j++) {
                        cells[j].text = "";
                    }
                    var textRowsCount = Math.ceil(text.length / colsCount);
                    var textLastRowColCount = text.length % colsCount;
                    var startRow = -1;
                    if (textAlignment.indexOf("Bottom") === 0) {
                        startRow = rowsCount - textRowsCount;
                    }
                    else if (textAlignment.indexOf("Middle") === 0) {
                        startRow = Math.floor((rowsCount - textRowsCount) / 2);
                    }
                    else {
                        startRow = 0;
                    }
                    var lastRowStartCol = -1;
                    if (textAlignment.indexOf("Right") > 0) {
                        lastRowStartCol = rtl ? 0 : (colsCount - textLastRowColCount);
                    }
                    else if (textAlignment.indexOf("Center") > 0) {
                        lastRowStartCol = Math.floor((colsCount - textLastRowColCount) / 2);
                    }
                    else {
                        lastRowStartCol = rtl ? (colsCount - textLastRowColCount) : 0;
                    }
                    var j = startRow * colsCount;
                    var i = 0;
                    for (; i < text.length - textLastRowColCount; i++, j++) {
                        if (j >= 0 && j < cells.length) {
                            cells[j].text = text[i];
                        }
                    }
                    for (; i < text.length; i++, j++) {
                        if (j >= 0 && j < cells.length) {
                            cells[j + lastRowStartCol].text = text[i];
                        }
                    }
                };
                return CharacterCombEditingFieldViewModel;
            })();
            Preview.CharacterCombEditingFieldViewModel = CharacterCombEditingFieldViewModel;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.StringId = {
                Copy: "ReportStringId.RibbonXRDesign_Copy_STipTitle",
                NewViaWizard: "ReportStringId.UD_Capt_NewWizardReport",
                Open: "ReportStringId.UD_Capt_OpenFile",
                Save: "ReportStringId.Verb_Save",
                SaveAs: "ReportStringId.UD_Capt_SaveFileAs",
                MdiReportChanged: "ReportStringId.UD_Msg_MdiReportChanged"
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var slowdownDisctanceFactor = 2.5;
            var minScale = 0.92;
            var EventProcessor = (function () {
                function EventProcessor(element, slideOptions) {
                    var _this = this;
                    this.element = element;
                    this.slideOptions = slideOptions;
                    this._direction = {
                        vertical: false,
                        horizontal: false,
                    };
                    this.isLeftMove = false;
                    this.isRightMove = false;
                    this.$element = $(element),
                        this.$gallery = this.$element.find(".dxrd-mobile-gallery");
                    this.$galleryblocks = this.$gallery.find(".dxrd-gallery-blocks");
                    this.firstMobilePageOffset = $(this.$galleryblocks.find(".dxrd-mobile-page")[0]).offset();
                    this.slideOptions.searchPanel.height.subscribe(function (newVal) {
                        if (_this.slideOptions.readerMode) {
                            _this.slideOptions.topOffset(newVal);
                        }
                        else {
                            _this.slideOptions.topOffset(Math.min(newVal, Math.max(0, Preview.MobileSearchViewModel.maxHeight - _this.firstMobilePageOffset.top)));
                        }
                        if (!newVal) {
                            _this.applySearchAnimation(newVal);
                        }
                        else if (newVal === Preview.MobileSearchViewModel.maxHeight) {
                            _this.slideOptions.searchPanel.searchPanelVisible(true);
                            _this.applySearchAnimation(newVal);
                        }
                        else {
                            var dif = 1 - minScale;
                            var perc = newVal / Preview.MobileSearchViewModel.maxHeight;
                            var scale = 1 - dif * perc;
                            setTransform(_this.$galleryblocks, 'scale(' + Math.max(minScale, scale) + ')');
                        }
                    });
                }
                EventProcessor.prototype.getDirection = function (x, y) {
                    var distanceY = Math.abs(y - this._startingPositionY);
                    var distanceX = Math.abs(x - this._startingPositionX);
                    if (distanceY === 0 && distanceX === 0) {
                        this._direction.horizontal = false;
                        this._direction.vertical = false;
                        return this._direction;
                    }
                    var tg = !distanceX ? 10 : distanceY / distanceX;
                    if (tg < 2) {
                        this._direction.horizontal = true;
                        this._direction.vertical = false;
                    }
                    else {
                        this._direction.horizontal = false;
                        this._direction.vertical = true;
                    }
                    return this._direction;
                };
                EventProcessor.prototype.setPosition = function (x, y) {
                    this.isLeftMove = this.latestX > x;
                    this.isRightMove = this.latestX < x;
                    this.latestY = y;
                    this.latestX = x;
                };
                EventProcessor.prototype.initialize = function (x, y) {
                    this._startingPositionX = x;
                    this._startingPositionY = y;
                    this.latestX = x;
                    this.latestY = y;
                    this._direction = { horizontal: false, vertical: false };
                };
                EventProcessor.prototype.start = function (e) {
                    this.$galleryblocks = this.$gallery.find(".dxrd-gallery-blocks");
                    if (!this.slideOptions.topOffset()) {
                        this.firstMobilePageOffset = $(this.$galleryblocks.find(".dxrd-mobile-page")[0]).offset();
                        this.firstMobilePageOffset.top = this.firstMobilePageOffset.top * minScale;
                    }
                    this.initialize(e.pageX, e.pageY);
                };
                EventProcessor.prototype.move = function (e) {
                    e.preventDefault();
                    if (this.slideOptions.zoomUpdating() || this.slideOptions.galleryIsAnimated()) {
                        return;
                    }
                    if (!this.slideOptions.searchPanel.editorVisible()) {
                        var direction = this.getDirection(e.pageX, e.pageY);
                        if (!direction.vertical && !direction.horizontal)
                            return;
                        if (direction.vertical || this.slideOptions.searchPanel.height() !== 0) {
                            if (this.slideOptions.reachedTop()) {
                                this.slideOptions.brickEventsDisabled(true);
                                e.stopPropagation();
                                var currentHeight = this.slideOptions.searchPanel.height();
                                var difference = currentHeight + (e.clientY - this.latestY) / slowdownDisctanceFactor;
                                var distance = difference > 0 ? Math.min(difference, Preview.MobileSearchViewModel.maxHeight) : 0;
                                this.slideOptions.searchPanel.height(distance);
                            }
                        }
                    }
                    this.setPosition(e.clientX, e.clientY);
                };
                EventProcessor.prototype.end = function (e) {
                    var _this = this;
                    if (this.slideOptions.zoomUpdating() || this.slideOptions.galleryIsAnimated()) {
                        var touches = e["touches"];
                        if (!touches || touches.length === 0) {
                            if (this.slideOptions.zoomUpdating()) {
                                e.stopPropagation();
                            }
                            this.slideOptions.zoomUpdating(false);
                        }
                        return;
                    }
                    var direction = this.getDirection(e.pageX, e.pageY);
                    if (this.slideOptions.scrollAvailable()) {
                        if (direction.horizontal && this.slideOptions.swipeEnabled()) {
                            var galleryInstance = this.$gallery["dxGalleryReportPreview"]("instance");
                            if (this.slideOptions.reachedLeft() && this.isRightMove) {
                                galleryInstance.prevItem();
                            }
                            else if (this.slideOptions.reachedRight() && this.isLeftMove) {
                                galleryInstance.nextItem();
                            }
                        }
                    }
                    if (this.slideOptions.searchPanel.height() >= Preview.MobileSearchViewModel.maxHeight / 2) {
                        this.slideOptions.searchPanel.height(Preview.MobileSearchViewModel.maxHeight);
                    }
                    else {
                        this.slideOptions.searchPanel.height(0);
                    }
                    if (this.slideOptions.searchPanel.height() == Preview.MobileSearchViewModel.maxHeight) {
                        this.slideOptions.isAutoFit(true);
                    }
                    setTimeout(function () { _this.slideOptions.brickEventsDisabled(false); }, 10);
                };
                EventProcessor.prototype.applySearchAnimation = function (value) {
                    var _this = this;
                    if (this.slideOptions.animationSettings.zoomEnabled()) {
                        this.$galleryblocks.addClass("dxrdp-animation");
                        this.$element.addClass("dxrdp-animation");
                        setTimeout(function () {
                            _this.$galleryblocks.removeClass("dxrdp-animation");
                            _this.$element.removeClass("dxrdp-animation");
                        }, 410);
                    }
                    setTransform(this.$galleryblocks, !value ? '' : 'scale(0.92)');
                };
                return EventProcessor;
            })();
            Preview.EventProcessor = EventProcessor;
            ko.bindingHandlers["mobileZoom"] = {
                init: function (element, valueAccessor) {
                    var $element = $(element);
                    var options = valueAccessor();
                    var zoom = options.zoom();
                    $element.on('dxpinch', function (e) {
                        e.stopPropagation();
                        e.preventDefault();
                        var scale = e['scale'];
                        var newZoom = zoom;
                        if (scale > 1) {
                            newZoom += ((scale - 1) / slowdownDisctanceFactor);
                        }
                        else {
                            newZoom -= ((1 - scale) / slowdownDisctanceFactor);
                        }
                        newZoom = Math.max(0.15, Math.min(2, newZoom));
                        options.zoom(newZoom);
                    });
                    $element.on("dxpinchstart", function (e) {
                        e.stopPropagation();
                        e.preventDefault();
                        options.zoomUpdating(true);
                        zoom = options.zoom.peek();
                    });
                    $element.on("dxpinchend", function (e) {
                        e.stopPropagation();
                    });
                }
            };
            function setTransform($element, transform) {
                $element.css({
                    '-webkit-transform': transform,
                    'transform': transform
                });
            }
            ko.bindingHandlers["slide"] = {
                init: function (element, valueAccessor) {
                    var slideOptionsValue = valueAccessor();
                    var isStarted = false;
                    var processor = new EventProcessor(element, slideOptionsValue);
                    processor.$element.on('dxpointerdown', function (e) {
                        processor.start(e);
                        isStarted = true;
                    });
                    processor.$element.on('dxpointermove', function (e) {
                        isStarted && processor.move(e);
                    });
                    ["dxpointercancel", "dxpointerleave", "dxpointerup"].forEach(function (value) {
                        processor.$element.on(value, function (e) {
                            if (isStarted) {
                                processor.end(e);
                                isStarted = false;
                            }
                        });
                    });
                }
            };
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            function getPreviewActionsMobile(preview, exportModel, parametersModel, searchModel) {
                var exportToModel = {
                    visible: ko.observable(false),
                    items: ko.pureComputed(function () {
                        return exportModel._getExportFormatItems().map(function (item) {
                            item.action = function (e) { exportModel._exportDocumentByFormat(e.model && e.model.format); };
                            return item;
                        });
                    })
                };
                return new Preview.MobileActionList([
                    {
                        action: function () {
                            searchModel.searchPanelVisible(true);
                            searchModel.editorVisible(true);
                            searchModel.focusEditor({ element: $('.dxrdp-taptosearch') });
                            preview.actionsVisible(false);
                        },
                        image: "dxrd-image-search-inactive",
                        visible: true
                    },
                    {
                        action: function () { exportToModel.visible(!exportToModel.visible()); },
                        image: "dxrd-image-export-to",
                        visible: true,
                        content: {
                            name: "dxrd-menu-export-content",
                            data: exportToModel
                        }
                    },
                    {
                        action: function () {
                            parametersModel.popupInfo.visible(!parametersModel.popupInfo.visible());
                            preview.actionsVisible(false);
                        },
                        image: "dxrd-image-parameters-inactive",
                        visible: parametersModel.popupInfo.notEmpty
                    }
                ]);
            }
            function updatePreviewContentSizeMobile(previewSize, root, rtl) {
                return function () {
                    var $root = $(root);
                    var $surface = $root.find(".dxrd-preview-wrapper");
                    $surface.css("width", $root.outerWidth());
                    $surface.css("height", $root.outerHeight());
                    previewSize({ height: $root.outerHeight(), width: $root.outerWidth() });
                };
            }
            Preview.updatePreviewContentSizeMobile = updatePreviewContentSizeMobile;
            function createMobilePreview(element, callbacks, parametersInfo, handlerUri, previewVisible, applyBindings, allowURLsWithJSContent, mobileModeSettings) {
                if (previewVisible === void 0) { previewVisible = true; }
                if (applyBindings === void 0) { applyBindings = true; }
                if (allowURLsWithJSContent === void 0) { allowURLsWithJSContent = false; }
                var previewWrapper = new Preview.PreviewRequestWrapper(), reportPreview = new Preview.MobileReportPreview(handlerUri, previewWrapper, undefined, undefined, mobileModeSettings), searchModel = new Preview.MobileSearchViewModel(reportPreview);
                var parametersModel = new Preview.PreviewParametersViewModel(reportPreview, new Preview.PreviewParameterHelper(parametersInfo && parametersInfo.knownEnums, callbacks));
                var exportModel = new Preview.ExportOptionsModel(reportPreview);
                reportPreview.allowURLsWithJSContent = allowURLsWithJSContent;
                previewWrapper.initialize(reportPreview, parametersModel, searchModel);
                var mobileActions = getPreviewActionsMobile(reportPreview, exportModel, parametersModel, searchModel);
                reportPreview.pageIndex.subscribe(function (newVal) { mobileActions.visible(false); });
                reportPreview.actionsVisible = mobileActions.visible;
                var contentSize = ko.observable({ width: 0, height: 0 });
                var updatePreviewContentSize_ = updatePreviewContentSizeMobile(contentSize, element);
                updatePreviewContentSize_();
                var gallery = new Preview.GalleryModel(reportPreview, contentSize);
                var designerModel = {
                    rootStyle: { 'dxrd-preview': true, 'dxrdp-mobile': true },
                    reportPreview: reportPreview,
                    parametersModel: parametersModel,
                    exportModel: exportModel,
                    searchModel: searchModel,
                    rtl: reportPreview.rtlViewer,
                    brickEventsDisabled: ko.observable(false),
                    gallery: gallery,
                    paginator: new Preview.MobilePaginator(reportPreview, gallery),
                    updateSurfaceSize: function () { updatePreviewContentSize_(); }
                };
                designerModel.slideOptions = {
                    readerMode: reportPreview.readerMode,
                    animationSettings: reportPreview.animationSettings,
                    searchPanel: searchModel,
                    topOffset: reportPreview.topOffset,
                    reachedTop: reportPreview.scrollReachedTop,
                    reachedLeft: reportPreview.scrollReachedLeft,
                    reachedRight: reportPreview.scrollReachedRight,
                    scrollAvailable: ko.computed(function () {
                        return !(reportPreview.scrollReachedTop() && reportPreview.scrollReachedLeft()
                            && reportPreview.scrollReachedRight() && reportPreview.scrollReachedBottom());
                    }),
                    swipeEnabled: ko.computed(function () {
                        if (reportPreview.zoomUpdating()) {
                            return false;
                        }
                        if (searchModel.height() > 0 && !searchModel.editorVisible()) {
                            return false;
                        }
                        if (!(reportPreview.scrollReachedLeft() || reportPreview.scrollReachedRight())) {
                            return false;
                        }
                        return true;
                    }),
                    isAutoFit: reportPreview.isAutoFit,
                    galleryIsAnimated: gallery.isAnimated,
                    zoomUpdating: reportPreview.zoomUpdating,
                    brickEventsDisabled: designerModel.brickEventsDisabled
                };
                var parametersPopup = {
                    visible: parametersModel.popupInfo.visible,
                    model: parametersModel,
                    submit: function (params) {
                        var result = params.validationGroup && params.validationGroup.validate && params.validationGroup.validate();
                        if (!result || result.isValid) {
                            parametersModel.submit();
                            parametersModel.popupInfo.visible(false);
                        }
                    },
                    cancelDisabled: ko.computed(function () {
                        return reportPreview._currentDocumentId() === null;
                    }),
                    reset: function () { parametersModel.restore(); },
                    cancel: function () { parametersModel.popupInfo.visible(false); }
                };
                designerModel.parts = [
                    { templateName: 'dxrdp-surface-mobile', model: designerModel.reportPreview },
                    { templateName: 'dxrdp-search-mobile', model: designerModel.searchModel },
                    { templateName: 'dxrdp-pages-mobile', model: designerModel.paginator },
                    { templateName: 'dxrdp-surface-mobile-bottom', model: mobileActions },
                    { templateName: 'dxrd-menu-parameters-content', model: parametersPopup }
                ];
                $(window).bind("resize", function () {
                    updatePreviewContentSize_();
                });
                if (element && !reportPreview.canSwitchToDesigner && applyBindings) {
                    $(element).children().remove();
                    ko.applyBindings(designerModel, element);
                }
                return designerModel;
            }
            Preview.createMobilePreview = createMobilePreview;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var MobilePaginator = (function () {
                function MobilePaginator(reportPreview, gallery) {
                    var _this = this;
                    this.visible = ko.observable(false).extend({ notify: 'always' });
                    this.text = ko.computed(function () {
                        setTimeout(function () { _this.visible(true); }, 1);
                        if (reportPreview.pageIndex() === -1) {
                            return DevExpress.Designer.getLocalization('0 pages');
                        }
                        else {
                            var ofText = DevExpress.Designer.getLocalization('of');
                            var pageText = DevExpress.Designer.getLocalization('Page');
                            return pageText + " " + gallery.currentBlockText() + " " + ofText + " " + reportPreview.pages().length;
                        }
                    });
                }
                return MobilePaginator;
            })();
            Preview.MobilePaginator = MobilePaginator;
            ko.bindingHandlers["dxrdMobilePaginator"] = {
                init: function (element, valueAccessor) {
                    var values = valueAccessor();
                    var $element = $(element);
                    var timeoutId = null;
                    var hideAnimationTimeoutId = null;
                    values.visible.subscribe(function (newVal) {
                        if (newVal) {
                            $element.removeClass("dxrdp-hide").addClass("dxrdp-show");
                            timeoutId && clearTimeout(timeoutId);
                            timeoutId = setTimeout(function () { values.visible(false); }, 2000);
                        }
                        else {
                            $element.removeClass("dxrdp-show").addClass("dxrdp-hide");
                            hideAnimationTimeoutId && clearTimeout(hideAnimationTimeoutId);
                            hideAnimationTimeoutId = setTimeout(function () {
                                $element.removeClass("dxrdp-hide");
                            }, 500);
                        }
                    });
                }
            };
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            function updateBricksPosition(brick, height, width) {
                if (!brick) {
                    return;
                }
                brick[brick.rtl ? 'rightP' : 'leftP'] = Preview.convetToPercent(brick.left, width);
                brick.widthP = Preview.convetToPercent(brick.width, width);
                brick.topP = Preview.convetToPercent(brick.top, height);
                brick.heightP = Preview.convetToPercent(brick.height, height);
                brick.bricks && brick.bricks.forEach(function (childBrick) {
                    updateBricksPosition(childBrick, height, width);
                });
            }
            Preview.updateBricksPosition = updateBricksPosition;
            function initializeBrickMobile(brick, processClick, zoom, editingFieldBricks) {
                if (!brick) {
                    return;
                }
                !!brick.active && !!brick.active(false) || (brick.active = ko.observable(false));
                brick["onClick"] = function () { processClick && processClick(brick); };
                brick.bricks && brick.bricks.forEach(function (childBrick) {
                    childBrick.top += brick.top;
                    childBrick.left += brick.left;
                    initializeBrickMobile(childBrick, processClick, zoom, editingFieldBricks);
                });
                if (brick.efIndex > 0) {
                    editingFieldBricks.push(brick);
                }
                brick.text = function () { return Preview.brickText(brick); };
            }
            Preview.initializeBrickMobile = initializeBrickMobile;
            var MobilePreviewPage = (function (_super) {
                __extends(MobilePreviewPage, _super);
                function MobilePreviewPage(pageIndex, width, height, zoom, documentId, color, brickProvider, loading, processClick, editingFields) {
                    var _this = this;
                    _super.call(this, pageIndex, width, height, zoom, documentId, color, brickProvider, loading, processClick, editingFields);
                    this.bricks = ko.computed(function () {
                        return _this.getBricksFlatList(_this.brick());
                    });
                    this.activeBricks = ko.computed(function () {
                        return _this.bricks().filter(function (x) { return x.active(); });
                    });
                    this.selectBrick = function (path, ctrlKey) {
                        var currentBrick = _this.brick();
                        !ctrlKey && _this.resetBrickRecusive(currentBrick);
                        if (!path) {
                            return;
                        }
                        if (!currentBrick) {
                            _this["_selectedBrickPath"] = path;
                            return;
                        }
                        _this.bricks().forEach(function (brick) { brick.indexes === path && brick.active(true); });
                    };
                }
                MobilePreviewPage.prototype.clickToBrick = function (s, e) {
                    var target = $(e.currentTarget);
                    var offset = target.offset();
                    var xPerc = (e.clientX - offset.left) / target.width() * 100;
                    var yPerc = (e.clientY - offset.top) / target.height() * 100;
                    var bricks = s.bricks();
                    for (var i = 0; i < bricks.length; i++) {
                        if (parseFloat(bricks[i].topP) < yPerc && parseFloat(bricks[i].topP) + parseFloat(bricks[i].heightP) > yPerc
                            && parseFloat(bricks[i].leftP) < xPerc && parseFloat(bricks[i].leftP) + parseFloat(bricks[i].widthP) > xPerc) {
                            bricks[i]["onClick"] && bricks[i]["onClick"]();
                            break;
                        }
                    }
                };
                MobilePreviewPage.prototype.initializeBrick = function (brick, processClick, zoom, editingFieldBricks) {
                    initializeBrickMobile(brick, processClick, this.zoom, editingFieldBricks);
                    updateBricksPosition(brick, brick.height, brick.width);
                    this.brick(brick);
                };
                MobilePreviewPage.prototype.getBricksFlatList = function (brick) {
                    if (brick) {
                        var bricks = [];
                        var innerBricksLength = brick.bricks && brick.bricks.length || 0;
                        for (var i = 0; i < innerBricksLength; i++) {
                            bricks = bricks.concat(this.getBricksFlatList(brick.bricks[i]));
                        }
                        bricks.push(brick);
                        return bricks;
                    }
                    return [];
                };
                return MobilePreviewPage;
            })(Preview.PreviewPage);
            Preview.MobilePreviewPage = MobilePreviewPage;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var MobileReportPreview = (function (_super) {
                __extends(MobileReportPreview, _super);
                function MobileReportPreview(handlerUri, previewRequestWrapper, previewHandlersHelper, rtl, mobileSettings) {
                    var _this = this;
                    if (rtl === void 0) { rtl = false; }
                    if (mobileSettings === void 0) { mobileSettings = { readerMode: true, animationEnabled: true }; }
                    _super.call(this, handlerUri, previewRequestWrapper, previewHandlersHelper, rtl);
                    this.availablePages = ko.observable(null);
                    this.visiblePages = ko.computed(function () {
                        if (!_this.availablePages()) {
                            return _this.pages();
                        }
                        else {
                            return _this.pages().filter(function (x) { return _this.availablePages().indexOf(x.pageIndex) !== -1; });
                        }
                    });
                    this.topOffset = ko.observable(0);
                    this.searchPanelVisible = ko.observable(false);
                    this.actionsVisible = ko.observable(false);
                    this.scrollReachedLeft = ko.observable(false);
                    this.scrollReachedRight = ko.observable(false);
                    this.scrollReachedTop = ko.observable(true);
                    this.scrollReachedBottom = ko.observable(true);
                    this.zoomUpdating = ko.observable(false);
                    this.mobileZoom = ko.computed({
                        read: function () {
                            return _this.zoom() || _this._zoom();
                        },
                        write: function (newVal) {
                            _this.zoom(newVal);
                        }
                    });
                    this.readerMode = mobileSettings.readerMode;
                    var globalAnimationEnabled = mobileSettings.animationEnabled;
                    this.animationSettings = { zoomEnabled: ko.observable(globalAnimationEnabled), swipeEnabled: ko.observable(globalAnimationEnabled) };
                    this.canSwitchToDesigner = false;
                    this.isAutoFit(true);
                    this.showMultipagePreview(true);
                    this.searchPanelVisible.subscribe(function (newVal) {
                        if (newVal) {
                            _this.actionsVisible(false);
                        }
                    });
                }
                MobileReportPreview.prototype.createPage = function (pageIndex, width, height, zoom, documentId, color, brickProvider, loading, processClick) {
                    return new Preview.MobilePreviewPage(pageIndex, width, height, zoom, documentId, color, brickProvider, loading, processClick, this._editingFields);
                };
                MobileReportPreview.prototype.createBrickClickProcessor = function (cyclePageIndex) {
                    var _this = this;
                    var _clickHandler = _super.prototype.createBrickClickProcessor.call(this, cyclePageIndex);
                    var func = function (brick) {
                        if (_this.zoomUpdating())
                            return;
                        if (cyclePageIndex !== _this.pageIndex()) {
                            _this.actionsVisible(false);
                            var supscription = _this.actionsVisible.subscribe(function (newVal) {
                                supscription.dispose();
                                _this.actionsVisible(false);
                            });
                        }
                        _clickHandler(brick);
                    };
                    return func;
                };
                MobileReportPreview.prototype.showActions = function (s) {
                    if (s.zoomUpdating())
                        return;
                    var searchVisible = s.searchPanelVisible();
                    if (!searchVisible) {
                        s.actionsVisible(!s.actionsVisible());
                    }
                    else {
                        s.searchPanelVisible(!searchVisible);
                    }
                };
                MobileReportPreview.prototype.onSlide = function (e) {
                    this.scrollReachedLeft(true);
                    this.scrollReachedRight(true);
                    if (!this.isAutoFit() && e.removedItems && e.removedItems[0].blocks().length === 1 && e.addedItems && e.addedItems[0].blocks().length === 1)
                        this.isAutoFit(true);
                };
                MobileReportPreview.prototype.setScrollReached = function (e) {
                    this.scrollReachedLeft(e.reachedLeft);
                    this.scrollReachedRight(e.reachedRight);
                    this.scrollReachedTop(e.reachedTop);
                    this.scrollReachedBottom(e.reachedBottom);
                };
                return MobileReportPreview;
            })(Preview.ReportPreview);
            Preview.MobileReportPreview = MobileReportPreview;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var MobileSearchViewModel = (function (_super) {
                __extends(MobileSearchViewModel, _super);
                function MobileSearchViewModel(reportPreview) {
                    var _this = this;
                    _super.call(this, reportPreview);
                    this.height = ko.observable(0);
                    this["_resultNavigator"]["_disposables"].forEach(function (x) { x.dispose(); });
                    reportPreview.currentPage.subscribe(function (page) {
                        if (page && _this.searchResult() && _this.searchResult().length > 0) {
                            _this._updateBricks(page, _this.searchResult());
                        }
                    });
                    this._disposables.push(this.searchResult.subscribe(function (newResult) {
                        var currentPage = reportPreview.currentPage();
                        currentPage && currentPage.resetBrickRecusive(currentPage.brick());
                        if (!newResult || newResult.length === 0) {
                            reportPreview.availablePages(null);
                        }
                        else {
                            reportPreview.availablePages(newResult.map(function (x) { return x.pageIndex; }));
                            if (currentPage) {
                                _this._updateBricks(currentPage, _this.searchResult());
                            }
                        }
                    }));
                    this.searchPanelVisible = reportPreview.searchPanelVisible;
                    this.editorVisible = ko.observable(false);
                    this.searchPanelVisible.subscribe(function (newVal) {
                        if (!newVal) {
                            _this.height(0);
                            _this.editorVisible(false);
                            _this.searchResult(null);
                        }
                        else {
                            _this.height(MobileSearchViewModel.maxHeight);
                        }
                    });
                }
                MobileSearchViewModel.prototype.focusEditor = function (s) {
                    if (this.searchPanelVisible()) {
                        this.editorVisible(true);
                        var previewSearch = $(".dxrdp-search-editor");
                        var searchEditor = previewSearch.data("dxTextBox") && previewSearch["dxTextBox"]("instance");
                        setTimeout(function () {
                            s.element.blur();
                            searchEditor.focus();
                        }, 1);
                    }
                };
                MobileSearchViewModel.prototype._updateBricks = function (page, searchResult) {
                    var _this = this;
                    if (page.brick() && searchResult && searchResult.length > 0) {
                        var results = searchResult.filter(function (x) { return x.pageIndex === page.pageIndex; });
                        for (var i = 0; i < results.length; i++) {
                            page.selectBrick(results[i].indexes, true);
                        }
                    }
                    else {
                        var subscription = page.brick.subscribe(function (newVal) {
                            subscription.dispose();
                            _this._updateBricks(page, _this.searchResult());
                        });
                    }
                };
                MobileSearchViewModel.maxHeight = 80;
                return MobileSearchViewModel;
            })(Preview.SearchViewModel);
            Preview.MobileSearchViewModel = MobileSearchViewModel;
            ko.bindingHandlers["dxrdSearchBar"] = {
                init: function (element, valueAccessor) {
                    var viewModel = ko.unwrap(valueAccessor());
                    var $element = $(element);
                    element.style.display = "none";
                    var $searchText = $element.find('.dxrdp-taptosearch-text');
                    viewModel.height.subscribe(function (newValue) {
                        if (!newValue) {
                            element.style.display = "none";
                        }
                        else {
                            element.style.display = "block";
                        }
                        $searchText.css({
                            'opacity': Math.min((newValue / MobileSearchViewModel.maxHeight), 1)
                        });
                    });
                }
            };
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var MobileActionList = (function () {
                function MobileActionList(actions) {
                    this.actions = actions;
                    this.visible = ko.observable(false);
                }
                return MobileActionList;
            })();
            Preview.MobileActionList = MobileActionList;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var InteractiveMenu = (function () {
                function InteractiveMenu(items, $_element) {
                    this.items = items;
                    this.$_element = $_element;
                    this.collectionVisible = ko.observable(false);
                    this.$_itemsContainer = this.$_element.find(".dx-circle-menu-container");
                }
                InteractiveMenu.prototype.hideContent = function () {
                    if (!!this.$_hideDiv) {
                        this.$_hideDiv.remove();
                        this.$_hideDiv = null;
                    }
                    else {
                        this.$_hideDiv = $("<div>").css({
                            bottom: 0,
                            left: 0,
                            right: 0,
                            top: 0,
                            "z-index": 100,
                            "background": "black",
                            "opacity": "0.3",
                            "position": "absolute"
                        }).appendTo($("body"));
                        this.$_element.zIndex(101);
                        this.$_hideDiv.focus(function () {
                            this.$_hideDiv.remove();
                            this.$_hideDiv = null;
                        });
                    }
                };
                InteractiveMenu.prototype.fade = function (delay, item, opacity) {
                    setTimeout(function () {
                        item.css("opacity", opacity);
                    }, delay);
                };
                InteractiveMenu.prototype.changeMenuItemVisible = function () {
                    var _this = this;
                    this.hideContent();
                    if (!this.collectionVisible()) {
                        this.collectionVisible(true);
                        setTimeout(function () {
                            var $items = _this.$_itemsContainer.find(".dx-circle-menu-item");
                            for (var i = $items.length - 1; i >= 0; i--) {
                                _this.fade(($items.length - i - 1) * 30, $items.eq(i), 1);
                            }
                        }, 10);
                    }
                    else {
                        var $items = this.$_itemsContainer.find(".dx-circle-menu-item");
                        for (var i = 0; i < $items.length; i++) {
                            this.fade(i * 15, $items.eq(i), 0);
                        }
                        setTimeout(function () {
                            _this.collectionVisible(false);
                        }, 250 + $items.length * 30);
                    }
                };
                return InteractiveMenu;
            })();
            Preview.InteractiveMenu = InteractiveMenu;
            ko.bindingHandlers['dxCircleMenu'] = {
                init: function (element, valueAccessor) {
                    $(element).children().remove();
                    var templateHtml = $('#dx-circle-menu').text(), $element = $(element).append(templateHtml), values = valueAccessor();
                    ko.applyBindings(new InteractiveMenu(values.options, $element), $element.children()[0]);
                    return { controlsDescendantBindings: true };
                }
            };
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var GalleryModel = (function () {
                function GalleryModel(preview, containerSize) {
                    var _this = this;
                    this.preview = preview;
                    this.containerSize = containerSize;
                    this._spacing = 1;
                    this._animationTimeout = null;
                    this.horizontal = ko.observable(1);
                    this.vertical = ko.observable(1);
                    this.pageCount = 0;
                    this.isAnimated = ko.observable(false);
                    this.items = ko.observableArray([{ blocks: ko.observableArray([]) }, { blocks: ko.observableArray([]) }, { blocks: ko.observableArray([]) }]);
                    this.currentBlockText = ko.observable("");
                    this.selectedIndexReal = ko.observable(0);
                    this.selectedIndex = ko.observable(0);
                    var oldIndex = this.selectedIndex();
                    this.animationEnabled = preview.animationSettings.swipeEnabled;
                    var _calcHorizontalVertical = function () {
                        var pageHeight = Math.ceil(preview._pageHeight() * Preview.getCurrentResolution(preview._zoom()) / Preview.previewDefaultResolution);
                        var pageWidth = Math.ceil(preview._pageWidth() * Preview.getCurrentResolution(preview._zoom()) / Preview.previewDefaultResolution);
                        _this.horizontal(Math.floor(containerSize().width / (pageWidth + 2 * _this._spacing)) || 1);
                        _this.vertical(Math.floor(containerSize().height / (pageHeight + 2 * _this._spacing)) || 1);
                    };
                    var updateGalleryContent = function () {
                        _calcHorizontalVertical();
                        _this.updateContent(preview, _this.horizontal() * _this.vertical());
                    };
                    containerSize.subscribe(updateGalleryContent);
                    preview.visiblePages.subscribe(function () {
                        for (var i = 0; i < _this.items().length; i++) {
                            _this.items()[i].blocks([]);
                            _this.items()[i].realIndex = -1;
                        }
                        updateGalleryContent();
                    });
                    preview.pageIndex.subscribe(updateGalleryContent);
                    preview._zoom.subscribe(function () {
                        _calcHorizontalVertical();
                        if (_this.pageCount !== _this.horizontal() * _this.vertical()) {
                            _this.pageCount = _this.horizontal() * _this.vertical();
                            _this.updateContent(preview, _this.horizontal() * _this.vertical());
                        }
                    });
                    this.selectedIndexReal.subscribe(function (newVal) {
                        if (newVal >= 0) {
                            _this.changePage(preview);
                        }
                        else if (newVal < 0) {
                            _this.selectedIndexReal(0);
                        }
                    });
                    this.selectedIndex.subscribe(function (newVal) {
                        var result = newVal - oldIndex;
                        if (result === -2 || result === 1) {
                            _this.selectedIndexReal(_this.selectedIndexReal() + 1);
                        }
                        else if (result === 2 || result === -1) {
                            _this.selectedIndexReal(_this.selectedIndexReal() - 1);
                        }
                        oldIndex = newVal;
                    });
                    this.swipeLeftEnable = ko.computed(function () {
                        return _this.selectedIndexReal() !== 0;
                    });
                    this.swipeRightEnable = ko.computed(function () {
                        return _this.selectedIndexReal() != (Math.ceil(preview.visiblePages().length / (_this.horizontal() * _this.vertical())) - 1);
                    });
                }
                GalleryModel.prototype._createBlock = function (previewPage, className, visible) {
                    previewPage.disableResolutionReduction = true;
                    previewPage.maxZoom = 1;
                    var classSet = {};
                    if (this.animationEnabled()) {
                        classSet[className] = true;
                        classSet["dxrdp-animation"] = true;
                    }
                    return {
                        page: previewPage,
                        visible: visible,
                        classSet: classSet,
                        position: ko.observable({ top: 0, left: 0, width: 0, height: 0 })
                    };
                };
                GalleryModel.prototype.updatePagesVisible = function (preview) {
                    if (this.items()[this.selectedIndex()]) {
                        var someActive = false;
                        var pages = this.items()[this.selectedIndex()].blocks();
                        if (pages.length > 0) {
                            for (var i = 0; i < pages.length; i++) {
                                if (pages[i].page) {
                                    pages[i].page.isClientVisible(true);
                                    if (pages[i].page.active()) {
                                        someActive = true;
                                    }
                                }
                                ;
                            }
                            if (!someActive) {
                                pages[0].page && preview.goToPage(pages[0].page.pageIndex);
                            }
                        }
                    }
                };
                GalleryModel.prototype.updateCurrentBlock = function () {
                    if (this.items()[this.selectedIndex()]) {
                        var blocks = this.items()[this.selectedIndex()].blocks();
                        if (blocks.length > 0) {
                            if (blocks.length > 1) {
                                this.currentBlockText([blocks[0].page.pageIndex + 1, blocks[blocks.length - 1].page.pageIndex + 1].join(" - "));
                            }
                            else {
                                if (blocks[0].page) {
                                    this.currentBlockText((blocks[0].page.pageIndex + 1).toString());
                                }
                            }
                        }
                    }
                };
                GalleryModel.prototype.updateContent = function (preview, pagesCount) {
                    var itemsCount = Math.ceil(preview.visiblePages().length / pagesCount);
                    var pageIndex = 0;
                    var isCurrentBlock = false;
                    var realIndex = 0;
                    for (var i = 0; i < itemsCount; i++) {
                        for (var j = 0; j < pagesCount; j++) {
                            if (preview.visiblePages()[pageIndex].active()) {
                                isCurrentBlock = true;
                                realIndex = i;
                                break;
                            }
                            pageIndex++;
                            if (preview.visiblePages().length === pageIndex) {
                                break;
                            }
                        }
                        if (isCurrentBlock)
                            break;
                    }
                    if (this.selectedIndexReal() !== realIndex) {
                        this.selectedIndexReal(realIndex);
                    }
                    else {
                        this.changePage(preview);
                    }
                };
                GalleryModel.prototype.updateBlockPositions = function (blocks, visible) {
                    var height = this.containerSize().height / this.vertical();
                    var width = this.containerSize().width / this.horizontal();
                    for (var i = 0; i < blocks.length; i++) {
                        var vertical = Math.floor((i) / this.horizontal());
                        var horizontal = i - (this.horizontal() * vertical);
                        var left = horizontal * width;
                        if (blocks[i].visible === visible || blocks[i].visible === true) {
                            blocks[i].position({
                                top: vertical * height,
                                left: left,
                                width: width,
                                height: height
                            });
                            blocks[i].visible = true;
                        }
                        else {
                            blocks[i].position({
                                top: vertical * height,
                                left: blocks[i].classSet["left"] ? ((this.containerSize().width + left) * -1) : this.containerSize().width + left,
                                width: width,
                                height: height
                            });
                        }
                    }
                };
                GalleryModel.prototype.updateStartBlocks = function (galleryItem, pages) {
                    var currentBlockPages = galleryItem.blocks().map(function (x) { return x.page; });
                    var firstPage = pages.indexOf(currentBlockPages[0]);
                    if (firstPage !== -1) {
                        for (var i = 0; i < firstPage; i++) {
                            galleryItem.blocks.splice(i, 0, this._createBlock(pages[i], "left", false));
                        }
                    }
                    else {
                        firstPage = currentBlockPages.indexOf(pages[0]);
                        if (firstPage !== -1) {
                            galleryItem.blocks.splice(0, firstPage);
                        }
                    }
                    return firstPage;
                };
                GalleryModel.prototype.updateLastBlocks = function (galleryItem, pages) {
                    var currentBlockPages = galleryItem.blocks().map(function (x) { return x.page; });
                    var lastPage = pages.indexOf(currentBlockPages[currentBlockPages.length - 1]);
                    if (lastPage === pages.length - 1) {
                        return 0;
                    }
                    if (lastPage !== -1) {
                        for (var i = lastPage + 1; i < pages.length; i++) {
                            galleryItem.blocks.splice(i, 0, this._createBlock(pages[i], "right", false));
                        }
                    }
                    else {
                        lastPage = currentBlockPages.indexOf(pages[pages.length - 1]);
                        galleryItem.blocks.splice(lastPage + 1, currentBlockPages.length - lastPage);
                    }
                    return lastPage;
                };
                GalleryModel.prototype.updateBlocks = function (galleryItem, pagesCount, preview, index, useAnimation) {
                    if (useAnimation === void 0) { useAnimation = false; }
                    if (galleryItem.realIndex !== index || (galleryItem.blocks().length !== pagesCount || galleryItem.blocks()[0].page.pageIndex === -1)) {
                        galleryItem.realIndex = index;
                        clearTimeout(this._animationTimeout);
                        var startIndex = pagesCount * index;
                        if (startIndex < 0 || startIndex >= preview.visiblePages().length) {
                            galleryItem.blocks([]);
                            return;
                        }
                        var pages = [];
                        for (var i = startIndex; i < startIndex + pagesCount; i++) {
                            if (i >= preview.visiblePages().length) {
                                break;
                            }
                            pages.push(preview.visiblePages()[i]);
                        }
                        var first = this.updateStartBlocks(galleryItem, pages);
                        var last = this.updateLastBlocks(galleryItem, pages);
                        if (first === -1 && last === -1) {
                            galleryItem.blocks([]);
                            for (var i = 0; i < pages.length; i++) {
                                galleryItem.blocks.splice(i, 0, this._createBlock(pages[i], null, true));
                            }
                        }
                        this.updateBlockPositions(galleryItem.blocks(), true);
                        var self = this;
                        if (useAnimation) {
                            this._animationTimeout = setTimeout(function () {
                                self.updateBlockPositions(galleryItem.blocks(), false);
                            }, 400);
                        }
                        else {
                            self.updateBlockPositions(galleryItem.blocks(), false);
                        }
                    }
                };
                GalleryModel.prototype.changePage = function (preview) {
                    var pagesCount = this.horizontal() * this.vertical();
                    var itemsCount = Math.ceil(preview.visiblePages().length / pagesCount);
                    if (this.selectedIndex() === this.items().length - 1) {
                        this.updateBlocks(this.items()[0], pagesCount, preview, this.selectedIndexReal() + 1);
                        this.updateBlocks(this.items()[1], pagesCount, preview, this.selectedIndexReal() - 1);
                    }
                    else if (this.selectedIndex() === 0) {
                        this.updateBlocks(this.items()[2], pagesCount, preview, this.selectedIndexReal() - 1);
                        this.updateBlocks(this.items()[1], pagesCount, preview, this.selectedIndexReal() + 1);
                    }
                    else {
                        this.updateBlocks(this.items()[0], pagesCount, preview, this.selectedIndexReal() - 1);
                        this.updateBlocks(this.items()[2], pagesCount, preview, this.selectedIndexReal() + 1);
                    }
                    var currentGalleryItem = this.items()[this.selectedIndex()];
                    this.updateBlocks(currentGalleryItem, pagesCount, preview, this.selectedIndexReal(), preview.animationSettings.zoomEnabled());
                    if (!this.isAnimated()) {
                        this.updatePagesVisible(preview);
                    }
                    this.updateCurrentBlock();
                };
                return GalleryModel;
            })();
            Preview.GalleryModel = GalleryModel;
            var dxGalleryReportPreview = (function (_super) {
                __extends(dxGalleryReportPreview, _super);
                function dxGalleryReportPreview(element, options) {
                    _super.call(this, element, options);
                    this._animationClassName = "dxrdp-gallery-item-animation";
                    this.blockItems = [];
                    this.currentBlockItem = null;
                    this.nextBlockItem = null;
                    var $items = this["_getAvailableItems"]();
                    for (var i = 0; i < $items.length; i++) {
                        this.blockItems.push({
                            element: $($items[i]),
                            left: parseFloat($items[i]["style"].left)
                        });
                    }
                    this.gallery = this["option"]("gallery");
                }
                dxGalleryReportPreview.prototype._swipeStartHandler = function (e) {
                    _super.prototype._swipeStartHandler.call(this, e);
                    var swipeRightEnable = this.gallery.swipeRightEnable();
                    var swipeLeftEnable = this.gallery.swipeLeftEnable();
                    if (!swipeRightEnable || !swipeLeftEnable) {
                        var selectedIndex = swipeRightEnable ? 0 : 2;
                        var startOffset = 3 - selectedIndex - 1, endOffset = selectedIndex;
                        if (!swipeRightEnable && !swipeLeftEnable) {
                            startOffset = 0;
                            endOffset = 0;
                        }
                        e.jQueryEvent.maxLeftOffset = startOffset;
                        e.jQueryEvent.maxRightOffset = endOffset;
                    }
                    this.gallery.isAnimated(true);
                    if (this.gallery.animationEnabled()) {
                        this.currentBlockItem && this.currentBlockItem.element.removeClass(this._animationClassName);
                        this.nextBlockItem && this.nextBlockItem.element.removeClass(this._animationClassName);
                    }
                };
                dxGalleryReportPreview.prototype._getNextIndex = function (offset) {
                    var index = this.gallery.selectedIndex();
                    if (offset < 0) {
                        if (index === 2) {
                            index = 0;
                        }
                        else {
                            index++;
                        }
                    }
                    else {
                        if (index === 0) {
                            index = 2;
                        }
                        else {
                            index--;
                        }
                    }
                    return index;
                };
                dxGalleryReportPreview.prototype._setSwipeAnimation = function (element, difference, offset, right) {
                    var diffperc = 100 * offset / 4;
                    var newLeft = "0%";
                    if (right) {
                        newLeft = (element.left + diffperc) + "%";
                    }
                    else {
                        newLeft = (element.left - diffperc) + "%";
                    }
                    element.element.css({
                        "opacity": difference,
                        "transform": "scale(" + difference + ")",
                        "left": newLeft
                    });
                };
                dxGalleryReportPreview.prototype._addAnimation = function (item) {
                    if (item) {
                        if (this.gallery.animationEnabled()) {
                            item.element.addClass(this._animationClassName);
                        }
                    }
                };
                dxGalleryReportPreview.prototype._restoreDefault = function (item) {
                    if (item) {
                        item.element.css({
                            "opacity": 1,
                            "transform": "scale(" + 1 + ")",
                            "left": item.left + "%"
                        });
                    }
                };
                dxGalleryReportPreview.prototype._getItem = function (index, loopTest) {
                    var realIndex = index;
                    var currentBlockIndex = this.blockItems.indexOf(this.currentBlockItem);
                    if (loopTest) {
                        if (currentBlockIndex === 2 && index === 0) {
                            realIndex = 3;
                        }
                        else if (currentBlockIndex === 0 && index === 2) {
                            realIndex = 4;
                        }
                    }
                    var item = this.blockItems[realIndex];
                    if (this.gallery.animationEnabled()) {
                        item.element.removeClass(this._animationClassName);
                    }
                    return item;
                };
                dxGalleryReportPreview.prototype._swipeUpdateHandler = function (e) {
                    _super.prototype._swipeUpdateHandler.call(this, e);
                    var offset = e.jQueryEvent.offset;
                    var nextIndex = this._getNextIndex(offset);
                    var currentIndex = this.gallery.selectedIndex();
                    var currentBlockIndex = this.blockItems.indexOf(this.currentBlockItem);
                    var nextBlockIndex = this.blockItems.indexOf(this.nextBlockItem);
                    if (!this.currentBlockItem || currentBlockIndex !== currentIndex) {
                        this.currentBlockItem = this._getItem(currentIndex, false);
                    }
                    if (!this.nextBlockItem || nextBlockIndex !== nextIndex) {
                        this.nextBlockItem = this._getItem(nextIndex, true);
                    }
                    if (this.gallery.animationEnabled()) {
                        offset = Math.abs(offset);
                        var right = (nextIndex - currentIndex === 1) || (currentIndex === 2 && nextIndex === 0);
                        this._setSwipeAnimation(this.currentBlockItem, Math.min(1, (1 - offset)), offset, right);
                        this._setSwipeAnimation(this.nextBlockItem, Math.min(1, offset * 1.5), offset, !right);
                    }
                };
                dxGalleryReportPreview.prototype._swipeEndHandler = function (e) {
                    _super.prototype._swipeEndHandler.call(this, e);
                    if (this.gallery.animationEnabled()) {
                        for (var i = 0; i < this.blockItems.length; i++) {
                            if (this.blockItems[i] === this.currentBlockItem || this.blockItems[i] === this.nextBlockItem) {
                                this._addAnimation(this.blockItems[i]);
                            }
                            this._restoreDefault(this.blockItems[i]);
                        }
                    }
                    else {
                        this.gallery.isAnimated(false);
                        this.gallery.updatePagesVisible(this.gallery.preview);
                    }
                };
                dxGalleryReportPreview.prototype._endSwipe = function () {
                    _super.prototype._endSwipe.apply(this, arguments);
                    this.gallery.isAnimated(false);
                    this.gallery.updatePagesVisible(this.gallery.preview);
                };
                return dxGalleryReportPreview;
            })(DevExpress.ui.dxGallery);
            Preview.dxGalleryReportPreview = dxGalleryReportPreview;
            DevExpress.registerComponent("dxGalleryReportPreview", dxGalleryReportPreview);
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            ko.bindingHandlers["toView"] = {
                init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var $previewPage = $(element), $container = $previewPage.parent(".dxrd-report-preview-holder"), pageActive = valueAccessor().active, subscription = pageActive.subscribe(function (active) {
                        if (active) {
                            var pageTop = $previewPage.position().top;
                            if (pageTop < 0 && (pageTop + $previewPage.height() < 0) || pageTop >= $container.height()) {
                                $container.scrollTop($container.scrollTop() + pageTop);
                            }
                        }
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        subscription.dispose();
                    });
                }
            };
            ko.bindingHandlers["lazyImages"] = {
                init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var $element = $(element), enabled = valueAccessor().enabled, loadVisibleImages = function () {
                        if (!enabled()) {
                            return;
                        }
                        var visibleArea = $element.height() + 100;
                        for (var i = 0; i < element.children.length; i++) {
                            var previewPage = element.children[i], rect = previewPage.getBoundingClientRect(), pageTop = rect.top;
                            if (visibleArea > pageTop && pageTop >= 0 || pageTop < 0 && pageTop + rect.height > -100) {
                                var previewPageModel = ko.dataFor(previewPage);
                                previewPageModel && previewPageModel.isClientVisible && previewPageModel.isClientVisible(true);
                            }
                        }
                    };
                    if (ko.isObservable(valueAccessor().updateCallback)) {
                        valueAccessor().updateCallback(loadVisibleImages);
                    }
                    var load;
                    var throttledLoad = function () {
                        if (load) {
                            clearTimeout(load);
                        }
                        load = setTimeout(function () { loadVisibleImages(); load = undefined; }, 700);
                    };
                    var subscribtion = enabled.subscribe(function (newVal) {
                        if (newVal) {
                            loadVisibleImages();
                        }
                    });
                    $element.on("scroll", throttledLoad);
                    setTimeout(loadVisibleImages, 500);
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        $element.off("scroll", throttledLoad);
                        subscribtion.dispose();
                    });
                }
            };
            ko.bindingHandlers["brick-selection"] = {
                update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var values = valueAccessor(), unwrappedValues = ko.unwrap(values);
                    var $element = $(element);
                    if ($element.selectable('instance')) {
                        return;
                    }
                    var touchEventName = 'touchstart', touchStartHandler = function (e) {
                        $element.selectable("destroy");
                        element.removeEventListener(touchEventName, touchStartHandler);
                    }, selectBrick = unwrappedValues.selectBrick, toggleBrickSelection = function (el, ctrl) {
                        if (el) {
                            var brick = ko.dataFor(el);
                            if (brick && brick.active) {
                                brick.active(ctrl || !brick.active());
                            }
                        }
                    }, resetBrickSelection = function (el) {
                        if (el) {
                            var brick = ko.dataFor(el);
                            if (brick && brick.active) {
                                brick.active(false);
                            }
                        }
                    }, options = $.extend({ filter: '.dxrd-report-preview-brick-selectable', distance: 5 }, unwrappedValues, {
                        selecting: function (event, ui) {
                            toggleBrickSelection(ui.selecting, event.ctrlKey);
                        },
                        start: function (event, ui) {
                            window.focus();
                            var focusedInput = $('input:focus,textarea:focus');
                            focusedInput[0] && focusedInput.blur();
                            selectBrick && selectBrick("", event.ctrlKey);
                        },
                        unselecting: function (event, ui) {
                            resetBrickSelection(ui.unselecting);
                        }
                    });
                    $element.selectable(options);
                    element.addEventListener(touchEventName, touchStartHandler, false);
                    element.addEventListener("mouseup", function (e) {
                        var $target = $(e.target);
                        var isTargetElementFocusable = $target.is(":focusable") || $target.closest(".dxrp-editing-field-container").length > 0;
                        if (!isTargetElementFocusable) {
                            var ieVersion = getInternetExplorerVersion();
                            if (ieVersion > -1 && ieVersion <= 10) {
                                $("body").focus();
                            }
                            else {
                                $(":focus").blur();
                            }
                        }
                    }, false);
                }
            };
            ko.bindingHandlers["textCopier"] = {
                init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var keyDownHandler = function (e) {
                        var value = viewModel.getSelectedContent();
                        if (!value || !(e.ctrlKey || e.metaKey)
                            || $(e.target).is("input:visible,textarea:visible")
                            || window.getSelection && window.getSelection() && window.getSelection().toString()
                            || document["selection"] && document["selection"].createRange().text) {
                            return;
                        }
                        var $clipboardContainer = $("#clipboard-container");
                        $clipboardContainer.empty().show();
                        $("<textarea id='clipboard'></textarea>").val(value)
                            .appendTo($clipboardContainer)
                            .focus()
                            .select();
                    };
                    var keyUpHandler = function (e) {
                        if ($(e.target).is("#clipboard")) {
                            $("#clipboard-container").empty().hide();
                        }
                    };
                    $(document).on("keydown", keyDownHandler);
                    $(document).on("keyup", keyUpHandler);
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        $(document).off("keydown", keyDownHandler);
                        $(document).off("keyup", keyUpHandler);
                    });
                }
            };
            ko.bindingHandlers["autoFit"] = {
                init: function (element, valueAccessor) {
                    var options = valueAccessor();
                    var subscriptions = [];
                    var updateZoom = function (newOptions) {
                        if (newOptions.isAutoFit() && ((!newOptions.brickLoading || (newOptions.brickLoading && !newOptions.brickLoading())) || options.alwaysRecalculate)) {
                            var newZoom = Math.floor(Preview.updatePreviewZoomWithAutoFit(newOptions.width(), newOptions.height(), element, newOptions.resolution) * 100) / 100;
                            newOptions.zoom(Math.max(newZoom, 0.1));
                        }
                    };
                    updateZoom(options);
                    var onResize = function () {
                        updateZoom(options);
                    };
                    $(window).bind("resize", onResize);
                    var subscribe = function (value) {
                        if (value) {
                            subscriptions.push(value.subscribe(function (newVal) {
                                updateZoom(options);
                            }));
                        }
                    };
                    subscribe(options.rightPanelWidth);
                    subscribe(options.width);
                    subscribe(options.height);
                    subscribe(options.isAutoFit);
                    subscribe(options.brickLoading);
                    subscribe(options.previewSize);
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        $(window).unbind("resize", onResize);
                        subscriptions.forEach(function (subscription) {
                            subscription.dispose();
                        });
                    });
                }
            };
            ko.bindingHandlers['dxReportViewer'] = {
                init: function (element, valueAccessor) {
                    var $element = $(element), values = ko.unwrap(valueAccessor()) || {}, getDesignerTemplate = function () { return $('#dxrd-designer').text(); }, templateHtml = getDesignerTemplate(), processBinding = function () {
                        if (!templateHtml)
                            templateHtml = getDesignerTemplate();
                        $element.children().remove();
                        var child = $element.append(templateHtml).children()[0];
                        if (!child)
                            return;
                        ko.cleanNode(child);
                        var viewerModel = ko.isWriteableObservable(values.viewerModel) ? values.viewerModel : ko.observable(null);
                        if (!values.reportPreview || !values.parts) {
                            var model = DevExpress.Report.Preview.createAndInitPreviewModel(values, element, values.callbacks, false);
                            viewerModel(model);
                        }
                        else {
                            viewerModel(values);
                        }
                        ko.applyBindings(viewerModel, child);
                    };
                    if (!templateHtml) {
                        DevExpress.Designer.loadTemplates().done(processBinding);
                    }
                    else {
                        processBinding();
                    }
                    return { controlsDescendantBindings: true };
                }
            };
            function getInternetExplorerVersion() {
                var rv = -1;
                if (navigator.appName == 'Microsoft Internet Explorer') {
                    var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
                    if (re.exec(navigator.userAgent) != null)
                        rv = parseFloat(RegExp.$1);
                }
                else if (navigator.appName == 'Netscape') {
                    var re = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
                    if (re.exec(navigator.userAgent) != null)
                        rv = parseFloat(RegExp.$1);
                }
                return rv;
            }
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var PreviewHandlersHelper = (function () {
                function PreviewHandlersHelper(preview) {
                    this._preview = preview;
                }
                PreviewHandlersHelper.prototype.doneStartExportHandler = function (deffered, printable, response) {
                    var _this = this;
                    try {
                        if (!response) {
                            this._preview.progressBar.complete();
                            return;
                        }
                        this._preview._currentOperationId(response);
                        var doGetExportStatus = function (operationId) {
                            var promise = _this._preview.getExportStatus(operationId);
                            promise.done(function (result) {
                                if (result && result.requestAgain) {
                                    _this._preview.progressBar && _this._preview.progressBar.progress(result.progress);
                                    doGetExportStatus(operationId);
                                }
                                else {
                                    _this._preview.progressBar.complete();
                                    if (!result.requestAgain && result.completed) {
                                        _this._preview.getExportResult(operationId, printable);
                                    }
                                    if (result.error) {
                                        _this._preview._processError(DevExpress.Designer.getLocalization("Error on retrieving an exporting status: ") + result.error);
                                        return;
                                    }
                                }
                            });
                        };
                        doGetExportStatus(this._preview._currentOperationId());
                    }
                    finally {
                        deffered.resolve(true);
                        this._preview._startBuildOperationId = "";
                    }
                };
                PreviewHandlersHelper.prototype.errorStartExportHandler = function (deffered, error) {
                    this._preview.progressBar.complete();
                    if (error) {
                        this._preview._processError(DevExpress.Designer.getLocalization("An error occurred during the export"), error);
                    }
                };
                PreviewHandlersHelper.prototype.doneExportStatusHandler = function (deffered, operationId, response) {
                    try {
                        if (!response) {
                            deffered.resolve({ requestAgain: false });
                            this._preview.progressBar.complete();
                            return;
                        }
                        if (response.faultMessage) {
                            deffered.resolve({ requestAgain: false, error: response.faultMessage });
                            this._preview._processError(response.faultMessage, null);
                            this._preview.progressBar.complete();
                            return;
                        }
                        this._preview.progressBar && this._preview.progressBar.progress() < response.progress && this._preview.progressBar.progress(response.progress);
                        deffered.resolve(response);
                    }
                    finally {
                        if (!deffered.state || deffered.state() === "pending") {
                            deffered.resolve({ requestAgain: false });
                        }
                    }
                };
                PreviewHandlersHelper.prototype.errorExportStatusHandler = function (deffered, error) {
                    this._preview.progressBar.complete();
                    deffered.resolve({ requestAgain: false, created: false });
                    this._preview._processError(DevExpress.Designer.getLocalization("Error obtaining an export status"), error);
                };
                PreviewHandlersHelper.prototype.doneStartBuildHandler = function (deffered, response) {
                    var _this = this;
                    try {
                        var removeAllEmptyPages = function (all) {
                            all && _this._preview.pages.removeAll();
                            _this._preview.removeEmptyPages();
                        };
                        if (!response || !response.documentId) {
                            this._preview.progressBar.complete();
                            removeAllEmptyPages();
                            return;
                        }
                        var stopBuildRequest = this._preview._stopBuildRequests[this._preview._startBuildOperationId];
                        var closeDocumentRequest = this._preview._closeDocumentRequests[this._preview._startBuildOperationId];
                        if (this._preview._startBuildOperationId && (stopBuildRequest || closeDocumentRequest)) {
                            if (closeDocumentRequest) {
                                closeDocumentRequest && this._preview.closeDocument(response.documentId);
                            }
                            else {
                                stopBuildRequest && this._preview.stopBuild(response.documentId);
                            }
                            this._preview.progressBar.complete();
                            removeAllEmptyPages();
                            return;
                        }
                        this._preview._currentDocumentId(response.documentId);
                        var doGetBuildStatus = this._preview.getDoGetBuildStatusFunc();
                        doGetBuildStatus(this._preview._currentDocumentId());
                    }
                    finally {
                        deffered.resolve(true);
                        this._preview._startBuildOperationId = "";
                    }
                };
                PreviewHandlersHelper.prototype.errorStartBuildHandler = function (deffered, error, startBuildOperationId) {
                    this._preview.pageLoading(false);
                    this._preview.progressBar.complete();
                    deffered.resolve(true);
                    this._preview._startBuildOperationId = "";
                    this._preview.removeEmptyPages();
                    if (!this._preview._closeDocumentRequests[startBuildOperationId])
                        this._preview._processError(DevExpress.Designer.getLocalization("Cannot create a document for the current report"), error);
                };
                PreviewHandlersHelper.prototype.errorGetBuildStatusHandler = function (deffered, error, ignoreError) {
                    deffered.resolve({ requestAgain: false, created: false });
                    if (!ignoreError())
                        this._preview._processError(DevExpress.Designer.getLocalization("Error obtaining a build status"), error);
                };
                PreviewHandlersHelper.prototype.doneGetBuildStatusHandler = function (deffered, documentId, response, stopProcessingPredicate) {
                    var _this = this;
                    try {
                        if (!response) {
                            deffered.resolve({ requestAgain: false });
                            return;
                        }
                        if (response.faultMessage) {
                            deffered.resolve({ requestAgain: false, pageCount: -1, error: response.faultMessage });
                            if (!stopProcessingPredicate())
                                this._preview._processError(response.faultMessage, null);
                            return;
                        }
                        this._preview.progressBar.progress() < response.progress && !this._preview._stopBuildRequests[documentId] && !stopProcessingPredicate()
                            && this._preview.progressBar.progress(response.progress);
                        var wereNoPagesAndNewOnesExist = this._preview.pageIndex() === -1 && response.pageCount > 0;
                        if (wereNoPagesAndNewOnesExist) {
                            this._preview.pageIndex(0);
                        }
                        var brickProvider = this._preview.getPreviewPageBrickProvider(Preview.HandlerUri, documentId);
                        for (var i = 0; i < response.pageCount && !this._preview._stopBuildRequests[documentId] && !stopProcessingPredicate(); i++) {
                            var createNewPage = function (index) {
                                return _this._preview.createPage(index, _this._preview._pageWidth, _this._preview._pageHeight, _this._preview._zoom, _this._preview._currentDocumentId, _this._preview._pageBackColor.peek(), brickProvider, null, _this._preview.createBrickClickProcessor(index));
                            };
                            if (i < this._preview.pages().length) {
                                var page = this._preview.pages()[i];
                                if (!page || page.isEmpty) {
                                    page = createNewPage(i);
                                    this._preview.pages.splice(i, 1, page);
                                }
                                if (page.pageIndex === -1) {
                                    page.pageIndex = i;
                                    page.brickProvider = brickProvider;
                                }
                            }
                            else {
                                var newPage = createNewPage(i);
                                this._preview.pages.push(newPage);
                            }
                        }
                        this._preview._raiseOnSizeChanged();
                        if (wereNoPagesAndNewOnesExist) {
                            var pageIndex = this._preview.pages().length ? 0 : -1;
                            this._preview.goToPage(pageIndex, true);
                        }
                        deffered.resolve(response);
                    }
                    finally {
                        if (deffered.state() === "pending") {
                            deffered.resolve({ requestAgain: false });
                        }
                    }
                };
                return PreviewHandlersHelper;
            })();
            Preview.PreviewHandlersHelper = PreviewHandlersHelper;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var ProgressViewModel = (function () {
                function ProgressViewModel() {
                    var _this = this;
                    this.progress = ko.observable(0);
                    this._forceInvisible = ko.observable(false);
                    this.inProgress = ko.observable(false);
                    this.cancelText = ko.observable(DevExpress.Designer.getLocalization('Cancel'));
                    this.text = ko.observable('');
                    this.visible = ko.pureComputed({
                        read: function () {
                            if (_this._forceInvisible()) {
                                return false;
                            }
                            return _this.inProgress();
                        },
                        write: function (visibleState) {
                            _this._forceInvisible(!visibleState);
                        }
                    });
                    this.complete = function () {
                        _this.inProgress(false);
                        _this.progress(0);
                        $.isFunction(_this._onComplete) && _this._onComplete();
                        _this._onComplete = null;
                    };
                    this.startProgress = function (onComplete, onStop) {
                        _this.inProgress(true);
                        _this.progress(0);
                        _this._onComplete = onComplete;
                        _this.stop = function () {
                            try {
                                $.isFunction(onStop) && onStop();
                            }
                            finally {
                                _this.complete();
                            }
                        };
                    };
                }
                return ProgressViewModel;
            })();
            Preview.ProgressViewModel = ProgressViewModel;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Report;
    (function (Report) {
        var Preview;
        (function (Preview) {
            var PreviewRequestWrapper = (function () {
                function PreviewRequestWrapper(handlers) {
                    for (var name in handlers || {}) {
                        this[name] = handlers[name];
                    }
                }
                PreviewRequestWrapper.prototype.initialize = function (reportPreview, parametersModel, searchModel) {
                    this._reportPreview = reportPreview;
                    this._parametersModel = parametersModel;
                    this._searchModel = searchModel;
                };
                PreviewRequestWrapper.prototype.findTextRequest = function (text) {
                    return DevExpress.Designer.ajax(Preview.HandlerUri, 'findText', encodeURIComponent(JSON.stringify({
                        text: text,
                        documentId: this._reportPreview.documentId,
                        matchCase: this._searchModel.matchCase(),
                        wholeWord: this._searchModel.matchWholeWord(),
                        searchUp: this._searchModel.searchUp()
                    })));
                };
                PreviewRequestWrapper.prototype.stopBuild = function (id) {
                    DevExpress.Designer.ajax(Preview.HandlerUri, 'stopBuild', encodeURIComponent(id), undefined, function () { return true; });
                };
                PreviewRequestWrapper.prototype.sendCloseRequest = function (documentId, reportId) {
                    DevExpress.Designer.ajax(Preview.HandlerUri, 'close', encodeURIComponent(JSON.stringify({
                        reportId: reportId,
                        documentId: documentId
                    })), undefined, function () { return true; });
                };
                PreviewRequestWrapper.prototype.startBuildRequest = function () {
                    return DevExpress.Designer.ajax(Preview.HandlerUri, 'startBuild', encodeURIComponent(JSON.stringify({
                        reportId: this._reportPreview.reportId,
                        drillDownKeys: this._reportPreview["_drillDownState"],
                        timeZoneOffset: 0 - new Date().getTimezoneOffset(),
                        parameters: this._parametersModel.serializeParameters()
                    })));
                };
                PreviewRequestWrapper.prototype.getBuildStatusRequest = function (documentId, shouldIgnoreError) {
                    return DevExpress.Designer.ajax(Preview.HandlerUri, 'getBuildStatus', encodeURIComponent(JSON.stringify({
                        documentId: documentId,
                        timeOut: Math.max(5000, DevExpress.Report.Preview.TimeOut)
                    })), undefined, shouldIgnoreError);
                };
                PreviewRequestWrapper.prototype.getDocumentData = function (documentId, shouldIgnoreError) {
                    return DevExpress.Designer.ajax(Preview.HandlerUri, 'getDocumentData', encodeURIComponent(documentId), undefined, shouldIgnoreError);
                };
                PreviewRequestWrapper.prototype.openReport = function (reportName) {
                    return DevExpress.Designer.ajax(Preview.HandlerUri, 'openReport', encodeURIComponent(reportName), Preview.MessageHandler.processError);
                };
                PreviewRequestWrapper.prototype.drillThrough = function (customData) {
                    return DevExpress.Designer.ajax(Preview.HandlerUri, 'drillThrough', encodeURIComponent(JSON.stringify({
                        reportId: this._reportPreview.reportId,
                        documentId: this._reportPreview.documentId,
                        parameters: this._parametersModel.serializeParameters(),
                        editingFields: this._reportPreview.editingFieldsProvider().map(function (field) { return field.model(); }),
                        customData: customData
                    })));
                };
                PreviewRequestWrapper.prototype.getStartExportOperation = function (arg) {
                    return DevExpress.Designer.ajax(Preview.HandlerUri, 'startExport', arg);
                };
                PreviewRequestWrapper.prototype.getExportStatusRequest = function (operationId) {
                    return DevExpress.Designer.ajax(Preview.HandlerUri, 'getExportStatus', encodeURIComponent(JSON.stringify({
                        id: operationId,
                        timeOut: Math.max(5000, DevExpress.Report.Preview.TimeOut)
                    })));
                };
                PreviewRequestWrapper.prototype.getEditingFieldHtml = function (value, editingFieldIndex) {
                    return DevExpress.Designer.ajax(Preview.HandlerUri, "getEditingFieldHtmlValue", encodeURIComponent(JSON.stringify({
                        documentId: this._reportPreview.documentId,
                        value: value,
                        editingFieldIndex: editingFieldIndex
                    })));
                };
                return PreviewRequestWrapper;
            })();
            Preview.PreviewRequestWrapper = PreviewRequestWrapper;
        })(Preview = Report.Preview || (Report.Preview = {}));
    })(Report = DevExpress.Report || (DevExpress.Report = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var CoordinateGridViewModel = (function (_super) {
            __extends(CoordinateGridViewModel, _super);
            function CoordinateGridViewModel(options) {
                var _this = this;
                _super.call(this);
                this.width = ko.observable(0);
                this.height = ko.observable(0);
                this.verticalGridLines = ko.observableArray();
                this.horizontalGridLines = ko.observableArray();
                this.majorVerticalGridLines = ko.observableArray();
                this.majorHorizontalGridLines = ko.observableArray();
                this._disposables.push(ko.computed(function () {
                    var flip = !!ko.unwrap(options.flip);
                    var gridSize = Designer.unitsToPixel(options.snapGridSize(), options.measureUnit(), options.zoom());
                    var width = Designer.unitsToPixel(options.width(), options.measureUnit(), options.zoom());
                    _this.width(width + 0.5);
                    _this._initGrid(width, gridSize, _this.verticalGridLines, flip);
                    _this._initGrid(width, 4 * gridSize, _this.majorVerticalGridLines, flip);
                }));
                this._disposables.push(ko.computed(function () {
                    var gridSize = Designer.unitsToPixel(options.snapGridSize(), options.measureUnit(), options.zoom());
                    var height = Designer.unitsToPixel(options.height(), options.measureUnit(), options.zoom());
                    _this.height(height + 0.5);
                    _this._initGrid(height, gridSize, _this.horizontalGridLines);
                    _this._initGrid(height, 4 * gridSize, _this.majorHorizontalGridLines);
                }));
            }
            CoordinateGridViewModel.prototype._initGrid = function (length, gridSize, gridLines, flip) {
                if (flip === void 0) { flip = false; }
                var lines = gridLines.peek();
                var arrayLength = Math.ceil(length / gridSize), currentLength = lines.length, diff = arrayLength - currentLength;
                if (diff > 0) {
                    for (var index = currentLength; index < arrayLength; index++) {
                        gridLines.push({ coordVal: ko.observable((index + 1) * gridSize + 0.5), visible: ko.observable(true) });
                    }
                }
                if (flip) {
                    for (var index = 0, coordVal = length; index < gridLines.peek().length; index++, coordVal -= gridSize) {
                        gridLines.peek()[index].coordVal(coordVal - 0.5);
                        gridLines.peek()[index].visible(index < arrayLength);
                    }
                }
                else {
                    for (var index = 0, coordVal = 0; index < gridLines.peek().length; coordVal += gridSize, index++) {
                        gridLines.peek()[index].coordVal(coordVal + 0.5);
                        gridLines.peek()[index].visible(index < arrayLength);
                    }
                }
            };
            return CoordinateGridViewModel;
        })(Designer.Disposable);
        Designer.CoordinateGridViewModel = CoordinateGridViewModel;
        ko.bindingHandlers['coordinateGrid'] = {
            init: function (element, valueAccessor) {
                $(element).children().remove();
                var values = valueAccessor(), gridViewModel = new CoordinateGridViewModel(values), templateHtml = $('#dxrd-coordinategrid').text(), $element = $(element).append(templateHtml);
                ko.applyBindings(gridViewModel, $element.children()[0]);
                return { controlsDescendantBindings: true };
            }
        };
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var RulerViewModel = (function (_super) {
            __extends(RulerViewModel, _super);
            function RulerViewModel(options) {
                var _this = this;
                _super.call(this);
                this.height = ko.observable(0);
                this.width = ko.observable(0);
                this.gridLines = ko.observableArray();
                this.majorGridLines = ko.observableArray();
                this.disable = null;
                this.defaultGridLinesCoordinate = ko.observable();
                this._disposables.push(ko.computed(function () {
                    var gridSize = Designer.unitsToPixel(25, options.units(), options.zoom());
                    _this.defaultGridLinesCoordinate({ x: 4, x1: "80%", x2: "100%", majorX1: "70%", majorX2: "100%" });
                    var flip = !!ko.unwrap(options.flip);
                    if (options.direction === "vertical") {
                        _this.height(options.lenght() + 0.5);
                        _this.width(20);
                        if (flip) {
                            flip = false;
                            _this.defaultGridLinesCoordinate({ x: 11, x1: "20%", x2: "0%", majorX1: "30%", majorX2: "0%" });
                        }
                    }
                    else {
                        _this.width(options.lenght() + 0.5);
                        _this.height(20);
                    }
                    _this._initGrid(options.lenght(), gridSize, _this.gridLines, flip);
                    _this._initGrid(options.lenght(), 4 * gridSize, _this.majorGridLines, flip);
                }));
                this.disable = options.disable;
            }
            RulerViewModel.prototype._initGrid = function (length, gridSize, gridLines, flip) {
                if (flip === void 0) { flip = false; }
                var arrayLength = Math.round(length / gridSize) + 1, currentLength = gridLines.peek().length, diff = arrayLength - currentLength;
                if (diff > 0) {
                    for (var index = 0; index < diff; index++) {
                        gridLines.push({ coordVal: ko.observable(0), text: ko.observable(0), visible: ko.observable(false) });
                    }
                }
                if (flip) {
                    for (var index = 0, coordVal = length; index < gridLines.peek().length; index++, coordVal -= gridSize) {
                        gridLines.peek()[index].coordVal(coordVal - 0.5);
                        gridLines.peek()[index].text(index);
                        gridLines.peek()[index].visible(index < arrayLength);
                    }
                }
                else {
                    for (var index = 0, coordVal = 0; index < gridLines.peek().length; coordVal += gridSize, index++) {
                        gridLines.peek()[index].coordVal(coordVal + 0.5);
                        gridLines.peek()[index].text(index);
                        gridLines.peek()[index].visible(index < arrayLength);
                    }
                }
            };
            return RulerViewModel;
        })(Designer.Disposable);
        Designer.RulerViewModel = RulerViewModel;
        ko.bindingHandlers['ruler'] = {
            init: function (element, valueAccessor) {
                $(element).children().remove();
                var values = valueAccessor(), options_ = $.extend({}, ko.unwrap(values), {}), zoom = options_.zoom, options = {
                    lenght: options_.lenght,
                    units: options_.units,
                    direction: options_.direction || "",
                    zoom: zoom,
                    flip: options_.flip,
                    disable: options_.disable
                }, rulerViewModel = new RulerViewModel(options), templateHtml = $('#dxrd-ruler' + options.direction).text(), $element = $(element).append(templateHtml);
                ko.applyBindings(rulerViewModel, $element.children()[0]);
                return { controlsDescendantBindings: true };
            }
        };
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var EditOptionsEditorNameEditorModel = (function () {
                function EditOptionsEditorNameEditorModel(editorName, disabled) {
                    var _this = this;
                    this.disabled = disabled;
                    this.value = ko.observable("");
                    this.displayValue = ko.observable("");
                    var extesions = DevExpress.Report.EditingFieldExtensions.instance();
                    this.itemsProvider = {
                        getItems: function (path) {
                            var result;
                            result = extesions.editors().map(function (item) {
                                var mask = item.options && item.options["mask"];
                                return {
                                    name: item.name,
                                    displayName: item.displayName,
                                    specifics: "_none_",
                                    templateName: "dxrd-editingField-editor-treelist-item",
                                    title: item.displayName + (mask ? " [" + mask + "]" : "")
                                };
                            });
                            return $.Deferred().resolve(result).promise();
                        }
                    };
                    var editor = extesions.editor(editorName());
                    if (editor) {
                        this.value(editor.name);
                        this.displayValue(editor.displayName);
                    }
                    this.value.subscribe(function (newValue) {
                        var editor = extesions.editor(newValue);
                        if (editor) {
                            editorName(editor.name);
                            _this.displayValue(editor.displayName);
                            return;
                        }
                        _this.displayValue("");
                        editorName("");
                    });
                }
                EditOptionsEditorNameEditorModel.prototype._categorySpecifics = function (category) {
                    if (DevExpress.Report.Categories.Letters() === category) {
                        return "string";
                    }
                    else if (DevExpress.Report.Categories.DateTime() === category) {
                        return "date";
                    }
                    else if (DevExpress.Report.Categories.Numeric() === category) {
                        return "float";
                    }
                    else {
                        return "_none_";
                    }
                };
                return EditOptionsEditorNameEditorModel;
            })();
            Report.EditOptionsEditorNameEditorModel = EditOptionsEditorNameEditorModel;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var StylesEditorHeaderModel = (function () {
                function StylesEditorHeaderModel(styleName, styles, disabled) {
                    var _this = this;
                    this.displayExpr = "name";
                    this.valueExpr = "name";
                    this.displayCustomValue = true;
                    this.value = ko.pureComputed({
                        read: function () {
                            return styleName();
                        },
                        write: function (newVal) {
                            if (newVal !== DevExpress.Designer.getLocalization(StylesEditorHeaderModel.newItem)) {
                                styleName(newVal);
                            }
                        }
                    });
                    this.items = ko.pureComputed(function () {
                        var result = [new Report.StyleModel({ "@Name": DevExpress.Designer.getLocalization(StylesEditorHeaderModel.newItem) })];
                        result.push.apply(result, styles());
                        return result;
                    });
                    this.onValueChanged = function (e) {
                        if (e.value === DevExpress.Designer.getLocalization(StylesEditorHeaderModel.newItem)) {
                            var newStyleName = Designer.getUniqueNameForNamedObjectsArray(styles(), "xrControlStyle"), newStyle = new Report.StyleModel({ "@Name": newStyleName });
                            styles.push(newStyle);
                            _this.value(newStyleName);
                        }
                    };
                    this.disabled = disabled;
                }
                StylesEditorHeaderModel.newItem = "Create New Style";
                return StylesEditorHeaderModel;
            })();
            Report.StylesEditorHeaderModel = StylesEditorHeaderModel;
            ko.bindingHandlers['dxStylesEditor'] = {
                init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    $(element).children().remove();
                    var values = valueAccessor(), templateHtml = $('#dx-propertieseditor').text(), $element = $(element).append(templateHtml);
                    var style = ko.pureComputed(function () {
                        var filtered = valueAccessor().styles().filter(function (item) {
                            return item.name() === valueAccessor().styleName();
                        });
                        return filtered.length > 0 ? filtered[0] : null;
                    });
                    ko.applyBindings(new DevExpress.JS.Widgets.ObjectProperties(style, { editors: Report.styleSerializationInfo }, 1, viewModel.disabled), $element.children()[0]);
                    return { controlsDescendantBindings: true };
                }
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var DataBindingBase = (function (_super) {
                __extends(DataBindingBase, _super);
                function DataBindingBase(model, serializer) {
                    var _this = this;
                    _super.call(this);
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.displayExpr = ko.pureComputed(function () {
                        var parameter = _this.parameter();
                        return parameter ? parameter.parameterName() : _this.dataMember();
                    });
                }
                DataBindingBase.prototype.getInfo = function () {
                    return Report.dataBindingBaseSerializationInfo;
                };
                DataBindingBase.prototype._findDataSourceFromPath = function (path, dataSources) {
                    var dataSourceId = path.split('.')[0];
                    var dataSourceInfo = (dataSources || []).filter(function (dataSource) { return dataSource.ref === dataSourceId || dataSource.id === dataSourceId; })[0];
                    if (dataSourceInfo) {
                        return dataSourceInfo.data;
                    }
                    return null;
                };
                DataBindingBase.prototype.updateParameter = function (pathRequest, dataSources) {
                    this.parameter(this._findDataSourceFromPath(pathRequest.fullPath, dataSources)().filter(function (item) { return item.parameterName() === pathRequest.path; })[0]);
                    this.dataSource(null);
                };
                DataBindingBase.prototype.updateBinding = function (path, dataSources) {
                    if (!!path) {
                        var pathRequest = new DevExpress.JS.Widgets.PathRequest(path);
                        if (path.indexOf("parameters.") === 0) {
                            this.updateParameter(pathRequest, dataSources);
                        }
                        else {
                            this.dataMember(pathRequest.path);
                            this.dataSource(this._findDataSourceFromPath(path, dataSources));
                            this.parameter(null);
                        }
                    }
                    else {
                        this.resetValue();
                    }
                };
                DataBindingBase.prototype.getValuePath = function (dataSourceHelper) {
                    if (this.parameter()) {
                        return "parameters." + this.parameter().parameterName();
                    }
                    var dataSourceName = "";
                    if (this.dataSource()) {
                        var ds = dataSourceHelper.findDataSourceInfo(this.dataSource());
                        dataSourceName = ds && (ds.id || ds.ref);
                    }
                    return dataSourceName && this.dataMember() ? (dataSourceName + "." + this.dataMember()) : "";
                };
                DataBindingBase.prototype.generateValue = function (undoEngine, dataSourceHelper, dataSources) {
                    var _this = this;
                    if (!this.generatedValue) {
                        this.generatedValue = ko.computed({
                            read: function () {
                                return _this.getValuePath(dataSourceHelper);
                            },
                            write: function (val) {
                                undoEngine.start();
                                _this.updateBinding(val, dataSources);
                                undoEngine.end();
                            }
                        });
                    }
                    return this.generatedValue;
                };
                DataBindingBase.prototype.resetValue = function () {
                    this.parameter(null);
                    this.dataSource(null);
                    this.dataMember(null);
                };
                DataBindingBase.prototype.isEmpty = function () {
                    return !(this.dataMember() || this.dataSource() || this.parameter());
                };
                return DataBindingBase;
            })(Designer.Disposable);
            Report.DataBindingBase = DataBindingBase;
            var DataBinding = (function (_super) {
                __extends(DataBinding, _super);
                function DataBinding(model, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer);
                    this.disabled = ko.pureComputed(function () {
                        var dataMember = _this.dataMember();
                        return !(_this.parameter() || dataMember);
                    });
                    this._disposables.push(this.disabled.subscribe(function (newVal) {
                        newVal && _this.formatString("");
                    }));
                }
                DataBinding.initialize = function (model, serializer) {
                    var currentDataBindings = DevExpress.JS.Utils.deserializeArray(model, function (item) { return new DataBinding(item, serializer); });
                    (this["allDataBindings"] || []).forEach(function (value) {
                        if (currentDataBindings().filter(function (databinding) { return databinding.propertyName() === value; }).length === 0)
                            currentDataBindings.push(new DataBinding({ "@PropertyName": value }, serializer));
                    });
                    currentDataBindings()["findBinding"] = function (bindingName) {
                        return currentDataBindings().filter(function (binding) { return binding.propertyName() === bindingName; })[0];
                    };
                    return currentDataBindings;
                };
                DataBinding.prototype.getInfo = function () {
                    return Report.dataBindingSerializationInfo;
                };
                DataBinding.prototype.updateParameter = function (pathRequest, dataSources) {
                    _super.prototype.updateParameter.call(this, pathRequest, dataSources);
                    this.dataMember(pathRequest.path);
                };
                DataBinding.prototype.resetValue = function () {
                    _super.prototype.resetValue.call(this);
                    this.formatString("");
                };
                Object.defineProperty(DataBinding.prototype, "value", {
                    get: function () {
                        return this.formatString;
                    },
                    enumerable: true,
                    configurable: true
                });
                return DataBinding;
            })(DataBindingBase);
            Report.DataBinding = DataBinding;
            Report.dataBindingBaseSerializationInfo = [
                { propertyName: "parameter", modelName: "@Parameter", link: true },
                { propertyName: "dataSource", modelName: "@DataSource", link: true },
                { propertyName: "dataMember", modelName: "@DataMember" }
            ];
            Report.dataBindingSerializationInfo = Report.dataBindingBaseSerializationInfo.concat([
                { propertyName: "propertyName", modelName: "@PropertyName" },
                { propertyName: "formatString", modelName: "@FormatString" }
            ]);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            function getFirstSurfaceParentByType(target, type) {
                return target instanceof type ? target : getFirstSurfaceParentByType(target.parent, type);
            }
            ;
            function createPictureBox(container, bindingPath) {
                var newControl = container.createChild($.extend({ "@ControlType": "XRPictureBox" }, Report.controlsFactory.controlsMap["XRPictureBox"].defaultVal));
                var binding = newControl.dataBindings().findBinding("Image");
                binding.dataMember(bindingPath);
                return newControl;
            }
            Report.memberControlsMap = {
                "Array": {
                    drop: function (memberInfo, getControlModel, fullPath, getItems) {
                        return createPictureBox(getControlModel(), new DevExpress.JS.Widgets.PathRequest(fullPath).path);
                    },
                    size: function (surface) {
                        return Designer.Size.fromString("100, 100");
                    }
                },
                "Bool": {
                    drop: function (memberInfo, getControlModel, fullPath, getItems) {
                        var newControl = getControlModel().createChild($.extend({ "@ControlType": "XRCheckBox" }, Report.controlsFactory.controlsMap["XRCheckBox"].defaultVal));
                        newControl.text(memberInfo.displayName);
                        var binding = newControl.dataBindings().findBinding("CheckState");
                        if (fullPath.indexOf("parameters.") === -1) {
                            binding.dataMember(new DevExpress.JS.Widgets.PathRequest(fullPath).path);
                        }
                        else {
                            binding.dataMember(memberInfo.name);
                            binding.parameter(memberInfo);
                        }
                        return newControl;
                    },
                    size: function (surface) {
                        return Designer.Size.fromString("100, 23");
                    }
                },
                "List": {
                    drop: function (memberInfo, getControlModel, fullPath, getItems) {
                        var newControl = getControlModel().createChild({ "@ControlType": "XRTable", "@SizeF": "200, 23" });
                        var newRow = newControl.createChild({ "@ControlType": "XRTableRow", "@Weight": "1" });
                        getItems().done(function (data) {
                            var path = new DevExpress.JS.Widgets.PathRequest(fullPath).path;
                            for (var index = 0; index < data.length; index++) {
                                if (data[index].data.specifics !== "List" && data[index].data.specifics !== "ListSource" && !(data[index].data.isList === true)) {
                                    var newCell = newRow.createChild($.extend({ "@ControlType": "XRTableCell" }, Report.controlsFactory.controlsMap["XRTableCell"].defaultVal));
                                    if (data[index].data.specifics !== "Array") {
                                        var binding = newCell["dataBindings"]()["findBinding"]("Text");
                                        binding.dataMember(path + "." + data[index].name);
                                    }
                                    else {
                                        newCell.addChild(createPictureBox(newCell, path + "." + data[index].name));
                                    }
                                }
                            }
                        });
                        return newControl;
                    },
                    size: function (surface) {
                        var report = surface.getControlModel();
                        return surface ?
                            Designer.Size.fromString(((report.pageWidth() - report.margins.left() - report.margins.right()) / (surface.dpi() / 100)).toString() + ", 23") :
                            Designer.Size.fromString("200, 23");
                    },
                    adjustDropTarget: function (dropTarget) {
                        var targetSurface = getFirstSurfaceParentByType(dropTarget, Report.BandSurface);
                        targetSurface.underCursor().x = 0;
                        return targetSurface;
                    }
                },
                "Default": {
                    drop: function (memberInfo, getControlModel, fullPath, getItems) {
                        var newControl = getControlModel().createChild($.extend({ "@ControlType": "XRLabel" }, Report.controlsFactory.controlsMap["XRLabel"].defaultVal));
                        var binding = newControl["dataBindings"]().findBinding("Text");
                        if (fullPath.indexOf("parameters.") === -1) {
                            binding.dataMember(new DevExpress.JS.Widgets.PathRequest(fullPath).path);
                        }
                        else {
                            binding.dataMember(memberInfo.name);
                            binding.parameter(memberInfo);
                        }
                        return newControl;
                    },
                    size: function (surface) {
                        return Designer.Size.fromString("100, 23");
                    }
                }
            };
            var FieldListDragDropHandler = (function (_super) {
                __extends(FieldListDragDropHandler, _super);
                function FieldListDragDropHandler(surface, selection, undoEngine, snapHelper, dragHelperContent) {
                    var _this = this;
                    _super.call(this, surface, selection, undoEngine, snapHelper, dragHelperContent);
                    this.cursor = 'arrow';
                    this.containment = '.dxrd-designer';
                    this["cursorAt"] = {
                        top: 0,
                        left: 0
                    };
                    this["helper"] = function (draggable) {
                        _super.prototype.helper.call(_this, draggable);
                        var key = draggable.data.isList ? "List" : draggable.data.specifics;
                        var size = (Report.memberControlsMap[key] || Report.memberControlsMap["Default"]).size(_this.surface());
                        _this.recalculateSize(size);
                        dragHelperContent.setContent(new Designer.Rectangle(0, 0, _this._size.width(), _this._size.height()));
                    };
                }
                FieldListDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
                    if (this.selection.dropTarget) {
                        var position = this._getAbsoluteSurfacePosition(ui);
                        this.selection.dropTarget.underCursor().x = position.left - this.selection.dropTarget["absolutePosition"].x();
                        this.selection.dropTarget.underCursor().y = position.top - this.selection.dropTarget["absolutePosition"].y();
                        var item = draggable;
                        if (this.surface().isFit(this.selection.dropTarget)) {
                            var key = draggable.data.isList ? "List" : draggable.data.specifics, dropTarget = Report.memberControlsMap[key] && Report.memberControlsMap[key].adjustDropTarget && Report.memberControlsMap[key].adjustDropTarget(this.selection.dropTarget) || this.selection.dropTarget;
                            dropTarget = dropTarget.getControlModel().getMetaData().isContainer ? dropTarget : dropTarget.parent;
                            if (!dropTarget.canDrop()) {
                                return;
                            }
                            var control = (Report.memberControlsMap[key] || Report.memberControlsMap["Default"]).drop(item.data, function () {
                                return dropTarget.getControlModel();
                            }, item.path, item.getItems);
                            this.addControl(control, dropTarget, this._size);
                        }
                    }
                };
                return FieldListDragDropHandler;
            })(Designer.DragDropHandler);
            Report.FieldListDragDropHandler = FieldListDragDropHandler;
            var ReportExplorerDragDropHandler = (function (_super) {
                __extends(ReportExplorerDragDropHandler, _super);
                function ReportExplorerDragDropHandler(surface, selection, undoEngine, dragHelperContent) {
                    var _this = this;
                    _super.call(this, surface, selection, undoEngine, null, dragHelperContent);
                    this.cursor = 'arrow';
                    this.alwaysAlt = true;
                    this.containment = '.dxrd-designer';
                    this["cursorAt"] = {
                        top: 0,
                        left: 0
                    };
                    this.helper = function (draggable) {
                        var rect = new Designer.Rectangle(0, 0, 24, 24);
                        if (draggable.data && draggable.data.specifics === "stylemodel") {
                            rect.className = "dxrd-image-ghost-stylemodel";
                        }
                        else if (draggable.data && draggable.data.specifics === "formattingrule") {
                            rect.className = "dxrd-image-ghost-formattingrule";
                        }
                        dragHelperContent.setContent(rect);
                        _this._size.width(24);
                        _this._size.height(24);
                    };
                }
                ReportExplorerDragDropHandler.prototype.drag = function (event, ui) {
                    this.selection.dropTarget && this.dragHelperContent.isLocked(this.selection.dropTarget.locked);
                };
                ReportExplorerDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
                    if (this.selection.dropTarget && !this.selection.dropTarget.locked) {
                        var position = this._getAbsoluteSurfacePosition(ui);
                        this.selection.dropTarget.underCursor().x = position.left - this.selection.dropTarget["absolutePosition"].x();
                        this.selection.dropTarget.underCursor().y = position.top - this.selection.dropTarget["absolutePosition"].y();
                        if (draggable.data && draggable.data.specifics === "stylemodel") {
                            this.selection.dropTarget.getControlModel()["styleName"] && this.selection.dropTarget.getControlModel()["styleName"](draggable.data.displayName);
                        }
                        else if (draggable.data && draggable.data.specifics === "formattingrule") {
                            this.selection.dropTarget.getControlModel()["formattingRuleLinks"] && this.selection.dropTarget.getControlModel()["formattingRuleLinks"].push(Report.FormattingRuleLink.createNew(draggable.data.data));
                        }
                        ;
                    }
                };
                return ReportExplorerDragDropHandler;
            })(Designer.DragDropHandler);
            Report.ReportExplorerDragDropHandler = ReportExplorerDragDropHandler;
            var ReportToolboxDragDropHandler = (function (_super) {
                __extends(ReportToolboxDragDropHandler, _super);
                function ReportToolboxDragDropHandler(surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory) {
                    _super.call(this, surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory);
                }
                ReportToolboxDragDropHandler.prototype.helper = function (draggable) {
                    _super.prototype.helper.call(this, draggable);
                    var toolboxItem = draggable;
                    if (toolboxItem.type === "XRTableOfContents") {
                        var width = this.surface().pageWidth() - (this.surface().margins.right() + this.surface().margins.left());
                        var size = new Designer.Size(width, 46);
                        this.recalculateSize(size);
                        this.dragHelperContent.setContent(new Designer.Rectangle(0, 0, width, this._size.height()));
                    }
                };
                ReportToolboxDragDropHandler.prototype._processProperty = function (propertyName, target, callback) {
                    if (target instanceof Object && !$.isFunction(target)) {
                        !!target[propertyName] && callback(target);
                        for (var name in target) {
                            if (target[name] instanceof Object && !$.isFunction(target[name])) {
                                this._processProperty(propertyName, target[name], callback);
                            }
                        }
                    }
                };
                ReportToolboxDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
                    var reportSurface = this.surface();
                    var toolboxItem = $.extend(true, {}, draggable);
                    this._processProperty("@Padding", toolboxItem.info, function (target) {
                        var model = Designer.Widgets.PaddingModel.from(target["@Padding"]);
                        Designer.Widgets.PaddingModel.unitProperties.forEach(function (name) {
                            model[name](model[name]() * reportSurface.dpi() / 100);
                        });
                        model.dpi(reportSurface.dpi());
                        target["@Padding"] = model.toString();
                    });
                    _super.prototype.doStopDrag.call(this, ui, toolboxItem);
                };
                ReportToolboxDragDropHandler.prototype.addControl = function (control, dropTargetSurface, size) {
                    if (control.controlType === "XRTableOfContents") {
                        var reportSurface = this.surface();
                        var reportModel = reportSurface.getControlModel();
                        var targetBand = getBandIfItDoesNotContainTOC(reportModel, "ReportHeaderBand") || getBandIfItDoesNotContainTOC(reportModel, "ReportFooterBand");
                        if (!targetBand)
                            return;
                        dropTargetSurface = Designer.findSurface(targetBand);
                        var tocModel = control;
                        tocModel.allLevels().forEach(function (lvl) {
                            lvl.height(Report.reculculateUnit(lvl.height(), targetBand.dpi()));
                        });
                    }
                    _super.prototype.addControl.call(this, control, dropTargetSurface, size);
                };
                return ReportToolboxDragDropHandler;
            })(Designer.ToolboxDragDropHandler);
            Report.ReportToolboxDragDropHandler = ReportToolboxDragDropHandler;
            function getBandIfItDoesNotContainTOC(reportModel, bandType) {
                var band = (Designer.findFirstItemMatchesCondition(reportModel.bands(), function (item) { return item.controlType === bandType; }));
                if (band) {
                    return !!Report.bandControlsSomeXRTableOfContents(band) ? null : band;
                }
                return reportModel.createChild({ "@ControlType": bandType });
            }
            Report.getBandIfItDoesNotContainTOC = getBandIfItDoesNotContainTOC;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var GaugeStyleEditor = (function (_super) {
                __extends(GaugeStyleEditor, _super);
                function GaugeStyleEditor(info, level, parentDisabled) {
                    var _this = this;
                    _super.call(this, info, 0, parentDisabled);
                    this._viewModel = ko.observable();
                    this.viewmodel = {
                        items: ko.pureComputed(function () {
                            if (_this._viewModel() && _this._viewModel().viewType) {
                                return _this._viewModel().viewType() === 'Circular' ? Report.circularValues : Report.linearValues;
                            }
                            else {
                                return [];
                            }
                        })
                    };
                }
                GaugeStyleEditor.prototype.update = function (viewModel) {
                    _super.prototype.update.call(this, viewModel);
                    this._viewModel(viewModel);
                };
                return GaugeStyleEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.GaugeStyleEditor = GaugeStyleEditor;
            var ExplorerEditor = (function (_super) {
                __extends(ExplorerEditor, _super);
                function ExplorerEditor(modelPropertyInfo, level, parentDisabled) {
                    var _this = this;
                    _super.call(this, modelPropertyInfo, level, parentDisabled);
                    this._collectionNames = ["controls", "bands", "subbands"];
                    this.displayExpr = ko.computed(function () {
                        var value = ko.unwrap(_this.value);
                        return value && ko.unwrap(value.displayName || value.name) || "";
                    });
                    this.itemsProvider = new Designer.ObjectExplorerProvider([{ model: ko.computed(function () { return _this._model() && _this._model()["root"]; }), displayName: "Report", className: "master_report" }], ["bands", "controls", "rows", "cells", "subBands"], this.value, Report.ReportExplorerModel.getPathByMember);
                    this.itemsProvider.path("Report");
                    this.treeListController = new Designer.ObjectStructureTreeListController(["bands", "controls", "rows", "cells", "Report"]);
                    this.treeListController.canSelect = function (item) {
                        return !item.hasItems && !(item.data && (item.data["data"] instanceof Report.BandViewModel));
                    };
                    this.treeListController.itemsFilter = function (item) {
                        return item && item["data"] && _this._isVisible(item["data"]);
                    };
                }
                ExplorerEditor.prototype._isVisible = function (item) {
                    if (item instanceof Report.BandViewModel) {
                        for (var i = 0; i < this._collectionNames.length; i++) {
                            var collection = item[this._collectionNames[i]] && item[this._collectionNames[i]]();
                            if (collection) {
                                for (var j = 0; j < collection.length; j++) {
                                    if (this._isVisible(collection[j]))
                                        return true;
                                }
                            }
                        }
                        return false;
                    }
                    else {
                        return item !== this._model() &&
                            item.controlType !== "XRTableOfContents" &&
                            item.controlType !== "XRPivotGrid" &&
                            item.controlType !== "XRPageBreak" &&
                            item.controlType !== "XRSubreport" &&
                            item.controlType !== "PivotGridField";
                    }
                };
                return ExplorerEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.ExplorerEditor = ExplorerEditor;
            var DrillDownEditor = (function (_super) {
                __extends(DrillDownEditor, _super);
                function DrillDownEditor(info, level, parentDisabled) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled);
                    this.path = ko.observable(null);
                    ko.computed(function () {
                        if (_this._model() && _this._model() instanceof Report.BandViewModel) {
                            var bands = _this._model().parentModel()["bands"]();
                            var position = bands.indexOf(_this._model());
                            var target = _this._findFistAvailableBand(bands, bands.indexOf(_this._model()) - 1);
                            if (target) {
                                _this._setDisabled(false);
                                _this.itemsProvider.path(Report.ReportExplorerModel.getPathByMember(target));
                            }
                            else {
                                _this.itemsProvider.path("");
                                _this._setDisabled(true);
                            }
                        }
                    });
                }
                DrillDownEditor.prototype._setDisabled = function (value) {
                    var info = this.info();
                    if (info.disabled) {
                        if (ko.isObservable(info.disabled)) {
                            info.disabled(value);
                        }
                        else {
                            info.disabled = value;
                        }
                    }
                    else {
                        info.disabled = ko.observable(value);
                    }
                };
                DrillDownEditor.prototype._findFistAvailableBand = function (bands, position) {
                    if (position === -1) {
                        return null;
                    }
                    var target = bands[position];
                    if (target && (target.controlType === "GroupHeaderBand" || target.controlType === "DetailBand")) {
                        return target;
                    }
                    else if (target) {
                        return this._findFistAvailableBand(bands, position - 1);
                    }
                    else {
                        return null;
                    }
                };
                return DrillDownEditor;
            })(ExplorerEditor);
            Report.DrillDownEditor = DrillDownEditor;
            var DataBindingsEditor = (function (_super) {
                __extends(DataBindingsEditor, _super);
                function DataBindingsEditor(info, level, parentDisabled) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled);
                    var model = ko.pureComputed(function () {
                        var obj = {};
                        obj.isPropertyModified = function (name) {
                            return !obj[name].isEmpty();
                        };
                        obj.actions = [{
                                action: function (propertyName) { obj[propertyName].resetValue(); },
                                title: "Reset",
                                visible: function () { return true; }
                            }];
                        var databindings = _this.value()();
                        (databindings || []).map(function (value) { obj[value.propertyName()] = value; });
                        return obj;
                    });
                    var propertyGrid = new DevExpress.JS.Widgets.ObjectProperties(model, { editors: Report.dataBindingsSerializationInfo }, level + 1, this.disabled);
                    this.viewmodel = propertyGrid;
                }
                return DataBindingsEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.DataBindingsEditor = DataBindingsEditor;
            var ComboboxUndoEditor = (function (_super) {
                __extends(ComboboxUndoEditor, _super);
                function ComboboxUndoEditor(info, level, parentDisabled) {
                    _super.call(this, info, level, parentDisabled);
                }
                ComboboxUndoEditor.prototype.generateValue = function (undoEngine) {
                    var _this = this;
                    if (!this.undoValue) {
                        this.undoValue = ko.computed({
                            read: function () {
                                return _this.value();
                            },
                            write: function (val) {
                                undoEngine().start();
                                _this.value(val);
                                undoEngine().end();
                            }
                        });
                    }
                    return this.undoValue;
                };
                return ComboboxUndoEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.ComboboxUndoEditor = ComboboxUndoEditor;
            var FontEditorUndo = (function (_super) {
                __extends(FontEditorUndo, _super);
                function FontEditorUndo(info, level, parentDisabled) {
                    _super.call(this, info, level, parentDisabled);
                }
                FontEditorUndo.prototype.generateValue = function (undoEngine) {
                    var _this = this;
                    if (!this.viewmodel) {
                        var undoValue = ko.computed({
                            read: function () {
                                return _this.value();
                            },
                            write: function (val) {
                                undoEngine().start();
                                _this.value(val);
                                undoEngine().end();
                            }
                        });
                        var model = new DevExpress.JS.Widgets.FontModel(undoValue);
                        this.viewmodel = new DevExpress.JS.Widgets.ObjectProperties(ko.observable(model), { editors: DevExpress.JS.Widgets.fontInfo }, this.level + 1, this.disabled);
                    }
                    return this.viewmodel;
                };
                return FontEditorUndo;
            })(DevExpress.JS.Widgets.Editor);
            Report.FontEditorUndo = FontEditorUndo;
            var FormattingRuleEditor = (function (_super) {
                __extends(FormattingRuleEditor, _super);
                function FormattingRuleEditor(info, level, parentDisabled) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled);
                    var rules = ko.pureComputed(function () {
                        var formattingRuleSheet = _this._model() && _this._model()["root"] && _this._model()["root"].formattingRuleSheet || ko.observableArray();
                        formattingRuleSheet().forEach(function (rule) {
                            rule.selected = ko.pureComputed({
                                read: function () {
                                    return _this.value()().filter(function (link) { return link.value() === rule; }).length > 0;
                                },
                                write: function (val) {
                                    if (val) {
                                        _this.value().push(Report.FormattingRuleLink.createNew(rule));
                                    }
                                    else {
                                        var link = _this.value()().filter(function (itemLink) { return itemLink.value() === rule; })[0];
                                        _this.value().remove(link);
                                    }
                                }
                            });
                        });
                        return formattingRuleSheet;
                    });
                    this.options = {
                        addHandler: function () { return DevExpress.Designer.Report.FormattingRule.createNew(_this._model()["root"]); },
                        values: rules,
                        displayName: this.displayName(),
                        level: this.level,
                        info: this.info
                    };
                }
                return FormattingRuleEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.FormattingRuleEditor = FormattingRuleEditor;
            var BandEditorBase = (function (_super) {
                __extends(BandEditorBase, _super);
                function BandEditorBase() {
                    var _this = this;
                    _super.apply(this, arguments);
                    this.generateValue = function (bands) {
                        if (!_this.bands) {
                            _this.bands = bands(_this.filter, _this.noneNeaded);
                        }
                        return _this.bands;
                    };
                    this.bands = null;
                }
                return BandEditorBase;
            })(DevExpress.JS.Widgets.Editor);
            Report.BandEditorBase = BandEditorBase;
            var RunningBandEditor = (function (_super) {
                __extends(RunningBandEditor, _super);
                function RunningBandEditor() {
                    _super.apply(this, arguments);
                    this.filter = function (item) {
                        return item.controlType === "GroupHeaderBand" || item.controlType === "DetailReportBand";
                    };
                    this.noneNeaded = true;
                }
                return RunningBandEditor;
            })(BandEditorBase);
            Report.RunningBandEditor = RunningBandEditor;
            var BandsEditor = (function (_super) {
                __extends(BandsEditor, _super);
                function BandsEditor() {
                    _super.apply(this, arguments);
                    this.filter = function (item) {
                        return item.bands().length === 0;
                    };
                    this.noneNeaded = false;
                }
                return BandsEditor;
            })(BandEditorBase);
            Report.BandsEditor = BandsEditor;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var FormattingRule = (function () {
                function FormattingRule(model, parent, serializer) {
                    var _this = this;
                    this.className = function () {
                        return "formattingrule";
                    };
                    this.controlType = "XRFormattingRule";
                    this.selected = ko.observable(false);
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.parent = parent || null;
                    this["conditionObj"] = {
                        value: this["condition"],
                        path: ko.pureComputed(function () {
                            var dsPath = _this.getPath("");
                            if (!!dsPath) {
                                return Report.getFullPath(dsPath, _this["dataMember"]() || parent.dataMember());
                            }
                            else {
                                return dsPath;
                            }
                        })
                    };
                }
                FormattingRule.createNew = function (report) {
                    return new FormattingRule({}, report);
                };
                FormattingRule.prototype.getInfo = function () {
                    return Report.formattingRuleSerializationsInfo;
                };
                FormattingRule.prototype.getPath = function (propertyName) {
                    return this.parent && this.parent.dsHelperProvider() && this.parent.dsHelperProvider().getDataSourcePath(this["dataSource"]() || this.parent.dataSource());
                };
                return FormattingRule;
            })();
            Report.FormattingRule = FormattingRule;
            var FormattingRuleLink = (function () {
                function FormattingRuleLink(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                FormattingRuleLink.createNew = function (rule) {
                    var link = new FormattingRuleLink({});
                    link.value = ko.observable(rule);
                    return link;
                };
                FormattingRuleLink.prototype.getInfo = function () {
                    return Report.formattingRuleLinkSerializationsInfo;
                };
                return FormattingRuleLink;
            })();
            Report.FormattingRuleLink = FormattingRuleLink;
            Report.formattingRuleLinkSerializationsInfo = [
                { propertyName: "value", modelName: "@Value", link: true }
            ];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.editorTemplates = {
                dataSource: { header: "dxrd-datasource" },
                chartDataSource: { header: "dxrd-chartdatasource" },
                dataBindings: { header: "dxrd-dataBindings", content: "dxrd-dataBindingsContent", editorType: Report.DataBindingsEditor },
                dataBinding: { header: "dxrd-dataBinding", content: "dxrd-dataBindingContent", editorType: Designer.Widgets.FieldListEditor },
                reportExplorer: { header: "dxrd-reportexplorer-editor", editorType: Report.ExplorerEditor },
                reportSourceUrl: { header: "dxrd-reportSourceUrl" },
                bands: { header: "dxrd-bands", editorType: Report.BandsEditor },
                runningBand: { header: "dxrd-bands", editorType: Report.RunningBandEditor },
                style: { header: "dxrd-style", content: "dxrd-styleContent" },
                stylePriority: { header: "dxrd-stylePriority" },
                shape: { header: "dxrd-shapeHeader", content: "dxrd-shapeContent" },
                symbology: { header: "dxrd-symbologyHeader", content: "dxrd-symbology" },
                sparkline: { header: "dxrd-sparklineHeader", content: "dxrd-sparkline" },
                lookUpValues: { custom: "dxrd-lookUpValues" },
                drillDownControls: { header: "dxrd-reportexplorer-editor", editorType: Report.DrillDownEditor },
                viewStyle: { header: "dxrd-viewStyle", editorType: Report.GaugeStyleEditor },
                pivotGridFields: { custom: "dxrd-pivotGridFields" },
                scriptsBox: { header: "dxrd-scriptsbox" },
                formattingRule: { custom: "dxrd-formattingRuleCollection", editorType: Report.FormattingRuleEditor },
                toclevel: { custom: "dxrd-levelCollection" },
                calculatedFields: { custom: "dxrd-calculatedFields" },
                reportRtlProperty: { header: "dxrd-reportRtlProperty" },
                comboboxUndo: { header: "dx-combobox-undo", editorType: Report.ComboboxUndoEditor },
                fontUndo: { header: "dx-emptyHeader", content: "dx-objectEditorContentUndo", editorType: Report.FontEditorUndo }
            };
            Report.textAlignmentValues = {
                "TopLeft": "Top Left",
                "MiddleLeft": "Middle Left",
                "BottomLeft": "Bottom Left",
                "TopCenter": "Top Center",
                "MiddleCenter": "Middle Center",
                "BottomCenter": "Bottom Center",
                "TopJustify": "Top Justify",
                "MiddleJustify": "Middle Justify",
                "BottomJustify": "Bottom Justify",
                "TopRight": "Top Right",
                "MiddleRight": "Middle Right",
                "BottomRight": "Bottom Right",
            };
            Report.lineStyleValues = {
                "Solid": "Solid",
                "Dash": "Dash",
                "Dot": "Dot",
                "DashDot": "Dash-Dot",
                "DashDotDot": "Dash-Dot-Dot"
            };
            Report.stylePrioritySerializationInfo = [
                { propertyName: "useBackColor", modelName: "@UseBackColor", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useBorderColor", modelName: "@UseBorderColor", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useBorderDashStyle", modelName: "@UseBorderDashStyle", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useBorders", modelName: "@UseBorders", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useBorderWidth", modelName: "@UseBorderWidth", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useFont", modelName: "@UseFont", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useForeColor", modelName: "@UseForeColor", defaultVal: true, from: Designer.parseBool },
                { propertyName: "usePadding", modelName: "@UsePadding", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useTextAlignment", modelName: "@UseTextAlignment", defaultVal: true, from: Designer.parseBool }
            ];
            Report.xlsxFormatString = { propertyName: "xlsxFormatString", modelName: "@XlsxFormatString", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text, displayName: "Xlsx Format String" };
            Report.name = { propertyName: "name", modelName: "@Name", displayName: "Name", editor: DevExpress.JS.Widgets.editorTemplates.text, validationRules: Designer.nameValidationRules };
            Report.displayName = { propertyName: "displayNameObject", modelName: "@DisplayName", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "", displayName: "Display Name" };
            Report.text = { propertyName: "text", modelName: "@Text", defaultVal: "", displayName: "Text", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Report.textArea = { propertyName: "textArea", displayName: "Text", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.stringArray };
            Report.textTrimming = {
                propertyName: "textTrimming", modelName: "@TextTrimming", displayName: "Text Trimming", defaultVal: "Character", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "None": "None",
                    "Character": "Character",
                    "Word": "Word",
                    "EllipsisCharacter": "Ellipsis Character",
                    "EllipsisWord": "Ellipsis Word",
                    "EllipsisPath": "Ellipsis Path"
                }
            };
            Report.size = { propertyName: "size", modelName: "@SizeF", from: Designer.Size.fromString, displayName: "Size", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.location = { propertyName: "location", modelName: "@LocationFloat", from: Designer.Point.fromString, displayName: "Location", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.tag = { propertyName: "tag", modelName: "@Tag", displayName: "Tag", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "" };
            Report.lockedInUserDesigner = { propertyName: "_lockedInUserDesigner", modelName: "@LockedInUserDesigner", defaultVal: false, from: Designer.parseBool };
            Report.visible = { propertyName: "visible", modelName: "@Visible", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Visible" };
            Report.defaultBooleanVisible = {
                propertyName: "visible", modelName: "@Visible", displayName: "Visible", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "True": "True",
                    "False": "False",
                    "Default": "Default"
                }
            };
            Report.backColor = $.extend({ displayName: "Background Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, Report.previewBackColor);
            Report.foreColor = $.extend({ displayName: "Foreground Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, Report.previewForeColor);
            Report.font = $.extend({ displayName: "Font", editor: DevExpress.JS.Widgets.editorTemplates.font }, Report.previewFont);
            Report.borderColor = $.extend({ displayName: "Border Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, Report.previewBorderColor);
            Report.borders = { propertyName: "borders", modelName: "@Borders", displayName: "Borders", editor: Designer.Widgets.editorTemplates.borders };
            Report.borderWidth = { propertyName: "borderWidth", modelName: "@BorderWidth", displayName: "Border Width", from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.borderDashStyle = $.extend({
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Border Dash Style",
                values: {
                    "Solid": "Solid",
                    "Dash": "Dash",
                    "Dot": "Dot",
                    "DashDot": "Dash-Dot",
                    "DashDotDot": "Dash-Dot-Dot",
                    "Double": "Double"
                }
            }, Report.previewBorderDashStyle);
            Report.paddingString = { propertyName: "padding", modelName: "@Padding" };
            Report.padding = { displayName: "Padding", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, propertyName: "paddingObj" };
            Report.paddingGroup = [Report.paddingString, Report.padding];
            Report.textAlignment = $.extend({
                displayName: "Text Alignment",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: Report.textAlignmentValues
            }, Report.previewTextAlignment);
            Report.anchorVertical = {
                propertyName: "anchorVertical",
                modelName: "@AnchorVertical", displayName: "Anchor Vertically", defaultVal: "None",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "None": "None",
                    "Top": "Top",
                    "Bottom": "Bottom",
                    "Both": "Both"
                }
            };
            Report.anchorHorizontal = {
                propertyName: "anchorHorizontal",
                modelName: "@AnchorHorizontal", displayName: "Anchor Horizontally", defaultVal: "None",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "None": "None",
                    "Left": "Left",
                    "Right": "Right",
                    "Both": "Both"
                }
            };
            Report.angle = { propertyName: "angle", modelName: "@Angle", defaultVal: 0, from: Designer.floatFromModel, displayName: "Angle", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.canGrow = { propertyName: "canGrow", modelName: "@CanGrow", defaultVal: true, from: Designer.parseBool, displayName: "Can Grow", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.canShrink = { propertyName: "canShrink", modelName: "@CanShrink", defaultVal: false, from: Designer.parseBool, displayName: "Can Shrink", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.multiline = { propertyName: "multiline", modelName: "@Multiline", defaultVal: false, from: Designer.parseBool, displayName: "Multiline", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.wordWrap = { propertyName: "wordWrap", modelName: "@WordWrap", defaultVal: true, from: Designer.parseBool, displayName: "Word Wrap", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.autoWidth = { propertyName: "autoWidth", modelName: "@AutoWidth", defaultVal: false, from: Designer.parseBool, displayName: "Auto Width", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.keepTogether = { propertyName: "keepTogether", modelName: "@KeepTogether", defaultVal: true, from: Designer.parseBool, displayName: "Keep Together", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.keepTogetherDefaultValueFalse = { propertyName: "keepTogether", modelName: "@KeepTogether", defaultVal: false, from: Designer.parseBool, displayName: "Keep Together", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.processDuplicatesTarget = {
                propertyName: "processDuplicatesTarget", modelName: "@ProcessDuplicatesTarget", displayName: "Process Duplicates Target",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Value", from: Designer.fromEnum,
                values: {
                    "Value": "Value",
                    "Tag": "Tag"
                }
            };
            Report.processDuplicatesMode = {
                propertyName: "processDuplicatesMode", modelName: "@ProcessDuplicatesMode", displayName: "Process Duplicates Mode",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Leave", from: Designer.fromEnum,
                values: {
                    "Leave": "Leave",
                    "Merge": "Merge",
                    "Suppress": "Suppress",
                    "SuppressAndShrink": "Suppress and Shrink"
                }
            };
            Report.processNullValues = {
                propertyName: "processNullValues",
                modelName: "@ProcessNullValues", displayName: "Process Null Values",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Leave", from: Designer.fromEnum,
                values: {
                    "Leave": "Leave",
                    "Suppress": "Suppress",
                    "SuppressAndShrink": "Suppress and Shrink",
                }
            };
            Report.reportPrintOptionsSerializationInfo = [
                { propertyName: "printOnEmptyDataSource", defaultVal: true, from: Designer.parseBool, modelName: "@PrintOnEmptyDataSource", displayName: "Print when Data Source is Empty", editor: DevExpress.JS.Widgets.editorTemplates.bool },
                { propertyName: "detailCountAtDesignTime", defaultVal: 0, from: Designer.floatFromModel, modelName: "@DetailCountAtDesignTime", displayName: "Detail Count at Design Time", editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "detailCountOnEmptyDataSource", defaultVal: 1, from: Designer.floatFromModel, modelName: "@DetailCountOnEmptyDataSource", displayName: "Detail Count when Data Source is Empty", editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "blankDetailCount", defaultVal: 0, from: Designer.floatFromModel, modelName: "@BlankDetailCount", displayName: "Blank Detail Count", editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "detailCount", defaultVal: 0, from: Designer.floatFromModel, modelName: "@DetailCount", displayName: "Detail Count", editor: DevExpress.JS.Widgets.editorTemplates.numeric }
            ];
            Report.dataAdapter = { propertyName: "dataAdapter", modelName: "@DataAdapter", link: true, editor: null };
            Report.dataSource = { propertyName: "dataSource", modelName: "@DataSource", displayName: "Data Source", link: true, editor: Report.editorTemplates.dataSource };
            Report.dataMember = { propertyName: "dataMember", modelName: "@DataMember", displayName: "Data Member", defaultVal: "", editor: Designer.Widgets.editorTemplates.dataMember };
            Report.dataBindings = function (dataBindingsArray) {
                return {
                    propertyName: "dataBindings",
                    modelName: "DataBindings",
                    array: true,
                    info: Report.dataBindingSerializationInfo,
                    displayName: "Data Bindings",
                    editor: Report.editorTemplates.dataBindings,
                    allDataBindings: dataBindingsArray,
                    from: Report.DataBinding.initialize
                };
            };
            Report.defaultDataBinding = function (bindingName) { return { propertyName: "defaultDataBinding", displayName: "Data Binding", editor: Report.editorTemplates.dataBinding, bindingName: bindingName }; };
            Report.filterString = { propertyName: "_filterString", modelName: "@FilterString" };
            Report.filterStringEditable = { propertyName: "filterString", displayName: "Filter String", defaultVal: "", editor: Designer.Widgets.editorTemplates.filterEditor };
            Report.bookmark = { propertyName: "bookmark", modelName: "@Bookmark", displayName: "Bookmark", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Report.bookmarkParent = { propertyName: "bookmarkParent", modelName: "@BookmarkParent", link: true, displayName: "Parent Bookmark", defaultVal: null, editor: Report.editorTemplates.reportExplorer };
            Report.navigateUrl = { propertyName: "navigateUrl", modelName: "@NavigateUrl", displayName: "Navigation URL", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Report.target = { propertyName: "target", modelName: "@Target", displayName: "Navigation Target", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "" };
            Report.nullValueText = { propertyName: "nullValueText", modelName: "@NullValueText", displayName: "Null Value Text", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Report.styleName = { propertyName: "styleName", modelName: "@StyleName", editor: Report.editorTemplates.style, displayName: "Style", defaultVal: null };
            Report.evenStyleName = { propertyName: "evenStyleName", modelName: "@EvenStyleName", editor: Report.editorTemplates.style, displayName: "Even Style", defaultVal: null };
            Report.oddStyleName = { propertyName: "oddStyleName", modelName: "@OddStyleName", editor: Report.editorTemplates.style, displayName: "Odd Style", defaultVal: null };
            Report.stylePriority = { propertyName: "stylePriority", modelName: "StylePriority", info: Report.stylePrioritySerializationInfo };
            Report.summaryFunctionValues = {
                "Avg": "Average",
                "Count": "Count",
                "Sum": "Sum",
                "RunningSum": "Running Summary",
                "Percentage": "Percentage",
                "Max": "Max",
                "Min": "Min",
                "Median": "Median",
                "Var": "Variance",
                "VarP": "Population Variance",
                "StdDev": "Standard Deviation",
                "StdDevP": "Standard Population Deviation",
                "DAvg": "Average (Distinct)",
                "DCount": "Count (Distinct)",
                "DSum": "Summary (Distinct)",
                "DVar": "Variance (Distinct)",
                "DVarP": "Population Variance (Distinct)",
                "DStdDev": "Standard Deviation (Distinct)",
                "DStdDevP": "Standard Population Deviation (Distinct)",
                "RecordNumber": "Record Number",
                "Custom": "Custom"
            };
            Report.summarySerializationInfo = [
                { propertyName: "ignoreNullValues", modelName: "@IgnoreNullValues", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Ignore Null Values" },
                { propertyName: "formatString", modelName: "@FormatString", defaultVal: "", editor: Designer.Widgets.editorTemplates.formatEditor, displayName: "Format String" },
                {
                    propertyName: "Running", modelName: "@Running", defaultVal: "None",
                    editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Running",
                    values: {
                        "None": "None",
                        "Group": "Group",
                        "Report": "Report",
                        "Page": "Page"
                    }
                },
                {
                    propertyName: "Func", modelName: "@Func", defaultVal: "Sum",
                    editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Function",
                    values: Report.summaryFunctionValues
                }
            ];
            Report.summary = { propertyName: "Summary", modelName: "Summary", info: Report.summarySerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, displayName: "Summary" };
            Report.reportPrintOptions = { propertyName: "reportPrintOptions", modelName: "ReportPrintOptions", info: Report.reportPrintOptionsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, displayName: "Report Print Options" };
            Report.afterPrint = { propertyName: "onAfterPrint", modelName: "@OnAfterPrint", displayName: "After Print", editor: Report.editorTemplates.scriptsBox }, Report.beforePrint = { propertyName: "onBeforePrint", modelName: "@OnBeforePrint", displayName: "Before Print", editor: Report.editorTemplates.scriptsBox }, Report.sizeChanged = { propertyName: "onSizeChanged", modelName: "@OnSizeChanged", displayName: "Size Changed", editor: Report.editorTemplates.scriptsBox };
            Report.truncatedControlEventsSerializationInfo = [
                Report.afterPrint, Report.beforePrint,
                { propertyName: "onLocationChanged", modelName: "@OnLocationChanged", displayName: "Location Changed", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onParentChanged", modelName: "@OnParentChanged", displayName: "Parent Changed", editor: Report.editorTemplates.scriptsBox },
            ];
            Report.truncatedControlScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: Report.truncatedControlEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var commonEventsSerializationInfo = Report.truncatedControlEventsSerializationInfo.concat([Report.sizeChanged,
                { propertyName: "onDraw", modelName: "@OnDraw", displayName: "Draw", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onEvaluateBinding", modelName: "@OnEvaluateBinding", displayName: "Evaluate Binding", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrintOnPage", modelName: "@OnPrintOnPage", displayName: "Print on Page", editor: Report.editorTemplates.scriptsBox }
            ]);
            Report.commonScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: commonEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var controlEventsSerializationInfo = commonEventsSerializationInfo.concat([
                { propertyName: "onHtmlItemCreated", modelName: "@OnHtmlItemCreated", displayName: "Html Item Created", editor: Report.editorTemplates.scriptsBox }
            ]);
            Report.controlScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: controlEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var textControlEventsSerializationInfo = controlEventsSerializationInfo.concat([
                { propertyName: "onTextChanged", modelName: "@OnTextChanged", displayName: "Text Changed", editor: Report.editorTemplates.scriptsBox }
            ]);
            Report.textControlScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: textControlEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var labelEventsSerializationInfo = textControlEventsSerializationInfo.concat([
                { propertyName: "onSummaryCalculated", modelName: "@OnSummaryCalculated", displayName: "Summary Calculated", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onSummaryGetResult", modelName: "@OnSummaryGetResult", displayName: "Summary Get Result", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onSummaryReset", modelName: "@OnSummaryReset", displayName: "Summary Reset", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onSummaryRowChanged", modelName: "@OnSummaryRowChanged", displayName: "Summary Row Changed", editor: Report.editorTemplates.scriptsBox }
            ]);
            Report.labelScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: labelEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var specificChartEventsSerializationInfo = [
                { propertyName: "onCustomDrawSeries", modelName: "@OnCustomDrawSeries", displayName: "Custom Draw a Series", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomDrawSeriesPoint", modelName: "@OnCustomDrawSeriesPoint", displayName: "Custom Draw a Series Point", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomDrawCrosshair", modelName: "@OnCustomDrawCrosshair", displayName: "Custom Draw Crosshair", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomDrawAxisLabel", modelName: "@OnCustomDrawAxisLabel", displayName: "Custom Draw an Axis Label", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomPaint", modelName: "@OnCustomPaint", displayName: "Custom Paint", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onBoundDataChanged", modelName: "@OnBoundDataChanged", displayName: "Bound Data Changed", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPieSeriesPointExploded", modelName: "@OnPieSeriesPointExploded", displayName: "Pie Series Point Exploded", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onAxisScaleChanged", modelName: "@OnAxisScaleChanged", displayName: "Axis Scale Changed", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onAxisWholeRangeChanged", modelName: "@OnAxisWholeRangeChanged", displayName: "Axis Whole Range Changed", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onAxisVisualRangeChanged", modelName: "@OnAxisVisualRangeChanged", displayName: "Axis Visual Range Changed", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onSmallChartTextShowing", modelName: "@OnSmallChartTextShowing", displayName: "Small Chart Text Showing", editor: Report.editorTemplates.scriptsBox }
            ], chartEventsSerializationInfo = controlEventsSerializationInfo.concat(specificChartEventsSerializationInfo);
            Report.chartScripts = { propertyName: "scripts", modelName: "Scripts", info: chartEventsSerializationInfo, displayName: "Scripts", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var specificPivotEventsSerializationInfo = [
                { propertyName: "onCustomCellDisplayText", modelName: "@OnCustomCellDisplayText", displayName: "Custom Cell Display Text", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomCellValue", modelName: "@OnCustomCellValue", displayName: "Custom Cell Value", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomColumnWidth", modelName: "@OnCustomColumnWidth", displayName: "Custom Column Width", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomFieldSort", modelName: "@OnCustomFieldSort", displayName: "Custom Field Sort", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomFieldValueCells", modelName: "@OnCustomFieldValueCells", displayName: "Custom Field Value Cells", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomGroupInterval", modelName: "@OnCustomGroupInterval", displayName: "Custom Group Interval", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomRowHeight", modelName: "@OnCustomRowHeight", displayName: "Custom Row Height", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomSummary", modelName: "@OnCustomSummary", displayName: "Custom Summary", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomUnboundFieldData", modelName: "@OnCustomUnboundFieldData", displayName: "Custom Unbound Field Data", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onFieldValueDisplayText", modelName: "@OnFieldValueDisplayText", displayName: "Field Value Display Text", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrefilterCriteriaChanged", modelName: "@OnPrefilterCriteriaChanged", displayName: "Prefilter Criteria Changed", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrintCell", modelName: "@OnPrintCell", displayName: "Print Cell", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrintFieldValue", modelName: "@OnPrintFieldValue", displayName: "Print Field Value", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrintHeader", modelName: "@OnPrintHeader", displayName: "Print Header", editor: Report.editorTemplates.scriptsBox }
            ], pivotEventsSerializationInfo = Report.truncatedControlEventsSerializationInfo.concat([Report.sizeChanged], specificPivotEventsSerializationInfo);
            Report.pivotScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: pivotEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.subreportScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: Report.truncatedControlEventsSerializationInfo.concat(Report.sizeChanged), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var commonBandEventsSerializationInfo = [Report.afterPrint, Report.beforePrint];
            Report.commonBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: commonBandEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var onBandLevelChanged = { propertyName: "onBandLevelChanged", modelName: "@OnBandLevelChanged", displayName: "Band Level Changed", editor: Report.editorTemplates.scriptsBox }, groupBandEventsSerializationInfo = commonBandEventsSerializationInfo.concat([onBandLevelChanged]);
            Report.groupBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: groupBandEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var onSortingSummaryGetResult = { propertyName: "onSortingSummaryGetResult", modelName: "@OnSortingSummaryGetResult", displayName: "Sorting Summary Get Result", editor: Report.editorTemplates.scriptsBox }, onSortingSummaryReset = { propertyName: "onSortingSummaryReset", modelName: "@OnSortingSummaryReset", displayName: "Sorting Summary Reset", editor: Report.editorTemplates.scriptsBox }, onSortingSummaryRowChanged = { propertyName: "onSortingSummaryRowChanged", modelName: "@OnSortingSummaryRowChanged", displayName: "Sorting Summary RowChanged", editor: Report.editorTemplates.scriptsBox }, groupHeaderBandEventsSerializationInfo = groupBandEventsSerializationInfo.concat([onSortingSummaryGetResult, onSortingSummaryReset, onSortingSummaryRowChanged]);
            Report.groupHeaderBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: groupHeaderBandEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var onBandHeightChanged = { propertyName: "onBandHeightChanged", modelName: "@OnBandHeightChanged", displayName: "Band's Height Changed", editor: Report.editorTemplates.scriptsBox }, onDataSourceRowChanged = { propertyName: "onDataSourceRowChanged", modelName: "@OnDataSourceRowChanged", displayName: "Data Source's Row Changed", editor: Report.editorTemplates.scriptsBox }, onDataSourceDemanded = { propertyName: "onDataSourceDemanded", modelName: "@OnDataSourceDemanded", displayName: "Data Source Demanded", editor: Report.editorTemplates.scriptsBox }, detailReportBandEventsSerializationInfo = commonBandEventsSerializationInfo.concat([onBandHeightChanged, onDataSourceRowChanged, onDataSourceDemanded]);
            Report.detailReportBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: detailReportBandEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var onFillEmptySpace = { propertyName: "onFillEmptySpace", modelName: "@OnFillEmptySpace", displayName: "Fill Empty Space", editor: Report.editorTemplates.scriptsBox }, onPrintProgress = { propertyName: "onPrintProgress", modelName: "@OnPrintProgress", displayName: "Print Progress", editor: Report.editorTemplates.scriptsBox }, onParametersRequestBeforeShow = { propertyName: "onParametersRequestBeforeShow", modelName: "@OnParametersRequestBeforeShow", displayName: "Parameters Request Before Show", editor: Report.editorTemplates.scriptsBox }, onParametersRequestValueChanged = { propertyName: "onParametersRequestValueChanged", modelName: "@OnParametersRequestValueChanged", displayName: "Parameters Changed", editor: Report.editorTemplates.scriptsBox }, onParametersRequestSubmit = { propertyName: "onParametersRequestSubmit", modelName: "@OnParametersRequestSubmit", displayName: "Parameters Submitted", editor: Report.editorTemplates.scriptsBox }, reportEventsSerializationInfo = detailReportBandEventsSerializationInfo.concat([
                onFillEmptySpace, onPrintProgress, onParametersRequestBeforeShow, onParametersRequestValueChanged, onParametersRequestSubmit
            ]);
            Report.reportScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: reportEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.allScripts = {
                propertyName: "scripts", displayName: "Scripts", info: labelEventsSerializationInfo.concat(specificChartEventsSerializationInfo, specificPivotEventsSerializationInfo, [
                    onBandLevelChanged, onSortingSummaryGetResult, onSortingSummaryReset, onSortingSummaryRowChanged, onBandHeightChanged, onDataSourceRowChanged, onDataSourceDemanded,
                    onFillEmptySpace, onPrintProgress, onParametersRequestBeforeShow, onParametersRequestValueChanged, onParametersRequestSubmit
                ]), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor
            };
            Report.lineWidth = { propertyName: "lineWidth", modelName: "@LineWidth", defaultVal: 1, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Line Width" };
            Report.lineStyle = {
                propertyName: "lineStyle",
                modelName: "@LineStyle", defaultVal: "Solid", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Line Style",
                values: Report.lineStyleValues
            };
            Report.dpi = { propertyName: "dpi", modelName: "@Dpi", defaultVal: 100, from: Designer.floatFromModel };
            var borderWidthSerializable = { propertyName: "borderWidthSerializable", modelName: "@BorderWidthSerializable", displayName: "Border Width", from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, sides = $.extend({ displayName: "Borders", editor: Designer.Widgets.editorTemplates.borders }, Report.previewSides);
            Report.formattingSerializationsInfo = [Report.backColor, sides, Report.borderColor, Report.borderDashStyle, borderWidthSerializable,
                Report.foreColor, Report.font, Report.textAlignment, Report.defaultBooleanVisible
            ].concat(Report.paddingGroup);
            Report.conditionObj = { propertyName: "conditionObj", displayName: "Condition", editor: Designer.Widgets.editorTemplates.expressionEditor }, Report.formatting = { propertyName: "formatting", modelName: "Formatting", displayName: "Formatting", info: Report.formattingSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.formattingRuleSerializationsInfo = [
                { propertyName: "name", modelName: "@Name", displayName: "Name", editor: DevExpress.JS.Widgets.editorTemplates.text, validationRules: Designer.nameValidationRules },
                { propertyName: "condition", modelName: "@Condition", displayName: "Condition", defaultVal: "" },
                Report.conditionObj,
                Report.dataSource, Report.dataMember,
                Report.formatting
            ];
            Report.formattingRuleLinks = {
                propertyName: "formattingRuleLinks", modelName: "FormattingRuleLinks", displayName: "Formatting Rules", array: true,
                editor: Report.editorTemplates.formattingRule, addHandler: DevExpress.Designer.Report.FormattingRule.createNew,
                displayPropertyName: "name"
            };
            Report.canPublish = { propertyName: "canPublish", modelName: "@CanPublish", displayName: "Can Publish", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.rtl = {
                propertyName: "rightToLeft", modelName: "@RightToLeft", displayName: "Right To Left", defaultVal: "Inherit", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "No": "No",
                    "Yes": "Yes",
                    "Inherit": "Inherit"
                }
            };
            Report.sizeLocation = [Report.size, Report.location];
            Report.bordersProperties = [Report.borders, Report.borderWidth, Report.borderDashStyle, Report.borderColor];
            Report.baseControlProperties = [Report.name, Report.visible, Report.dpi, Report.lockedInUserDesigner, Report.tag];
            Report.commonBandProperties = [Report.backColor, Report.formattingRuleLinks].concat(Report.baseControlProperties, Report.bordersProperties, Report.paddingGroup);
            Report.commonControlProperties = [Report.styleName, Report.evenStyleName, Report.oddStyleName, Report.stylePriority, Report.canPublish].concat(Report.commonBandProperties);
            Report.fontGroup = [Report.font, Report.foreColor];
            Report.bookmarkGroup = [Report.bookmark, Report.bookmarkParent];
            Report.navigationGroup = [Report.navigateUrl, Report.target].concat(Report.bookmarkGroup);
            Report.datasourcePrintOptionsGroup = [Report.dataSource, Report.dataMember, Report.dataAdapter, Report.filterString, Report.filterStringEditable, Report.reportPrintOptions];
            Report.processGroup = [Report.processDuplicatesMode, Report.processDuplicatesTarget, Report.processNullValues];
            Report.canGrowShrinkGroup = [Report.canGrow, Report.canShrink];
            Report.labelGroup = [Report.textAlignment, Report.text, Report.textArea, Report.nullValueText, Report.keepTogetherDefaultValueFalse, Report.summary, Report.multiline, Report.angle, Report.wordWrap, Report.xlsxFormatString, Report.rtl].concat(Report.commonControlProperties, Report.fontGroup, Report.navigationGroup, Report.canGrowShrinkGroup, Report.processGroup);
            Report.editOptions = {
                propertyName: "editOptions",
                modelName: "EditOptions",
                displayName: "Edit Options",
                editor: DevExpress.JS.Widgets.editorTemplates.objecteditor,
                from: function (model, serializer) { return new Report.EditOptions(model, serializer); },
                toJsonObject: function (value, serializer) { return serializer.serialize(value); }
            };
            Report.textEditOptions = $.extend({}, Report.editOptions, {
                propertyName: "textEditOptions",
                from: function (model, serializer) { return new Report.TextEditOptions(model, serializer); }
            });
            Report.labelSerializationsInfo = [
                Report.textEditOptions,
                Report.autoWidth, Report.anchorVertical, Report.anchorHorizontal, Report.labelScripts, Report.textTrimming,
                Report.dataBindings(["Text", "NavigateUrl", "Tag", "Bookmark"]),
                Report.defaultDataBinding("Text")
            ].concat(Report.sizeLocation, Report.labelGroup);
            Report.panelSerializationsInfo = [
                Report.canGrow, Report.canShrink, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal, Report.controlScripts,
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
                { propertyName: "controls", modelName: "Controls", array: true },
                Report.rtl
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup);
            Report.rtf = { propertyName: "_rtf", defaultVal: "", displayName: "RTF", editor: DevExpress.JS.Widgets.editorTemplates.stringArray }, Report.textRtf = { propertyName: "textRtf", defaultVal: "", displayName: "Text", editor: DevExpress.JS.Widgets.editorTemplates.stringArray }, Report.serializableRtfString = { propertyName: "_serializableRtfString", modelName: "@SerializableRtfString", displayName: "Load file", editor: DevExpress.JS.Widgets.editorTemplates.file };
            Report.richTextSerializationsInfo = [
                Report.serializableRtfString,
                Report.rtf, Report.textRtf,
                Report.nullValueText, Report.keepTogetherDefaultValueFalse, Report.anchorVertical, Report.anchorHorizontal, Report.textControlScripts,
                Report.dataBindings(["Bookmark", "Html", "NavigateUrl", "Rtf", "Tag"]),
                Report.defaultDataBinding("Rtf"),
            ].concat(Report.sizeLocation, Report.fontGroup, Report.commonControlProperties, Report.navigationGroup, Report.processGroup, Report.canGrowShrinkGroup);
            Report.unknownSerializationsInfo = [].concat(Report.baseControlProperties, Report.sizeLocation);
            ;
            Report.dataBindingsSerializationInfo = [
                { propertyName: "ActualValue", editor: Report.editorTemplates.dataBinding, displayName: "Actual Value" },
                { propertyName: "Bookmark", editor: Report.editorTemplates.dataBinding, displayName: "Bookmark" },
                { propertyName: "CheckState", editor: Report.editorTemplates.dataBinding, displayName: "Check State" },
                { propertyName: "Html", editor: Report.editorTemplates.dataBinding, displayName: "HTML" },
                { propertyName: "Image", editor: Report.editorTemplates.dataBinding, displayName: "Image" },
                { propertyName: "ImageUrl", editor: Report.editorTemplates.dataBinding, displayName: "Image URL" },
                { propertyName: "Maximum", editor: Report.editorTemplates.dataBinding, displayName: "Maximum" },
                { propertyName: "Minimum", editor: Report.editorTemplates.dataBinding, displayName: "Minimum" },
                { propertyName: "NavigateUrl", editor: Report.editorTemplates.dataBinding, displayName: "Navigation URL" },
                { propertyName: "Rtf", editor: Report.editorTemplates.dataBinding, displayName: "RTF" },
                { propertyName: "Tag", editor: Report.editorTemplates.dataBinding, displayName: "Tag" },
                { propertyName: "TargetValue", editor: Report.editorTemplates.dataBinding, displayName: "Target Value" },
                { propertyName: "Text", editor: Report.editorTemplates.dataBinding, displayName: "Text" }
            ];
            Report.popularPropertiesLabel = ["text", "textArea", "defaultDataBinding", "Summary", "angle", "bookmark", "bookmarkParent", "autoWidth", "canGrow", "canShrink", "multiline", "wordWrap"];
            Report.popularPropertiesRichText = ["defaultDataBinding", "bookmark", "bookmarkParent", "canGrow", "canShrink"];
            Report.rtlLayout = {
                propertyName: "rtlLayout", modelName: "@RightToLeftLayout", displayName: "Right To Left Layout", defaultVal: "No", editor: Report.editorTemplates.reportRtlProperty,
                values: {
                    "No": "No",
                    "Yes": "Yes"
                }
            };
            Report.rtlReport = $.extend({}, Report.rtl, { defaultVal: "No", editor: Report.editorTemplates.reportRtlProperty });
            Report.imageType = {
                propertyName: "imageType", displayName: "Image Type", modelName: "@ImageType", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Metafile", values: {
                    "Metafile": "Metafile",
                    "Bitmap": "Bitmap"
                }
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Anchoring = (function () {
                function Anchoring(subscrible, model, anchoringProperty) {
                    this.state = Anchoring.states.complete;
                    this.anchoring = anchoringProperty;
                    this.start(subscrible, model);
                }
                Anchoring.prototype.start = function (subscrible, model) {
                    var _this = this;
                    this.subscribtion && this.subscribtion.dispose();
                    var oldVal = ko.observable(subscrible());
                    this.subscribtion = subscrible.subscribe(function (newVal) {
                        if (_this.state !== Anchoring.states.fromControls) {
                            _this.state = Anchoring.states.inProgress;
                            _this.anchorSubscribtion(newVal, oldVal, model);
                        }
                        oldVal(newVal);
                        _this.state = Anchoring.states.complete;
                    });
                };
                Anchoring.states = {
                    inProgress: "inProgress",
                    complete: "complete",
                    fromControls: "fromControls"
                };
                return Anchoring;
            })();
            Report.Anchoring = Anchoring;
            var VerticalAcnhoring = (function (_super) {
                __extends(VerticalAcnhoring, _super);
                function VerticalAcnhoring(subscrible, model, anchoringProperty) {
                    var _this = this;
                    _super.call(this, subscrible, model, anchoringProperty);
                    this.anchorSubscribtion = function (parentSizeValue, oldValue, model) {
                        if (Designer.checkModelReady(model.root) && isFinite(oldValue()) && oldValue()) {
                            if (_this.anchoring() === "Both") {
                                var newSize = model.size.height() + parentSizeValue - oldValue();
                                model.size.height(newSize > 0 ? newSize : 1);
                            }
                            if (_this.anchoring() === "Bottom") {
                                var newLocation = model.location.y() + parentSizeValue - oldValue();
                                model.location.y(newLocation > 0 ? newLocation : 0);
                            }
                        }
                    };
                    model.size.height.subscribe(function (newVal) {
                        if (_this.state === Anchoring.states.complete) {
                            _this.state = Anchoring.states.fromControls;
                        }
                    });
                    model.location.y.subscribe(function (newVal) {
                        if (_this.state === Anchoring.states.complete) {
                            _this.state = Anchoring.states.fromControls;
                        }
                    });
                }
                return VerticalAcnhoring;
            })(Anchoring);
            Report.VerticalAcnhoring = VerticalAcnhoring;
            var HorizontalAnchoring = (function (_super) {
                __extends(HorizontalAnchoring, _super);
                function HorizontalAnchoring(subscrible, model, anchoringProperty) {
                    var _this = this;
                    _super.call(this, subscrible, model, anchoringProperty);
                    this.anchorSubscribtion = function (parentSizeValue, oldValue, model) {
                        if (Designer.checkModelReady(model.root) && isFinite(oldValue()) && oldValue()) {
                            if (_this.anchoring() === "Both") {
                                var newSize = model.size.width() + parentSizeValue - oldValue();
                                model.size.width(newSize > 0 ? newSize : 1);
                            }
                            if (_this.anchoring() === "Right") {
                                var newLocation = model.location.x() + parentSizeValue - oldValue();
                                model.location.x(newLocation > 0 ? newLocation : 0);
                            }
                        }
                    };
                }
                return HorizontalAnchoring;
            })(Anchoring);
            Report.HorizontalAnchoring = HorizontalAnchoring;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.stylesProperties = ["foreColor", "borderColor", "borderWidth", "backColor", "borders", "borderDashStyle", "padding", "textAlignment", "font"];
            var ReportElementViewModel = (function (_super) {
                __extends(ReportElementViewModel, _super);
                function ReportElementViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.initialize();
                    this.formattingRuleLinks = DevExpress.JS.Utils.deserializeArray(model.FormattingRuleLinks, function (item) { return new Report.FormattingRuleLink(item, serializer); });
                    var _generateProperty = function (propertyName, stylePriorityName) {
                        _this["_" + propertyName] = ko.observable(_this[propertyName]());
                        _this[propertyName] = ko.computed({
                            read: function () { return _this._getStyleProperty(propertyName, stylePriorityName, _this.root); },
                            write: function (val) {
                                if (_this._getStyleProperty(propertyName, stylePriorityName, _this.root) !== val) {
                                    if (_this.stylePriority && _this.stylePriority[stylePriorityName]) {
                                        _this.stylePriority[stylePriorityName](false);
                                    }
                                    _this["_" + propertyName](val);
                                }
                            }
                        });
                    };
                    var defaultBinding = this.getInfo().filter(function (value) { return value["bindingName"]; })[0];
                    if (defaultBinding) {
                        this[defaultBinding.propertyName] = this.dataBindings()["findBinding"](defaultBinding["bindingName"]);
                    }
                    this.getStyleProperty = function (propertyName, stylePriorityName) { return _this._getStyleProperty(propertyName, stylePriorityName, _this.root); };
                    for (var i = 0; i < Report.stylesProperties.length; i++) {
                        if (this[Report.stylesProperties[i]]) {
                            var stylePriorityName = this._getStylePriorityPropertyName(Report.stylesProperties[i]);
                            _generateProperty(Report.stylesProperties[i], stylePriorityName);
                        }
                    }
                    ;
                    if (this.padding) {
                        this._createPaddingDependencies();
                    }
                    this.toggleUseStyle = function (propertyName) {
                        var styleName = _this._getStylePriorityPropertyName(propertyName);
                        _this.stylePriority[styleName](!_this.stylePriority[styleName]());
                    };
                    this.actions.push({ action: this.toggleUseStyle, title: Designer.getLocalization("Style Priority", "DevExpress.XtraReports.UI.XRControl.StylePriority"), visible: function (name) { return _this.isStyleProperty(name); } });
                    this.dsHelperProvider = function () { return _this.root["dataSourceHelper"] && _this.root["dataSourceHelper"](); };
                    this.lockedInUserDesigner = ko.computed({
                        read: function () {
                            var parent = _this.parentModel(), parentLocked = (parent && parent["lockedInUserDesigner"]) ? parent["lockedInUserDesigner"]() : false;
                            return _this._lockedInUserDesigner() || parentLocked;
                        },
                        write: function (newValue) { return _this._lockedInUserDesigner(newValue); }
                    });
                }
                ReportElementViewModel.prototype._getStylePriorityPropertyName = function (propertyName) {
                    propertyName = propertyName === "paddingObj" ? "padding" : propertyName;
                    return "use" + propertyName.charAt(0).toUpperCase() + propertyName.substr(1);
                };
                ReportElementViewModel.prototype._getStyle = function (root) {
                    var styleName = this.styleName && this.styleName(), style = styleName && root && root.findStyle && root.findStyle(styleName);
                    return style;
                };
                ReportElementViewModel.prototype._checkModify = function (target, propertyName) {
                    var property = target && (target["_" + propertyName] || target[propertyName]);
                    return ko.unwrap(property) && target.isPropertyModified(propertyName);
                };
                ReportElementViewModel.prototype._getStyleProperty = function (propertyName, stylePriorityName, root) {
                    if (this.stylePriority && this.stylePriority[stylePriorityName] && this.stylePriority[stylePriorityName]() || !this._checkModify(this, propertyName)) {
                        var style = this._getStyle(root);
                        if (this._checkModify(style, propertyName)) {
                            return style[propertyName]();
                        }
                    }
                    if (this._checkModify(this, propertyName)) {
                        return this["_" + propertyName]();
                    }
                    var defaultValue = this.getPropertyDefaultValue(propertyName);
                    if (defaultValue && !(defaultValue instanceof Object)) {
                        return defaultValue;
                    }
                    var parent = this.parentModel();
                    if (parent) {
                        return parent.getStyleProperty(propertyName, stylePriorityName);
                    }
                };
                ReportElementViewModel.prototype._zOrderChange = function (bringToFront) {
                    var parent = this.parentModel(), controlContainer = parent && parent[this.getControlContainerName()];
                    if (controlContainer) {
                        var itemIndex = controlContainer().indexOf(this);
                        controlContainer.splice(itemIndex, 1);
                        controlContainer.splice((bringToFront ? 0 : controlContainer().length), 0, this);
                    }
                };
                ReportElementViewModel.prototype._createPaddingDependencies = function () {
                    var _this = this;
                    this.paddingObj = new Designer.Widgets.PaddingModel();
                    this.paddingObj.applyFromString(this["padding"]());
                    this.paddingObj.dpi = ko.computed(function () { return _this.dpi && _this.dpi(); });
                    var isUpdate = false;
                    var lock = function (action) {
                        if (!isUpdate) {
                            isUpdate = true;
                            action();
                            isUpdate = false;
                        }
                    };
                    this.padding.subscribe(function (newVal) { return lock(function () { return _this.paddingObj.applyFromString(newVal); }); });
                    ["left", "right", "top", "bottom"].forEach(function (name) {
                        _this.paddingObj[name].subscribe(function (newVal) {
                            if (_this.root["isModelReady"] && _this.root["isModelReady"]() || !_this.root["isModelReady"])
                                lock(function () { return _this.padding(_this.paddingObj.toString()); });
                        });
                    });
                    this.paddingObj.dpi.subscribe(function (newVal) { return lock(function () {
                        if (_this["_padding"]())
                            _this["_padding"](_this.paddingObj.toString());
                    }); });
                    this.paddingObj["resetValue"] = function () {
                        lock(function () {
                            ["left", "right", "top", "bottom"].forEach(function (name) { return _this.paddingObj[name](null); });
                            _this.padding(_this.paddingObj.toString());
                            _this.paddingObj.applyFromString(_this.padding());
                        });
                    };
                };
                ReportElementViewModel.prototype.getControlFactory = function () {
                    return DevExpress.Designer.Report.controlsFactory;
                };
                ReportElementViewModel.prototype.addChild = function (control) {
                    if (control.controlType === "XRTableOfContents") {
                        var band;
                        if (Report.isHeaderOrFooterBandType(this)) {
                            var tocAlreadyExists = Report.bandControlsSomeXRTableOfContents(this);
                            if (tocAlreadyExists) {
                                throw new Error("Only one TOC can be added!!!");
                                return;
                            }
                        }
                        else if (band = Report.ControlViewModel.getNearestBand(this)) {
                            if (Report.isHeaderOrFooterBandType(band)) {
                                band.addChild(control);
                            }
                            return;
                        }
                        else {
                            throw new Error("TOC can be added only to ReportHeaderBand or ReportFooterBand!!!");
                            return;
                        }
                    }
                    _super.prototype.addChild.call(this, control);
                };
                ReportElementViewModel.prototype.isStyleProperty = function (propertyName) {
                    var _this = this;
                    propertyName = propertyName === "paddingObj" ? "padding" : propertyName;
                    return this.stylePriority && Report.stylePrioritySerializationInfo.some(function (info) { return info.propertyName == _this._getStylePriorityPropertyName(propertyName); });
                };
                ReportElementViewModel.prototype.isResettableProperty = function (propertyName) {
                    return _super.prototype.isResettableProperty.call(this, propertyName) && propertyName !== "dataBindings";
                };
                ReportElementViewModel.prototype.getActionClassName = function (propertyName) {
                    var result = "";
                    if (this.isStyleProperty(propertyName)) {
                        result += this.stylePriority[this._getStylePriorityPropertyName(propertyName)]() ? " dxrd-editormenu-usestyle" : "";
                    }
                    if (this.isPropertyModified(propertyName)) {
                        result += " dxrd-editormenu-modified";
                    }
                    return result;
                };
                ReportElementViewModel.prototype.className = function () {
                    return this.controlType.toLowerCase();
                };
                ReportElementViewModel.prototype.initialize = function () {
                    if (!this.size) {
                        this.size = new Designer.Size(0, 0);
                    }
                };
                ReportElementViewModel.prototype.getPath = function (propertyName) {
                    return "";
                };
                ReportElementViewModel.prototype.isPropertyDisabled = function (name) {
                    return this.lockedInUserDesigner();
                };
                ReportElementViewModel.prototype.sendToBack = function () {
                    this._zOrderChange(false);
                };
                ReportElementViewModel.prototype.bringToFront = function () {
                    this._zOrderChange(true);
                };
                ReportElementViewModel.prototype.getControlContainerName = function () { return "controls"; };
                Object.defineProperty(ReportElementViewModel.prototype, "dpi", {
                    get: function () { return this.root !== this ? this.root.dpi : this._innerDpi; },
                    set: function (value) { this._innerDpi = value; },
                    enumerable: true,
                    configurable: true
                });
                ReportElementViewModel.prototype.rtl = function () {
                    var rtl = ko.unwrap(this["rightToLeft"]);
                    if (rtl === "Yes")
                        return true;
                    if (this.parentModel() && (!rtl || rtl === "Inherit"))
                        return this.parentModel().rtl();
                    return false;
                };
                return ReportElementViewModel;
            })(Designer.ElementViewModel);
            Report.ReportElementViewModel = ReportElementViewModel;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ControlViewModel = (function (_super) {
                __extends(ControlViewModel, _super);
                function ControlViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this.isPropertyVisible = function (name) {
                        if (_this.multiline && _this.multiline()) {
                            if (name === "text")
                                return false;
                        }
                        else {
                            if (name === "textArea")
                                return false;
                        }
                        return true;
                    };
                    this.textArea = this.text;
                    this.controls = Designer.deserializeChildArray(control.Controls, this, function (childControl) { return _this.createControl(childControl, serializer); });
                    if (this.anchorVertical || this.anchorHorizontal) {
                        this.anchoring(parent);
                        this._disposables.push(this.parentModel.subscribe(function (newParent) {
                            if (_this.vertAnchoring && _this.horAnchoring && newParent) {
                                _this.vertAnchoring.start(newParent.size.height, _this);
                                _this.horAnchoring.start(newParent.size.width, _this);
                            }
                            else {
                                _this.anchoring(newParent);
                            }
                        }));
                    }
                    this.hasBindings = ko.pureComputed(function () {
                        var bindings = _this.dataBindings && _this.dataBindings();
                        return !!bindings && bindings.filter(function (dataBinding) { return !dataBinding.isEmpty(); }).length > 0;
                    });
                }
                ControlViewModel.getNearestBand = function (target) {
                    var bandModel = null;
                    var model = target;
                    do {
                        if (model instanceof Report.BandViewModel)
                            bandModel = model;
                        model = model.parentModel();
                    } while (!bandModel && model);
                    return bandModel;
                };
                ControlViewModel.prototype.anchoring = function (parent) {
                    if (parent) {
                        this.vertAnchoring = new Report.VerticalAcnhoring(parent.size.height, this, this.anchorVertical),
                            this.horAnchoring = new Report.HorizontalAnchoring(parent.size.width, this, this.anchorHorizontal);
                    }
                };
                ControlViewModel.prototype.getNearestParent = function (target) {
                    if (["XRPageBreak", "XRPivotGrid", "XRSubreport", "XRTableOfContents"].indexOf(this.controlType) !== -1) {
                        return ControlViewModel.getNearestBand(target);
                    }
                    else {
                        return _super.prototype.getNearestParent.call(this, target);
                    }
                };
                return ControlViewModel;
            })(Report.ReportElementViewModel);
            Report.ControlViewModel = ControlViewModel;
            var ControlSurfaceBase = (function (_super) {
                __extends(ControlSurfaceBase, _super);
                function ControlSurfaceBase(control, context, unitProperties) {
                    var _this = this;
                    _super.call(this, control, context, unitProperties);
                    this.delta = 0.5;
                    this.isSnapTarget = true;
                    this.template = "dxrd-control";
                    this.selectiontemplate = "dxrd-control-selection";
                    this.contenttemplate = "dxrd-control-content";
                    this.displayNameParameters = ko.pureComputed(function () {
                        var control = _this.getControlModel();
                        var parameters = {
                            text: null,
                            dataSource: null,
                            dataMember: null,
                            dataMemberOffset: null
                        };
                        if (control["controls"] && control["controls"]().length !== 0) {
                            parameters.text = "";
                        }
                        else if (_this.hasBindings) {
                            var textBinding = Designer.getFirstItemByPropertyValue(control["dataBindings"](), "propertyName", "Text");
                            if (textBinding && textBinding.dataMember()) {
                                var dataMember = textBinding.dataMember();
                                var dataSource = textBinding.dataSource();
                                var rootDataMember = control.root["dataMember"] && control.root["dataMember"]() || "";
                                var rootDataSource = control.root["dataSource"] && control.root["dataSource"]() || null;
                                if ((!dataSource || dataSource === rootDataSource) && dataMember.indexOf(rootDataMember) === 0 && dataMember.charAt(rootDataMember.length) === ".") {
                                    parameters.dataMemberOffset = rootDataMember;
                                    parameters.dataMember = dataMember.substr(rootDataMember.length + 1);
                                }
                                else {
                                    parameters.dataMemberOffset = "";
                                    parameters.dataMember = textBinding.dataMember();
                                }
                                parameters.dataSource = dataSource || rootDataSource;
                            }
                            else {
                                parameters.text = _this.displayText();
                            }
                        }
                        else {
                            parameters.text = _this.displayText();
                        }
                        return parameters;
                    });
                    this.displayName = ko.pureComputed(function () {
                        var parameters = _this.displayNameParameters();
                        return parameters.dataMember ? ("[" + parameters.dataMember + "]") : (parameters.text || "");
                    });
                    this.contentSizes = ko.pureComputed(function () { return _this.cssCalculator.contentSizeCss(_this.rect().width, _this.rect().height, _this._context.zoom()); });
                    this.borderCss = ko.pureComputed(function () {
                        return (!control["borders"] || control["borders"]() === "None") ? { "border": "solid 1px Silver" } : _this.cssCalculator.borderCss(_this._context.zoom());
                    });
                    this.isIntersect = ko.pureComputed(function () {
                        var isThereIntersection = _this.isThereIntersectionWithMargin();
                        if (!isThereIntersection) {
                            isThereIntersection = _this.isThereIntersectionWithCrossBandControls();
                            if (!isThereIntersection) {
                                isThereIntersection = _this.isThereIntersectionWithControls();
                            }
                        }
                        return isThereIntersection;
                    });
                    this.adorntemplate = ko.computed(function () { return _this.getAdornTemplate(); });
                }
                ControlSurfaceBase.prototype.afterUpdateAbsolutePosition = function () {
                    var _this = this;
                    if (this.snapLines().length === 0 && this.isSnapTarget) {
                        var maxHeight = ko.pureComputed(function () { return _this._context["effectiveHeight"] && _this._context["effectiveHeight"]() || _this._context.pageHeight(); }), maxWidth = ko.pureComputed(function () { return _this._context.pageWidth() - _this._context.margins.left(); });
                        this.snapLines.push(new Designer.SnapLine(this.absolutePosition.x, this.absolutePosition.y, true, maxHeight, maxWidth));
                        this.snapLines.push(new Designer.SnapLine(ko.pureComputed(function () { return _this.absolutePosition.x() + _this.rect().width; }), this.absolutePosition.y, true, maxHeight, maxWidth));
                        this.snapLines.push(new Designer.SnapLine(this.absolutePosition.x, this.absolutePosition.y, false, maxHeight, maxWidth));
                        this.snapLines.push(new Designer.SnapLine(this.absolutePosition.x, ko.pureComputed(function () { return _this.absolutePosition.y() + _this.rect().height; }), false, maxHeight, maxWidth));
                    }
                };
                ControlSurfaceBase._appendValue = function (accumulator, value, needToAppend) {
                    if (needToAppend === void 0) { needToAppend = true; }
                    if (needToAppend) {
                        accumulator += accumulator ? (" " + value) : value;
                    }
                    return accumulator;
                };
                ControlSurfaceBase.prototype.checkParent = function (surfaceParent) {
                    var thisParent = this.parent instanceof Report.BandSurface || this.parent instanceof Report.ReportSurface ? null : this.parent;
                    var anotherParent = surfaceParent instanceof Report.BandSurface || this.parent instanceof Report.ReportSurface ? null : surfaceParent;
                    return thisParent === anotherParent;
                };
                ControlSurfaceBase.prototype.select = function (selection, e) {
                    selection.clickHandler(this, e.jQueryEvent);
                };
                ControlSurfaceBase.prototype.isThereIntersection = function (rect1, rect2) {
                    var rect1Right = rect1.right || rect1.left + rect1.width, rect2Right = rect2.right || rect2.left + rect2.width, rect1Bottom = rect1.bottom || rect1.top + rect1.height, rect2Bottom = rect2.bottom || rect2.top + rect2.height;
                    return rect1Right > rect2.left && Math.abs(rect1Right - rect2.left) > this.delta &&
                        rect2Right > rect1.left && Math.abs(rect2Right - rect1.left) > this.delta &&
                        rect1Bottom > rect2.top && Math.abs(rect1Bottom - rect2.top) > this.delta &&
                        rect2Bottom > rect1.top && Math.abs(rect2Bottom - rect1.top) > this.delta;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithParent = function (parentRect, childRect) {
                    var rectWidhtElement = childRect.right || childRect.left + childRect.width, rectHeightElement = childRect.bottom || childRect.top + childRect.height;
                    return rectWidhtElement > parentRect.width && Math.abs(rectWidhtElement - parentRect.width) > this.delta ||
                        rectHeightElement > parentRect.height && Math.abs(rectHeightElement - parentRect.height) > this.delta;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithMargin = function () {
                    var root = this.getRoot(), usefulPageWidth = root.pageWidth() - root.margins.left() - root.margins.right(), right = ko.unwrap(this.getRoot().rtl) && this.container() ? (this.container().rect().width - this.rect().left) : this.rect().right;
                    return right > usefulPageWidth && Math.abs(right - usefulPageWidth) > this.delta;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithCollectionControl = function (currentRect, collectionControls, controlRectProperty) {
                    if (controlRectProperty === void 0) { controlRectProperty = "rect"; }
                    if (this.isThereIntersectionWithParentCollection(currentRect, collectionControls, controlRectProperty)
                        || this.isThereIntersectionWithChildCollection(currentRect, collectionControls, controlRectProperty)
                        || this.isThereIntersectionWithNeighborsCollection(currentRect, collectionControls, controlRectProperty))
                        return true;
                    return false;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithParentCollection = function (currentRect, collectionControls, controlRectProperty) {
                    if (controlRectProperty === void 0) { controlRectProperty = "rect"; }
                    if (this.parent && this.parent instanceof DevExpress.Designer.Report.ControlSurfaceBase &&
                        this.parent[controlRectProperty] && this.isThereIntersectionWithParent(this.parent[controlRectProperty](), currentRect)) {
                        return true;
                    }
                    return false;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithChildCollection = function (currentRect, collectionControls, controlRectProperty) {
                    if (controlRectProperty === void 0) { controlRectProperty = "rect"; }
                    if (this["controls"] && this["controls"]().length > 0 &&
                        this.isThereIntersectionWithChildControls(currentRect, this["controls"](), controlRectProperty)) {
                        return true;
                    }
                    return false;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithNeighborsCollection = function (currentRect, collectionControls, controlRectProperty) {
                    if (controlRectProperty === void 0) { controlRectProperty = "rect"; }
                    for (var i = 0; i < collectionControls.length; i++) {
                        if (this !== collectionControls[i] && this.isThereIntersection(currentRect, collectionControls[i][controlRectProperty]())) {
                            return true;
                        }
                    }
                    return false;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithChildControls = function (currentRect, collectionControls, controlRectProperty) {
                    if (controlRectProperty === void 0) { controlRectProperty = "rect"; }
                    for (var i = 0; i < collectionControls.length; i++) {
                        if (this !== collectionControls[i] && this.isThereIntersectionWithParent(currentRect, collectionControls[i][controlRectProperty]())) {
                            return true;
                        }
                    }
                    return false;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithCrossBandControls = function (currentRect) {
                    if (currentRect === void 0) { currentRect = this.absoluteRect(); }
                    var isThereIntersection = false, crossBandControls = this.getRoot()["crossBandControls"]();
                    if (this.isThereIntersectionWithNeighborsCollection(currentRect, crossBandControls.filter(function (control) { return control.visible() && control.getControlModel().controlType === "XRCrossBandLine"; }), "rect")) {
                        return true;
                    }
                    var crossBandBoxControls = crossBandControls.filter(function (control) { return control.visible() && control.getControlModel().controlType === "XRCrossBandBox"; });
                    for (var crossbandIndex = 0; crossbandIndex < crossBandBoxControls.length; crossbandIndex++) {
                        var rects = crossBandBoxControls[crossbandIndex]._getCrossBandBoxSides();
                        for (var rectIndex = 0; rectIndex < rects.length; rectIndex++) {
                            if (this !== crossBandBoxControls[crossbandIndex] && this.isThereIntersection(currentRect, rects[rectIndex])) {
                                isThereIntersection = true;
                                break;
                            }
                        }
                        ;
                        if (isThereIntersection)
                            break;
                    }
                    ;
                    return isThereIntersection;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithControls = function () {
                    return this.isThereIntersectionWithCollectionControl(this.rect(), this.parent && this.parent.getChildrenCollection() && this.parent.getChildrenCollection()().filter(function (control) { return !control.isIntersectionDeny; }) || []);
                };
                ControlSurfaceBase.prototype.getAdornTemplate = function () {
                    var result = ControlSurface._appendValue("", "dxrd-intersect", this.isIntersect());
                    result = ControlSurface._appendValue(result, "dxrd-control-rtl", this._control.rtl());
                    result = ControlSurface._appendValue(result, "dxrd-image-surface-bounded", this.hasBindings);
                    return result;
                };
                Object.defineProperty(ControlSurfaceBase.prototype, "hasBindings", {
                    get: function () { return !!(this._control["hasBindings"] && this._control["hasBindings"]()); },
                    enumerable: true,
                    configurable: true
                });
                ControlSurfaceBase.prototype.displayText = function () {
                    if (this._control.controlType == "XRPanel")
                        return DevExpress.Designer.getLocalization("Place controls here to keep them together");
                    return this._control["text"] && this._control["text"]() ? this._control["text"]() : "";
                };
                return ControlSurfaceBase;
            })(Designer.SurfaceElementBase);
            Report.ControlSurfaceBase = ControlSurfaceBase;
            var ControlSurface = (function (_super) {
                __extends(ControlSurface, _super);
                function ControlSurface(control, context) {
                    _super.call(this, control, context, ControlSurface._unitProperties);
                    this["multiline"] = control["multiline"] || false;
                }
                ControlSurface._unitProperties = {
                    _height: function (o) {
                        return o.size.height;
                    },
                    _width: function (o) {
                        return o.size.width;
                    },
                    _x: function (o) {
                        return o.location.x;
                    },
                    _y: function (o) {
                        return o.location.y;
                    }
                };
                return ControlSurface;
            })(ControlSurfaceBase);
            Report.ControlSurface = ControlSurface;
            var TodoControlSurface = (function (_super) {
                __extends(TodoControlSurface, _super);
                function TodoControlSurface(control, context) {
                    _super.call(this, control, context);
                    this["controlTypeClass"] = "dxrd-image-todo-" + control.controlType.slice(2).toLowerCase();
                    this.template = "dxrd-todocontrol";
                }
                return TodoControlSurface;
            })(ControlSurface);
            Report.TodoControlSurface = TodoControlSurface;
            ko.bindingHandlers["controlDisplayName"] = {
                update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var value = valueAccessor(), surface = ko.unwrap(value);
                    var parameters = surface.displayNameParameters();
                    var setElementText = function (value) { return $(element).text(value ? ("[" + value + "]") : ""); };
                    if (parameters.dataMember) {
                        setElementText(parameters.dataMember);
                        bindingContext.$root.displayNameProvider()
                            .getDisplayName(parameters.dataSource, parameters.dataMember, parameters.dataMemberOffset, false)
                            .done(function (data) { return setElementText(data); })
                            .fail(function () { return setElementText(parameters.dataMember); });
                    }
                    else {
                        $(element).text(parameters.text || "");
                    }
                }
            };
            ko.bindingHandlers["displayNameExtender"] = {
                init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var value = ko.unwrap(valueAccessor());
                    var displayName = ko.observable("");
                    var displayNameLoader = ko.computed(function () {
                        if (value.dataMember()) {
                            var displayNameProvider = bindingContext.$root.displayNameProvider.peek();
                            var promise = value.path ? displayNameProvider.getDisplayNameByPath(value.path(), value.dataMember()) :
                                displayNameProvider.getDisplayName(value.dataSource(), value.dataMember(), value.dataMemberOffset, value.includeDataSourceName);
                            promise.done(function (data) { return displayName(data); })
                                .fail(function () { return displayName(value.dataMember()); });
                        }
                        else {
                            displayName("");
                        }
                    }).extend({ rateLimit: 0 });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        displayNameLoader.dispose();
                    });
                    var innerBindingContext = bindingContext.extend({ $displayName: displayName });
                    ko.applyBindingsToDescendants(innerBindingContext, element);
                    return { controlsDescendantBindings: true };
                }
            };
            ko.virtualElements.allowedBindings["displayNameExtender"] = true;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var CalculatedField = (function () {
                function CalculatedField(model, serializer) {
                    this.templateName = "dx-treelist-item";
                    this.contenttemplate = "dxrd-calculatedfield-content";
                    this.isList = false;
                    this.isCalculated = true;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                CalculatedField.prototype.getInfo = function () {
                    return calculatedFieldSerializationInfo;
                };
                Object.defineProperty(CalculatedField.prototype, "displayName", {
                    get: function () {
                        return this["displayNameObject"]() || this.calculatedFieldName();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CalculatedField.prototype, "name", {
                    get: function () {
                        return this.calculatedFieldName();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CalculatedField.prototype, "specifics", {
                    get: function () {
                        var type = this.fieldType();
                        if (["Byte", "Int16", "Int32"].indexOf(type) > -1) {
                            return "calcinteger";
                        }
                        else if (["Float", "Double", "Decimal"].indexOf(type) > -1) {
                            return "calcfloat";
                        }
                        else if (["DateTime", "TimeSpan"].indexOf(type) > -1) {
                            return "calcdate";
                        }
                        return "calc" + (type === "None" ? "default" : type.toLowerCase());
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CalculatedField.prototype, "type", {
                    get: function () {
                        return this.fieldType();
                    },
                    enumerable: true,
                    configurable: true
                });
                return CalculatedField;
            })();
            Report.CalculatedField = CalculatedField;
            var calculatedFieldScriptsInfo = [
                { propertyName: "onGetValue", modelName: "@OnGetValue", displayName: "Get a Value", editor: Report.editorTemplates.scriptsBox }
            ];
            var calculatedFieldScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", info: calculatedFieldScriptsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var calculatedFieldSerializationInfo = [
                { propertyName: "calculatedFieldName", modelName: "@Name" },
                { propertyName: "nameEditable", displayName: "Name", editor: DevExpress.JS.Widgets.editorTemplates.text, validationRules: Designer.nameValidationRules },
                Report.displayName,
                {
                    propertyName: "fieldType", modelName: "@FieldType", displayName: "Field Type", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "None", from: Designer.fromEnum,
                    values: {
                        "None": "None",
                        "String": "String",
                        "DateTime": "DateTime",
                        "TimeSpan": "TimeSpan",
                        "Byte": "Byte",
                        "Int16": "Int16",
                        "Int32": "Int32",
                        "Float": "Float",
                        "Double": "Double",
                        "Decimal": "Decimal",
                        "Boolean": "Boolean"
                    }
                },
                Report.dataSource,
                Report.dataMember,
                { propertyName: "expression", modelName: "@Expression", displayName: "Expression", defaultVal: "" },
                { propertyName: "expressionObj", displayName: "Expression", editor: Designer.Widgets.editorTemplates.expressionEditor },
                calculatedFieldScripts
            ];
            var CalculatedFieldsSource = (function (_super) {
                __extends(CalculatedFieldsSource, _super);
                function CalculatedFieldsSource(calculatedFields, reportDataSource, dataSourceHelper) {
                    var _this = this;
                    _super.call(this);
                    this._calculatedFieldsInfo = {};
                    this._ordinaryFieldsInfo = {};
                    this._fieldsDataMembersInfo = {};
                    this.addAction = {
                        clickAction: function (item) {
                            return _this.addCalculatedField(item.path);
                        },
                        imageClassName: "dxrd-image-add-calcfield",
                        text: Designer.getLocalization("Add calculated field")
                    };
                    this.removeAction = {
                        clickAction: function (item) {
                            _this.removeCalculatedField(item.path);
                        },
                        imageClassName: "dxrd-image-recycle-bin",
                        text: Designer.getLocalization("Remove calculated field")
                    };
                    this._calculatedFieldsInfo = {};
                    this._calculatedFields = calculatedFields;
                    this._dataSourceHelper = ko.observable(dataSourceHelper);
                    this._reportDataSource = reportDataSource;
                    for (var index = 0; index < calculatedFields().length; index++) {
                        this._initializeCalculatedField(calculatedFields()[index]);
                    }
                    ;
                    var self = this;
                    this._disposables.push(this._calculatedFields.subscribe(function (changes) {
                        for (var index = 0; index < changes.length; index++) {
                            if (changes[index].status === "added") {
                                self._initializeCalculatedField(changes[index].value);
                            }
                            else if (changes[index].status === "deleted") {
                                var fullPath = self._getFieldPathRequest(changes[index].value).fullPath;
                                self._getDataMembersInfoByPath(fullPath).remove(function (item) {
                                    return changes[index].value.name === item.name;
                                });
                            }
                        }
                        ;
                    }, null, "arrayChange"));
                    this._disposables.push(this._reportDataSource.subscribe(function (newValue) {
                        for (var index = 0; index < calculatedFields().length; index++) {
                            if (!calculatedFields()[index].dataSource()) {
                                _this._updateFieldPathRequest(calculatedFields()[index]);
                            }
                        }
                    }));
                    this.addCalculatedField = function (fullPath) {
                        var pathRequest = new DevExpress.JS.Widgets.PathRequest(fullPath);
                        var newField = _this.createCalculatedField(pathRequest.path);
                        var dataSourceInfo = _this._dataSourceHelper().findDataSourceInfoByID(pathRequest.id) || _this._dataSourceHelper().findDataSourceInfoByRef(pathRequest.ref);
                        newField.dataSource(dataSourceInfo.data);
                        calculatedFields.push(newField);
                        return newField;
                    };
                    this.removeCalculatedField = function (fullPath) {
                        var pathRequest = new DevExpress.JS.Widgets.PathRequest(fullPath);
                        calculatedFields.remove(function (item) {
                            var path = item.dataMember() ? (item.dataMember() + "." + item.name) : item.name;
                            return pathRequest.path === path;
                        });
                    };
                }
                CalculatedFieldsSource.prototype._getDataMembersInfoByPath = function (fullPath) {
                    this._calculatedFieldsInfo[fullPath] = this._calculatedFieldsInfo[fullPath] || ko.observableArray();
                    return this._calculatedFieldsInfo[fullPath];
                };
                CalculatedFieldsSource.prototype._subscribeFieldProperties = function (field) {
                    var _this = this;
                    this._disposables.push(field.dataMember.subscribe(function (newValue) {
                        _this._getDataMembersInfoByPath(field.pathRequest.fullPath).remove(field);
                        field.pathRequest = new DevExpress.JS.Widgets.PathRequest(Report.getFullPath(field.pathRequest.id || field.pathRequest.ref, newValue));
                        _this._getDataMembersInfoByPath(field.pathRequest.fullPath).push(field);
                    }));
                    this._disposables.push(field.dataSource.subscribe(function (newValue) {
                        _this._updateFieldPathRequest(field);
                    }));
                    this._disposables.push(field.calculatedFieldName.subscribe(function (newValue) {
                        _this._getDataMembersInfoByPath(field.pathRequest.fullPath).notifySubscribers();
                    }));
                };
                CalculatedFieldsSource.prototype._getFieldPathRequest = function (field) {
                    var dataSourceInfo = this._dataSourceHelper().findDataSourceInfo(field.dataSource() || this._reportDataSource());
                    return new DevExpress.JS.Widgets.PathRequest(Report.getFullPath(dataSourceInfo.id || dataSourceInfo.ref, field.dataMember()));
                };
                CalculatedFieldsSource.prototype._updateFieldPathRequest = function (field) {
                    this._getDataMembersInfoByPath(field.pathRequest.fullPath).remove(field);
                    field.pathRequest = this._getFieldPathRequest(field);
                    if (field.pathRequest.ref !== "none") {
                        this._getDataMembersInfoByPath(field.pathRequest.fullPath).push(field);
                    }
                };
                CalculatedFieldsSource.prototype._initializeCalculatedField = function (field) {
                    var _this = this;
                    var pathRequest = this._getFieldPathRequest(field);
                    field["getPath"] = function (propertyName) {
                        var dataSourceInfo = _this._dataSourceHelper().findDataSourceInfo(field.dataSource() || _this._reportDataSource());
                        return dataSourceInfo.id || dataSourceInfo.ref;
                    };
                    field.expressionObj = {
                        value: field["expression"],
                        path: ko.pureComputed(function () {
                            return _this._getFieldPathRequest(field).fullPath;
                        }),
                        fieldName: field.calculatedFieldName
                    };
                    field.nameEditable = ko.pureComputed({
                        read: function () {
                            return field.calculatedFieldName();
                        },
                        write: function (value) {
                            var fields = this._ordinaryFieldsInfo[field.pathRequest.fullPath];
                            if (!!value && Designer.getFirstItemByPropertyValue(this._calculatedFields(), "name", value) === null && Designer.getFirstItemByPropertyValue(fields || [], "displayName", value) === null) {
                                field.calculatedFieldName(value);
                            }
                        },
                        owner: this
                    });
                    field.pathRequest = pathRequest;
                    field.propertyGrid = new DevExpress.JS.Widgets.ObjectProperties(ko.observable(field));
                    this._subscribeFieldProperties(field);
                    this._getDataMembersInfoByPath(pathRequest.fullPath).push(field);
                };
                CalculatedFieldsSource.prototype._generateNewFieldName = function () {
                    var i = 1;
                    var generatedName;
                    do {
                        generatedName = "calculatedField" + i++;
                    } while (Designer.getFirstItemByPropertyValue(this._calculatedFields(), "name", generatedName) !== null);
                    return generatedName;
                };
                CalculatedFieldsSource.prototype.createCalculatedField = function (dataMember) {
                    return new CalculatedField({
                        "@Name": this._generateNewFieldName(),
                        "@DataMember": dataMember
                    });
                };
                CalculatedFieldsSource.prototype.getActions = function (context) {
                    var result = [];
                    if (context.hasItems && context.path.indexOf("parameters") !== 0) {
                        result.push(this.addAction);
                    }
                    if (context.data.specifics && context.data.specifics.indexOf("calc") === 0) {
                        result.push(this.removeAction);
                    }
                    return result;
                };
                CalculatedFieldsSource.prototype.beforeItemsFilled = function (request, items) {
                    if (request.fullPath) {
                        items.push.apply(items, this._getDataMembersInfoByPath(request.fullPath)());
                    }
                    return false;
                };
                CalculatedFieldsSource.prototype.afterItemsFilled = function (request, items) {
                    if (request.fullPath) {
                        this._ordinaryFieldsInfo[request.fullPath] = items;
                        items.sort(function (a, b) {
                            var aIsList = Report.FieldListController.isList(a) ? 1 : 0;
                            var bIsList = Report.FieldListController.isList(b) ? 1 : 0;
                            if (aIsList !== bIsList) {
                                return bIsList - aIsList;
                            }
                            else {
                                return (a.displayName && b.displayName) ? a.displayName.localeCompare(b.displayName) : a.name.localeCompare(b.name);
                            }
                        });
                    }
                };
                return CalculatedFieldsSource;
            })(Designer.Disposable);
            Report.CalculatedFieldsSource = CalculatedFieldsSource;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var DataSourceHelper = (function (_super) {
                __extends(DataSourceHelper, _super);
                function DataSourceHelper(objects, dataSourceRefs, availableDataSources) {
                    var _this = this;
                    _super.call(this);
                    this.usedDataSources = ko.observableArray();
                    this.allDataSources = ko.observableArray();
                    this.usedDataSources.push({ ref: "none", name: "none", specifics: "none", data: null });
                    this._objects = objects;
                    for (var i = 0; i < objects().length; i++) {
                        var ref = objects()[i]["_model"]["@Ref"];
                        var dataSourceRef = dataSourceRefs.filter(function (ds) { return ds.ref === ref; })[0];
                        if (dataSourceRef) {
                            objects()[i]["dataSourceInfo"] = { ref: ref, data: objects()[i], name: dataSourceRef.name, isSqlDataSource: dataSourceRef.isSqlDataSource };
                            this._addUsedDataSource(objects()[i]["dataSourceInfo"]);
                        }
                    }
                    ;
                    var self = this;
                    this._disposables.push(objects.subscribe(function (changes) {
                        for (var index = 0; index < changes.length; index++) {
                            if (!changes[index].value["dataSourceInfo"])
                                return;
                            if (changes[index].status === "added") {
                                self._addUsedDataSource(changes[index].value["dataSourceInfo"]);
                            }
                            else if (changes[index].status === "deleted") {
                                var dataSourceInfo = self.findDataSourceInfo(changes[index].value);
                                if (dataSourceInfo) {
                                    _this.usedDataSources.remove(dataSourceInfo);
                                    _this.allDataSources.remove(dataSourceInfo);
                                }
                            }
                        }
                    }, null, "arrayChange"));
                    this.availableDataSources = availableDataSources.map(function (object) {
                        return $.extend({}, object, { data: new Report.ObjectStorageItem(object.data, function () { return _this; }) });
                    });
                    this.allDataSources.push.apply(this.allDataSources, this.availableDataSources);
                }
                DataSourceHelper.prototype.getDataSourcePath = function (dataSource) {
                    var dataSourceInfo = dataSource && this.findDataSourceInfo(dataSource);
                    if (dataSourceInfo) {
                        return dataSourceInfo.id || dataSourceInfo.ref;
                    }
                    else {
                        return "";
                    }
                };
                DataSourceHelper.prototype._findDataSourceInfo = function (name, collection) {
                    return collection().filter(function (info) { return info.name === name; })[0];
                };
                DataSourceHelper.prototype._getDataSourceInfo = function (name) {
                    var result = this._findDataSourceInfo(name, this.usedDataSources);
                    if (!result) {
                        var resultSource = this._findDataSourceInfo(name, this.allDataSources);
                        if (resultSource) {
                            result = this._addDataSource(resultSource, resultSource.data);
                        }
                    }
                    return result;
                };
                DataSourceHelper.prototype._getDataSourceName = function (dataSource) {
                    var dataSourceInfo = this.findDataSourceInfo(dataSource);
                    return dataSourceInfo && dataSourceInfo.name;
                };
                DataSourceHelper.prototype._addUsedDataSource = function (result) {
                    this.usedDataSources.splice(this.usedDataSources().length - 1, 0, result);
                    this.allDataSources.push(result);
                };
                DataSourceHelper.prototype._addDataSource = function (dataSource, data) {
                    if (!dataSource.name) {
                        throw new Error("dataSource name is undefined or null (ref=" + dataSource.ref + ", id=" + dataSource.id + ")");
                    }
                    var dataSourceName = Designer.getUniqueNameForNamedObjectsArray(this.allDataSources(), Designer.replaceInvalidSymbols(dataSource.name));
                    var newData = data;
                    if (this._objects().indexOf(data) === -1) {
                        newData = data.clone();
                        newData["dataSourceInfo"] = $.extend({}, dataSource, { name: dataSourceName, data: newData });
                        newData["name"] = ko.observable(dataSourceName);
                        this._objects.push(newData);
                    }
                    return this.findDataSourceInfo(newData);
                };
                DataSourceHelper.prototype.addDataSource = function (dataSourceInfo) {
                    var _this = this;
                    return this._addDataSource(dataSourceInfo, Report.ObjectItem.createNew(dataSourceInfo.data, function () { return _this; })).data;
                };
                DataSourceHelper.prototype.removeDataSource = function (dataSourceInfo) {
                    this._objects.remove(dataSourceInfo.data);
                };
                DataSourceHelper.prototype.dataSourceValue = function (value) {
                    var _this = this;
                    return ko.pureComputed({
                        read: function () {
                            return _this._getDataSourceName(value());
                        },
                        write: function (val) {
                            var newDataSource = _this._getDataSourceInfo(val);
                            if (DataSourceHelper._assignValueInTimeout) {
                                setTimeout(function () { value(newDataSource && newDataSource.data); }, 1);
                            }
                            else {
                                value(newDataSource && newDataSource.data);
                            }
                        }
                    });
                };
                DataSourceHelper.prototype.dataSourceDisplayExpr = function (dataSource) {
                    return (!dataSource || !dataSource.data) ? DevExpress.Designer.localizeNoneString("none") : dataSource.name;
                };
                DataSourceHelper.prototype.mergedDataSources = function () {
                    var _this = this;
                    var dataSources = this.usedDataSources().slice(0, -1);
                    for (var i = this.availableDataSources.length - 1; i >= 0; i--) {
                        if (!Designer.findFirstItemMatchesCondition(dataSources, function (item) { return item.name === _this.availableDataSources[i].name; })) {
                            dataSources.unshift(this.availableDataSources[i]);
                        }
                    }
                    return dataSources;
                };
                DataSourceHelper.prototype.findDataSourceInfo = function (dataSource) {
                    return this.usedDataSources().filter(function (info) { return info.data === dataSource; })[0];
                };
                DataSourceHelper.prototype.findDataSourceInfoByID = function (id) {
                    return this.usedDataSources().filter(function (info) { return info.id === id; })[0];
                };
                DataSourceHelper.prototype.findDataSourceInfoByRef = function (ref) {
                    return this.usedDataSources().filter(function (info) { return info.ref === ref; })[0];
                };
                DataSourceHelper.prototype.findDataSourceInfoByName = function (name) {
                    return this.usedDataSources().filter(function (item) { return item.name === name; })[0];
                };
                DataSourceHelper._assignValueInTimeout = true;
                return DataSourceHelper;
            })(Designer.Disposable);
            Report.DataSourceHelper = DataSourceHelper;
            var TreeListControllerCertainRootItems = (function (_super) {
                __extends(TreeListControllerCertainRootItems, _super);
                function TreeListControllerCertainRootItems(rootItemName) {
                    _super.call(this);
                    this.itemsFilter = function (item, currentPath) {
                        if (currentPath === "") {
                            return rootItemName() && item.name === rootItemName() || item.specifics === "none";
                        }
                        return true;
                    };
                }
                return TreeListControllerCertainRootItems;
            })(DevExpress.JS.Widgets.TreeListController);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ExtensionModel = (function () {
                function ExtensionModel(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                ExtensionModel.prototype.getInfo = function () {
                    return extensionSerializationInfo;
                };
                return ExtensionModel;
            })();
            Report.ExtensionModel = ExtensionModel;
            var extensionSerializationInfo = [
                { propertyName: "key", modelName: "@Key" },
                { propertyName: "value", modelName: "@Value" }
            ];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var GroupFieldModel = (function () {
                function GroupFieldModel(model, serializer) {
                    var _this = this;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.changeSortOrder = function () {
                        var sortOrderValue = _this.sortOrder();
                        if (sortOrderValue === "Ascending") {
                            _this.sortOrder("Descending");
                        }
                        else if (sortOrderValue === "None") {
                            _this.sortOrder("Ascending");
                        }
                        else {
                            _this.sortOrder("None");
                        }
                    };
                    this.sortOrderClass = ko.pureComputed(function () {
                        var orderString = _this.sortOrder().toLowerCase();
                        orderString = orderString === "none" ? "unsorted" : orderString;
                        return "dxrd-image-" + orderString;
                    });
                }
                GroupFieldModel.prototype.getInfo = function () {
                    return groupFieldSerializationInfo;
                };
                GroupFieldModel.createNew = function () {
                    return new GroupFieldModel({});
                };
                return GroupFieldModel;
            })();
            Report.GroupFieldModel = GroupFieldModel;
            var groupFieldSerializationInfo = [
                { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", editor: Report.editorTemplates.dataBinding },
                { propertyName: "sortOrder", modelName: "@SortOrder", displayName: "Sort Order", defaultVal: "Ascending" }
            ];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var LookUpValue = (function () {
                function LookUpValue(model, serializer) {
                    var _this = this;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.value = ko.pureComputed({
                        read: function () {
                            return _this._value() && _this._value().content();
                        },
                        write: function (newValue) {
                            _this._value() && _this._value().content(newValue);
                        }
                    });
                }
                LookUpValue.createNew = function () {
                    return new LookUpValue({});
                };
                LookUpValue.from = function (model, serializer) {
                    return new LookUpValue(model, serializer);
                };
                LookUpValue.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Report.lookUpValueSerializationInfo, refs);
                };
                LookUpValue.prototype.getInfo = function () {
                    if (this.valueInfo) {
                        return Report.lookUpValueSerializationInfo.concat(this.valueInfo());
                    }
                    return Report.lookUpValueSerializationInfo;
                };
                Object.defineProperty(LookUpValue.prototype, "isEmpty", {
                    get: function () {
                        return this._value() === null || this._value() === undefined;
                    },
                    enumerable: true,
                    configurable: true
                });
                return LookUpValue;
            })();
            Report.LookUpValue = LookUpValue;
            Report.lookUpValueSerializationInfo = [
                { propertyName: "description", modelName: "@Description", displayName: "Description", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "_value", modelName: "@Value", link: true },
            ];
            var ReportParameterHelper = (function (_super) {
                __extends(ReportParameterHelper, _super);
                function ReportParameterHelper() {
                    _super.apply(this, arguments);
                }
                return ReportParameterHelper;
            })(DevExpress.Report.Preview.ParameterHelper);
            Report.ReportParameterHelper = ReportParameterHelper;
            var Parameter = (function (_super) {
                __extends(Parameter, _super);
                function Parameter(model, report, objectsStorage, parameterHelper, serializer) {
                    var _this = this;
                    _super.call(this);
                    this.templateName = "dx-treelist-item";
                    this.contenttemplate = "dxrd-parameterContent";
                    this.collapsed = ko.observable(false);
                    this.valueInfo = ko.observable();
                    this.multiValueInfo = ko.observable();
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    var self = this;
                    this.objectsStorage = objectsStorage;
                    this._parameterHelper = parameterHelper;
                    this["_name"] = ko.observable(this.parameterName());
                    this["change"] = function (e, parameters) {
                        if (parameters.filter(function (x) { return x.parameterName() === e.value; }).length === 1) {
                            _this["_name"](e.value);
                        }
                        else {
                            _this.parameterName(_this["_name"]());
                        }
                    };
                    if (!this._type()) {
                        this._type(objectsStorage.getType("System.String"));
                    }
                    if (this._obsoleteValue()) {
                        this.value(this._obsoleteValue().content());
                        this._obsoleteValue(null);
                    }
                    delete this._obsoleteValue;
                    this.type = ko.pureComputed({
                        read: function () {
                            return _this._type().content();
                        },
                        write: function (val) {
                            var oldVal = _this._type().content();
                            if (val !== oldVal) {
                                var editorValue = _this.value();
                                if (_this.isMultiValue())
                                    _this.value([]);
                                else
                                    _this.value(null);
                                _this._type(objectsStorage.getType(val));
                                _this.updateLookUpValues(_this._type().content());
                                setTimeout(function () {
                                    if (_this.isMultiValue())
                                        return;
                                    if (val === "System.DateTime") {
                                        _this.value(_this.defaultValue);
                                    }
                                    else {
                                        _this.value(_this._convertSingleValue(editorValue));
                                    }
                                }, 1);
                            }
                        }
                    });
                    this._initializeValue();
                    this._disposables.push(this.isMultiValue.subscribe(function (newMultiValue) {
                        if (newMultiValue) {
                            _this.value = ko.observableArray([_this._parameterHelper.createMultiValue(_this, _this.value())]);
                        }
                        else {
                            _this.value = ko.observable(_this.defaultValue);
                        }
                    }));
                    this.valueInfo = ko.pureComputed(function () {
                        var result = $.extend(true, {}, parameterValueSerializationInfo, parameterHelper.getParameterInfo(_this));
                        result.propertyName = "value";
                        result.defaultVal = _this.isMultiValue() ? "" : _this.defaultValue;
                        return result;
                    });
                    this._initializeLookUpSourceType();
                    this._disposables.push(ko.computed(function () {
                        var lookUpSettings = _this.lookUpSettings();
                        if (lookUpSettings) {
                            lookUpSettings.updateFilter(_this, report);
                            if (lookUpSettings instanceof Report.StaticListLookUpSettings) {
                                _this._disposables.push(lookUpSettings.lookUpValues.subscribe(function (changes) {
                                    for (var index = 0; index < changes.length; index++) {
                                        if (changes[index].status === "added") {
                                            self.initializeLookUpValue(changes[index].value);
                                            changes[index].value.valueInfo = self.multiValueInfo;
                                        }
                                        else if (changes[index].status === "deleted") {
                                            self.objectsStorage.objects.remove(changes[index].value._value());
                                        }
                                    }
                                }, null, "arrayChange"));
                            }
                        }
                    }));
                    this.viewmodel = new DevExpress.JS.Widgets.ObjectProperties(ko.observable(this));
                }
                Parameter.valueToJsonObject = function (value) {
                    var result = ReportParameterHelper.getSerializationValue(value, DevExpress.JS.Utils.serializeDate);
                    return (result instanceof Array) ? result.join(Parameter.separator) : result;
                };
                Parameter.prototype._getTypeValue = function (typeName) {
                    var values = Parameter.typeValues.filter(function (type) { return type.value === typeName; });
                    return values.length > 0 ? values[0] : null;
                };
                Parameter.prototype._initializeLookUpSourceType = function () {
                    var _this = this;
                    var lookUpSettings = this.lookUpSettings(), lookUpValues = lookUpSettings && (lookUpSettings instanceof Report.StaticListLookUpSettings) && lookUpSettings.lookUpValues();
                    if (lookUpValues) {
                        lookUpValues.forEach(function (lookUpValue) {
                            lookUpValue.valueInfo = _this.multiValueInfo;
                            if (lookUpValue.isEmpty)
                                _this.initializeLookUpValue(lookUpValue);
                        });
                    }
                    this.lookUpSourceType = ko.observable("None");
                    if (lookUpSettings) {
                        if (lookUpSettings.objectType().indexOf("StaticListLookUpSettings") !== -1) {
                            this.lookUpSourceType("StaticListLookUpSettings");
                        }
                        else {
                            this.lookUpSourceType("DynamicListLookUpSettings");
                        }
                    }
                    this._disposables.push(this.lookUpSourceType.subscribe(function (newVal) {
                        if (newVal === "StaticListLookUpSettings") {
                            _this.lookUpSettings(_this.objectsStorage.createStaticLookUpSetting());
                        }
                        else if (newVal === "DynamicListLookUpSettings") {
                            _this.lookUpSettings(_this.objectsStorage.createDynamicLookUpSetting());
                        }
                        else {
                            _this.objectsStorage.objects.remove(_this.lookUpSettings());
                            _this.lookUpSettings(null);
                        }
                    }));
                };
                Parameter.prototype._tryConvertValue = function (value) {
                    var condition = function (val) { return val !== void 0 && val !== null && !isNaN(typeof val === "string" ? "" : val); };
                    if (!condition(value)) {
                        return { isValid: false, newValue: null };
                    }
                    var typeValue = this._getTypeValue(this.type()), newValue = (typeValue && typeValue.valueConverter) ? typeValue.valueConverter(value) : value;
                    return { isValid: condition(newValue), newValue: newValue };
                };
                Parameter.prototype._convertSingleValue = function (value) {
                    var result = this._tryConvertValue(value);
                    return result.isValid ? result.newValue : this.defaultValue;
                };
                Parameter.prototype._initializeValue = function () {
                    var _this = this;
                    var value = this.value();
                    if (this.isMultiValue()) {
                        typeof value === "string"
                            ? this.value = this._parameterHelper.createMultiValueArray(value.split(Parameter.separator), this, function (part) { return _this._convertSingleValue(part); })
                            : this.value = ko.observableArray();
                    }
                    else {
                        this.value(this._convertSingleValue(value));
                    }
                };
                Parameter.prototype.getInfo = function () {
                    if (this.type) {
                        var info = $.extend(true, [], Report.parameterSerializationInfo);
                        info.splice(info.indexOf(info.filter(function (prop) { return prop.propertyName === "value"; })[0]), 1, this.valueInfo());
                        return info;
                    }
                    return Report.parameterSerializationInfo;
                };
                Parameter.prototype.isPropertyVisible = function (name) {
                    if (name === "lookUpSettings") {
                        return !!this.lookUpSettings();
                    }
                    return true;
                };
                Parameter.prototype.initializeLookUpValue = function (lookUpValue) {
                    var newValue = this.objectsStorage.addValue();
                    newValue.type(this.type());
                    newValue.content(this.defaultValue);
                    lookUpValue._value(newValue);
                };
                Parameter.prototype.updateLookUpValues = function (newType) {
                    var _this = this;
                    var lookUpSettings = this.lookUpSettings(), lookUpValues = lookUpSettings && (lookUpSettings instanceof Report.StaticListLookUpSettings) && lookUpSettings.lookUpValues();
                    if (!lookUpSettings || !lookUpValues)
                        return;
                    lookUpValues.forEach(function (lookUpValue) {
                        var lookUpVal = lookUpValue._value();
                        lookUpVal.type(newType);
                        lookUpVal.content(_this.defaultValue);
                    });
                };
                Parameter.prototype.getParameterDescriptor = function () {
                    return { description: this.description.peek(), displayName: "Value", name: this.parameterName.peek(), type: this.type.peek(), value: this.value.peek(), visible: this.visible.peek(), multiValue: this.isMultiValue.peek() };
                };
                Object.defineProperty(Parameter.prototype, "name", {
                    get: function () {
                        return this.parameterName();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Parameter.prototype, "specifics", {
                    get: function () {
                        var typeValue = this._getTypeValue(this.type());
                        return typeValue ? typeValue.specifics : "default";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Parameter.prototype, "icon", {
                    get: function () {
                        var typeValue = this._getTypeValue(this.type());
                        return typeValue && typeValue.icon;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Parameter.prototype, "defaultValue", {
                    get: function () {
                        var typeValue = this._getTypeValue(this.type());
                        var _value = typeValue ? typeValue.defaultValue : "";
                        if (_value instanceof Date) {
                            _value = new Date(_value);
                        }
                        return _value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Parameter.prototype, "displayName", {
                    get: function () {
                        return this.parameterName();
                    },
                    enumerable: true,
                    configurable: true
                });
                Parameter.separator = "|";
                Parameter.defaultGuidValue = "00000000-0000-0000-0000-000000000000";
                Parameter.typeValues = [
                    { value: "System.String", displayValue: "String", defaultValue: "", specifics: "String", valueConverter: function (val) { return val.toString(); } },
                    { value: "System.DateTime", displayValue: "Date", defaultValue: new Date(new Date().setHours(0, 0, 0, 0)), specifics: "Date", valueConverter: function (val) { return DevExpress.JS.Localization.parseDate(val); } },
                    { value: "System.Int16", displayValue: "Number (16 bit integer)", defaultValue: 0, specifics: "Integer", valueConverter: function (val) { return parseInt(val); } },
                    { value: "System.Int32", displayValue: "Number (32 bit integer)", defaultValue: 0, specifics: "Integer", valueConverter: function (val) { return parseInt(val); } },
                    { value: "System.Int64", displayValue: "Number (64 bit integer)", defaultValue: 0, specifics: "Integer", valueConverter: function (val) { return parseInt(val); } },
                    { value: "System.Single", displayValue: "Number (floating-point)", defaultValue: 0, specifics: "Float", valueConverter: function (val) { return parseFloat(val); } },
                    { value: "System.Double", displayValue: "Number (double-precision floating-point)", defaultValue: 0, specifics: "Float", valueConverter: function (val) { return parseFloat(val); } },
                    { value: "System.Decimal", displayValue: "Number (decimal)", defaultValue: 0, specifics: "Float", valueConverter: function (val) { return parseFloat(val); } },
                    { value: "System.Boolean", displayValue: "Boolean", defaultValue: false, specifics: "Bool", valueConverter: function (val) { return String(val).toLowerCase() === "true" ? true : (String(val).toLowerCase() === "false" ? false : null); } },
                    { value: "System.Guid", displayValue: "Guid", defaultValue: Parameter.defaultGuidValue, valueConverter: function (val) { return DevExpress.Designer.validateGuid(val) ? val : Parameter.defaultGuidValue; }, specifics: "guid" }
                ];
                return Parameter;
            })(Designer.Disposable);
            Report.Parameter = Parameter;
            var parameterValueSerializationInfo = { propertyName: "value", displayName: "Value", modelName: "@ValueInfo", from: function (val) { return ko.observable(val); }, toJsonObject: Parameter.valueToJsonObject };
            Report.parameterLookUpSettingsSerializationInfo = { propertyName: "lookUpSettings", displayName: "Look-Up Settings", modelName: "@LookUpSettings", link: true, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.parameterSerializationInfo = [
                { propertyName: "parameterName", modelName: "@Name", displayName: "Name", defaultVal: "", validationRules: Designer.nameValidationRules, editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "description", modelName: "@Description", displayName: "Description", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                Report.visible,
                { propertyName: "isMultiValue", modelName: "@MultiValue", displayName: "MultiValue", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool },
                { propertyName: "type", displayName: "Type", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: (Parameter.typeValues) },
                parameterValueSerializationInfo,
                { propertyName: "_obsoleteValue", modelName: "@Value", link: true },
                { propertyName: "_type", modelName: "@Type", link: true },
                {
                    propertyName: "lookUpSourceType", displayName: "Look-Up Settings Type", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                        "None": "No Look-Up",
                        "StaticListLookUpSettings": "Static List",
                        "DynamicListLookUpSettings": "Dynamic List"
                    }
                },
                Report.parameterLookUpSettingsSerializationInfo
            ];
            var ParametersViewModel = (function () {
                function ParametersViewModel(report) {
                    var _this = this;
                    this.addAction = {
                        clickAction: function (item) {
                            return _this.add();
                        },
                        imageClassName: "dxrd-image-add",
                        text: Designer.getLocalization("Add parameter")
                    };
                    this.removeAction = {
                        clickAction: function (item) {
                            _this.remove({ model: item.data });
                        },
                        imageClassName: "dxrd-image-recycle-bin",
                        text: Designer.getLocalization("Remove parameter")
                    };
                    this.parameters = report.parameters;
                    this.remove = function (e) {
                        _this.parameters.splice(_this.parameters.indexOf(e.model), 1);
                    };
                    this.add = function () {
                        var newName = Designer.getUniqueNameForNamedObjectsArray(_this.parameters(), "parameter"), newParameter = new Parameter({ "@Name": newName, "@Description": "P" + newName.slice(1) }, report, report.objectsStorageHelper, report.parameterHelper);
                        _this.parameters.push(newParameter);
                        return newParameter;
                    };
                }
                ParametersViewModel.prototype.getActions = function (context) {
                    var result = [];
                    if (context.hasItems && context.path.indexOf("parameters") === 0) {
                        result.push(this.addAction);
                    }
                    if (context.path.indexOf("parameters.") === 0) {
                        result.push(this.removeAction);
                    }
                    return result;
                };
                ParametersViewModel.prototype.beforeItemsFilled = function (request, items) {
                    if (request.ref !== "parameters")
                        return false;
                    items.push.apply(items, this.parameters.slice(0));
                    return true;
                };
                ParametersViewModel.prototype.afterItemsFilled = function (request, items) {
                    if (!request.fullPath) {
                        var parameters = Designer.findFirstItemMatchesCondition(items, function (item) { return item.specifics === "parameters"; });
                        if (parameters)
                            parameters.displayName = Designer.getLocalization("Parameters");
                        var noneDataSource = !request.fullPath && Designer.findFirstItemMatchesCondition(items, function (item) { return item.specifics === "none"; });
                        if (noneDataSource)
                            noneDataSource.displayName = Designer.localizeNoneString("none");
                    }
                };
                return ParametersViewModel;
            })();
            Report.ParametersViewModel = ParametersViewModel;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="parameter.ts"/>
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ObjectItem = (function () {
                function ObjectItem(model, dsHelperProvider, serializer) {
                    this.dsHelperProvider = dsHelperProvider;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.afterDeserialization(model, serializer);
                }
                ObjectItem.createNew = function (model, dsHelperProvider, serializer) {
                    var objectType = model["@ObjectType"] || "";
                    if (objectType.indexOf("StaticListLookUpSettings") !== -1) {
                        return new StaticListLookUpSettings(model, dsHelperProvider, serializer);
                    }
                    else if (objectType.indexOf("DynamicListLookUpSettings") !== -1) {
                        return new DynamicListLookUpSettings(model, dsHelperProvider, serializer);
                    }
                    else if (objectType.indexOf("ReportServer") !== -1 && model["@ObjectType"].indexOf("DataSource") !== -1) {
                        return new UniversalDataSource(model, dsHelperProvider, serializer);
                    }
                    return new ObjectStorageItem(model, dsHelperProvider, serializer);
                };
                ObjectItem.prototype.getInfo = function () {
                    return [{ propertyName: "objectType", modelName: "@ObjectType" }];
                };
                ObjectItem.prototype.afterDeserialization = function (model, serializer) {
                    Designer.cutRefs(model);
                };
                ObjectItem.prototype.clone = function () {
                    var serializer = new DevExpress.JS.Utils.ModelSerializer();
                    return ObjectItem.createNew(serializer.serialize(this), this.dsHelperProvider, serializer);
                };
                return ObjectItem;
            })();
            Report.ObjectItem = ObjectItem;
            var ObjectStorageItem = (function (_super) {
                __extends(ObjectStorageItem, _super);
                function ObjectStorageItem(model, dsHelperProvider, serializer) {
                    _super.call(this, $.extend({ "@ObjectType": "DevExpress.XtraReports.Serialization.ObjectStorageInfo" }, model), dsHelperProvider, serializer);
                }
                ObjectStorageItem.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([{ propertyName: "content", modelName: "@Content" }, { propertyName: "type", modelName: "@Type" },
                        { propertyName: "name", modelName: "@Name", defaultVal: "" }]);
                };
                ObjectStorageItem.prototype.isEmpty = function () {
                    return this.type && this.type() === "System.DateTime"
                        && this.content && (this.content() === undefined || this.content() === null);
                };
                return ObjectStorageItem;
            })(ObjectItem);
            Report.ObjectStorageItem = ObjectStorageItem;
            var ObjectStorageParameter = (function (_super) {
                __extends(ObjectStorageParameter, _super);
                function ObjectStorageParameter(model, serializer) {
                    _super.call(this, model, serializer, [{ propertyName: "_type", modelName: "@Type", link: true }, Report.parameterLookUpSettingsSerializationInfo]);
                }
                return ObjectStorageParameter;
            })(Designer.SerializableModel);
            Report.ObjectStorageParameter = ObjectStorageParameter;
            var TableInfoCollectionItem = (function (_super) {
                __extends(TableInfoCollectionItem, _super);
                function TableInfoCollectionItem(model, dataSource, dsHelper, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer, tableInfoCollectionItemSerializationsInfo);
                    this.filterString = ko.observable(null);
                    var options = new DevExpress.JS.Widgets.FilterStringOptions(this["_filterString"], ko.pureComputed(function () {
                        return dsHelper() && (dsHelper().getDataSourcePath(dataSource) + "." + _this["tableName"]());
                    }), ko.pureComputed(function () { return !dataSource; }));
                    options.helper.canChoiceParameters = true;
                    this.filterString(options);
                }
                return TableInfoCollectionItem;
            })(Designer.SerializableModel);
            Report.TableInfoCollectionItem = TableInfoCollectionItem;
            var tableInfoCollectionItemSerializationsInfo = [Report.filterString, Report.filterStringEditable, { propertyName: "tableName", modelName: "@TableName" }];
            var UniversalDataSource = (function (_super) {
                __extends(UniversalDataSource, _super);
                function UniversalDataSource(model, dsHelperProvider, serializer) {
                    var _this = this;
                    _super.call(this, $.extend({ "@ObjectType": "DevExpress.ReportServer.Infrastructure.Data.UniversalDataSource" }, model), dsHelperProvider, serializer);
                    this.parameters = DevExpress.JS.Utils.deserializeArray(model.Parameters || [], function (item) { return new ObjectStorageParameter(item, serializer); });
                    this.tableInfoCollection = DevExpress.JS.Utils.deserializeArray(model.TableInfoCollection || [], function (item) { return new TableInfoCollectionItem(item, _this, dsHelperProvider, serializer); });
                    this.spParameterInfoCollection = DevExpress.JS.Utils.deserializeArray(model.StoredProcedureParameterInfoCollection || [], function (item) { return new ObjectStorageParameter(item, serializer); });
                }
                UniversalDataSource.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([
                        { propertyName: "parameters", modelName: "Parameters", array: true },
                        { propertyName: "tableInfoCollection", modelName: "TableInfoCollection", array: true },
                        { propertyName: "spParameterInfoCollection", modelName: "StoredProcedureParameterInfoCollection", array: true },
                        { propertyName: "name", modelName: "@Name" }]);
                };
                return UniversalDataSource;
            })(ObjectItem);
            Report.UniversalDataSource = UniversalDataSource;
            var LookUpSettings = (function (_super) {
                __extends(LookUpSettings, _super);
                function LookUpSettings(model, dsHelperProvider, serializer) {
                    _super.call(this, model, dsHelperProvider, serializer);
                }
                LookUpSettings.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([Report.filterString, Report.filterStringEditable]);
                };
                LookUpSettings.prototype.updateFilter = function (parameter, report) {
                    this.filterString.helper.parameters = ko.pureComputed({
                        read: function () {
                            var currentIndex = report.parameters.peek().indexOf(parameter);
                            return report && report.parameters().filter(function (_, index) { return index < currentIndex; });
                        },
                        deferEvaluation: true
                    });
                };
                return LookUpSettings;
            })(ObjectItem);
            Report.LookUpSettings = LookUpSettings;
            var StaticListLookUpSettings = (function (_super) {
                __extends(StaticListLookUpSettings, _super);
                function StaticListLookUpSettings(model, dsHelperProvider, serializer) {
                    _super.call(this, $.extend({ "@ObjectType": "DevExpress.XtraReports.Parameters.StaticListLookUpSettings" }, model), dsHelperProvider, serializer);
                    this.filterString = new DevExpress.JS.Widgets.FilterStringOptions(this._filterString);
                    this.filterString.helper.canChoiceParameters = true;
                    this.filterString.itemsProvider = ko.observable(null);
                }
                StaticListLookUpSettings.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat({ propertyName: "lookUpValues", displayName: "Values", modelName: "LookUpValues", array: true, editor: Report.editorTemplates.lookUpValues });
                };
                StaticListLookUpSettings.prototype.afterDeserialization = function (model, serializer) {
                    this.lookUpValues = DevExpress.JS.Utils.deserializeArray(model.LookUpValues || [], function (item) { return new Report.LookUpValue(item, serializer); });
                    _super.prototype.afterDeserialization.call(this, model, serializer);
                };
                StaticListLookUpSettings.prototype.updateFilter = function (parameter, report) {
                    this.filterString.itemsProvider({
                        getItems: function (pathRequest) {
                            var result = $.Deferred();
                            result.resolve([
                                {
                                    displayName: "Description",
                                    isList: false,
                                    name: "Description",
                                    specifics: "String"
                                },
                                {
                                    displayName: "Value",
                                    isList: false,
                                    name: "Value",
                                    specifics: parameter.specifics
                                }
                            ]);
                            return result.promise();
                        }
                    });
                    _super.prototype.updateFilter.call(this, parameter, report);
                };
                return StaticListLookUpSettings;
            })(LookUpSettings);
            Report.StaticListLookUpSettings = StaticListLookUpSettings;
            var DynamicListLookUpSettings = (function (_super) {
                __extends(DynamicListLookUpSettings, _super);
                function DynamicListLookUpSettings(model, dsHelperProvider, serializer) {
                    var _this = this;
                    _super.call(this, $.extend({ "@ObjectType": "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings" }, model), dsHelperProvider, serializer);
                    this.dsHelperProvider = dsHelperProvider;
                    this.filterString = new DevExpress.JS.Widgets.FilterStringOptions(this._filterString, ko.pureComputed(function () { return _this.getPath("valueMember"); }), ko.pureComputed(function () { return !_this.dataSource(); }));
                }
                DynamicListLookUpSettings.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([
                        Report.dataAdapter, Report.dataSource, Report.dataMember,
                        { propertyName: "displayMember", modelName: "@DisplayMember", displayName: "Display Member", defaultVal: "", editor: Designer.Widgets.editorTemplates.field },
                        { propertyName: "valueMember", modelName: "@ValueMember", displayName: "Value Member", defaultVal: "", editor: Designer.Widgets.editorTemplates.field }
                    ]);
                };
                DynamicListLookUpSettings.prototype.getPath = function (propertyName) {
                    if (propertyName === "dataMember") {
                        return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
                    }
                    else if (propertyName === "displayMember" || propertyName === "valueMember") {
                        return Report.getFullPath(this.getPath("dataMember"), this.dataMember());
                    }
                    return "";
                };
                return DynamicListLookUpSettings;
            })(LookUpSettings);
            Report.DynamicListLookUpSettings = DynamicListLookUpSettings;
            var ObjectsStorage = (function () {
                function ObjectsStorage(objects, dsHelperProvider) {
                    this.objects = objects;
                    this.dsHelperProvider = dsHelperProvider;
                }
                ObjectsStorage.prototype.findType = function (content) {
                    var objectStorages = this.objects().filter(function (item) { return item instanceof ObjectStorageItem; });
                    var result = objectStorages.filter(function (item) {
                        return item.type() === "System.Type" && item.content() === content;
                    });
                    return result.length === 0 ? null : result[0];
                };
                ObjectsStorage.prototype.getType = function (type) {
                    var typeObject = this.findType(type);
                    if (!typeObject) {
                        typeObject = new ObjectStorageItem({
                            "@Content": type,
                            "@Type": "System.Type"
                        }, this.dsHelperProvider);
                        this.objects.push(typeObject);
                    }
                    return typeObject;
                };
                ObjectsStorage.prototype.addValue = function () {
                    var newValueRef = new ObjectStorageItem({ "@Content": "" }, this.dsHelperProvider);
                    this.objects.push(newValueRef);
                    return newValueRef;
                };
                ObjectsStorage.prototype.createStaticLookUpSetting = function () {
                    var lookUpObject = new StaticListLookUpSettings({}, this.dsHelperProvider);
                    this.objects.push(lookUpObject);
                    return lookUpObject;
                };
                ObjectsStorage.prototype.createDynamicLookUpSetting = function () {
                    var lookUpObject = new DynamicListLookUpSettings({}, this.dsHelperProvider);
                    this.objects.push(lookUpObject);
                    return lookUpObject;
                };
                return ObjectsStorage;
            })();
            Report.ObjectsStorage = ObjectsStorage;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var StyleModel = (function () {
                function StyleModel(model, serializer) {
                    var _this = this;
                    this.className = function () {
                        return "stylemodel";
                    };
                    this.controlType = "XRStyleModel";
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    ["backColor", "foreColor", "borderColor"].forEach(function (propertyName) {
                        _this[propertyName] = ko.pureComputed({
                            read: function () { return _this["_" + propertyName] && _this["_" + propertyName]() || StyleModel.defaults[propertyName]; },
                            write: function (val) { _this["_" + propertyName](val); }
                        });
                    });
                    this.paddingObj = new Designer.Widgets.PaddingModel();
                    this.paddingObj.applyFromString(this["padding"]());
                    var isUpdate = false;
                    var lock = function (action) {
                        if (!isUpdate) {
                            isUpdate = true;
                            action();
                            isUpdate = false;
                        }
                    };
                    this.padding.subscribe(function (newVal) {
                        lock(function () { return _this.paddingObj.applyFromString(newVal); });
                    });
                    ["left", "right", "top", "bottom"].forEach(function (name) {
                        _this.paddingObj[name].subscribe(function (newVal) {
                            lock(function () { return _this.padding(_this.paddingObj.toString()); });
                        });
                    });
                }
                StyleModel.prototype.getInfo = function () {
                    return Report.styleSerializationInfo;
                };
                StyleModel.prototype.isPropertyModified = function (name) {
                    var needName = this["_" + name] ? "_" + name : name;
                    var property = ko.unwrap(this[needName]);
                    if (property instanceof Object) {
                        return !property.isEmpty();
                    }
                    else {
                        return !!property;
                    }
                };
                StyleModel.defaults = {
                    "backColor": "transparent",
                    "foreColor": "Black",
                    "borderColor": "Black"
                };
                return StyleModel;
            })();
            Report.StyleModel = StyleModel;
            var _backColor = { propertyName: "_backColor", modelName: "@BackColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString };
            var _foreColor = { propertyName: "_foreColor", modelName: "@ForeColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString };
            var _borderColor = { propertyName: "_borderColor", modelName: "@BorderColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString };
            Report.styleSerializationInfo = $.extend(true, [], [
                Report.name, Report.font, Report.textAlignment,
                _foreColor,
                _backColor,
                _borderColor,
                { propertyName: "backColor", displayName: "Background Color", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.BackColor", editor: Designer.Widgets.editorTemplates.customColorEditor },
                { propertyName: "foreColor", displayName: "Foreground Color", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.ForeColor", editor: Designer.Widgets.editorTemplates.customColorEditor },
                { propertyName: "borderColor", displayName: "Border Color", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.BorderColor", editor: Designer.Widgets.editorTemplates.customColorEditor },
                { propertyName: "borders", modelName: "@Sides", displayName: "Borders", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.Borders", editor: Designer.Widgets.editorTemplates.borders },
                { propertyName: "borderWidth", modelName: "@BorderWidthSerializable", displayName: "Border Width", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.BorderWidth", from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric }
            ]).concat([Report.borderDashStyle], Report.paddingGroup);
            Report.styleSerializationInfo.forEach(function (item) { delete item.defaultVal; });
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            function sortBands(band1, band2) {
                return Report.BandViewModel.getBandWeight(band1) - Report.BandViewModel.getBandWeight(band2);
            }
            Report.sortBands = sortBands;
            function setMarkerWidth(bandHolder, levelCount, currentLevel) {
                if (currentLevel === void 0) { currentLevel = 0; }
                if (bandHolder.bands().length != 0) {
                    bandHolder.bands().forEach(function (band) {
                        band.markerWidth(Report.BandSurface.collapsedHeight * (levelCount - currentLevel));
                        setMarkerWidth(band, levelCount, currentLevel + 1);
                    });
                }
            }
            function getLevelCount(bandHolder) {
                var result = 0, maxLevelCount = 0;
                if (bandHolder.bands().length != 0) {
                    bandHolder.bands().forEach(function (band) {
                        var levelCount = getLevelCount(band);
                        if (levelCount > maxLevelCount) {
                            maxLevelCount = levelCount;
                        }
                    });
                    result = maxLevelCount + 1;
                }
                if (bandHolder["subBands"] && bandHolder["subBands"]().length != 0) {
                    result = maxLevelCount + 1;
                }
                return result;
            }
            function reculculateUnit(value, dpi) {
                return Math.round(value * dpi) / 100;
            }
            Report.reculculateUnit = reculculateUnit;
            var ReportViewModel = (function (_super) {
                __extends(ReportViewModel, _super);
                function ReportViewModel(report, serializer) {
                    var _this = this;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    report = report.XtraReportsLayoutSerializer || report;
                    this.controlType = "DevExpress.XtraReports.UI.XtraReport";
                    _super.call(this, report, null, serializer);
                    this._update = ko.observable(false);
                    this.isModelReady = ko.pureComputed(function () { return !_this._update(); });
                    this.key = ko.pureComputed(function () { return _this.name(); });
                    this.dataSourceRefs = [];
                    this["dataSourceHelper"] = ko.observable();
                    this.parameterHelper = new Report.ReportParameterHelper();
                    this._disposables.push(this.measureUnit.subscribe(function (val) {
                        _this._update(true);
                        _this._recalculateUnits(val);
                        _this._update(false);
                    }));
                    this._disposables.push(this.landscape.subscribe(function (newVal) {
                        var width = _this.pageWidth();
                        _this.pageWidth(_this.pageHeight());
                        _this.pageHeight(width);
                    }));
                    this.styles = DevExpress.JS.Utils.deserializeArray(report.StyleSheet, function (item) { return new Report.StyleModel(item, serializer); });
                    this.objectStorage = DevExpress.JS.Utils.deserializeArray(report.ObjectStorage, function (item) { return Report.ObjectItem.createNew(item, _this.dsHelperProvider, serializer); });
                    this.componentStorage = DevExpress.JS.Utils.deserializeArray(report.ComponentStorage, function (item) { return Report.ObjectItem.createNew(item, _this.dsHelperProvider, serializer); });
                    this.objectStorage.push.apply(this.objectStorage, this.componentStorage().filter(function (item) { return item.objectType().indexOf("DataSource") !== -1; }));
                    this.componentStorage.remove(function (item) { return item.objectType().indexOf("DataSource") !== -1; });
                    this.objectsStorageHelper = new Report.ObjectsStorage(this.objectStorage, this.dsHelperProvider);
                    this.parameters = DevExpress.JS.Utils.deserializeArray(report.Parameters, function (item) { return new Report.Parameter(item, _this, _this.objectsStorageHelper, _this.parameterHelper, serializer); });
                    this.objectStorage().forEach(function (objectStorage) {
                        if (objectStorage instanceof Report.UniversalDataSource) {
                            objectStorage["tableInfoCollection"]().forEach(function (tableInfoCollection) {
                                tableInfoCollection.filterString().helper.parameters = _this.parameters;
                            });
                        }
                    });
                    this.bands = DevExpress.JS.Utils.deserializeArray(report.Bands, function (item) { return _this.createControl(item, serializer); });
                    this.bands().sort(sortBands);
                    this.extensions = DevExpress.JS.Utils.deserializeArray(report.Extensions, function (item) { return new Report.ExtensionModel(item, serializer); });
                    this.crossBandControls = DevExpress.JS.Utils.deserializeArray(report.CrossBandControls, function (item) { return _this.createControl(item, serializer); });
                    this.calculatedFields = DevExpress.JS.Utils.deserializeArray(report.CalculatedFields, function (item) { return new Report.CalculatedField(item, serializer); });
                    this._initializeBands();
                    this.formattingRuleSheet = DevExpress.JS.Utils.deserializeArray(report.FormattingRuleSheet, function (item) { return new Report.FormattingRule(item, _this, serializer); });
                    this._disposables.push(this.formattingRuleSheet.subscribe(function (args) {
                        args.forEach(function (rule) {
                            if (!rule.value.name()) {
                                rule.value.name(Designer.getUniqueNameForNamedObjectsArray(_this.formattingRuleSheet(), "formattingRule"));
                            }
                            if (!rule.value.parent) {
                                rule.value.parent = _this;
                            }
                        });
                    }, null, "arrayChange"));
                    this._disposables.push(this.margins.left.subscribe(function (newVal) {
                        if (_this.isModelReady() && newVal > _this.pageWidth() - _this.margins.right()) {
                            _this.margins.right(_this.pageWidth() - _this.margins.left());
                        }
                    }));
                    this._disposables.push(this.margins.right.subscribe(function (newVal) {
                        if (_this.isModelReady() && newVal > _this.pageWidth() - _this.margins.left()) {
                            _this.margins.left(_this.pageWidth() - _this.margins.right());
                        }
                    }));
                    this._disposables.push(this.paperKind.subscribe(function (newVal) {
                        if (newVal !== "Custom") {
                            var size = Designer.papperKindMapper[newVal];
                            _this.pageHeight(Math.round(size.height * (_this._innerDpi.peek() / 100) * 100) / 100);
                            _this.pageWidth(Math.round(size.width * (_this._innerDpi.peek() / 100) * 100) / 100);
                        }
                    }));
                    var filterString = new DevExpress.JS.Widgets.FilterStringOptions(this["_filterString"], ko.pureComputed(function () {
                        return Report.getFullPath(_this.getPath("dataMember"), _this.dataMember());
                    }), ko.pureComputed(function () { return !_this.dataSource(); }));
                    filterString.helper.parameters = this.parameters;
                    this["filterString"] = filterString;
                    this._scriptReferencesString = ko.observable(this.scriptReferencesString());
                    this.scriptReferencesString = ko.pureComputed({
                        read: function () { return _this._scriptReferencesString(); },
                        write: function (newVal) { _this._scriptReferencesString(newVal.replace(/\n/g, "\r\n")); }
                    });
                }
                ReportViewModel.prototype._getDpi = function (unitType) {
                    switch (unitType) {
                        case "HundredthsOfAnInch": return 100;
                        case "TenthsOfAMillimeter": return 254;
                        case "Pixels": return 96;
                    }
                };
                ReportViewModel.prototype._recalculateUnits = function (unitType) {
                    var newDpi = this._getDpi(unitType), oldDpi = this._innerDpi(), coef = newDpi / oldDpi;
                    Designer.objectsVisitor(this, function (target) {
                        if (target && target["constructor"] && target["constructor"].unitProperties) {
                            for (var i = 0; i < target["constructor"].unitProperties.length; i++) {
                                var propertyName = target["constructor"].unitProperties[i];
                                var property = target["_" + propertyName] || target[propertyName];
                                !!ko.unwrap(property) && property(Math.round(ko.unwrap(property) * coef * 100) / 100);
                            }
                            ;
                        }
                    });
                    this._innerDpi(newDpi);
                };
                ReportViewModel.prototype.findStyle = function (styleName) {
                    var result = null;
                    for (var i = 0; i < this.styles().length; i++) {
                        if (this.styles()[i].name() === styleName) {
                            return this.styles()[i];
                        }
                    }
                    ;
                    return result;
                };
                ReportViewModel.prototype._initializeBands = function () {
                    if (this.bands().length === 0) {
                        this.createChild({ "@ControlType": "DetailBand", "@Name": "Detail1" });
                    }
                    if (Designer.getFirstItemByPropertyValue(this.bands(), "controlType", "TopMarginBand") === null) {
                        this.createChild({ "@ControlType": "TopMarginBand", "@Name": "TopMargin1" });
                    }
                    if (Designer.getFirstItemByPropertyValue(this.bands(), "controlType", "BottomMarginBand") === null) {
                        this.createChild({ "@ControlType": "BottomMarginBand", "@Name": "BottomMargin1" });
                    }
                };
                ReportViewModel.prototype.isPropertyDisabled = function (name) {
                    if (name === "pageWidth" || name === "pageHeight") {
                        return this.paperKind() !== "Custom";
                    }
                };
                ReportViewModel.prototype.getSubreportUrls = function () {
                };
                ReportViewModel.prototype.initialize = function () {
                    _super.prototype.initialize.call(this);
                    this.size.height = this.pageHeight;
                    this.size.width = this.pageWidth;
                };
                ReportViewModel.prototype.getNearestParent = function (target) {
                    return this;
                };
                ReportViewModel.prototype.addChild = function (control) {
                    if (control instanceof Report.CrossBandControlViewModel) {
                        control.parentModel(this);
                        control.startBand(this.bands()[0]);
                        control.endBand(this.bands()[0]);
                        this.crossBandControls.push(control);
                    }
                    else if (control instanceof Report.BandViewModel) {
                        control.parentModel(this);
                        Report.BandViewModel.insertBand(this.bands, control);
                    }
                    else {
                        Designer.NotifyAboutWarning("Attempt to add wrong child control.");
                    }
                };
                ReportViewModel.prototype.removeChild = function (control) {
                    if (control instanceof Report.CrossBandControlViewModel) {
                        this.crossBandControls.splice(this.crossBandControls().indexOf(control), 1);
                    }
                    else if (control instanceof Report.BandViewModel) {
                        if (this.bands().length > 1) {
                            this.bands.splice(this.bands().indexOf(control), 1);
                        }
                    }
                    else {
                        Designer.NotifyAboutWarning("Attempt to remove wrong child control.");
                    }
                };
                ReportViewModel.prototype.serialize = function () {
                    return (new DevExpress.JS.Utils.ModelSerializer()).serialize(this);
                };
                ReportViewModel.prototype.save = function () {
                    var data = this.serialize();
                    if (this.onSave) {
                        this.onSave(data);
                    }
                    return data;
                };
                ReportViewModel.prototype.getPath = function (propertyName) {
                    return this["dataSourceHelper"]() && this["dataSourceHelper"]().getDataSourcePath(this.dataSource());
                };
                ReportViewModel.prototype.isStyleProperty = function (propertyName) { return false; };
                ReportViewModel.bandsTypeOrdering = ["TopMarginBand", "ReportHeaderBand", "PageHeaderBand", "GroupHeaderBand", "DetailBand", "DetailReportBand", "GroupFooterBand", "ReportFooterBand", "PageFooterBand", "BottomMarginBand"];
                ReportViewModel.unitProperties = ["snapGridSize"];
                return ReportViewModel;
            })(Report.ReportElementViewModel);
            Report.ReportViewModel = ReportViewModel;
            var ReportSurface = (function (_super) {
                __extends(ReportSurface, _super);
                function ReportSurface(report, zoom) {
                    var _this = this;
                    if (zoom === void 0) { zoom = ko.observable(1); }
                    _super.call(this, report, {
                        measureUnit: report.measureUnit, zoom: zoom
                    }, ReportSurface._unitProperties);
                    this.allowMultiselect = false;
                    this.locked = false;
                    this.focused = ko.observable(false);
                    this.selected = ko.observable(false);
                    this.templateName = ko.observable("dxrd-report");
                    this.bands = ko.observableArray();
                    this.underCursor = ko.observable(new Designer.HoverInfo());
                    this.crossBandControls = ko.observableArray();
                    this.minHeight = ko.observable();
                    this.maxMarkerWidth = ko.observable();
                    this.parent = null;
                    this.zoom = zoom;
                    this.dpi = report.dpi;
                    this.rtl = ko.pureComputed(function () { return report.rtl() && report.rtlLayout() === "Yes"; });
                    this.measureUnit = report.measureUnit;
                    this._context = this;
                    this["_width"] = ko.pureComputed({
                        read: function () {
                            return _this["pageWidth"]();
                        }
                    });
                    this["_height"] = ko.pureComputed({
                        read: function () {
                            return _this["pageHeight"]();
                        }
                    });
                    this.margins = {
                        bottom: this["_bottom"],
                        left: this._createMargin("_left", "_right"),
                        right: this._createMargin("_right", "_left"),
                        top: this["_top"]
                    };
                    Designer.createObservableArrayMapCollection(report.bands, this.bands, this._createSurface);
                    this._disposables.push(ko.computed(function () {
                        var levelCount = getLevelCount(_this);
                        setMarkerWidth(_this, levelCount, 0);
                        _this.maxMarkerWidth(Report.BandSurface.collapsedHeight * levelCount + 22);
                    }));
                    this.effectiveHeight = ko.pureComputed(function () {
                        var minHeight = 0;
                        _this.bands().forEach(function (band) { minHeight += band.height(); });
                        _this.minHeight(minHeight);
                        return minHeight + 20;
                    });
                    Designer.createObservableArrayMapCollection(report.crossBandControls, this.crossBandControls, this._createSurface);
                    this.rightMarginOffset = ko.pureComputed(function () {
                        return _this.rtl() ? 0 : _this.pageWidth() - _this.margins.left() - _this.margins.right();
                    });
                    this.leftMarginOffset = ko.pureComputed(function () {
                        return _this.rtl() ? _this.pageWidth() - _this.margins.left() : 0;
                    });
                    this.ghosContainerOffset = ko.pureComputed(function () {
                        return _this.rtl() ? 0 : _this.margins.left();
                    });
                    this.leftMarginResizeOptions = new SurfaceMarginResizeOptions(this.rtl, this.pageWidth, {
                        handle: "e",
                        margin: this.margins.left,
                        oppositeMargin: this.margins.right,
                        marginOffset: this.leftMarginOffset
                    }).getOptions;
                    this.rigthMarginResizeOptions = new SurfaceMarginResizeOptions(this.rtl, this.pageWidth, {
                        handle: "w",
                        margin: this.margins.right,
                        oppositeMargin: this.margins.left,
                        marginOffset: this.rightMarginOffset
                    }).getOptions;
                }
                ReportSurface.prototype._createMargin = function (side, oppositeSide) {
                    var _this = this;
                    return ko.pureComputed({
                        read: function () { return _this.rtl() ? _this[oppositeSide]() : _this[side](); },
                        write: function (value) {
                            _this.rtl() ? _this[oppositeSide](value) : _this[side](value);
                        }
                    });
                };
                ReportSurface.prototype.getChildrenCollection = function () {
                    return this.bands;
                };
                ReportSurface.prototype.isFit = function (dropTarget) {
                    return dropTarget.underCursor().y >= -0.1
                        && dropTarget.underCursor().x >= 0
                        && ((this === dropTarget) ? this.effectiveHeight() : dropTarget.rect().height) > dropTarget.underCursor().y
                        && (this.pageWidth() - this.margins.left()) > dropTarget.underCursor().x;
                };
                ReportSurface.prototype.canDrop = function () { return true; };
                ReportSurface.prototype.wrapRtlProperty = function (data, undoEngine, element) {
                    var _this = this;
                    var wrapper = ko.computed({
                        read: data.value,
                        write: function (newValue) {
                            undoEngine.peek().start();
                            var prevValue = _this.rtl.peek();
                            data.value(newValue);
                            if (prevValue !== _this.rtl.peek()) {
                                var report = _this.getControlModel();
                                var left = report.margins.left();
                                report.margins.left(report.margins.right());
                                report.margins.right(left);
                            }
                            undoEngine.peek().end();
                        }
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () { wrapper.dispose(); });
                    return $.extend({}, data, { value: wrapper });
                };
                ReportSurface.prototype.checkParent = function (surfaceParent) { return false; };
                ReportSurface._unitProperties = {
                    _width: function (o) { return o.size.width; },
                    _height: function (o) { return o.size.height; },
                    pageWidth: function (o) { return o.size.width; },
                    pageHeight: function (o) { return o.size.height; },
                    snapGridSize: function (o) {
                        return o.snapGridSize;
                    },
                    _bottom: function (o) { return o.margins.bottom; },
                    _left: function (o) { return o.margins.left; },
                    _right: function (o) { return o.margins.right; },
                    _top: function (o) { return o.margins.top; }
                };
                return ReportSurface;
            })(Designer.SurfaceElementArea);
            Report.ReportSurface = ReportSurface;
            var SurfaceMarginResizeOptions = (function () {
                function SurfaceMarginResizeOptions(rtl, pageWidth, params) {
                    var oppositeHandle = params.handle === "w" ? "e" : "w";
                    var elements = [];
                    rtl.subscribe(function (value) {
                        $(elements).find(".ui-resizable-e, .ui-resizable-w")
                            .removeClass("ui-resizable-" + (value ? params.handle : oppositeHandle))
                            .addClass("ui-resizable-" + (value ? oppositeHandle : params.handle));
                    });
                    var options = null;
                    this.getOptions = function (undoEngine, element) {
                        if (!options) {
                            options = ko.computed(function () {
                                return {
                                    handles: rtl.peek() ? oppositeHandle : params.handle,
                                    minWidth: 0,
                                    start: function (e, ui) {
                                        $(ui.element).resizable("option", "maxWidth", pageWidth.peek() - params.oppositeMargin.peek() - 1);
                                        undoEngine().start();
                                    },
                                    resize: function (e, ui) {
                                        params.margin(Math.max(0, ui.size.width));
                                        $(ui.element).css({ left: params.marginOffset.peek(), width: params.margin.peek() });
                                    },
                                    stop: function (e, ui) {
                                        undoEngine().end();
                                    }
                                };
                            });
                        }
                        elements.push(element);
                        return options;
                    };
                }
                return SurfaceMarginResizeOptions;
            })();
            var ReportActions = (function () {
                function ReportActions() {
                    var _this = this;
                    this._contextModel = ko.observable();
                    this._targetModel = ko.pureComputed(function () {
                        var model = _this._contextModel();
                        if (model) {
                            if (model.parentModel() && model.parentModel().parentModel() && model.controlType === "SubBand") {
                                model = model.parentModel().parentModel();
                            }
                            else if (model.parentModel() && model.controlType !== "DevExpress.XtraReports.UI.XtraReport" && model.controlType !== "DetailReportBand") {
                                model = model.parentModel();
                            }
                            else {
                                model = model;
                            }
                        }
                        return model;
                    });
                    this.actions = [
                        {
                            text: "Insert Top Margin Band",
                            imageClassName: "dxrd-image-actions-top_margin",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("TopMarginBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("TopMarginBand"); },
                        }, {
                            text: "Insert Report Header Band",
                            imageClassName: "dxrd-image-actions-report_header",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("ReportHeaderBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("ReportHeaderBand"); },
                        }, {
                            text: "Insert Page Header Band",
                            imageClassName: "dxrd-image-actions-page_header",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("PageHeaderBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("PageHeaderBand"); },
                        }, {
                            text: "Insert Group Header Band",
                            imageClassName: "dxrd-image-actions-group_header",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this._addBand("GroupHeaderBand"); },
                        }, {
                            text: "Insert Detail Band",
                            imageClassName: "dxrd-image-actions-detail",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("DetailBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("DetailBand"); },
                        }, {
                            text: "Insert Detail Report Band",
                            imageClassName: "dxrd-image-actions-detail_report",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this._addBand("DetailReportBand"); },
                        }, {
                            text: "Insert Group Footer Band",
                            imageClassName: "dxrd-image-actions-group_footer",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this._addBand("GroupFooterBand"); },
                        }, {
                            text: "Insert Report Footer Band",
                            imageClassName: "dxrd-image-actions-report_footer",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("ReportFooterBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("ReportFooterBand"); },
                        }, {
                            text: "Insert Page Footer Band",
                            imageClassName: "dxrd-image-actions-page_footer",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("PageFooterBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("PageFooterBand"); },
                        }, {
                            text: "Insert Bottom Margin Band",
                            imageClassName: "dxrd-image-actions-bottom_margin",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("BottomMarginBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("BottomMarginBand"); },
                        }, {
                            text: "Insert Sub-Band",
                            imageClassName: "dxrd-image-actions-subband",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("SubBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("SubBand"); },
                        }
                    ];
                }
                ReportActions.prototype._canAddBand = function (bandType) {
                    if (!this._targetModel()) {
                        return false;
                    }
                    if (bandType === "GroupHeaderBand" || bandType === "GroupFooterBand" || bandType === "DetailReportBand") {
                        return true;
                    }
                    if (bandType === "SubBand") {
                        var model = (this._contextModel());
                        return model !== null && !model.lockedInUserDesigner() && (model.controlType.indexOf("XtraReport") === -1 && ["DetailReportBand", "TopMarginBand", "BottomMarginBand", "SubBand"].indexOf(model.controlType) === -1);
                    }
                    if (this._targetModel().controlType === "DetailReportBand" && (bandType === "TopMarginBand" || bandType === "BottomMarginBand" || bandType === "PageHeaderBand" || bandType === "PageFooterBand")) {
                        return false;
                    }
                    return this._targetModel()["bands"]().filter(function (band) { return band.controlType === bandType; }).length === 0;
                };
                ReportActions.prototype._addBand = function (bandType) {
                    if (this._canAddBand(bandType)) {
                        var model = this._targetModel();
                        if (bandType === "SubBand") {
                            model = this._contextModel();
                        }
                        var height = model.root["dpi"]();
                        model.createChild({ "@ControlType": bandType, "@HeightF": height });
                    }
                };
                ReportActions.prototype.getActions = function (context) {
                    if (context instanceof ReportViewModel || context instanceof Report.BandViewModel) {
                        this._contextModel(context);
                        return this.actions;
                    }
                    return [];
                };
                return ReportActions;
            })();
            Report.ReportActions = ReportActions;
            Report.paperKind = {
                propertyName: "paperKind", modelName: "@PaperKind", defaultVal: "Letter", displayName: "Paper Kind",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "A2": "A2",
                    "A3": "A3",
                    "A3Extra": "A3Extra",
                    "A3ExtraTransverse": "A3ExtraTransverse",
                    "A3Rotated": "A3Rotated",
                    "A3Transverse": "A3Transverse",
                    "A4": "A4",
                    "A4Extra": "A4Extra",
                    "A4Plus": "A4Plus",
                    "A4Rotated": "A4Rotated",
                    "A4Small": "A4Small",
                    "A4Transverse": "A4Transverse",
                    "A5": "A5",
                    "A5Extra": "A5Extra",
                    "A5Rotated": "A5Rotated",
                    "A5Transverse": "A5Transverse",
                    "A6": "A6",
                    "A6Rotated": "A6Rotated",
                    "APlus": "APlus",
                    "B4": "B4",
                    "B4Envelope": "B4Envelope",
                    "B4JisRotated": "B4JisRotated",
                    "B5": "B5",
                    "B5Envelope": "B5Envelope",
                    "B5Extra": "B5Extra",
                    "B5JisRotated": "B5JisRotated",
                    "B5Transverse": "B5Transverse",
                    "B6Envelope": "B6Envelope",
                    "B6Jis": "B6Jis",
                    "B6JisRotated": "B6JisRotated",
                    "BPlus": "BPlus",
                    "C3Envelope": "C3Envelope",
                    "C4Envelope": "C4Envelope",
                    "C5Envelope": "C5Envelope",
                    "C65Envelope": "C65Envelope",
                    "C6Envelope": "C6Envelope",
                    "CSheet": "CSheet",
                    "Custom": "Custom",
                    "DLEnvelope": "DLEnvelope",
                    "DSheet": "DSheet",
                    "ESheet": "ESheet",
                    "Executive": "Executive",
                    "Folio": "Folio",
                    "GermanLegalFanfold": "GermanLegalFanfold",
                    "GermanStandardFanfold": "GermanStandardFanfold",
                    "InviteEnvelope": "InviteEnvelope",
                    "IsoB4": "IsoB4",
                    "ItalyEnvelope": "ItalyEnvelope",
                    "JapaneseDoublePostcard": "JapaneseDoublePostcard",
                    "JapaneseDoublePostcardRotated": "JapaneseDoublePostcardRotated",
                    "JapanesePostcard": "JapanesePostcard",
                    "Ledger": "Ledger",
                    "Legal": "Legal",
                    "LegalExtra": "LegalExtra",
                    "Letter": "Letter",
                    "LetterExtra": "LetterExtra",
                    "LetterExtraTransverse": "LetterExtraTransverse",
                    "LetterPlus": "LetterPlus",
                    "LetterRotated": "LetterRotated",
                    "LetterSmall": "LetterSmall",
                    "LetterTransverse": "LetterTransverse",
                    "MonarchEnvelope": "MonarchEnvelope",
                    "Note": "Note",
                    "Number10Envelope": "Number10Envelope",
                    "Number11Envelope": "Number11Envelope",
                    "Number12Envelope": "Number12Envelope",
                    "Number14Envelope": "Number14Envelope",
                    "Number9Envelope": "Number9Envelope",
                    "PersonalEnvelope": "PersonalEnvelope",
                    "Prc16K": "Prc16K",
                    "Prc16KRotated": "Prc16KRotated",
                    "Prc32K": "Prc32K",
                    "Prc32KBig": "Prc32KBig",
                    "Prc32KBigRotated": "Prc32KBigRotated",
                    "Prc32KRotated": "Prc32KRotated",
                    "PrcEnvelopeNumber1": "PrcEnvelopeNumber1",
                    "PrcEnvelopeNumber10": "PrcEnvelopeNumber10",
                    "PrcEnvelopeNumber10Rotated": "PrcEnvelopeNumber10Rotated",
                    "PrcEnvelopeNumber1Rotated": "PrcEnvelopeNumber1Rotated",
                    "PrcEnvelopeNumber2": "PrcEnvelopeNumber2",
                    "PrcEnvelopeNumber2Rotated": "PrcEnvelopeNumber2Rotated",
                    "PrcEnvelopeNumber3": "PrcEnvelopeNumber3",
                    "PrcEnvelopeNumber3Rotated": "PrcEnvelopeNumber3Rotated",
                    "PrcEnvelopeNumber4": "PrcEnvelopeNumber4",
                    "PrcEnvelopeNumber4Rotated": "PrcEnvelopeNumber4Rotated",
                    "PrcEnvelopeNumber5": "PrcEnvelopeNumber5",
                    "PrcEnvelopeNumber5Rotated": "PrcEnvelopeNumber5Rotated",
                    "PrcEnvelopeNumber6": "PrcEnvelopeNumber6",
                    "PrcEnvelopeNumber6Rotated": "PrcEnvelopeNumber6Rotated",
                    "PrcEnvelopeNumber7": "PrcEnvelopeNumber7",
                    "PrcEnvelopeNumber7Rotated": "PrcEnvelopeNumber7Rotated",
                    "PrcEnvelopeNumber8": "PrcEnvelopeNumber8",
                    "PrcEnvelopeNumber8Rotated": "PrcEnvelopeNumber8Rotated",
                    "PrcEnvelopeNumber9": "PrcEnvelopeNumber9",
                    "PrcEnvelopeNumber9Rotated": "PrcEnvelopeNumber9Rotated",
                    "Quarto": "Quarto",
                    "Standard10x11": "Standard10x11",
                    "Standard10x14": "Standard10x14",
                    "Standard11x17": "Standard11x17",
                    "Standard12x11": "Standard12x11",
                    "Standard15x11": "Standard15x11",
                    "Standard9x11": "Standard9x11",
                    "Statement": "Statement",
                    "Tabloid": "Tabloid",
                    "TabloidExtra": "TabloidExtra",
                    "USStandardFanfold": "USStandardFanfold"
                }
            };
            Report.landscape = { propertyName: "landscape", modelName: "@Landscape", displayName: "Landscape", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.margins = { propertyName: "margins", modelName: "@Margins", from: Designer.Margins.fromString, displayName: "Margins", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.pageColor = { propertyName: "pageColor", modelName: "@PageColor", defaultVal: "White", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Page Color", editor: Designer.Widgets.editorTemplates.customColorEditor };
            Report.measureUnit = {
                propertyName: "measureUnit",
                modelName: "@ReportUnit", defaultVal: "HundredthsOfAnInch", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Measure Units", from: Designer.fromEnum,
                values: {
                    "HundredthsOfAnInch": "Hundredths of an Inch",
                    "TenthsOfAMillimeter": "Tenths of a Millimeter",
                    "Pixels": "Pixels"
                }
            };
            Report.snapGridSize = { propertyName: "snapGridSize", modelName: "@SnapGridSize", defaultVal: 12.5, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Snap Grid Size" };
            Report.showPreviewMarginLines = { propertyName: "showPreviewMarginLines", modelName: "@ShowPreviewMarginLines", displayName: "Show Margin Lines in Preview", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.verticalContentSplitting = {
                propertyName: "verticalContentSplitting",
                modelName: "@VerticalContentSplitting", displayName: "Vertical Content Splitting", defaultVal: "Exact", from: Designer.fromEnum,
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Exact": "Exact",
                    "Smart": "Smart"
                }
            };
            Report.reportExportOptionsSerializationInfo = { propertyName: "exportOptions", modelName: "ExportOptions", displayName: "Export Options", from: Report.ExportOptions.from, toJsonObject: Report.ExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.watermarkSerializationsInfo = [
                Report.font, Report.foreColor,
                { propertyName: "textTransparency", modelName: "@TextTransparency", displayName: "Text Transparency", defaultVal: 50, editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                {
                    propertyName: "text", modelName: "@Text", displayName: "Text", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.comboboxEditable,
                    values: {
                        "ASAP": "ASAP",
                        "CONFIDENTIAL": "CONFIDENTIAL",
                        "COPY": "COPY",
                        "DO NOT COPY": "DO NOT COPY",
                        "DRAFT": "DRAFT",
                        "EVALUATION": "EVALUATION",
                        "ORIGINAL": "ORIGINAL",
                        "PERSONAL": "PERSONAL",
                        "SAMPLE": "SAMPLE",
                        "TOP SECRET": "TOP SECRET",
                        "URGENT": "URGENT"
                    }
                },
                {
                    propertyName: "textDirection", modelName: "@TextDirection", displayName: "Text Direction", defaultVal: "ForwardDiagonal", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    values: {
                        "Horizontal": "Horizontal",
                        "ForwardDiagonal": "ForwardDiagonal",
                        "BackwardDiagonal": "BackwardDiagonal",
                        "Vertical": "Vertical"
                    }
                },
                { propertyName: "image", modelName: "@Image", displayName: "Image", editor: DevExpress.JS.Widgets.editorTemplates.image },
                { propertyName: "imageTransparency", modelName: "@ImageTransparency", displayName: "Image Transparency", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "imageTiling", modelName: "@ImageTiling", displayName: "Image Tiling", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                {
                    propertyName: "imageAlign", modelName: "@ImageAlign", displayName: "Image Alignment", defaultVal: "MiddleCenter", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    values: {
                        "TopLeft": "TopLeft",
                        "TopCenter": "TopCenter",
                        "TopRight": "TopRight",
                        "MiddleLeft": "MiddleLeft",
                        "MiddleCenter": "MiddleCenter",
                        "MiddleRight": "MiddleRight",
                        "BottomLeft": "BottomLeft",
                        "BottomCenter": "BottomCenter",
                        "BottomRight": "BottomRight"
                    }
                },
                {
                    propertyName: "imageViewMode", modelName: "@ImageViewMode", displayName: "Image View Mode", defaultVal: "Clip", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                        "Clip": "Clip",
                        "Stretch": "Stretch",
                        "Zoom": "Zoom"
                    }
                },
                { propertyName: "pageRange", modelName: "@PageRange", displayName: "Page Range", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "showBehind", modelName: "@ShowBehind", defaultVal: true, from: Designer.parseBool, displayName: "Show Behind", editor: DevExpress.JS.Widgets.editorTemplates.bool }
            ];
            Report.watermark = { propertyName: "watermark", modelName: "Watermark", displayName: "Watermark", info: Report.watermarkSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.rollPaper = { propertyName: "rollPaper", modelName: "@RollPaper", displayName: "Roll Paper", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Report.requestParameters = { propertyName: "requestParameters", modelName: "@RequestParameters", displayName: "Request Parameters", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Report.formattingRuleSheet = { propertyName: "formattingRuleSheet", modelName: "FormattingRuleSheet", displayName: "Formatting Rule Sheet", array: true };
            Report.pageWidth = { propertyName: "pageWidth", modelName: "@PageWidth", displayName: "Page Width", defaultVal: "850", from: Designer.floatFromModel, toJsonObject: Designer.saveAsInt, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Report.pageHeight = { propertyName: "pageHeight", modelName: "@PageHeight", displayName: "Page Height", defaultVal: "1100", from: Designer.floatFromModel, toJsonObject: Designer.saveAsInt, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.scriptLanguage = {
                propertyName: "scriptLanguage", modelName: "@ScriptLanguage", displayName: "Script Language", defaultVal: "CSharp", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "CSharp": "C#",
                    "VisualBasic": "Visual Basic",
                    "JScript": "JScript"
                }
            };
            Report.scriptReferencesString = { propertyName: "scriptReferencesString", modelName: "@ScriptReferencesString", defaultVal: "", displayName: "Script References", editor: DevExpress.JS.Widgets.editorTemplates.stringArray };
            Report.calculatedFields = {
                propertyName: "calculatedFields", modelName: "CalculatedFields", displayName: "Calculated Fields", array: true,
                template: "#dxrd-collectionItemWithAccordion",
                editor: Report.editorTemplates.calculatedFields
            };
            Report.bookmarkDuplicateSuppress = { propertyName: "bookmarkDuplicateSuppress", modelName: "@BookmarkDuplicateSuppress", displayName: "Bookmark Duplicate Suppress", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            Report.horizontalContentSplitting = {
                propertyName: "horizontalContentSplitting", modelName: "@HorizontalContentSplitting", displayName: "Horizontal Content Splitting", defaultVal: "Exact", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Exact": "Exact",
                    "Smart": "Smart"
                }
            };
            Report.reportSerializationInfo = [
                $.extend({}, Report.backColor, { defaultVal: "transparent" }),
                $.extend({}, Report.foreColor, { defaultVal: "Black" }),
                $.extend({}, Report.borderColor, { defaultVal: "Black" }),
                $.extend({}, Report.font, { defaultVal: "Times New Roman, 9pt" }),
                $.extend({}, Report.textAlignment, { defaultVal: "TopLeft" }),
                $.extend({}, Report.borderWidth, { defaultVal: 1 }),
                $.extend({}, Report.borderDashStyle, { defaultVal: "Solid" }),
                $.extend({}, Report.borders, { defaultVal: "None" }),
                { propertyName: "size", visible: false },
                Report.landscape,
                Report.paperKind,
                Report.pageColor,
                Report.bookmark,
                Report.margins, Report.rollPaper, Report.requestParameters,
                Report.measureUnit,
                Report.snapGridSize,
                Report.watermark,
                Report.displayName, Report.verticalContentSplitting, Report.showPreviewMarginLines,
                Report.calculatedFields,
                { propertyName: "scriptsSource", modelName: "@ScriptsSource" },
                Report.pageWidth,
                Report.pageHeight,
                { propertyName: "bands", modelName: "Bands", array: true },
                { propertyName: "crossBandControls", modelName: "CrossBandControls", array: true },
                { propertyName: "styles", modelName: "StyleSheet", array: true },
                { propertyName: "objectStorage", modelName: "ObjectStorage", array: true },
                { propertyName: "componentStorage", modelName: "ComponentStorage", array: true },
                { propertyName: "extensions", modelName: "Extensions", array: true },
                Report.formattingRuleSheet,
                Report.formattingRuleLinks,
                { propertyName: "parameters", modelName: "Parameters", array: true },
                { propertyName: "version", modelName: "@Version" },
                Report.reportExportOptionsSerializationInfo, Report.reportScripts, Report.scriptLanguage, Report.scriptReferencesString,
                Report.rtlReport, Report.rtlLayout, Report.bookmarkDuplicateSuppress, Report.horizontalContentSplitting
            ].concat(Report.baseControlProperties, Report.datasourcePrintOptionsGroup, Report.paddingGroup);
            Report.popularPropertiesReport = ["dataSource", "dataMember", "filterString", "measureUnit"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var bandsWeight = {
                "TopMarginBand": 100,
                "ReportHeaderBand": 200,
                "PageHeaderBand": 300,
                "GroupHeaderBand": 400,
                "DetailBand": 500,
                "DetailReportBand": 600,
                "GroupFooterBand": 700,
                "ReportFooterBand": 800,
                "PageFooterBand": 900,
                "BottomMarginBand": 1000
            };
            var MultiColumn = (function (_super) {
                __extends(MultiColumn, _super);
                function MultiColumn(model, pageWidth, margins, serializer) {
                    var _this = this;
                    _super.call(this, model || {}, serializer, multiColumnSerializationsInfo);
                    this.grayAreaWidth = ko.observable(0);
                    this.realColumnWidth = ko.pureComputed(function () {
                        var bandWidth = pageWidth() - margins.left(), result = bandWidth;
                        _this.grayAreaWidth(0);
                        if (_this.mode() === "UseColumnWidth") {
                            if (_this.columnWidth() > bandWidth - margins.right()) {
                                _this.grayAreaWidth(margins.right());
                                result = bandWidth - margins.right() - _this.columnSpacing();
                            }
                            else if (_this.columnWidth() > 0) {
                                _this.grayAreaWidth(bandWidth - _this.columnWidth() - _this.columnSpacing());
                                result = _this.columnWidth();
                            }
                        }
                        else if (_this.mode() === "UseColumnCount" && _this.columnCount() > 1) {
                            result = (bandWidth - margins.right()) / _this.columnCount() - _this.columnSpacing() / 2;
                            _this.grayAreaWidth(bandWidth - result - _this.columnSpacing());
                        }
                        return result;
                    });
                    this._disposables.push(this.columnWidth.subscribe(function (newVal) { _this.mode("UseColumnWidth"); }));
                    this._disposables.push(this.columnCount.subscribe(function (newVal) { _this.mode("UseColumnCount"); }));
                }
                MultiColumn.unitProperties = ["columnWidth", "columnSpacing"];
                return MultiColumn;
            })(Designer.SerializableModel);
            Report.MultiColumn = MultiColumn;
            var BandViewModel = (function (_super) {
                __extends(BandViewModel, _super);
                function BandViewModel(band, parent, serializer) {
                    var _this = this;
                    _super.call(this, band, parent, serializer);
                    if (this.controlType === "TopMarginBand") {
                        this.height = parent && this.root.margins.top || ko.observable(0);
                    }
                    if (this.controlType === "BottomMarginBand") {
                        this.height = parent && this.root.margins.bottom || ko.observable(0);
                    }
                    if (this.controlType === "DetailBand") {
                        this["multiColumn"] = new MultiColumn(band["MultiColumn"], this.root["pageWidth"] || ko.observable(0), this.root["margins"] || Designer.Margins.fromString());
                        this["sortFields"] = DevExpress.JS.Utils.deserializeArray(band.SortFields, function (field) { return new Report.GroupFieldModel(field, serializer); });
                    }
                    if (this.controlType === "GroupHeaderBand") {
                        this["groupFields"] = DevExpress.JS.Utils.deserializeArray(band.GroupFields, function (field) { return new Report.GroupFieldModel(field, serializer); });
                    }
                    if (this.controlType === "SubBand") {
                        this["multiColumn"] = parent["multiColumn"];
                    }
                    var bands = [];
                    if (band.Bands) {
                        for (var key in band.Bands) {
                            bands.push(new BandViewModel(band.Bands[key], this, serializer));
                        }
                        bands.sort(Report.sortBands);
                    }
                    this.bands = ko.observableArray(bands);
                    if (this.controlType === "DetailReportBand" && this.bands().length === 0) {
                        this.createChild({ "@ControlType": "DetailBand", "@HeightF": this.height() });
                    }
                    var subBands = [];
                    if (band.SubBands) {
                        for (var key in band.SubBands) {
                            subBands.push(new BandViewModel(band.SubBands[key], this, serializer));
                        }
                    }
                    if (this.sortingSummary) {
                        this.sortingSummary.getPath = function (propertyName) {
                            if (propertyName === "fieldName") {
                                return _this.getPath("groupFields");
                            }
                        };
                    }
                    this.subBands = ko.observableArray(subBands);
                    var self = this;
                    if (this.bands().length > 0) {
                        this.height = ko.pureComputed({
                            read: function () {
                                if (Designer.checkModelReady(_this.root)) {
                                    return self.bands().reduce(function (sum, b) { return sum + b.height(); }, 0);
                                }
                                return 0;
                            },
                            write: function (newHeight) {
                                var deltaHeight = newHeight - self.height.peek(), oldHeight = self.bands()[self.bands().length - 1].height.peek();
                                self.bands()[self.bands().length - 1].height(oldHeight + deltaHeight);
                            }
                        });
                    }
                    this.size.height = this.height;
                    this.controls = Designer.deserializeChildArray(band.Controls, this, function (control) { return _this.createControl(control, serializer); });
                    var _heightFromControls = 0;
                    this.heightFromControls = ko.pureComputed(function () {
                        _heightFromControls = 0;
                        if (Designer.checkModelReady(_this.root)) {
                            for (var i = 0; i < _this.controls().length; i++) {
                                if (!_this.controls()[i].update()) {
                                    var controlY = _this.controls()[i].anchorVertical && _this.controls()[i].anchorVertical() === "Bottom" && _this.controls()[i].vertAnchoring.state !== Report.Anchoring.states.fromControls ? 0 : _this.controls()[i].location.y(), controlHeight = _this.controls()[i].anchorVertical && _this.controls()[i].anchorVertical() === "Both" && _this.controls()[i].vertAnchoring.state !== Report.Anchoring.states.fromControls ? 1 : _this.controls()[i].size.height(), controlBottom = controlY + controlHeight;
                                    if (controlBottom > _heightFromControls) {
                                        _heightFromControls = controlBottom;
                                    }
                                }
                            }
                            ;
                            _heightFromControls = Math.round(_heightFromControls * 100) / 100;
                            _this.height(Math.max(_heightFromControls, _this.height()));
                            _heightFromControls = _heightFromControls > 0 ? _heightFromControls : 0;
                        }
                        return _heightFromControls;
                    });
                    if (this["dataMember"]) {
                        if (this["_filterString"]) {
                            this["filterString"] = new DevExpress.JS.Widgets.FilterStringOptions(this["_filterString"], ko.pureComputed(function () {
                                return Report.getFullPath(_this.getPath("dataMember"), _this["dataMember"]());
                            }), ko.pureComputed(function () { return !_this["dataSource"](); }));
                            this["filterString"].helper.parameters = this.root["parameters"];
                        }
                    }
                    if (this["level"]) {
                        this._disposables.push(this["level"].subscribe(function () {
                            if (_this.parentModel()) {
                                BandViewModel.insertBandSorted(_this.parentModel().bands, _this);
                            }
                        }));
                    }
                }
                BandViewModel.prototype.addChild = function (control) {
                    if (control instanceof BandViewModel) {
                        control.parentModel(this);
                        if (control.controlType !== "SubBand") {
                            BandViewModel.insertBand(this.bands, control);
                        }
                        else {
                            this.subBands.push(control);
                        }
                    }
                    else {
                        _super.prototype.addChild.call(this, control);
                    }
                };
                BandViewModel.prototype.getPath = function (propertyName) {
                    if (propertyName === "dataMember") {
                        return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this["dataSource"]());
                    }
                    else if (propertyName === "groupFields") {
                        return Report.getFullPath(this.parentModel()["getPath"]("dataMember"), this.parentModel()["dataMember"]());
                    }
                    return "";
                };
                BandViewModel.prototype.initialize = function () {
                    var _this = this;
                    _super.prototype.initialize.call(this);
                    this.size.height = this.height;
                    this.size.width = ko.computed({
                        read: function () {
                            return _this.root.size.width() - (_this.root["margins"] ? ((_this.root["margins"].left && _this.root["margins"].left()) + (_this.root["margins"].right && _this.root["margins"].right())) : 0);
                        }, write: function (newVal) { return void 0; }
                    });
                    this.size.isPropertyDisabled = function (name) { return name === "width"; };
                };
                BandViewModel.prototype.removeChild = function (control) {
                    if (control instanceof BandViewModel) {
                        if (this.bands().indexOf(control) !== -1) {
                            this.bands.splice(this.bands().indexOf(control), 1);
                        }
                        if (this.subBands().indexOf(control) !== -1) {
                            this.subBands.splice(this.subBands().indexOf(control), 1);
                        }
                    }
                    else {
                        _super.prototype.removeChild.call(this, control);
                    }
                };
                BandViewModel.insertBand = function (bands, newBand) {
                    if (newBand.controlType === "GroupHeaderBand" || newBand.controlType === "GroupFooterBand" || newBand.controlType === "DetailReportBand") {
                        newBand["level"](bands().filter(function (band) { return band.controlType === newBand.controlType; }).length);
                    }
                    BandViewModel.insertBandSorted(bands, newBand);
                };
                BandViewModel.insertBandSorted = function (bands, newBand) {
                    if (newBand) {
                        var oldBands = bands().slice(0);
                        var previousBandIndex = bands().indexOf(newBand);
                        if (previousBandIndex === -1) {
                            oldBands.push(newBand);
                        }
                        oldBands.sort(Report.sortBands);
                        var index = oldBands.indexOf(newBand);
                        if (previousBandIndex !== -1) {
                            bands.splice(previousBandIndex, 1);
                        }
                        bands.splice(index, 0, newBand);
                    }
                };
                BandViewModel.getBandWeight = function (band) {
                    if (band.controlType === "GroupHeaderBand") {
                        return bandsWeight[band.controlType] - (band["level"]() || 0);
                    }
                    if (band.controlType === "GroupFooterBand") {
                        return bandsWeight[band.controlType] + (band["level"]() || 0);
                    }
                    if (band.controlType === "DetailReportBand") {
                        return bandsWeight[band.controlType] + (band["level"]() || -1);
                    }
                    return bandsWeight[band.controlType];
                };
                return BandViewModel;
            })(Report.ReportElementViewModel);
            Report.BandViewModel = BandViewModel;
            var BandSurface = (function (_super) {
                __extends(BandSurface, _super);
                function BandSurface(band, context) {
                    var _this = this;
                    _super.call(this, band, context, BandSurface._unitProperties);
                    this.isSomeParentCollapsed = ko.observable(false);
                    this.allowMultiselect = false;
                    this.markerWidth = ko.observable(BandSurface.collapsedHeight);
                    this.bands = ko.observableArray();
                    this.subBands = ko.observableArray();
                    this.collapsed = ko.observable(false);
                    this._disposables.push(ko.computed(function () {
                        _this["_width"](context.pageWidth() - context.margins.left());
                    }));
                    this.collapsed = ko.pureComputed({
                        read: function () {
                            return !band.expanded();
                        },
                        write: function (newVal) {
                            band.expanded(!newVal);
                        }
                    });
                    this.name = band.name;
                    Designer.createObservableArrayMapCollection(band.bands, this.bands, this._createSurface);
                    Designer.createObservableArrayMapCollection(band.subBands, this.subBands, this._createSurface);
                    var _underCursor = ko.observable(new Designer.HoverInfo());
                    this.underCursor = ko.pureComputed({
                        read: function () {
                            _underCursor().isOver = _underCursor().x > _this._context.margins.left();
                            if (_this.bands().length !== 0) {
                                _underCursor().isOver = false;
                                for (var i = 0; i < _this.bands().length; i++) {
                                    _underCursor().isOver = _this.bands()[i].underCursor().isOver;
                                    if (_underCursor().isOver)
                                        break;
                                }
                                ;
                            }
                            return _underCursor();
                        },
                        write: function (val) { _underCursor(val); }
                    });
                    this._disposables.push(ko.computed(function () {
                        var isSomeParentCollapsed = _this.collapsed() || _this.isSomeParentCollapsed();
                        _this.bands().forEach(function (band) {
                            band.isSomeParentCollapsed(isSomeParentCollapsed);
                        });
                    }));
                    var subBandsHeight = 0;
                    this.subBandsHeight = ko.pureComputed(function () {
                        subBandsHeight = 0;
                        (_this.subBands() || []).forEach(function (subBand) {
                            subBandsHeight += subBand.height();
                        });
                        return subBandsHeight;
                    });
                    this.height = ko.pureComputed(function () {
                        if (_this.collapsed()) {
                            return BandSurface.collapsedHeight;
                        }
                        else {
                            if (_this.bands().length !== 0) {
                                var result = 0;
                                for (var i = 0; i < _this.bands().length; i++) {
                                    result += _this.bands()[i].height();
                                }
                                ;
                                return result;
                            }
                            return _this._height() + _this.subBandsHeight();
                        }
                    });
                    this.hasOwnRuler = ko.pureComputed(function () {
                        return _this.bands().length === 0 || _this.collapsed();
                    });
                    this.rulerHeight = ko.pureComputed(function () {
                        return _this.collapsed() ? BandSurface.collapsedHeight : (_this.height() - _this.subBandsHeight());
                    });
                    var root = this.getControlModel().root;
                    var nearMarginWidth = function () { return context.rtl() ? root.margins.right() : root.margins.left(); };
                    this.coordinateGridOptions = {
                        height: this.getControlModel().height,
                        snapGridSize: root.snapGridSize,
                        zoom: context.zoom,
                        measureUnit: context.measureUnit,
                        width: ko.pureComputed(function () {
                            return root.pageWidth() - nearMarginWidth();
                        }),
                        flip: context.rtl
                    };
                    this.coordinateGridOptionsVruler = {
                        height: this.getControlModel().height,
                        snapGridSize: root.snapGridSize,
                        width: ko.pureComputed(function () { return nearMarginWidth(); }),
                        zoom: context.zoom,
                        measureUnit: context.measureUnit,
                        flip: context.rtl
                    };
                    this["resize"] = function (params) {
                        _this._height(params.size.height() - _this.subBandsHeight());
                    };
                    this["resizeTheBand"] = function (params) {
                        _this._height(params.size.height());
                    };
                    this["stopResize"] = function () {
                    };
                    this["markerClass"] = ko.pureComputed(function () {
                        var cssClass = "dxrd-band-marker-body";
                        if (band.controlType.toLowerCase().indexOf("header") !== -1 || band.controlType === "TopMarginBand") {
                            cssClass = "dxrd-band-marker-header";
                        }
                        else if (band.controlType.toLowerCase().indexOf("footer") !== -1 || band.controlType === "BottomMarginBand") {
                            cssClass = "dxrd-band-marker-footer";
                        }
                        if (_this.focused()) {
                            return cssClass += "-focused";
                        }
                        return cssClass;
                    });
                    this["leftMargin"] = ko.pureComputed(function () {
                        return 0 - (context["margins"] && context.margins.left() || 0) + 10;
                    });
                    if (band["multiColumn"]) {
                        var multiColumn = (band["multiColumn"]);
                        this["grayAreaWidth"] = ko.pureComputed(function () {
                            return Designer.unitsToPixel(multiColumn.grayAreaWidth(), context.measureUnit(), context.zoom());
                        });
                        this["columnWidth"] = ko.pureComputed(function () {
                            return Designer.unitsToPixel(multiColumn.realColumnWidth(), context.measureUnit(), context.zoom());
                        });
                        this["columnSpacing"] = ko.pureComputed(function () {
                            return Designer.unitsToPixel(multiColumn.columnSpacing(), context.measureUnit(), context.zoom());
                        });
                    }
                    this.canResize = ko.computed(function () {
                        return _this.selected() && !_this.locked && !_this.collapsed() && !Designer.DragDropHandler.started();
                    });
                    this.minHeight = ko.computed(function () {
                        var minHeight = _this.heightFromControls() + _this.subBandsHeight();
                        return minHeight || 1;
                    });
                }
                BandSurface.prototype.markerClick = function (selection) {
                    if (selection.expectClick) {
                        selection.expectClick = false;
                        return;
                    }
                    if (!this.focused()) {
                        selection.initialize(this);
                    }
                    else {
                        this.collapsed(!this.collapsed());
                    }
                };
                BandSurface.prototype.updateAbsolutePosition = function () {
                    if (this.parent) {
                        var parent = this.parent;
                        var newY = 0;
                        if (parent.collapsed && parent.collapsed()) {
                            newY = parent.absolutePosition.y();
                        }
                        else if (parent.bands && parent.bands() && parent.bands().length !== 0) {
                            var bands = parent.bands();
                            var position = bands.indexOf(this);
                            if (position > 0 && bands[position - 1]) {
                                newY = bands[position - 1].absolutePosition.y() + bands[position - 1].height();
                            }
                            else if (position === 0 && parent.absolutePosition) {
                                newY = parent.absolutePosition.y();
                            }
                        }
                        else if (parent.subBands && parent.subBands() && parent.subBands().length !== 0) {
                            var subBands = parent.subBands();
                            var position = subBands.indexOf(this);
                            if (position > 0 && subBands[position - 1]) {
                                newY = subBands[position - 1].absolutePosition.y() + subBands[position - 1].height();
                            }
                            else if (position === 0 && parent.absolutePosition) {
                                newY = parent.absolutePosition.y();
                                if (parent.height && parent.subBandsHeight) {
                                    newY += parent.height() - parent.subBandsHeight();
                                }
                            }
                        }
                        this.absolutePosition.x(0);
                        this.absolutePosition.y(newY);
                    }
                };
                BandSurface.prototype.getChildrenCollection = function () {
                    if (this._control.controlType == "DetailReportBand") {
                        return this.bands;
                    }
                    else {
                        return _super.prototype.getChildrenCollection.call(this);
                    }
                };
                BandSurface.prototype.canDrop = function () { return _super.prototype.canDrop.call(this) && !this.collapsed(); };
                Object.defineProperty(BandSurface.prototype, "zoom", {
                    get: function () { return this.getRoot().zoom; },
                    enumerable: true,
                    configurable: true
                });
                BandSurface.prototype.checkParent = function (surfaceParent) {
                    return false;
                };
                BandSurface.collapsedHeight = 27;
                BandSurface._unitProperties = {
                    _height: function (o) { return o.height; },
                    heightFromControls: function (o) { return o.heightFromControls; }
                };
                return BandSurface;
            })(Designer.SurfaceElementBase);
            Report.BandSurface = BandSurface;
            var multiColumnSerializationsInfo = [
                { propertyName: "columnCount", modelName: "@ColumnCount", displayName: "Column Count", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "columnWidth", modelName: "@ColumnWidth", displayName: "Column Width", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric, from: Designer.floatFromModel },
                { propertyName: "columnSpacing", modelName: "@ColumnSpacing", displayName: "Column Spacing", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric, from: Designer.floatFromModel },
                {
                    propertyName: "layout", modelName: "@Layout", displayName: "Layout", defaultVal: "DownThenAcross", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                        "DownThenAcross": "DownThenAcross",
                        "AcrossThenDown": "AcrossThenDown"
                    }
                }, {
                    propertyName: "mode", modelName: "@Mode", displayName: "Mode", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                        "None": "None",
                        "UseColumnCount": "UseColumnCount",
                        "UseColumnWidth": "UseColumnWidth"
                    }
                }
            ];
            Report.multiColumn = { propertyName: "multiColumn", modelName: "MultiColumn", displayName: "Multi-Column Options", info: multiColumnSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.expanded = { propertyName: "expanded", modelName: "@Expanded", from: Designer.parseBool, defaultVal: true };
            Report.groupFields = {
                propertyName: "groupFields",
                modelName: "GroupFields", displayName: "Group Fields", array: true, editor: DevExpress.JS.Widgets.editorTemplates.commonCollection, addHandler: DevExpress.Designer.Report.GroupFieldModel.createNew, template: '#dxrd-collection-item-group'
            };
            Report.drillDownDetailReportExpanded = { propertyName: "drillDownDetailReportExpanded", modelName: "@DrillDownExpanded", displayName: "Drill-Down Expanded", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, defaultVal: true }, Report.drillDownControl = { propertyName: "drillDownControl", modelName: "@DrillDownControl", displayName: "Drill-Down Control", link: true, defaultVal: null, editor: Report.editorTemplates.drillDownControls };
            Report.sortFields = {
                propertyName: "sortFields",
                modelName: "SortFields", displayName: "Sort Fields", array: true, editor: DevExpress.JS.Widgets.editorTemplates.commonCollection, addHandler: DevExpress.Designer.Report.GroupFieldModel.createNew, template: '#dxrd-collection-item-group'
            };
            Report.groupUnion = {
                propertyName: "groupUnion",
                modelName: "@GroupUnion", displayName: "Group Union", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "None", from: Designer.fromEnum,
                values: {
                    "None": "None",
                    "WholePage": "Whole Page",
                    "WithFirstDetail": "With First Detail"
                }
            };
            Report.groupFooterUnion = {
                propertyName: "groupFooterUnion",
                modelName: "@GroupUnion", displayName: "Group Union", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "None", from: Designer.fromEnum,
                values: {
                    "None": "None",
                    "WithLastDetail": "With Last Detail"
                }
            };
            Report.printAtBottom = { propertyName: "printAtBottom", modelName: "@PrintAtBottom", defaultVal: false, from: Designer.parseBool, displayName: "Print at Bottom", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.printOn = {
                propertyName: "printOn",
                modelName: "@PrintOn", displayName: "Print On", defaultVal: "AllPages",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "AllPages": "All Pages",
                    "NotWithReportHeader": "Not with Report Header",
                    "NotWithReportFooter": "Not with Report Footer",
                    "NotWithReportHeaderAndReportFooter": "Not with Report Header and Report Footer"
                }
            };
            Report.level = { propertyName: "level", modelName: "@Level", displayName: "Level", defaultVal: 0, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.repeatEveryPage = { propertyName: "repeatEveryPage", modelName: "@RepeatEveryPage", displayName: "Repeat Every Page", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.pageBreak = {
                propertyName: "pageBreak",
                modelName: "@PageBreak", displayName: "Page Break", defaultVal: "None", from: Designer.fromEnum,
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "None": "None",
                    "BeforeBand": "Before the Band",
                    "BeforeBandExceptFirstEntry": "Before the Band, Except for the First Entry",
                    "AfterBand": "After the Band",
                    "AfterBandExceptLastEntry": "After the Band, Except for the Last Entry"
                }
            };
            Report.keepTogetherWithDetailReports = { propertyName: "keepTogetherWithDetailReports", modelName: "@KeepTogetherWithDetailReports", defaultVal: false, from: Designer.parseBool, displayName: "Keep Together with Detail Reports", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.height = { propertyName: "height", modelName: "@HeightF", defaultVal: 100, displayName: "Height", from: Designer.floatFromModel };
            Report.commonBandSerializationInfo = [
                Report.textAlignment, Report.expanded,
                { propertyName: "controls", modelName: "Controls", array: true },
                { propertyName: "bands", modelName: "Bands", array: true },
                { propertyName: "subBands", modelName: "SubBands", array: true },
            ].concat(Report.commonBandProperties, Report.fontGroup);
            Report.bandSerializationInfo = [
                Report.styleName, Report.stylePriority, Report.height,
            ].concat(Report.commonBandSerializationInfo);
            Report.detailReportBandSerializationInfo = [
                Report.level, Report.height, Report.pageBreak, Report.detailReportBandScripts,
                Report.keepTogetherDefaultValueFalse,
                Report.drillDownDetailReportExpanded,
                Report.drillDownControl,
                Report.keepTogetherWithDetailReports
            ].concat(Report.commonBandSerializationInfo, Report.datasourcePrintOptionsGroup);
            Report.detailBandSerializationInfo = [
                Report.evenStyleName, Report.oddStyleName,
                Report.keepTogetherDefaultValueFalse,
                Report.drillDownDetailReportExpanded,
                Report.drillDownControl,
                Report.keepTogetherWithDetailReports, Report.sortFields, Report.pageBreak, Report.commonBandScripts
            ].concat(Report.bandSerializationInfo);
            Report.reportHeaderBandSerializationInfo = [Report.keepTogetherDefaultValueFalse, Report.pageBreak, Report.commonBandScripts].concat(Report.bandSerializationInfo);
            Report.reportFooterBandSerializationInfo = [Report.printAtBottom].concat(Report.reportHeaderBandSerializationInfo);
            Report.pageBandSerializationInfo = [Report.printOn, Report.commonBandScripts].concat(Report.bandSerializationInfo);
            var groupBand = [Report.keepTogetherDefaultValueFalse, Report.level, Report.pageBreak, Report.repeatEveryPage].concat(Report.bandSerializationInfo);
            var sortingSummarySerializationsInfo = [
                { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool },
                {
                    propertyName: "Function", modelName: "@Function", displayName: "Function", defaultVal: "Sum", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    values: $.extend({}, Report.summaryFunctionValues, {
                        "RunningSum": "Running Summar",
                        "Percentage": "Percentage",
                        "RecordNumber": "Record Number"
                    })
                },
                { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", defaultVal: "", editor: Designer.Widgets.editorTemplates.field },
                { propertyName: "ignoreNullValues", modelName: "@IgnoreNullValues", displayName: "Ignore Null Values", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool },
                {
                    propertyName: "sortOrder", modelName: "@SortOrder", displayName: "SortOrder", defaultVal: "Ascending", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    values: {
                        "Ascending": "Ascending",
                        "Descending": "Descending"
                    }
                },
            ];
            Report.sortingSummary = { propertyName: "sortingSummary", modelName: "SortingSummary", displayName: "Sorting Summary", info: sortingSummarySerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.groupHeaderBandSerializationInfo = [Report.groupFields, Report.groupUnion, Report.sortingSummary, Report.drillDownDetailReportExpanded,
                Report.drillDownControl, Report.groupHeaderBandScripts].concat(groupBand);
            Report.groupFooterBandSerializationInfo = [Report.groupFooterUnion, Report.printAtBottom, Report.groupBandScripts].concat(groupBand);
            Report.popularPropertiesReportHeader = ["pageBreak", "keepTogether"], Report.popularPropertiesReportFooter = ["keepTogether", "printAtBottom"], Report.popularPropertiesPageHeader = ["printOn"], Report.popularPropertiesPageFooter = ["printOn"], Report.popularPropertiesGroupHeader = ["groupFields", "groupUnion", "level", "pageBreak", "keepTogether", "repeatEveryPage"], Report.popularPropertiesGroupFooter = ["groupFooterUnion", "pageBreak", "keepTogether", "repeatEveryPage", "printAtBottom"], Report.popularPropertiesDetail = ["sortFields", "pageBreak", "keepTogether", "keepTogetherWithDetailReports"], Report.popularPropertiesDetailReport = ["dataSource", "dataMember", "dataAdapter", "filterString"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var CheckBoxViewModel = (function (_super) {
                __extends(CheckBoxViewModel, _super);
                function CheckBoxViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this._disposables.push(this.checkState.subscribe(function (val) {
                        if (val === "Unchecked") {
                            _this.checked(false);
                        }
                        else {
                            _this.checked(true);
                        }
                    }));
                    this._disposables.push(this.checked.subscribe(function (val) {
                        if (val) {
                            _this.checkState("Checked");
                        }
                        else {
                            _this.checkState("Unchecked");
                        }
                    }));
                }
                return CheckBoxViewModel;
            })(Report.ControlViewModel);
            Report.CheckBoxViewModel = CheckBoxViewModel;
            var XRCheckboxSurface = (function (_super) {
                __extends(XRCheckboxSurface, _super);
                function XRCheckboxSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.checkboxSize = 14;
                    this.checkStateWidth = ko.observable();
                    this.visibleText = ko.observable(true);
                    this.contenttemplate = "dxrd-checkbox-content";
                    this.checkStateClass = ko.pureComputed(function () {
                        return "dxrd-checkbox-checkstate-" + control["checkState"]().toLowerCase();
                    });
                    this.leftPadding = function () {
                        var padding = ko.unwrap(control["paddingObj"]) || Designer.Widgets.PaddingModel.from(Designer.Widgets.PaddingModel.defaultVal);
                        return Designer.unitsToPixel(padding.left(), context.measureUnit());
                    };
                    this.textWidth = ko.pureComputed(function () {
                        return _this.contentSizes().width / context.zoom() - _this.checkboxSize - _this.leftPadding();
                    });
                    this.visibleText = ko.pureComputed(function () {
                        return control["glyphAlignment"]() !== "Center";
                    });
                    this.checkStateWidth = ko.pureComputed(function () {
                        return _this.visibleText() ? _this.checkboxSize + "px" : "100%";
                    });
                    this.isGlyphAlignmentNear = ko.pureComputed(function () {
                        return _this._control.rtl() ? control["glyphAlignment"]() === "Far" : control["glyphAlignment"]() === "Near";
                    });
                    this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.backGroundCss(), _this.cssCalculator.foreColorCss(), _this.cssCalculator.textAlignmentCss(), _this.cssCalculator.paddingsCss());
                    });
                }
                return XRCheckboxSurface;
            })(Report.ControlSurface);
            Report.XRCheckboxSurface = XRCheckboxSurface;
            Report.checkState = {
                propertyName: "checkState",
                modelName: "@CheckState", displayName: "Check State", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                defaultVal: "Unchecked",
                values: {
                    "Unchecked": "Unchecked",
                    "Checked": "Checked",
                    "Indeterminate": "Indeterminate"
                }
            };
            Report.checked = { propertyName: "checked", modelName: "@Checked", defaultVal: false, from: Designer.parseBool, displayName: "Checked", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.glyphAlignment = {
                propertyName: "glyphAlignment",
                modelName: "@GlyphAlignment", displayName: "Glyph Alignment",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                defaultVal: "Near", values: {
                    "Near": "Near",
                    "Center": "Center",
                    "Far": "Far"
                }
            };
            Report.chekEditOptions = $.extend({}, Report.editOptions, {
                propertyName: "checkEditOptions",
                from: function (model, serializer) { return new Report.CheckEditOptions(model, serializer); }
            });
            Report.checkboxSerializationsInfo = [
                Report.checkState, Report.checked, Report.text, Report.wordWrap, Report.glyphAlignment, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal,
                $.extend({}, Report.textAlignment, { defaultVal: "MiddleLeft" }),
                Report.textControlScripts, Report.textTrimming, Report.xlsxFormatString,
                Report.dataBindings(["Text", "NavigateUrl", "Tag", "Bookmark", "CheckState"]),
                Report.defaultDataBinding("CheckState"),
                Report.rtl,
                Report.chekEditOptions
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.fontGroup, Report.navigationGroup);
            Report.popularPropertiesCheckBox = ["checkState", "defaultDataBinding", "text", "bookmark", "bookmarkParent"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRChartViewModel = (function (_super) {
                __extends(XRChartViewModel, _super);
                function XRChartViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this._chartStructure = ko.observable();
                    this._chartElement = ko.observable({});
                    var isPivotGridDataSource = ko.observable(this.dataSource() instanceof Report.XRPivotGridViewModel);
                    this._disposables.push(this.dataSource.subscribe(function (newDataSource) {
                        isPivotGridDataSource(newDataSource instanceof Report.XRPivotGridViewModel);
                    }));
                    this._disposables.push(isPivotGridDataSource.subscribe(function (val) {
                        _this._setDataMembers(val);
                    }));
                    this._initChartElementFunctions();
                    this._assignChartPropertiesFromNestedObjects();
                    this._initChartStructure();
                    this._disposables.push(this.chart.dataContainer.series.subscribe(this._createCollectionSubscriptionDelegate("Chart", "series"), null, "arrayChange"));
                    this._disposables.push(this.chart.titles.subscribe(this._createCollectionSubscriptionDelegate("Chart", "titles"), null, "arrayChange"));
                    this._setDisabled();
                }
                XRChartViewModel.prototype._createCollectionSubscriptionDelegate = function (propertyPath, propertyName) {
                    var self = this, path = propertyPath + "." + propertyName;
                    return function (args) {
                        args.forEach(function (changeSet) {
                            if (changeSet.status) {
                                if (changeSet.status === "deleted") {
                                    self._chartStructureProvider.selectedPath(path);
                                    if (self.fakeChart[propertyName]().length !== 0) {
                                        self._chartStructureProvider.selectedPath(path + ".0");
                                    }
                                }
                                else {
                                    if (!changeSet.value.name()) {
                                        var prefix = propertyName.charAt(0).toUpperCase() + propertyName.substr(1) + " ";
                                        changeSet.value.name(Designer.getUniqueNameForNamedObjectsArray(self.fakeChart[propertyName](), prefix));
                                    }
                                    self._chartStructureProvider.selectedPath(path + "." + changeSet.index.toString());
                                }
                            }
                        });
                    };
                };
                XRChartViewModel.prototype._setDisabled = function () {
                    var _this = this;
                    var disabled = function (collection) {
                        collection.forEach(function (action) { action.disabled && action.disabled(_this.lockedInUserDesigner()); });
                    };
                    disabled(this.chart.dataContainer.series()["innerActions"]);
                    this.chart.dataContainer.series().forEach(function (series) { disabled(series["innerActions"]); });
                    disabled(this.chart.titles()["innerActions"]);
                    this.chart.titles().forEach(function (title) { disabled(title["innerActions"]); });
                };
                XRChartViewModel.prototype._initChartElementFunctions = function () {
                    var _this = this;
                    var initSeries = function (series) {
                        series["getPath"] = function (propertyName) {
                            if (propertyName === "argumentDataMember" || propertyName === "colorDataMember") {
                                return _this.getPath("seriesDataMember");
                            }
                        };
                        series["isPropertyDisabled"] = function (name) {
                            if (!_this.dataSource() || _this.isPivotGridDataSource) {
                                return name === "argumentDataMember" || name === "valueDataMembers" || name === "colorDataMember";
                            }
                        };
                        series.valueDataMembers()["getPath"] = function (propertyName) {
                            return _this.getPath("valueDataMembers");
                        };
                    };
                    this.chart.dataContainer.series().forEach(initSeries);
                    this._disposables.push(this.chart.dataContainer.series.subscribe(function (args) {
                        if (args[0].status === "added") {
                            initSeries(args[0].value);
                        }
                    }, null, "arrayChange"));
                    this.chart.dataContainer.seriesTemplate["getPath"] = function (propertyName) {
                        return _this.getPath("seriesDataMember");
                    };
                    this.chart.dataContainer.seriesTemplate["isPropertyDisabled"] = function (name) {
                        if (!_this.dataSource() || (_this.isPivotGridDataSource && _this.chart.dataContainer.pivotGridDataSourceOptions.autoBindingSettingsEnabled())) {
                            return name === "argumentDataMember" || name === "valueDataMembers" || name === "valueScaleType" || name === "argumentScaleType";
                        }
                    };
                    this.chart.dataContainer.seriesTemplate.valueDataMembers()["getPath"] = function (propertyName) {
                        return _this.getPath("valueDataMembers");
                    };
                    this._disposables.push(this.chart.dataContainer.seriesTemplate.valueDataMembers.subscribe(function (newValue) {
                        newValue["getPath"] = function (propertyName) {
                            return _this.getPath("valueDataMembers");
                        };
                    }));
                    this._disposables.push(this.chart.dataContainer.pivotGridDataSourceOptions.autoBindingSettingsEnabled.subscribe(function (newValue) {
                        if (newValue) {
                            _this._setDataMembers(false);
                        }
                    }));
                };
                XRChartViewModel.prototype._initChartStructure = function () {
                    var _this = this;
                    this.fakeChart = {
                        seriesTemplate: this.chart.dataContainer.seriesTemplate,
                        series: this.chart.dataContainer.series,
                        titles: this.chart.titles,
                        legend: this.chart["legend"],
                        axisX: ko.pureComputed(function () {
                            return _this.chart.diagram()["axisX"];
                        }),
                        axisY: ko.pureComputed(function () {
                            return _this.chart.diagram()["axisY"];
                        }),
                        getInfo: function () { return fakeChartSerializationInfo; },
                        className: function () { return "chart"; }
                    };
                    this._chartStructureProvider = new Designer.ObjectStructureProvider(this.fakeChart, "Chart");
                    this.chartStructureTreeListController = new Designer.ObjectStructureTreeListController(["chart", "Chart", "titles", "legend", "series", "axisX", "axisY", "seriesTemplate", "TitleViewModel", "SeriesViewModel"], ["chart", "titles", "series"]);
                    this._chartStructure({
                        "itemsProvider": this._chartStructureProvider,
                        "treeListController": this.chartStructureTreeListController,
                        "selectedPath": this._chartStructureProvider.selectedPath
                    });
                    this._disposables.push(this._chartStructureProvider.selectedMember.subscribe(function (newValue) {
                        var selectedElement = null;
                        var pathComponets = _this._chartStructureProvider.selectedPath().split(".");
                        if (newValue && pathComponets.length > 1) {
                            selectedElement = newValue;
                            if (selectedElement.getInfo === void 0) {
                                var propertySerializationInfo = fakeChartSerializationInfo.filter(function (info) { return info.propertyName === pathComponets[1]; })[0];
                                if (propertySerializationInfo.info) {
                                    selectedElement.getInfo = function () {
                                        return propertySerializationInfo.info;
                                    };
                                }
                                else {
                                    selectedElement = {
                                        element: selectedElement,
                                        getInfo: function () {
                                            return [$.extend({}, propertySerializationInfo, { propertyName: "element" })];
                                        }
                                    };
                                }
                            }
                        }
                        _this._chartElement(selectedElement || {});
                    }));
                    this._chartStructureProvider.selectedPath("");
                };
                XRChartViewModel.prototype._assignValueDataMembers = function (str) {
                    var valueDataMembers = this.chart.dataContainer.seriesTemplate.valueDataMembers();
                    var assign = function (array) {
                        array.forEach(function (property) { valueDataMembers[property](str); });
                    };
                    if (valueDataMembers instanceof Designer.Chart.CommonValueDataMembers) {
                        assign(["value"]);
                    }
                    else if (valueDataMembers instanceof Designer.Chart.ValueWeightDataMembers) {
                        assign(["value", "weight"]);
                    }
                    else if (valueDataMembers instanceof Designer.Chart.Value1Value2DataMembers) {
                        assign(["value1", "value2"]);
                    }
                    else if (valueDataMembers instanceof Designer.Chart.StockValueDataMembers) {
                        assign(["open", "close", "hight", "low"]);
                    }
                };
                XRChartViewModel.prototype._setDataMembers = function (isPivotGrid) {
                    if (isPivotGrid) {
                        this.chart.dataContainer.seriesDataMember("Series");
                        this.chart.dataContainer.seriesTemplate.argumentDataMember("Arguments");
                        this._assignValueDataMembers("Values");
                    }
                    else {
                        this.chart.dataContainer.seriesDataMember(null);
                        this.chart.dataContainer.seriesTemplate.argumentDataMember(null);
                        this._assignValueDataMembers(null);
                    }
                };
                XRChartViewModel.prototype._assignChartPropertiesFromNestedObjects = function () {
                    var _this = this;
                    this._disposables.push(ko.computed(function () {
                        _this.rotated = _this.chart.diagram()["rotated"] ? _this.chart.diagram()["rotated"] : undefined;
                    }));
                    this["appearanceName"] = this.chart["appearanceName"];
                    this["paletteName"] = this.chart["paletteName"];
                    this["dataMember"] = this.chart.dataContainer.dataMember;
                    this["seriesDataMember"] = this.chart.dataContainer.seriesDataMember;
                    this["pivotGridDataSourceOptions"] = this.chart.dataContainer.pivotGridDataSourceOptions;
                };
                XRChartViewModel.prototype.getPath = function (propertyName) {
                    var availableDataSource = this.dataSource() || (this.root["dataSource"] && this.root["dataSource"]());
                    var dataSourceName = this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(availableDataSource);
                    if (this.isPivotGridDataSource) {
                        return "PivotGrid" + "." + propertyName;
                    }
                    if (propertyName === "seriesDataMember" || propertyName === "valueDataMembers" || propertyName === "colorDataMember") {
                        return Report.getFullPath(dataSourceName, this.chart.dataContainer.dataMember());
                    }
                    else if (propertyName === "dataMember") {
                        return dataSourceName;
                    }
                };
                XRChartViewModel.prototype.isPropertyDisabled = function (name) {
                    if (!this.dataSource() || (this.isPivotGridDataSource && this["pivotGridDataSourceOptions"].autoBindingSettingsEnabled())) {
                        return name === "seriesDataMember" || name === "dataMember";
                    }
                    else if (!this.dataSource() || this.isPivotGridDataSource) {
                        return name === "dataMember";
                    }
                };
                Object.defineProperty(XRChartViewModel.prototype, "isPivotGridDataSource", {
                    get: function () {
                        return this.dataSource() instanceof Report.XRPivotGridViewModel;
                    },
                    enumerable: true,
                    configurable: true
                });
                return XRChartViewModel;
            })(Report.ControlViewModel);
            Report.XRChartViewModel = XRChartViewModel;
            var ChartSurface = (function (_super) {
                __extends(ChartSurface, _super);
                function ChartSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.imageSrc = ko.observable("");
                    this.template = "dxrd-shape";
                    this.contenttemplate = "dxrd-shape-content";
                    this._disposables.push(ko.computed(function () {
                        var series = control.chart.dataContainer.series();
                        series.forEach(function (val) {
                            val.view.typeName();
                        });
                        var _self = _this;
                        if (Designer.Report.HandlerUri) {
                            Report.ReportRenderingService.getChartImage(_this).done(function (result) {
                                var allSeries = _self._control.chart.dataContainer.series();
                                allSeries.forEach(function (val) {
                                    val.isIncompatible(false);
                                });
                                _self.imageSrc("data:image/x;base64," + result.Image);
                                result.Indexes.forEach(function (val) {
                                    var series = allSeries[val];
                                    series.isIncompatible(true);
                                });
                            })
                                .fail(function (jqXHR) {
                                Designer.NotifyAboutWarning("Impossible to get chart image.");
                            });
                        }
                    }));
                }
                return ChartSurface;
            })(Report.ControlSurface);
            Report.ChartSurface = ChartSurface;
            var ChartFieldListExtender = (function () {
                function ChartFieldListExtender() {
                }
                ChartFieldListExtender.prototype.beforeItemsFilled = function (request, items) {
                    if (request.ref !== "PivotGrid" && request.id !== "PivotGrid")
                        return false;
                    switch (request.path) {
                        case "dataMember": return true;
                        case "seriesDataMember":
                            {
                                items.push({ name: "Arguments", displayName: "Arguments", specifics: "String" }, { name: "Series", displayName: "Series", specifics: "String" }, { name: "Values", displayName: "Values", specifics: "Integer" });
                                return true;
                            }
                            ;
                        case "valueDataMembers": {
                            items.push({ name: "Values", displayName: "Values", specifics: "Integer" });
                            return true;
                        }
                    }
                };
                return ChartFieldListExtender;
            })();
            Report.ChartFieldListExtender = ChartFieldListExtender;
            var fakeChartSerializationInfo = [Designer.Chart.seriesTemplate, Designer.Chart.seriesSerializable, Designer.Chart.titles, Designer.Chart.legend, Designer.Chart.axisX, Designer.Chart.axisY];
            Report.chartStructure = { propertyName: "_chartStructure", displayName: "Chart Structure", editor: Designer.Widgets.editorTemplates.treelist };
            Report.chartElement = { propertyName: "_chartElement", displayName: "Selected Element", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.chartDataSource = { propertyName: "dataSource", modelName: "@DataSource", displayName: "Data Source", link: true, editor: Report.editorTemplates.chartDataSource };
            Report.xrChartSerializationInfo = [Designer.Chart.chart, Report.stylePriority, Report.chartDataSource, Report.imageType, Report.chartScripts,
                { propertyName: "dataMember", displayName: "Data Member", defaultVal: "", editor: Designer.Widgets.editorTemplates.dataMember }, Report.chartStructure, Report.chartElement
            ].concat(Report.baseControlProperties, Report.sizeLocation, Report.bordersProperties);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Pivot;
        (function (Pivot) {
            var SortBySummaryInfoCondition = (function () {
                function SortBySummaryInfoCondition(model, fieldsProvider, serializer) {
                    this._fieldsProvider = fieldsProvider;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                SortBySummaryInfoCondition.prototype.getInfo = function () {
                    var fields = this._fieldsProvider.fieldsAvailableForCondition();
                    if (fields.length < 1) {
                        return Pivot.sortBySummaryConditionInfo;
                    }
                    var conditionInfoClone = Pivot.sortBySummaryConditionInfo.slice(0), fieldComponentName = Designer.findFirstItemMatchesCondition(Pivot.sortBySummaryConditionInfo, function (item) { return item.modelName === "@FieldComponentName"; }), fieldComponentNameClone = $.extend(true, {}, fieldComponentName);
                    fields.forEach(function (fieldName) { fieldComponentNameClone.values[fieldName] = fieldName; });
                    conditionInfoClone.splice(conditionInfoClone.indexOf(fieldComponentName), 1, fieldComponentNameClone);
                    return conditionInfoClone;
                };
                SortBySummaryInfoCondition.createNew = function (parent, serializer) {
                    return new SortBySummaryInfoCondition({}, parent, serializer);
                };
                return SortBySummaryInfoCondition;
            })();
            Pivot.SortBySummaryInfoCondition = SortBySummaryInfoCondition;
            var SortBySummaryInfo = (function () {
                function SortBySummaryInfo(model, field, serializer) {
                    var _this = this;
                    this._field = field;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model, Pivot.sortBySummaryInfo);
                    this.conditions = DevExpress.JS.Utils.deserializeArray(model["Conditions"] || {}, function (item) { return new SortBySummaryInfoCondition(item, _this, serializer); });
                }
                SortBySummaryInfo.prototype._pivotGridFields = function () {
                    return this._field.parentModel().fields;
                };
                SortBySummaryInfo.prototype.getInfo = function () {
                    var _this = this;
                    var fields = this._pivotGridFields();
                    if (!fields) {
                        return Pivot.sortBySummaryInfo;
                    }
                    var sortBySummaryInfoClone = Pivot.sortBySummaryInfo.slice(0), fieldComponentName = Designer.findFirstItemMatchesCondition(Pivot.sortBySummaryInfo, function (item) { return item.modelName === "@FieldComponentName"; }), fieldComponentNameClone = $.extend(true, {}, fieldComponentName);
                    fields().forEach(function (field) {
                        if (field.name() !== _this._field.name()) {
                            fieldComponentNameClone.values[field.name()] = field.name();
                        }
                    });
                    sortBySummaryInfoClone.splice(Pivot.sortBySummaryInfo.indexOf(fieldComponentName), 1, fieldComponentNameClone);
                    return sortBySummaryInfoClone;
                };
                SortBySummaryInfo.prototype.fieldsAvailableForCondition = function () {
                    var _this = this;
                    var fields = this._pivotGridFields();
                    if (!fields) {
                        return [];
                    }
                    var result = [];
                    fields().forEach(function (field) {
                        var condition = Designer.findFirstItemMatchesCondition(_this.conditions(), function (item) { return item.fieldComponentName() === field.name(); });
                        if (!condition) {
                            result.push(field.name());
                        }
                    });
                    return result;
                };
                SortBySummaryInfo.from = function (model, serializer) {
                    return model;
                };
                SortBySummaryInfo.toJSON = function (viewModel, serializer, refs) {
                    return (serializer || new DevExpress.JS.Utils.ModelSerializer()).serialize(viewModel, Pivot.sortBySummaryInfo, refs);
                };
                return SortBySummaryInfo;
            })();
            Pivot.SortBySummaryInfo = SortBySummaryInfo;
            Pivot.summaryTypeValues = {
                "Count": "Count",
                "Sum": "Sum",
                "Min": "Min",
                "Max": "Max",
                "Average": "Average",
                "StdDev": "Standard Deviation",
                "StdDevp": "Standard Deviation for Entire Population",
                "Var": "Variation",
                "Varp": "Variation for Entire Population",
                "Custom": "Custom"
            }, Pivot.summaryType = { propertyName: "summaryType", modelName: "@SummaryType", displayName: "Summary Type", defaultVal: "Sum", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Pivot.summaryTypeValues }, Pivot.fieldComponentName = { propertyName: "fieldComponentName", modelName: "@FieldComponentName", displayName: "Field", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: { "": DevExpress.Designer.getLocalization("(" + "none" + ")") } }, Pivot.sortBySummaryConditionInfo = [
                Pivot.fieldComponentName,
                { modelName: "@Value", propertyName: "value", displayName: "Value", editor: DevExpress.JS.Widgets.editorTemplates.text },
                {
                    modelName: "@Value_type", propertyName: "valueType", displayName: "Type", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "<Null>", values: {
                        "System.String": "String",
                        "System.Byte": "Number (8 bit integer)",
                        "System.Int16": "Number (16 bit integer)",
                        "System.Int32": "Number (32 bit integer)",
                        "System.Int64": "Number (64 bit integer)",
                        "System.Single": "Number (floating-point)",
                        "System.Double": "Number (double-precision floating-point)",
                        "System.Decimal": "Number (decimal)",
                        "System.Boolean": "Boolean",
                        "System.Char": "Char",
                        "System.DateTime": "Date",
                        "<Null>": "<Null>"
                    }
                }
            ], Pivot.conditions = {
                propertyName: "conditions", modelName: "Conditions", displayName: "Conditions", array: true,
                template: "#dxrd-commonCollectionItem",
                editor: { custom: "dxrd-pivot-sortBySummaryInfo-conditions" }
            }, Pivot.field = { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", defaultVal: null, editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.customTotalSummaryType = { propertyName: "customTotalSummaryType", modelName: "@CustomTotalSummaryType", displayName: "Custom Total Summary Type", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: $.extend({ "": Designer.getLocalization("(" + "none" + ")") }, Pivot.summaryTypeValues) }, Pivot.sortBySummaryInfo = [Pivot.conditions, Pivot.customTotalSummaryType, Pivot.fieldComponentName, Pivot.field, Pivot.summaryType];
        })(Pivot = Designer.Pivot || (Designer.Pivot = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Pivot;
        (function (Pivot) {
            function comparerFields(firstField, secondField) {
                return firstField.areaIndex() - secondField.areaIndex();
            }
            Pivot.comparerFields = comparerFields;
            var CustomEditor = (function (_super) {
                __extends(CustomEditor, _super);
                function CustomEditor(modelPropertyInfo, level, parentDisabled) {
                    _super.call(this, modelPropertyInfo, level, parentDisabled);
                }
                return CustomEditor;
            })(DevExpress.JS.Widgets.Editor);
            Pivot.CustomEditor = CustomEditor;
            var PivotGridFieldViewModel = (function (_super) {
                __extends(PivotGridFieldViewModel, _super);
                function PivotGridFieldViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, Designer.cutRefs(model), parent, serializer);
                    this.controlType = "PivotGridField";
                    this.areaIndexEditable = ko.pureComputed({
                        read: function () { return _this.areaIndex(); },
                        write: function (newValue) {
                            if (newValue >= 0) {
                                var fields = parent["getFieldsFromArea"](_this.area());
                                if (newValue >= fields.length)
                                    return;
                                var currentValue = _this.areaIndex(), delta = newValue < currentValue ? 1 : -1, min = Math.min(newValue, currentValue), max = Math.max(newValue, currentValue);
                                fields.forEach(function (field) {
                                    var fieldAreaIndex = field.areaIndex();
                                    if (min <= fieldAreaIndex && fieldAreaIndex <= max)
                                        field.areaIndex(fieldAreaIndex + delta);
                                });
                                _this.areaIndex(newValue);
                            }
                        }
                    });
                    this._disposables.push(this.area.subscribe(function (newValue) {
                        _this.areaIndex(parent["getFieldsFromArea"](_this.area()).length - 1);
                    }));
                    this.sortBySummaryInfo = new Pivot.SortBySummaryInfo(this.sortBySummaryInfo || {}, this, serializer);
                }
                PivotGridFieldViewModel.createNew = function (parent) {
                    return function () {
                        return new PivotGridFieldViewModel({}, ko.unwrap(parent), null);
                    };
                };
                PivotGridFieldViewModel.prototype.getInfo = function () {
                    return Pivot.pivotGridFieldSerializationsInfo;
                };
                PivotGridFieldViewModel.prototype.getControlFactory = function () {
                    return DevExpress.Designer.Report.controlsFactory;
                };
                PivotGridFieldViewModel.prototype.getPath = function (propertyName) {
                    return Designer.Report.getFullPath(this.parentModel()["getPath"](""), this.parentModel()["dataMember"]());
                };
                PivotGridFieldViewModel.fieldHeight = 20;
                return PivotGridFieldViewModel;
            })(Designer.ElementViewModel);
            Pivot.PivotGridFieldViewModel = PivotGridFieldViewModel;
            var PivotGridFieldSurface = (function (_super) {
                __extends(PivotGridFieldSurface, _super);
                function PivotGridFieldSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, null);
                    this.displayText = function () {
                        return control.caption() || control.fieldName() || (control["displayName"]() || "");
                    };
                    this._disposables.push(ko.computed(function () {
                        _this["_width"](control["width"]() * context.zoom());
                        _this["_height"](PivotGridFieldViewModel.fieldHeight * context.zoom());
                    }));
                    this.template = "dxrd-pivotgrid-field";
                    this.selectiontemplate = "dxrd-pivotgrid-field-selection";
                    this.area = control.area;
                    this.areaIndex = control.areaIndex;
                }
                return PivotGridFieldSurface;
            })(Designer.Report.ControlSurfaceBase);
            Pivot.PivotGridFieldSurface = PivotGridFieldSurface;
            Pivot.caption = { displayName: "Caption", propertyName: "caption", modelName: "@Caption", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.index = { displayName: "Index", propertyName: "index", modelName: "@Index", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.fieldName = { propertyName: "fieldName", modelName: "@FieldName", displayName: "Data Column Name", editor: Designer.Widgets.editorTemplates.field }, Pivot.minWidth = { displayName: "Min Width", propertyName: "minWidth", modelName: "@MinWidth", defaultVal: 20, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.width = { displayName: "Width", propertyName: "width", modelName: "@Width", defaultVal: 100, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.area = {
                displayName: "Area", propertyName: "area", modelName: "@Area", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "FilterArea",
                values: {
                    "RowArea": "Row Area",
                    "ColumnArea": "Column Area",
                    "FilterArea": "Filter Area",
                    "DataArea": "Data Area",
                }
            }, Pivot.allowedAreas = {
                propertyName: "allowedAreas", modelName: "@AllowedAreas", displayName: "Allowed Areas", defaultVal: "All", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "All": "All",
                    "RowArea": "Row Area",
                    "ColumnArea": "Column Area",
                    "FilterArea": "Filter Area",
                    "DataArea": "Data Area"
                }
            }, Pivot.areaIndex = { propertyName: "areaIndex", modelName: "@AreaIndex", defaultVal: -1 }, Pivot.areaIndexEditable = { propertyName: "areaIndexEditable", displayName: "Area Index", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Pivot.unboundType = {
                propertyName: "unboundType", modelName: "@UnboundType", displayName: "Unbound Type", defaultVal: "Bound", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Bound": "Bound",
                    "Integer": "Integer",
                    "Decimal": "Decimal",
                    "DateTime": "DateTime",
                    "String": "String",
                    "Boolean": "Boolean",
                    "Object": "Object"
                }
            }, Pivot.unboundFieldName = { propertyName: "unboundFieldName", modelName: "@UnboundFieldName", displayName: "Unbound Field Name", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.unboundExpression = { propertyName: "unboundExpression", modelName: "@UnboundExpression", displayName: "Unbound Expression", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.topValueType = {
                propertyName: "topValueType", modelName: "@TopValueType", displayName: "Top Value Type", defaultVal: "Absolute", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Absolute": "Absolute",
                    "Percent": "Percent",
                    "Sum": "Sum"
                }
            }, Pivot.topValueShowOthers = { propertyName: "topValueShowOthers", modelName: "@TopValueShowOthers", displayName: "Top Value Show Others", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Pivot.topValueCount = { propertyName: "topValueCount", modelName: "@TopValueCount", displayName: "Top Value Count", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.summaryDisplayType = {
                propertyName: "summaryDisplayType", modelName: "@SummaryDisplayType", displayName: "Summary Display Type", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Default": "Default",
                    "AbsoluteVariation": "Absolute Variation",
                    "PercentVariation": "Percent Variation",
                    "PercentOfColumn": "Percent Of Column",
                    "PercentOfRow": "Percent Of Row",
                    "PercentOfColumnGrandTotal": "Percent Of Column Grand Total",
                    "PercentOfRowGrandTotal": "Percent Of Row Grand Total",
                    "PercentOfGrandTotal": "Percent Of Grand Total",
                    "RankInColumnSmallestToLargest": "Rank In Column Smallest To Largest",
                    "RankInRowSmallestToLargest": "Rank In Row Smallest To Largest",
                    "RankInColumnLargestToSmallest": "Rank In Column Largest To Smallest",
                    "RankInRowLargestToSmallest": "Rank In Row Largest To Smallest",
                    "Index": "Index"
                }
            }, Pivot.sortOrder = {
                propertyName: "sortOrder", modelName: "@SortOrder", displayName: "Sort Order", defaultVal: "Ascending", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Ascending": "Ascending", "Descending": "Descending"
                }
            }, Pivot.sortMode = {
                propertyName: "sortMode", modelName: "@SortMode", displayName: "Sort Mode", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Default": "Default",
                    "Value": "Value",
                    "Display Text": "DisplayText",
                    "Custom": "Custom",
                    "Key": "Key",
                    "ID": "ID",
                    "None": "None"
                }
            }, Pivot.showNewValues = { propertyName: "showNewValues", modelName: "@ShowNewValues", displayName: "Show New Values", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Pivot.runningTotal = { propertyName: "runningTotal", modelName: "@RunningTotal", displayName: "Running Total", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Pivot.rowValueLineCount = { propertyName: "rowValueLineCount", modelName: "@RowValueLineCount", displayName: "Row Value Line Count", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.groupIntervalNumericRange = { propertyName: "groupIntervalNumericRange", modelName: "@GroupIntervalNumericRange", displayName: "Group Interval Numeric Range", defaultVal: 10, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.groupInterval = {
                propertyName: "groupInterval", modelName: "@GroupInterval", displayName: "Group Interval", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Default": "Default",
                    "Date": "Date",
                    "Day": "DateDay",
                    "DateDayOfWeek": "Day Of Week",
                    "DateDayOfYear": "Day Of Year",
                    "DateWeekOfMonth": "Week Of Month",
                    "DateWeekOfYear": "Week Of Year",
                    "DateMonth": "Month",
                    "DateQuarter": "Quarter",
                    "DateYear": "Year",
                    "YearAge": "Year Age",
                    "MonthAge": "Month Age",
                    "WeekAge": "Week Age",
                    "DayAge": "Day Age",
                    "Alphabetical": "Alphabetical",
                    "Numeric": "Numeric",
                    "Hour": "Hour",
                    "Custom": "Custom",
                    "Minute": "Minute",
                    "Second": "Second",
                    "DateMonthYear": "Month-Year",
                    "DateQuarterYear": "Quarter-Year",
                    "DateHour": "Date-Hour",
                    "DateHourMinute": "Date-Hour-Minute",
                    "DateHourMinuteSecond": "Date-Hour-Minute-Second"
                }
            }, Pivot.grandTotalText = { propertyName: "grandTotalText", modelName: "@GrandTotalText", displayName: "Grand Total Text", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.expandedInFieldsGroup = { propertyName: "expandedInFieldsGroup", modelName: "@ExpandedInFieldsGroup", displayName: "Expanded In Fields Group", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Pivot.emptyValueText = { propertyName: "emptyValueText", modelName: "@EmptyValueText", displayName: "Empty Value Text", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.emptyCellText = { propertyName: "emptyCellText", modelName: "@EmptyCellText", displayName: "Empty Cell Text", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.displayFolder = { propertyName: "displayFolder", modelName: "@DisplayFolder", displayName: "Display Folder", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.columnValueLineCount = { propertyName: "columnValueLineCount", modelName: "@ColumnValueLineCount", displayName: "Column Value Line Count", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.totalsVisibility = {
                propertyName: "totalsVisibility", modelName: "@TotalsVisibility", displayName: "Totals Visibility", defaultVal: "AutomaticTotals", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "AutomaticTotals": "Automatic Totals",
                    "CustomTotals": "Custom Totals",
                    "None": "None"
                }
            }, Pivot.useNativeFormat = { propertyName: "useNativeFormat", modelName: "@UseNativeFormat", displayName: "Export As Numbers To Excel", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, Pivot.KPIGraphic = {
                propertyName: "KPIGraphic", modelName: "@KPIGraphic", displayName: "KPI Graphic", defaultVal: "ServerDefined", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "None": "None",
                    "ServerDefined": "Server Defined",
                    "Shapes": "Shapes",
                    "TrafficLights": "Traffic Lights",
                    "RoadSigns": "Road Signs",
                    "Gauge": "Gauge",
                    "ReversedGauge": "Reversed Gauge",
                    "Thermometer": "Thermometer",
                    "ReversedThermometer": "Reversed Thermometer",
                    "Cylinder": "Cylinder",
                    "ReversedCylinder": "Reversed Cylinder",
                    "Faces": "Faces",
                    "VarianceArrow": "Variance Arrow",
                    "StandardArrow": "Standard Arrow",
                    "StatusArrow": "Status Arrow",
                    "ReversedStatusArrow": "Reversed Status Arrow"
                }
            };
            var formatType = {
                propertyName: "formatType", modelName: "@FormatType", displayName: "Format Type", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "None": "None",
                    "Numeric": "Numeric",
                    "DateTime": "DateTime",
                    "Custom": "Custom"
                }
            }, formatString = { propertyName: "formatString", modelName: "@FormatString", displayName: "Format String", defaultVal: "", editor: Designer.Widgets.editorTemplates.formatEditor };
            var formatInfo = [formatType, formatString];
            Pivot.cellFormat = { propertyName: "cellFormat", modelName: "CellFormat", displayName: "Cell Format", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Pivot.totalCellFormat = { propertyName: "totalCellFormat", modelName: "TotalCellFormat", displayName: "Total Cell Format", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Pivot.grandTotalCellFormat = { propertyName: "grandTotalCellFormat", modelName: "GrandTotalCellFormat", displayName: "Grand Total Cell Format", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Pivot.valueFormat = { propertyName: "valueFormat", modelName: "ValueFormat", displayName: "Value Format", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Pivot.totalValueFormat = { propertyName: "totalValueFormat", modelName: "TotalValueFormat", displayName: "Total Value Format", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var textHorizontalAligment = {
                propertyName: "textHorizontalAligment", modelName: "@HAlignment", displayName: "Text Horizontal Aligment", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Default": "Default",
                    "Near": "Near",
                    "Center": "Center",
                    "Far": "Far"
                }
            }, textVerticalAligment = {
                propertyName: "textVerticalAligment", modelName: "@VAlignment", displayName: "Text Vertical Aligment", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Default": "Default",
                    "Top": "Top",
                    "Center": "Center",
                    "Bottom": "Bottom"
                }
            }, trimming = {
                propertyName: "trimming", modelName: "@Trimming", displayName: "Trimming", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "None": "None",
                    "Character": "Character",
                    "Word": "Word",
                    "EllipsisCharacter": "EllipsisCharacter",
                    "EllipsisWord": "EllipsisWord",
                    "EllipsisPath": "EllipsisPath"
                }
            }, appearanceWordWrap = {
                propertyName: "wordWrap", modelName: "@WordWrap", displayName: "Word Wrap", defaultVal: "NoWrap", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "NoWrap": "No Wrap",
                    "Wrap": "Wrap"
                }
            };
            var textOptionsInfo = [textHorizontalAligment, textVerticalAligment, trimming, appearanceWordWrap], textOptions = { propertyName: "textOptions", modelName: "TextOptions", displayName: "Text Options", info: textOptionsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Pivot.appearanceInfo = [Designer.Report.backColor, Designer.Report.borderColor, Designer.Report.foreColor, Designer.Report.font, textOptions];
            var cellAppearance = { propertyName: "cellAppearance", modelName: "Cell", displayName: "Cell", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, totalCellAppearance = { propertyName: "totalCellAppearance", modelName: "TotalCell", displayName: "Total Cell", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, customTotalCellAppearance = { propertyName: "customTotalCellAppearance", modelName: "CustomTotalCell", displayName: "Custom Total Cell", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, grandTotalCellAppearance = { propertyName: "grandTotalCellAppearance", modelName: "GrandTotalCell", displayName: "Grand Total Cell", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, fieldValueAppearance = { propertyName: "fieldValueAppearance", modelName: "FieldValue", displayName: "Field Value", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, fieldValueTotalAppearance = { propertyName: "fieldValueTotalAppearance", modelName: "FieldValueTotal", displayName: "Field Value Total", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, fieldValueGrandTotalAppearance = { propertyName: "fieldValueGrandTotalAppearance", modelName: "FieldValueGrandTotal", displayName: "Field Value Grand Total", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, fieldHeaderAppearance = { propertyName: "fieldHeaderAppearance", modelName: "FieldHeader", displayName: "Field Header", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Pivot.appearancesInfo = [cellAppearance, totalCellAppearance, customTotalCellAppearance, grandTotalCellAppearance, fieldHeaderAppearance, fieldValueAppearance, fieldValueGrandTotalAppearance, fieldValueTotalAppearance];
            var appearances = { propertyName: "appearances", modelName: "Appearance", displayName: "Appearance", info: Pivot.appearancesInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var allowDrag = { propertyName: "allowDrag", modelName: "@AllowDrag", displayName: "Allow Drag", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, allowDragInCustomizationForm = { propertyName: "@allowDragInCustomizationForm", modelName: "AllowDragInCustomizationForm", displayName: "Allow Drag In Customization Form", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, allowExpand = { propertyName: "allowExpand", modelName: "@AllowExpand", displayName: "Allow Expand", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, allowFilter = { propertyName: "allowFilter", modelName: "@AllowFilter", displayName: "Allow Filter", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, allowFilterBySummary = { propertyName: "allowFilterBySummary", modelName: "@AllowFilterBySummary", displayName: "Allow Filter By Summary", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, allowRunTimeSummaryChange = { propertyName: "allowRunTimeSummaryChange", modelName: "@AllowRunTimeSummaryChange", displayName: "Allow Run Time Summary Change", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, allowSort = { propertyName: "allowSort", modelName: "@AllowSort", displayName: "Allow Sort", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, allowSortBySummary = { propertyName: "allowSortBySummary", modelName: "@AllowSortBySummary", displayName: "Allow Sort By Summary", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, groupFilterMode = { propertyName: "groupFilterMode", modelName: "@GroupFilterMode", displayName: "Group Filter Mode", defaultVal: null, editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: { "List": "List", "Tree": "Tree" } }, hideEmptyVariationItems = { propertyName: "hideEmptyVariationItems", modelName: "@HideEmptyVariationItems", displayName: "Hide Empty Variation Items", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showCustomTotals = { propertyName: "showCustomTotals", modelName: "@ShowCustomTotals", displayName: "Show Custom Totals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showGrandTotal = { propertyName: "showGrandTotal", modelName: "@ShowGrandTotal", displayName: "Show Grand Total", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showSummaryTypeName = { propertyName: "showSummaryTypeName", modelName: "@ShowSummaryTypeName", displayName: "Show Summary Type Name", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showTotals = { propertyName: "showTotals", modelName: "@ShowTotals", displayName: "Show Totals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showValues = { propertyName: "showValues", modelName: "@ShowValues", displayName: "Show Values", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            var optionsInfo = [allowDrag, allowDragInCustomizationForm, allowExpand, allowFilter, allowFilterBySummary, allowRunTimeSummaryChange, allowSort, allowSortBySummary, groupFilterMode,
                hideEmptyVariationItems, showCustomTotals, showGrandTotal, showSummaryTypeName, showTotals, showValues];
            Pivot.options = { propertyName: "options", modelName: "Options", displayName: "Options", info: optionsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Pivot.sortBySummary = { propertyName: "sortBySummaryInfo", modelName: "SortBySummaryInfo", displayName: "Sort By Summary Info", from: Pivot.SortBySummaryInfo.from, toJsonObject: Pivot.SortBySummaryInfo.toJSON, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Pivot.pivotGridFieldSerializationsInfo = [
                appearances,
                Pivot.allowedAreas, Pivot.area, Pivot.areaIndex, Pivot.areaIndexEditable,
                Pivot.caption, Pivot.cellFormat, Pivot.columnValueLineCount,
                Pivot.displayFolder, Pivot.emptyCellText, Pivot.emptyValueText, Pivot.expandedInFieldsGroup,
                Pivot.fieldName, Pivot.summaryType, Pivot.topValueCount, Pivot.topValueShowOthers,
                Pivot.grandTotalCellFormat, Pivot.grandTotalText, Pivot.groupInterval, Pivot.groupIntervalNumericRange,
                Pivot.index, Pivot.KPIGraphic, Pivot.minWidth, Pivot.width, Pivot.rowValueLineCount, Pivot.runningTotal,
                Pivot.showNewValues, Pivot.sortMode, Pivot.sortOrder, Pivot.summaryDisplayType,
                Pivot.topValueType, Pivot.totalCellFormat, Pivot.totalValueFormat, Pivot.totalsVisibility,
                Pivot.unboundExpression, Pivot.unboundFieldName, Pivot.unboundType, Pivot.useNativeFormat,
                Pivot.valueFormat, Pivot.options, Pivot.sortBySummary
            ].concat(Designer.Report.baseControlProperties), Pivot.popularPropertiesPivotGridField = ["area", "areaIndexEditable", "fieldName", "caption", "groupInterval", "summaryType", "summaryDisplayType", "unboundType", "unboundExpression"];
            Pivot.pivotGridFieldsSerializable = { displayName: "Fields", propertyName: "fields", modelName: "Fields", array: true, editor: Designer.Report.editorTemplates.pivotGridFields, template: "#dxrd-collectionItemWithAccordion", };
        })(Pivot = Designer.Pivot || (Designer.Pivot = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRPivotGridViewModel = (function (_super) {
                __extends(XRPivotGridViewModel, _super);
                function XRPivotGridViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.fields = DevExpress.JS.Utils.deserializeArray(model && model.Fields || [], function (item) { return new Designer.Pivot.PivotGridFieldViewModel(item, _this, serializer); });
                    this._disposables.push(this.fields.subscribe(function () {
                        ["FilterArea", "DataArea", "ColumnArea", "RowArea"].forEach(function (area) {
                            var areaFields = _this.getFieldsFromArea(area);
                            for (var index = 0; index < areaFields.length; index++) {
                                areaFields[index].areaIndex(index);
                            }
                        });
                    }));
                    this.addFieldToArea = function (area) {
                        if (_this.lockedInUserDesigner())
                            return;
                        var newField = new Designer.Pivot.PivotGridFieldViewModel({ "@ControlType": "PivotGridField", "@Area": area }, _this, serializer);
                        newField.index(_this.fields().length);
                        newField.areaIndex(_this.getFieldsFromArea(area).length);
                        _this.fields.push(newField);
                    };
                    this._initCriteriaString();
                }
                XRPivotGridViewModel.prototype._initCriteriaString = function () {
                    this.prefilter.criteriaString = new DevExpress.JS.Widgets.FilterStringOptions(this.prefilter._criteriaString);
                    this.prefilter.criteriaString.helper.canChoiceParameters = false;
                    this.prefilter.criteriaString.helper.canChoiceProperty = false;
                    var self = this;
                    this.prefilter.criteriaString.helper.generateTreelistOptions = function (fieldListProvider, path) {
                        var treeListOptions = ko.observable(null);
                        var selected = ko.observable(null);
                        treeListOptions({
                            itemsProvider: {
                                getItems: function (pathRequest) {
                                    var result = $.Deferred();
                                    var fullPath = new DevExpress.JS.Widgets.PathRequest(Report.getFullPath(self.getPath(""), self.dataMember()));
                                    ko.unwrap(fieldListProvider).getItems(fullPath).done(function (dataSourceItems) {
                                        var items = [], fields = self.fields();
                                        for (var i = 0; i < fields.length; i++) {
                                            var field = fields[i];
                                            if (field.area() === "DataArea") {
                                                continue;
                                            }
                                            var dataMemberInfo = dataSourceItems.filter(function (item) { return item.name === field.fieldName(); })[0];
                                            items.push({
                                                displayName: field.fieldName() || field["displayName"](),
                                                isList: false,
                                                name: field.name(),
                                                specifics: dataMemberInfo && dataMemberInfo.specifics.toLowerCase() || "integer"
                                            });
                                        }
                                        result.resolve(items);
                                    });
                                    return result.promise();
                                }
                            },
                            selectedPath: ko.observable(""),
                            selected: selected,
                            path: path,
                            treeListController: new DevExpress.JS.Widgets.FilterEditorTreeListController(selected),
                            rtl: DevExpress["config"]()["rtlEnabled"]
                        });
                        return treeListOptions;
                    };
                };
                XRPivotGridViewModel.prototype.removeChild = function (selectedField) {
                    this.fields.splice(this.fields().indexOf(selectedField), 1);
                };
                XRPivotGridViewModel.prototype.getFieldsFromArea = function (area) {
                    var result = [];
                    result.push.apply(result, this.fields().filter(function (field) { return field.area() === area; }));
                    return result.sort(Designer.Pivot.comparerFields);
                };
                XRPivotGridViewModel.prototype.getPath = function (propertyName) {
                    return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
                };
                return XRPivotGridViewModel;
            })(Report.ControlViewModel);
            Report.XRPivotGridViewModel = XRPivotGridViewModel;
            var PivotGridSurface = (function (_super) {
                __extends(PivotGridSurface, _super);
                function PivotGridSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.contenttemplate = "dxrd-pivotgrid-content";
                    this.selectiontemplate = "dxrd-pivotgrid-selection";
                    this.filterFields = ko.pureComputed(function () {
                        return _this.getAreaFields("FilterArea");
                    });
                    this.dataFields = ko.pureComputed(function () {
                        return _this.getAreaFields("DataArea");
                    });
                    this.columnFields = ko.pureComputed(function () {
                        return _this.getAreaFields("ColumnArea");
                    });
                    this.rowFields = ko.pureComputed(function () {
                        return _this.getAreaFields("RowArea");
                    });
                    this.totalsHeight = ko.pureComputed(function () {
                        return _this.columnFields().length > 0 ? _this.columnFields().length * Designer.Pivot.PivotGridFieldViewModel.fieldHeight : Designer.Pivot.PivotGridFieldViewModel.fieldHeight;
                    });
                    this.rowHeaderHeight = ko.pureComputed(function () {
                        return _this.totalsHeight() + (_this.dataFields().length > 0 ? Designer.Pivot.PivotGridFieldViewModel.fieldHeight : 0) + 8;
                    });
                    this.totalsDataFieldWidth = ko.pureComputed(function () {
                        return _this.getTotalsAreaFieldWidth("DataArea", context.zoom());
                    });
                    this.totalsRowFieldWidth = ko.pureComputed(function () {
                        return _this.getTotalsAreaFieldWidth("RowArea", context.zoom());
                    });
                }
                PivotGridSurface.prototype._getChildrenHolderName = function () { return "fields"; };
                PivotGridSurface.prototype.getAreaFields = function (area) {
                    return this.fields().filter(function (field) { return field.area() === area; }).sort(Designer.Pivot.comparerFields);
                };
                PivotGridSurface.prototype.getTotalsAreaFieldWidth = function (area, zoom) {
                    var total = 0, areaFields = this.getAreaFields(area);
                    areaFields.forEach(function (field) { total += field.rect().width; });
                    return areaFields.length > 0 ? total / zoom : 100;
                };
                PivotGridSurface.prototype.getAdornTemplate = function () {
                    return this.isIntersect() ? "dxrd-intersect" : "";
                };
                return PivotGridSurface;
            })(Report.ControlSurface);
            Report.PivotGridSurface = PivotGridSurface;
            var PivotGridActions = (function (_super) {
                __extends(PivotGridActions, _super);
                function PivotGridActions() {
                    _super.call(this);
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Insert Field in Filter Area",
                            imageClassName: "dxrd-image-actions-add_field_to_filter_area",
                            clickAction: function (model) { model["addFieldToArea"]("FilterArea"); }
                        },
                        {
                            text: "Insert Field in Data Area",
                            imageClassName: "dxrd-image-actions-add_field_to_data_area",
                            clickAction: function (model) { model["addFieldToArea"]("DataArea"); }
                        },
                        {
                            text: "Insert Field in Column Area",
                            imageClassName: "dxrd-image-actions-add_field_to_column_area",
                            clickAction: function (model) { model["addFieldToArea"]("ColumnArea"); }
                        },
                        {
                            text: "Insert Field in Row Area",
                            imageClassName: "dxrd-image-actions-add_field_to_row_area",
                            clickAction: function (model) { model["addFieldToArea"]("RowArea"); }
                        }
                    ]);
                }
                PivotGridActions.prototype.condition = function (context) {
                    return context instanceof XRPivotGridViewModel;
                };
                return PivotGridActions;
            })(Designer.BaseActionsProvider);
            Report.PivotGridActions = PivotGridActions;
            var linesAppearance = { propertyName: "linesAppearance", modelName: "Lines", displayName: "Lines", info: Designer.Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.pivotGridAppearances = { propertyName: "appearances", modelName: "Appearance", displayName: "Appearance", info: Designer.Pivot.appearancesInfo.concat(linesAppearance), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var cellStyleName = { propertyName: "cellStyleName", modelName: "@CellStyleName", displayName: "Cell", editor: Report.editorTemplates.style, defaultVal: null }, customTotalCellStyleName = { propertyName: "customTotalCellStyleName", modelName: "@CustomTotalCellStyleName", displayName: "Custom Total Cell", editor: Report.editorTemplates.style, defaultVal: null }, fieldHeaderStyleName = { propertyName: "fieldHeaderStyleName", modelName: "@FieldHeaderStyleName", displayName: "Field Header", editor: Report.editorTemplates.style, defaultVal: null }, fieldValueGrandTotalStyleName = { propertyName: "fieldValueGrandTotalStyleName", modelName: "@FieldValueGrandTotalStyleName", displayName: "Field Value Grand Total", editor: Report.editorTemplates.style, defaultVal: null }, fieldValueStyleName = { propertyName: "fieldValueStyleName", modelName: "@FieldValueStyleName", displayName: "Field Value", editor: Report.editorTemplates.style, defaultVal: null }, fieldValueTotalStyleName = { propertyName: "fieldValueTotalStyleName", modelName: "@FieldValueTotalStyleName", displayName: "Field Value Total", editor: Report.editorTemplates.style, defaultVal: null }, filterSeparatorStyleName = { propertyName: "filterSeparatorStyleName", modelName: "@FilterSeparatorStyleName", displayName: "Filter Separator", editor: Report.editorTemplates.style, defaultVal: null }, grandTotalCellStyleName = { propertyName: "grandTotalCellStyleName", modelName: "@GrandTotalCellStyleName", displayName: "Grand Total Cell", editor: Report.editorTemplates.style, defaultVal: null }, headerGroupLineStyleName = { propertyName: "headerGroupLineStyleName", modelName: "@HeaderGroupLineStyleName", displayName: "Header Group Line", editor: Report.editorTemplates.style, defaultVal: null }, linesStyleName = { propertyName: "linesStyleName", modelName: "@LinesStyleName", displayName: "Lines", editor: Report.editorTemplates.style, defaultVal: null }, totalCellStyleName = { propertyName: "totalCellStyleName", modelName: "@TotalCellStyleName", displayName: "Total Cell", editor: Report.editorTemplates.style, defaultVal: null };
            Report.pivotGridStyles = [cellStyleName, customTotalCellStyleName, fieldHeaderStyleName, fieldValueGrandTotalStyleName, fieldValueStyleName, fieldValueTotalStyleName, filterSeparatorStyleName,
                grandTotalCellStyleName, headerGroupLineStyleName, linesStyleName, totalCellStyleName];
            var criteriaString = { propertyName: "_criteriaString", modelName: "@CriteriaString" };
            var criteriaStringEditable = { propertyName: "criteriaString", displayName: "Criteria", defaultVal: "", editor: Designer.Widgets.editorTemplates.filterEditor };
            var enabled = { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            var prefilterSerializationsInfo = [criteriaString, criteriaStringEditable, enabled];
            Report.prefilter = { propertyName: "prefilter", modelName: "Prefilter", displayName: "Prefilter", info: prefilterSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var autoTransposeChart = { propertyName: "autoTransposeChart", modelName: "@AutoTransposeChart", displayName: "Auto Transpose Chart", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, dataProvideMode = {
                propertyName: "dataProvideMode", modelName: "@DataProvideMode", displayName: "Data Provide Mode", defaultVal: "ProvideLastLevelData", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "ProvideLastLevelData": "Provide Last Level Data",
                    "UseCustomSettings": "Use Custom Settings"
                }
            }, dataProvidePriority = {
                propertyName: "dataProvidePriority", modelName: "@DataProvidePriority", displayName: "Data Provide Priority", defaultVal: "Rows", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Columns": "Columns",
                    "Rows": "Rows"
                }
            }, fieldValuesProvideMode = {
                propertyName: "fieldValuesProvideMode", modelName: "@FieldValuesProvideMode", displayName: "Field Values Provide Mode", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Default": "Default",
                    "DisplayText": "Display Text",
                    "Value": "Value"
                }
            }, maxAllowedPointCountInSeries = { propertyName: "maxAllowedPointCountInSeries", modelName: "@MaxAllowedPointCountInSeries", displayName: "Max Allowed Point Count In Series", defaultVal: 100, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, maxAllowedSeriesCount = { propertyName: "maxAllowedSeriesCount", modelName: "@MaxAllowedSeriesCount", displayName: "Max Allowed Series Count", defaultVal: 10, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, provideColumnCustomTotals = { propertyName: "provideColumnCustomTotals", modelName: "@ProvideColumnCustomTotals", displayName: "Provide Column Custom Totals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideColumnGrandTotals = { propertyName: "provideColumnGrandTotals", modelName: "@ProvideColumnGrandTotals", displayName: "Provide Column Grand Totals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideColumnTotals = { propertyName: "provideColumnTotals", modelName: "@ProvideColumnTotals", displayName: "Provide Column Totals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideDataByColumns = { propertyName: "provideDataByColumns", modelName: "@ProvideDataByColumns", displayName: "Provide Data By Columns", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideDataFieldsOnSeries = { propertyName: "provideDataFieldsOnSeries", modelName: "@ProvideDataFieldsOnSeries", displayName: "Provide Data Fields On Series", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideEmptyCells = { propertyName: "provideEmptyCells", modelName: "@ProvideEmptyCells", displayName: "Provide Empty Cells", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideRowCustomTotals = { propertyName: "provideRowCustomTotals", modelName: "@ProvideRowCustomTotals", displayName: "Provide Row Custom Totals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideRowGrandTotals = { propertyName: "provideRowGrandTotals", modelName: "@ProvideRowGrandTotals", displayName: "Provide Row Grand Totals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideRowTotals = { propertyName: "provideRowTotals", modelName: "@ProvideRowTotals", displayName: "Provide Row Totals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, optionsChartDataSourceInfo = [autoTransposeChart, dataProvideMode, dataProvidePriority, fieldValuesProvideMode, maxAllowedPointCountInSeries,
                maxAllowedSeriesCount, provideColumnCustomTotals, provideColumnGrandTotals, provideColumnTotals, provideDataByColumns, provideDataFieldsOnSeries, provideEmptyCells,
                provideRowCustomTotals, provideRowGrandTotals, provideRowTotals], optionsChartDataSource = { propertyName: "optionsChartDataSource", modelName: "OptionsChartDataSource", displayName: "Options Chart Data Source", info: optionsChartDataSourceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var allowCrossGroupVariation = { propertyName: "allowCrossGroupVariation", modelName: "@AllowCrossGroupVariation", displayName: "Allow Cross Group Variation", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, autoExpandGroups = { propertyName: "autoExpandGroups", modelName: "@AutoExpandGroups", displayName: "Aut oExpand Groups", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, caseSensitive = { propertyName: "caseSensitive", modelName: "@CaseSensitive", displayName: "Case Sensitive", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, dataFieldUnboundExpressionMode = {
                propertyName: "dataFieldUnboundExpressionMode", modelName: "@DataFieldUnboundExpressionMode", displayName: "Data Field Unbound Expression Mode", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Default": "Default",
                    "UseSummaryValues": "Use Summary Values"
                }
            }, drillDownMaxRowCount = { propertyName: "DrillDownMaxRowCount", modelName: "@DrillDownMaxRowCount", displayName: "Drill Down Max Row Count", defaultVal: -1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, filterByVisibleFieldsOnly = { propertyName: "filterByVisibleFieldsOnly", modelName: "@FilterByVisibleFieldsOnly", displayName: "Filter By Visible Fields Only", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, optionsDataInfo = [allowCrossGroupVariation, autoExpandGroups, caseSensitive, dataFieldUnboundExpressionMode, drillDownMaxRowCount, filterByVisibleFieldsOnly], optionsData = { propertyName: "optionsData", modelName: "OptionsData", displayName: "Data Options", info: optionsDataInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var area = {
                propertyName: "area", modelName: "@Area", displayName: "Area", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "None": "None",
                    "ColumnArea": "Column Area",
                    "RowArea": "Row Area"
                }
            }, areaIndex = { propertyName: "areaIndex", modelName: "@AreaIndex", displayName: "Area Index", defaultVal: -1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, columnValueLineCount = { propertyName: "columnValueLineCount", modelName: "@ColumnValueLineCount", displayName: "Column Value Line Count", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, fieldNaming = {
                propertyName: "fieldNaming", modelName: "@FieldNaming", displayName: "Field Naming", defaultVal: "FieldName", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "FieldName": "Field Name",
                    "Name": "Name"
                }
            }, rowHeaderWidth = { propertyName: "rowHeaderWidth", modelName: "@RowHeaderWidth", displayName: "Row Header Width", defaultVal: 100, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, rowValueLineCount = { propertyName: "rowValueLineCount", modelName: "@RowValueLineCount", displayName: "Row Value Line Count", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, optionsDataFieldInfo = [area, areaIndex, Designer.Pivot.caption, columnValueLineCount, fieldNaming, rowHeaderWidth, rowValueLineCount], optionsDataField = { propertyName: "optionsDataField", modelName: "OptionsDataField", displayName: "Data Field Options", info: optionsDataFieldInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var columnFieldValueSeparator = { propertyName: "columnFieldValueSeparator", modelName: "@ColumnFieldValueSeparator", displayName: "Column Field Value Separator", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, filterSeparatorBarPadding = { propertyName: "filterSeparatorBarPadding", modelName: "@FilterSeparatorBarPadding", displayName: "Filter Separator Bar Padding", defaultVal: -1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, mergeColumnFieldValues = { propertyName: "mergeColumnFieldValues", modelName: "@MergeColumnFieldValues", displayName: "Merge Column Field Values", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, mergeRowFieldValues = { propertyName: "mergeRowFieldValues", modelName: "@MergeRowFieldValues", displayName: "Merge Row Field Values", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printColumnHeaders = { propertyName: "printColumnHeaders", modelName: "@PrintColumnHeaders", displayName: "Print Column Headers", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, printDataHeaders = { propertyName: "printDataHeaders", modelName: "@PrintDataHeaders", displayName: "Print Data Headers", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, printFilterHeaders = { propertyName: "printFilterHeaders", modelName: "@PrintFilterHeaders", displayName: "Print Filter Headers", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, printHeadersOnEveryPage = { propertyName: "printHeadersOnEveryPage", modelName: "@PrintHeadersOnEveryPage", displayName: "Print Headers on Every Page", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printHorzLines = { propertyName: "printHorzLines", modelName: "@PrintHorzLines", displayName: "Print Horizontal Lines", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, printRowHeaders = { propertyName: "printRowHeaders", modelName: "@PrintRowHeaders", displayName: "Print Row Headers", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, printUnusedFilterFields = { propertyName: "printUnusedFilterFields", modelName: "@PrintUnusedFilterFields", displayName: "Print Unused Filter Fields", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printVertLines = { propertyName: "printVertLines", modelName: "@PrintVertLines", displayName: "Print Vertical Lines", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: Designer.Chart.defaultBooleanValues }, rowFieldValueSeparator = { propertyName: "rowFieldValueSeparator", modelName: "@RowFieldValueSeparator", displayName: "Row Field Value Separator", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, usePrintAppearance = { propertyName: "usePrintAppearance", modelName: "@UsePrintAppearance", displayName: "Use Print Appearance", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, optionsPrintInfo = [columnFieldValueSeparator, filterSeparatorBarPadding, mergeColumnFieldValues, mergeRowFieldValues, printColumnHeaders, printDataHeaders, printFilterHeaders,
                printHeadersOnEveryPage, printHorzLines, printRowHeaders, printUnusedFilterFields, printVertLines, rowFieldValueSeparator, usePrintAppearance], optionsPrint = { propertyName: "optionsPrint", modelName: "OptionsPrint", displayName: "Print Options", info: optionsPrintInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var columnTotalsLocation = { propertyName: "columnTotalsLocation", modelName: "@ColumnTotalsLocation", displayName: "Column Totals Location", defaultVal: "Far", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: { "Near": "Near", "Far": "Far " } }, groupFieldsInCustomizationWindow = { propertyName: "groupFieldsInCustomizationWindow", modelName: "@GroupFieldsInCustomizationWindow", displayName: "Group Fields in the Customization Window", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, rowTotalsLocation = {
                propertyName: "rowTotalsLocation", modelName: "@RowTotalsLocation", displayName: "Row Totals Location", defaultVal: "Far", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "Near": "Near",
                    "Far": "Far",
                    "Tree": "Tree"
                }
            }, rowTreeOffset = { propertyName: "rowTreeOffset", modelName: "@RowTreeOffset", displayName: "Row Tree Offset", defaultVal: 21, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, rowTreeWidth = { propertyName: "rowTreeWidth", modelName: "@RowTreeWidth", displayName: "Row Tree Width", defaultVal: 100, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, showColumnGrandTotalHeader = { propertyName: "showColumnGrandTotalHeader", modelName: "@ShowColumnGrandTotalHeader", displayName: "Show Column Grand Total Header", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showColumnGrandTotals = { propertyName: "showColumnGrandTotals", modelName: "@ShowColumnGrandTotals", displayName: "Show Column Grand Totals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showColumnHeaders = { propertyName: "showColumnHeaders", modelName: "@ShowColumnHeaders", displayName: "Show Column Headers", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showColumnTotals = { propertyName: "showColumnTotals", modelName: "@ShowColumnTotals", displayName: "Show Column Totals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showCustomTotalsForSingleValues = { propertyName: "showCustomTotalsForSingleValues", modelName: "@ShowCustomTotalsForSingleValues", displayName: "Show Custom Totals For Single Values", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showDataHeaders = { propertyName: "showDataHeaders", modelName: "@ShowDataHeaders", displayName: "Show Data Headers", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showFilterHeaders = { propertyName: "showFilterHeaders", modelName: "@ShowFilterHeaders", displayName: "Show Filter Headers", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showFilterSeparatorBar = { propertyName: "showFilterSeparatorBar", modelName: "@ShowFilterSeparatorBar", displayName: "Show Filter Separator Bar", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showGrandTotalsForSingleValues = { propertyName: "showGrandTotalsForSingleValues", modelName: "@ShowGrandTotalsForSingleValues", displayName: "Show Grand Totals For Single Values", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showHorzLines = { propertyName: "showHorzLines", modelName: "@ShowHorzLines", displayName: "Show Horz Lines", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showRowGrandTotalHeader = { propertyName: "showRowGrandTotalHeader", modelName: "@ShowRowGrandTotalHeader", displayName: "Show Row Grand Total Header", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showRowGrandTotals = { propertyName: "showRowGrandTotals", modelName: "@ShowRowGrandTotals", displayName: "Show Row Grand Totals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showRowHeaders = { propertyName: "showRowHeaders", modelName: "@ShowRowHeaders", displayName: "Show Row Headers", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showRowTotals = { propertyName: "showRowTotals", modelName: "@ShowRowTotals", displayName: "Show Row Totals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showTotalsForSingleValues = { propertyName: "showTotalsForSingleValues", modelName: "@ShowTotalsForSingleValues", displayName: "Show Totals For Single Values", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showVertLines = { propertyName: "showVertLines", modelName: "@ShowVertLines", displayName: "Show Vert Lines", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, optionsViewInfo = [columnTotalsLocation, groupFieldsInCustomizationWindow, rowTotalsLocation, rowTreeOffset, rowTreeWidth, showColumnGrandTotalHeader, showColumnGrandTotals, showColumnHeaders, showColumnTotals, showCustomTotalsForSingleValues,
                showDataHeaders, showFilterHeaders, showFilterSeparatorBar, showGrandTotalsForSingleValues, showHorzLines, showRowGrandTotalHeader, showRowGrandTotals, showRowHeaders, showRowTotals,
                showTotalsForSingleValues, showVertLines], optionsView = { propertyName: "optionsView", modelName: "OptionsView", displayName: "View Options", info: optionsViewInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.pivotGridOptions = [optionsChartDataSource, optionsDataField, optionsData, optionsPrint, optionsView];
            Report.pivotGridSerializationsInfo = [
                Report.pivotGridAppearances,
                Report.anchorVertical, Report.anchorHorizontal, Report.dataSource, Report.dataMember, Report.prefilter,
                Report.keepTogether,
                Designer.Pivot.pivotGridFieldsSerializable, Report.pivotScripts, Report.rtl].concat(Report.baseControlProperties, Report.sizeLocation, Report.bookmarkGroup, Report.pivotGridStyles, Report.pivotGridOptions);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRPictureBoxViewModel = (function (_super) {
                __extends(XRPictureBoxViewModel, _super);
                function XRPictureBoxViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    var originalImageWidth = ko.observable(), originalImageHeight = ko.observable(), originalWidth = this.size.width, originalHeight = this.size.height;
                    this.size.width = ko.pureComputed({
                        read: function () {
                            return originalWidth();
                        },
                        write: function (value) {
                            if (!_this.isAutoSize) {
                                originalWidth(value);
                            }
                            else {
                                if (!Designer.checkModelReady(_this.root)) {
                                    originalWidth(value);
                                }
                                else {
                                    var o = originalWidth();
                                    originalWidth(value);
                                    originalWidth(o);
                                }
                            }
                        }
                    });
                    this.size.height = ko.pureComputed({
                        read: function () {
                            return originalHeight();
                        },
                        write: function (value) {
                            if (!_this.isAutoSize) {
                                originalHeight(value);
                            }
                            else {
                                if (!Designer.checkModelReady(_this.root)) {
                                    originalHeight(value);
                                }
                                else {
                                    var o = originalHeight();
                                    originalHeight(value);
                                    originalHeight(o);
                                }
                            }
                        }
                    });
                    this._disposables.push(ko.computed(function () {
                        var img = new Image();
                        img.onload = function () {
                            var report = _this.root;
                            _this._disposables.push(ko.computed(function () {
                                originalImageWidth(Designer.pixelToUnits(img.width, report.measureUnit(), 1));
                                originalImageHeight(Designer.pixelToUnits(img.height, report.measureUnit(), 1));
                            }));
                        };
                        if (_this.image()) {
                            img.src = "data:image/x;base64," + _this.image();
                        }
                    }));
                    var toPixel = function (value) {
                        return Designer.unitsToPixel(value, _this.root["measureUnit"]());
                    };
                    this._disposables.push(ko.computed(function () {
                        if (_this.isAutoSize && _this.image.peek()) {
                            var borders = new Designer.Widgets.BordersModel({ value: _this["borders"] }), borderWidth = _this["borderWidth"]() || 0, top, bottom, left, right, paddings = (_this["paddingObj"]);
                            top = borders.top() ? borderWidth : 0;
                            bottom = borders.bottom() ? borderWidth : 0;
                            left = borders.left() ? borderWidth : 0;
                            right = borders.right() ? borderWidth : 0;
                            originalWidth(originalImageWidth() + right + left + toPixel(paddings.left()) + toPixel(paddings.right()));
                            originalHeight(originalImageHeight() + top + bottom + toPixel(paddings.top()) + toPixel(paddings.bottom()));
                        }
                    }));
                    this.isSmallerImage = ko.pureComputed(function () {
                        return originalImageWidth() <= _this.size.width() && originalImageHeight() <= _this.size.height();
                    });
                    this._disposables.push(this.imageUrl.subscribe(function (newVal) {
                        if (newVal) {
                            _this.image(null);
                        }
                    }));
                    this._disposables.push(this.image.subscribe(function (newVal) {
                        if (newVal) {
                            _this.imageUrl(Report.imageUrl.defaultVal);
                        }
                    }));
                }
                Object.defineProperty(XRPictureBoxViewModel.prototype, "isAutoSize", {
                    get: function () {
                        return this.sizing() === "AutoSize";
                    },
                    enumerable: true,
                    configurable: true
                });
                return XRPictureBoxViewModel;
            })(Report.ControlViewModel);
            Report.XRPictureBoxViewModel = XRPictureBoxViewModel;
            Report.backgroundSizeCss = ["-o-background-size", "mozBackgroundSize", "backgroundSize"];
            Report.backgroundOriginCss = ["background-origin", "-webkit-background-origin", " -o-background-origin", "mozBackgroundOrigin", "backgroundOrigin"];
            var PictureBoxSurface = (function (_super) {
                __extends(PictureBoxSurface, _super);
                function PictureBoxSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    var control = this.getControlModel();
                    this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.paddingsCss());
                    });
                    this.contentCss = ko.pureComputed(function () {
                        var urlContent = control.image() ? "data:image/x;base64," + control.image() : control.imageUrl();
                        return $.extend({}, _this._createBackimage(control["backColor"](), urlContent, control.sizing(), control.isSmallerImage()), _this._createBackgroundOrigin());
                    });
                }
                PictureBoxSurface.prototype._createBackimage = function (background, urlContent, sizing, isSmallerImage) {
                    var backgroundResult = {};
                    if (urlContent) {
                        backgroundResult = { background: background + " url(" + urlContent + ") no-repeat" };
                        if (sizing) {
                            if (sizing === "Squeeze") {
                                sizing = isSmallerImage ? "CenterImage" : "ZoomImage";
                            }
                            switch (sizing) {
                                case "StretchImage":
                                    for (var i = 0; i < Report.backgroundSizeCss.length; i++) {
                                        backgroundResult[Report.backgroundSizeCss[i]] = "100% 100%";
                                    }
                                    break;
                                case "CenterImage":
                                    backgroundResult["backgroundPosition"] = "center center";
                                    break;
                                case "ZoomImage":
                                    for (var i = 0; i < Report.backgroundSizeCss.length; i++) {
                                        backgroundResult[Report.backgroundSizeCss[i]] = "contain";
                                    }
                                    backgroundResult["backgroundPosition"] = "center center";
                                    break;
                                case "AutoSize":
                                    for (var i = 0; i < Report.backgroundSizeCss.length; i++) {
                                        backgroundResult[Report.backgroundSizeCss[i]] = "100% 100%";
                                    }
                                    break;
                            }
                        }
                        return backgroundResult;
                    }
                    backgroundResult = { background: background };
                    return backgroundResult;
                };
                PictureBoxSurface.prototype._createBackgroundOrigin = function () {
                    var result = {};
                    for (var i = 0; i < Report.backgroundOriginCss.length; i++) {
                        result[Report.backgroundOriginCss[i]] = "content-box";
                    }
                    ;
                    result["width"] = this.contentSizes().width / this._context.zoom() + "px";
                    result["height"] = this.contentSizes().height / this._context.zoom() + "px";
                    return result;
                };
                PictureBoxSurface.prototype.getAdornTemplate = function () {
                    var superAdornTemplate = _super.prototype.getAdornTemplate.call(this), placeholder = this.hasBindings || !this.getControlModel()["image"]() ? "dxrd-image-surface-picturebox_placeholder" : "";
                    return superAdornTemplate + (superAdornTemplate && placeholder ? " " : "") + placeholder;
                };
                return PictureBoxSurface;
            })(Report.ControlSurface);
            Report.PictureBoxSurface = PictureBoxSurface;
            Report.image = { propertyName: "image", modelName: "@Image", editor: DevExpress.JS.Widgets.editorTemplates.image, displayName: "Image" };
            Report.imageUrl = { propertyName: "imageUrl", modelName: "@ImageUrl", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "", displayName: "Image Url" };
            Report.sizing = {
                propertyName: "sizing", modelName: "@Sizing", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Sizing", defaultVal: "Normal", from: Designer.fromEnum, values: {
                    "Normal": "Normal",
                    "StretchImage": "Stretch Image",
                    "AutoSize": "Auto-Size",
                    "CenterImage": "Center Image",
                    "ZoomImage": "Zoom Image",
                    "Squeeze": "Squeeze"
                }
            };
            Report.pictureBoxSerializationsInfo = [
                Report.image, Report.imageUrl, Report.sizing, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal, Report.controlScripts,
                Report.dataBindings(["Bookmark", "Image", "ImageUrl", "NavigateUrl", "Tag"]),
                Report.defaultDataBinding("Image"),
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup, Report.processGroup);
            Report.popularPropertiesPicture = ["image", "defaultDataBinding", "imageUrl", "sizing", "bookmark", "bookmarkParent"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var TableControlViewModel = (function (_super) {
                __extends(TableControlViewModel, _super);
                function TableControlViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this.rows = ko.observableArray();
                    this.rowsTotalWeight = ko.pureComputed(function () {
                        var result = 0;
                        _this.rows().forEach(function (row) {
                            result += row.weight();
                        });
                        return result;
                    });
                    this.pixelHeightWeight = ko.pureComputed(function () {
                        return _this.size.height() !== 0 ? _this.rowsTotalWeight() / _this.size.height() : 0;
                    });
                    var deserializedRows = DevExpress.JS.Utils.deserializeArray(control.Rows, function (item) { return new TableRowViewModel(item, _this, serializer); });
                    this.rows(deserializedRows());
                }
                TableControlViewModel.prototype._getAdjacentCells = function (condition) {
                    var adjacentCells = [];
                    this.rows().forEach(function (row) {
                        row.cells().filter(function (cell) { return condition(cell); }).forEach(function (cell) {
                            adjacentCells.push(cell);
                        });
                    });
                    return adjacentCells;
                };
                TableControlViewModel.prototype.updateRowLocation = function (row, deltaHeight) {
                    var oldHeight = row.height();
                    var rowIndex = this.rows().indexOf(row);
                    if (rowIndex > 0) {
                        var topRowHeight = this.rows()[rowIndex - 1].height;
                        var topHeight = topRowHeight() - deltaHeight;
                        topRowHeight(topHeight > 0 ? topHeight : 0);
                    }
                    else {
                        var deltaWeight = (row.weight() / oldHeight) * deltaHeight;
                        row.weight(row.weight() + deltaWeight);
                        this.location.y(this.location.y() - deltaHeight);
                        this.size.height(this.size.height() + deltaHeight);
                    }
                };
                TableControlViewModel.prototype.addChild = function (control, position) {
                    if (control instanceof TableRowViewModel) {
                        if (this.rows().indexOf(control) === -1) {
                            control.parentModel(this);
                            if (position != null) {
                                this.rows.splice(position, 0, control);
                            }
                            else {
                                this.rows.push(control);
                            }
                        }
                    }
                    else {
                        throw new Error("Trying to add non a row to the table.");
                    }
                };
                TableControlViewModel.prototype.insertRow = function (selectedRow, isRowAbove) {
                    var selectedRowHeight = selectedRow.height(), newRow = new TableRowViewModel({
                        "@ControlType": "XRTableRow",
                        "@Weight": selectedRow.weight(),
                        "@HeigthF": selectedRowHeight,
                    }, this), indexSelectedRow = this.rows.indexOf(selectedRow);
                    selectedRow.cells().forEach(function (cell) {
                        newRow.createChild({ "@ControlType": "XRTableCell", "@Weight": cell.weight() });
                    });
                    this.addChild(newRow, indexSelectedRow + (isRowAbove ? 0 : 1));
                    this.size.height(this.size.height() + selectedRowHeight);
                };
                TableControlViewModel.prototype.removeChild = function (selectedRow) {
                    if (this.rows().length > 0 && this.rows().indexOf(selectedRow) !== -1) {
                        var index = this.rows().indexOf(selectedRow);
                        this.size.height(this.size.height() - selectedRow.height());
                        this.rows.splice(index, 1);
                    }
                    if (this.rows().length === 0) {
                        this.parentModel().removeChild(this);
                    }
                };
                TableControlViewModel.prototype.insertColumn = function (selectedCell, isRight) {
                    var selectedCellX = selectedCell.surface.rect().left, selectedCellRight = selectedCell.surface.rect().left + selectedCell.surface.rect().width, adjacentCells = this._getAdjacentCells(function (cell) { return isRight ? ((cell.surface.rect().left + cell.surface.rect().width) === selectedCellRight) : (cell.surface.rect().left === selectedCellX); });
                    adjacentCells.forEach(function (cell) {
                        cell.parentModel().insertCellCopy(cell, isRight);
                    });
                };
                return TableControlViewModel;
            })(Report.ControlViewModel);
            Report.TableControlViewModel = TableControlViewModel;
            var TableRowViewModel = (function (_super) {
                __extends(TableRowViewModel, _super);
                function TableRowViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this.top = ko.observable(0);
                    this.width = parent.size.width;
                    this.cells = ko.observableArray();
                    this.cellsTotalWeight = ko.pureComputed(function () {
                        var result = 0;
                        _this.cells().forEach(function (cell) {
                            result += cell.weight();
                        });
                        return result;
                    });
                    this.pixelWidthWeight = ko.pureComputed(function () {
                        return parent.size.width() !== 0 ? _this.cellsTotalWeight() / parent.size.width() : 0;
                    });
                    this.height = ko.pureComputed({
                        read: function () {
                            var result = parent.size.height() * _this.weight() / parent.rowsTotalWeight();
                            return Math.round(result * 100) / 100;
                        },
                        write: function (newHeight) {
                            var dHeight = newHeight - _this.height(), newWeight = parent.pixelHeightWeight() * newHeight, dWeight = newWeight - _this.weight(), thisRowIndex = parent.rows().indexOf(_this);
                            _this.weight(newWeight);
                            if (thisRowIndex < parent.rows().length - 1) {
                                parent.rows()[thisRowIndex + 1].weight(parent.rows()[thisRowIndex + 1].weight() - dWeight);
                            }
                            else {
                                parent.size.height(parent.size.height() + dHeight);
                            }
                        }
                    });
                    this.size = new Designer.Size(0, 0);
                    this.size.height = ko.pureComputed({ read: function () { return _this.height(); }, write: function (newVal) { if (Designer.checkModelReady(_this.root)) {
                            _this.height(newVal);
                        } } });
                    this.size.width = ko.pureComputed({ read: function () { return _this.width(); }, write: function (newVal) { if (Designer.checkModelReady(_this.root)) {
                            _this.width(newVal);
                        } } });
                    var deserializedCells = DevExpress.JS.Utils.deserializeArray(control.Cells, function (item) { return _this.getControlFactory().createControl(item, _this, serializer); });
                    this.cells(deserializedCells());
                    var _top = ko.observable(null);
                    this.top = ko.pureComputed({
                        read: function () {
                            var index = parent.rows().indexOf(_this);
                            if (index > 0) {
                                var previousRow = parent.rows()[index - 1];
                                _top(previousRow.top() + previousRow.height());
                            }
                            else {
                                _top(0);
                            }
                            return _top();
                        },
                        write: function (val) {
                            parent.updateRowLocation(_this, _top() - val);
                            _top(val);
                        }
                    });
                }
                TableRowViewModel.prototype.updateCellLocation = function (cell, deltaWidth) {
                    var oldWidth = cell.width();
                    var cellIndex = this.cells().indexOf(cell);
                    if (cellIndex > 0) {
                        var leftCellWidth = this.cells()[cellIndex - 1].width;
                        var leftWidth = leftCellWidth() - deltaWidth;
                        leftCellWidth(leftWidth > 0 ? leftWidth : 0);
                    }
                    else {
                        var deltaWeight = (cell.weight() / oldWidth) * deltaWidth;
                        cell.weight(cell.weight() + deltaWeight);
                        var table = this.parentModel();
                        table.location.x(table.location.x() - deltaWidth);
                        table.size.width(table.size.width() + deltaWidth);
                    }
                };
                TableRowViewModel.prototype.addChild = function (control, position) {
                    if (control instanceof TableCellViewModel) {
                        if (this.cells().indexOf(control) === -1) {
                            control.parentModel(this);
                            if (position != null) {
                                this.cells.splice(position, 0, control);
                            }
                            else {
                                this.cells.push(control);
                            }
                        }
                    }
                    else {
                        throw new Error("Trying to add non a cell to the table row.");
                    }
                };
                TableRowViewModel.prototype.insertCellCopy = function (selectedCell, isRight) {
                    var newCellWeight = selectedCell.weight() / 2, newCell = new TableCellViewModel({ "@ControlType": "XRTableCell", "@Weight": newCellWeight }, this), indexSelectedCell = this.cells.indexOf(selectedCell);
                    this.addChild(newCell, indexSelectedCell + (isRight ? 1 : 0));
                    if (newCell["text"]) {
                        newCell["text"](newCell.name());
                    }
                    selectedCell.weight(newCellWeight);
                };
                TableRowViewModel.prototype.removeChild = function (selectedCell) {
                    if (this.cells().length > 0 && this.cells().indexOf(selectedCell) !== -1) {
                        var index = this.cells().indexOf(selectedCell), selectedCellWeight = selectedCell.weight();
                        this.cells.splice(index, 1);
                        if (this.cells()[index]) {
                            this.cells()[index].weight(this.cells()[index].weight() + selectedCellWeight);
                        }
                        else if (this.cells()[index - 1]) {
                            this.cells()[index - 1].weight(this.cells()[index - 1].weight() + selectedCellWeight);
                        }
                        if (this.cells().length === 0) {
                            this.parentModel().removeChild(this);
                        }
                    }
                };
                TableRowViewModel.unitProperties = [];
                return TableRowViewModel;
            })(Report.ControlViewModel);
            Report.TableRowViewModel = TableRowViewModel;
            var TableCellViewModel = (function (_super) {
                __extends(TableCellViewModel, _super);
                function TableCellViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.width = ko.pureComputed({
                        read: function () {
                            var result = parent.width() * _this.weight() / parent.cellsTotalWeight();
                            return Math.round(result * 100) / 100;
                        },
                        write: function (newWidth) {
                            var dWidth = newWidth - _this.width(), newWeight = parent.pixelWidthWeight() * newWidth, dWeight = newWeight - _this.weight(), thisCellIndex = parent.cells().indexOf(_this);
                            _this.weight(newWeight);
                            if (thisCellIndex < parent.cells().length - 1) {
                                parent.cells()[thisCellIndex + 1].weight(parent.cells()[thisCellIndex + 1].weight() - dWeight);
                            }
                            else {
                                parent.width(parent.width() + dWidth);
                            }
                        }
                    });
                    this.height = parent.height;
                    this.size = new Designer.Size(0, 0);
                    this.size.height = ko.pureComputed({ read: function () { return _this.height(); }, write: function (newVal) { if (Designer.checkModelReady(_this.root)) {
                            _this.height(newVal);
                        } } });
                    this.size.width = ko.pureComputed({ read: function () { return _this.width(); }, write: function (newVal) { if (Designer.checkModelReady(_this.root)) {
                            _this.width(newVal);
                        } } });
                    var _left = ko.observable(null);
                    this.left = ko.pureComputed({
                        read: function () {
                            var index = parent.cells().indexOf(_this);
                            if (index > 0) {
                                var previousCell = parent.cells()[index - 1];
                                _left(previousCell.left() + previousCell.width());
                            }
                            else {
                                _left(0);
                            }
                            return _left();
                        },
                        write: function (val) {
                            parent.updateCellLocation(_this, _left() - val);
                            _left(val);
                        }
                    });
                }
                TableCellViewModel.unitProperties = [];
                return TableCellViewModel;
            })(Report.ControlViewModel);
            Report.TableCellViewModel = TableCellViewModel;
            var TableSurface = (function (_super) {
                __extends(TableSurface, _super);
                function TableSurface(control, context) {
                    _super.call(this, control, context, TableSurface._unitProperties);
                    this._isUpdating = false;
                    this.template = "dxrd-table";
                    this.selectiontemplate = "dxrd-table-selection";
                    this.css = ko.pureComputed(function () {
                        return $.extend({});
                    });
                    this.contentCss = ko.pureComputed(function () {
                        return $.extend({});
                    });
                }
                TableSurface.prototype._getChildrenHolderName = function () { return "rows"; };
                TableSurface.prototype._isCellInColumn = function (cell, locationStart, locationEnd) {
                    return Math.abs(cell.rect().left - locationStart) < 0.01 && Math.abs(cell.rect().left + cell.rect().width - locationEnd) < 0.01;
                };
                TableSurface.prototype.selectColumn = function (selection, cellSurface) {
                    var _this = this;
                    selection.initialize(this);
                    var locationStart = cellSurface.rect().left, locationEnd = locationStart + cellSurface.rect().width;
                    selection.selecting({ control: cellSurface, cancel: false });
                    this.rows().forEach(function (rowSurface) {
                        rowSurface.cells().forEach(function (cellSurface) {
                            if (_this._isCellInColumn(cellSurface, locationStart, locationEnd)) {
                                selection.selecting({ control: cellSurface, cancel: false });
                                return true;
                            }
                        });
                    });
                };
                TableSurface._unitProperties = {
                    _x: function (o) {
                        return o.location.x;
                    },
                    _y: function (o) {
                        return o.location.y;
                    },
                    _width: function (o) {
                        return o.size.width;
                    },
                    _height: function (o) {
                        return o.size.height;
                    }
                };
                return TableSurface;
            })(Report.ControlSurfaceBase);
            Report.TableSurface = TableSurface;
            (function (TableActionDirection) {
                TableActionDirection[TableActionDirection["vertical"] = 0] = "vertical";
                TableActionDirection[TableActionDirection["horizontal"] = 1] = "horizontal";
            })(Report.TableActionDirection || (Report.TableActionDirection = {}));
            var TableActionDirection = Report.TableActionDirection;
            var TableComponentSurface = (function (_super) {
                __extends(TableComponentSurface, _super);
                function TableComponentSurface() {
                    _super.apply(this, arguments);
                }
                TableComponentSurface.prototype._getNeededProperties = function (rect) {
                    if (this.direction === TableActionDirection.vertical) {
                        return {
                            positionProperty: rect.top === undefined ? this.rect().top : rect.top,
                            secondaryPositionProperty: rect.bottom,
                            sizeProperty: rect.height
                        };
                    }
                    else {
                        return {
                            positionProperty: rect.left === undefined ? this.rect().left : rect.left,
                            secondaryPositionProperty: rect.right,
                            sizeProperty: rect.width
                        };
                    }
                };
                TableComponentSurface.prototype._generateRect = function (rect, result) {
                    if (this.direction === TableActionDirection.vertical) {
                        rect.top = result.positionProperty === undefined ? rect.top : result.positionProperty;
                        rect.bottom = result.secondaryPositionProperty === undefined ? rect.bottom : result.secondaryPositionProperty;
                        rect.height = result.sizeProperty === undefined ? rect.height : result.sizeProperty;
                    }
                    else {
                        rect.left = result.positionProperty === undefined ? rect.left : result.positionProperty;
                        rect.right = result.secondaryPositionProperty === undefined ? rect.right : result.secondaryPositionProperty;
                        rect.width = result.sizeProperty === undefined ? rect.width : result.sizeProperty;
                    }
                    return rect;
                };
                TableComponentSurface.prototype.beforeRectUpdated = function (rect) {
                    var incomingRect = this._getNeededProperties(rect);
                    var currentRect = this._getNeededProperties(this.rect());
                    var model = this.getControlModel();
                    var parentModel = this.parent.getControlModel();
                    if (incomingRect.secondaryPositionProperty !== undefined) {
                        incomingRect.positionProperty = currentRect.positionProperty;
                        incomingRect.sizeProperty = incomingRect.secondaryPositionProperty < incomingRect.positionProperty ? 0
                            : incomingRect.secondaryPositionProperty - incomingRect.positionProperty;
                    }
                    if (incomingRect.positionProperty > currentRect.secondaryPositionProperty) {
                        incomingRect.positionProperty = currentRect.secondaryPositionProperty;
                        return this._generateRect(rect, incomingRect);
                    }
                    if (incomingRect.sizeProperty === undefined) {
                        incomingRect.sizeProperty = currentRect.sizeProperty + currentRect.positionProperty - incomingRect.positionProperty;
                    }
                    var childCollectionName = this.parent._getChildrenHolderName();
                    var positionRedused = parseInt(currentRect.positionProperty) > incomingRect.positionProperty;
                    var sizeIncreased = parseInt(currentRect.sizeProperty) < incomingRect.sizeProperty && !positionRedused;
                    var position = parentModel[childCollectionName]().indexOf(model);
                    if (position !== 0 && positionRedused) {
                        var prevElementRect = this._getNeededProperties(parentModel[childCollectionName]()[position - 1].surface.rect());
                        if (prevElementRect.positionProperty > incomingRect.positionProperty) {
                            incomingRect.sizeProperty -= (prevElementRect.positionProperty - incomingRect.positionProperty);
                            incomingRect.positionProperty = prevElementRect.positionProperty;
                        }
                    }
                    if (sizeIncreased && position !== parentModel[childCollectionName]().length - 1) {
                        var nextElementRect = this._getNeededProperties(parentModel[childCollectionName]()[position + 1].surface.rect());
                        if (nextElementRect.secondaryPositionProperty < incomingRect.positionProperty + incomingRect.sizeProperty) {
                            incomingRect.sizeProperty = nextElementRect.secondaryPositionProperty - incomingRect.positionProperty;
                        }
                    }
                    return this._generateRect(rect, incomingRect);
                };
                return TableComponentSurface;
            })(Report.ControlSurfaceBase);
            Report.TableComponentSurface = TableComponentSurface;
            var TableRowSurface = (function (_super) {
                __extends(TableRowSurface, _super);
                function TableRowSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, TableRowSurface._unitProperties);
                    this.direction = TableActionDirection.vertical;
                    this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.backGroundCss());
                    });
                    this.contentCss = ko.pureComputed(function () {
                        return $.extend({});
                    });
                }
                TableRowSurface.prototype._getChildrenHolderName = function () { return "cells"; };
                TableRowSurface._unitProperties = {
                    _height: function (o) {
                        return o.height;
                    },
                    _width: function (o) {
                        return o.width;
                    },
                    _y: function (o) {
                        return o.top;
                    }
                };
                return TableRowSurface;
            })(TableComponentSurface);
            Report.TableRowSurface = TableRowSurface;
            var TableCellSurface = (function (_super) {
                __extends(TableCellSurface, _super);
                function TableCellSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, TableCellSurface._unitProperties);
                    this.direction = TableActionDirection.horizontal;
                    this["multiline"] = control["multiline"];
                    this.contentSizes = ko.pureComputed(function () {
                        if (_this._isShowBorder("Left")) {
                            return _this.cssCalculator.contentSizeCss(_this.rect().width, _this.rect().height, _this._context.zoom());
                        }
                        var bordersArray = control.borders().indexOf("All") === -1 ? control.borders().split(/\s*,\s*/g) : ["Left", "Top", "Right", "Bottom"];
                        var index = bordersArray.indexOf("Left");
                        var width = _this.rect().width;
                        if (index !== -1) {
                            bordersArray.splice(index, 1);
                            width += 1;
                        }
                        return _this.cssCalculator.contentSizeCss(width, _this.rect().height, _this._context.zoom(), bordersArray.join(","));
                    });
                    this.css = ko.pureComputed(function () {
                        var bottom = _this.cssCalculator.cellBorder("Bottom", _this._context.zoom());
                        var right = _this.cssCalculator.cellBorder("Right", _this._context.zoom());
                        var left = _this._isShowBorder("Left") ? _this.cssCalculator.cellBorder("Left", _this._context.zoom()) : _this.cssCalculator.createControlBorder("", 0, "transparent", ["Left"], "Left");
                        var top = _this._isShowBorder("Top") ? _this.cssCalculator.cellBorder("Top", _this._context.zoom()) : { borderTop: "" };
                        return $.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.backGroundCss(), right, bottom, top, left, _this.cssCalculator.foreColorCss(), _this.cssCalculator.textAlignmentCss());
                    });
                }
                TableCellSurface.prototype._isShowBorder = function (side) {
                    var row = this.parent.getControlModel(), table = row.parentModel(), rowIndex = table.rows().indexOf(row), cellIndex = row.cells().indexOf(this.getControlModel());
                    if (side === "Top") {
                        var prevRow = table.rows()[rowIndex - 1], cell = prevRow && prevRow.cells && prevRow.cells()[cellIndex], borders = cell && cell["borders"] && cell["borders"]();
                        return (rowIndex === 0) || (borders && borders !== "All" && borders.indexOf("Bottom") === -1);
                    }
                    if (side === "Left") {
                        var prevCell = row.cells()[cellIndex - 1], borders = prevCell && prevCell["borders"] && prevCell["borders"]();
                        return (cellIndex === 0) || (borders && borders !== "All" && borders.indexOf("Right") === -1);
                    }
                };
                TableCellSurface.prototype.selectColumn = function (selection) {
                    (this.parent.parent).selectColumn(selection, this);
                };
                TableCellSurface.prototype.checkParent = function (surfaceParent) {
                    return this.parent.parent === surfaceParent;
                };
                TableCellSurface._unitProperties = {
                    _height: function (o) {
                        return o.height;
                    },
                    _width: function (o) {
                        return o.width;
                    },
                    _x: function (o) {
                        return o.left;
                    }
                };
                return TableCellSurface;
            })(TableComponentSurface);
            Report.TableCellSurface = TableCellSurface;
            var TableRowActions = (function (_super) {
                __extends(TableRowActions, _super);
                function TableRowActions(selection) {
                    var _this = this;
                    _super.call(this);
                    this.selection = selection;
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Insert Row Above",
                            imageClassName: "dxrd-image-actions-insert_row_above",
                            clickAction: function () { _this.insertRowAbove(); },
                        }, {
                            text: "Insert Row Below",
                            imageClassName: "dxrd-image-actions-insert_row_below",
                            clickAction: function () { _this.insertRowBelow(); },
                        }, {
                            text: "Delete Row",
                            imageClassName: "dxrd-image-actions-delete_row",
                            clickAction: function () { _this.deleteRow(); },
                        }
                    ]);
                }
                Object.defineProperty(TableRowActions.prototype, "_row", {
                    get: function () {
                        return this.selection.focused().getControlModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TableRowActions.prototype, "_table", {
                    get: function () {
                        return this._row.parentModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                TableRowActions.prototype.insertRowAbove = function () {
                    this._table.insertRow(this._row, true);
                };
                TableRowActions.prototype.insertRowBelow = function () {
                    this._table.insertRow(this._row, false);
                };
                TableRowActions.prototype.deleteRow = function () {
                    Designer.deleteSelection(this.selection);
                };
                TableRowActions.prototype.condition = function (context) {
                    return context instanceof TableRowViewModel;
                };
                return TableRowActions;
            })(Designer.BaseActionsProvider);
            Report.TableRowActions = TableRowActions;
            var TableCellActions = (function (_super) {
                __extends(TableCellActions, _super);
                function TableCellActions(selection) {
                    var _this = this;
                    _super.call(this, selection);
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Insert Row Above",
                            imageClassName: "dxrd-image-actions-insert_row_above",
                            clickAction: function () { _this.insertRowAbove(); },
                        }, {
                            text: "Insert Row Below",
                            imageClassName: "dxrd-image-actions-insert_row_below",
                            clickAction: function () { _this.insertRowBelow(); },
                        }, {
                            text: "Delete Row",
                            imageClassName: "dxrd-image-actions-delete_row",
                            clickAction: function () { _this.deleteRow(); },
                        }, {
                            text: "Insert Cell",
                            imageClassName: "dxrd-image-actions-insert_cell",
                            clickAction: function () { _this.insertCell(); },
                        }, {
                            text: "Delete Cell",
                            imageClassName: "dxrd-image-actions-delete_cell",
                            clickAction: function () { _this.deleteCell(); },
                        }, {
                            text: "Insert Column To Left",
                            imageClassName: "dxrd-image-actions-insert_column_to_left",
                            clickAction: function () { _this.insertColumn(false); },
                        }, {
                            text: "Insert Column To Right",
                            imageClassName: "dxrd-image-actions-insert_column_to_right",
                            clickAction: function () { _this.insertColumn(true); },
                        }, {
                            text: "Delete Column",
                            imageClassName: "dxrd-image-actions-delete_column",
                            clickAction: function () { _this.deleteColumn(); },
                        }
                    ]);
                }
                Object.defineProperty(TableCellActions.prototype, "_cell", {
                    get: function () {
                        return this.selection.focused().getControlModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TableCellActions.prototype, "_row", {
                    get: function () {
                        return this._cell.parentModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TableCellActions.prototype, "_table", {
                    get: function () {
                        return this._row.parentModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                TableCellActions.prototype.insertCell = function () {
                    this._row.insertCellCopy(this._cell, false);
                };
                TableCellActions.prototype.deleteCell = function () {
                    Designer.deleteSelection(this.selection);
                };
                TableCellActions.prototype.deleteRow = function () {
                    this.selection.initialize(this.selection.focused().parent);
                    Designer.deleteSelection(this.selection);
                };
                TableCellActions.prototype.insertColumn = function (isRight) {
                    this._table.insertColumn(this._cell, isRight);
                };
                TableCellActions.prototype.deleteColumn = function () {
                    this.selection.focused().selectColumn(this.selection);
                    Designer.deleteSelection(this.selection);
                };
                TableCellActions.prototype.condition = function (context) {
                    return context instanceof TableCellViewModel;
                };
                return TableCellActions;
            })(TableRowActions);
            Report.TableCellActions = TableCellActions;
            Report.weight = { propertyName: "weight", modelName: "@Weight", defaultVal: 0, from: Designer.floatFromModel };
            Report.rowSpan = { propertyName: "rowSpan", modelName: "@RowSpan", displayName: "Row Span", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.tableSerializationsInfo = [
                Report.font, Report.foreColor, Report.keepTogetherDefaultValueFalse, Report.anchorVertical, Report.anchorHorizontal, Report.commonScripts,
                { propertyName: "rows", modelName: "Rows", array: true },
                Report.dataBindings(["Bookmark", "Tag"]),
                Report.rtl,
                Report.textAlignment
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.bookmarkGroup);
            Report.tableCellSerializationsInfo = [
                Report.weight, Report.labelScripts, Report.rowSpan, Report.textTrimming,
                { propertyName: "width", displayName: "Width" },
                { propertyName: "controls", modelName: "Controls", array: true },
                Report.dataBindings(["Text", "NavigateUrl", "Tag", "Bookmark"]),
                Report.defaultDataBinding("Text"),
                Report.textEditOptions
            ].concat(Report.labelGroup);
            Report.tableRowSerializationsInfo = [
                Report.weight, Report.textAlignment, Report.keepTogether, Report.controlScripts,
                { propertyName: "height", displayName: "Height" },
                { propertyName: "cells", modelName: "Cells", array: true },
            ].concat(Report.commonControlProperties, Report.fontGroup);
            Report.popularPropertiesTable = ["bookmark", "bookmarkParent"];
            Report.popularPropertiesTableCell = ["text", "textArea", "defaultDataBinding", "Summary", "canGrow", "canShrink", "multiline", "wordWrap"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRLineSurface = (function (_super) {
                __extends(XRLineSurface, _super);
                function XRLineSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this["lineWidth"] = control["lineWidth"];
                    this["lineStyle"] = control["lineStyle"];
                    this["lineDirection"] = control["lineDirection"];
                    this.selectiontemplate = "dxrd-control-selection";
                    this.contenttemplate = "dxrd-line-content";
                    this.linePosition = ko.pureComputed(function () {
                        var result = {}, rect = _this.rect();
                        if (_this["lineDirection"]() === "Horizontal") {
                            result["x1"] = 0;
                            result["x2"] = rect.width;
                            result["y1"] = rect.height / 2;
                            result["y2"] = rect.height / 2;
                        }
                        if (_this["lineDirection"]() === "Vertical") {
                            result["x1"] = rect.width / 2;
                            result["x2"] = rect.width / 2;
                            result["y1"] = 0;
                            result["y2"] = rect.height;
                        }
                        if (_this["lineDirection"]() === "BackSlant") {
                            result["x1"] = 0;
                            result["x2"] = rect.width;
                            result["y1"] = 0;
                            result["y2"] = rect.height;
                        }
                        if (_this["lineDirection"]() === "Slant") {
                            result["x1"] = 0;
                            result["x2"] = rect.width;
                            result["y1"] = rect.height;
                            result["y2"] = 0;
                        }
                        return result;
                    });
                    this.contentCss = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.stroke(), _this.cssCalculator.strokeDashArray(), _this.cssCalculator.strokeWidth());
                    });
                }
                return XRLineSurface;
            })(Report.ControlSurface);
            Report.XRLineSurface = XRLineSurface;
            Report.lineDirection = {
                propertyName: "lineDirection",
                modelName: "@LineDirection",
                defaultVal: "Horizontal",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                displayName: "Line Direction",
                values: {
                    "Horizontal": "Horizontal",
                    "Vertical": "Vertical",
                    "Slant": "Slant",
                    "BackSlant": "BackSlant"
                }
            };
            Report.lineSerializationsInfo = [
                Report.foreColor, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal,
                Report.lineWidth, Report.lineDirection, Report.lineStyle, Report.controlScripts,
                Report.dataBindings(["Tag"])
            ].concat(Report.sizeLocation, Report.commonControlProperties);
            Report.popularPropertiesLine = ["lineDirection", "lineStyle", "lineWidth", "anchorVertical", "anchorHorizontal"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.shapes = ["Rectangle", "Ellipse", "Top Arrow", "Right Arrow", "Bottom Arrow", "Left Arrow",
                "Triangle", "Square", "Pentagon", "Hexagon", "Octagon", "3-Point Star", "4-Point Star", "5-Point Star",
                "6-Point Star", "8-Point Star", "Vertical Line", "Horizontal Line", "Slant Line", "Backslant Line",
                "Cross", "Bracket", "Brace"];
            var ShapeViewModel = (function (_super) {
                __extends(ShapeViewModel, _super);
                function ShapeViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.Shape(ShapeViewModel.createShape(this.Shape() || {}, serializer));
                    this.shapeFake = {
                        shapeName: ko.pureComputed({
                            read: function () {
                                return _this.Shape()["shapeType"]();
                            },
                            write: function (val) {
                                var selectedShape = ShapeViewModel.shapes.filter(function (shape) { return shape["displayName"] === val; })[0];
                                var shape = ShapeViewModel.createShape($.extend({ "@ShapeName": selectedShape["type"] }, selectedShape["val"]), serializer);
                                if (selectedShape["angle"] !== void 0) {
                                    _this["angle"](selectedShape["angle"]);
                                }
                                if (ShapeViewModel.timeout === 0) {
                                    _this.Shape(shape);
                                }
                                else {
                                    setTimeout(function () {
                                        _this.Shape(shape);
                                    }, ShapeViewModel.timeout);
                                }
                            }
                        }),
                        shapeValue: this.Shape
                    };
                }
                ShapeViewModel.createShape = function (model, serializer) {
                    if (serializer === void 0) { serializer = null; }
                    var type = model && model["@ShapeName"] || "Ellipse";
                    var shapeInfo = shapesMap[type];
                    var newShape = { "shapeType": ko.observable(type), "getInfo": function () { return shapeInfo; } };
                    (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(newShape, model);
                    return newShape;
                };
                ShapeViewModel.timeout = 1;
                ShapeViewModel.shapes = [
                    {
                        displayName: "Rectangle",
                        type: "Rectangle"
                    },
                    {
                        displayName: "Ellipse",
                    },
                    {
                        displayName: "Top Arrow",
                        angle: 0,
                        type: "Arrow"
                    },
                    {
                        displayName: "Right Arrow",
                        angle: 270,
                        type: "Arrow"
                    },
                    {
                        displayName: "Bottom Arrow",
                        angle: 180,
                        type: "Arrow"
                    },
                    {
                        displayName: "Left Arrow",
                        angle: 90,
                        type: "Arrow"
                    },
                    {
                        displayName: "Triangle",
                        type: "Polygon"
                    },
                    {
                        displayName: "Square",
                        val: {
                            "@NumberOfSides": 4
                        },
                        type: "Polygon"
                    },
                    {
                        displayName: "Pentagon",
                        val: {
                            "@NumberOfSides": 5
                        },
                        type: "Polygon"
                    },
                    {
                        displayName: "Hexagon",
                        val: {
                            "@NumberOfSides": 6
                        },
                        type: "Polygon"
                    },
                    {
                        displayName: "Octagon",
                        val: {
                            "@NumberOfSides": 8
                        },
                        type: "Polygon"
                    },
                    {
                        displayName: "3-Point Star",
                        type: "Star"
                    },
                    {
                        displayName: "4-Point Star",
                        val: {
                            "@StarPointCount": 4
                        },
                        type: "Star"
                    },
                    {
                        displayName: "5-Point Star",
                        val: {
                            "@StarPointCount": 5
                        },
                        type: "Star"
                    },
                    {
                        displayName: "6-Point Star",
                        val: {
                            "@StarPointCount": 6
                        },
                        type: "Star"
                    },
                    {
                        displayName: "8-Point Star",
                        val: {
                            "@StarPointCount": 8
                        },
                        type: "Star"
                    },
                    {
                        displayName: "Vertical Line",
                        type: "Line"
                    },
                    {
                        displayName: "Horizontal Line",
                        angle: 90,
                        type: "Line"
                    },
                    {
                        displayName: "Slant Line",
                        angle: 45,
                        type: "Line"
                    },
                    {
                        displayName: "Backslant Line",
                        angle: 315,
                        type: "Line"
                    },
                    {
                        displayName: "Cross",
                        type: "Cross"
                    },
                    {
                        displayName: "Bracket",
                        type: "Bracket"
                    },
                    {
                        displayName: "Brace",
                        type: "Brace"
                    }
                ];
                return ShapeViewModel;
            })(Report.ControlViewModel);
            Report.ShapeViewModel = ShapeViewModel;
            var ShapeControlSurface = (function (_super) {
                __extends(ShapeControlSurface, _super);
                function ShapeControlSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    var func = null;
                    this.imageSrc = ko.pureComputed(function () {
                        return Report.ReportRenderingService.getShapeImage(_this);
                    });
                    this.template = "dxrd-shape";
                    this.contenttemplate = "dxrd-shape-content";
                }
                return ShapeControlSurface;
            })(Report.ControlSurface);
            Report.ShapeControlSurface = ShapeControlSurface;
            Report.shapeType = { propertyName: "shapeType", modelName: "@ShapeName", defaultVal: "Ellipse" };
            Report.stretch = { propertyName: "stretch", modelName: "@Stretch", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Stretch" };
            Report.fillColor = { propertyName: "fillColor", modelName: "@FillColor", defaultVal: "transparent", editor: Designer.Widgets.editorTemplates.customColorEditor, from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Fill Color" };
            Report.Shape = { propertyName: "Shape", modelName: "Shape" };
            Report.shapeFake = { propertyName: "shapeFake", editor: Report.editorTemplates.shape, displayName: "Shape" };
            Report.shapeElementSerializationsInfo = [Report.shapeType];
            var fillet = { propertyName: "fillet", modelName: "@Fillet", defaultVal: 0, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Fillet" };
            var shapeRectangleSerializationsInfo = [Report.shapeType, fillet];
            var shapeStarSerializationsInfo = [
                Report.shapeType,
                { propertyName: "concavity", modelName: "@Concavity", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Concavity" },
                { propertyName: "starPointCount", modelName: "@StarPointCount", defaultVal: 3, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Count of Star Points" },
                fillet
            ];
            var shapeBraceSerializationsInfo = [
                Report.shapeType,
                { propertyName: "fillet", modelName: "@Fillet", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Fillet" },
                { propertyName: "tailLength", modelName: "@TailLength", defaultVal: 20, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Tail\'s Length" },
                { propertyName: "tipLength", modelName: "@TipLength", defaultVal: 20, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Tip\'s Length" }
            ];
            var shapeBracketSerializationsInfo = [
                Report.shapeType,
                { propertyName: "tipLength", modelName: "@TipLength", defaultVal: 20, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Tip\'s Length" }
            ];
            var shapePolygonSerializationsInfo = [
                Report.shapeType, fillet,
                { propertyName: "numberOfSides", modelName: "@NumberOfSides", defaultVal: 3, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Number of Sides" },
            ];
            var shapeArrowSerializationsInfo = [
                Report.shapeType,
                { propertyName: "arrowHeight", modelName: "@ArrowHeight", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Arrow Height" },
                { propertyName: "arrowWidth", modelName: "@ArrowWidth", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Arrow Width" },
                fillet
            ];
            var shapeCrossSerializationsInfo = [
                Report.shapeType, fillet,
                { propertyName: "horizontalLineWidth", modelName: "@HorizontalLineWidth", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Horizontal Line Width" },
                { propertyName: "verticalLineWidth", modelName: "@VerticalLineWidth", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Vertical Line Width" }
            ];
            var shapesMap = {
                "Rectangle": shapeRectangleSerializationsInfo,
                "Arrow": shapeArrowSerializationsInfo,
                "Ellipse": Report.shapeElementSerializationsInfo,
                "Polygon": shapePolygonSerializationsInfo,
                "Star": shapeStarSerializationsInfo,
                "Line": Report.shapeElementSerializationsInfo,
                "Bracket": shapeBracketSerializationsInfo,
                "Cross": shapeCrossSerializationsInfo,
                "Brace": shapeBraceSerializationsInfo
            };
            Report.shapeSerializationsInfo = [
                Report.lineWidth, Report.lineStyle, Report.foreColor, Report.Shape, Report.fillColor, Report.stretch, Report.angle, Report.anchorVertical, Report.anchorHorizontal, Report.controlScripts, Report.shapeFake,
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup);
            Report.popularPropertiesShape = ["stretch", "fillColor", "lineWidth", "angle", "bookmark", "bookmarkParent", "shapeFake"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRBarCodeViewModel = (function (_super) {
                __extends(XRBarCodeViewModel, _super);
                function XRBarCodeViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.symbology(this.createBarcode(this.symbology() || {}, serializer));
                    this.barcodeFake = {
                        barcodeName: ko.pureComputed({
                            read: function () {
                                return _this.symbology()["name"]();
                            },
                            write: function (val) {
                                _this.symbology(_this.createBarcode({ "@Name": val }, serializer));
                            }
                        }),
                        barcodeValue: this.symbology
                    };
                }
                XRBarCodeViewModel.prototype.createBarcode = function (model, serializer) {
                    if (serializer === void 0) { serializer = null; }
                    var name = model && model["@Name"] || "Code1";
                    var barcodeInfo = barCodesMap[name];
                    var newBarcode = { "name": ko.observable(name), "getInfo": function () { return barcodeInfo; } };
                    (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(newBarcode, model);
                    return newBarcode;
                };
                XRBarCodeViewModel.unitProperties = ["module"];
                XRBarCodeViewModel.barCodesTypes = [
                    "Codabar",
                    "Code11",
                    "Code128",
                    "Code39",
                    "Code39Extended",
                    "Code93",
                    "Code93Extended",
                    "CodeMSI",
                    "DataBar",
                    "DataMatrix",
                    "DataMatrixGS1",
                    "EAN128",
                    "EAN13",
                    "EAN8",
                    "Industrial2of5",
                    "IntelligentMail",
                    "IntelligentMailPackage",
                    "Interleaved2of5",
                    "ITF14",
                    "Matrix2of5",
                    "PDF417",
                    "PostNet",
                    "QRCode",
                    "UPCA",
                    "UPCE0",
                    "UPCE1",
                    "UPCSupplemental2",
                    "UPCSupplemental5",
                ];
                return XRBarCodeViewModel;
            })(Report.ControlViewModel);
            Report.XRBarCodeViewModel = XRBarCodeViewModel;
            var XRBarcodeSurface = (function (_super) {
                __extends(XRBarcodeSurface, _super);
                function XRBarcodeSurface(control, context) {
                    _super.call(this, control, context);
                    this.contenttemplate = "dxrd-barcode-content";
                }
                return XRBarcodeSurface;
            })(Report.ControlSurface);
            Report.XRBarcodeSurface = XRBarcodeSurface;
            var defaultCodeSerializationInfo = { propertyName: "name", modelName: "@Name" };
            var calcCheckSum = { propertyName: "calcCheckSum", modelName: "@CalcCheckSum", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Calculate a Checksum" };
            var code93SerializationInfo = [defaultCodeSerializationInfo, calcCheckSum];
            var wideNarrowRation = { propertyName: "wideNarrowRation", modelName: "@WideNarrowRatio", defaultVal: 2.5, from: Designer.floatFromModel, displayName: "Wide Narrow Ratio", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            var codabarSerializationInfo = [
                defaultCodeSerializationInfo,
                wideNarrowRation,
                {
                    propertyName: "startStopPait",
                    modelName: "@StartStopPair", defaultVal: "AT", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Start and Stop Symbols",
                    values: {
                        "None": "None",
                        "AT": "AT",
                        "BN": "BN",
                        "CStar": "CStar",
                        "DE": "DE"
                    }
                },
            ];
            var charset = {
                propertyName: "characterSet",
                modelName: "@CharacterSet", defaultVal: "CharsetA", displayName: "Character Set", editor: DevExpress.JS.Widgets.editorTemplates.combobox, values: {
                    "CharsetAuto": "CharsetAuto",
                    "CharsetA": "CharsetA",
                    "CharsetB": "CharsetB",
                    "CharsetC": "CharsetC"
                }
            };
            var addLeadingZero = { propertyName: "addLeadingZero", displayName: "Add Leading Zero", modelName: "@AddLeadingZero", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            var code128SerializationInfo = [defaultCodeSerializationInfo, addLeadingZero, charset];
            var code39SerializationInfo = [wideNarrowRation].concat(code93SerializationInfo);
            var codeMSISerializationInfo = [
                defaultCodeSerializationInfo,
                {
                    propertyName: "msiCheckSum",
                    modelName: "@MSICheckSum", defaultVal: "Modulo10", displayName: "MSI Checksum", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    values: {
                        "None": "None",
                        "Modulo10": "Modulo10",
                        "DoubleModulo10": "DoubleModulo10"
                    }
                }];
            var fnc1Substitute = { propertyName: "fNC1Substitute", modelName: "@FNC1Substitute", defaultVal: "#", editor: DevExpress.JS.Widgets.editorTemplates.text, displayName: "FNC1 Functional Character" };
            var dataBarSerializationInfo = [
                defaultCodeSerializationInfo,
                fnc1Substitute,
                { propertyName: "segmentsInRow", modelName: "@SegmentsInRow", defaultVal: 20, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Segments In Row" },
                {
                    propertyName: "type",
                    modelName: "@Type", defaultVal: "Omnidirectional", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    displayName: "Type", values: {
                        "Omnidirectional": "Omnidirectional",
                        "Truncated": "Truncated",
                        "Stacked": "Stacked",
                        "StackedOmnidirectional": "StackedOmnidirectional",
                        "Limited": "Limited",
                        "Expanded": "Expanded",
                        "ExpandedStacked": "ExpandedStacked"
                    }
                }];
            var matrixSize = {
                propertyName: "matrixSize",
                modelName: "@MatrixSize", defaultVal: "MatrixAuto", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                displayName: "Matrix Size", values: {
                    "MatrixAuto": "MatrixAuto",
                    "Matrix10x10": "Matrix10x10",
                    "Matrix12x12": "Matrix12x12",
                    "Matrix14x14": "Matrix14x14",
                    "Matrix16x16": "Matrix16x16",
                    "Matrix18x18": "Matrix18x18",
                    "Matrix20x20": "Matrix20x20",
                    "Matrix22x22": "Matrix22x22",
                    "Matrix24x24": "Matrix24x24",
                    "Matrix26x26": "Matrix26x26",
                    "Matrix32x32": "Matrix32x32",
                    "Matrix36x36": "Matrix36x36",
                    "Matrix40x40": "Matrix40x40",
                    "Matrix44x44": "Matrix44x44",
                    "Matrix48x48": "Matrix48x48",
                    "Matrix52x52": "Matrix52x52",
                    "Matrix64x64": "Matrix64x64",
                    "Matrix72x72": "Matrix72x72",
                    "Matrix80x80": "Matrix80x80",
                    "Matrix88x88": "Matrix88x88",
                    "Matrix96x96": "Matrix96x96",
                    "Matrix104x104": "Matrix104x104",
                    "Matrix120x120": "Matrix120x120",
                    "Matrix132x132": "Matrix132x132",
                    "Matrix144x144": "Matrix144x144",
                    "Matrix8x18": "Matrix8x18",
                    "Matrix8x32": "Matrix8x32",
                    "Matrix12x26": "Matrix12x26",
                    "Matrix12x36": "Matrix12x36",
                    "Matrix16x36": "Matrix16x36",
                    "Matrix16x48": "Matrix16x48"
                }
            };
            var dataMatrixSerializationInfo = [
                defaultCodeSerializationInfo,
                matrixSize,
                {
                    propertyName: "compactionMode",
                    modelName: "@CompactionMode", defaultVal: "ASCII", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    displayName: "Compaction Mode", values: {
                        "ASCII": "ASCII",
                        "C40": "C40",
                        "Text": "Text",
                        "X12": "X12",
                        "Edifact": "Edifact",
                        "Binary": "Binary"
                    }
                }];
            var humanReadableText = { propertyName: "humanReadableText", modelName: "@HumanReadableText", defaultVal: true, from: Designer.parseBool, displayName: "Human-Readable Text", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            var dataMatrixGS1SerializationInfo = [
                defaultCodeSerializationInfo,
                matrixSize,
                fnc1Substitute,
                humanReadableText
            ];
            var EAN128SerializationInfo = [
                defaultCodeSerializationInfo, addLeadingZero,
                charset,
                fnc1Substitute,
                humanReadableText
            ];
            var Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo = [defaultCodeSerializationInfo, calcCheckSum, wideNarrowRation];
            var PDF417SerializationInfo = [
                defaultCodeSerializationInfo,
                { propertyName: "columns", modelName: "@Columns", defaultVal: 1, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Columns" },
                {
                    propertyName: "compactionMode1",
                    modelName: "@CompactionMode", defaultVal: "Text", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Compaction Mode",
                    values: {
                        "Binary": "Binary",
                        "Text": "Text"
                    }
                },
                {
                    propertyName: "errorCorrectionLevel",
                    modelName: "@ErrorCorrectionLevel", defaultVal: "Level2", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Error Correction Level",
                    values: {
                        "Level0": "Level0",
                        "Level1": "Level1",
                        "Level2": "Level2",
                        "Level3": "Level3",
                        "Level4": "Level4",
                        "Level5": "Level5",
                        "Level6": "Level6",
                        "Level7": "Level7",
                        "Level8": "Level8"
                    }
                },
                { propertyName: "rows", modelName: "@Rows", defaultVal: 0, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Rows" },
                { propertyName: "yToXRatio", modelName: "@YToXRatio", defaultVal: 3, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Y to X Ratio" },
                { propertyName: "truncateSymbol", modelName: "@TruncateSymbol", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Truncate Symbol" }
            ];
            var QRCodeSerializationInfo = [
                defaultCodeSerializationInfo,
                {
                    propertyName: "compactionMode2",
                    modelName: "@CompactionMode", defaultVal: "AlphaNumeric", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Compaction Mode",
                    values: {
                        "Numeric": "Numeric",
                        "AlphaNumeric": "AlphaNumeric",
                        "Byte": "Byte"
                    }
                },
                {
                    propertyName: "errorCorrectionLevel1",
                    modelName: "@ErrorCorrectionLevel", defaultVal: "L", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Error Correction Level",
                    values: {
                        "M": "M",
                        "L": "L",
                        "H": "H",
                        "Q": "Q"
                    }
                },
                {
                    propertyName: "version",
                    modelName: "@Version", defaultVal: "Version1", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Version",
                    values: {
                        "AutoVersion": "AutoVersion",
                        "Version1": "Version1",
                        "Version2": "Version2",
                        "Version3": "Version3",
                        "Version4": "Version4",
                        "Version5": "Version5",
                        "Version6": "Version6",
                        "Version7": "Version7",
                        "Version8": "Version8",
                        "Version9": "Version9",
                        "Version10": "Version10",
                        "Version11": "Version11",
                        "Version12": "Version12",
                        "Version13": "Version13",
                        "Version14": "Version14",
                        "Version15": "Version15",
                        "Version16": "Version16",
                        "Version17": "Version17",
                        "Version18": "Version18",
                        "Version19": "Version19",
                        "Version20": "Version20",
                        "Version21": "Version21",
                        "Version22": "Version22",
                        "Version23": "Version23",
                        "Version24": "Version24",
                        "Version25": "Version25",
                        "Version26": "Version26",
                        "Version27": "Version27",
                        "Version28": "Version28",
                        "Version29": "Version29",
                        "Version30": "Version30",
                        "Version31": "Version31",
                        "Version32": "Version32",
                        "Version33": "Version33",
                        "Version34": "Version34",
                        "Version35": "Version35",
                        "Version36": "Version36",
                        "Version37": "Version37",
                        "Version38": "Version38",
                        "Version39": "Version39",
                        "Version40": "Version40",
                    }
                }
            ];
            Report.autoModule = { propertyName: "autoModule", modelName: "@AutoModule", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Auto-Module" };
            Report.barCodeOrientation = {
                propertyName: "barCodeOrientation",
                modelName: "@BarCodeOrientation", defaultVal: "Normal",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                displayName: "Orientation", values: {
                    "Normal": "Normal",
                    "UpsideDown": "UpsideDown",
                    "RotateLeft": "RotateLeft",
                    "RotateRight": "RotateRight"
                }
            };
            Report.moduleInfo = { propertyName: "module", modelName: "@Module", defaultVal: 2, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Module" };
            Report.showText = { propertyName: "showText", modelName: "@ShowText", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Show Text" };
            Report.symbology = { propertyName: "symbology", modelName: "Symbology" };
            Report.barcodeFake = { propertyName: "barcodeFake", editor: Report.editorTemplates.symbology, displayName: "Symbology" };
            Report.alignment = {
                propertyName: "alignment",
                modelName: "@Alignment", displayName: "Alignment", defaultVal: "TopLeft",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: Report.textAlignmentValues
            };
            var barCodesMap = {
                "Codabar": codabarSerializationInfo,
                "Code11": [defaultCodeSerializationInfo],
                "Code128": code128SerializationInfo,
                "Code39": code39SerializationInfo,
                "Code39Extended": code39SerializationInfo,
                "Code93": code93SerializationInfo,
                "Code93Extended": code93SerializationInfo,
                "CodeMSI": codeMSISerializationInfo,
                "DataBar": dataBarSerializationInfo,
                "DataMatrix": dataMatrixSerializationInfo,
                "DataMatrixGS1": dataMatrixGS1SerializationInfo,
                "EAN128": EAN128SerializationInfo,
                "EAN13": [defaultCodeSerializationInfo],
                "EAN8": [defaultCodeSerializationInfo],
                "Industrial2of5": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                "IntelligentMail": [defaultCodeSerializationInfo],
                "IntelligentMailPackage": [defaultCodeSerializationInfo, fnc1Substitute],
                "Interleaved2of5": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                "ITF14": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                "Matrix2of5": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                "PDF417": PDF417SerializationInfo,
                "PostNet": [defaultCodeSerializationInfo],
                "QRCode": QRCodeSerializationInfo,
                "UPCA": [defaultCodeSerializationInfo],
                "UPCE0": [defaultCodeSerializationInfo],
                "UPCE1": [defaultCodeSerializationInfo],
                "UPCSupplemental2": [defaultCodeSerializationInfo],
                "UPCSupplemental5": [defaultCodeSerializationInfo]
            };
            Report.barcodeSerializationsInfo = [
                Report.alignment, Report.autoModule, Report.barCodeOrientation, Report.moduleInfo, Report.showText, Report.symbology, Report.text, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal,
                $.extend({}, Report.textAlignment, { defaultVal: "BottomLeft" }),
                Report.textControlScripts, Report.barcodeFake,
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag", "Text"]),
                Report.defaultDataBinding("Text"),
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.fontGroup, Report.navigationGroup, Report.processGroup);
            Report.popularPropertiesBarCode = ["barcodeFake", "module", "autoModule", "barCodeOrientation", "text", "defaultDataBinding", "bookmark", "bookmarkParent", "showText"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ZipCodeSurface = (function (_super) {
                __extends(ZipCodeSurface, _super);
                function ZipCodeSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.displayText = function () {
                        var text = control.text();
                        text = text && text.replace(/[^\d]/g, "_") || "0".replace(/[^\d]/g, "_");
                        return text;
                    };
                    this.fontSize = ko.pureComputed(function () {
                        return Designer.unitsToPixel(control["size"]["height"](), context.measureUnit());
                    });
                    this.letterSpacing = ko.pureComputed(function () {
                        return Math.ceil(_this.fontSize() / 10);
                    });
                    this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.zipCodeFontCss(_this.fontSize()), _this.cssCalculator.backGroundCss(), _this.cssCalculator.zipCodeAlignment(), _this.cssCalculator.foreColorCss());
                    });
                    this.contentCss = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.zipCodeAlignment(), _this.cssCalculator.paddingsCss(), { 'letterSpacing': _this.letterSpacing() + "px" }, { 'lineHeight': 'inherit' });
                    });
                }
                return ZipCodeSurface;
            })(Report.ControlSurface);
            Report.ZipCodeSurface = ZipCodeSurface;
            Report.segmentWidth = { propertyName: "segmentWidth", modelName: "@SegmentWidth", defaultVal: 4, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Segment Width" };
            Report.zipCodeSerializationInfo = [
                Report.foreColor, Report.segmentWidth, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal, Report.textControlScripts,
                $.extend({}, Report.text, { defaultVal: "0" }),
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag", "Text"]),
                Report.defaultDataBinding("Text"),
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup);
            Report.popularPropertiesZipCode = ["text", "defaultDataBinding", "segmentWidth", "bookmark", "bookmarkParent"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRGaugeViewModel = (function (_super) {
                __extends(XRGaugeViewModel, _super);
                function XRGaugeViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this._disposables.push(this.viewType.subscribe(function (val) {
                        return _this.viewStyle(val === "Circular" ? Report.circularValues[0].value : Report.linearValues[0].value);
                    }));
                    ["ActualValue", "Maximum", "Minimum", "TargetValue"].forEach(function (bindingName) {
                        var defaultBinding = _this.getInfo().filter(function (value) { return value["bindingName"] && value["bindingName"] === bindingName; })[0];
                        if (defaultBinding) {
                            _this[defaultBinding.propertyName] = _this.dataBindings()["findBinding"](defaultBinding["bindingName"]);
                        }
                    });
                }
                XRGaugeViewModel.prototype.getInfo = function () {
                    var viewStyleProperty = Report.xrGaugeSerializationInfo.filter(function (info) { return info.propertyName === "viewStyle"; })[0];
                    viewStyleProperty.defaultVal = this.viewType && (this.viewType() === "Linear") ? "Horizontal" : "Half";
                    return Report.xrGaugeSerializationInfo;
                };
                return XRGaugeViewModel;
            })(Report.ControlViewModel);
            Report.XRGaugeViewModel = XRGaugeViewModel;
            Report.circularValues = [
                { displayValue: "Half", value: "Half" },
                { displayValue: "Full", value: "Full" },
                { displayValue: "QuarterLeft", value: "QuarterLeft" },
                { displayValue: "QuarterRight", value: "QuarterRight" },
                { displayValue: "ThreeFourth", value: "ThreeFourth" }
            ];
            Report.linearValues = [
                { displayValue: "Horizontal", value: "Horizontal" },
                { displayValue: "Vertical", value: "Vertical" }
            ];
            Report.actualValue = { propertyName: "actualValue", defaultVal: null, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Actual Value", modelName: "@ActualValue" };
            Report.maximum = { propertyName: "maximum", defaultVal: null, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Maximum", modelName: "@Maximum" };
            Report.minimum = { propertyName: "minimum", modelName: "@Minimum", defaultVal: null, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Minimum" };
            Report.targetValue = { propertyName: "targetValue", modelName: "@TargetValue", defaultVal: null, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Target Value" };
            Report.viewStyle = { propertyName: "viewStyle", modelName: "@ViewStyle", displayName: "View Style", editor: Report.editorTemplates.viewStyle };
            Report.viewTheme = {
                propertyName: "viewTheme", modelName: "@ViewTheme",
                defaultVal: "FlatLight", displayName: "View Theme", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "FlatLight": "FlatLight",
                    "FlatDark": "FlatDark"
                }
            };
            Report.viewType = {
                propertyName: "viewType", modelName: "@ViewType",
                defaultVal: "Circular", displayName: "View Type", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: {
                    "Circular": "Circular",
                    "Linear": "Linear"
                }
            };
            var defaultDataBinding = function (bindingName) { return { propertyName: "defaultDataBinding" + bindingName, displayName: bindingName, editor: Report.editorTemplates.dataBinding, bindingName: bindingName }; };
            Report.xrGaugeSerializationInfo = [
                Report.viewStyle, Report.viewTheme, Report.viewType, Report.actualValue, Report.maximum, Report.minimum, Report.targetValue, Report.anchorVertical, Report.anchorHorizontal, Report.controlScripts, Report.imageType,
                Report.dataBindings(["ActualValue", "Bookmark", "Maximum", "Minimum", "NavigateUrl", "Tag", "TargetValue"]),
                defaultDataBinding("ActualValue"), defaultDataBinding("Maximum"), defaultDataBinding("Minimum"), defaultDataBinding("TargetValue")
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup);
            Report.popularPropertiesGauge = ["viewType", "viewStyle", "viewTheme", "actualValue", "defaultDataBindingActualValue", "targetValue", "defaultDataBindingTargetValue",
                "minimum", "defaultDataBindingMinimum", "maximum", "defaultDataBindingMaximum"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRPageInfoSurface = (function (_super) {
                __extends(XRPageInfoSurface, _super);
                function XRPageInfoSurface(control, context) {
                    _super.call(this, control, context);
                    this.displayText = function () {
                        return control["format"] && control["format"]() || pageInfoValuesMap[control["pageInfo"]()];
                    };
                }
                return XRPageInfoSurface;
            })(Report.ControlSurface);
            Report.XRPageInfoSurface = XRPageInfoSurface;
            var pageInfoValuesMap = {
                "None": "None",
                "Number": "Page Number",
                "NumberOfTotal": "'Current of Total' Page Numbers",
                "RomLowNumber": "Page Number (Roman, Lowercase)",
                "RomHiNumber": "Page Number (Roman, Uppercase)",
                "DateTime": "Current Date and Time",
                "UserName": "User Name",
                "Total": "Page Count"
            };
            Report.format = { propertyName: "format", modelName: "@Format", defaultVal: "", displayName: "Format", editor: Designer.Widgets.editorTemplates.formatEditor };
            Report.pageInfo = {
                propertyName: "pageInfo",
                modelName: "@PageInfo", defaultVal: "NumberOfTotal", displayName: "Page Information",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                values: pageInfoValuesMap
            };
            Report.startPageNumber = {
                propertyName: "startPageNumber",
                modelName: "@StartPageNumber", displayName: "Start Page Number", defaultVal: 1, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric
            };
            Report.runningBand = {
                propertyName: "runningBand", modelName: "@RunningBand", link: true, displayName: "Running Band", editor: Report.editorTemplates.runningBand
            };
            Report.pageInfoSerializationsInfo = [
                Report.anchorVertical, Report.anchorHorizontal, Report.textAlignment, Report.wordWrap, Report.format, Report.pageInfo, Report.startPageNumber, Report.runningBand, Report.textControlScripts, Report.rtl,
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.fontGroup, Report.navigationGroup);
            Report.popularPropertiesPageInfo = ["pageInfo", "startPageNumber", "format", "anchorVertical", "anchorHorizontal"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRPageBreakSurface = (function (_super) {
                __extends(XRPageBreakSurface, _super);
                function XRPageBreakSurface(control, context) {
                    var _this = this;
                    this["_width"] = ko.pureComputed({
                        read: function () {
                            return context.pageWidth() - context.margins.right() - context.margins.left();
                        },
                        write: function () { }
                    });
                    _super.call(this, control, context, XRPageBreakSurface._unitProperties);
                    this.template = "dxrd-pagebreak";
                    this.contenttemplate = "dxrd-line-content";
                    this.selectiontemplate = "dxrd-pagebreak-selection";
                    this.linePosition = ko.pureComputed(function () {
                        var rect = _this.rect();
                        return {
                            "x1": 0,
                            "x2": rect.width,
                            "y1": rect.height / 2,
                            "y2": rect.height / 2
                        };
                    });
                    this.contentCss = ko.observable({
                        'stroke': 'black',
                        'strokeWidth': 1,
                        'strokeDasharray': '4px, 4px'
                    });
                    this.lineHeight = ko.pureComputed(function () {
                        return _this["position"].lineHeight() / _this._context.zoom();
                    });
                    this.css = ko.observable({});
                    this.isIntersect = ko.pureComputed(function () { return false; });
                }
                Object.defineProperty(XRPageBreakSurface.prototype, "isIntersectionDeny", {
                    get: function () { return true; },
                    enumerable: true,
                    configurable: true
                });
                XRPageBreakSurface._unitProperties = {
                    _x: function (o) {
                        return ko.observable(0);
                    },
                    _y: function (o) {
                        return o.location.y;
                    },
                    _height: function (o) {
                        return ko.observable(2);
                    }
                };
                return XRPageBreakSurface;
            })(Report.ControlSurfaceBase);
            Report.XRPageBreakSurface = XRPageBreakSurface;
            Report.pageBreakSerializationsInfo = [Report.location, Report.formattingRuleLinks, Report.truncatedControlScripts].concat(Report.baseControlProperties);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            function findBandByPositionY(bandsHolder, position) {
                var result = null;
                bandsHolder.bands().forEach(function (band) {
                    if (band.absolutePosition.y.peek() <= position) {
                        if (band) {
                            result = findBandByPositionY(band, position) || band;
                            return false;
                        }
                    }
                });
                return result;
            }
            var CrossBandControlViewModel = (function (_super) {
                __extends(CrossBandControlViewModel, _super);
                function CrossBandControlViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this.isCrossbandShow = ko.computed(function () {
                        return !!(_this.startBand() && _this.endBand());
                    });
                    var originalEndBand = this.endBand;
                    this.endPoint.x = ko.pureComputed({
                        read: function () {
                            return _this.startPoint.x();
                        },
                        write: function (val) {
                            if (Designer.checkModelReady(_this.root)) {
                                _this.startPoint.x(val);
                            }
                        }
                    });
                    this.locationF.x = ko.pureComputed({
                        read: function () {
                            return _this.startPoint.x();
                        },
                        write: function (val) {
                            if (Designer.checkModelReady(_this.root)) {
                                _this.startPoint.x(val);
                            }
                        }
                    });
                    this.locationF.y = ko.pureComputed({
                        read: function () {
                            return _this.startPoint.y();
                        },
                        write: function (val) {
                            if (Designer.checkModelReady(_this.root)) {
                                _this.startPoint.y(val);
                            }
                        }
                    });
                    if (this.parentModel()) {
                        this._subscribeBands(this.parentModel());
                    }
                    else {
                        this.parentModel.subscribe(function (report) {
                            if (report)
                                _this._subscribeBands(report);
                        });
                    }
                }
                CrossBandControlViewModel.prototype._subscribeBands = function (report) {
                    var _this = this;
                    report.bands.subscribe(function (changes) {
                        for (var i = 0; i < changes.length; i++) {
                            var change = changes[i];
                            if (change.status === "deleted") {
                                if (change.value === _this.startBand() && change.value === _this.endBand()) {
                                    report.crossBandControls.remove(_this);
                                }
                                else if (change.value === _this.endBand()) {
                                    _this.endBand(report.bands()[change.index - 1]);
                                    _this.endPoint.y(report.bands()[change.index - 1].height());
                                }
                                else if (change.value === _this.startBand()) {
                                    var saveEndBand = _this.endBand(), saveEndPointY = _this.endPoint.y();
                                    _this.startBand(report.bands()[change.index]);
                                    _this.startPoint.y(0);
                                    _this.endBand(saveEndBand);
                                    _this.endPoint.y(saveEndPointY);
                                }
                            }
                        }
                    }, null, "arrayChange");
                };
                CrossBandControlViewModel.prototype.getNearestParent = function (target) {
                    var result = target;
                    while (result.parentModel()) {
                        result = result.parentModel();
                    }
                    return result;
                };
                CrossBandControlViewModel.prototype.isResettableProperty = function (propertyName) {
                    return _super.prototype.isResettableProperty.call(this, propertyName) && ["startPoint", "endPoint", "startBand", "endBand"].indexOf(propertyName) === -1;
                };
                CrossBandControlViewModel.prototype.getControlContainerName = function () { return "crossBandControls"; };
                CrossBandControlViewModel.unitProperties = ["width"];
                return CrossBandControlViewModel;
            })(Report.ReportElementViewModel);
            Report.CrossBandControlViewModel = CrossBandControlViewModel;
            var CrossBandSurface = (function (_super) {
                __extends(CrossBandSurface, _super);
                function CrossBandSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, CrossBandSurface._unitProperties);
                    this.edgeUnderCursor = ko.observable({ isOver: false, x: 0, y: 0, isNotDropTarget: true });
                    this.underCursor = ko.observable({ isOver: false, x: 0, y: 0, isNotDropTarget: true });
                    this._disposables.push(this["_x"].subscribe(function (newVal) {
                        _this["_endX"](newVal);
                    }));
                    this.visible = control.isCrossbandShow;
                    var currentAbsoluteStartY = this["_startY"]();
                    var currentAbsoluteEndY = this["_endY"]();
                    this._disposables.push(ko.computed(function () {
                        if (control.startBand()) {
                            var startBandSurface = Designer.findSurface(control.startBand.peek());
                            currentAbsoluteStartY = _this._isBandCollapsed(startBandSurface) ? startBandSurface.absolutePosition.y() : _this["_startY"]() + startBandSurface.absolutePosition.y();
                        }
                        _this["_y"](currentAbsoluteStartY);
                    }));
                    this._disposables.push(ko.computed(function () {
                        if (control.endBand()) {
                            var endBandSurface = Designer.findSurface(control.endBand.peek());
                            currentAbsoluteEndY = _this._isBandCollapsed(endBandSurface) ? endBandSurface.absolutePosition.y() : _this["_endY"]() + endBandSurface.absolutePosition.y();
                        }
                        _this["_height"](currentAbsoluteEndY - currentAbsoluteStartY);
                    }));
                    this._disposables.push(ko.computed(function () {
                        var absoluteStartY = _this["_y"]();
                        if (absoluteStartY < 0) {
                            _this["_y"](0);
                            return;
                        }
                        if (absoluteStartY !== currentAbsoluteStartY) {
                            var startBandSurface = findBandByPositionY(_this.parent, absoluteStartY);
                            control.startBand(startBandSurface.getControlModel());
                            currentAbsoluteStartY = absoluteStartY;
                            _this["_startY"](currentAbsoluteStartY - startBandSurface.absolutePosition.y());
                            _this._updateEndPoint(_this["_height"](), currentAbsoluteEndY, currentAbsoluteStartY);
                        }
                    }));
                    this._disposables.push(ko.computed(function () {
                        var height = _this["_height"]();
                        if (height !== currentAbsoluteEndY - currentAbsoluteStartY) {
                            _this._updateEndPoint(height, currentAbsoluteEndY, currentAbsoluteStartY);
                        }
                    }));
                    this.template = control.controlType === "XRCrossBandLine" ? "dxrd-crossband-line" : "dxrd-crossband";
                    if (this.getControlModel().controlType === "XRCrossBandLine") {
                        this.lineCss = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.stroke(), _this.cssCalculator.strokeWidthWithWidth(), _this.cssCalculator.strokeDashArrayWithWidth());
                        });
                        this.lineWidthCss = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.strokeWidthWithWidth());
                        });
                    }
                    else {
                        this.leftCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Left"); });
                        this.rightCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Right"); });
                        this.topCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Top"); });
                        this.bottomCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Bottom"); });
                    }
                    this._disposables.push(control.startBand.subscribe(function (newBand) {
                        if (newBand) {
                            var bandSurface = Designer.findSurface(newBand);
                            _this["_y"](bandSurface.absolutePosition.y());
                        }
                    }));
                    this._disposables.push(control.endBand.subscribe(function (newBand) {
                        if (newBand) {
                            var bandSurface = Designer.findSurface(newBand);
                            _this["_height"](bandSurface.absolutePosition.y() - _this["_y"]());
                        }
                    }));
                    this.borderWidth = ko.pureComputed(function () {
                        return control["borderWidth"] && Math.floor(control["borderWidth"]());
                    });
                }
                CrossBandSurface.prototype._isBandCollapsed = function (bandSurface) {
                    return bandSurface && (bandSurface.collapsed() || bandSurface.isSomeParentCollapsed());
                };
                CrossBandSurface.prototype._updateEndPoint = function (height, currentAbsoluteEndY, currentAbsoluteStartY) {
                    currentAbsoluteEndY = currentAbsoluteStartY + height;
                    var endBandSurface = findBandByPositionY(this.parent, currentAbsoluteEndY);
                    if (!endBandSurface) {
                        return;
                    }
                    if (endBandSurface.absolutePosition.y.peek() + endBandSurface.height.peek() < currentAbsoluteEndY) {
                        endBandSurface["_height"](currentAbsoluteEndY - endBandSurface.absolutePosition.y.peek());
                    }
                    this._control.endBand(endBandSurface.getControlModel());
                    this["_endY"](currentAbsoluteEndY - endBandSurface.absolutePosition.y());
                };
                CrossBandSurface.prototype._getAllBands = function (band) {
                    var _this = this;
                    var bands = band.bands(), innerBands = [];
                    bands.forEach(function (band) {
                        innerBands = innerBands.concat(_this._getAllBands(band));
                    });
                    return [].concat(bands, band.subBands(), innerBands);
                };
                CrossBandSurface.prototype._getIntersectionBands = function (currentRect, bands) {
                    var _this = this;
                    var bandSurfaces = bands.filter(function (band) { return _this.isThereIntersection(currentRect, band.absoluteRect()); }), intersectionBands = [].concat(bandSurfaces);
                    bandSurfaces.forEach(function (band) {
                        intersectionBands = intersectionBands.concat(_this._getAllBands(band));
                    });
                    intersectionBands = intersectionBands.filter(function (band) {
                        return band.controls().length > 0;
                    });
                    return intersectionBands;
                };
                CrossBandSurface.prototype._getCrossBandBoxSides = function () {
                    var currentRect = this.rect(), borderWidth = this.getControlModel()["borderWidth"]();
                    return [{ top: currentRect.top, left: currentRect.left, height: borderWidth, width: currentRect.width },
                        { top: currentRect.bottom - borderWidth, left: currentRect.left, height: borderWidth, width: currentRect.width },
                        { top: currentRect.top, left: currentRect.left, height: currentRect.height, width: borderWidth },
                        { top: currentRect.top, left: currentRect.right - borderWidth, height: currentRect.height, width: borderWidth }];
                };
                CrossBandSurface.prototype.isThereIntersectionWithControls = function () {
                    var isThereIntersection = false, currentRect = this.rect(), intersectionBands = this._getIntersectionBands(currentRect, this.parent && this.parent.getChildrenCollection()()), rectangles = this.getControlModel().controlType === "XRCrossBandBox" ? this._getCrossBandBoxSides() : [currentRect];
                    for (var bandIndex = 0; bandIndex < intersectionBands.length; bandIndex++) {
                        for (var rectIndex = 0; rectIndex < rectangles.length; rectIndex++) {
                            if (this.isThereIntersectionWithNeighborsCollection(rectangles[rectIndex], intersectionBands[bandIndex].controls().filter(function (control) { return !control.isIntersectionDeny; }), "absoluteRect")) {
                                isThereIntersection = true;
                                break;
                            }
                        }
                        if (isThereIntersection)
                            break;
                    }
                    ;
                    return isThereIntersection;
                };
                CrossBandSurface.prototype.updateAbsolutePosition = function () {
                    this.absolutePosition.x(this["_endX"]());
                    this.absolutePosition.y(this["_y"]());
                    this.afterUpdateAbsolutePosition();
                };
                CrossBandSurface.prototype.isThereIntersectionWithCrossBandControls = function () {
                    if (this.getControlModel().controlType === "XRCrossBandBox") {
                        var isThereIntersection = false;
                        var rects = this._getCrossBandBoxSides() || [];
                        for (var rectIndex = 0; rectIndex < rects.length; rectIndex++) {
                            if (_super.prototype.isThereIntersectionWithCrossBandControls.call(this, rects[rectIndex])) {
                                isThereIntersection = true;
                                break;
                            }
                        }
                        return isThereIntersection;
                    }
                    else {
                        return _super.prototype.isThereIntersectionWithCrossBandControls.call(this, this.rect());
                    }
                };
                CrossBandSurface.prototype.container = function () {
                    if (this._control.isCrossbandShow()) {
                        return Designer.findSurface(this.getControlModel().startBand());
                    }
                    else {
                        return null;
                    }
                };
                CrossBandSurface.prototype._getChildrenHolderName = function () {
                    return null;
                };
                CrossBandSurface._unitProperties = {
                    _x: function (o) {
                        return o.startPoint.x;
                    },
                    _width: function (o) {
                        return o.width;
                    },
                    _startY: function (o) {
                        return o.startPoint.y;
                    },
                    _endX: function (o) {
                        return o.endPoint.x;
                    },
                    _endY: function (o) {
                        return o.endPoint.y;
                    }
                };
                return CrossBandSurface;
            })(Report.ControlSurfaceBase);
            Report.CrossBandSurface = CrossBandSurface;
            Report.crossBandLineWidth = { propertyName: "width", modelName: "@WidthF", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.text, displayName: "Width" };
            Report.startPoint = { propertyName: "startPoint", modelName: "@StartPointFloat", from: Designer.Point.fromString, displayName: "Start Point", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.endPoint = { propertyName: "endPoint", modelName: "@EndPointFloat", from: Designer.Point.fromString, displayName: "End Point", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.startBand = { propertyName: "startBand", modelName: "@StartBand", link: true, displayName: "Start Band", editor: Report.editorTemplates.bands };
            Report.endBand = { propertyName: "endBand", modelName: "@EndBand", link: true, displayName: "End Band", editor: Report.editorTemplates.bands };
            Report.borderDashStyleCrossband = {
                propertyName: "borderDashStyleCrossband", modelName: "@BorderDashStyle",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Border Dash Style", values: Report.lineStyleValues
            };
            Report.width = { propertyName: "width", modelName: "@WidthF", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Width", from: Designer.floatFromModel };
            Report.crossBandBoxControlSerializationsInfo = [
                Report.startPoint, Report.startBand, Report.endPoint, Report.endBand, Report.width,
                Report.borderColor, Report.borderDashStyleCrossband, Report.canPublish,
                $.extend({}, Report.borders, { defaultVal: "All" }),
                $.extend({}, Report.borderWidth, { defaultVal: 2 }),
                { propertyName: "locationF", modelName: "@LocationFloat", from: Designer.Point.fromString },
            ].concat(Report.baseControlProperties);
            Report.crossBandLineControlSerializationsInfo = [
                Report.startPoint, Report.startBand, Report.endPoint, Report.endBand, Report.width,
                Report.foreColor, Report.lineStyle, Report.crossBandLineWidth, Report.canPublish,
                { propertyName: "locationF", modelName: "@LocationFloat", from: Designer.Point.fromString, }
            ].concat(Report.baseControlProperties);
            Report.popularPropertiesCrossLine = ["lineStyle"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRSparklineViewModel = (function (_super) {
                __extends(XRSparklineViewModel, _super);
                function XRSparklineViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.view(this.createView(this.view() || {}, serializer));
                    this.sparklineFake = {
                        sparklineType: ko.pureComputed({
                            read: function () {
                                return _this.view().type();
                            },
                            write: function (val) {
                                _this.view(_this.createView({ "@Type": val }, serializer));
                            }
                        }),
                        sparklineValue: this.view
                    };
                }
                XRSparklineViewModel.prototype.createView = function (model, serializer) {
                    if (serializer === void 0) { serializer = null; }
                    var type = model && model["@Type"] || "Line";
                    var viewTypeSerialization = sparklineViewMap[type];
                    var newView = { "type": ko.observable(type), "getInfo": function () { return viewTypeSerialization; } };
                    (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(newView, model);
                    return newView;
                };
                XRSparklineViewModel.prototype.getPath = function (propertyName) {
                    if (propertyName === "dataMember") {
                        return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
                    }
                    else if (propertyName === "valueMember") {
                        return Report.getFullPath(this.getPath("dataMember"), this.dataMember());
                    }
                    return "";
                };
                XRSparklineViewModel.spartlineTypes = [
                    "Line",
                    "Bar",
                    "WinLoss",
                    "Area"
                ];
                return XRSparklineViewModel;
            })(Report.ControlViewModel);
            Report.XRSparklineViewModel = XRSparklineViewModel;
            var SparkLineSurface = (function (_super) {
                __extends(SparkLineSurface, _super);
                function SparkLineSurface(control, context) {
                    _super.call(this, control, context);
                }
                return SparkLineSurface;
            })(Report.TodoControlSurface);
            Report.SparkLineSurface = SparkLineSurface;
            Report.valueMember = { propertyName: "valueMember", modelName: "@ValueMember", displayName: "Value Member", editor: Designer.Widgets.editorTemplates.field };
            var highlightMinPoint = { modelName: "@HighlightMinPoint", defaultVal: false, from: Designer.parseBool, propertyName: "highlightMinPoint", displayName: "Highlight Min Point", editor: DevExpress.JS.Widgets.editorTemplates.bool }, highlightMaxPoint = { modelName: "@HighlightMaxPoint", defaultVal: false, from: Designer.parseBool, propertyName: "highlightMaxPoint", displayName: "Highlight Max Point", editor: DevExpress.JS.Widgets.editorTemplates.bool }, highlightStartPoint = { modelName: "@HighlightStartPoint", defaultVal: false, from: Designer.parseBool, propertyName: "highlightStartPoint", displayName: "Highlight Start Point", editor: DevExpress.JS.Widgets.editorTemplates.bool }, highlightEndPoint = { modelName: "@HighlightEndPoint", defaultVal: false, from: Designer.parseBool, propertyName: "highlightEndPoint", displayName: "Highlight End Point", editor: DevExpress.JS.Widgets.editorTemplates.bool }, highlightNegativePoints = { modelName: "@HighlightNegativePoints", defaultVal: false, from: Designer.parseBool, propertyName: "highlightNegativePoints", displayName: "Highlight Negative Points", editor: DevExpress.JS.Widgets.editorTemplates.bool }, color = { modelName: "@Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "color", displayName: "Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, maxPointColor = { modelName: "@MaxPointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "maxPointColor", displayName: "Max Point Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, minPointColor = { modelName: "@MinPointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "minPointColor", displayName: "Min Point Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, startPointColor = { modelName: "@StartPointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "startPointColor", displayName: "Start Point Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, negativePointColor = { modelName: "@NegativePointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "negativePointColor", displayName: "Negative Point Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, endPointColor = { modelName: "@EndPointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "endPointColor", displayName: "End Point Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, sparklineViewType = {
                modelName: "@Type", propertyName: "type"
            }, enableAntialiasing = { modelName: "@EnableAntialiasing", propertyName: "enableAntialiasing", displayName: "Enable Antialiasing", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, defaultVal: true }, maxPointMarkerSize = { modelName: "@MaxPointMarkerSize", defaultVal: 5, propertyName: "maxPointMarkerSize", displayName: "Max Point Marker Size", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, minPointMarkerSize = { modelName: "@MinPointMarkerSize", defaultVal: 5, propertyName: "minPointMarkerSize", displayName: "Min Point Marker Size", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, startPointMarkerSize = { modelName: "@StartPointMarkerSize", defaultVal: 5, propertyName: "startPointMarkerSize", displayName: "Start Point Marker Size", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, negativePointMarkerSize = { modelName: "@NegativePointMarkerSize", defaultVal: 5, propertyName: "negativePointMarkerSize", displayName: "Negative Point Marker Size", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, endPointMarkerSize = { modelName: "@EndPointMarkerSize", defaultVal: 5, propertyName: "endPointMarkerSize", displayName: "End Point Marker Size", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, markerSize = { modelName: "@MarkerSize", propertyName: "markerSize", defaultVal: 5, displayName: "Marker Size", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, showMarkers = { modelName: "@ShowMarkers", propertyName: "showMarkers", displayName: "Show Markers", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false }, markerColor = { modelName: "@MarkerColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "markerColor", displayName: "Marker Color", editor: Designer.Widgets.editorTemplates.customColorEditor };
            var barDistance = { modelName: "@BarDistance", propertyName: "barDistance", defaultVal: 2, displayName: "Bar Distance", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            var areaOpacity = { modelName: "@AreaOpacity", propertyName: "areaOpacity", defaultVal: 135, displayName: "Area Opacity", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            var commonSparklineViewProperties = [highlightStartPoint, highlightEndPoint, highlightMaxPoint, highlightMinPoint, color, maxPointColor, minPointColor, startPointColor, endPointColor, negativePointColor, sparklineViewType];
            var viewLineSerializationsInfo = [].concat(commonSparklineViewProperties, [highlightNegativePoints, enableAntialiasing, negativePointMarkerSize, endPointMarkerSize, startPointMarkerSize, minPointMarkerSize, maxPointMarkerSize, markerSize, showMarkers, Report.lineWidth, markerColor]);
            var viewWinLoseSerializationsInfo = [].concat(commonSparklineViewProperties, [barDistance]);
            var viewBarSerializationsInfo = [].concat(commonSparklineViewProperties, [barDistance, highlightNegativePoints]);
            var viewAreaSerializationsInfo = [].concat(commonSparklineViewProperties, [enableAntialiasing, areaOpacity, negativePointMarkerSize, Report.lineWidth, highlightNegativePoints, showMarkers, markerSize, maxPointMarkerSize, markerColor, minPointMarkerSize, endPointMarkerSize, startPointMarkerSize]);
            var sparklineViewMap = {
                "Line": viewLineSerializationsInfo,
                "Bar": viewBarSerializationsInfo,
                "WinLoss": viewWinLoseSerializationsInfo,
                "Area": viewAreaSerializationsInfo
            };
            var limit1 = { propertyName: "limit1", modelName: "@Limit1", displayName: Designer.getLocalization('Limit 1', 'DevExpress.Sparkline.SparklineRange.Limit1'), defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, limit2 = { propertyName: "limit2", modelName: "@Limit2", displayName: Designer.getLocalization('Limit 2', 'DevExpress.Sparkline.SparklineRange.Limit2'), defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, isAuto = { propertyName: "isAuto", modelName: "@IsAuto", displayName: Designer.getLocalization('Is Auto', 'DevExpress.Sparkline.SparklineRange.IsAuto'), defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.valueRange = { propertyName: "valueRange", modelName: "ValueRange", displayName: Designer.getLocalization('Value Range', 'DevExpress.XtraReports.UI.XRSparkline.ValueRange'), info: [limit1, limit2, isAuto], editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var sparklineView = { propertyName: "view", modelName: "View" };
            Report.sparklineFake = { propertyName: "sparklineFake", editor: Report.editorTemplates.sparkline, displayName: "View" };
            Report.sparklineSerializationsInfo = [
                Report.sparklineFake, sparklineView, Report.valueMember, Report.valueRange, Report.imageType, Report.anchorVertical, Report.anchorHorizontal, Report.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
                Report.dataAdapter, Report.dataMember, Report.dataSource, Report.controlScripts].concat(Report.commonControlProperties, Report.sizeLocation, Report.navigationGroup);
            Report.popularPropertiesSparkline = ["dataSource", "dataMember", "dataAdapter", "valueMemberEditable", "sparklineFake"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var SubreportViewModel = (function (_super) {
                __extends(SubreportViewModel, _super);
                function SubreportViewModel(model, serializer) {
                    _super.call(this, model, serializer);
                    this.isAllSufficient = false;
                }
                SubreportViewModel.prototype._initializeBands = function () {
                    if (this.bands().length === 0) {
                        this.createChild({ "@ControlType": "DetailBand", "@Name": "Detail1" });
                    }
                };
                SubreportViewModel.from = function (model, serializer) {
                    return ko.observable(model ? new SubreportViewModel(model, serializer) : null);
                };
                SubreportViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(ko.unwrap(value), Report.reportSerializationInfo, refs);
                };
                SubreportViewModel.prototype.getInfo = function () {
                    if (!this.isAllSufficient) {
                        var newSerializationInfo = $.extend(true, [], _super.prototype.getInfo.call(this));
                        var index = newSerializationInfo.indexOf(newSerializationInfo.filter(function (item) { return item.propertyName === "objectStorage"; })[0]);
                        newSerializationInfo.splice(index, 1);
                        return newSerializationInfo;
                    }
                    return _super.prototype.getInfo.call(this);
                };
                SubreportViewModel.prototype.serialize = function () {
                    this.isAllSufficient = true;
                    var result = _super.prototype.serialize.call(this);
                    this.isAllSufficient = false;
                    return result;
                };
                SubreportViewModel.defaultReport = {
                    "@ControlType": "DevExpress.XtraReports.UI.XtraReport",
                    "@Version": "16.1",
                    "@PageWidth": "850",
                    "@PageHeight": "1100",
                    "Bands": {
                        "Item1": {
                            "@Name": "topMarginBand1",
                            "@ControlType": "TopMarginBand",
                            "@HeightF": "100"
                        },
                        "Item2": {
                            "@ControlType": "DetailBand",
                            "@Name": "detailBand1",
                            "@HeightF": "100"
                        },
                        "Item3": {
                            "@Name": "bottomMarginBand1",
                            "@ControlType": "BottomMarginBand",
                            "@HeightF": "100"
                        }
                    }
                };
                return SubreportViewModel;
            })(Report.ReportViewModel);
            Report.SubreportViewModel = SubreportViewModel;
            var ParameterBinding = (function (_super) {
                __extends(ParameterBinding, _super);
                function ParameterBinding(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer);
                    this.subreportControl = ko.observable();
                    var _self = this;
                    this.fakeBinding = this;
                    this._reportDataSource = ko.computed(function () {
                        var control = _this.subreportControl();
                        return control && control.root["dataSource"] && control.root["dataSource"]() || null;
                    });
                    var _dataSource = ko.observable(this.dataSource());
                    this.dataSource = ko.pureComputed({
                        read: function () {
                            return _dataSource() || _this._reportDataSource();
                        },
                        write: function (newValue) {
                            _dataSource(newValue);
                        }
                    });
                    this._disposables.push(this.dataSource.subscribe(function (newValue) {
                        if (!newValue) {
                            _this.dataMember(null);
                        }
                    }));
                    var subscribe = this.subreportControl.subscribe(function (newValue) {
                        if (newValue) {
                            subscribe.dispose();
                            _self._disposables.push(ko.computed(function () {
                                if (newValue.root["parameters"]().filter(function (parameter) { return parameter === _self.parameter(); }).length === 0) {
                                    _self.parameter(null);
                                }
                            }));
                            _self._disposables.push(ko.computed(function () {
                                if (newValue.reportSource() && newValue.reportSource().parameters().filter(function (parameter) { return parameter.name === _self.parameterName(); }).length === 0) {
                                    _self.parameterName("");
                                }
                            }));
                        }
                    });
                    this.subreportControl(parent);
                }
                ParameterBinding.createNew = function () {
                    return new ParameterBinding({}, null);
                };
                ParameterBinding.prototype.getInfo = function () {
                    if (this.subreportControl && this.subreportControl() && this.subreportControl().reportSource()) {
                        var serializationInfo = $.extend(true, [], Report.parameterBindingSerializationInfo);
                        var parameterNameInfo = serializationInfo.filter(function (info) { return info.propertyName === "parameterName"; })[0];
                        parameterNameInfo.valuesArray = this.subreportControl().reportSource().parameters().map(function (parameter) { return { value: parameter.parameterName, displayValue: parameter.displayName }; });
                        var dataSourceInfo = serializationInfo.filter(function (info) { return info.propertyName === "dataSource"; })[0];
                        dataSourceInfo.defaultVal = this._reportDataSource();
                        return serializationInfo;
                    }
                    return Report.parameterBindingSerializationInfo;
                };
                ParameterBinding.prototype.updateParameter = function (pathRequest, dataSources) {
                    _super.prototype.updateParameter.call(this, pathRequest, dataSources);
                    this.dataMember(null);
                };
                return ParameterBinding;
            })(Report.DataBindingBase);
            Report.ParameterBinding = ParameterBinding;
            var XRSubreportViewModel = (function (_super) {
                __extends(XRSubreportViewModel, _super);
                function XRSubreportViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, this._patchModel(model), parent, serializer);
                    var _self = this;
                    this.key = ko.pureComputed(function () {
                        var key = _this.parentModel() && _this.parentModel().root && _this.parentModel().root["key"];
                        return (key ? (key() + ".") : "") + _this.name();
                    });
                    if (this.reportSource()) {
                        this.reportSource().key = this.key;
                        if (parent) {
                            var objectStorage = parent.root["objectStorage"]().concat(this.reportSource().objectStorage());
                            parent.root["objectStorage"](objectStorage);
                            this.reportSource().objectStorage(objectStorage);
                        }
                        else {
                            var subscribe = this.parentModel.subscribe(function (newValue) {
                                if (newValue) {
                                    subscribe.dispose();
                                    _this.reportSource().objectStorage(newValue.root["objectStorage"]());
                                }
                            });
                        }
                    }
                    this.parameterBindings = DevExpress.JS.Utils.deserializeArray(model.ParameterBindings, function (item) { return new ParameterBinding(item, _this, serializer); });
                    this._disposables.push(this.parameterBindings.subscribe(function (changes) {
                        for (var index = 0; index < changes.length; index++) {
                            if (changes[index].status === "added") {
                                changes[index].value.subreportControl(_self);
                            }
                        }
                        ;
                    }, null, "arrayChange"));
                    if (this.reportSourceUrl()) {
                        this._getSubreportLayout(this.reportSourceUrl());
                    }
                    this._disposables.push(this.reportSourceUrl.subscribe(function (newVal) {
                        _this.reportSource().dispose();
                        if (newVal) {
                            _this._getSubreportLayout(newVal);
                        }
                        else {
                            _this.reportSource(new SubreportViewModel(SubreportViewModel.defaultReport, serializer));
                        }
                    }));
                    this.actions.push({ action: function () { _this.root["getSubreportUrls"](); }, title: "Update", visible: function (name) { return name === "reportSourceUrl"; } });
                }
                XRSubreportViewModel.prototype._getSubreportLayout = function (url) {
                    var self = this;
                    Report.ReportStorageWeb.getData(url).done(function (result) {
                        if (result) {
                            var model = new Report.ReportViewModel(JSON.parse(result.reportLayout));
                            model.dataSourceRefs = result.dataSourceRefInfo;
                            model["dataSourceHelper"](new Report.DataSourceHelper(model.objectStorage, model.dataSourceRefs, result.dataSources));
                            self.reportSource(model);
                        }
                    });
                };
                XRSubreportViewModel.prototype.getInfo = function () {
                    var serializationInfo = $.extend(true, [], _super.prototype.getInfo.call(this));
                    if (this.reportSourceUrl && this.reportSourceUrl()) {
                        var property = serializationInfo.filter(function (item) { return item.propertyName === "reportSource"; })[0];
                        serializationInfo.splice(serializationInfo.indexOf(property), 1);
                    }
                    return serializationInfo;
                };
                XRSubreportViewModel.prototype._patchModel = function (model) {
                    if (!!model["@ReportSourceUrl"]) {
                        delete model["ReportSource"];
                    }
                    return model;
                };
                return XRSubreportViewModel;
            })(Report.ControlViewModel);
            Report.XRSubreportViewModel = XRSubreportViewModel;
            var SubreportSurface = (function (_super) {
                __extends(SubreportSurface, _super);
                function SubreportSurface(control, context) {
                    _super.call(this, control, context);
                    this.template = "dxrd-subreport";
                    this.selectiontemplate = "dxrd-subreport-selection";
                    this.displayText = function () { return control.name(); };
                }
                SubreportSurface.prototype.isThereIntersectionWithCrossBandControls = function () { return false; };
                SubreportSurface.prototype.isThereIntersectionWithControls = function () { return false; };
                Object.defineProperty(SubreportSurface.prototype, "isIntersectionDeny", {
                    get: function () { return true; },
                    enumerable: true,
                    configurable: true
                });
                return SubreportSurface;
            })(Report.ControlSurface);
            Report.SubreportSurface = SubreportSurface;
            Report.reportSourceUrl = { propertyName: "reportSourceUrl", modelName: "@ReportSourceUrl", defaultVal: "", editor: Report.editorTemplates.reportSourceUrl, displayName: "Report Source Url" };
            Report.reportSource = { propertyName: "reportSource", modelName: "ReportSource", from: SubreportViewModel.from, toJsonObject: SubreportViewModel.toJson };
            Report.parameterBindingSerializationInfo = Report.dataBindingBaseSerializationInfo.concat([
                { propertyName: "parameterName", modelName: "@ParameterName", displayName: "Parameter Name", editor: DevExpress.JS.Widgets.editorTemplates.combobox },
                { propertyName: "fakeBinding", displayName: "Binding", link: true, editor: { header: "dxrd-dataBinding", editorType: Designer.Widgets.FieldListEditor } }
            ]);
            Report.parameterBindings = { propertyName: "parameterBindings", modelName: "ParameterBindings", displayName: "Parameter Bindings", array: true, editor: DevExpress.JS.Widgets.editorTemplates.commonCollection, addHandler: DevExpress.Designer.Report.ParameterBinding.createNew, template: '#dxrd-commonCollectionItem' };
            var subreportProperties = Report.commonControlProperties.filter(function (item) { return item !== Report.tag && item !== Report.canPublish; });
            Report.subreportSerializationsInfo = [
                Report.reportSource, Report.reportSourceUrl, Report.subreportScripts, Report.parameterBindings
            ].concat(Report.sizeLocation, subreportProperties, Report.canGrowShrinkGroup);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var TableOfContentsLevel = (function (_super) {
                __extends(TableOfContentsLevel, _super);
                function TableOfContentsLevel(model, parent, serializer, isTitle) {
                    var _this = this;
                    if (isTitle === void 0) { isTitle = false; }
                    this.isTitle = isTitle;
                    _super.call(this, $.extend({ "@ControlType": "TableOfContentsLevel" }, model), parent, serializer);
                    this.borderWidth = parent.borderWidth;
                    this.borderColor = parent.borderColor;
                    this.borders = parent.borders;
                    this.dpi = parent.dpi;
                    if (this.padding) {
                        this._createPaddingDependencies();
                    }
                    this.borderDashStyle = parent.borderDashStyle;
                    this.borderDefault = parent.borderDefault;
                    this._levelIndex = ko.pureComputed(function () { return parent.allLevels().indexOf(_this); });
                    this._indentFactor = ko.pureComputed(function () { return Report.reculculateUnit(60, _this.parentModel().dpi()); });
                    this.indent = this.indent || ko.observable(0);
                    this.left = ko.pureComputed({
                        read: function () {
                            if (!_this.indent)
                                return 0;
                            if (_this.indent() !== null && _this.indent() !== undefined)
                                return _this.indent();
                            return _this._levelIndex() === 0 ? 0 : (_this._levelIndex() - 1) * _this._indentFactor();
                        },
                        write: $.noop
                    });
                    this.width = ko.pureComputed({
                        read: function () { return parent.size.width() - _this.left(); },
                        write: $.noop
                    });
                    this.name = ko.pureComputed(function () {
                        if (_this.isTitle)
                            return null;
                        if (_this._levelIndex() == parent.allLevels().length - 1)
                            return "Level (Default)";
                        return "Level " + _this._levelIndex();
                    });
                    this.top = ko.computed({
                        read: function () {
                            var previousLevel = parent.allLevels()[_this._levelIndex() - 1];
                            return previousLevel ? previousLevel.top() + previousLevel.height() : 0;
                        },
                        write: $.noop,
                        deferEvaluation: true
                    });
                }
                TableOfContentsLevel.createNew = function (parent) {
                    return new TableOfContentsLevel({ "@Height": Report.reculculateUnit(levelDefaultHeight, parent.dpi()) }, parent);
                };
                TableOfContentsLevel.prototype._createPaddingDependencies = function () {
                    var _this = this;
                    this.paddingObj = new Designer.Widgets.PaddingModel();
                    this.paddingObj.applyFromString(this["padding"]());
                    this.paddingObj.dpi = ko.computed(function () { return _this.dpi && _this.dpi(); });
                    var isUpdate = false;
                    var lock = function (action) {
                        if (!isUpdate) {
                            isUpdate = true;
                            action();
                            isUpdate = false;
                        }
                    };
                    this.padding.subscribe(function (newVal) { return lock(function () { return _this.paddingObj.applyFromString(newVal); }); });
                    ["left", "right", "top", "bottom"].forEach(function (name) {
                        _this.paddingObj[name].subscribe(function (newVal) {
                            if (_this.root["isModelReady"] && _this.root["isModelReady"]() || !_this.root["isModelReady"])
                                lock(function () { return _this.padding(_this.paddingObj.toString()); });
                        });
                    });
                    this.paddingObj.dpi.subscribe(function (newVal) { return lock(function () {
                        if (_this.padding())
                            _this.padding(_this.paddingObj.toString());
                    }); });
                    this.paddingObj["resetValue"] = function () {
                        lock(function () {
                            ["left", "right", "top", "bottom"].forEach(function (name) { return _this.paddingObj[name](null); });
                            _this.padding(_this.paddingObj.toString());
                            _this.paddingObj.applyFromString(_this.padding());
                        });
                    };
                };
                TableOfContentsLevel.prototype.getInfo = function () {
                    return this.isTitle ? Report.tocTitleSerializationsInfo : Report.tocLevelSerializationsInfo;
                };
                TableOfContentsLevel.prototype.isPropertyModified = function (name) {
                    return false;
                };
                TableOfContentsLevel.prototype.getControlFactory = function () {
                    return DevExpress.Designer.Report.controlsFactory;
                };
                TableOfContentsLevel.prototype.rtl = function () {
                    return this.parentModel() && this.parentModel().rtl();
                };
                TableOfContentsLevel.unitProperties = ["height", "indent"];
                return TableOfContentsLevel;
            })(Designer.ElementViewModel);
            Report.TableOfContentsLevel = TableOfContentsLevel;
            var TableOfContentsLevelSurface = (function (_super) {
                __extends(TableOfContentsLevelSurface, _super);
                function TableOfContentsLevelSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, TableOfContentsLevelSurface._unitProperties);
                    this._leaderSymbolWidth = ko.pureComputed(function () {
                        if (!TableOfContentsLevelSurface._$leaderSymbol)
                            TableOfContentsLevelSurface._$leaderSymbol = $("<span />").hide().appendTo("body");
                        TableOfContentsLevelSurface._$leaderSymbol.html(_this.getControlModel().leaderSymbol()).css(_this.contentCss());
                        return TableOfContentsLevelSurface._$leaderSymbol.width();
                    });
                    this.leaderSymbols = ko.pureComputed(function () {
                        var elementWidth = _this.contentSizes().width / _this._context.zoom();
                        if (elementWidth <= 0)
                            return "";
                        var symbolsCount = elementWidth / _this._leaderSymbolWidth();
                        var symbol = _this.getControlModel().leaderSymbol();
                        var a = [];
                        while (a.length < symbolsCount) {
                            a.push(symbol);
                        }
                        return a.join('');
                    });
                    this.text = control.text;
                    this.template = "dxrd-table-of-contents-level";
                }
                TableOfContentsLevelSurface.prototype.resizable = function (resizeHandler, element) {
                    return $.extend({}, resizeHandler, {
                        handles: 's',
                        $selectedNodes: element,
                        minimumHeight: 10
                    });
                };
                TableOfContentsLevelSurface.prototype.rtlLayout = function () {
                    return this._control.rtl();
                };
                TableOfContentsLevelSurface._unitProperties = {
                    _height: function (o) {
                        return o.height;
                    },
                    _width: function (o) {
                        return o.width;
                    },
                    _x: function (o) {
                        return o.left;
                    },
                    _y: function (o) {
                        return o.top;
                    },
                };
                return TableOfContentsLevelSurface;
            })(Report.ControlSurfaceBase);
            Report.TableOfContentsLevelSurface = TableOfContentsLevelSurface;
            var TableOfContentsViewModel = (function (_super) {
                __extends(TableOfContentsViewModel, _super);
                function TableOfContentsViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this.borderDefault = ko.pureComputed(function () { return "none"; });
                    this.levelTitle = new TableOfContentsLevel(control["LevelTitle"], this, serializer, true);
                    this.levelTitleText = this.levelTitle.text;
                    this.levelDefault = new TableOfContentsLevel(control["LevelDefault"], this, serializer);
                    this.levels = DevExpress.JS.Utils.deserializeArray(control["Levels"], function (item) { return new TableOfContentsLevel(item, _this, serializer); });
                    this.allLevels = ko.computed(function () {
                        var array = [_this.levelTitle];
                        Array.prototype.push.apply(array, _this.levels());
                        array.push(_this.levelDefault);
                        return array;
                    });
                    this.size.height = ko.computed({
                        read: function () { return _this.levelDefault.top() + _this.levelDefault.height(); },
                        write: $.noop
                    });
                    this.size.width = ko.computed({
                        read: function () { return (_this.parentModel() ? _this.parentModel().size.width() : 0); },
                        write: $.noop
                    });
                    this.location.x = ko.computed({
                        read: function () { return 0; },
                        write: function () { }
                    });
                }
                Object.defineProperty(TableOfContentsViewModel.prototype, "textEditableProperty", {
                    get: function () { return this.levelTitleText; },
                    enumerable: true,
                    configurable: true
                });
                return TableOfContentsViewModel;
            })(Report.ControlViewModel);
            Report.TableOfContentsViewModel = TableOfContentsViewModel;
            var TableOfContentsSurface = (function (_super) {
                __extends(TableOfContentsSurface, _super);
                function TableOfContentsSurface(control, context) {
                    _super.call(this, control, context);
                    this.levels = ko.observableArray();
                    this.levelTitle = new TableOfContentsLevelSurface(control.levelTitle, context);
                    this.levelDefault = new TableOfContentsLevelSurface(control.levelDefault, context);
                    Designer.createObservableArrayMapCollection(control.levels, this.levels, function (item) { return new TableOfContentsLevelSurface(item, context); });
                    this.template = "dxrd-table-of-contents";
                    this.selectiontemplate = "dxrd-table-of-contents-selected";
                }
                return TableOfContentsSurface;
            })(Report.ControlSurface);
            Report.TableOfContentsSurface = TableOfContentsSurface;
            function isHeaderOrFooterBandType(band) {
                return (band.controlType === "ReportHeaderBand" || band.controlType === "ReportFooterBand") && (band.parentModel() instanceof Report.ReportViewModel);
            }
            Report.isHeaderOrFooterBandType = isHeaderOrFooterBandType;
            function bandContainsToc(reportModel, bandType) {
                var band = (Designer.findFirstItemMatchesCondition(reportModel.bands(), function (item) { return item.controlType === bandType; }));
                return band && bandControlsSomeXRTableOfContents(band);
            }
            Report.bandContainsToc = bandContainsToc;
            function bandControlsSomeXRTableOfContents(band) {
                return band.controls().some(function (item) { return item.controlType === "XRTableOfContents"; });
            }
            Report.bandControlsSomeXRTableOfContents = bandControlsSomeXRTableOfContents;
            var font = { propertyName: "font", modelName: "@Font", defaultVal: "Times New Roman, 9.75pt", displayName: "Font", editor: DevExpress.JS.Widgets.editorTemplates.font };
            var backColor = { propertyName: "backColor", modelName: "@BackColor", defaultVal: "Transparent", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Background Color", editor: Designer.Widgets.editorTemplates.customColorEditor };
            var foreColor = { propertyName: "foreColor", modelName: "@ForeColor", defaultVal: "Black", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Foreground Color", editor: Designer.Widgets.editorTemplates.customColorEditor };
            var size = { propertyName: "size", modelName: "@SizeF", from: Designer.Size.fromString };
            var formattingRuleLinks = {
                propertyName: "formattingRuleLinks", modelName: "FormattingRuleLinks"
            };
            var levelDefaultHeight = 23;
            var baseTocLevelSerializationsInfo = [
                backColor,
                font,
                foreColor,
                { propertyName: "height", modelName: "@Height", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: levelDefaultHeight, displayName: "Height", localizationId: "DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Height", from: Designer.floatFromModel, editorOptions: { min: 10 } }
            ].concat(Report.paddingGroup);
            Report.tocLevelSerializationsInfo = [
                { propertyName: "leaderSymbol", modelName: "@LeaderSymbol", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: ".", displayName: "Leader Symbol", editorOptions: { maxLength: 1 } },
                { propertyName: "indent", modelName: "@Indent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: null, displayName: "Indent", from: Designer.floatFromModel }
            ].concat(baseTocLevelSerializationsInfo);
            Report.tocTitleSerializationsInfo = [Report.text, $.extend({}, Report.textAlignment, { defaultVal: "TopLeft" })].concat(baseTocLevelSerializationsInfo);
            Report.tocTitle = { propertyName: "levelTitle", modelName: "LevelTitle", displayName: "Level Title", info: Report.tocTitleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.tocLevelDefault = { propertyName: "levelDefault", modelName: "LevelDefault", displayName: "Level Default", info: Report.tocLevelSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.maxNestingLevel = { propertyName: "maxNestingLevel", modelName: "@MaxNestingLevel", defaultVal: 0, displayName: "Max Nesting Level", editor: DevExpress.JS.Widgets.editorTemplates.numeric, editorOptions: { min: 0 } };
            Report.tocLevels = {
                propertyName: "levels",
                modelName: "Levels",
                displayName: "Levels",
                array: true,
                editor: Report.editorTemplates.toclevel,
                template: "#dxrd-collectionItemWithAccordion",
            };
            var tocProperties = Report.commonControlProperties.filter(function (item) { return item !== Report.canPublish; });
            Report.tocSerializationsInfo = [formattingRuleLinks, size, Report.location, Report.tocTitle, Report.tocLevels, Report.tocLevelDefault, Report.maxNestingLevel, Report.rtl].concat(tocProperties);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRCharacterComb = (function (_super) {
                __extends(XRCharacterComb, _super);
                function XRCharacterComb(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    var fontModel = new DevExpress.JS.Widgets.FontModel(this.font);
                    var borderWidth = ko.computed(function () {
                        if (_this["borders"]() && _this["borders"]() !== "None") {
                            return _this["borderWidth"]();
                        }
                        else {
                            return 0;
                        }
                    });
                    ko.computed(function () {
                        var side = _this._getRealFontHeight(fontModel) * 1.5 + 2 * borderWidth();
                        if (_this.parentModel()) {
                            side = Designer.pixelToUnits(side, _this.parentModel().root["measureUnit"](), 1);
                        }
                        switch (_this.sizeMode()) {
                            case "AutoSize":
                                _this.cellHeight(side);
                                _this.cellWidth(side);
                                break;
                            case "AutoWidth":
                                _this.cellWidth(side);
                                break;
                            case "AutoHeight":
                                _this.cellHeight(side);
                                break;
                        }
                    });
                }
                XRCharacterComb.prototype._getRealFontHeight = function (fontModel) {
                    var div = $("<div>").css({
                        "font-size": fontModel.size() + fontModel.unit(),
                        "font-family": fontModel.family(),
                        "height": "auto",
                        "width": "auto"
                    }).text("a").appendTo($("body"));
                    var textHeight = div.height();
                    div.remove();
                    return textHeight;
                };
                XRCharacterComb.prototype.getInfo = function () {
                    return Report.characterCombSerializationsInfo;
                };
                XRCharacterComb.prototype.isPropertyDisabled = function (name) {
                    if (name === "cellWidth") {
                        return this.sizeMode() === "AutoSize" || this.sizeMode() === "AutoWidth";
                    }
                    if (name === "cellHeight") {
                        return this.sizeMode() === "AutoSize" || this.sizeMode() === "AutoHeight";
                    }
                    _super.prototype.isPropertyDisabled.call(this, name);
                };
                XRCharacterComb.unitProperties = ["cellWidth", "cellHeight", "verticalSpacing", "horizontalSpacing"];
                return XRCharacterComb;
            })(Report.ControlViewModel);
            Report.XRCharacterComb = XRCharacterComb;
            var XRCharacterCombSurface = (function (_super) {
                __extends(XRCharacterCombSurface, _super);
                function XRCharacterCombSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.cells = ko.observableArray([]);
                    this.borderWidth = ko.computed(function () {
                        return control["borderWidth"]() === undefined ? 1 : control["borderWidth"]();
                    });
                    this.rtl = function () { return control.rtl(); };
                    this.borders = control["borders"];
                    this.template = "dxrd-charactercomb";
                    this.contenttemplate = "dxrd-charactercomb-content";
                    control.textAlignment.subscribe(function (newVal) {
                        var alignments = _this._getAlignments(newVal);
                        var texts = _this._getLines(control.text.peek());
                        _this._setText(texts, alignments.vertical, alignments.horizontal);
                    });
                    this.verticalSpacing = ko.computed(function () {
                        return Designer.unitsToPixel(control.verticalSpacing(), context.measureUnit(), 1);
                    });
                    this.horizontalSpacing = ko.computed(function () {
                        return Designer.unitsToPixel(control.horizontalSpacing(), context.measureUnit(), 1);
                    });
                    this.cellSize = {
                        width: ko.computed(function () {
                            return Designer.unitsToPixel(control.cellWidth(), context.measureUnit(), 1);
                        }),
                        height: ko.computed(function () {
                            return Designer.unitsToPixel(control.cellHeight(), context.measureUnit(), 1);
                        }),
                        isPropertyDisabled: function (name) { return false; }
                    };
                    this.vertical = ko.computed(function () {
                        var borderWidth = 0;
                        var fullCellHeight = _this.cellSize.height() * context.zoom();
                        if (!!_this.verticalSpacing()) {
                            fullCellHeight = fullCellHeight + _this.verticalSpacing() * context.zoom();
                        }
                        else if (_this.borders() && _this.borders() !== "None") {
                            borderWidth = _this.borderWidth() * context.zoom();
                        }
                        fullCellHeight -= borderWidth;
                        var vertical = Math.floor((_this.rect().height - borderWidth) / fullCellHeight);
                        if (_this._roundTwoDesimals(_this.rect().height - (vertical * fullCellHeight + borderWidth)) >= _this._roundTwoDesimals(_this.cellSize.height() * context.zoom() - borderWidth)) {
                            vertical += 1;
                        }
                        return vertical;
                    });
                    this.horizontal = ko.computed(function () {
                        var borderWidth = 0;
                        var fullCellWidth = _this.cellSize.width() * context.zoom();
                        if (!!_this.horizontalSpacing()) {
                            fullCellWidth = fullCellWidth + _this.horizontalSpacing() * context.zoom();
                        }
                        else if (_this.borders() && _this.borders() !== "None") {
                            borderWidth = _this.borderWidth() * context.zoom();
                        }
                        fullCellWidth -= borderWidth;
                        var horizontal = Math.floor((_this.rect().width - borderWidth) / fullCellWidth);
                        if (_this._roundTwoDesimals(_this.rect().width - (horizontal * fullCellWidth + borderWidth)) >= _this._roundTwoDesimals(_this.cellSize.width() * context.zoom() - borderWidth)) {
                            horizontal += 1;
                        }
                        return horizontal;
                    });
                    this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.foreColorCss(), _this.cssCalculator.backGroundCss());
                    });
                    this.borderCss = ko.pureComputed(function () {
                        return _this.cssCalculator.borderCss();
                    });
                    ko.computed(function () {
                        _this.updateArray(_this.vertical() * _this.horizontal());
                        var alignments = _this._getAlignments(control.textAlignment.peek());
                        var texts = _this._getLines(control.text.peek());
                        _this._setText(texts, alignments.vertical, alignments.horizontal);
                    });
                    control.text.subscribe(function (newVal) {
                        var alignments = _this._getAlignments(control.textAlignment.peek());
                        var texts = _this._getLines(newVal);
                        _this._setText(texts, alignments.vertical, alignments.horizontal);
                    });
                }
                XRCharacterCombSurface.prototype._getAlignments = function (textAlignment) {
                    var vertical = "";
                    var horizontal = "";
                    for (var i = 0; i < textAlignment.length; i++) {
                        if (textAlignment[i] === textAlignment[i].toLocaleUpperCase()) {
                            if (vertical === "") {
                                vertical += textAlignment[i];
                            }
                            else if (vertical !== "") {
                                horizontal += textAlignment[i];
                            }
                        }
                        else {
                            if (horizontal !== "") {
                                horizontal += textAlignment[i];
                            }
                            else {
                                vertical += textAlignment[i];
                            }
                        }
                    }
                    return {
                        vertical: vertical,
                        horizontal: horizontal
                    };
                };
                XRCharacterCombSurface.prototype._createCell = function (text, position) {
                    var _this = this;
                    return {
                        text: ko.observable(text),
                        left: ko.computed(function () {
                            var line = Math.floor((position) / _this.horizontal());
                            var column = position - (_this.horizontal() * line);
                            if (_this.rtl()) {
                                column = (_this.horizontal() * (line + 1)) - (position + 1);
                            }
                            if (_this.horizontalSpacing() === 0) {
                                if (_this.borders() && _this.borders() !== "None") {
                                    return column * (_this.cellSize.width() - _this.borderWidth());
                                }
                                else
                                    return column * _this.cellSize.width();
                            }
                            else {
                                return column * (_this.cellSize.width() + _this.horizontalSpacing());
                            }
                        }),
                        top: ko.computed(function () {
                            var line = Math.floor((position) / _this.horizontal());
                            if (_this.verticalSpacing() === 0) {
                                if (_this.borders() && _this.borders() !== "None") {
                                    return line * (_this.cellSize.height() - _this.borderWidth());
                                }
                                return line * _this.cellSize.height();
                            }
                            else {
                                return line * (_this.cellSize.height() + _this.verticalSpacing());
                            }
                        }),
                        size: this.cellSize
                    };
                };
                XRCharacterCombSurface.prototype._getLines = function (text) {
                    var texts = this._control.multiline() ? text.split("\n") : [text];
                    var result = [];
                    if (this.horizontal.peek() === 0) {
                        return result;
                    }
                    for (var i = 0; i < texts.length; i++) {
                        var lines = 1;
                        if (texts[i].length > this.horizontal.peek() && this._control["wordWrap"] && this._control["wordWrap"]()) {
                            var lines = Math.round(texts[i].length / this.horizontal.peek());
                            if (lines < texts[i].length / this.horizontal.peek()) {
                                lines++;
                            }
                        }
                        for (var j = 0; j < lines; j++) {
                            result.push(texts[i].slice(j * (this.horizontal.peek()), (j + 1) * this.horizontal.peek()));
                        }
                    }
                    return result;
                };
                XRCharacterCombSurface.prototype._getTextOffset = function (texts, position, vertical, horizontal) {
                    var offset = 0;
                    if (vertical === "Top") {
                        offset += this.horizontal.peek() * position;
                    }
                    else if (vertical === "Middle") {
                        offset += ((Math.round((this.vertical.peek() - texts.length) / 2)) * this.horizontal.peek());
                        offset += this.horizontal.peek() * position;
                    }
                    else if (vertical === "Bottom") {
                        offset += ((this.vertical.peek() - texts.length) * this.horizontal.peek());
                        offset += this.horizontal.peek() * position;
                    }
                    if (horizontal === "Center") {
                        if (texts[position].length < this.horizontal.peek()) {
                            offset += Math.round((this.horizontal.peek() - texts[position].length) / 2);
                        }
                    }
                    else if (horizontal === "Right") {
                        if (texts[position].length < this.horizontal.peek()) {
                            offset += (this.horizontal.peek() - texts[position].length);
                        }
                    }
                    return offset;
                };
                XRCharacterCombSurface.prototype._setText = function (texts, vertical, horizontal) {
                    var cells = this.cells.peek();
                    for (var i = 0; i < cells.length; i++) {
                        cells[i].text("");
                    }
                    for (var i = 0; i < texts.length; i++) {
                        var offset = this._getTextOffset(texts, i, vertical, horizontal);
                        for (var j = offset; j < offset + texts[i].length; j++) {
                            if ((j - offset) < texts[i].length && j < cells.length && j >= 0) {
                                cells[j].text(texts[i][j - offset]);
                            }
                        }
                    }
                };
                XRCharacterCombSurface.prototype._roundTwoDesimals = function (val) {
                    return Math.round(val * 100) / 100;
                };
                XRCharacterCombSurface.prototype.updateArray = function (cellsCount) {
                    var cells = this.cells.peek();
                    if (cells.length > cellsCount) {
                        cells.splice(cellsCount, cells.length - cellsCount);
                    }
                    else if (cells.length < cellsCount) {
                        for (var i = cells.length; i < cellsCount; i++) {
                            cells.push(this._createCell("", i));
                        }
                    }
                    this.cells.valueHasMutated();
                };
                return XRCharacterCombSurface;
            })(Report.ControlSurface);
            Report.XRCharacterCombSurface = XRCharacterCombSurface;
            Report.cellVerticalSpacing = { propertyName: "verticalSpacing", modelName: "@CellVerticalSpacing", defaultVal: 0, displayName: "Cell Vertical Spacing", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.cellHorizontalSpacing = { propertyName: "horizontalSpacing", modelName: "@CellHorizontalSpacing", defaultVal: 0, displayName: "Cell Horizontal Spacing", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.cellWidth = { propertyName: "cellWidth", modelName: "@CellWidth", defaultVal: 25, displayName: "Cell Width", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.cellHeight = { propertyName: "cellHeight", modelName: "@CellHeight", defaultVal: 25, displayName: "Cell Height", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.cellSizeMode = {
                propertyName: "sizeMode", modelName: "@CellSizeMode", displayName: "Cell Size Mode", defaultVal: "AutoSize", editor: Report.editorTemplates.comboboxUndo,
                values: {
                    "Custom": "Custom",
                    "AutoWidth": "Auto Width",
                    "AutoHeight": "Auto Height",
                    "AutoSize": "Auto Size"
                }
            };
            var wordWrap = { propertyName: "wordWrap", modelName: "@WordWrap", defaultVal: true, from: Designer.parseBool, displayName: "Word Wrap", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.characterCombFont = { propertyName: "font", modelName: "@Font", displayName: "Font", editor: Report.editorTemplates.fontUndo };
            Report.characterCombBorders = { propertyName: "borders", modelName: "@Borders", displayName: "Borders", defaultVal: "All", editor: Designer.Widgets.editorTemplates.borders };
            Report.characterCombBorderDashStyle = $.extend({}, Report.borderDashStyle, {
                values: {
                    "Solid": "Solid",
                    "Dash": "Dash",
                    "Dot": "Dot",
                    "DashDot": "Dash-Dot",
                    "DashDotDot": "Dash-Dot-Dot"
                }
            });
            Report.characterCombSerializationsInfo = [
                Report.styleName, Report.evenStyleName, Report.oddStyleName, Report.stylePriority, Report.canPublish, Report.backColor, Report.autoWidth,
                Report.formattingRuleLinks, Report.cellSizeMode, wordWrap, Report.cellWidth, Report.cellHeight, Report.cellVerticalSpacing, Report.cellHorizontalSpacing, Report.dataBindings(["Text"]),
                Report.defaultDataBinding("Text"), Report.textAlignment, Report.text, Report.textArea, Report.nullValueText, Report.keepTogetherDefaultValueFalse, Report.summary, Report.multiline, wordWrap,
                Report.xlsxFormatString, Report.rtl, Report.characterCombBorders, Report.borderWidth, Report.characterCombBorderDashStyle, Report.borderColor, Report.characterCombFont, Report.foreColor, Report.editOptions
            ].concat(Report.baseControlProperties, Report.navigationGroup, Report.canGrowShrinkGroup, Report.processGroup, Report.sizeLocation);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ElementActions = (function (_super) {
                __extends(ElementActions, _super);
                function ElementActions(surfaceContext, selectionProvider) {
                    var _this = this;
                    _super.call(this);
                    this._selectionProvider = selectionProvider;
                    var alignHandler = new AlignmentHandler(selectionProvider, surfaceContext);
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Align to Grid",
                            imageClassName: "dxrd-image-actions-align_to_grid",
                            clickAction: function () { alignHandler.alignToGrid(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled; }),
                        }, {
                            text: "Size to Grid",
                            imageClassName: "dxrd-image-actions-size_to_grid",
                            clickAction: function () { alignHandler.sizeToGrid(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled; }),
                        }, {
                            text: "Center Horizontally",
                            imageClassName: "dxrd-image-actions-center_horizontally",
                            clickAction: function () { alignHandler.centerHorizontally(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled || selectionProvider.focused() instanceof Report.CrossBandSurface; }),
                        }, {
                            text: "Center Vertically",
                            imageClassName: "dxrd-image-actions-center_vertically",
                            clickAction: function () { alignHandler.centerVertically(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled || selectionProvider.focused() instanceof Report.CrossBandSurface; }),
                        }, {
                            text: "Bring to Front",
                            imageClassName: "dxrd-image-actions-bring_to_front",
                            clickAction: function () { alignHandler.bringToFront(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled || !alignHandler.canChangeZOrder(); }),
                        }, {
                            text: "Send to Back",
                            imageClassName: "dxrd-image-actions-send_to_back",
                            clickAction: function () { alignHandler.sendToBack(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled || !alignHandler.canChangeZOrder(); }),
                        }
                    ]);
                    this.setDisabled = function (context) {
                        _this._generalDisabled = _this._selectionProvider.selectedItems.some(function (item) { return item.locked; });
                    };
                }
                ElementActions.prototype.condition = function (context) {
                    return !(context instanceof Report.TableCellViewModel || context instanceof Report.TableRowViewModel);
                };
                return ElementActions;
            })(Designer.BaseActionsProvider);
            Report.ElementActions = ElementActions;
            var ElementsGroupActions = (function (_super) {
                __extends(ElementsGroupActions, _super);
                function ElementsGroupActions(surfaceContext, selectionProvider) {
                    var _this = this;
                    _super.call(this);
                    this._selectionProvider = selectionProvider;
                    var alignHandler = new AlignmentHandler(selectionProvider, surfaceContext), spaceCommandHandler = new SpaceCommandHandler(selectionProvider, surfaceContext);
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Align Lefts",
                            imageClassName: "dxrd-image-actions-align_lefts",
                            clickAction: function () { alignHandler.alignLeft(); },
                        }, {
                            text: "Align Centers",
                            imageClassName: "dxrd-image-actions-align_centers",
                            clickAction: function () { alignHandler.alignVerticalCenters(); },
                        }, {
                            text: "Align Rights",
                            imageClassName: "dxrd-image-actions-align_rights",
                            clickAction: function () { alignHandler.alignRight(); },
                        }, {
                            text: "Align Tops",
                            imageClassName: "dxrd-image-actions-align_tops",
                            clickAction: function () { alignHandler.alignTop(); },
                        }, {
                            text: "Align Middles",
                            imageClassName: "dxrd-image-actions-align_middles",
                            clickAction: function () { alignHandler.alignHorizontalCenters(); },
                        }, {
                            text: "Align Bottoms",
                            imageClassName: "dxrd-image-actions-align_bottoms",
                            clickAction: function () { alignHandler.alignBottom(); },
                        }, {
                            text: "Size to Control Width",
                            imageClassName: "dxrd-image-actions-make_same_width",
                            clickAction: function () { alignHandler.sizeToControlWidth(); },
                        }, {
                            text: "Size to Control Height",
                            imageClassName: "dxrd-image-actions-make_same_height",
                            clickAction: function () { alignHandler.sizeToControlHeight(); },
                        }, {
                            text: "Size to Control",
                            imageClassName: "dxrd-image-actions-make_same_sizes",
                            clickAction: function () { alignHandler.sizeToControl(); },
                        }, {
                            text: "Make Horizontal Spacing Equal",
                            imageClassName: "dxrd-image-actions-make_horizontal_spacing_equal",
                            clickAction: function () { spaceCommandHandler.horizSpaceMakeEqual(); },
                        }, {
                            text: "Increase Horizontal Spacing",
                            imageClassName: "dxrd-image-actions-increase_horizontal_spacing",
                            clickAction: function () { spaceCommandHandler.horizSpaceIncrease(); },
                        }, {
                            text: "Decrease Horizontal Spacing",
                            imageClassName: "dxrd-image-actions-decrease_horizontal_spacing",
                            clickAction: function () { spaceCommandHandler.horizSpaceDecrease(); },
                        }, {
                            text: "Remove Horizontal Spacing",
                            imageClassName: "dxrd-image-actions-remove_horizontal_spacing",
                            clickAction: function () { spaceCommandHandler.horizSpaceConcatenate(); },
                        }, {
                            text: "Make Vertical Spacing Equal",
                            imageClassName: "dxrd-image-actions-make_vertical_spacing_equal",
                            clickAction: function () { spaceCommandHandler.vertSpaceMakeEqual(); },
                        }, {
                            text: "Increase Vertical Spacing",
                            imageClassName: "dxrd-image-actions-increase_vertical_spacing",
                            clickAction: function () { spaceCommandHandler.vertSpaceIncrease(); },
                        }, {
                            text: "Decrease Vertical Spacing",
                            imageClassName: "dxrd-image-actions-decrease_vertical_spacing",
                            clickAction: function () { spaceCommandHandler.vertSpaceDecrease(); },
                        }, {
                            text: "Remove Vertical Spacing",
                            imageClassName: "dxrd-image-actions-remove_vertical_spacing",
                            clickAction: function () { spaceCommandHandler.vertSpaceConcatenate(); },
                        }
                    ]);
                    this.setDisabled = function (context) {
                        var isDisabled = _this._selectionProvider.selectedItems.some(function (item) { return item.locked; });
                        _this.actions.forEach(function (action) {
                            action.disabled(isDisabled);
                        });
                    };
                }
                ElementsGroupActions.prototype.condition = function (context) {
                    return this._selectionProvider.selectedItems.length > 1;
                };
                return ElementsGroupActions;
            })(Designer.BaseActionsProvider);
            Report.ElementsGroupActions = ElementsGroupActions;
            var AlignmentHandler = (function () {
                function AlignmentHandler(selectionProvider, surfaceContext) {
                    this._selectionProvider = selectionProvider;
                    this._surfaceContext = surfaceContext;
                }
                AlignmentHandler.prototype._getFocusedItem = function () { return this._selectionProvider.focused(); };
                AlignmentHandler.prototype._getFocusedParent = function () { return this._selectionProvider.focused().parent; };
                AlignmentHandler.prototype._getPositionFromBand = function (surface) {
                    var rect = $.extend({}, surface.rect());
                    var parent = surface.parent;
                    if (!(surface instanceof Report.BandSurface)) {
                        while (!(parent instanceof Report.BandSurface)) {
                            rect.left += parent.rect().left;
                            rect.top += parent.rect().top;
                            parent = parent.parent;
                        }
                        rect.bottom = rect.top + rect.height;
                        rect.right = rect.left + rect.width;
                    }
                    else {
                        parent = surface;
                    }
                    rect.band = parent;
                    return rect;
                };
                AlignmentHandler.prototype._visitAllSelectedItemsInSameContainerWithFocused = function (iterator) {
                    var focused = this._selectionProvider.focused();
                    var rect = this._getPositionFromBand(focused);
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) {
                        return item !== focused;
                    }).forEach(function (item) {
                        iterator(item, rect);
                    });
                };
                AlignmentHandler.prototype._centerByBand = function (isHoriz, margins, rtl) {
                    if (rtl === void 0) { rtl = false; }
                    var axisProperty = isHoriz ? "left" : "top", lengthProperty = isHoriz ? "width" : "height", focusedParent = this._getFocusedParent(), parentLengthProperty = focusedParent.rect()[lengthProperty] - margins.right(), minAxis = this._getFocusedItem().rect()[axisProperty], maxSide = this._getFocusedItem().rect()[axisProperty] + this._getFocusedItem().rect()[lengthProperty], newOffset;
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.parent; }).forEach(function (item) {
                        var axis = item.rect()[axisProperty];
                        if (axis < minAxis) {
                            minAxis = axis;
                        }
                    });
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.parent; }).forEach(function (item) {
                        var side = item.rect()[axisProperty] + item.rect()[lengthProperty];
                        if (side > maxSide) {
                            maxSide = side;
                        }
                    });
                    newOffset = (parentLengthProperty - (maxSide - minAxis)) / 2 - minAxis + (rtl ? margins.right() : 0);
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.parent; }).forEach(function (item) {
                        var newVal = {};
                        newVal[axisProperty] = item.rect()[axisProperty] + newOffset;
                        item.rect(newVal);
                    });
                };
                AlignmentHandler.prototype._roundingValue = function (value, snapGridSize) {
                    return Math.round(value / snapGridSize) * snapGridSize;
                };
                AlignmentHandler.prototype.alignLeft = function () {
                    var _this = this;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                        if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        var parentRect = _this._getPositionFromBand(item.parent);
                        var left = rect.left - parentRect.left;
                        item.rect({ left: left });
                    });
                };
                AlignmentHandler.prototype.alignTop = function () {
                    var _this = this;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent;
                        }
                        var parentRect = _this._getPositionFromBand(item.parent);
                        if (parentRect["band"] === rect["band"]) {
                            var top = rect.top - parentRect.top;
                            item.rect({ top: top });
                        }
                    });
                };
                AlignmentHandler.prototype.alignRight = function () {
                    var _this = this;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                        if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        var parentRect = _this._getPositionFromBand(item.parent);
                        var right = rect.left - parentRect.left + rect.width;
                        var left = right - item.rect().width;
                        item.rect({ right: right, left: left });
                    });
                };
                AlignmentHandler.prototype.alignBottom = function () {
                    var _this = this;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent;
                        }
                        var parentRect = _this._getPositionFromBand(item.parent);
                        if (parentRect["band"] === rect["band"]) {
                            var bottom = rect.top - parentRect.top + rect.height;
                            var top = bottom - item.rect().height;
                            item.rect({ bottom: bottom, top: top });
                        }
                    });
                };
                AlignmentHandler.prototype.alignVerticalCenters = function () {
                    var focused = this._getFocusedItem();
                    var verticalCenter = focused.rect().left + focused.rect().width / 2;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent.parent;
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        if (focused.parent === item.parent) {
                            item.rect({ left: verticalCenter - item.rect().width / 2 });
                        }
                    });
                };
                AlignmentHandler.prototype.alignHorizontalCenters = function () {
                    var focused = this._getFocusedItem();
                    var horizontalCenter = focused.rect().top + focused.rect().height / 2;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent.parent;
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        if (focused.parent === item.parent) {
                            item.rect({ top: horizontalCenter - item.rect().height / 2 });
                        }
                    });
                };
                AlignmentHandler.prototype.sizeToControlWidth = function () {
                    var newWidth = this._getFocusedItem().rect().width;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        item.rect({ width: newWidth });
                    });
                };
                AlignmentHandler.prototype.sizeToControlHeight = function () {
                    var newHeight = this._getFocusedItem().rect().height;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent;
                        }
                        item.rect({ height: newHeight });
                    });
                };
                AlignmentHandler.prototype.sizeToControl = function () {
                    var newWidth = this._getFocusedItem().rect().width, newHeight = this._getFocusedItem().rect().height;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item.rect({ width: newWidth });
                            item.parent.rect({ height: newHeight });
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item.rect({ height: newHeight });
                            item.parent.rect({ width: newWidth });
                        }
                        else {
                            item.rect({ width: newWidth, height: newHeight });
                        }
                    });
                };
                AlignmentHandler.prototype.centerHorizontally = function () {
                    this._centerByBand(true, this._surfaceContext().margins, this._surfaceContext().rtl());
                };
                AlignmentHandler.prototype.centerVertically = function () {
                    this._centerByBand(false, new Designer.Margins(0, 0, 0, 0));
                };
                AlignmentHandler.prototype.alignToGrid = function () {
                    var _this = this;
                    var snapGridSize = this._surfaceContext().snapGridSize();
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize)
                            });
                            item.parent.rect({
                                top: _this._roundingValue(item.rect().top, snapGridSize)
                            });
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item.rect({
                                top: _this._roundingValue(item.rect().top, snapGridSize)
                            });
                            item.parent.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize)
                            });
                        }
                        else {
                            item.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize),
                                top: _this._roundingValue(item.rect().top, snapGridSize)
                            });
                        }
                    });
                };
                AlignmentHandler.prototype.sizeToGrid = function () {
                    var _this = this;
                    var snapGridSize = this._surfaceContext().snapGridSize();
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize),
                                width: _this._roundingValue(item.rect().width, snapGridSize)
                            });
                            item.parent.rect({
                                top: _this._roundingValue(item.rect().top, snapGridSize),
                                height: _this._roundingValue(item.rect().height, snapGridSize)
                            });
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item.rect({
                                top: _this._roundingValue(item.rect().top, snapGridSize),
                                height: _this._roundingValue(item.rect().height, snapGridSize)
                            });
                            item.parent.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize),
                                width: _this._roundingValue(item.rect().width, snapGridSize)
                            });
                        }
                        else {
                            item.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize),
                                top: _this._roundingValue(item.rect().top, snapGridSize),
                                width: _this._roundingValue(item.rect().width, snapGridSize),
                                height: _this._roundingValue(item.rect().height, snapGridSize)
                            });
                        }
                    });
                };
                AlignmentHandler.prototype.sendToBack = function () {
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
                        if (!item.focused()) {
                            item.getControlModel()["sendToBack"]();
                        }
                    });
                    this._getFocusedItem().getControlModel()["sendToBack"]();
                };
                AlignmentHandler.prototype.bringToFront = function () {
                    var reverseSelectedItems = this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; });
                    reverseSelectedItems.reverse();
                    reverseSelectedItems.forEach(function (item) {
                        item.getControlModel()["bringToFront"]();
                    });
                };
                AlignmentHandler.prototype.canChangeZOrder = function () {
                    var focusedItem = this._getFocusedItem(), parent = focusedItem && focusedItem.parent;
                    if (!focusedItem || !parent)
                        return false;
                    var childrenCollection = parent.getChildrenCollection();
                    return (childrenCollection && childrenCollection.peek().length) > 1;
                };
                return AlignmentHandler;
            })();
            Report.AlignmentHandler = AlignmentHandler;
            var SpaceCommandHandler = (function () {
                function SpaceCommandHandler(selectionProvider, surfaceContext) {
                    this._selectionProvider = selectionProvider;
                    this._surfaceContext = surfaceContext;
                }
                SpaceCommandHandler.prototype._comparer = function (propertyName) {
                    return function (a, b) {
                        return a.rect()[propertyName] - b.rect()[propertyName];
                    };
                };
                SpaceCommandHandler.prototype._spaceIncrease = function (sign, isHoriz) {
                    var sortedSelectedItems = this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }), axisProperty = isHoriz ? "left" : "top", lengthProperty = isHoriz ? "width" : "height", margin = isHoriz ? this._surfaceContext().margins.left() : 0, snapGridSize = this._surfaceContext().snapGridSize(), focusedParent = this._selectionProvider.focused().getControlModel().parentModel(), focusedItem = this._selectionProvider.focused();
                    sortedSelectedItems.sort(this._comparer(axisProperty));
                    var focusedItemIndex = sortedSelectedItems.indexOf(this._selectionProvider.focused());
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return item !== focusedItem && item.getControlModel().parentModel() === focusedParent; }).forEach(function (item) {
                        var itemIndex = sortedSelectedItems.indexOf(item), spaceOffset = Math.abs(itemIndex - focusedItemIndex) * snapGridSize * sign, itemAxisProperty = item.rect()[axisProperty], itemLengthProperty = item.rect()[lengthProperty], parentLengthProperty = item.parent.rect()[lengthProperty] - margin, newValue;
                        if (itemIndex < focusedItemIndex) {
                            newValue = itemAxisProperty - spaceOffset;
                            if (newValue < 0) {
                                newValue = 0;
                            }
                        }
                        else {
                            newValue = itemAxisProperty + spaceOffset;
                            if ((newValue + itemLengthProperty) > parentLengthProperty) {
                                newValue = parentLengthProperty - itemLengthProperty;
                            }
                        }
                        var val = {};
                        val[axisProperty] = newValue;
                        item.rect(val);
                    });
                };
                SpaceCommandHandler.prototype._spaceMakeEqual = function (isHoriz) {
                    this._concatenateWithSpace(isHoriz, function (sortedSelectedItems, axisProperty, lengthProperty) {
                        var averageSpace = 0;
                        for (var i = 0; i < sortedSelectedItems.length - 1; i++) {
                            var currentValue = sortedSelectedItems[i + 1].rect()[axisProperty] - (sortedSelectedItems[i].rect()[axisProperty] + sortedSelectedItems[i].rect()[lengthProperty]);
                            averageSpace = (averageSpace * i + currentValue) / (i + 1);
                        }
                        return averageSpace;
                    });
                };
                SpaceCommandHandler.prototype._concatenateWithSpace = function (isHoriz, getSpaceSize) {
                    var sortedSelectedItems = this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }), axisProperty = isHoriz ? "left" : "top", lengthProperty = isHoriz ? "width" : "height", spaceSize = 0, focusedParent = this._selectionProvider.focused().getControlModel().parentModel();
                    sortedSelectedItems.sort(this._comparer(axisProperty));
                    spaceSize = getSpaceSize(sortedSelectedItems, axisProperty, lengthProperty);
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.getControlModel().parentModel(); }).forEach(function (item) {
                        var itemIndex = sortedSelectedItems.indexOf(item);
                        if (itemIndex > 0) {
                            var prevControl = sortedSelectedItems[itemIndex - 1], val = {};
                            val[axisProperty] = prevControl.rect()[axisProperty] + prevControl.rect()[lengthProperty] + spaceSize;
                            item.rect(val);
                        }
                    });
                };
                SpaceCommandHandler.prototype.horizSpaceConcatenate = function () {
                    this._concatenateWithSpace(true, function () { return 0; });
                };
                SpaceCommandHandler.prototype.vertSpaceConcatenate = function () {
                    this._concatenateWithSpace(false, function () { return 0; });
                };
                SpaceCommandHandler.prototype.horizSpaceMakeEqual = function () {
                    this._spaceMakeEqual(true);
                };
                SpaceCommandHandler.prototype.vertSpaceMakeEqual = function () {
                    this._spaceMakeEqual(false);
                };
                SpaceCommandHandler.prototype.horizSpaceDecrease = function () {
                    this._spaceIncrease(-1, true);
                };
                SpaceCommandHandler.prototype.horizSpaceIncrease = function () {
                    this._spaceIncrease(1, true);
                };
                SpaceCommandHandler.prototype.vertSpaceDecrease = function () {
                    this._spaceIncrease(-1, false);
                };
                SpaceCommandHandler.prototype.vertSpaceIncrease = function () {
                    this._spaceIncrease(1, false);
                };
                return SpaceCommandHandler;
            })();
            Report.SpaceCommandHandler = SpaceCommandHandler;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            DevExpress.JS.Utils.getLocalization = DevExpress.Designer.getLocalization;
            Report.controlsFactory = new Designer.ControlsFactory();
            Report.HandlerUri = "DXXRD.axd";
            Report.reportStorageWebIsRegister = false;
            Report.ActionId = {
                NewReport: "dxrd-newreport",
                NewReportViaWizard: "dxrd-newreport-via-wizard",
                OpenReport: "dxrd-open-report",
                ReportWizard: "dxrd-run-wizard",
                Preview: "dxrd-preview",
                Scripts: "dxrd-scripts",
                AddDataSource: "dxrd-add-datasource",
                AddSqlDataSource: "dxrd-add-sql-datasource",
                AddMultiQuerySqlDataSource: "dxrd-add-multi-query-sql-datasource",
                Save: "dxrd-save",
                SaveAs: "dxrd-save-as",
                Exit: "dxrd-exit",
            };
            Report.groups = {
                "Chart Structure": [Report.chartStructure, Report.chartElement],
                "Styles": [Report.evenStyleName, Report.oddStyleName, Report.styleName].concat(Report.pivotGridStyles),
                "Appearance": [Designer.Chart.appearanceName, Report.pivotGridAppearances, Report.alignment, Report.backColor, Report.borderColor, Report.borderDashStyle, Report.borderDashStyleCrossband, Report.borderWidth, Report.borders,
                    Designer.Pivot.caption, Designer.Pivot.cellFormat, Designer.Pivot.columnValueLineCount, Designer.Pivot.displayFolder, Designer.Pivot.emptyCellText, Designer.Pivot.emptyValueText,
                    Report.fillColor, Report.font, Report.characterCombFont, Report.foreColor, Report.glyphAlignment, Designer.Pivot.grandTotalCellFormat, Designer.Pivot.grandTotalText,
                    Report.lineDirection, Report.lineStyle, Report.lineWidth, Report.padding, Report.pageColor, Designer.Chart.paletteName, Report.imageType,
                    Designer.Pivot.rowValueLineCount, Report.sparklineFake, Report.stylePriority, Report.textAlignment, Report.textTrimming, Designer.Pivot.totalCellFormat, Designer.Pivot.totalValueFormat,
                    Designer.Pivot.valueFormat, Report.viewStyle, Report.viewTheme, Report.viewType, Report.watermark, Report.formattingRuleLinks],
                "Behavior": [
                    Designer.Pivot.allowedAreas, Report.anchorVertical, Report.anchorHorizontal, Report.angle, Designer.Pivot.area, Designer.Pivot.areaIndexEditable, Report.autoModule, Report.autoWidth,
                    Report.barCodeOrientation, Report.canGrow, Report.canPublish, Report.canShrink, Report.conditionObj, Report.drillDownControl, Report.drillDownDetailReportExpanded,
                    Designer.Pivot.groupInterval, Designer.Pivot.groupIntervalNumericRange, Designer.Pivot.totalsVisibility,
                    Report.displayName, Report.format, Report.formatting, Report.groupFields, Report.groupUnion, Report.groupFooterUnion,
                    Report.keepTogether, Report.keepTogetherWithDetailReports, Report.level,
                    Report.moduleInfo, Report.multiline, Report.multiColumn,
                    Report.pageBreak, Report.pageInfo, Report.printAtBottom, Report.printOn, Report.processDuplicatesMode, Report.processDuplicatesTarget, Report.processNullValues,
                    Report.repeatEveryPage, Report.measureUnit, Designer.Chart.rotated, Report.runningBand, Report.requestParameters, Report.rowSpan,
                    Report.segmentWidth, Report.shapeFake, Report.sizing, Report.showPreviewMarginLines, Report.showText, Report.startPageNumber, Report.stretch, Report.barcodeFake,
                    Report.verticalContentSplitting, Report.visible, Report.wordWrap, Report.scriptLanguage,
                    Report.reportExportOptionsSerializationInfo, Report.horizontalContentSplitting,
                    Report.reportPrintOptions,
                    Report.scriptReferencesString, Report.allScripts, Report.sortingSummary,
                    Report.tocTitle, Report.tocLevelDefault, Report.tocLevels, Report.maxNestingLevel,
                    Report.rtl, Report.rtlReport, Report.rtlLayout,
                    Report.editOptions, Report.textEditOptions, Report.chekEditOptions, Designer.Pivot.sortBySummary
                ],
                "Data": [Report.actualValue, Designer.Chart.seriesDataMember,
                    Report.checkState, Report.checked, Report.chartDataSource,
                    Report.dataSource, Report.dataMember, Report.dataAdapter, Designer.Pivot.expandedInFieldsGroup, Designer.Chart.pivotGridDataSourceOptions,
                    Designer.Pivot.fieldName, Report.filterStringEditable,
                    Report.image, Report.imageUrl, Report.maximum, Report.minimum, Report.nullValueText, Report.prefilter,
                    Designer.Pivot.runningTotal, Report.sortFields, Report.summary, Designer.Pivot.showNewValues, Designer.Pivot.sortMode, Designer.Pivot.sortOrder, Designer.Pivot.summaryDisplayType, Designer.Pivot.summaryType,
                    Report.targetValue, Report.tag, Report.text, Report.textArea, Report.rtf, Report.textRtf, Report.serializableRtfString, Designer.Pivot.topValueCount, Designer.Pivot.topValueShowOthers, Designer.Pivot.topValueType,
                    Designer.Pivot.unboundExpression, Designer.Pivot.unboundFieldName, Designer.Pivot.unboundType, Designer.Pivot.useNativeFormat,
                    Report.xlsxFormatString,
                    Designer.Pivot.pivotGridFieldsSerializable,
                    Report.valueMember, Report.valueRange,
                    Report.reportSourceUrl, Report.calculatedFields, Report.parameterBindings,
                    Report.dataBindings([])],
                "Design": [Report.name, Report.snapGridSize],
                "Layout": [Report.cellHeight, Report.cellHorizontalSpacing, Report.cellSizeMode, Report.cellVerticalSpacing, Report.cellWidth, Report.startBand, Report.startPoint, Report.endBand, Report.endPoint, Report.height, Report.location, Report.size, Designer.Pivot.minWidth, Report.width],
                "Navigation": [Report.bookmark, Report.bookmarkParent, Report.bookmarkDuplicateSuppress, Report.target, Report.navigateUrl],
                "Page Settings": [Report.landscape, Report.rollPaper, Report.pageWidth, Report.pageHeight, Report.paperKind, Report.margins],
                "Options": Report.pivotGridOptions.concat(Designer.Pivot.options),
                "KPI": [Designer.Pivot.KPIGraphic],
            };
            Report.formatStringEditorCustomSet = {};
            function getControls(controls, filter, isNoneItemAdded) {
                if (isNoneItemAdded === void 0) { isNoneItemAdded = true; }
                return ko.pureComputed(function () {
                    var result = controls();
                    if (filter) {
                        result = result.filter(filter);
                    }
                    var allControls = result.map(function (item) {
                        return { displayName: item.name(), value: item };
                    });
                    if (isNoneItemAdded)
                        allControls.splice(0, 0, { displayName: Designer.localizeNoneString("(none)"), value: null });
                    return allControls;
                }).extend({ throttle: 1 });
            }
            Report.reportCopyPasteStrategy = {
                createChild: function (pasteTarget, info) {
                    if (info["@ControlType"] === "XRCrossBandBox" || info["@ControlType"] === "XRCrossBandLine") {
                        return pasteTarget.root.createChild(info);
                    }
                    return Designer.copyPasteStrategy.createChild(pasteTarget, info);
                },
                calculateDelta: function (selection, pasteTargetSurface, minPoint) {
                    var result = Designer.copyPasteStrategy.calculateDelta(selection, pasteTargetSurface, minPoint);
                    if (selection.getControlModel().controlType === "XRCrossBandBox" || selection.getControlModel().controlType === "XRCrossBandLine") {
                        result.y += pasteTargetSurface["absolutePosition"].y();
                    }
                    return result;
                }
            };
            function correctModel(model) {
                if (Array.isArray(model)) {
                    for (var i = 0; i < model.length; i++) {
                        if (model[i]["@Ref"] !== undefined) {
                            model = model[i];
                            break;
                        }
                    }
                }
                else {
                    Object.keys(model).forEach(function (name) {
                        if (model[name] instanceof Object)
                            model[name] = correctModel(model[name]);
                    });
                }
                return model;
            }
            Report.correctModel = correctModel;
            function customizeDesignerActions(designerModel, nextCustomizer, exitDesigner, state) {
                var report = designerModel.model, reportPreview = designerModel.reportPreviewModel.reportPreview, reportWizard = designerModel.wizard, dataSourceWizard = designerModel.dataSourceWizard, sqlDataSourceWizard = designerModel.sqlDataSourceWizard, completeSqlDataSourceWizard = designerModel.completeSqlDataSourceWizard, scriptsEditor = designerModel.scriptsEditor;
                return (function (actions) {
                    $.extend(Designer.findFirstItemMatchesCondition(actions, function (item) { return item.id === Designer.ActionId.Copy; }), { textId: Report.StringId.Copy });
                    if (Report.reportStorageWebIsRegister) {
                        actions.push({
                            id: Report.ActionId.NewReport,
                            container: "menu",
                            text: "New",
                            imageClassName: "dxrd-image-newreport",
                            disabled: ko.observable(false),
                            visible: true,
                            hotKey: { ctrlKey: true, keyCode: "N".charCodeAt(0) },
                            clickAction: function () {
                                designerModel.navigateByReports.addTab(ko.observable(new Report.ReportViewModel(Report.SubreportViewModel.defaultReport)), ko.observable(""), "dx-icon-close");
                                designerModel.isDirty(true);
                            }
                        });
                        actions.push({
                            id: Report.ActionId.NewReportViaWizard,
                            container: "menu",
                            text: "New via Wizard",
                            textId: Report.StringId.NewViaWizard,
                            imageClassName: "dxrd-image-new-via-wizard",
                            disabled: ko.observable(false),
                            visible: true,
                            hotKey: { ctrlKey: true, keyCode: "W".charCodeAt(0) },
                            clickAction: function () {
                                reportWizard.removeHandler();
                                reportWizard.oncompleted(function (_, reportWizardModel) {
                                    designerModel.isLoading(true);
                                    Report.ReportWizardService.generateReportFromWizardModel(reportWizardModel, state())
                                        .done(function (result) {
                                        var newReport = new Report.ReportViewModel(JSON.parse(result.reportModel));
                                        newReport.dataSourceRefs = result.dataSourceRefs;
                                        designerModel.navigateByReports.addTab(ko.observable(newReport), ko.observable(""), "dx-icon-close");
                                        designerModel.isDirty(true);
                                        designerModel.isLoading(false);
                                    });
                                });
                                reportWizard.startWithCustomDataSources(designerModel.dataSourceHelper().availableDataSources);
                            }
                        });
                        actions.push({
                            id: Report.ActionId.OpenReport,
                            container: "menu",
                            text: "Open",
                            textId: Report.StringId.Open,
                            imageClassName: "dxrd-image-open",
                            disabled: ko.observable(false),
                            visible: true,
                            hotKey: { ctrlKey: true, keyCode: "O".charCodeAt(0) },
                            clickAction: function () {
                                designerModel.openReportDialog.open();
                            }
                        });
                    }
                    if (reportWizard) {
                        actions.push({
                            id: Report.ActionId.ReportWizard,
                            container: "menu",
                            text: "Design in Report Wizard...",
                            textId: "ReportStringId.Verb_ReportWizard",
                            imageClassName: "dxrd-image-run-wizard",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () {
                                reportWizard.removeHandler();
                                reportWizard.oncompleted(function (_, reportWizardModel) {
                                    designerModel.isLoading(true);
                                    Report.ReportWizardService.generateReportFromWizardModel(reportWizardModel, state())
                                        .done(function (result) {
                                        designerModel.navigateByReports.currentTab().undoEngine.start();
                                        designerModel.isDirty(true);
                                        var newReport = createReportViewModel(JSON.parse(result.reportModel), designerModel.model());
                                        newReport.dataSourceRefs = result.dataSourceRefs;
                                        designerModel.model(newReport);
                                        designerModel.navigateByReports.currentTab.notifySubscribers();
                                        designerModel.navigateByReports.currentTab().undoEngine.end();
                                        designerModel.isLoading(false);
                                    });
                                });
                                reportWizard.start();
                            }
                        });
                    }
                    if (reportPreview) {
                        actions.push({
                            id: Report.ActionId.Preview,
                            text: "Preview",
                            imageClassName: "dxrd-image-preview",
                            disabled: ko.observable(false),
                            visible: ko.pureComputed(function () { return !reportPreview.previewVisible(); }),
                            hotKey: { ctrlKey: true, keyCode: "P".charCodeAt(0) },
                            clickAction: function () {
                                reportPreview.previewVisible(true);
                                reportPreview.initialize(Report.ReportPreviewService.initializePreview(report()));
                            },
                            hasSeparator: true
                        });
                    }
                    if (scriptsEditor) {
                        actions.push({
                            id: Report.ActionId.Scripts,
                            text: "Scripts",
                            imageClassName: "dxrd-image-scripts",
                            disabled: ko.observable(false),
                            visible: ko.pureComputed(function () { return !scriptsEditor.editorVisible(); }),
                            hotKey: { ctrlKey: true, keyCode: "R".charCodeAt(0) },
                            clickAction: function () {
                                scriptsEditor.initialize();
                                scriptsEditor.editorVisible(true);
                            },
                            hasSeparator: true
                        });
                    }
                    if (dataSourceWizard) {
                        actions.push({
                            id: Report.ActionId.AddDataSource,
                            container: "menu",
                            text: "Add Data Source...",
                            imageClassName: "dxrd-image-add-datasource",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () {
                                dataSourceWizard.start();
                            }
                        });
                    }
                    if (sqlDataSourceWizard) {
                        actions.push({
                            id: Report.ActionId.AddSqlDataSource,
                            container: "menu",
                            text: "Add SQL Data Source...",
                            textId: "ASPxReportsStringId.ReportDesigner_MenuItem_AddSqlDataSource",
                            imageClassName: "dxrd-image-add-datasource",
                            disabled: ko.observable(false),
                            visible: false,
                            clickAction: function () {
                                sqlDataSourceWizard.start();
                            }
                        });
                    }
                    if (completeSqlDataSourceWizard) {
                        actions.push({
                            id: Report.ActionId.AddMultiQuerySqlDataSource,
                            container: "menu",
                            text: "Add SQL Data Source...",
                            textId: "ASPxReportsStringId.ReportDesigner_MenuItem_AddSqlDataSource",
                            imageClassName: "dxrd-image-add-datasource",
                            disabled: ko.observable(false),
                            visible: ko.pureComputed(function () { return completeSqlDataSourceWizard.connectionStrings.length > 0; }),
                            clickAction: function () {
                                completeSqlDataSourceWizard.start();
                            }
                        });
                    }
                    actions.push({
                        id: Report.ActionId.Save,
                        container: "menu",
                        text: "Save",
                        textId: Report.StringId.Save,
                        imageClassName: "dxrd-image-save",
                        disabled: ko.observable(false),
                        visible: true,
                        hotKey: { ctrlKey: true, keyCode: "S".charCodeAt(0) },
                        clickAction: function () {
                            if (Report.reportStorageWebIsRegister) {
                                var currentTab = designerModel.navigateByReports.currentTab();
                                if (!currentTab.isDirty()) {
                                    return;
                                }
                                if (!currentTab.url()) {
                                    designerModel.saveReportDialog.open(currentTab);
                                }
                                else {
                                    Report.ReportStorageWeb.setData(currentTab.report().serialize(), currentTab.url())
                                        .done(function (result) {
                                        currentTab.isDirty(false);
                                    }).fail(function () {
                                    });
                                }
                            }
                            else {
                                report().save();
                            }
                        }
                    });
                    if (Report.reportStorageWebIsRegister) {
                        actions.push({
                            id: Report.ActionId.SaveAs,
                            container: "menu",
                            text: "Save As",
                            textId: Report.StringId.SaveAs,
                            imageClassName: "dxrd-image-save",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () {
                                designerModel.saveReportDialog.open(designerModel.navigateByReports.currentTab());
                            }
                        });
                    }
                    actions.push({
                        id: Report.ActionId.Exit,
                        container: "menu",
                        text: "Exit",
                        imageClassName: "dxrd-image-exit",
                        disabled: ko.observable(false),
                        visible: true,
                        clickAction: function () {
                            designerModel.navigateByReports.closeAll().done(function () {
                                exitDesigner();
                            });
                        }
                    });
                    nextCustomizer && nextCustomizer(actions);
                });
            }
            function subreportControlCollector(target, subreportControls) {
                if (subreportControls === void 0) { subreportControls = []; }
                var visitor = function (target) {
                    if (target instanceof Report.XRSubreportViewModel) {
                        subreportControls.push(target);
                        subreportControlCollector(target["reportSource"](), subreportControls);
                    }
                };
                visitor(target);
                DevExpress.Designer.collectionsVisitor(target, function (collection) {
                    collection().forEach(visitor);
                }, ["controls", "bands", "subBands"]);
                return subreportControls;
            }
            Report.subreportControlCollector = subreportControlCollector;
            function onViewportScroll() {
                var $ruler = $(".dxrd-bands-panel-wrapper");
                $ruler.scrollTop($(".dxrd-viewport").scrollTop());
                var $ruler = $(".dxrd-hruler-wrapper");
                $ruler.scrollLeft($(".dxrd-viewport").scrollLeft());
            }
            Report.onViewportScroll = onViewportScroll;
            var FieldListController = (function () {
                function FieldListController(actionProviders, fieldListActionWrapper, dragDropHandler) {
                    if (actionProviders === void 0) { actionProviders = []; }
                    this.hasItems = FieldListController.isList;
                    this.selectedItem = null;
                    this._actionProviders = actionProviders;
                    this._fieldListActionWrapper = fieldListActionWrapper;
                    this.dragDropHandler = dragDropHandler;
                }
                FieldListController.prototype.itemsFilter = function (item) {
                    return item["isCalculated"] === true || item.specifics !== "none";
                };
                FieldListController.isList = function (item) {
                    return item["isCalculated"] ? false : item.specifics === "List" || item.specifics === "ListSource" || item.isList === true;
                };
                FieldListController.prototype.select = function (item) {
                    this.selectedItem && this.selectedItem.isSelected(false);
                    this.selectedItem = item;
                    item.isSelected(true);
                };
                FieldListController.prototype.canSelect = function (item) {
                    return true;
                };
                FieldListController.prototype.getActions = function (item) {
                    var _this = this;
                    var result = [];
                    (this._actionProviders || []).forEach(function (actionsProvider) {
                        var actions = actionsProvider.getActions(item);
                        if (_this._fieldListActionWrapper) {
                            _this._fieldListActionWrapper(actions);
                        }
                        result.push.apply(result, actions);
                    });
                    return result;
                };
                FieldListController.prototype.isDraggable = function (item) {
                    return true;
                };
                return FieldListController;
            })();
            Report.FieldListController = FieldListController;
            var DataSourceItemsExtender = (function () {
                function DataSourceItemsExtender(dataSources) {
                    this._dataSources = dataSources;
                }
                DataSourceItemsExtender.prototype.beforeItemsFilled = function (request, items) {
                    return false;
                };
                DataSourceItemsExtender.prototype.afterItemsFilled = function (request, items) {
                    if (!(this._dataSources && this._dataSources.peek()))
                        return;
                    if (!request.fullPath) {
                        this._dataSources.peek().forEach(function (dataSourceItem) {
                            var dataMember = Designer.getFirstItemByPropertyValue(items, "displayName", dataSourceItem.name);
                            if (!(dataMember && dataSourceItem.data))
                                return;
                            if (dataSourceItem.data.tableInfoCollection) {
                                dataMember["contenttemplate"] = "dxrd-datasource-item";
                                dataMember["tableInfoItems"] = dataSourceItem.data.tableInfoCollection;
                            }
                            else if (dataSourceItem.isSqlDataSource) {
                                dataMember["canAddSqlQuery"] = true;
                            }
                            dataMember["canRemove"] = true;
                        });
                    }
                    else if (request.fullPath === request.id || request.fullPath === request.ref) {
                        var dataSourcesInfo = this._dataSources.peek().filter(function (dataSourceItem) {
                            return !!dataSourceItem.id && dataSourceItem.id === request.id || !!dataSourceItem.ref && dataSourceItem.ref === request.ref;
                        })[0];
                        if (!dataSourcesInfo.isSqlDataSource)
                            return;
                        items.forEach(function (dataMemberItem) { dataMemberItem["canEditQuery"] = dataMemberItem.isList; });
                    }
                };
                return DataSourceItemsExtender;
            })();
            Report.DataSourceItemsExtender = DataSourceItemsExtender;
            function wrapFieldsCallback(fieldsCallback, dataSources, state, cache) {
                return function (request) {
                    if (cache) {
                        if (cache[request.fullPath])
                            return cache[request.fullPath];
                        patchRequest(request, dataSources.peek(), state());
                        return cache[request.fullPath] = fieldsCallback(request);
                    }
                    else {
                        patchRequest(request, dataSources.peek(), state());
                        return fieldsCallback(request);
                    }
                };
            }
            Report.wrapFieldsCallback = wrapFieldsCallback;
            function patchRequest(request, dataSources, state) {
                request.state = state;
                var dataSource = Designer.findFirstItemMatchesCondition(dataSources, function (ds) { return (request.id && ds.id === request.id) || (request.ref && ds.ref === request.ref); });
                if (dataSource && dataSource.data) {
                    request.dataSource = JSON.stringify(new DevExpress.JS.Utils.ModelSerializer().serialize(dataSource.data));
                }
            }
            (function (GraphicsUnit) {
                GraphicsUnit[GraphicsUnit["World"] = 0] = "World";
                GraphicsUnit[GraphicsUnit["Display"] = 1] = "Display";
                GraphicsUnit[GraphicsUnit["Pixel"] = 2] = "Pixel";
                GraphicsUnit[GraphicsUnit["Point"] = 3] = "Point";
                GraphicsUnit[GraphicsUnit["Inch"] = 4] = "Inch";
                GraphicsUnit[GraphicsUnit["Document"] = 5] = "Document";
                GraphicsUnit[GraphicsUnit["Millimeter"] = 6] = "Millimeter";
            })(Report.GraphicsUnit || (Report.GraphicsUnit = {}));
            var GraphicsUnit = Report.GraphicsUnit;
            function getFullPath(path, dataMember) {
                return path + (dataMember ? "." + dataMember : "");
            }
            Report.getFullPath = getFullPath;
            var RequestReportModel = (function () {
                function RequestReportModel(reportWizardModel) {
                    if (reportWizardModel.reportType === DevExpress.Designer.Report.Wizard.ReportType.Label) {
                        this.CustomLabelInformation = {
                            Height: reportWizardModel.labelDetails.height,
                            HorizontalPitch: reportWizardModel.labelDetails.hPitch,
                            LeftMargin: reportWizardModel.labelDetails.leftMargin,
                            RightMargin: reportWizardModel.labelDetails.rightMargin,
                            PaperKindDataId: reportWizardModel.labelDetails.paperKindId,
                            TopMargin: reportWizardModel.labelDetails.topMargin,
                            BottomMargin: reportWizardModel.labelDetails.bottomMargin,
                            Unit: reportWizardModel.labelDetails.unit === GraphicsUnit.Inch ? DevExpress.Designer.Report.GraphicsUnit.Inch : DevExpress.Designer.Report.GraphicsUnit.Millimeter,
                            VerticalPitch: reportWizardModel.labelDetails.vPitch,
                            Width: reportWizardModel.labelDetails.width
                        };
                        this.LabelProductId = reportWizardModel.labelDetails.productId;
                        this.LabelProductDetailId = reportWizardModel.labelDetails.id;
                    }
                    else if (reportWizardModel.reportType === DevExpress.Designer.Report.Wizard.ReportType.Datatbound) {
                        this.AdjustFieldWidth = reportWizardModel.fitFieldsToPage;
                        this.Columns = reportWizardModel.fields().map(function (value) { return value.name; });
                        this.ColumnInfo = reportWizardModel.fields().map(function (value) {
                            return {
                                Name: value.name,
                                DisplayName: value.displayName,
                                TypeSpecifics: 0
                            };
                        });
                        this.DataMemberName = {
                            DisplayName: reportWizardModel.dataMember().displayName,
                            Name: reportWizardModel.dataMember().name,
                            DataMemberType: 0
                        };
                        if (reportWizardModel.dataMember().name) {
                            var index = reportWizardModel.dataMemberPath().indexOf('.');
                            this.DataMemberName.Name = index > 0 ? reportWizardModel.dataMemberPath().substr(index + 1) : reportWizardModel.dataMemberPath();
                        }
                        this.DataSourceName = null;
                        this.GroupingLevels = reportWizardModel.groups;
                        this.IgnoreNullValuesForSummary = reportWizardModel.ignoreNullValuesForSummary;
                        this.Layout = reportWizardModel.layout;
                        this.Portrait = reportWizardModel.portrait;
                        this.ReportStyleId = reportWizardModel.style;
                        this.ReportTitle = reportWizardModel.reportTitle;
                        this.SummaryOptions = reportWizardModel.summaryOptions.map(function (item) {
                            return {
                                ColumnName: item.columnName,
                                Flags: item.flags
                            };
                        });
                    }
                    this.ReportType = reportWizardModel.reportType;
                }
                return RequestReportModel;
            })();
            Report.RequestReportModel = RequestReportModel;
            function createReportWizard(dsHelper, data, navigationTab, fieldLists, isReportLoading, isReportDirty, state) {
                var dataSources = ko.pureComputed(function () { return data.isReportServer ? dsHelper().availableDataSources : dsHelper().mergedDataSources(); });
                var fieldsCallback = function (request, dataSource) {
                    patchRequest(request, [dataSource], state());
                    return fieldLists(request);
                };
                var wizard = new Report.Wizard.ReportWizard(dataSources, fieldsCallback, data.isReportServer);
                wizard.oncompleted(function (_, reportWizardModel) {
                    isReportLoading(true);
                    Report.ReportWizardService.generateReportFromWizardModel(reportWizardModel, state())
                        .done(function (result) {
                        var newReport = new Report.ReportViewModel(JSON.parse(result.reportModel));
                        newReport.dataSourceRefs = result.dataSourceRefs;
                        navigationTab().undoEngine.start();
                        navigationTab().report(newReport);
                        navigationTab().undoEngine.end();
                        isReportDirty(true);
                        isReportLoading(false);
                    });
                });
                return wizard;
            }
            Report.createReportWizard = createReportWizard;
            function createDataSourceWizard(reportModel, data, fieldLists, undoEngine) {
                var dataSources = ko.pureComputed(function () { return reportModel().dsHelperProvider().availableDataSources; });
                var fieldsCallback = function (request, dataSource) {
                    patchRequest(request, [dataSource], function () { return data.state; });
                    return fieldLists(request);
                };
                var wizard = new Report.Wizard.DataSourceWizard(dataSources, fieldsCallback);
                wizard.oncompleted(function (_, reportWizardModel) {
                    Report.ReportWizardService.createDataSource(reportWizardModel, data.state)
                        .done(function (result) {
                        result.dataSource.data = JSON.parse(result.dataSource.data);
                        addDataSourceToReport(reportModel().dsHelperProvider(), reportModel().dataSource, undoEngine, result.dataSource);
                    });
                });
                return wizard;
            }
            Report.createDataSourceWizard = createDataSourceWizard;
            function createReportViewModel(reportModel, oldReport) {
                var report = new Report.ReportViewModel(reportModel);
                if (oldReport) {
                    oldReport.styles().forEach(function (value) {
                        var containsStyle = report.styles().some(function (style) { return style.name() === value.name(); });
                        if (!containsStyle) {
                            report.styles.push(value);
                        }
                    });
                }
                return report;
            }
            Report.createReportViewModel = createReportViewModel;
            function addDataSourceToReport(dataSourceHelper, reportDataSource, undoEngine, dataSource) {
                undoEngine().start();
                var result = dataSourceHelper.addDataSource(dataSource);
                if (!reportDataSource())
                    reportDataSource(result);
                undoEngine().end();
            }
            Report.addDataSourceToReport = addDataSourceToReport;
            function removeDataSourceFromReport(dataSourceHelper, reportDataSource, undoEngine, dataSource) {
                undoEngine().start();
                dataSourceHelper.removeDataSource(dataSource);
                if (reportDataSource() === dataSource.data) {
                    reportDataSource(dataSourceHelper.findDataSourceInfoByRef("none").data);
                }
                undoEngine().end();
            }
            Report.removeDataSourceFromReport = removeDataSourceFromReport;
            var orig_optionValuesEqual = DevExpress.ui.dxSelectBox.prototype["_optionValuesEqual"];
            DevExpress.ui.dxSelectBox["redefine"]({
                _optionValuesEqual: function (optionName, oldValue, newValue) {
                    if (optionName === "value" && (oldValue instanceof Designer.ElementViewModel) && (newValue instanceof Designer.ElementViewModel)) {
                        return oldValue === newValue;
                    }
                    return orig_optionValuesEqual.apply(this, arguments);
                }
            });
            var ReportElementActions = (function (_super) {
                __extends(ReportElementActions, _super);
                function ReportElementActions(surfaceContext, selection) {
                    _super.call(this, surfaceContext, selection);
                }
                ReportElementActions.prototype.getActions = function (context) {
                    if (context && !(context instanceof Report.ReportViewModel || context instanceof Report.BandViewModel) && (context instanceof Report.ReportElementViewModel || context.controlType === "multiselect")) {
                        return _super.prototype.getActions.call(this, context);
                    }
                    return [];
                };
                return ReportElementActions;
            })(Report.ElementActions);
            function createReportDesigner(element, data, callbacks, localization, knownEnums, designerHandlerUri, previewHandlerUri, rtl, applyBindings) {
                if (applyBindings === void 0) { applyBindings = true; }
                DevExpress["config"]({ rtlEnabled: !!rtl });
                Report.reportStorageWebIsRegister = data.reportStorageWebIsRegister || Report.reportStorageWebIsRegister;
                Report.HandlerUri = designerHandlerUri || Report.HandlerUri;
                callbacks.fieldLists = callbacks.fieldLists || Report.ReportDataSourceService.fieldListCallback;
                if (localization) {
                    DevExpress.JS.Localization.addCultureInfo({
                        messages: localization
                    });
                }
                registerControls();
                var designerModel = {};
                for (var name in data.infoDefaults) {
                    if (DevExpress.Designer.Report[name]) {
                        DevExpress.Designer.Report[name].defaultVal = data.infoDefaults[name];
                    }
                }
                ;
                if (data.formatStringData) {
                    data.formatStringData.standardPatterns && Object.keys(data.formatStringData.standardPatterns).forEach(function (propName) {
                        if (!DevExpress.JS.Widgets.formatStringStandardPatterns[propName])
                            DevExpress.JS.Widgets.formatStringStandardPatterns[propName] = data.formatStringData.standardPatterns[propName];
                        else
                            DevExpress.JS.Widgets.formatStringStandardPatterns[propName].patterns = data.formatStringData.standardPatterns[propName].patterns;
                    });
                    data.formatStringData.customPatterns && Object.keys(data.formatStringData.customPatterns).forEach(function (propName) {
                        Report.formatStringEditorCustomSet[propName] = data.formatStringData.customPatterns[propName];
                    });
                }
                var model = ko.observable(), designMode = ko.observable(true), surface = ko.observable(), parameters = ko.observable(), dataSourceHelper = ko.observable(), calculatedFieldsSource = ko.observable(), fieldListProvider = ko.observable(), dataBindingsProvider = ko.observable(), dataSourceWizard = null, sqlDataSourceWizard = null, completeSqlDataSourceWizard = null, sqlDataSourceEditor = null, selectedPath = ko.observable(null), fieldListDataSources = ko.observableArray([]), treeListOptions = ko.observable(), displayNameProvider = ko.observable(), fieldListCache = {}, state = function () {
                    var extensions = model.peek() && model.peek().extensions.peek() || [];
                    if (extensions.length > 0) {
                        return {
                            reportExtensions: model().extensions().map(function (item) {
                                return {
                                    "Key": item.key(),
                                    "Value": item.value()
                                };
                            })
                        };
                    }
                    return data.state;
                };
                var subscriptions = [];
                var updateFieldListDataSources = function (usedDataSources) {
                    for (var prop in fieldListCache) {
                        if (fieldListCache.hasOwnProperty(prop))
                            delete fieldListCache[prop];
                    }
                    var dataSourcesArray = [].concat(usedDataSources);
                    dataSourcesArray.splice(-1, 0, { ref: "parameters", name: "Parameters", specifics: "parameters", data: parameters().parameters });
                    fieldListDataSources(dataSourcesArray);
                };
                var getSubreportUrls = function () {
                    Report.ReportStorageWeb.getUrls(data.subreports).done(function (result) {
                        designerModel.reportUrls(result);
                    });
                };
                var init = function (model) {
                    model.getSubreportUrls = getSubreportUrls;
                    subscriptions.forEach(function (subscribe) { subscribe && subscribe.dispose(); });
                    subscriptions = [];
                    if (!model.surface)
                        model.surface = new Report.ReportSurface(model);
                    surface(model.surface),
                        selectedPath(null);
                    model.parameterHelper.initialize(knownEnums, callbacks);
                    var parametersViewModel = new Report.ParametersViewModel(model);
                    parameters(parametersViewModel);
                    var dsHelper = model["dataSourceHelper"]();
                    if (!dsHelper) {
                        var dirty = designerModel.isDirty && designerModel.isDirty();
                        dsHelper = new Report.DataSourceHelper(model.objectStorage, model.dataSourceRefs, data.availableDataSources);
                        model["dataSourceHelper"](dsHelper);
                        if (!dirty) {
                            designerModel.undoEngine && designerModel.undoEngine().clearHistory();
                        }
                    }
                    updateFieldListDataSources(dsHelper.usedDataSources());
                    subscriptions.push(dsHelper.usedDataSources.subscribe(updateFieldListDataSources));
                    dataSourceHelper(dsHelper);
                    var calcFieldsSource = new Report.CalculatedFieldsSource(model.calculatedFields, model.dataSource, dsHelper);
                    subscriptions.push(calculatedFieldsSource());
                    calculatedFieldsSource(calcFieldsSource);
                    var chartFieldListExtender = new Report.ChartFieldListExtender();
                    designerModel.fieldListItemsExtenders = [parametersViewModel, new DataSourceItemsExtender(dsHelper.usedDataSources), calcFieldsSource, chartFieldListExtender];
                    var wrappedCallback = wrapFieldsCallback(callbacks.fieldLists, fieldListDataSources, state, fieldListCache);
                    fieldListProvider(new Designer.FieldListProvider(wrappedCallback, fieldListDataSources, designerModel.fieldListItemsExtenders));
                    dataBindingsProvider(new Designer.FieldListProvider(wrappedCallback, fieldListDataSources, [parametersViewModel, calcFieldsSource, chartFieldListExtender]));
                    if (displayNameProvider.peek())
                        displayNameProvider.peek().dispose();
                    displayNameProvider(new Report.DisplayNameProvider(fieldListProvider(), dataSourceHelper(), model.dataSource));
                    treeListOptions({
                        itemsProvider: fieldListProvider(),
                        selectedPath: selectedPath,
                        treeListController: new FieldListController(designerModel.fieldListActionProviders, Designer.createActionWrappingFunction("WrapForFieldList", function (model, handler) {
                            designerModel.undoEngine().start();
                            var result = handler(model);
                            designerModel.undoEngine().end();
                            if (result && result.name) {
                                selectedPath(model.path + "." + ko.unwrap(result.name));
                            }
                        }), designerModel.fieldDragHandler)
                    });
                };
                var reportViewModel = ko.observable(new Report.ReportViewModel(data.report()));
                data.report.subscribe(function (newValue) {
                    var newModel = new Report.ReportViewModel(newValue);
                    var getDataSourceRefs = function (key) {
                        var dataSourceRefs = data.dataSourceRefs.filter(function (ds) { return ds.Key === key; })[0];
                        return dataSourceRefs && dataSourceRefs.Value || [];
                    };
                    newModel.dataSourceRefs = getDataSourceRefs(newModel.key());
                    var subreportControls = subreportControlCollector(newModel);
                    subreportControls.forEach(function (subreport) {
                        if (subreport.reportSource()) {
                            subreport.reportSource().dataSourceRefs = getDataSourceRefs(subreport.key());
                        }
                    });
                    reportViewModel(newModel);
                    designerModel.undoEngine && designerModel.undoEngine().clearHistory();
                });
                var navigation = new Report.NavigateByReports(reportViewModel, data.reportUrl);
                model = ko.computed({
                    read: function () {
                        return navigation.currentTab().report();
                    },
                    write: function (newVal) {
                        navigation.currentTab().report(newVal);
                    }
                });
                init(model());
                var undoEngine = ko.computed(function () {
                    return navigation.currentTab().undoEngine;
                });
                var selection = new Designer.SurfaceSelection();
                var controlHelper = new Designer.DesignControlsHelper(model, [{
                        added: function (control) { },
                        deleted: function (control) { control.surface == selection.focused() && selection.focused(Designer.findNextSelection(control.surface)); }
                    }], ["controls", "bands", "subBands", "crossBandControls", "rows", "cells", "fields", "styles", "formattingRuleSheet"]), designerModel = DevExpress.Designer.createDesigner(model, surface, Report.controlsFactory, Report.groups, [], undefined, rtl, selection, controlHelper, undoEngine);
                designerModel.rootStyle = "dxrd-designer";
                designerModel.toolboxDragHandler = new Report.ReportToolboxDragDropHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent, Report.controlsFactory);
                designerModel.isDirty = ko.computed({
                    read: function () {
                        return navigation.currentTab().isDirty();
                    },
                    write: function (newVal) {
                        navigation.currentTab().isDirty(newVal);
                    }
                });
                designerModel.reportUrls = ko.observableArray([]);
                navigation.init(designerModel);
                getSubreportUrls();
                model.subscribe(function (newModel) {
                    init(newModel);
                });
                designerModel.navigateByReports = navigation;
                designerModel.contextActionProviders.push(new ReportElementActions(surface, designerModel.selection), new Report.ElementsGroupActions(surface, designerModel.selection), new Report.ReportActions(), new Report.TableRowActions(designerModel.selection), new Report.TableCellActions(designerModel.selection), new Report.PivotGridActions());
                designerModel.calculatedFieldsSource = calculatedFieldsSource;
                var popoverVisible = ko.observable(false), fieldListModel = {
                    treeListOptions: treeListOptions,
                    popoverVisible: popoverVisible,
                    addDataSourceBtnVisible: ko.pureComputed(function () { return dataSourceHelper().availableDataSources.length > 0; }),
                    showPopover: function () {
                        popoverVisible(true);
                    },
                    dataSourceListItems: function () {
                        if (data.isReportServer) {
                            return [{ name: "New Data Source...", id: "addNew" }];
                        }
                        return dataSourceHelper().availableDataSources;
                    },
                    itemClickAction: function (e) {
                        popoverVisible(false);
                        if (e.itemData.id === "addNew") {
                            dataSourceWizard.start();
                        }
                        else {
                            designerModel.undoEngine().start();
                            dataSourceHelper().dataSourceValue(model().dataSource)(e.itemData.name);
                            designerModel.undoEngine().end();
                        }
                    }
                };
                designerModel.reportPreviewModel = DevExpress.Report.Preview.createPreview(element, callbacks, localization, { knownEnums: knownEnums }, previewHandlerUri, false, rtl);
                designerModel.reportPreviewModel.reportPreview.previewVisible.subscribe(function (newValue) {
                    designMode(!newValue);
                });
                designerModel.fieldListActionProviders = [calculatedFieldsSource(), parameters()];
                subscribeOnActionsProvider(designerModel, calculatedFieldsSource, Report.CalculatedFieldsSource);
                subscribeOnActionsProvider(designerModel, parameters, Report.ParametersViewModel);
                if (!data.isReportServer) {
                    sqlDataSourceWizard = new Report.Wizard.SqlDataSourceWizard(data.connectionStrings, { selectStatement: Designer.QueryBuilder.selectStatementCallback }, data.disableCustomSql, rtl);
                    sqlDataSourceEditor = new Report.SqlDataSourceEditor(dataSourceHelper, sqlDataSourceWizard, model, designerModel["undoEngine"]);
                    var multipleQueriesWizardCallbacks = {
                        selectStatement: Designer.QueryBuilder.selectStatementCallback,
                        sqlDataSourceResultSchema: Report.ReportDataSourceService.getSqlDataSourceResultSchema,
                        finishCallback: function (data) {
                            return sqlDataSourceEditor.createMultipleQueriesSqlDataSource(data.dataSource);
                        }
                    };
                    completeSqlDataSourceWizard = new Report.Wizard.CompleteSqlDataSourceWizard(data.connectionStrings, multipleQueriesWizardCallbacks, data.disableCustomSql, rtl);
                    designerModel.fieldListActionProviders.push(sqlDataSourceEditor);
                }
                else {
                    dataSourceWizard = createDataSourceWizard(model, data, callbacks.fieldLists, designerModel["undoEngine"]);
                }
                designerModel.wizard = createReportWizard(dataSourceHelper, data, navigation.currentTab, callbacks.fieldLists, designerModel.isLoading, designerModel.isDirty, state);
                designerModel.dataSourceWizard = dataSourceWizard;
                designerModel.sqlDataSourceWizard = sqlDataSourceWizard;
                designerModel.completeSqlDataSourceWizard = completeSqlDataSourceWizard;
                designerModel.addOns = ko.observableArray([
                    { templateName: "dxrd-report-preview", model: designerModel.reportPreviewModel },
                    { templateName: "dxrd-wizard", model: designerModel.wizard },
                    { templateName: "dxrd-wizard", model: designerModel.dataSourceWizard },
                    { templateName: "dxrd-wizard", model: designerModel.sqlDataSourceWizard },
                    { templateName: "dxrd-wizard", model: designerModel.completeSqlDataSourceWizard }
                ]);
                if (sqlDataSourceEditor)
                    designerModel.addOns.push({ templateName: "dxrd-masterDetail-editor", model: sqlDataSourceEditor.relationsEditor });
                if (window["ace"] && !data.isScriptsDisabled) {
                    designerModel.scriptsEditor = new Report.ScriptsEditor(model, designerModel.controlsHelper.allControls);
                    designerModel.scriptsEditor.editorVisible.subscribe(function (newValue) {
                        if (newValue) {
                            var focusedControl = designerModel.selection.focused().getControlModel();
                            designerModel.scriptsEditor.selectedControl(!!focusedControl.scripts ? focusedControl : focusedControl.parentModel());
                            setTimeout(function () {
                                designerModel.scriptsEditor.editorContainer().resize();
                            }, 1);
                        }
                        designMode(!newValue);
                    });
                    designerModel.addOns.push({ templateName: "dxrd-scripts", model: designerModel.scriptsEditor });
                    designerModel.events = ko.pureComputed(function () { return designerModel.scriptsEditor.allFunctionNames; });
                    designerModel.gotoEvent = function (functionName, eventName, model) {
                        var editor = designerModel.scriptsEditor;
                        editor.editorVisible(true);
                        editor.ensureEvent(eventName.substring(2), functionName, model);
                    };
                }
                designerModel.saveReportDialog = new Report.SaveReportDialog(designerModel.reportUrls);
                designerModel.saveReportDialogLight = new Report.SaveReportDialogLight(designerModel.saveReportDialog);
                navigation.save = function (tab) {
                    designerModel.saveReportDialogLight.open(tab);
                };
                designerModel.openReportDialog = new Report.OpenReportDialog(designerModel.reportUrls, navigation);
                designerModel.styles = ko.pureComputed(function () { return model().styles; });
                designerModel.formattingRuleSheet = ko.pureComputed(function () { return model().formattingRuleSheet; });
                designerModel.tabPanel.tabs.push(new Designer.TabInfo("Fields", "dxrd-fieldlistwrapper", fieldListModel, "fieldlist"));
                var reportExplorer = new Report.ReportExplorerModel(model, designerModel.editableObject, function () {
                    designerModel.tabPanel.selectTab({ model: designerModel.tabPanel.tabs[0] });
                }, new Report.ReportExplorerDragDropHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.dragHelperContent), designerModel.selection);
                designerModel.tabPanel.tabs.push(new Designer.TabInfo("Report Explorer", "dxrd-reportexplorerwrapper", reportExplorer, "reportexplorer"));
                designerModel.designMode = designMode;
                designerModel.displayNameProvider = displayNameProvider;
                designerModel.getDisplayNameByPath = function (path, value) { return displayNameProvider().getDisplayNameByPath(path, value); };
                designerModel.fieldListProvider = fieldListProvider;
                designerModel.dataBindingsProvider = dataBindingsProvider;
                designerModel.fieldListDataSources = fieldListDataSources;
                designerModel.dataSourceHelper = dataSourceHelper;
                designerModel.selectedPath = selectedPath;
                designerModel.controls = getControls(designerModel.controlsHelper.allControls, function (item) { return !(item instanceof Report.BandViewModel || item instanceof Report.ReportViewModel); });
                var bands = getControls(designerModel.controlsHelper.allControls, function (item) {
                    return item instanceof Report.BandViewModel;
                });
                designerModel.bands = function (filter, IsNoneNeaded) {
                    return getControls(designerModel.controlsHelper.allControls, function (item) {
                        return item instanceof Report.BandViewModel && (filter ? filter(item) : true);
                    }, IsNoneNeaded);
                };
                designerModel.chartDataSources = ko.computed(function () {
                    var pivotGrids = designerModel.controlsHelper.allControls().filter(function (item) { return item instanceof Report.XRPivotGridViewModel; }).map(function (item) { return { displayName: item.name, value: item }; }), usedDataSources = dataSourceHelper().usedDataSources().map(function (item) { return { displayName: item.name, value: item.data }; }), result = [].concat(pivotGrids, usedDataSources);
                    return result;
                });
                designerModel.getControls = function (target) {
                    return ko.pureComputed(function () {
                        return getControls(designerModel.controlsHelper.getControls(ko.unwrap(target)), function (item) {
                            return !(item instanceof Report.BandViewModel || item instanceof Report.ReportViewModel);
                        });
                    });
                };
                var designerShortcutsEnabled = ko.computed(function () {
                    var isDesignMode = designMode();
                    var isDataSourceWizardVisible = designerModel.dataSourceWizard && designerModel.dataSourceWizard.isVisible();
                    var isWizardVisible = designerModel.wizard && designerModel.wizard.isVisible();
                    var isSqlDataSourceVisible = designerModel.sqlDataSourceWizard && designerModel.sqlDataSourceWizard.isVisible();
                    var isCompleteSqlDataSourceVisible = designerModel.completeSqlDataSourceWizard && designerModel.completeSqlDataSourceWizard.isVisible();
                    return isDesignMode && !isWizardVisible && !isSqlDataSourceVisible && !isCompleteSqlDataSourceVisible && !isDataSourceWizardVisible;
                });
                designerModel.actionLists = new Designer.ActionLists(surface, designerModel.selection, designerModel.undoEngine, customizeDesignerActions(designerModel, callbacks.customizeActions, callbacks.exitDesigner, state), designerShortcutsEnabled, Report.reportCopyPasteStrategy);
                designerModel.fieldDragHandler = new Report.FieldListDragDropHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
                if (data.isScriptsDisabled) {
                    var controlTypes = Object.keys(Report.controlsFactory.controlsMap);
                    for (var index = 0; index < controlTypes.length; index++) {
                        ["Scripts", "Script References", "Script Language"].forEach(function (propertyDisplayName) {
                            var propertyInfo = Report.controlsFactory.getPropertyInfo(controlTypes[index], propertyDisplayName);
                            propertyInfo && (propertyInfo.visible = false);
                        });
                    }
                }
                Designer.CombinedObject.skipPropertyNames = ["name", "bookmarkParent"];
                designerModel.selection.focused(surface());
                surface.subscribe(function (newValue) {
                    designerModel.selection.focused(newValue);
                });
                designerModel.parts.push({ templateName: "dxrd-navigation-panel-template", model: designerModel.navigateByReports }, { templateName: "dxrd-report-dialog-template", model: designerModel.saveReportDialog }, { templateName: "dxrd-report-dialog-template", model: designerModel.saveReportDialogLight }, { templateName: "dxrd-report-dialog-template", model: designerModel.openReportDialog });
                if (applyBindings) {
                    $(element).children().remove();
                    ko.applyBindings(designerModel, element);
                }
                designerModel.editableObject.subscribe(function () {
                    var $scrollView = $(".dxrd-designer .dxrd-properties-wrapper").find(".dx-scrollview");
                    var scrollViewInstance = $scrollView.data("dxScrollView") && $scrollView.dxScrollView("instance");
                    scrollViewInstance && scrollViewInstance["scrollTo"] && scrollViewInstance["scrollTo"](0);
                });
                var updateSurfaceContentSize_ = Designer.updateSurfaceContentSize(designerModel.surfaceSize, element, rtl);
                $(window).bind("resize", function () {
                    updateSurfaceContentSize_();
                });
                designerModel.tabPanel.width.subscribe(function () {
                    updateSurfaceContentSize_();
                });
                designerModel.updateSurfaceSize = function () {
                    updateSurfaceContentSize_();
                };
                designerModel.navigateByReports.height.subscribe(function () {
                    updateSurfaceContentSize_();
                });
                designerModel.updateSurfaceSize();
                return designerModel;
            }
            Report.createReportDesigner = createReportDesigner;
            function subscribeOnActionsProvider(designerModel, actionsProvider, providerType) {
                actionsProvider.subscribe(function () {
                    var oldProvider = designerModel.fieldListActionProviders.filter(function (provider) { return provider instanceof providerType; })[0];
                    if (oldProvider) {
                        var index = designerModel.fieldListActionProviders.indexOf(oldProvider);
                        designerModel.fieldListActionProviders.splice(index, 1, actionsProvider());
                    }
                });
            }
            function registerControls() {
                Report.controlsFactory.registerControl("Unknown", {
                    info: Report.unknownSerializationsInfo,
                    type: Report.ControlViewModel,
                    defaultVal: {
                        "@SizeF": "100,23"
                    },
                    nonToolboxItem: true,
                    surfaceType: Report.ControlSurface
                });
                Report.controlsFactory.registerControl("XRLabel", {
                    info: Report.labelSerializationsInfo,
                    toolboxIndex: 0,
                    defaultVal: {
                        "@Padding": "2,2,0,0,100",
                        "@SizeF": "100,23"
                    },
                    surfaceType: Report.ControlSurface,
                    type: Report.ControlViewModel,
                    popularProperties: Report.popularPropertiesLabel
                });
                Report.controlsFactory.registerControl("XRCheckBox", {
                    info: Report.checkboxSerializationsInfo,
                    toolboxIndex: 1,
                    type: Report.CheckBoxViewModel,
                    surfaceType: Report.XRCheckboxSurface,
                    defaultVal: {
                        "@SizeF": "100,23"
                    },
                    popularProperties: Report.popularPropertiesCheckBox
                });
                Report.controlsFactory.registerControl("XRRichText", {
                    info: Report.richTextSerializationsInfo,
                    toolboxIndex: 2,
                    defaultVal: {
                        "@SizeF": "100,23",
                    },
                    surfaceType: Report.XRRichSurface,
                    type: Report.XRRichViewModel,
                    popularProperties: Report.popularPropertiesRichText
                });
                Report.controlsFactory.registerControl("XRPictureBox", {
                    info: Report.pictureBoxSerializationsInfo,
                    toolboxIndex: 3,
                    defaultVal: {
                        "@SizeF": "100,100",
                    },
                    type: Report.XRPictureBoxViewModel,
                    surfaceType: Report.PictureBoxSurface,
                    popularProperties: Report.popularPropertiesPicture
                });
                Report.controlsFactory.registerControl("XRPanel", {
                    info: Report.panelSerializationsInfo,
                    toolboxIndex: 4,
                    defaultVal: {
                        "@SizeF": "300,75",
                    },
                    surfaceType: Report.ControlSurface,
                    type: Report.ControlViewModel,
                    isContainer: true,
                });
                Report.controlsFactory.registerControl("XRTable", {
                    info: Report.tableSerializationsInfo,
                    type: Report.TableControlViewModel,
                    toolboxIndex: 5,
                    defaultVal: {
                        "@SizeF": "300,25",
                        "Rows": {
                            "Item1": {
                                "@ControlType": "XRTableRow",
                                "@Weight": "1",
                                "Cells": {
                                    "Item1": {
                                        "@ControlType": "XRTableCell",
                                        "@Weight": "1"
                                    },
                                    "Item2": {
                                        "@ControlType": "XRTableCell",
                                        "@Weight": "1"
                                    },
                                    "Item3": {
                                        "@ControlType": "XRTableCell",
                                        "@Weight": "1"
                                    }
                                }
                            }
                        }
                    },
                    surfaceType: Report.TableSurface,
                    popularProperties: Report.popularPropertiesTable,
                    isContainer: true
                });
                Report.controlsFactory.registerControl("XRCharacterComb", {
                    info: Report.characterCombSerializationsInfo,
                    toolboxIndex: 6,
                    defaultVal: {
                        "@SizeF": "200,80"
                    },
                    surfaceType: Report.XRCharacterCombSurface,
                    type: Report.XRCharacterComb,
                    popularProperties: Report.popularPropertiesLabel
                });
                Report.controlsFactory.registerControl("XRLine", {
                    info: Report.lineSerializationsInfo,
                    toolboxIndex: 7,
                    type: Report.ControlViewModel,
                    surfaceType: Report.XRLineSurface,
                    defaultVal: {
                        "@SizeF": "100,23",
                    },
                    popularProperties: Report.popularPropertiesLine
                });
                Report.controlsFactory.registerControl("XRShape", {
                    info: Report.shapeSerializationsInfo,
                    toolboxIndex: 8,
                    defaultVal: {
                        "@SizeF": "100,23"
                    },
                    type: Report.ShapeViewModel,
                    surfaceType: Report.ShapeControlSurface,
                    popularProperties: Report.popularPropertiesShape
                });
                Report.controlsFactory.registerControl("XRBarCode", {
                    info: Report.barcodeSerializationsInfo,
                    toolboxIndex: 9,
                    defaultVal: {
                        "@SizeF": "100,23",
                        "@Padding": "10,10,0,0,100",
                        "Symbology": {
                            "@Name": "Code128"
                        },
                        "@Text": ""
                    },
                    surfaceType: Report.XRBarcodeSurface,
                    type: Report.XRBarCodeViewModel,
                    popularProperties: Report.popularPropertiesBarCode
                });
                Report.controlsFactory.registerControl("XRZipCode", {
                    info: Report.zipCodeSerializationInfo,
                    type: Report.ControlViewModel,
                    surfaceType: Report.ZipCodeSurface,
                    toolboxIndex: 10,
                    defaultVal: {
                        "@SizeF": "100,23"
                    },
                    popularProperties: Report.popularPropertiesZipCode
                });
                Report.controlsFactory.registerControl("XRChart", {
                    info: Report.xrChartSerializationInfo,
                    toolboxIndex: 11,
                    defaultVal: {
                        "@SizeF": "400,300",
                        "Chart": {
                            "Diagram": {
                                "@TypeNameSerializable": "XYDiagram",
                                "AxisY": {
                                    "@VisibleInPanesSerializable": "-1"
                                },
                                "AxisX": {
                                    "@VisibleInPanesSerializable": "-1"
                                }
                            },
                            "DataContainer": {
                                "SeriesSerializable": {
                                    "Item1": {
                                        "@Name": "Series 1"
                                    }
                                }
                            }
                        }
                    },
                    type: Report.XRChartViewModel,
                    surfaceType: Report.ChartSurface,
                    popularProperties: ["name"]
                });
                Report.controlsFactory.registerControl("XRGauge", {
                    info: Report.xrGaugeSerializationInfo,
                    surfaceType: Report.TodoControlSurface,
                    type: Report.XRGaugeViewModel,
                    toolboxIndex: 12,
                    defaultVal: {
                        "@SizeF": "220,120"
                    },
                    popularProperties: Report.popularPropertiesGauge
                });
                Report.controlsFactory.registerControl("XRSparkline", {
                    info: Report.sparklineSerializationsInfo,
                    toolboxIndex: 13,
                    defaultVal: {
                        "@SizeF": "150,80",
                        "View": {
                            "@Type": "Line"
                        },
                    },
                    surfaceType: Report.SparkLineSurface,
                    type: Report.XRSparklineViewModel,
                    popularProperties: Report.popularPropertiesSparkline
                });
                Report.controlsFactory.registerControl("XRPivotGrid", {
                    info: Report.pivotGridSerializationsInfo,
                    toolboxIndex: 14,
                    defaultVal: {
                        "@ControlType": "XRPivotGrid",
                        "@SizeF": "250,120",
                        "OptionsChartDataSource": {},
                        "Prefilter": {},
                        "OptionsPrint": {
                            "@FilterSeparatorBarPadding": "3",
                            "@UsePrintAppearance": "true"
                        },
                        "OptionsView": {}
                    },
                    type: Report.XRPivotGridViewModel,
                    surfaceType: Report.PivotGridSurface,
                    popularProperties: ["dataSource", "dataMember"]
                });
                Report.controlsFactory.registerControl("XRSubreport", {
                    info: Report.subreportSerializationsInfo,
                    toolboxIndex: 15,
                    defaultVal: {
                        "@SizeF": "100,23",
                        "ReportSource": Report.SubreportViewModel.defaultReport
                    },
                    surfaceType: Report.SubreportSurface,
                    type: Report.XRSubreportViewModel,
                    popularProperties: ["name", "reportSourceUrl"]
                });
                Report.controlsFactory.registerControl("XRTableOfContents", {
                    toolboxIndex: 16,
                    info: Report.tocSerializationsInfo,
                    surfaceType: Report.TableOfContentsSurface,
                    type: Report.TableOfContentsViewModel,
                    defaultVal: {
                        "@ControlType": "XRTableOfContents",
                        "LevelTitle": {
                            "@Text": "Title",
                            "@Height": "23",
                            "@Padding": "0,0,0,0,100"
                        },
                        "LevelDefault": {
                            "@Height": "23",
                            "@Padding": "0,0,0,0,100"
                        }
                    },
                    canDrop: function (dropTarget, dragFrom) {
                        var bandModel = Report.ControlViewModel.getNearestBand(dropTarget.getControlModel());
                        if (!bandModel)
                            return false;
                        if (dragFrom) {
                            if (Report.isHeaderOrFooterBandType(bandModel)) {
                                var bandToc = Designer.findFirstItemMatchesCondition(bandModel.controls(), function (item) { return item.controlType === "XRTableOfContents"; });
                                if (!bandToc || bandToc === dragFrom)
                                    return true;
                            }
                            return false;
                        }
                        var reportModel = bandModel.parentModel();
                        return !Report.bandContainsToc(reportModel, "ReportHeaderBand") || !Report.bandContainsToc(reportModel, "ReportFooterBand");
                    }
                });
                Report.controlsFactory.registerControl("XRPageInfo", {
                    info: Report.pageInfoSerializationsInfo,
                    surfaceType: Report.XRPageInfoSurface,
                    toolboxIndex: 17,
                    defaultVal: {
                        "@SizeF": "100,23",
                        "@Padding": "2,2,0,0,100"
                    },
                    type: Report.ControlViewModel,
                    popularProperties: Report.popularPropertiesPageInfo
                });
                Report.controlsFactory.registerControl("XRPageBreak", {
                    info: Report.pageBreakSerializationsInfo,
                    type: Report.ControlViewModel,
                    surfaceType: Report.XRPageBreakSurface,
                    toolboxIndex: 18,
                    defaultVal: {
                        "@SizeF": "30,2"
                    }
                });
                Report.controlsFactory.registerControl("XRCrossBandLine", {
                    info: Report.crossBandLineControlSerializationsInfo,
                    type: Report.CrossBandControlViewModel,
                    toolboxIndex: 19,
                    defaultVal: {
                        "@WidthF": "9.38",
                        "@StartPointFloat": "0,0",
                        "@EndPointFloat": "0,50"
                    },
                    size: "9.38, 50",
                    surfaceType: Report.CrossBandSurface,
                    popularProperties: Report.popularPropertiesCrossLine
                });
                Report.controlsFactory.registerControl("XRCrossBandBox", {
                    info: Report.crossBandBoxControlSerializationsInfo,
                    type: Report.CrossBandControlViewModel,
                    toolboxIndex: 20,
                    defaultVal: {
                        "@WidthF": "50",
                        "@StartPointFloat": "0,0",
                        "@EndPointFloat": "0,50"
                    },
                    size: "50,50",
                    surfaceType: Report.CrossBandSurface
                });
                Report.controlsFactory.registerControl("DevExpress.XtraReports.UI.XtraReport", {
                    info: Report.reportSerializationInfo,
                    nonToolboxItem: true,
                    surfaceType: Report.ReportSurface,
                    popularProperties: Report.popularPropertiesReport,
                    isCopyDeny: true,
                    isDeleteDeny: true
                });
                Report.controlsFactory.registerControl("TopMarginBand", {
                    info: Report.bandSerializationInfo.concat(Report.commonBandScripts),
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    isContainer: true,
                    isCopyDeny: true,
                    isDeleteDeny: true
                });
                Report.controlsFactory.registerControl("BottomMarginBand", {
                    info: Report.bandSerializationInfo.concat(Report.commonBandScripts),
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    isContainer: true,
                    isCopyDeny: true,
                    isDeleteDeny: true
                });
                Report.controlsFactory.registerControl("DetailReportBand", {
                    info: Report.detailReportBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesDetailReport,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("DetailBand", {
                    info: Report.detailBandSerializationInfo.concat(Report.multiColumn),
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesDetail.concat("multiColumn"),
                    isContainer: true,
                    isCopyDeny: true,
                    isDeleteDeny: true
                });
                Report.controlsFactory.registerControl("SubBand", {
                    info: Report.detailBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesDetail,
                    isContainer: true,
                    isCopyDeny: true,
                });
                Report.controlsFactory.registerControl("GroupHeaderBand", {
                    info: Report.groupHeaderBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesGroupHeader,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("GroupFooterBand", {
                    info: Report.groupFooterBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesGroupFooter,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("PageHeaderBand", {
                    info: Report.pageBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesPageHeader,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("PageFooterBand", {
                    info: Report.pageBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesPageFooter,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("ReportHeaderBand", {
                    info: Report.reportHeaderBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesReportHeader,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("ReportFooterBand", {
                    info: Report.reportFooterBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    popularProperties: Report.popularPropertiesReportFooter,
                    surfaceType: Report.BandSurface,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("PivotGridField", {
                    info: Designer.Pivot.pivotGridFieldSerializationsInfo,
                    type: Designer.Pivot.PivotGridFieldViewModel,
                    surfaceType: Designer.Pivot.PivotGridFieldSurface,
                    nonToolboxItem: true,
                    popularProperties: Designer.Pivot.popularPropertiesPivotGridField
                });
                Report.controlsFactory.registerControl("XRTableRow", {
                    info: Report.tableRowSerializationsInfo,
                    type: Report.TableRowViewModel,
                    defaultVal: {
                        "@HeigthF": "25",
                        "@Weight": "20"
                    },
                    nonToolboxItem: true,
                    surfaceType: Report.TableRowSurface,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("XRTableCell", {
                    info: Report.tableCellSerializationsInfo,
                    type: Report.TableCellViewModel,
                    defaultVal: {
                        "@Weight": "1",
                        "@WidthF": "100",
                    },
                    nonToolboxItem: true,
                    surfaceType: Report.TableCellSurface,
                    popularProperties: Report.popularPropertiesTableCell,
                    isContainer: true,
                    isCopyDeny: true
                });
            }
            Report.registerControls = registerControls;
            ko.bindingHandlers['dxReportDesigner'] = {
                init: function (element, valueAccessor) {
                    $(element).children().remove();
                    var templateHtml = $('#dxrd-designer').text(), $element = $(element).append(templateHtml), values = ko.unwrap(valueAccessor());
                    ko.applyBindings(values, $element.children()[0]);
                    return { controlsDescendantBindings: true };
                }
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportCompleter = (function () {
                function ReportCompleter(report, editorInstance, guid) {
                    this.completions = [];
                    this.report = report;
                    this.editorInstance = editorInstance;
                    this.guid = guid;
                    this.oldPrefix = null;
                }
                ReportCompleter.prototype.__getCompletions = function (editor, session, pos, prefix, callback) {
                    var self = this;
                    Report.ReportScriptService.getCompletions(editor, session, pos, prefix, callback, this.report(), this.editorInstance, this.guid())
                        .done(function (result) {
                        if (result) {
                            if (result.State === 1) {
                                Report.ReportScriptService.setCodeDom(JSON.stringify({
                                    "XtraReportsLayoutSerializer": self.report().serialize()
                                })).done(function (result) {
                                    self.guid(result.Guid);
                                    self.__getCompletions(editor, session, pos, prefix, callback);
                                });
                            }
                            else {
                                var errors = [];
                                if (result.Errors.length > 0) {
                                    var linesCount = editor.getSession().getLength();
                                    result.Errors.forEach(function (error) {
                                        if (error.Line < linesCount && error.Line >= 0) {
                                            errors.push({
                                                row: error.Line + 1,
                                                column: error.Column,
                                                text: error.ErrorNumber + " - " + error.ErrorText,
                                                type: error.IsWarning ? "warning" : "error"
                                            });
                                        }
                                    });
                                    editor.getSession().setAnnotations(errors);
                                }
                                self.completions = result.Completions;
                                callback(null, result.Completions);
                            }
                        }
                    });
                };
                ReportCompleter.prototype.getCompletions = function (editor, session, pos, prefix, callback) {
                    if (!this.oldPrefix || prefix[0] !== this.oldPrefix) {
                        this.oldPrefix = prefix[0];
                        this.__getCompletions(editor, session, pos, prefix, callback);
                    }
                    else if (this.oldPrefix == prefix[0] && this.completions.length > 0) {
                        callback(null, this.completions);
                    }
                };
                return ReportCompleter;
            })();
            Report.ReportCompleter = ReportCompleter;
            ko.bindingHandlers["dxAceEditor"] = {
                update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var values = valueAccessor(), text = values.value, editorContainer = values.editorContainer, editor, _setEditorText = function (editorInstance, text) {
                        editorInstance.getSession().setValue(text || "");
                        editorInstance.clearSelection();
                        editorInstance.getSession().getUndoManager().reset();
                    };
                    if (window["ace"]) {
                        var langTools = window["ace"].require("ace/ext/language_tools");
                        editor = window["ace"].edit(element);
                        var guid = ko.observable(null);
                        editor.setTheme(Designer.classExists(".dx-designer-dark") ? "ace/theme/ambiance" : "ace/theme/dreamweaver");
                        var languageMode = viewModel.languageHelper.getLanguageMode();
                        editor.getSession().setMode(languageMode);
                        langTools.setCompleters([new ReportCompleter(bindingContext.$root.model, editor, viewModel.guid)]);
                        editor.setOptions({
                            enableBasicAutocompletion: true,
                            enableSnippets: true,
                            enableLiveAutocompletion: true,
                            showPrintMargin: false
                        });
                        if (ko.isSubscribable(text)) {
                            text.subscribe(function (newText) {
                                _setEditorText(editor, newText);
                            });
                        }
                        _setEditorText(editor, ko.unwrap(text));
                    }
                    if (ko.isObservable(editorContainer)) {
                        editorContainer(editor);
                    }
                }
            };
            var ScriptsEditor = (function (_super) {
                __extends(ScriptsEditor, _super);
                function ScriptsEditor(report, allControls) {
                    var _this = this;
                    _super.call(this);
                    this._selectionNotEmpty = ko.observable(false);
                    this._canUndo = ko.observable(false);
                    this._canRedo = ko.observable(false);
                    this._cursorPosition = ko.observable().extend({ throttle: 100 });
                    this.guid = ko.observable(null);
                    this.editorContainer = ko.observable();
                    this.editorVisible = ko.observable(false);
                    this.toolbarItems = [];
                    this.controls = ko.observableArray([]);
                    this.selectedControl = ko.observable();
                    this.events = ko.observable();
                    this.selectedEvent = ko.observable();
                    this.validateDisabled = ko.observable(false);
                    var self = this;
                    var cursorPositionChanging = false;
                    this.languageHelper = new LanguageHelper(report);
                    this._updateEditorState = function () {
                        if (_this.editorContainer() && _this.editorContainer().getSession()) {
                            _this._canUndo(_this.editorContainer().getSession().getUndoManager().hasUndo());
                            _this._canRedo(_this.editorContainer().getSession().getUndoManager().hasRedo());
                        }
                    };
                    this.selectionChanged = function (editor) {
                        _this._selectionNotEmpty(!editor.getSelection().isEmpty());
                        _this._updateEditorState();
                        editor.focus();
                    };
                    this.report = report;
                    this.scriptsText = ko.pureComputed({
                        read: function () { return _this.report().scriptsSource(); },
                        write: function (newText) { _this.report().scriptsSource(newText); }
                    });
                    this._initializeToolbar();
                    this.editorContainer.subscribe(function (editor) {
                        if (editor.getSession()) {
                            editor.getSession().getSelection().on("changeSelection", function () {
                                _this.selectionChanged(editor);
                            });
                            editor.getSession().getSelection().on("changeCursor", function () {
                                self._cursorPosition(editor.getCursorPosition());
                            });
                        }
                    });
                    this._cursorPosition.subscribe(function (currentCursorPosition) {
                        var currentFunctionName = _this._getFunctionName(currentCursorPosition.row), control, event;
                        _this.controls().some(function (ctrl) {
                            control = ctrl;
                            event = _this._getEventByFunction(ctrl, currentFunctionName);
                            return !!event;
                        });
                        if (control && event) {
                            try {
                                cursorPositionChanging = true;
                                _this.selectedControl(control);
                                _this.selectedEvent(event);
                            }
                            finally {
                                cursorPositionChanging = false;
                            }
                        }
                    });
                    this._disposables.push(ko.computed(function () {
                        _this.controls(allControls().filter(function (control) { return !!control.scripts && !control.lockedInUserDesigner(); }));
                    }));
                    this.selectedControl.subscribe(function (newSelectedControl) {
                        var eventsList = [];
                        if (newSelectedControl) {
                            for (var propertyName in newSelectedControl.scripts || {}) {
                                var eventName = propertyName;
                                if (eventName.indexOf("_") !== 0) {
                                    if (eventName.indexOf("on") === 0) {
                                        eventName = eventName.substring(2);
                                    }
                                    eventsList.push(eventName);
                                }
                            }
                        }
                        _this.selectedEvent("");
                        _this.events(eventsList);
                    });
                    this._ensureFunction = function (functionName, eventArgsType) {
                        var editorContainer = _this.editorContainer();
                        if (editorContainer) {
                            var editorContent = editorContainer.getValue();
                            if (editorContent.indexOf(functionName) === -1) {
                                var newEventHandler = _this.languageHelper.createNewHandler(functionName, eventArgsType);
                                var resultScripts = editorContent.concat(newEventHandler);
                                _this.report().scriptsSource(resultScripts);
                                editorContainer.setValue(resultScripts);
                            }
                        }
                    };
                    this.ensureEvent = function (eventName, functionName, model) {
                        var selectedControl = model;
                        if (!selectedControl) {
                            selectedControl = _this.selectedControl();
                        }
                        functionName = ScriptsEditor.generateFunctionName(selectedControl, eventName, functionName, _this.allFunctionNames);
                        var eventArgsType = ScriptsEditor.getEventArgsType(eventName);
                        _this._ensureFunction(functionName, eventArgsType);
                        _this._changeSelection(functionName);
                        selectedControl.scripts["on" + eventName](functionName);
                        _this.selectedControl(selectedControl);
                        if (_this.controls.indexOf(selectedControl) === -1) {
                            _this.controls.push($.extend({ displayExpr: selectedControl.name }, selectedControl));
                        }
                        _this.selectedEvent(eventName);
                    };
                    this.selectedEvent.subscribe(function (newEvent) {
                        if (!cursorPositionChanging && newEvent) {
                            var selectedControl = _this.selectedControl();
                            var selectedControlNewEvent = selectedControl && selectedControl.scripts["on" + newEvent];
                            var newEventFunction = selectedControlNewEvent && selectedControlNewEvent();
                            if (!newEventFunction || _this.allFunctionNames.indexOf(newEventFunction) === -1) {
                                _this.ensureEvent(newEvent);
                            }
                            else {
                                _this._changeSelection(newEventFunction);
                            }
                        }
                    });
                }
                ScriptsEditor.prototype._changeSelection = function (textToSelect) {
                    var editorContainer = this.editorContainer();
                    if (editorContainer) {
                        editorContainer.find(textToSelect, {
                            backwards: false,
                            wrap: false,
                            caseSensitive: false,
                            wholeWord: true,
                            regExp: false
                        }, true);
                        editorContainer.findNext();
                        editorContainer.findPrevious();
                    }
                };
                ScriptsEditor.prototype._initializeToolbar = function () {
                    var self = this, copyText = ko.observable("");
                    this.toolbarItems.push({
                        text: "Cut",
                        imageClassName: "dxrd-image-cut",
                        disabled: ko.pureComputed(function () { return !self._selectionNotEmpty(); }),
                        visible: true,
                        clickAction: function () {
                            copyText(self.editorContainer().getCopyText());
                            self.editorContainer().execCommand("cut");
                        },
                        hotKey: { ctrlKey: true, keyCode: "X".charCodeAt(0) }
                    });
                    this.toolbarItems.push({
                        text: "Copy",
                        imageClassName: "dxrd-image-copy",
                        disabled: ko.pureComputed(function () { return !self._selectionNotEmpty(); }),
                        visible: true,
                        clickAction: function () {
                            copyText(self.editorContainer().getCopyText());
                        },
                        hotKey: { ctrlKey: true, keyCode: "C".charCodeAt(0) }
                    });
                    this.toolbarItems.push({
                        text: "Paste",
                        imageClassName: "dxrd-image-paste",
                        disabled: ko.pureComputed(function () { return !copyText(); }),
                        visible: true,
                        clickAction: function () {
                            self.editorContainer().onPaste(copyText());
                        },
                        hotKey: { ctrlKey: true, keyCode: "V".charCodeAt(0) }
                    });
                    this.toolbarItems.push({
                        text: "Delete",
                        imageClassName: "dxrd-image-delete",
                        disabled: ko.pureComputed(function () { return !self._selectionNotEmpty(); }),
                        visible: true,
                        clickAction: function () {
                            self.editorContainer().execCommand("del");
                        }
                    });
                    this.toolbarItems.push({
                        text: "Undo",
                        imageClassName: "dxrd-image-undo",
                        disabled: ko.pureComputed(function () { return !self._canUndo(); }),
                        visible: true,
                        clickAction: function () {
                            self.editorContainer().undo(false);
                            self._updateEditorState();
                        },
                        hotKey: { ctrlKey: true, keyCode: "Z".charCodeAt(0) },
                        hasSeparator: true
                    });
                    this.toolbarItems.push({
                        text: "Redo",
                        imageClassName: "dxrd-image-redo",
                        disabled: ko.pureComputed(function () { return !self._canRedo(); }),
                        visible: true,
                        clickAction: function () {
                            self.editorContainer().redo(false);
                            self._updateEditorState();
                        },
                        hotKey: { ctrlKey: true, keyCode: "Y".charCodeAt(0) },
                    });
                    this.toolbarItems.push({
                        text: "Validate",
                        imageClassName: "dxrd-image-validate",
                        disabled: this.validateDisabled,
                        visible: this.editorVisible,
                        hotKey: { ctrlKey: true, keyCode: "L".charCodeAt(0) },
                        container: "menu",
                        clickAction: function () {
                            self.validateDisabled(true);
                            self._setScriptsText();
                            Report.ReportScriptService.validateScripts(self.report()).done(function (result) {
                                var errors = [];
                                result.forEach(function (error) {
                                    var linesCount = self.editorContainer().getSession().getLength();
                                    errors.push({
                                        row: self._getValidIndex(error.Line, linesCount),
                                        column: self._getValidIndex(error.Column, linesCount),
                                        text: error.ErrorNumber + " - " + error.ErrorText,
                                        type: error.IsWarning ? "warning" : "error"
                                    });
                                });
                                self.editorContainer().getSession().setAnnotations(errors);
                                self.validateDisabled(false);
                                if (errors.length > 0) {
                                    Designer.ShowMessage(Designer.getLocalization("The script contains error(s)."));
                                }
                                else {
                                    Designer.ShowMessage(Designer.getLocalization("The script is valid."), "success");
                                }
                            })
                                .fail(function (result) {
                                Designer.ShowMessage(Designer.getLocalization("Impossible to validate the script."));
                                self.validateDisabled(false);
                            });
                        },
                        hasSeparator: true
                    });
                    this.toolbarItems.push({
                        text: "Design",
                        imageClassName: "dxrd-image-design",
                        disabled: ko.observable(false),
                        visible: this.editorVisible,
                        hotKey: { ctrlKey: true, keyCode: "P".charCodeAt(0) },
                        container: "menu",
                        clickAction: function () {
                            self._setScriptsText();
                            self.editorVisible(false);
                        },
                        hasSeparator: true
                    });
                    this.toolbarItems.push({
                        text: "Controls",
                        disabled: ko.observable(false),
                        visible: this.editorVisible,
                        clickAction: $.noop,
                        control: self.selectedControl,
                        controls: self.controls,
                        displayExpr: function (value) { return DevExpress.Designer.getControlFullName(value); },
                        templateName: "dxrd-scripting-controlchooser",
                        hasSeparator: true
                    });
                    this.toolbarItems.push({
                        text: "Events",
                        disabled: ko.observable(false),
                        visible: this.editorVisible,
                        clickAction: $.noop,
                        events: self.events,
                        event: self.selectedEvent,
                        templateName: "dxrd-scripting-eventchooser"
                    });
                };
                ScriptsEditor.prototype._getValidIndex = function (errorPosition, linesCount) {
                    var position = errorPosition <= linesCount ? Math.max(1, errorPosition) : 1;
                    return Math.max(0, position - 1);
                };
                ScriptsEditor.prototype._setScriptsText = function () {
                    var editorContainer = this.editorContainer();
                    if (editorContainer) {
                        this.scriptsText(editorContainer.getValue());
                    }
                };
                ScriptsEditor.prototype._getFunctionName = function (row) {
                    var name = '', allLines = this.editorContainer().getSession().getDocument().getAllLines();
                    for (var rowIndex = row; rowIndex >= 0; rowIndex--) {
                        if (name) {
                            break;
                        }
                        for (var index = 0; index < this.allFunctionNames.length; index++) {
                            if (allLines[rowIndex].indexOf(this.allFunctionNames[index]) !== -1) {
                                name = this.allFunctionNames[index];
                                break;
                            }
                        }
                        ;
                    }
                    return name;
                };
                ScriptsEditor.prototype._getEventByFunction = function (control, currentFunctionName) {
                    var result = "";
                    for (var propertyName in control.scripts) {
                        if (result) {
                            break;
                        }
                        var eventName = propertyName;
                        if (ko.unwrap(control.scripts[eventName]) === currentFunctionName && eventName.indexOf("on") === 0) {
                            result = eventName.substring(2);
                        }
                    }
                    return result;
                };
                ScriptsEditor.generateFunctionName = function (control, eventName, functionName, allFunctionNames) {
                    if (allFunctionNames === void 0) { allFunctionNames = []; }
                    if (functionName || ko.unwrap(control.name)) {
                        return Designer.replaceInvalidSymbols(functionName || (ko.unwrap(control.name) + "_" + eventName));
                    }
                    else {
                        return Designer.getUniqueName(allFunctionNames, eventName);
                    }
                };
                ScriptsEditor.getEventArgsType = function (eventName) {
                    return Report.eventArgsTypes[eventName] || "System.EventArgs";
                };
                ScriptsEditor.prototype.initialize = function () {
                    var _this = this;
                    var self = this;
                    Report.ReportScriptService.setCodeDom(JSON.stringify({
                        "XtraReportsLayoutSerializer": this.report().serialize()
                    })).done(function (result) {
                        _this.guid(result.Guid);
                    });
                };
                Object.defineProperty(ScriptsEditor.prototype, "allFunctionNames", {
                    get: function () {
                        var editorContainer = this.editorContainer();
                        return editorContainer ? this.languageHelper.getFunctionNamesFromScript(editorContainer.getValue()) : [];
                    },
                    enumerable: true,
                    configurable: true
                });
                return ScriptsEditor;
            })(Designer.Disposable);
            Report.ScriptsEditor = ScriptsEditor;
            var LanguageHelper = (function () {
                function LanguageHelper(report) {
                    this._report = report;
                }
                LanguageHelper.prototype.getLanguageMode = function () {
                    var scriptLanguage = this._report().scriptLanguage();
                    switch (scriptLanguage) {
                        case "CSharp":
                            return "ace/mode/csharp";
                        case "VisualBasic":
                            return "ace/mode/vbscript";
                        default:
                            return "ace/mode/text";
                    }
                };
                LanguageHelper.prototype.createNewHandler = function (eventName, eventArgsType) {
                    var scriptLanguage = this._report().scriptLanguage();
                    switch (scriptLanguage) {
                        case "CSharp":
                            return "\r\nprivate void " + eventName + "(object sender, " + eventArgsType + " e) {\r\n\r\n}\r\n";
                        case "VisualBasic":
                            return "\r\nPrivate Sub " + eventName + "(ByVal sender As Object, ByVal e As " + eventArgsType + ")\r\n\r\nEnd Sub\r\n";
                        case "JScript":
                            return "\r\nprivate final function " + eventName + "(sender : System.Object, e : " + eventArgsType + ") {\r\n\r\n}\r\n";
                    }
                };
                LanguageHelper.prototype.getFunctionNamesFromScript = function (scripts) {
                    var keyWords = { 'CSharp': 'void ', 'VisualBasic': 'Sub ', 'JScript': 'function ' };
                    var scriptLanguage = this._report().scriptLanguage();
                    var events = [];
                    if (scripts) {
                        var lines = scripts.match(new RegExp(keyWords[scriptLanguage] + '(([A-Z])|[a-z])\\w+\\(', 'g'));
                        lines && lines.forEach(function (line) {
                            events.push(line.substring(keyWords[scriptLanguage].length, line.length - 1));
                        });
                    }
                    return events;
                };
                return LanguageHelper;
            })();
            Report.LanguageHelper = LanguageHelper;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var EDITOR_CLASS = "dx-eventdropdowneditor dx-selectbox", EDITOR_ELLIPSIS_BUTTON_CLASS = "dx-button-normal dx-dropdowneditor-button dxrd-ellipsis-button", EDITOR_ELLIPSIS_BUTTON_ICON = "dx-dropdowneditor-icon dxrd-ellipsis-image";
            var dxEventDropDownEditor = (function (_super) {
                __extends(dxEventDropDownEditor, _super);
                function dxEventDropDownEditor(element, options) {
                    _super.call(this, element, options);
                }
                dxEventDropDownEditor.prototype._render = function () {
                    this["element"]().addClass(EDITOR_CLASS);
                    _super.prototype._render.call(this);
                };
                dxEventDropDownEditor.prototype._renderDropButton = function () {
                    _super.prototype._renderDropButton.call(this);
                    if (!this._ellipsisButton) {
                        this._createEllipsisButton();
                    }
                    this._ellipsisButton.prependTo(this._buttonsContainer());
                };
                dxEventDropDownEditor.prototype._createEllipsisButton = function () {
                    this._ellipsisButtonIcon = $("<div>").addClass(EDITOR_ELLIPSIS_BUTTON_ICON);
                    this._ellipsisButton = $("<div>").dxButton({
                        focusStateEnabled: false,
                        disabled: this.option("readOnly")
                    }).removeClass("dx-button");
                    this._ellipsisButton.addClass(EDITOR_ELLIPSIS_BUTTON_CLASS);
                    this._ellipsisButton.append(this._ellipsisButtonIcon);
                    this._ellipsisButton.find(".dx-button-content").remove();
                    this._attachEllipsisButtonEvents();
                };
                dxEventDropDownEditor.prototype._attachEllipsisButtonEvents = function () {
                    var _this = this;
                    this._ellipsisButton.off("click");
                    if (!this.option("disabled")) {
                        this._ellipsisButton.on("click", function (e) {
                            if (_this.option("secondAction")) {
                                _this.option("secondAction")();
                                e.stopPropagation();
                            }
                        });
                    }
                };
                return dxEventDropDownEditor;
            })(DevExpress.ui.dxSelectBox);
            Report.dxEventDropDownEditor = dxEventDropDownEditor;
            DevExpress.registerComponent("dxEventDropDownEditor", dxEventDropDownEditor);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var ReportWizard = (function (_super) {
                    __extends(ReportWizard, _super);
                    function ReportWizard(dataSources, fieldListsCallback, hideDataMemberSubItems) {
                        var _this = this;
                        if (hideDataMemberSubItems === void 0) { hideDataMemberSubItems = false; }
                        _super.call(this);
                        this._labelWizardData = null;
                        this.title = "Report Wizard";
                        this.labelWizardData = function () {
                            if (!_this._labelWizardData) {
                                var $def = $.Deferred();
                                Report.ReportWizardService.getLabelReportWizardData().done(function (data) { return $def.resolve(JSON.parse(data)); });
                                _this._labelWizardData = $def.promise();
                            }
                            return _this._labelWizardData;
                        };
                        this.container = function (element) { return $(element).closest('.dx-viewport'); };
                        this._dataSources = dataSources;
                        this._selectDataSourcePage = new Wizard.SelectDataSourcePage(this, ko.observable([]));
                        this.steps = [
                            new Report.Wizard.ChooseReportTypePage(this),
                            new Report.Wizard.SelectPredefinedLabelsPage(this),
                            new Report.Wizard.CustomizeLabelPage(this),
                            this._selectDataSourcePage,
                            new Report.Wizard.SelectDataMemberPage(this, fieldListsCallback, hideDataMemberSubItems),
                            new Report.Wizard.SelectColumnsPage(this, fieldListsCallback),
                            new Report.Wizard.AddGroupingLevelPage(this),
                            new Report.Wizard.ChooseSummaryOptionsPage(this),
                            new Report.Wizard.ChooseReportLayoutPage(this),
                            new Report.Wizard.ChooseReportStylePage(this),
                            new Report.Wizard.SetReportTitlePage(this)
                        ];
                    }
                    ReportWizard.prototype.start = function () {
                        this.startWithCustomDataSources(this._dataSources());
                    };
                    ReportWizard.prototype.startWithCustomDataSources = function (dataSources) {
                        this._selectDataSourcePage.availableDataSources(ReportWizard._cloneDataSources(dataSources));
                        _super.prototype.start.call(this, new ReportWizardModel());
                    };
                    ReportWizard._cloneDataSources = function (dataSources) {
                        return dataSources.map(function (item) {
                            var newDS = $.extend({}, item);
                            newDS.data = item.data.clone();
                            return newDS;
                        });
                    };
                    return ReportWizard;
                })(Wizard.WizardViewModel);
                Wizard.ReportWizard = ReportWizard;
                var DataSourceWizard = (function (_super) {
                    __extends(DataSourceWizard, _super);
                    function DataSourceWizard(dataSources, fieldListsCallback) {
                        _super.call(this);
                        this.title = "Data Source Wizard";
                        var columnsPage = new Report.Wizard.SelectColumnsPage(this, fieldListsCallback);
                        columnsPage.actionNext.isDisabled = ko.pureComputed(function () {
                            return true;
                        });
                        this.steps = [
                            new Report.Wizard.SelectDataSourcePage(this, dataSources),
                            new Report.Wizard.SelectDataMemberPage(this, fieldListsCallback, true),
                            columnsPage
                        ];
                    }
                    DataSourceWizard.prototype.start = function () {
                        _super.prototype.start.call(this, new ReportWizardModel());
                    };
                    return DataSourceWizard;
                })(Wizard.WizardViewModel);
                Wizard.DataSourceWizard = DataSourceWizard;
                var ReportWizardModel = (function (_super) {
                    __extends(ReportWizardModel, _super);
                    function ReportWizardModel() {
                        var _this = this;
                        _super.call(this);
                        this._dataSource = null;
                        this._groups = [];
                        this.reportType = Wizard.ReportType.Datatbound;
                        this.dataMemberPath = ko.observable(null);
                        this.dataMember = ko.observable(null);
                        this.fields = ko.observableArray([]);
                        this.summaryOptionsColumns = ko.observableArray([]);
                        this.ignoreNullValuesForSummary = false;
                        this.fitFieldsToPage = true;
                        this.layout = Wizard.ReportLayout.columnar;
                        this.portrait = true;
                        this.style = Wizard.ReportStyle.Bold;
                        this.reportTitle = "";
                        this._disposables.push(this.dataMemberPath.subscribe(function () {
                            _this.fields([]);
                        }));
                        this._disposables.push(this.fields.subscribe(function (changes) {
                            var isFieldsChanged = changes.some(function (change, index, array) {
                                return !change["moved"] && change["moved"] !== 0;
                            });
                            if (isFieldsChanged) {
                                _this.groups = [];
                                _this.summaryOptionsColumns([]);
                            }
                        }, null, "arrayChange"));
                        this._disposables.push(this.summaryOptionsColumns.subscribe(function (changes) {
                            _this.summaryOptions = [];
                        }));
                    }
                    Object.defineProperty(ReportWizardModel.prototype, "dataSource", {
                        get: function () {
                            return this._dataSource;
                        },
                        set: function (value) {
                            if (this._dataSource != value) {
                                this.dataMember(null);
                                this.dataMemberPath(null);
                                this._dataSource = value;
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ReportWizardModel.prototype, "groups", {
                        get: function () {
                            return this._groups;
                        },
                        set: function (value) {
                            if (this._groups.length != value.length && (this._groups.length === 0 || value.length === 0)) {
                                this.layout = value.length > 0 ? Wizard.ReportLayout.stepped : Wizard.ReportLayout.columnar;
                            }
                            this._groups = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return ReportWizardModel;
                })(Designer.Disposable);
                Wizard.ReportWizardModel = ReportWizardModel;
                var ListViewModel = (function () {
                    function ListViewModel(caption) {
                        var _this = this;
                        this.caption = caption;
                        this._items = ko.observableArray([]);
                        this._refreshActiveItem = function (previousActivItemIndex) {
                            if (previousActivItemIndex === void 0) { previousActivItemIndex = -1; }
                            if (_this.isEmpty) {
                                _this.activeItemArray.removeAll();
                            }
                            else if (previousActivItemIndex < 0) {
                                _this.activeItemArray.splice(0, 1, _this._items()[0]);
                            }
                            else {
                                if (previousActivItemIndex >= _this._items().length) {
                                    previousActivItemIndex = _this._items().length - 1;
                                }
                                _this.activeItemArray.splice(0, 1, _this._items()[previousActivItemIndex]);
                            }
                        };
                        this.activeItemArray = ko.observableArray([]);
                    }
                    Object.defineProperty(ListViewModel.prototype, "items", {
                        get: function () {
                            return this._items();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ListViewModel.prototype, "activeItem", {
                        get: function () {
                            return this.activeItemArray().length === 1 ? this.activeItemArray()[0] : null;
                        },
                        set: function (value) {
                            if (this._items().indexOf(value) > -1) {
                                this.activeItemArray.splice(0, 1, value);
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ListViewModel.prototype.add = function (item) {
                        this._items.push(item);
                        this.activeItemArray.splice(0, 1, item);
                    };
                    ListViewModel.prototype.addRange = function (items) {
                        this.setItems(this._items().concat(items));
                    };
                    ListViewModel.prototype.removeActiveItem = function () {
                        var index = this._items.indexOf(this.activeItemArray()[0]);
                        this._items.remove(this.activeItemArray()[0]);
                        this._refreshActiveItem(index);
                    };
                    ListViewModel.prototype.removeAll = function () {
                        this._items.removeAll();
                        this.activeItemArray.removeAll();
                    };
                    ListViewModel.prototype.setItems = function (items) {
                        this._items(items);
                        this._refreshActiveItem();
                    };
                    ListViewModel.prototype.moveUp = function () {
                        if (this.isMoveUpEnabled()) {
                            var index = this._items.indexOf(this.activeItem);
                            this.activeItemArray.removeAll();
                            this._items.splice(index - 1, 2, this._items()[index], this._items()[index - 1]);
                            this.activeItemArray.splice(0, 1, this._items()[index - 1]);
                        }
                    };
                    ListViewModel.prototype.moveDown = function () {
                        if (this.isMoveDownEnabled()) {
                            var index = this._items.indexOf(this.activeItem);
                            this.activeItemArray.removeAll();
                            this._items.splice(index, 2, this._items()[index + 1], this._items()[index]);
                            this.activeItemArray.splice(0, 1, this._items()[index + 1]);
                        }
                    };
                    Object.defineProperty(ListViewModel.prototype, "isEmpty", {
                        get: function () {
                            return this._items().length === 0;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ListViewModel.prototype.isMoveUpEnabled = function () {
                        return this._items.indexOf(this.activeItemArray()[0]) > 0;
                    };
                    ListViewModel.prototype.isMoveDownEnabled = function () {
                        var index = this._items.indexOf(this.activeItemArray()[0]);
                        return index > -1 && index < this._items().length - 1;
                    };
                    return ListViewModel;
                })();
                Wizard.ListViewModel = ListViewModel;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var DataMemberPageTreeListController = (function (_super) {
                    __extends(DataMemberPageTreeListController, _super);
                    function DataMemberPageTreeListController() {
                        _super.apply(this, arguments);
                    }
                    DataMemberPageTreeListController.prototype.canSelect = function (value) {
                        return (value.hasItems && !!value.path) || value.data.specifics === "none";
                    };
                    return DataMemberPageTreeListController;
                })(Designer.DataMemberTreeListController);
                var SelectDataMemberPage = (function (_super) {
                    __extends(SelectDataMemberPage, _super);
                    function SelectDataMemberPage(wizard, fieldListItemsCallback, hideDataMemberSubItems) {
                        var _this = this;
                        if (hideDataMemberSubItems === void 0) { hideDataMemberSubItems = false; }
                        _super.call(this, wizard);
                        this._rootItems = ko.observableArray([]);
                        this._selectedPath = ko.observable(null);
                        this.template = "dxrd-page-dataMember";
                        this.title = Designer.getLocalization("Choose a Table or View", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataMember_Title");
                        this.description = Designer.getLocalization("The table or view you choose determines wich columns will be available in your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataMember_Description");
                        this.beginAsync = function (data) {
                            _this._dataSource = data.dataSource;
                            if (data.dataMemberPath() === null) {
                                return _this._fieldListCallBack(new DevExpress.JS.Widgets.PathRequest(_this.dataSourcePath), _this._dataSource).done(function (fields) {
                                    _this._selectedPath(null);
                                    _this.isVisible = fields.length > 0 && !fields.some(function (item) {
                                        return (item.specifics !== "List" && item.specifics !== "ListSource" && item.isList !== true);
                                    });
                                    _this._rootItems(fields.map(function (value) {
                                        return {
                                            name: value.displayName,
                                            id: value.name,
                                            specifics: "List",
                                            data: {}
                                        };
                                    }));
                                });
                            }
                            else if (_this.isVisible) {
                                _this._selectedPath(data.dataMemberPath().replace(_this.dataSourcePath + ".", ""));
                            }
                        };
                        this.commit = function (data) {
                            data.dataMemberPath(Report.getFullPath(_this.dataSourcePath, _this._selectedPath()));
                            data.dataMember(_this._getSelectedDataMember());
                        };
                        this.actionNext.isDisabled = ko.pureComputed(function () {
                            return _this._selectedPath() === null || _this._selectedPath() === undefined;
                        });
                        this.actionFinish.isDisabled(true);
                        this._fieldListCallBack = fieldListItemsCallback;
                        this._hideDataMemberSubItems = hideDataMemberSubItems;
                        this.fieldListModel = {
                            itemsProvider: new Designer.FieldListProvider(this._wrapFieldListCallback(fieldListItemsCallback), this._rootItems),
                            selectedPath: this._selectedPath,
                            treeListController: new DataMemberPageTreeListController()
                        };
                    }
                    SelectDataMemberPage.prototype._getSelectedDataMember = function () {
                        if (this.isVisible) {
                            return this.fieldListModel.treeListController.selectedItem && this.fieldListModel.treeListController.selectedItem.data;
                        }
                        if (this._dataSource) {
                            return {
                                name: this._selectedPath() ? this.dataSourcePath : "",
                                displayName: this._dataSource.name,
                                isList: true,
                                specifics: this._dataSource.specifics || "ListSource"
                            };
                        }
                    };
                    SelectDataMemberPage.prototype._wrapFieldListCallback = function (itemsCallback) {
                        var _this = this;
                        return function (pathRequest) {
                            if (_this._hideDataMemberSubItems) {
                                var deferred = $.Deferred();
                                deferred.resolve([]);
                                return deferred.promise();
                            }
                            else {
                                return itemsCallback(new DevExpress.JS.Widgets.PathRequest(_this.dataSourcePath + '.' + pathRequest.fullPath), _this._dataSource);
                            }
                        };
                    };
                    Object.defineProperty(SelectDataMemberPage.prototype, "dataSourcePath", {
                        get: function () {
                            return (this._dataSource.id || this._dataSource.ref);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return SelectDataMemberPage;
                })(Wizard.WizardPage);
                Wizard.SelectDataMemberPage = SelectDataMemberPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                (function (ReportType) {
                    ReportType[ReportType["Empty"] = 2] = "Empty";
                    ReportType[ReportType["Datatbound"] = 0] = "Datatbound";
                    ReportType[ReportType["Label"] = 1] = "Label";
                })(Wizard.ReportType || (Wizard.ReportType = {}));
                var ReportType = Wizard.ReportType;
                var ReportTypeItem = (function () {
                    function ReportTypeItem(textDefault, textID, imageClassName, reportType) {
                        this.imageClassName = imageClassName;
                        this.reportType = reportType;
                        this.text = Designer.getLocalization(textDefault, textID);
                    }
                    return ReportTypeItem;
                })();
                Wizard.ReportTypeItem = ReportTypeItem;
                var ChooseReportTypePage = (function (_super) {
                    __extends(ChooseReportTypePage, _super);
                    function ChooseReportTypePage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-page-reportType";
                        this.title = Designer.getLocalization("Choose a Report Type", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_Title");
                        this.description = Designer.getLocalization("Select the report type you wish to create.", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_Message");
                        this.selectedItem = ko.observable();
                        this.itemClick = function (item) {
                            _this.selectedItem(item);
                        };
                        this.IsSelected = function (item) {
                            return _this.selectedItem() === item;
                        };
                        this._begin = function (data) {
                            var reportType = data.reportType || ReportType.Datatbound;
                            _this.selectedItem(Designer.findFirstItemMatchesCondition(_this.reportTypeItems, function (item) { return item.reportType === reportType; }));
                        };
                        this.commit = function (data) {
                            data.reportType = _this.selectedItem().reportType;
                        };
                        this.actionNext.isDisabled = ko.pureComputed(function () {
                            return _this.selectedItem() === null || _this.selectedItem().reportType === ReportType.Empty;
                        });
                        this.actionFinish.isDisabled = ko.pureComputed(function () {
                            return _this.selectedItem() === null || _this.selectedItem().reportType !== ReportType.Empty;
                        });
                        this.reportTypeItems = [
                            new ReportTypeItem("Empty Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_EmptyReport", "emptyReport", ReportType.Empty),
                            new ReportTypeItem("Data-bound Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_DataBoundReport", "databoundReport", ReportType.Datatbound),
                            new ReportTypeItem("Label Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_LabelReport", "labelReport", ReportType.Label)
                        ];
                        this.actionPrevious.isDisabled(true);
                    }
                    return ChooseReportTypePage;
                })(Wizard.WizardPage);
                Wizard.ChooseReportTypePage = ChooseReportTypePage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SelectDataSourcePage = (function (_super) {
                    __extends(SelectDataSourcePage, _super);
                    function SelectDataSourcePage(wizard, availableDataSources) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-page-dataSource";
                        this.title = Designer.getLocalization("Choose a Data Source", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataSource_Title");
                        this.description = Designer.getLocalization("Choose a Data Source to use in your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataSource_Description");
                        this.selectedDataSource = ko.observableArray([]);
                        this._begin = function (data) {
                            _this.isVisible = _this.availableDataSources().length !== 1;
                            if (data.dataSource) {
                                _this.selectedDataSource([data.dataSource]);
                            }
                            else {
                                _this.selectedDataSource(_this.availableDataSources().length > 0 ? [_this.availableDataSources()[0]] : []);
                            }
                        };
                        this.commit = function (data) {
                            data.dataSource = _this.selectedDataSource()[0];
                        };
                        this.availableDataSources = availableDataSources;
                        this.actionNext.isDisabled = ko.pureComputed(function () {
                            return _this.selectedDataSource().length === 0;
                        });
                        this.actionFinish.isDisabled(true);
                    }
                    return SelectDataSourcePage;
                })(Wizard.WizardPage);
                Wizard.SelectDataSourcePage = SelectDataSourcePage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SelectColumnsPage = (function (_super) {
                    __extends(SelectColumnsPage, _super);
                    function SelectColumnsPage(wizard, getFieldListItems) {
                        var _this = this;
                        _super.call(this, wizard);
                        this._selectedPath = null;
                        this._fields = [];
                        this.template = "dxrd-page-columns";
                        this.title = Designer.getLocalization("Choose Columns to Display in Your Report", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseColumns_Title");
                        this.description = Designer.getLocalization("Select the columns you want to display within your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseColumns_Description");
                        this.availableFields = new Wizard.ListViewModel(Designer.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields"));
                        this.selectedFields = new Wizard.ListViewModel(Designer.getLocalization("Selected fields", "ASPxReportsStringId.ReportDesigner_Wizard_SelectedFields"));
                        this.isSelectEnable = ko.pureComputed(function () {
                            return !!_this.availableFields.activeItem;
                        });
                        this.isUnselectEnable = ko.pureComputed(function () {
                            return !!_this.selectedFields.activeItem;
                        });
                        this.select = function () {
                            _this.selectedFields.add(_this.availableFields.activeItem);
                            _this.availableFields.removeActiveItem();
                        };
                        this.selectAll = function () {
                            _this.selectedFields.setItems(_this._fields.slice(0));
                            _this.availableFields.removeAll();
                        };
                        this.unselect = function () {
                            _this.availableFields.add(_this.selectedFields.activeItem);
                            _this.selectedFields.removeActiveItem();
                        };
                        this.unselectAll = function () {
                            _this.availableFields.setItems(_this._fields.slice(0));
                            _this.selectedFields.removeAll();
                        };
                        this.availableFieldDblClick = function (field) {
                            _this.availableFields.activeItem = field;
                            _this.select();
                        };
                        this.availableFieldClick = function (e) {
                            _this.availableFields.activeItem = e.itemData;
                        };
                        this.selectedFieldDblClick = function (field) {
                            _this.selectedFields.activeItem = field;
                            _this.unselect();
                        };
                        this.selectedFieldClick = function (e) {
                            _this.selectedFields.activeItem = e.itemData;
                        };
                        this.beginAsync = function (data) {
                            _this.selectedFields.setItems(data.fields().slice(0));
                            if (_this._selectedPath != data.dataMemberPath()) {
                                return _this._fieldListsCallback(new DevExpress.JS.Widgets.PathRequest(data.dataMemberPath()), data.dataSource)
                                    .done(function (fields) {
                                    _this._fields = fields.filter(function (item) {
                                        return (item.specifics !== "List" && item.specifics !== "ListSource" && item.isList !== true);
                                    });
                                    _this._selectedPath = data.dataMemberPath();
                                    _this.availableFields.setItems(_this._fields.filter(function (value) {
                                        return _this.selectedFields.items.indexOf(value) === -1;
                                    }));
                                });
                            }
                            else {
                                _this.availableFields.setItems(_this._fields.filter(function (value) {
                                    return _this.selectedFields.items.indexOf(value) === -1;
                                }));
                            }
                        };
                        this.commit = function (data) {
                            data.fields(_this.selectedFields.items);
                        };
                        this.actionNext.isDisabled = this.actionFinish.isDisabled = ko.pureComputed(function () {
                            return _this.selectedFields.isEmpty;
                        });
                        this._fieldListsCallback = getFieldListItems;
                    }
                    SelectColumnsPage.prototype.selectedPath = function () {
                        return this._selectedPath;
                    };
                    SelectColumnsPage.prototype.reset = function () {
                        this._selectedPath = null;
                    };
                    return SelectColumnsPage;
                })(Wizard.WizardPage);
                Wizard.SelectColumnsPage = SelectColumnsPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var AddGroupingLevelPage = (function (_super) {
                    __extends(AddGroupingLevelPage, _super);
                    function AddGroupingLevelPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-page-groups";
                        this.title = Designer.getLocalization("Create Groups", "ASPxReportsStringId.ReportDesigner_Wizard_CreateGroups_Title");
                        this.description = Designer.getLocalization("Create multiple groups, each with a single field value, or define several fields in the same group.", "ASPxReportsStringId.ReportDesigner_Wizard_CreateGroups_Description");
                        this.fields = new Wizard.ListViewModel(Designer.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields"));
                        this.groups = new Wizard.ListViewModel(Designer.getLocalization("Groups", "ASPxReportsStringId.ReportDesigner_Groups"));
                        this.addNewGroup = function () {
                            if (_this.isCreateGroupEnabled()) {
                                _this.groups.add({ fields: ko.observableArray([_this.fields.activeItem]) });
                                _this.fields.removeActiveItem();
                            }
                        };
                        this.appendFieldsToGroup = function () {
                            if (_this.isAppendToGroupEnabled()) {
                                _this.groups.activeItem.fields.push(_this.fields.activeItem);
                                _this.fields.removeActiveItem();
                            }
                        };
                        this.removeGroup = function () {
                            if (_this.isRemoveGroupEnabled()) {
                                _this.fields.addRange(_this.groups.activeItem.fields());
                                _this.groups.removeActiveItem();
                            }
                        };
                        this.isCreateGroupEnabled = ko.pureComputed(function () {
                            return !!_this.fields.activeItem;
                        });
                        this.isAppendToGroupEnabled = ko.pureComputed(function () {
                            return _this.fields.activeItem && _this.groups.activeItem && _this.groups.activeItem.fields().length > 0;
                        });
                        this.isRemoveGroupEnabled = ko.pureComputed(function () {
                            return _this.groups.activeItem && _this.groups.activeItem.fields().length > 0;
                        });
                        this.moveUp = function () {
                            _this.groups.moveUp();
                        };
                        this.moveDown = function () {
                            _this.groups.moveDown();
                        };
                        this.isMoveUpEnabled = ko.pureComputed(function () {
                            return _this.groups.isMoveUpEnabled();
                        });
                        this.isMoveDownEnabled = ko.pureComputed(function () {
                            return _this.groups.isMoveDownEnabled();
                        });
                        this.fieldDblClick = function (field) {
                            _this.fields.activeItem = field;
                            _this.addNewGroup();
                        };
                        this.fieldClick = function (e) {
                            _this.fields.activeItem = e.itemData;
                        };
                        this.groupDblClick = function (group) {
                            _this.groups.activeItem = group;
                            _this.removeGroup();
                        };
                        this.groupClick = function (e) {
                            _this.groups.activeItem = e.itemData;
                        };
                        this._begin = function (data) {
                            var fields = ko.observableArray(data.fields().map(function (value, index, array) { return value.displayName; }));
                            _this.groups.setItems(data.groups.map(function (value) {
                                fields.removeAll(value);
                                return { fields: ko.observableArray(value) };
                            }));
                            _this.fields.setItems(fields());
                        };
                        this.commit = function (data) {
                            data.groups = _this.groups.items.map(function (item) {
                                return item.fields();
                            });
                            var summaryColumns = [];
                            if (!_this.groups.isEmpty) {
                                _this.fields.items.forEach(function (fieldName) {
                                    var field = Designer.getFirstItemByPropertyValue(data.fields(), "displayName", fieldName);
                                    if (field.specifics && ["integer", "float", "date"].indexOf(field.specifics.toLowerCase()) > -1) {
                                        summaryColumns.push(field);
                                    }
                                });
                                summaryColumns.sort(function (a, b) { return a.name.localeCompare(b.name); });
                            }
                            data.summaryOptionsColumns(summaryColumns);
                        };
                    }
                    return AddGroupingLevelPage;
                })(Wizard.WizardPage);
                Wizard.AddGroupingLevelPage = AddGroupingLevelPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SummaryOptionsWrapper = (function () {
                    function SummaryOptionsWrapper(name, displayName) {
                        this.avg = ko.observable(false);
                        this.count = ko.observable(false);
                        this.max = ko.observable(false);
                        this.min = ko.observable(false);
                        this.sum = ko.observable(false);
                        this._name = name;
                        this.columnName = displayName;
                    }
                    SummaryOptionsWrapper._getNumber = function (value) {
                        return value ? 1 : 0;
                    };
                    SummaryOptionsWrapper.prototype.getOptions = function () {
                        return {
                            columnName: this._name,
                            flags: SummaryOptionsWrapper._getNumber(this.sum()) << 0 |
                                SummaryOptionsWrapper._getNumber(this.avg()) << 1 |
                                SummaryOptionsWrapper._getNumber(this.min()) << 2 |
                                SummaryOptionsWrapper._getNumber(this.max()) << 3 |
                                SummaryOptionsWrapper._getNumber(this.count()) << 4
                        };
                    };
                    return SummaryOptionsWrapper;
                })();
                Wizard.SummaryOptionsWrapper = SummaryOptionsWrapper;
                var ChooseSummaryOptionsPage = (function (_super) {
                    __extends(ChooseSummaryOptionsPage, _super);
                    function ChooseSummaryOptionsPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this._columns = [];
                        this.template = "dxrd-page-summaryOptions";
                        this.title = Designer.getLocalization("Choose summary options", "ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Title");
                        this.description = Designer.getLocalization("What summary function would you like to calculate?", "ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Description");
                        this.summaryOptions = ko.observableArray([]);
                        this.ignoreNullValues = ko.observable(false);
                        this.toggleIgnoreNullValues = function () {
                            _this.ignoreNullValues(!_this.ignoreNullValues());
                        };
                        this._begin = function (data) {
                            _this.isVisible = data.summaryOptionsColumns().length > 0;
                            if (!_this.isVisible)
                                return;
                            _this.ignoreNullValues(data.ignoreNullValuesForSummary);
                            var changes = ko.utils.compareArrays(data.summaryOptionsColumns(), _this._columns);
                            var isColumnsChanged = changes.some(function (change, index, array) { return change.status != "retained"; });
                            if (isColumnsChanged) {
                                _this._columns = data.summaryOptionsColumns();
                                _this.summaryOptions.removeAll();
                                _this._columns.forEach(function (column) {
                                    _this.summaryOptions.push(new SummaryOptionsWrapper(column.name, column.displayName));
                                });
                            }
                            _this.summaryOptions.notifySubscribers();
                        };
                        this.commit = function (data) {
                            data.ignoreNullValuesForSummary = _this.ignoreNullValues();
                            data.summaryOptions = _this.summaryOptions().map(function (value) { return value.getOptions(); });
                        };
                    }
                    return ChooseSummaryOptionsPage;
                })(Wizard.WizardPage);
                Wizard.ChooseSummaryOptionsPage = ChooseSummaryOptionsPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                (function (ReportLayout) {
                    ReportLayout[ReportLayout["stepped"] = 0] = "stepped";
                    ReportLayout[ReportLayout["block"] = 1] = "block";
                    ReportLayout[ReportLayout["outline1"] = 2] = "outline1";
                    ReportLayout[ReportLayout["outline2"] = 3] = "outline2";
                    ReportLayout[ReportLayout["alignLeft1"] = 4] = "alignLeft1";
                    ReportLayout[ReportLayout["alignLeft2"] = 5] = "alignLeft2";
                    ReportLayout[ReportLayout["columnar"] = 6] = "columnar";
                    ReportLayout[ReportLayout["tabular"] = 7] = "tabular";
                    ReportLayout[ReportLayout["justified"] = 8] = "justified";
                })(Wizard.ReportLayout || (Wizard.ReportLayout = {}));
                var ReportLayout = Wizard.ReportLayout;
                var LyaoutTypeItem = (function () {
                    function LyaoutTypeItem(textValue, textID, layoutType, margin) {
                        this.layoutType = layoutType;
                        this.margin = margin;
                        this.text = Designer.getLocalization(textValue, textID);
                    }
                    Object.defineProperty(LyaoutTypeItem.prototype, "imageClassName", {
                        get: function () {
                            return "dxrd-report-layout-type-image-" + ReportLayout[this.layoutType].toLowerCase();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return LyaoutTypeItem;
                })();
                Wizard.LyaoutTypeItem = LyaoutTypeItem;
                (function (PageOrientation) {
                    PageOrientation[PageOrientation["Portrait"] = 0] = "Portrait";
                    PageOrientation[PageOrientation["Landscape"] = 1] = "Landscape";
                })(Wizard.PageOrientation || (Wizard.PageOrientation = {}));
                var PageOrientation = Wizard.PageOrientation;
                var PageOrientationItem = (function () {
                    function PageOrientationItem(textValue, textID, orientation) {
                        this.orientation = orientation;
                        this.text = Designer.getLocalization(textValue, textID);
                    }
                    return PageOrientationItem;
                })();
                Wizard.PageOrientationItem = PageOrientationItem;
                var ChooseReportLayoutPage = (function (_super) {
                    __extends(ChooseReportLayoutPage, _super);
                    function ChooseReportLayoutPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this._isGroupedReport = ko.observable(false);
                        this._reportLayoutTypes = [
                            new LyaoutTypeItem("Columnar", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Columnar", ReportLayout.columnar, 18),
                            new LyaoutTypeItem("Tabular", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Tabular", ReportLayout.tabular, 18),
                            new LyaoutTypeItem("Justified", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Justified", ReportLayout.justified, 18)
                        ];
                        this._groupedRreportLayoutsTypes = [
                            new LyaoutTypeItem("Stepped", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Stepped", ReportLayout.stepped, 1),
                            new LyaoutTypeItem("Outline 1", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline1", ReportLayout.outline1, 1),
                            new LyaoutTypeItem("Outline 2", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline2", ReportLayout.outline2, 1),
                            new LyaoutTypeItem("Align Left 1", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft1", ReportLayout.alignLeft1, 1),
                            new LyaoutTypeItem("Align Left 2", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft2", ReportLayout.alignLeft2, 1)
                        ];
                        this._pageOriantation = PageOrientation.Portrait;
                        this.template = "dxrd-page-reportLayoutType";
                        this.title = Designer.getLocalization("Choose a Report Layout", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Title");
                        this.description = Designer.getLocalization("The report layout specifies the manner in which selected data fields are arranged on individual pages.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Description");
                        this.toggleFitFieldsToPage = function () {
                            _this.fitFieldsToPage(!_this.fitFieldsToPage());
                        };
                        this.selectedLayoutType = ko.observable(null);
                        this.fitFieldsToPage = ko.observable(true);
                        this.pageOrientationItems = [
                            new PageOrientationItem("Portrait", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait", PageOrientation.Portrait),
                            new PageOrientationItem("Landscape", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape", PageOrientation.Landscape)
                        ];
                        this.selectedPageOrientation = ko.observable(this.pageOrientationItems[0]);
                        this.layoutTypeItems = ko.pureComputed(function () {
                            var items = _this._isGroupedReport() ? _this._groupedRreportLayoutsTypes : _this._reportLayoutTypes;
                            _this.selectedLayoutType(items[0]);
                            return items;
                        });
                        this.layoutTypeItemClick = function (item) {
                            _this.selectedLayoutType(item);
                        };
                        this.isSelected = function (item) {
                            return _this.selectedLayoutType() === item;
                        };
                        this._begin = function (data) {
                            _this._isGroupedReport(data.groups.length > 0);
                            _this.selectedLayoutType(Designer.getFirstItemByPropertyValue(_this.layoutTypeItems(), "layoutType", data.layout));
                            _this.fitFieldsToPage(data.fitFieldsToPage);
                            _this.selectedPageOrientation(data.portrait ? _this.pageOrientationItems[0] : _this.pageOrientationItems[1]);
                        };
                        this.commit = function (data) {
                            data.layout = _this.selectedLayoutType().layoutType;
                            data.fitFieldsToPage = _this.fitFieldsToPage();
                            data.portrait = _this.selectedPageOrientation().orientation === PageOrientation.Portrait;
                        };
                    }
                    return ChooseReportLayoutPage;
                })(Wizard.WizardPage);
                Wizard.ChooseReportLayoutPage = ChooseReportLayoutPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                (function (ReportStyle) {
                    ReportStyle[ReportStyle["Bold"] = 0] = "Bold";
                    ReportStyle[ReportStyle["Casual"] = 1] = "Casual";
                    ReportStyle[ReportStyle["Compact"] = 2] = "Compact";
                    ReportStyle[ReportStyle["Corporate"] = 3] = "Corporate";
                    ReportStyle[ReportStyle["Formal"] = 4] = "Formal";
                })(Wizard.ReportStyle || (Wizard.ReportStyle = {}));
                var ReportStyle = Wizard.ReportStyle;
                var ReportStyleItem = (function () {
                    function ReportStyleItem(textDefault, textID, reportStyle) {
                        this.reportStyle = reportStyle;
                        this.text = Designer.getLocalization(textDefault, textID);
                    }
                    Object.defineProperty(ReportStyleItem.prototype, "className", {
                        get: function () {
                            return 'dxrd-wizard-report-style-image ' + ReportStyle[this.reportStyle].toLowerCase();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return ReportStyleItem;
                })();
                Wizard.ReportStyleItem = ReportStyleItem;
                var ChooseReportStylePage = (function (_super) {
                    __extends(ChooseReportStylePage, _super);
                    function ChooseReportStylePage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-page-reportStyle";
                        this.title = Designer.getLocalization("Choose a Report Style", "ASPxReportsStringId.ReportDesigner_Wizard_Report_Style");
                        this.description = Designer.getLocalization("The report style specifies the appearance of your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Description");
                        this.reportStyleItems = [
                            new ReportStyleItem("Bold", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Bold", ReportStyle.Bold),
                            new ReportStyleItem("Casual", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Casual", ReportStyle.Casual),
                            new ReportStyleItem("Corporate", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Corporate", ReportStyle.Corporate),
                            new ReportStyleItem("Compact", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Compact", ReportStyle.Compact),
                            new ReportStyleItem("Formal", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Formal", ReportStyle.Formal)
                        ];
                        this.selectedReportStyle = ko.observable(this.reportStyleItems[0]);
                        this._begin = function (data) {
                            _this.selectedReportStyle(Designer.getFirstItemByPropertyValue(_this.reportStyleItems, "reportStyle", data.style));
                        };
                        this.commit = function (data) {
                            data.style = _this.selectedReportStyle().reportStyle;
                        };
                    }
                    return ChooseReportStylePage;
                })(Wizard.WizardPage);
                Wizard.ChooseReportStylePage = ChooseReportStylePage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SetReportTitlePage = (function (_super) {
                    __extends(SetReportTitlePage, _super);
                    function SetReportTitlePage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-page-reportTitle";
                        this.title = Designer.getLocalization("The Report is Complete", "ASPxReportsStringId.ReportDesigner_Wizard_ReportComplete_Title");
                        this.description = Designer.getLocalization("We have all the information needed to process the report.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportComplete_Description");
                        this.reportTitle = ko.observable("");
                        this._begin = function (data) {
                            _this.reportTitle(data.reportTitle ? data.reportTitle : "");
                        };
                        this.commit = function (data) {
                            data.reportTitle = _this.reportTitle();
                        };
                        this.actionNext.isDisabled(true);
                    }
                    return SetReportTitlePage;
                })(Wizard.WizardPage);
                Wizard.SetReportTitlePage = SetReportTitlePage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="sources/coordinategrid.ts" />
/// <reference path="sources/ruler.ts" />
/// <reference path="sources/widgets/editOptionsEditor.ts" />
/// <reference path="sources/widgets/styleseditor.ts" />
/// <reference path="sources/databindings.ts" />
/// <reference path="sources/dragdrop.ts" />
/// <reference path="sources/widgets/widgets.ts" />
/// <reference path="sources/miscobjects/formattingrules.ts" />
/// <reference path="sources/metadata.ts" />
/// <reference path="sources/miscobjects/anchoring.ts" />
/// <reference path="sources/reportelement.ts" />
/// <reference path="sources/control.ts" />
/// <reference path="sources/miscobjects/calculatedfield.ts" />
/// <reference path="sources/miscobjects/datasourcehelper.ts" />
/// <reference path="sources/miscobjects/extension.ts" />
/// <reference path="sources/miscobjects/groupfield.ts" />
/// <reference path="sources/miscobjects/parameter.ts" />
/// <reference path="sources/miscobjects/objectstorage.ts" />
/// <reference path="sources/miscobjects/style.ts" />
/// <reference path="sources/report.ts" />
/// <reference path="sources/band.ts" />
/// <reference path="sources/checkbox.ts" />
/// <reference path="sources/chart.ts" />
/// <reference path="sources/pivot/sortBySummaryInfo.ts" />
/// <reference path="sources/pivot/pivot.ts" />
/// <reference path="sources/pivotgrid.ts" />
/// <reference path="sources/picturebox.ts" />
/// <reference path="sources/table.ts" />
/// <reference path="sources/line.ts" />
/// <reference path="sources/shape.ts" />
/// <reference path="sources/barcode.ts" />
/// <reference path="sources/zipcode.ts" />
/// <reference path="sources/gauge.ts" />
/// <reference path="sources/pageinfo.ts" />
/// <reference path="sources/pagebreak.ts" />
/// <reference path="sources/crossband.ts" />
/// <reference path="sources/sparkline.ts" />
/// <reference path="sources/subreport.ts" />
/// <reference path="sources/tableOfContents.ts" />
/// <reference path="sources/charactercomb.ts" />
/// <reference path="sources/actions.ts" />
/// <reference path="sources/initializer.ts" />
/// <reference path="sources/scripting/scripts-editor.ts" />
/// <reference path="sources/scripting/eventdropdowneditor.ts" />
/// <reference path="sources/wizard/wizardModel.ts" />
/// <reference path="sources/wizard/selectDataMemberPage.ts" />
/// <reference path="sources/wizard/chooseReportTypePage.ts" />
/// <reference path="sources/wizard/selectDataSourcePage.ts" />
/// <reference path="sources/wizard/selectColumnsPage.ts" />
/// <reference path="sources/wizard/addGroupingLevelPage.ts" />
/// <reference path="sources/wizard/chooseSummaryOptionsPage.ts" />
/// <reference path="sources/wizard/chooseReportLayoutPage.ts" />
/// <reference path="sources/wizard/chooseReportStylePage.ts" />
/// <reference path="sources/wizard/setReportTitlePage.ts" />
/// <reference path="../Scripts/dx-designer/dx-query-builder-core.d.ts" />
/// <reference path="../Scripts/dx-designer/dx-diagram-designer.d.ts" />
/// <reference path="../Scripts/dx-designer/dx-designer-core.d.ts"/>
/// <reference path="../Scripts/dx-designer/dx-ko-widgets.d.ts"/>
/// <reference path="../Scripts/dx-designer/dx-ko-propertygrid.d.ts"/>
/// <reference path="../Scripts/dx-designer/dx-ko-undoengine.d.ts"/>
/// <reference path="../Scripts/dx-designer/dx-ko-serializer.d.ts"/> 
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var SqlDataSourceEditor = (function () {
                function SqlDataSourceEditor(dsHelper, sqlDataSourceWizard, reportViewModel, undoEngine) {
                    var _this = this;
                    this.relationsEditor = ko.observable();
                    this.addAction = {
                        clickAction: function (item) {
                            _this.addSqlQuery(item.data.name);
                        },
                        imageClassName: "dxrd-image-add-query",
                        text: Designer.getLocalization("Add query", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_AddQuery")
                    };
                    this.editAction = {
                        clickAction: function (item) {
                            _this.editSqlQuery(new DevExpress.JS.Widgets.PathRequest(item.path).id, item.name);
                        },
                        imageClassName: "dx-image-edit",
                        text: Designer.getLocalization("Edit query", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_EditQuery")
                    };
                    this.removeAction = {
                        clickAction: function (item) {
                            _this.removeSqlQuery(new DevExpress.JS.Widgets.PathRequest(item.path).id, item.name);
                        },
                        imageClassName: "dxrd-image-recycle-bin",
                        text: Designer.getLocalization("Remove query", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_RemoveQuery")
                    };
                    this.removeDataSourceAction = {
                        clickAction: function (item) {
                            _this.removeDataSource(item.data.name);
                        },
                        imageClassName: "dxrd-image-recycle-bin",
                        text: Designer.getLocalization("Remove Data Source")
                    };
                    this.editRelationsAction = {
                        clickAction: function (item) {
                            _this.editMasterDetailRelations(item.data.name);
                        },
                        imageClassName: "dx-image-edit",
                        text: Designer.getLocalization("Edit Master-Detail Relations")
                    };
                    this._dsHelper = dsHelper;
                    this._wizard = sqlDataSourceWizard;
                    this._reportViewModel = reportViewModel;
                    this._wizard.oncompleted(function (_, dataSourceWizardModel) {
                        var dataSource = dataSourceWizardModel.dataSource && dsHelper().findDataSourceInfoByName(dataSourceWizardModel.dataSource.name());
                        _this._applyWizardChanges(dataSource, dataSourceWizardModel, JSON.stringify({ "Query": new DevExpress.JS.Utils.ModelSerializer().serialize(dataSourceWizardModel.sqlQuery) }));
                    });
                    this._undoEngine = undoEngine;
                }
                SqlDataSourceEditor.prototype._applyWizardChanges = function (dataSource, wizardModel, queryJSON) {
                    var requestJson = JSON.stringify({
                        dataSourceBase64: dataSource && dataSource.data["_model"]["@Base64"],
                        connectionString: wizardModel.connectionString(),
                        sqlQueryJSON: queryJSON,
                        sqlQueryIndex: wizardModel.getQueryIndex()
                    });
                    this._createOrEditSqlDataSource(requestJson, dataSource, "createSqlDataSource");
                };
                SqlDataSourceEditor.prototype._createOrEditSqlDataSource = function (requestJson, dataSource, requestName) {
                    var _this = this;
                    return Designer.ajax(Report.HandlerUri, requestName, encodeURIComponent(requestJson)).
                        done(function (result) {
                        result.dataSource.data = JSON.parse(result.dataSource.data);
                        result.dataSource.isSqlDataSource = true;
                        if (dataSource) {
                            dataSource.data["_model"]["@Base64"] = result.dataSource.data["@Base64"];
                            _this._dsHelper().usedDataSources.notifySubscribers(_this._dsHelper().usedDataSources());
                        }
                        else {
                            Report.addDataSourceToReport(_this._dsHelper(), _this._reportViewModel().dataSource, _this._undoEngine, result.dataSource);
                        }
                    })
                        .fail(function (result) {
                        if (Designer.getErrorMessage(result))
                            Designer.ShowMessage(Designer.getErrorMessage(result));
                    });
                };
                SqlDataSourceEditor.prototype._findDataSource = function (dataSourceID) {
                    return this._dsHelper().usedDataSources().filter(function (item) { return item.id === dataSourceID || item.ref === dataSourceID; })[0];
                };
                SqlDataSourceEditor.prototype.editSqlQuery = function (dataSourceID, queryName) {
                    var _this = this;
                    var dataSource = this._findDataSource(dataSourceID);
                    Report.ReportDataSourceService.getSqlDataSourceStructure(dataSource).done(function (result) {
                        var sqlDataSource = new DevExpress.Data.SqlDataSource(JSON.parse(result.dataSourceStructure), dataSource.data._model["@Base64"]);
                        sqlDataSource.name(dataSource.name);
                        _this._wizard.start(new Report.Wizard.SqlDataSourceWizardModel(sqlDataSource, queryName));
                    });
                };
                SqlDataSourceEditor.prototype.addSqlQuery = function (dataSourceID) {
                    this.editSqlQuery(dataSourceID, null);
                };
                SqlDataSourceEditor.prototype.removeSqlQuery = function (dataSourceID, queryName) {
                    var _this = this;
                    var dataSource = this._findDataSource(dataSourceID);
                    Report.ReportDataSourceService.getSqlDataSourceStructure(dataSource).done(function (result) {
                        var sqlDataSource = new DevExpress.Data.SqlDataSource(JSON.parse(result.dataSourceStructure), dataSource.data._model["@Base64"]);
                        var dataSourceWizardModel = new Report.Wizard.SqlDataSourceWizardModel(sqlDataSource, queryName);
                        _this._applyWizardChanges(dataSource, dataSourceWizardModel, null);
                    });
                };
                SqlDataSourceEditor.prototype.removeDataSource = function (dataSourceID) {
                    var dsInfo = this._findDataSource(dataSourceID);
                    if (!dsInfo)
                        return;
                    Report.removeDataSourceFromReport(this._dsHelper(), this._reportViewModel().dataSource, this._undoEngine, dsInfo);
                };
                SqlDataSourceEditor.prototype.editMasterDetailRelations = function (dataSourceID) {
                    var _this = this;
                    var dataSource = this._findDataSource(dataSourceID);
                    Report.ReportDataSourceService.getSqlDataSourceStructure(dataSource).done(function (result) {
                        var sqlDataSource = new DevExpress.Data.SqlDataSource(JSON.parse(result.dataSourceStructure), dataSource.data._model["@Base64"]);
                        if (sqlDataSource.queries().length < 2) {
                            Designer.ShowMessage(Designer.getLocalization("At least two queries are required to create a master-detail relation."), "warning", 10000);
                            return;
                        }
                        _this.relationsEditor(new DevExpress.Data.MasterDetailEditor(sqlDataSource, function () {
                            var requestJson = JSON.stringify({
                                dataSourceBase64: dataSource.data._model["@Base64"],
                                connectionString: '',
                                sqlQueryJSON: '',
                                sqlQueryIndex: sqlDataSource.queries().length,
                                masterDetailRelationsJSON: JSON.stringify({ "SqlDataSource": new DevExpress.JS.Utils.ModelSerializer().serialize({ relations: sqlDataSource.relations }, [{ propertyName: "relations", modelName: "Relations", array: true }]) })
                            });
                            return _this._createOrEditSqlDataSource(requestJson, dataSource, "createSqlDataSource");
                        }));
                        _this.relationsEditor().popupVisible(true);
                    });
                };
                SqlDataSourceEditor.prototype.createMultipleQueriesSqlDataSource = function (dataSource) {
                    return this._createOrEditSqlDataSource(Report.ReportDataSourceService.multipleQueriesRequestJson(dataSource), null, "createMultipleQueriesSqlDataSource");
                };
                SqlDataSourceEditor.prototype.getActions = function (context) {
                    var result = [];
                    if (context.data["canAddSqlQuery"] === true) {
                        result.push(this.addAction);
                        result.push(this.editRelationsAction);
                    }
                    if (context.data["canRemove"] === true) {
                        result.push(this.removeDataSourceAction);
                    }
                    if (context.data["canEditQuery"] === true) {
                        result.push(this.editAction);
                        result.push(this.removeAction);
                    }
                    return result;
                };
                return SqlDataSourceEditor;
            })();
            Report.SqlDataSourceEditor = SqlDataSourceEditor;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var DBSchemaItemsProvider = (function () {
                    function DBSchemaItemsProvider(dbSchemaProvider, customQueries, showQbCallBack, disableCustomSql) {
                        var _this = this;
                        this._callBack = ko.observable({
                            deleteAction: function (name) {
                                _this._customQueries.splice(_this._customQueries().indexOf(Designer.findFirstItemMatchesCondition(_this._customQueries(), function (item) { return item.generateName() === name; })), 1);
                            },
                            showQbCallBack: null,
                            disableCustomSql: false,
                        });
                        this._tables = new Wizard.TreeNode("tables", Designer.getLocalization("Tables", "DataAccessStringId.ConfigureMultiQueryPage_TableCategory"), "list", false);
                        this._views = new Wizard.TreeNode("views", Designer.getLocalization("Views", "DataAccessStringId.ConfigureMultiQueryPage_ViewCategory"), "list", false);
                        this._procedures = new Wizard.TreeNode("procedures", Designer.getLocalization("Stored Procedures", "DataAccessStringId.ConfigureMultiQueryPage_SpCategory"), "list", false);
                        this._queries = new Wizard.TreeNode("queries", Designer.getLocalization("Queries", "DataAccessStringId.ConfigureMultiQueryPage_QueryCategory"), "list", false, this._callBack);
                        this._countNodes = ko.observable(0);
                        this._rootItems = [
                            this._tables,
                            this._views,
                            this._procedures,
                            this._queries
                        ];
                        this.hasCheckedItems = ko.pureComputed(function () {
                            return !(_this._countNodes() === 0);
                        });
                        this.nextButtonDisabled = ko.pureComputed(function () {
                            _this._countNodes(0);
                            var editParam = false;
                            for (var i = 0; i < _this._rootItems.length; i++) {
                                if (_this._countNodes() > 1)
                                    break;
                                _this._countNodes(_this._countNodes() + _this._rootItems[i].countChecked());
                                if (_this._rootItems[i].hasParamsToEdit())
                                    editParam = true;
                            }
                            return !(editParam || _this._countNodes() > 1);
                        });
                        this.tables = function () { return _this._tables; };
                        this.views = function () { return _this._views; };
                        this.procedures = function () { return _this._procedures; };
                        this.queries = function () { return _this._queries; };
                        this.customQueries = function () { return _this._customQueries; };
                        this._callBack().showQbCallBack = showQbCallBack;
                        this._callBack().disableCustomSql = disableCustomSql;
                        this.getItems = function (pathRequest) {
                            var result = $.Deferred();
                            if (!pathRequest.fullPath) {
                                result.resolve(_this._rootItems);
                            }
                            else if (pathRequest.fullPath === "tables") {
                                dbSchemaProvider.getDbSchema().done(function (dbSchema) {
                                    if (_this._tables.children().length === 0) {
                                        var tables = [];
                                        dbSchema.tables.forEach(function (table) {
                                            if (!table.isView) {
                                                tables.push(new Wizard.TreeNode(table.name, table.name, "table", _this._tables.checked.peek()));
                                            }
                                        });
                                        _this._tables.initializeChildern(tables);
                                        result.resolve(tables);
                                    }
                                    else {
                                        result.resolve(_this._tables.children());
                                    }
                                });
                            }
                            else if (pathRequest.fullPath === "views") {
                                dbSchemaProvider.getDbSchema().done(function (dbSchema) {
                                    if (_this._views.children().length === 0) {
                                        var views = [];
                                        dbSchema.tables.forEach(function (table) {
                                            if (table.isView) {
                                                views.push(new Wizard.TreeNode(table.name, table.name, "view", _this._views.checked.peek()));
                                            }
                                        });
                                        _this._views.initializeChildern(views);
                                        result.resolve(views);
                                    }
                                    else {
                                        result.resolve(_this._views.children());
                                    }
                                });
                            }
                            else if (pathRequest.fullPath === "procedures") {
                                dbSchemaProvider.getDbSchema().done(function (dbSchema) {
                                    if (_this._procedures.children().length === 0) {
                                        var procedures = dbSchema.procedures.map(function (proc) {
                                            return new Wizard.TreeLeafNode(proc.name, Wizard.StoredProceduresQueryControl.generateStoredProcedureDisplayName(proc), "procedure", _this._procedures.checked.peek(), proc.arguments);
                                        });
                                        _this._procedures.initializeChildern(procedures);
                                        result.resolve(procedures);
                                    }
                                    else {
                                        result.resolve(_this._procedures.children());
                                    }
                                });
                            }
                            else if (pathRequest.fullPath === "queries") {
                                var queries = customQueries().map(function (query) {
                                    var name = query.name() || query.generateName();
                                    var currentQuery = _this._queries.children().filter(function (q) { return q.name === name; })[0];
                                    return new Wizard.TreeQueryNode(name, name, "query", !currentQuery || currentQuery.checked(), query.parameters, _this._callBack);
                                });
                                _this._queries.initializeChildern(queries);
                                result.resolve(queries);
                            }
                            else {
                                dbSchemaProvider.getDbTable(pathRequest.path).done(function (table) {
                                    var tableTreeNode;
                                    if (table.isView) {
                                        tableTreeNode = Designer.findFirstItemMatchesCondition(_this._views.children(), function (item) { return item.name === table.name; });
                                    }
                                    else {
                                        tableTreeNode = Designer.findFirstItemMatchesCondition(_this._tables.children(), function (item) { return item.name === table.name; });
                                    }
                                    if (tableTreeNode.children().length === 0) {
                                        var columns = table.columns.map(function (column) {
                                            return new Wizard.TreeLeafNode(column.name, column.name, "column", tableTreeNode.checked.peek());
                                        });
                                        tableTreeNode.initializeChildern(columns);
                                        result.resolve(columns);
                                    }
                                    else {
                                        result.resolve(tableTreeNode.children());
                                    }
                                });
                            }
                            return result.promise();
                        };
                        this._customQueries = customQueries;
                    }
                    return DBSchemaItemsProvider;
                })();
                Wizard.DBSchemaItemsProvider = DBSchemaItemsProvider;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var AddQueriesPage = (function (_super) {
                    __extends(AddQueriesPage, _super);
                    function AddQueriesPage(wizard, callbacks, disableCustomSql, rtl) {
                        var _this = this;
                        if (disableCustomSql === void 0) { disableCustomSql = false; }
                        if (rtl === void 0) { rtl = false; }
                        _super.call(this, wizard);
                        this._selectedPath = ko.observable(null);
                        this._connection = "";
                        this._itemsProvider = ko.observable();
                        this._customQueries = ko.observableArray([]);
                        this._chechedQueries = ko.observableArray([]);
                        this.template = "dxrd-wizard-add-queries-page";
                        this.description = Designer.getLocalization("Columns selected from specific tables and/or views will be automatically included into a separate query.", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_PageConfigureMultiQuery");
                        this.isTablesGenerateColumnsCallBack = ko.observableArray([]);
                        this.popupSelectStatment = ({
                            isVisible: ko.observable(false),
                            title: Designer.getLocalization("Custom SQL Editor", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_CustomSqlEditor"),
                            query: null,
                            data: ko.observable(),
                            okButtonHandler: function (e) {
                                _this.popupSelectStatment.query.sqlString(e.model.data());
                                _this.setQuery(_this.popupSelectStatment.query);
                                e.model.isVisible(false);
                            }
                        });
                        this.showStatementPopup = function (query) {
                            _this.popupSelectStatment.isVisible(true);
                            _this.popupSelectStatment.query = query;
                            _this.popupSelectStatment.data(query.sqlString());
                        };
                        this.disableCustomSql = false;
                        this.isDataLoadingInProcess = ko.observable(false);
                        this.queryEditIndex = ko.observable(-1);
                        this.showQbCallBack = function (name, isCustomQuery) {
                            if (name === void 0) { name = null; }
                            if (isCustomQuery === void 0) { isCustomQuery = false; }
                            if (name !== null) {
                                var query = Designer.findFirstItemMatchesCondition(_this._customQueries(), function (item) { return name === (item.name() || item.generateName()); });
                                if (query.type() === DevExpress.Data.SqlQueryType.customSqlQuery) {
                                    _this.queryEditIndex(_this._customQueries().indexOf(query));
                                    _this.showStatementPopup(query);
                                }
                                else {
                                    _this.queryEditIndex(_this._customQueries().indexOf(query));
                                    _this.popupQueryBuilder.show(query, _this.dataSourceClone());
                                }
                            }
                            else {
                                _this.queryEditIndex(-1);
                                if (isCustomQuery) {
                                    _this.showStatementPopup(new DevExpress.Data.CustomSqlQuery({ "@Name": null }, _this.dataSourceClone()));
                                }
                                else {
                                    var queryNew = new DevExpress.Data.TableQuery({ "@Name": null }, _this.dataSourceClone());
                                    _this.popupQueryBuilder.show(queryNew, _this.dataSourceClone());
                                }
                            }
                        };
                        this.beginAsync = function (data) {
                            if (_this._data !== data || data.connectionString() !== _this._connection) {
                                _this._customQueries([]);
                                _this._selectedPath("");
                                _this._dataSourceClone = new DevExpress.Data.SqlDataSource({});
                                _this._dataSourceClone.connection.name(data.connectionString());
                                _this._itemsProvider(new Wizard.DBSchemaItemsProvider(_this.dataSourceClone().dbSchemaProvider, _this._customQueries, _this.showQbCallBack, _this.disableCustomSql));
                                _this.fieldListModel({
                                    itemsProvider: _this._itemsProvider(),
                                    selectedPath: _this._selectedPath,
                                    treeListController: new DBSchemaTreeListController(),
                                    templateName: "dxrd-treelist-with-checkbox"
                                });
                                _this.popupQueryBuilder.isVisible(false);
                                return _this.dataSourceClone()
                                    .dbSchemaProvider.getDbSchema()
                                    .done(function () {
                                    _this._connection = data.connectionString();
                                    _this._data = data;
                                });
                            }
                            return $.Deferred().resolve({}).promise();
                        };
                        this.commit = function (data) {
                            data.dataSource.queries.removeAll(_this._chechedQueries());
                            _this._chechedQueries([]);
                            _this._addQueryAlgorithm(_this._itemsProvider().tables(), "tables", data.dataSource);
                            _this._addQueryAlgorithm(_this._itemsProvider().views(), "views", data.dataSource);
                            _this._addQueryAlgorithm(_this._itemsProvider().procedures(), "procedures", data.dataSource);
                            _this._addQueryAlgorithm(_this._itemsProvider().queries(), "queries", data.dataSource, _this._customQueries);
                            data.customQueries = _this._customQueries;
                            ko.utils.arrayPushAll(data.dataSource.queries(), _this._chechedQueries());
                            data.dataSource.queries.valueHasMutated();
                        };
                        this.popupQueryBuilder = new Wizard.QueryBuilderPopup(function (newQuery) { _this.setQuery(newQuery); }, rtl);
                        this.fieldListModel = ko.observable(null);
                        this.actionPrevious.isDisabled = ko.pureComputed(function () { return false; });
                        this.actionFinish.isDisabled = ko.pureComputed(function () { return !_this._itemsProvider() || !_this._itemsProvider().hasCheckedItems() || _this.isTablesGenerateColumnsCallBack().length > 0; });
                        this.actionNext.isDisabled = ko.pureComputed(function () { return _this._itemsProvider().nextButtonDisabled() || _this.actionFinish.isDisabled(); });
                        this.disableCustomSql = disableCustomSql;
                        this.actionCancel.handler = function () {
                            wizard.cancel();
                        };
                        this.getItemsAfterCheck = function (node) {
                            _this._resetDataSourceResult();
                            if (node.checked.peek() && node.isList) {
                                if (node.name === "tables" || node.name === "views") {
                                    _this._itemsProvider().getItems(new DevExpress.JS.Widgets.PathRequest(node.name)).done(function () {
                                        if (node.isList && node.children.peek().length > 0) {
                                            node.children.peek().forEach(function (item) {
                                                _this._getItemsPromise(new DevExpress.JS.Widgets.PathRequest(node.name + "." + item.name));
                                            });
                                        }
                                    });
                                }
                                else if (node.specifics === "table" || node.specifics === "view") {
                                    _this._getItemsPromise(new DevExpress.JS.Widgets.PathRequest(node.specifics + "." + node.name));
                                }
                                else if (node.name === "procedures") {
                                    _this._getItemsPromise(new DevExpress.JS.Widgets.PathRequest(node.name));
                                }
                            }
                        };
                    }
                    Object.defineProperty(AddQueriesPage.prototype, "_dataSource", {
                        get: function () {
                            return this._data && this._data.dataSource;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    AddQueriesPage.prototype._addQueryAlgorithm = function (elements, specifics, dataSource, customQueries) {
                        if (!elements.unChecked() || specifics === "queries") {
                            if (elements.children().length === 0) {
                                this._itemsProvider().getItems(new DevExpress.JS.Widgets.PathRequest(specifics));
                            }
                            if (specifics === "tables" || specifics === "views") {
                                this._addQueryFromTables(elements, dataSource);
                            }
                            else if (specifics === "procedures") {
                                this._addQueryFromStoredProcedures(elements, dataSource);
                            }
                            else {
                                this._addQueryFromCustomQueries(elements, customQueries, dataSource.queries);
                            }
                        }
                        else {
                            elements.children().forEach(function (node) {
                                AddQueriesPage.removeQuery(dataSource.queries, node);
                            });
                        }
                    };
                    AddQueriesPage.prototype._addQueryFromTables = function (elements, dataSource) {
                        var _self = this;
                        for (var i = 0; i < elements.children().length; i++) {
                            var table = elements.children()[i];
                            if (!table.unChecked()) {
                                var columns = {};
                                var queryJSON = {
                                    "Columns": columns,
                                    "Tables": {
                                        "SelectedTables": {
                                            "Item1": {
                                                "@Name": table.name,
                                                "@ControlType": "Table",
                                                "@ItemType": "Table"
                                            }
                                        },
                                    }
                                };
                                if (table.children().length === 0) {
                                    this._itemsProvider().getItems(new DevExpress.JS.Widgets.PathRequest("tables." + table.name)).done(function () {
                                        table.initializeChildern(table.children());
                                    });
                                }
                                for (var j = 0; j < table.children().length; j++) {
                                    var column = table.children()[j];
                                    if (column.checked()) {
                                        columns["Item" + (j + 1)] = {
                                            "@Table": table.name,
                                            "@Name": column.name,
                                            "@ItemType": "Column"
                                        };
                                    }
                                }
                                AddQueriesPage.pushQuery(new DevExpress.Data.TableQuery(queryJSON, dataSource), table, dataSource.queries);
                            }
                            else {
                                AddQueriesPage.removeQuery(dataSource.queries, table);
                            }
                        }
                    };
                    AddQueriesPage.prototype._addQueryFromStoredProcedures = function (elements, dataSource) {
                        for (var i = 0; i < elements.children().length; i++) {
                            var procedure = elements.children()[i];
                            if (procedure.checked()) {
                                var newQuery = new DevExpress.Data.StoredProcQuery({ "@Name": procedure.name, "ProcName": procedure.name }, dataSource);
                                procedure.arguments.forEach(function (arg) {
                                    newQuery.parameters.push(new DevExpress.Data.DataSourceParameter({ "@Name": arg.name, "@Type": DevExpress.Data.DBColumn.GetType(arg.type) }, null, DevExpress.Data.storedProcParameterSerializationsInfo(DevExpress.Data.DBColumn.GetType(arg.type))));
                                });
                                AddQueriesPage.pushQuery(newQuery, procedure, dataSource.queries);
                            }
                            else {
                                AddQueriesPage.removeQuery(dataSource.queries, procedure);
                            }
                        }
                    };
                    AddQueriesPage.prototype._addQueryFromCustomQueries = function (elements, queries, allQueries) {
                        for (var i = 0; i < elements.children().length; i++) {
                            var queryNode = elements.children()[i];
                            var query = Designer.findFirstItemMatchesCondition(queries.peek(), function (item) { return queryNode.name === (item.name() || item.generateName()); });
                            if (queryNode.checked()) {
                                query.name(DevExpress.Data.generateQueryUniqueName(allQueries.peek(), query));
                                this._chechedQueries.push(query);
                            }
                        }
                    };
                    AddQueriesPage.prototype._getItemsPromise = function (pathRequest) {
                        var _this = this;
                        var isDone = false;
                        var request = this._itemsProvider().getItems(pathRequest).done(function () {
                            _this.isTablesGenerateColumnsCallBack.remove(request);
                            isDone = true;
                        });
                        if (!isDone) {
                            this.isTablesGenerateColumnsCallBack.push(request);
                        }
                    };
                    AddQueriesPage.prototype._resetDataSourceResult = function () {
                        this._dataSource.relations([]);
                        this._dataSource.resultSet = null;
                    };
                    AddQueriesPage.pushQuery = function (newQuery, node, queries) {
                        if (!Designer.findFirstItemMatchesCondition(queries.peek(), function (item) { return item.name() === (newQuery.name() || newQuery.generateName()); })) {
                            newQuery.name(DevExpress.Data.generateQueryUniqueName(queries.peek(), newQuery));
                            queries.push(newQuery);
                        }
                        node.hasQuery = true;
                    };
                    AddQueriesPage.removeQuery = function (queries, node) {
                        if (node.hasQuery) {
                            var queryIndex = -1;
                            var existUncheck = queries.peek().some(function (value, index) {
                                if (value.name() === node.name || value.generateName() === node.name) {
                                    queryIndex = index;
                                    return true;
                                }
                                return false;
                            });
                            if (existUncheck) {
                                queries.splice(queryIndex, 1);
                            }
                            node.hasQuery = false;
                        }
                    };
                    AddQueriesPage.prototype.dataSourceClone = function () {
                        return this._dataSourceClone;
                    };
                    AddQueriesPage.prototype.AddQueryWithBuilder = function () {
                    };
                    AddQueriesPage.prototype.runQueryBuilder = function () {
                    };
                    AddQueriesPage.prototype.setQuery = function (query) {
                        var provider = this.fieldListModel().itemsProvider;
                        if (this.queryEditIndex() >= 0) {
                            provider.customQueries().splice(this.queryEditIndex(), 1, query);
                        }
                        else {
                            query.name(DevExpress.Data.generateQueryUniqueName(provider.customQueries().peek(), query));
                            provider.customQueries().push(query);
                        }
                        this._selectedPath("queries." + query.name());
                        this._resetDataSourceResult();
                    };
                    return AddQueriesPage;
                })(Wizard.WizardPage);
                Wizard.AddQueriesPage = AddQueriesPage;
                var DBSchemaTreeListController = (function (_super) {
                    __extends(DBSchemaTreeListController, _super);
                    function DBSchemaTreeListController() {
                        _super.apply(this, arguments);
                    }
                    DBSchemaTreeListController.prototype.getActions = function (value) {
                        var result = [];
                        var query = value.data;
                        return query.getActions(value);
                    };
                    DBSchemaTreeListController.prototype.canSelect = function (value) {
                        return true;
                    };
                    return DBSchemaTreeListController;
                })(DevExpress.JS.Widgets.TreeListController);
                Wizard.DBSchemaTreeListController = DBSchemaTreeListController;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var MasterDetailRelationsPage = (function (_super) {
                    __extends(MasterDetailRelationsPage, _super);
                    function MasterDetailRelationsPage(wizard, sqlDataSourceResultSchema) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-wizard-configure-relations-page";
                        this.description = Designer.getLocalization("Configure master-detail relationships.", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_PageConfigureMasterDetailRelations");
                        this.relationsEditor = ko.observable(null);
                        this.beginAsync = function (data) {
                            if (data.dataSource.resultSet) {
                                _this.relationsEditor(new DevExpress.Data.MasterDetailEditor(data.dataSource, $.noop));
                                return $.Deferred().resolve({}).promise();
                            }
                            else {
                                return _this._sqlDataSourceResultSchema(data.dataSource).done((function (result) {
                                    _this._tempDataSource = new DevExpress.Data.SqlDataSource(JSON.parse(result.dataSourceStructure));
                                    _this.relationsEditor(new DevExpress.Data.MasterDetailEditor(_this._tempDataSource, $.noop));
                                }))
                                    .fail(function (result) {
                                    if (Designer.getErrorMessage(result))
                                        Designer.ShowMessage(Designer.getErrorMessage(result));
                                    _this.wizard.indicatorVisible(false);
                                    $.Deferred().reject().promise();
                                });
                            }
                        };
                        this.commit = function (data) {
                            data.dataSource.relations = _this._tempDataSource.relations;
                            data.dataSource.resultSet = _this._tempDataSource.resultSet;
                        };
                        this._sqlDataSourceResultSchema = sqlDataSourceResultSchema;
                        this.actionNext.isVisible(false);
                    }
                    return MasterDetailRelationsPage;
                })(Wizard.WizardPage);
                Wizard.MasterDetailRelationsPage = MasterDetailRelationsPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var ConfigureParametersCompleteWizardPage = (function (_super) {
                    __extends(ConfigureParametersCompleteWizardPage, _super);
                    function ConfigureParametersCompleteWizardPage(wizard, parametersConverter) {
                        var _this = this;
                        if (parametersConverter === void 0) { parametersConverter = {
                            createParameterViewModel: function (parameter) { return parameter; },
                            getParameterFromViewModel: function (parameterViewModel) { return parameterViewModel; }
                        }; }
                        _super.call(this, wizard);
                        this.parametersConverter = parametersConverter;
                        this._selectedPath = ko.observable(null);
                        this._itemsProvider = ko.observable();
                        this.template = "dxrd-configure-query-parameters-page";
                        this.description = Designer.getLocalization("Configure query parameters.", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_PageConfigureParameters");
                        this.addParameterCallBack = function (query) {
                            var newParameter = _this.parametersConverter.createParameterViewModel(new DevExpress.Data.DataSourceParameter({
                                "@Name": Designer.getUniqueNameForNamedObjectsArray(query.parameters.peek(), "param"),
                                "@Type": "System.Int32"
                            }));
                            query.parameters.push(newParameter);
                            _this._selectedPath(query.name() + "." + newParameter.name());
                        };
                        this._begin = function (data) {
                            _this._storedAndCustomQueries = data.dataSource.queries().filter(function (item) {
                                if (item.type() === DevExpress.Data.SqlQueryType.tableQuery || item.type() === DevExpress.Data.SqlQueryType.customSqlQuery) {
                                    var tableQuery = item;
                                    return data.customQueries().indexOf(tableQuery) > -1;
                                }
                                return item.type() === DevExpress.Data.SqlQueryType.storedProcQuery && item.parameters().length > 0;
                            });
                            if (_this._storedAndCustomQueries.length === 0) {
                                _this.isVisible = false;
                            }
                            else {
                                _this.isVisible = true;
                                _this.actionNext.isDisabled(data.dataSource.queries().length < 2);
                                _this._itemsProvider(new DBSchemaParametrsProvider(_this._storedAndCustomQueries, _this.parametersConverter, _this.addParameterCallBack));
                                _this.fieldListModel({
                                    itemsProvider: _this._itemsProvider(),
                                    selectedPath: _this._selectedPath,
                                    treeListController: new DBSchemaTreeListParamsController(),
                                });
                            }
                        };
                        this.commit = function (data) {
                        };
                        this.fieldListModel = ko.observable(null);
                        this.actionPrevious.isDisabled(false);
                        this.actionFinish.isDisabled(false);
                    }
                    return ConfigureParametersCompleteWizardPage;
                })(Wizard.WizardPage);
                Wizard.ConfigureParametersCompleteWizardPage = ConfigureParametersCompleteWizardPage;
                var DBSchemaParametrsProvider = (function () {
                    function DBSchemaParametrsProvider(queries, parametersConverter, addParameterCallBack) {
                        this.getItems = function (pathRequest) {
                            var result = $.Deferred();
                            if (!pathRequest.fullPath) {
                                var parametersTitles = queries.map(function (query) {
                                    return new TreeParam(query.name(), query.name(), "queries", query, addParameterCallBack);
                                });
                                result.resolve(parametersTitles);
                            }
                            else {
                                var queryParent = Designer.findFirstItemMatchesCondition(queries, function (item) { return item.name() === pathRequest.ref; });
                                var param = queryParent.parameters().map(function (param) {
                                    var dataSorceParameter = ko.observable(parametersConverter.getParameterFromViewModel(param));
                                    var treeviewparameter = new TreeLeafParam(param.name(), param.name(), "parameters", queryParent);
                                    treeviewparameter.dataSorceParameter = dataSorceParameter;
                                    return treeviewparameter;
                                });
                                result.resolve(param);
                            }
                            return result.promise();
                        };
                    }
                    return DBSchemaParametrsProvider;
                })();
                Wizard.DBSchemaParametrsProvider = DBSchemaParametrsProvider;
                var TreeLeafParam = (function () {
                    function TreeLeafParam(name, displayName, specifics, query) {
                        var _this = this;
                        this.name = name;
                        this.displayName = displayName;
                        this.specifics = specifics;
                        this.isList = false;
                        this.contenttemplate = "dx-treelist-accordion-contenttemplate-custom-with-actions";
                        this.addAction = {
                            clickAction: function (item) {
                                return _this.add();
                            },
                            imageClassName: "dxrd-image-add",
                            text: Designer.getLocalization("Add parameter")
                        };
                        this.removeAction = {
                            clickAction: function (item) {
                                _this.remove({ model: item.data });
                            },
                            imageClassName: "dxrd-image-recycle-bin",
                            text: Designer.getLocalization("Remove parameter", "DataAccessUIStringId.Button_Remove"),
                            visible: true
                        };
                        this.templateName = "dx-treelist-item";
                        this.editor = DevExpress.JS.Widgets.editorTemplates.commonCollection;
                        this.query = query;
                        this.remove = function (e) {
                            _this.query.parameters.splice(query.parameters.indexOf(e.model), 1);
                        };
                    }
                    TreeLeafParam.prototype.getActions = function () {
                        var result = [];
                        if (this.specifics === "parameters") {
                            if (this.query && this.query.type() === DevExpress.Data.SqlQueryType.storedProcQuery)
                                this.removeAction.visible = false;
                            else
                                this.removeAction.visible = true;
                            result.push(this.removeAction);
                        }
                        if (this.specifics === "queries" && !(this.query && this.query.type() === DevExpress.Data.SqlQueryType.storedProcQuery)) {
                            result.push(this.addAction);
                        }
                        return result;
                    };
                    return TreeLeafParam;
                })();
                Wizard.TreeLeafParam = TreeLeafParam;
                var TreeParam = (function (_super) {
                    __extends(TreeParam, _super);
                    function TreeParam(name, displayName, specifics, query, addParameterCallBack) {
                        _super.call(this, name, displayName, specifics, query);
                        this.contenttemplate = "";
                        this.isList = true;
                        this.add = function () {
                            addParameterCallBack(query);
                        };
                    }
                    return TreeParam;
                })(TreeLeafParam);
                Wizard.TreeParam = TreeParam;
                var DBSchemaTreeListParamsController = (function (_super) {
                    __extends(DBSchemaTreeListParamsController, _super);
                    function DBSchemaTreeListParamsController() {
                        _super.apply(this, arguments);
                    }
                    DBSchemaTreeListParamsController.prototype.getActions = function (value) {
                        var data = value.data;
                        return data.getActions();
                    };
                    DBSchemaTreeListParamsController.prototype.canSelect = function (value) {
                        return true;
                    };
                    return DBSchemaTreeListParamsController;
                })(DevExpress.JS.Widgets.TreeListController);
                Wizard.DBSchemaTreeListParamsController = DBSchemaTreeListParamsController;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var TreeLeafNode = (function () {
                    function TreeLeafNode(name, displayName, specifics, isChecked, nodeArguments) {
                        var _this = this;
                        if (isChecked === void 0) { isChecked = false; }
                        if (nodeArguments === void 0) { nodeArguments = null; }
                        this.name = name;
                        this.displayName = displayName;
                        this.specifics = specifics;
                        this.isList = false;
                        this.hasQuery = false;
                        this.checked = ko.pureComputed(function () { return _this._checked(); });
                        this.addAction = null;
                        this._checked = ko.observable(isChecked);
                        this.arguments = nodeArguments;
                    }
                    TreeLeafNode.prototype.unChecked = function () {
                        return this.checked() === false;
                    };
                    TreeLeafNode.prototype.toggleChecked = function () {
                        this.setChecked(!this.checked.peek());
                    };
                    TreeLeafNode.prototype.afterCheckedCallBack = function (parents) {
                        var page = parents.slice(-4, -3)[0];
                        if (page && page instanceof Wizard.AddQueriesPage) {
                            page.getItemsAfterCheck(this);
                        }
                    };
                    TreeLeafNode.prototype.setChecked = function (value) {
                        this._checked(value);
                    };
                    TreeLeafNode.prototype.initializeChildern = function (children) {
                    };
                    TreeLeafNode.prototype.getActions = function (context) {
                        return null;
                    };
                    return TreeLeafNode;
                })();
                Wizard.TreeLeafNode = TreeLeafNode;
                var TreeNode = (function (_super) {
                    __extends(TreeNode, _super);
                    function TreeNode(name, displayName, specifics, isChecked, callbacks) {
                        var _this = this;
                        _super.call(this, name, displayName, specifics, isChecked);
                        this.isList = true;
                        this.children = ko.observableArray([]);
                        this.countChecked = ko.pureComputed(function () {
                            var count = 0;
                            _this.hasParamsToEdit(false);
                            for (var i = 0; i < _this.children().length; i++) {
                                if (!_this.children()[i].unChecked()) {
                                    if (count > 1)
                                        break;
                                    count++;
                                    if (_this.children()[i].arguments && _this.children()[i].arguments.length > 0)
                                        _this.hasParamsToEdit(true);
                                    if (_this.children()[i].specifics === "query")
                                        _this.hasParamsToEdit(true);
                                }
                            }
                            return count;
                        });
                        this.hasParamsToEdit = ko.observable(false);
                        this.addAction = {
                            clickAction: function (item) {
                                if (_this.disableCustomSql()) {
                                    return _this.addQuery();
                                }
                                else {
                                    return _this.showPopover();
                                }
                            },
                            imageClassName: "dxrd-image-add",
                            templateName: "dx-treelist-action-with-popover",
                            text: Designer.getLocalization("Add query", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_AddQuery")
                        };
                        this.popoverVisible = ko.observable(false);
                        this.itemClickAction = function (e) {
                            _this.popoverVisible(false);
                            e.itemData.addAction();
                        };
                        this.checked = ko.pureComputed({
                            read: function () {
                                if (!_this.initialized()) {
                                    return _this._checked();
                                }
                                else {
                                    var selectedItems = 0;
                                    var partiallySelectedItems = 0;
                                    _this.children().forEach(function (item) {
                                        if (item.checked() === true) {
                                            selectedItems++;
                                        }
                                        else if (item.checked() !== false) {
                                            partiallySelectedItems++;
                                        }
                                    });
                                    if (selectedItems === 0 && partiallySelectedItems === 0) {
                                        return false;
                                    }
                                    if (selectedItems === _this.children.peek().length) {
                                        return true;
                                    }
                                    return undefined;
                                }
                            }
                        });
                        this.addQuery = function () {
                            callbacks().showQbCallBack();
                        };
                        this.addCustomQuery = function () {
                            callbacks().showQbCallBack(null, true);
                        };
                        this.disableCustomSql = function () { return callbacks && callbacks().disableCustomSql; };
                    }
                    TreeNode.prototype.initialized = function () {
                        return this.children().length > 0;
                    };
                    TreeNode.prototype.setChecked = function (value) {
                        this._checked(value);
                        this.children.peek().forEach(function (item) {
                            item.setChecked(value);
                        });
                    };
                    TreeNode.prototype.initializeChildern = function (children) {
                        this.children(children);
                    };
                    TreeNode.prototype.getActions = function (context) {
                        var result = [];
                        if (context.hasItems && context.path.indexOf("queries") === 0) {
                            result.push(this.addAction);
                        }
                        return result;
                    };
                    TreeNode.prototype.popoverListItems = function () {
                        var _this = this;
                        return [
                            {
                                name: Designer.getLocalization("Run Query Builder", "DataAccessUIStringId.Button_QueryBuilder"),
                                addAction: function () { return _this.addQuery(); }
                            },
                            {
                                name: Designer.getLocalization("Write Custom SQL", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_WriteCustomSQL"),
                                addAction: function () { return _this.addCustomQuery(); }
                            }];
                    };
                    TreeNode.prototype.showPopover = function () {
                        this.popoverVisible(true);
                    };
                    return TreeNode;
                })(TreeLeafNode);
                Wizard.TreeNode = TreeNode;
                var TreeQueryNode = (function (_super) {
                    __extends(TreeQueryNode, _super);
                    function TreeQueryNode(name, displayName, specifics, isChecked, parameters, callbacks) {
                        var _this = this;
                        _super.call(this, name, displayName, specifics, isChecked);
                        this.editAction = {
                            clickAction: function (item) {
                                return _this.editQuery();
                            },
                            imageClassName: "dx-image-edit",
                            text: Designer.getLocalization("Edit query", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_EditQuery")
                        };
                        this.removeAction = {
                            clickAction: function (item) {
                                _this.removeQuery({ model: item.data });
                            },
                            imageClassName: "dxrd-image-recycle-bin",
                            text: Designer.getLocalization("Remove query", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_RemoveQuery")
                        };
                        this.parameters = parameters;
                        this.removeQuery = function (e) {
                            callbacks().deleteAction(e.model.name);
                        };
                        this.editQuery = function (e) {
                            callbacks().showQbCallBack(_this.name);
                        };
                        this.hasQuery = true;
                    }
                    TreeQueryNode.prototype.getActions = function (context) {
                        var result = [];
                        result.push(this.removeAction);
                        result.push(this.editAction);
                        return result;
                    };
                    return TreeQueryNode;
                })(TreeLeafNode);
                Wizard.TreeQueryNode = TreeQueryNode;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var CompleteSqlDataSourceWizard = (function (_super) {
                    __extends(CompleteSqlDataSourceWizard, _super);
                    function CompleteSqlDataSourceWizard(connectionStrings, callbacks, disableCustomSql, rtl) {
                        if (rtl === void 0) { rtl = false; }
                        _super.call(this);
                        this.height = ko.observable("443");
                        this.title = Designer.getLocalization("SQL Data Source Wizard", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_Title");
                        this.extendCssClass = "dxrd-myltiquery-sqldatasource-wizard";
                        this.container = function (element) { return $(element).closest('.dx-viewport'); };
                        this.finishCallback = callbacks.finishCallback;
                        this.steps = [
                            new Wizard.SelectConnectionString(this, connectionStrings),
                            new Wizard.AddQueriesPage(this, callbacks, disableCustomSql, rtl),
                            new Wizard.ConfigureParametersCompleteWizardPage(this),
                            new Wizard.MasterDetailRelationsPage(this, callbacks.sqlDataSourceResultSchema)
                        ];
                        this.connectionStrings = connectionStrings;
                    }
                    CompleteSqlDataSourceWizard.prototype.start = function (wizardModel) {
                        this.wizardModel = wizardModel = wizardModel || new CompleteSqlDataSourceWizardModel();
                        _super.prototype.start.call(this, this.wizardModel);
                    };
                    CompleteSqlDataSourceWizard.prototype.finish = function () {
                        var _this = this;
                        this.indicatorVisible(true);
                        this.currentStep.commit(this.wizardModel);
                        this.finishCallback(this.wizardModel).done(function (result) {
                            _this.isVisible(false);
                        }).fail(function () {
                            _this.indicatorVisible(false);
                        });
                    };
                    return CompleteSqlDataSourceWizard;
                })(Wizard.WizardViewModel);
                Wizard.CompleteSqlDataSourceWizard = CompleteSqlDataSourceWizard;
                var CompleteSqlDataSourceWizardModel = (function () {
                    function CompleteSqlDataSourceWizardModel() {
                        var _this = this;
                        this.connectionString = ko.observable();
                        this.dataSource = new DevExpress.Data.SqlDataSource({});
                        this.connectionString = this.dataSource.connection.name;
                        this.connectionString.subscribe(function () {
                            _this.dataSource.relations([]);
                            _this.dataSource.queries([]);
                        });
                    }
                    return CompleteSqlDataSourceWizardModel;
                })();
                Wizard.CompleteSqlDataSourceWizardModel = CompleteSqlDataSourceWizardModel;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var DisplayNameProvider = (function () {
                function DisplayNameProvider(_fieldsProvider, _dataSourceHelper, _rootDS) {
                    this._fieldsProvider = _fieldsProvider;
                    this._dataSourceHelper = _dataSourceHelper;
                    this._rootDS = _rootDS;
                    this._requests = {};
                    this._fieldsProvider = _fieldsProvider;
                    this._dataSourceHelper = _dataSourceHelper;
                    this._rootDS = _rootDS;
                }
                DisplayNameProvider.prototype._getRequest = function (path) {
                    var _this = this;
                    if (!this._requests[path]) {
                        var pathRequest = new DevExpress.JS.Widgets.PathRequest(path);
                        this._requests[path] = ko.pureComputed(function () { return _this._fieldsProvider.getItems(pathRequest); });
                    }
                    return this._requests[path];
                };
                DisplayNameProvider.prototype._getDisplayNameRequest = function (path, fieldName) {
                    var _this = this;
                    var def = $.Deferred();
                    this._getRequest(path)().done(function (data) {
                        var displayName = _this._getFieldDisplayName(data, fieldName);
                        if (!displayName)
                            def.reject();
                        else
                            def.resolve(displayName);
                    }).fail(function () {
                        def.reject();
                    });
                    return def.promise();
                };
                DisplayNameProvider.prototype._createRequestInfo = function (dataSource, path, dataMember, dataMemberOffset, includeDataSourceName) {
                    if (!dataMember)
                        return null;
                    var dataSourceName = null;
                    if (!path) {
                        var ds = (dataSource || this._rootDS());
                        var dsInfo = ds && this._dataSourceHelper.findDataSourceInfo(ds);
                        if (!dsInfo)
                            return null;
                        path = (dsInfo.ref || dsInfo.id);
                        if (includeDataSourceName)
                            dataSourceName = dsInfo.name;
                    }
                    var offset = Report.getFullPath(path, dataMemberOffset);
                    return {
                        fullPath: offset + "." + dataMember,
                        offset: offset,
                        dataMember: dataMember,
                        dataMemberParts: dataMember.split('.'),
                        dataSourceName: dataSourceName
                    };
                };
                DisplayNameProvider.prototype._getFieldDisplayName = function (fields, fieldName) {
                    var field = Designer.findFirstItemMatchesCondition(fields, function (field) { return field.name === fieldName; });
                    return field ? field.displayName : null;
                };
                DisplayNameProvider.prototype._getDisplayName = function (request) {
                    var def = $.Deferred();
                    if (!request) {
                        def.reject();
                        return def;
                    }
                    var fieldsRequests = [];
                    for (var i = -1, path = request.offset; i < request.dataMemberParts.length - 1;) {
                        fieldsRequests.push(this._getDisplayNameRequest(path, request.dataMemberParts[i + 1]));
                        path += "." + request.dataMemberParts[++i];
                    }
                    $.when.apply($, fieldsRequests).done(function () {
                        var result = request.dataSourceName ? (request.dataSourceName + " - ") : "";
                        for (var i = 0; i < arguments.length; i++) {
                            result += arguments[i];
                            if (i < arguments.length - 1)
                                result += ".";
                        }
                        def.resolve(result);
                    }).fail(function () { return def.reject(); });
                    return def.promise();
                };
                DisplayNameProvider.prototype._getRealNameRequest = function (path, dataMember) {
                    var _this = this;
                    var def = $.Deferred();
                    this._getRequest(path)()
                        .done(function (items) {
                        var targetItem = items.filter(function (item) { return dataMember.indexOf(item.displayName + '.') === 0 || dataMember === item.displayName; })[0];
                        if (targetItem) {
                            dataMember === targetItem.displayName ? def.resolve(targetItem.name) :
                                _this._getRealNameRequest(path + "." + targetItem.name, dataMember.substring(targetItem.displayName.length + 1))
                                    .done(function (data) {
                                    def.resolve(targetItem.name + "." + data);
                                })
                                    .fail(function () {
                                    def.reject();
                                });
                        }
                        else {
                            def.reject();
                        }
                    })
                        .fail(function () {
                        def.reject();
                    });
                    return def.promise();
                };
                DisplayNameProvider.prototype.getDisplayName = function (dataSource, dataMember, dataMemberOffset, includeDataSourceName) {
                    if (dataMemberOffset === void 0) { dataMemberOffset = ""; }
                    if (includeDataSourceName === void 0) { includeDataSourceName = true; }
                    var request = this._createRequestInfo(dataSource, null, dataMember, dataMemberOffset, includeDataSourceName);
                    return this._getDisplayName(request);
                };
                DisplayNameProvider.prototype.getDisplayNameByPath = function (path, dataMember) {
                    var request = this._createRequestInfo(null, path, dataMember, "", false);
                    return this._getDisplayName(request);
                };
                DisplayNameProvider.prototype.getRealName = function (path, displayDataMember) {
                    var request = this._createRequestInfo(null, path, displayDataMember, "", false);
                    if (!request)
                        return $.Deferred().reject().promise();
                    return this._getRealNameRequest(request.offset, request.dataMember);
                };
                DisplayNameProvider.prototype.dispose = function () {
                    for (var key in this._requests) {
                        this._requests[key].dispose();
                        delete this._requests[key];
                    }
                };
                return DisplayNameProvider;
            })();
            Report.DisplayNameProvider = DisplayNameProvider;
            var DisplayExpressionConverter = (function () {
                function DisplayExpressionConverter(displayNameProvider) {
                    this.displayNameProvider = displayNameProvider;
                }
                DisplayExpressionConverter.prototype._replaceNames = function (path, expression, getDisplayExpression) {
                    var _this = this;
                    var def = $.Deferred();
                    if (!expression)
                        return def.resolve("").promise();
                    try {
                        var expressionCriteria = DevExpress.JS.Data.CriteriaOperator.parse(expression);
                    }
                    catch (e) {
                        return def.reject().promise();
                    }
                    var requests = [];
                    var result = [];
                    DevExpress.JS.Data.criteriaForEach(expressionCriteria, function (operator) {
                        if (operator instanceof DevExpress.JS.Data.OperandProperty) {
                            var isContainsParentRelationshipTraversalOperator = operator.propertyName.indexOf("^.") === 0;
                            var propertyName = isContainsParentRelationshipTraversalOperator ? operator.propertyName.substring(2) : operator.propertyName;
                            var request = getDisplayExpression ? _this.displayNameProvider.getDisplayNameByPath(path, propertyName) :
                                _this.displayNameProvider.getRealName(path, propertyName);
                            requests.push(request.done(function (data) { return result.push({
                                operand: operator,
                                convertedName: isContainsParentRelationshipTraversalOperator ? "^." + data : data
                            }); }));
                        }
                    });
                    if (requests.length === 0) {
                        def.resolve(expression);
                    }
                    else {
                        var processedRequestsCount = 0;
                        var onAlways = function () {
                            if (++processedRequestsCount < requests.length)
                                return;
                            var lines = expression.split('\n');
                            for (var i = 0; i < lines.length; i++) {
                                var operands = result.filter(function (value) { return value.operand.startPosition.line === i; });
                                for (var j = 0, delta = 0; j < operands.length; j++) {
                                    var column = operands[j].operand.startPosition.column;
                                    var originalName = operands[j].operand.propertyName;
                                    var convertedName = operands[j].convertedName;
                                    if (!originalName || column < 0)
                                        continue;
                                    lines[i] = lines[i].substring(0, column + delta) + convertedName + lines[i].substring(column + originalName.length + delta);
                                    delta += convertedName.length - originalName.length;
                                }
                            }
                            def.resolve(lines.join('\n'));
                        };
                        requests.forEach(function (r) { return r.always(onAlways); });
                    }
                    return def.promise();
                };
                DisplayExpressionConverter.prototype.toDisplayExpression = function (path, expression) {
                    return this._replaceNames(path, expression, true);
                };
                DisplayExpressionConverter.prototype.toRealExpression = function (path, expression) {
                    return this._replaceNames(path, expression, false);
                };
                return DisplayExpressionConverter;
            })();
            Report.DisplayExpressionConverter = DisplayExpressionConverter;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.editOptionsSerializationInfo = [
                { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.boolSelect },
                { propertyName: "id", modelName: "@ID", displayName: "ID", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "readOnly", modelName: "@ReadOnly", displayName: "Read Only", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.boolSelect }
            ];
            var EditOptions = (function () {
                function EditOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model || {});
                }
                EditOptions.prototype.getInfo = function () {
                    return Report.editOptionsSerializationInfo;
                };
                EditOptions.prototype.isEmpty = function () {
                    return !this.enabled();
                };
                EditOptions.prototype.isPropertyDisabled = function (name) {
                    return name !== "enabled" && !this.enabled();
                };
                return EditOptions;
            })();
            Report.EditOptions = EditOptions;
            var CheckEditOptions = (function (_super) {
                __extends(CheckEditOptions, _super);
                function CheckEditOptions(model, serializer) {
                    _super.call(this, model || {}, serializer);
                }
                CheckEditOptions.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([
                        { propertyName: "groupId", modelName: "@GroupID", displayName: "Group ID", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }
                    ]);
                };
                return CheckEditOptions;
            })(EditOptions);
            Report.CheckEditOptions = CheckEditOptions;
            var TextEditOptions = (function (_super) {
                __extends(TextEditOptions, _super);
                function TextEditOptions(model, serializer) {
                    _super.call(this, model || {}, serializer);
                }
                TextEditOptions.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([
                        { propertyName: "editorName", modelName: "@EditorName", displayName: "Editor Name", defaultVal: "", editor: { header: "dxrd-editOptionsEditorName" } }
                    ]);
                };
                return TextEditOptions;
            })(EditOptions);
            Report.TextEditOptions = TextEditOptions;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var NavigateByReports = (function (_super) {
                __extends(NavigateByReports, _super);
                function NavigateByReports(masterReportModel, reportUrl) {
                    var _this = this;
                    _super.call(this);
                    this._isReportLoading = ko.observable(false);
                    this.save = function (tab) { return void 0; };
                    this.height = ko.observable(0);
                    this.tabs = ko.observableArray([]);
                    this.selectedIndex = ko.observable(0);
                    var currentTab = null;
                    this.currentTab = ko.pureComputed(function () {
                        if (_this.selectedIndex() !== -1) {
                            currentTab = _this.tabs.peek()[_this.selectedIndex()];
                            _this._isReportLoading(true);
                            return currentTab;
                        }
                        else {
                            return currentTab;
                        }
                    });
                    this.addTab(masterReportModel, reportUrl || ko.observable(null));
                    this.currentTab.subscribe(function (newVal) {
                        setTimeout(function () {
                            _this._isReportLoading(false);
                            _this.height.notifySubscribers();
                            _this.checkHeight();
                        }, 1);
                    });
                }
                NavigateByReports.prototype._closeTab = function (tab) {
                    if (this.tabs().indexOf(tab) !== 0) {
                        tab.displayName.dispose();
                        tab.textSubscription.dispose();
                        tab.undoEngine.removeTargetSubscription();
                        tab.undoEngine["_callDisposeFunction"](tab.report());
                        var newIndex = this.tabs().indexOf(tab) - 1;
                        this.tabs.remove(tab);
                        this.selectedIndex(newIndex);
                    }
                };
                NavigateByReports.prototype._createIsDirtyFlag = function (undoEngine) {
                    return ko.pureComputed({
                        read: function () {
                            return undoEngine.isDirty();
                        },
                        write: function (newValue) {
                            undoEngine.isDirty(newValue);
                        }
                    });
                };
                NavigateByReports.prototype._removeTab = function (deletedTab) {
                    var deferred = $.Deferred();
                    deletedTab.close = deferred;
                    if (deletedTab.isDirty()) {
                        this.save(deletedTab);
                    }
                    else {
                        deferred.resolve();
                    }
                    return deferred.promise();
                };
                NavigateByReports.prototype._closeAll = function (deferred) {
                    var _this = this;
                    var self = this;
                    var tab = this.tabs()[this.tabs().length - 1];
                    this._removeTab(tab).done(function () {
                        self._closeTab(tab);
                        if (_this.tabs().indexOf(tab) === -1) {
                            self._closeAll(deferred);
                        }
                        else if (_this.tabs().indexOf(tab) === 0) {
                            deferred.resolve();
                        }
                    });
                };
                NavigateByReports.prototype._getTabByControl = function (report, reportUrl) {
                    return this.tabs().filter(function (tab) { return reportUrl ? tab.url() === reportUrl : tab.report() === report; })[0];
                };
                NavigateByReports.prototype._generateDisplayName = function (model) {
                    var name = model && (model["displayNameObject"]() || model.name());
                    return name;
                };
                NavigateByReports.prototype._addTab = function (report, url, icon) {
                    var _this = this;
                    var undo = new DevExpress.JS.Utils.UndoEngine(report, ["surface", "reportSource"], "getInfo");
                    var displayName = ko.computed(function () {
                        return _this._generateDisplayName(report());
                    });
                    var newTab = {
                        displayName: displayName, report: report, icon: icon,
                        textSubscription: displayName.subscribe(function () { _this.checkHeight(); }),
                        undoEngine: undo,
                        url: url,
                        isDirty: this._createIsDirtyFlag(undo)
                    };
                    if (!displayName()) {
                        newTab.report().name(Designer.getUniqueName(this.tabs().map(function (tab) { return tab.displayName(); }), "Report"));
                        undo.clearHistory();
                    }
                    this.tabs.push(newTab);
                    this.switch(newTab);
                    undo.clearHistory();
                };
                NavigateByReports.prototype.init = function (designerModel) {
                    this._isReportLoading = designerModel.isLoading;
                };
                NavigateByReports.prototype.removeTab = function (tab) {
                    var _this = this;
                    this._removeTab(tab).done(function () {
                        _this._closeTab(tab);
                    });
                };
                NavigateByReports.prototype.closeAll = function () {
                    var deferred = $.Deferred();
                    this._closeAll(deferred);
                    return deferred.promise();
                };
                NavigateByReports.prototype.switch = function (tab) {
                    this.selectedIndex(this.tabs().indexOf(tab));
                };
                NavigateByReports.prototype.goToSubreport = function (subreportSurface) {
                    if (Report.reportStorageWebIsRegister) {
                        var subreportControl = subreportSurface.getControlModel();
                        var self = this;
                        this.addTab(ko.observable(subreportControl.reportSource()), subreportControl.reportSourceUrl, "dx-icon-close");
                    }
                };
                NavigateByReports.prototype.addTab = function (report, url, icon) {
                    var tab = this._getTabByControl(report(), url());
                    if (!tab) {
                        this._addTab(report, url, icon);
                    }
                    else {
                        this.switch(tab);
                    }
                };
                NavigateByReports.prototype.checkHeight = function () {
                    var currentHeight = $(".dxrd-navigation-panel-wrapper").outerHeight();
                    if (this.height() !== currentHeight) {
                        this.height(currentHeight);
                    }
                };
                return NavigateByReports;
            })(Designer.Disposable);
            Report.NavigateByReports = NavigateByReports;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportStorageWeb = (function () {
                function ReportStorageWeb() {
                }
                ReportStorageWeb.getData = function (url) {
                    if (Report.reportStorageWebIsRegister) {
                        return Designer.ajax(Report.HandlerUri, 'getData', encodeURIComponent(JSON.stringify({
                            reportUrl: url
                        })));
                    }
                    else {
                        return $.Deferred().promise();
                    }
                };
                ReportStorageWeb.setData = function (layout, url) {
                    if (Report.reportStorageWebIsRegister) {
                        return Designer.ajax(Report.HandlerUri, 'setData', encodeURIComponent(JSON.stringify({
                            reportLayout: JSON.stringify({
                                "XtraReportsLayoutSerializer": layout
                            }),
                            reportUrl: url
                        })));
                    }
                    else {
                        return $.Deferred().promise();
                    }
                };
                ReportStorageWeb.setNewData = function (layout, url) {
                    if (Report.reportStorageWebIsRegister) {
                        return Designer.ajax(Report.HandlerUri, 'setNewData', encodeURIComponent(JSON.stringify({
                            reportLayout: JSON.stringify({
                                "XtraReportsLayoutSerializer": layout
                            }),
                            reportUrl: url
                        })));
                    }
                    else {
                        return $.Deferred().promise();
                    }
                };
                ReportStorageWeb.getUrls = function (subreports) {
                    if (Report.reportStorageWebIsRegister) {
                        return Designer.ajax(Report.HandlerUri, "getUrls", encodeURIComponent('true'));
                    }
                    else {
                        return $.Deferred().resolve(subreports).promise();
                    }
                };
                return ReportStorageWeb;
            })();
            Report.ReportStorageWeb = ReportStorageWeb;
            var ReportPreviewService = (function () {
                function ReportPreviewService() {
                }
                ReportPreviewService.initializePreview = function (report) {
                    return Designer.ajax(Report.HandlerUri, "initializePreview", encodeURIComponent(JSON.stringify({ "XtraReportsLayoutSerializer": report.serialize() })), DevExpress.Report.Preview.MessageHandler.processError);
                };
                return ReportPreviewService;
            })();
            Report.ReportPreviewService = ReportPreviewService;
            var ReportRenderingService = (function () {
                function ReportRenderingService() {
                }
                ReportRenderingService.getChartImage = function (surface) {
                    return Designer.Chart.ChartRequests.getChartImage(Report.HandlerUri, surface._control["chart"], Designer.unitsToPixel(surface._control.size.width(), surface._context.measureUnit(), surface._context.zoom()), Designer.unitsToPixel(surface._control.size.height(), surface._context.measureUnit(), surface._context.zoom()));
                };
                ReportRenderingService.getShapeImage = function (surface) {
                    var params = {
                        shapeType: surface._control["Shape"]()["shapeType"] && surface._control["Shape"]()["shapeType"]() || "Ellipse",
                        width: surface["_width"](),
                        lineWidth: surface._control["lineWidth"](),
                        fillColor: Designer.colorToString(surface._control["fillColor"]()),
                        height: surface["_height"](),
                        fillet: surface._control["Shape"]()["fillet"] && surface._control["Shape"]()["fillet"]() || 0,
                        numberOfSides: surface._control["Shape"]()["numberOfSides"] && surface._control["Shape"]()["numberOfSides"]() || 3,
                        angle: surface._control["angle"] && surface._control["angle"]() || 0,
                        arrowHeight: surface._control["Shape"]()["arrowHeight"] && surface._control["Shape"]()["arrowHeight"]() || 20,
                        arrowWidth: surface._control["Shape"]()["arrowWidth"] && surface._control["Shape"]()["arrowWidth"]() || 20,
                        concavity: surface._control["Shape"]()["concavity"] && surface._control["Shape"]()["concavity"]() || 5,
                        starPointCount: surface._control["Shape"]()["starPointCount"] && surface._control["Shape"]()["starPointCount"]() || 3,
                        horizontalLineWidth: surface._control["Shape"]()["horizontalLineWidth"] && surface._control["Shape"]()["horizontalLineWidth"]() || 10,
                        verticalLineWidth: surface._control["Shape"]()["verticalLineWidth"] && surface._control["Shape"]()["verticalLineWidth"]() || 10,
                        tipLength: surface._control["Shape"]()["tipLength"] && surface._control["Shape"]()["tipLength"]() || 30,
                        tailLength: surface._control["Shape"]()["tailLength"] && surface._control["Shape"]()["tailLength"]() || 30,
                        foreColor: Designer.colorToString(surface._control["foreColor"] && surface._control["foreColor"]() || "black"),
                        stretch: surface._control["stretch"] && surface._control["stretch"]() || false,
                        dpi: surface._control["dpi"] && surface._control["dpi"]() || 100
                    };
                    return DevExpress.Designer.Report.HandlerUri + "?actionKey=shapeGlyph&arg=" + encodeURIComponent(JSON.stringify(params));
                };
                ReportRenderingService.getRichImage = function (control, propertyName) {
                    return Designer.ajax(Report.HandlerUri, 'renderRich', encodeURIComponent(JSON.stringify({
                        layout: JSON.stringify(new DevExpress.JS.Utils.ModelSerializer().serialize(control)),
                        text: control.textRtf().replace(/\n/g, "\r\n"),
                        rtf: control._rtf().replace(/\n/g, "\r\n"),
                        base64rtf: control._serializableRtfString(),
                        propertyName: propertyName
                    })));
                };
                return ReportRenderingService;
            })();
            Report.ReportRenderingService = ReportRenderingService;
            var FormatStringService = (function () {
                function FormatStringService() {
                }
                FormatStringService.saveCustomPattern = function (typeString, format) {
                    return Designer.ajax(Report.HandlerUri, "formatString", encodeURIComponent(JSON.stringify({ action: "save", typeString: typeString, customFormatString: format })));
                };
                FormatStringService.removeCustomPattern = function (typeString, format) {
                    return Designer.ajax(Report.HandlerUri, "formatString", encodeURIComponent(JSON.stringify({ action: "remove", typeString: typeString, customFormatString: format })));
                };
                FormatStringService.updatePreview = function (value, typeString, format) {
                    return Designer.ajax(Report.HandlerUri, "formatStringPreview", encodeURIComponent(JSON.stringify({ value: value, typeString: typeString, formatString: format })));
                };
                FormatStringService.actions = { updatePreview: FormatStringService.updatePreview, removeCustomPattern: FormatStringService.removeCustomPattern, saveCustomPattern: FormatStringService.saveCustomPattern };
                return FormatStringService;
            })();
            Report.FormatStringService = FormatStringService;
            var ReportScriptService = (function () {
                function ReportScriptService() {
                }
                ReportScriptService.validateScripts = function (report) {
                    return Designer.ajax(Report.HandlerUri, 'validateScripts', encodeURIComponent(JSON.stringify({
                        report: JSON.stringify({
                            "XtraReportsLayoutSerializer": report.serialize()
                        })
                    })));
                };
                ReportScriptService.getCompletions = function (editor, session, pos, prefix, callback, report, editorInstance, guid) {
                    if (guid) {
                        return Designer.ajax(Report.HandlerUri, "getCompletions", encodeURIComponent(JSON.stringify({
                            Line: pos.row,
                            Column: pos.column,
                            Guid: guid,
                            Script: editorInstance.getValue()
                        })));
                    }
                    else {
                        return $.Deferred().resolve().promise();
                    }
                };
                ReportScriptService.setCodeDom = function (reportLayout) {
                    return Designer.ajax(Report.HandlerUri, "setReportLayout", encodeURIComponent(JSON.stringify({
                        ReportLayout: reportLayout
                    })));
                };
                return ReportScriptService;
            })();
            Report.ReportScriptService = ReportScriptService;
            var ReportWizardService = (function () {
                function ReportWizardService() {
                }
                ReportWizardService.createWizardRequest = function (reportWizardModel, state) {
                    var dataSourceJSON = null;
                    if (reportWizardModel.dataSource) {
                        var dataSourceData = new DevExpress.JS.Utils.ModelSerializer().serialize(reportWizardModel.dataSource.data);
                        dataSourceJSON = JSON.stringify(dataSourceData);
                    }
                    var requestJson = JSON.stringify({
                        reportModel: new Report.RequestReportModel(reportWizardModel),
                        dataSource: dataSourceJSON,
                        state: state
                    });
                    return encodeURIComponent(requestJson);
                };
                ReportWizardService.generateReportFromWizardModel = function (reportWizardModel, state) {
                    return Designer.ajax(Report.HandlerUri, 'generateReportFromWizardModel', this.createWizardRequest(reportWizardModel, state));
                };
                ReportWizardService.createDataSource = function (reportWizardModel, state) {
                    return Designer.ajax(Report.HandlerUri, 'createDataSource', this.createWizardRequest(reportWizardModel, state));
                };
                ReportWizardService.getLabelReportWizardData = function () {
                    return Designer.ajax(Report.HandlerUri, 'labelReportWizardData', "");
                };
                return ReportWizardService;
            })();
            Report.ReportWizardService = ReportWizardService;
            var ReportDataSourceService = (function () {
                function ReportDataSourceService() {
                }
                ReportDataSourceService.multipleQueriesRequestJson = function (dataSource) {
                    var queruesJSON = [];
                    dataSource.queries().forEach(function (query, index) {
                        queruesJSON.push(JSON.stringify({ "Query": new DevExpress.JS.Utils.ModelSerializer().serialize(query) }));
                    });
                    return JSON.stringify({
                        connectionString: dataSource.connection.name(),
                        sqlQueriesJSON: queruesJSON,
                        masterDetailRelationsJSON: (dataSource.relations.peek().length) ? JSON.stringify({ "SqlDataSource": new DevExpress.JS.Utils.ModelSerializer().serialize({ relations: dataSource.relations }, [{ propertyName: "relations", modelName: "Relations", array: true }]) }) : null
                    });
                };
                ReportDataSourceService.fieldListCallback = function (request) {
                    var requestJson = JSON.stringify(request);
                    var encodedJson = encodeURIComponent(requestJson);
                    return Designer.ajax(Report.HandlerUri, 'fieldList', encodedJson);
                };
                ReportDataSourceService.getSqlDataSourceResultSchema = function (dataSource) {
                    return Designer.ajax(Report.HandlerUri, "getSqlDataSourceResultSchema", encodeURIComponent(ReportDataSourceService.multipleQueriesRequestJson(dataSource)));
                };
                ReportDataSourceService.getSqlDataSourceStructure = function (dataSource) {
                    var requestJson = JSON.stringify({ dataSourceBase64: dataSource.data["_model"]["@Base64"] });
                    return Designer.ajax(Report.HandlerUri, "getSqlDataSourceStructure", encodeURIComponent(requestJson));
                };
                return ReportDataSourceService;
            })();
            Report.ReportDataSourceService = ReportDataSourceService;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRRichViewModel = (function (_super) {
                __extends(XRRichViewModel, _super);
                function XRRichViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this._lastRequest = ko.observable(null);
                    this._innerUpdate = ko.observable(false);
                    this.textRtf = ko.observable("");
                    this._rtf = ko.observable("");
                    this._imageSrc = ko.observable("");
                    this._sendCallback();
                    this._disposables.push(this.textRtf.subscribe(function (newVal) { _this._sendCallback("textRtf"); }));
                    this._disposables.push(this._rtf.subscribe(function () { _this._sendCallback("rtf"); }));
                    this._disposables.push(this.font.subscribe(function () { _this._sendCallback("font"); }));
                    this._disposables.push(this.foreColor.subscribe(function () { _this._sendCallback("foreColor"); }));
                    this._disposables.push(this.size.height.subscribe(function () { _this._sendCallback("height"); }));
                    this._disposables.push(this.size.width.subscribe(function () { _this._sendCallback("width"); }));
                    this._disposables.push(this._serializableRtfString.subscribe(function () { _this._sendCallback("base64rtf"); }));
                    var nameSubscribe = this.name.subscribe(function (newVal) {
                        if (!_this.textRtf() && newVal) {
                            _this.textRtf(newVal);
                            nameSubscribe.dispose();
                        }
                    });
                }
                XRRichViewModel.prototype._sendCallback = function (propertyName) {
                    if (propertyName === void 0) { propertyName = null; }
                    if (!this._innerUpdate()) {
                        this._lastRequest(propertyName);
                        var self = this;
                        Report.ReportRenderingService.getRichImage(this, propertyName).done(function (result) {
                            if (propertyName === self._lastRequest()) {
                                self.root && self.root["_update"] && self.root["_update"](true);
                                if (propertyName !== "height" && propertyName !== "width") {
                                    self._innerUpdate(true);
                                    if (propertyName !== "textRtf") {
                                        self.textRtf(result.Text);
                                    }
                                    self._rtf(result.Rtf);
                                    self._serializableRtfString(result.SerializableRtfString);
                                    self._innerUpdate(false);
                                }
                                self._imageSrc("data:image/x;base64," + result.Img);
                                self.root && self.root["_update"] && self.root["_update"](false);
                            }
                        }).fail(function (jqXHR) {
                            Designer.NotifyAboutWarning("It is impossible to get richText");
                        });
                    }
                };
                Object.defineProperty(XRRichViewModel.prototype, "textEditableProperty", {
                    get: function () { return this.textRtf; },
                    enumerable: true,
                    configurable: true
                });
                return XRRichViewModel;
            })(Report.ControlViewModel);
            Report.XRRichViewModel = XRRichViewModel;
            var XRRichSurface = (function (_super) {
                __extends(XRRichSurface, _super);
                function XRRichSurface(control, context) {
                    _super.call(this, control, context);
                    this.imageSrc = control._imageSrc;
                    this.template = "dxrd-shape";
                    this.contenttemplate = "dxrd-shape-content";
                }
                return XRRichSurface;
            })(Report.ControlSurface);
            Report.XRRichSurface = XRRichSurface;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportDialogBase = (function () {
                function ReportDialogBase() {
                    this.width = ko.observable(690);
                    this.height = ko.observable(435);
                    this.template = ko.observable("");
                    this.reportUrl = ko.observable("");
                    this.tab = ko.observable(null);
                    this.visible = ko.observable(false);
                }
                ReportDialogBase.prototype.open = function (tab) {
                    this.tab(tab);
                    this.reportUrl(tab.url());
                    this.visible(true);
                };
                return ReportDialogBase;
            })();
            Report.ReportDialogBase = ReportDialogBase;
            var OpenReportDialog = (function (_super) {
                __extends(OpenReportDialog, _super);
                function OpenReportDialog(subreports, navigateByReports) {
                    _super.call(this);
                    this.title = "Open Report";
                    this.template("dxrd-openreport-dialog-content");
                    this.urls = subreports;
                    var self = this;
                    this.buttons = [
                        {
                            toolbar: 'bottom', location: 'after', widget: 'button', options: {
                                text: Designer.getLocalization('Open'), onClick: function () {
                                    Report.ReportStorageWeb.getData(self.reportUrl()).done(function (result) {
                                        if (result) {
                                            var model = new Report.ReportViewModel(JSON.parse(result.reportLayout));
                                            model.dataSourceRefs = result.dataSourceRefInfo;
                                            navigateByReports.addTab(ko.observable(model), ko.observable(self.reportUrl()), "dx-icon-close");
                                            self.visible(false);
                                        }
                                    });
                                }
                            }
                        },
                        {
                            toolbar: 'bottom', location: 'after', widget: 'button', options: {
                                text: Designer.getLocalization("Cancel"), onClick: function () {
                                    self.visible(false);
                                }
                            }
                        }];
                }
                OpenReportDialog.prototype.open = function () {
                    var _this = this;
                    Report.ReportStorageWeb.getUrls().done(function (result) { _this.urls(result); });
                    this.visible(true);
                };
                return OpenReportDialog;
            })(ReportDialogBase);
            Report.OpenReportDialog = OpenReportDialog;
            var SaveReportDialogLight = (function (_super) {
                __extends(SaveReportDialogLight, _super);
                function SaveReportDialogLight(saveReportDialog) {
                    _super.call(this);
                    this.saveText = ko.observable("");
                    this.title = "Save Report";
                    this.template("dxrd-savereport-dialog-content-light");
                    this.width('auto');
                    this.height(260);
                    var self = this;
                    this.buttons = [
                        {
                            toolbar: 'bottom', location: 'after', widget: 'button', options: {
                                text: Designer.getLocalization('Yes'), onClick: function () {
                                    self.visible(false);
                                    self.save(saveReportDialog);
                                }
                            }
                        },
                        {
                            toolbar: 'bottom', location: 'after', widget: 'button', options: {
                                text: Designer.getLocalization("No"), onClick: function () {
                                    self.visible(false);
                                    self.tab().undoEngine.undoAll();
                                    self.tab().close.resolve();
                                }
                            }
                        },
                        { toolbar: 'bottom', location: 'after', widget: 'button', options: { text: Designer.getLocalization('Cancel'), onClick: function () { self.visible(false); } } }
                    ];
                }
                SaveReportDialogLight.prototype.open = function (tab) {
                    this.saveText('"' + tab.displayName() + '" ' + Designer.getLocalization("has been changed. Do you want to save changes?"));
                    _super.prototype.open.call(this, tab);
                };
                SaveReportDialogLight.prototype.save = function (saveReportDialog) {
                    var self = this;
                    if (Report.reportStorageWebIsRegister) {
                        if (self.reportUrl()) {
                            Report.ReportStorageWeb.setData(self.tab().report().serialize(), this.reportUrl())
                                .done(function (jsonResult) {
                                self.tab().undoEngine.clearHistory();
                                self.tab().close.resolve();
                                self.visible(false);
                            }).fail((function (error) {
                                self.tab().report().save();
                            }));
                        }
                        else {
                            saveReportDialog.open(self.tab());
                            saveReportDialog.closeAfterSave(true);
                            self.visible(false);
                        }
                    }
                    else {
                        self.tab().report().save();
                        self.tab().close.resolve();
                    }
                };
                return SaveReportDialogLight;
            })(ReportDialogBase);
            Report.SaveReportDialogLight = SaveReportDialogLight;
            var SaveReportDialog = (function (_super) {
                __extends(SaveReportDialog, _super);
                function SaveReportDialog(subreports) {
                    var _this = this;
                    _super.call(this);
                    this.closeAfterSave = ko.observable(false);
                    this.reportName = ko.observable("");
                    this.title = "Save Report";
                    this.template("dxrd-savereport-dialog-content");
                    this.urls = subreports;
                    var self = this;
                    this.buttons = [
                        {
                            toolbar: 'bottom', location: 'after', widget: 'button', options: {
                                text: Designer.getLocalization('Save'), disabled: ko.computed(function () { return !_this.reportName(); }), onClick: function () {
                                    self.visible(false);
                                    self.save();
                                    self.tab().isDirty(false);
                                    if (self.closeAfterSave()) {
                                        self.tab().close.resolve();
                                    }
                                }
                            }
                        },
                        { toolbar: 'bottom', location: 'after', widget: 'button', options: { text: Designer.getLocalization('Cancel'), onClick: function () { self.visible(false); } } }
                    ];
                }
                SaveReportDialog.prototype.open = function (tab) {
                    var _this = this;
                    Report.ReportStorageWeb.getUrls().done(function (result) { _this.urls(result); });
                    this.closeAfterSave(false);
                    _super.prototype.open.call(this, tab);
                    var displayName = this.urls().filter(function (item) { return item["Key"] === _this.reportUrl(); })[0];
                    this.reportName(displayName && displayName["Value"] || tab.displayName());
                };
                SaveReportDialog.prototype.save = function () {
                    var self = this;
                    var data = self.tab().report().serialize();
                    Report.ReportStorageWeb.setNewData(data, this.reportName())
                        .done(function (result) {
                        var url = result;
                        self.tab().undoEngine.clearHistory();
                        Report.ReportStorageWeb.getUrls().done(function (result) { self.urls(result); self.tab().url(url); }).fail(function (result) {
                            self.tab().url(url);
                        });
                    }).fail((function (error) {
                        self.tab().report().save();
                    }));
                };
                return SaveReportDialog;
            })(ReportDialogBase);
            Report.SaveReportDialog = SaveReportDialog;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.eventArgsTypes = {
                "EvaluateBinding": "DevExpress.XtraReports.UI.BindingEventArgs",
                "AfterPrint": "System.EventArgs",
                "BeforePrint": "System.Drawing.Printing.PrintEventArgs",
                "PrintOnPage": "DevExpress.XtraReports.UI.PrintOnPageEventArgs",
                "Draw": "DevExpress.XtraReports.UI.DrawEventArgs",
                "HtmlItemCreated": "DevExpress.XtraReports.UI.HtmlEventArgs",
                "LocationChanged": "DevExpress.XtraReports.UI.ChangeEventArgs",
                "ParentChanged": "DevExpress.XtraReports.UI.ChangeEventArgs",
                "PreviewClick": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "PreviewDoubleClick": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "PreviewMouseDown": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "PreviewMouseMove": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "PreviewMouseUp": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "SizeChanged": "DevExpress.XtraReports.UI.ChangeEventArgs",
                "TextChanged": "System.EventArgs",
                "SummaryCalculated": "DevExpress.XtraReports.UI.TextFormatEventArgs",
                "SummaryGetResult": "DevExpress.XtraReports.UI.SummaryGetResultEventArgs",
                "SummaryReset": "System.EventArgs",
                "SummaryRowChanged": "System.EventArgs",
                "BandLevelChanged": "System.EventArgs",
                "SortingSummaryGetResult": "DevExpress.XtraReports.UI.GroupSortingSummaryGetResultEventArgs",
                "SortingSummaryReset": "System.EventArgs",
                "SortingSummaryRowChanged": "DevExpress.XtraReports.UI.GroupSortingSummaryRowChangedEventArgs",
                "DataSourceDemanded": "System.EventArgs",
                "BandHeightChanged": "DevExpress.XtraReports.UI.BandEventArgs",
                "DataSourceRowChanged": "DevExpress.XtraReports.UI.DataSourceRowEventArgs",
                "FillEmptySpace": "DevExpress.XtraReports.UI.BandEventArgs",
                "PrintProgress": "DevExpress.XtraPrinting.PrintProgressEventArgs",
                "ParametersRequestBeforeShow": "DevExpress.XtraReports.Parameters.ParametersRequestEventArgs",
                "ParametersRequestValueChanged": "DevExpress.XtraReports.Parameters.ParametersRequestValueChangedEventArgs",
                "ParametersRequestSubmit": "DevExpress.XtraReports.Parameters.ParametersRequestEventArgs",
                "GetValue": "DevExpress.XtraReports.UI.GetValueEventArgs",
                "FieldValueDisplayText": "DevExpress.XtraReports.UI.PivotGrid.PivotFieldDisplayTextEventArgs",
                "PrintCell": "DevExpress.XtraReports.UI.PivotGrid.CustomExportCellEventArgs",
                "PrintFieldValue": "DevExpress.XtraReports.UI.PivotGrid.CustomExportFieldValueEventArgs",
                "PrintHeader": "DevExpress.XtraReports.UI.PivotGrid.CustomExportHeaderEventArgs",
                "CustomSummary": "DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomSummaryEventArgs",
                "CustomGroupInterval": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomGroupIntervalEventArgs",
                "CustomChartDataSourceData": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomChartDataSourceDataEventArgs",
                "CustomChartDataSourceRows": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomChartDataSourceRowsEventArgs",
                "CustomCellDisplayText": "DevExpress.XtraReports.UI.PivotGrid.PivotCellDisplayTextEventArgs",
                "CustomCellValue": "DevExpress.XtraReports.UI.PivotGrid.PivotCellValueEventArgs",
                "CustomColumnWidth": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomColumnWidthEventArgs",
                "CustomFieldSort": "DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomFieldSortEventArgs",
                "CustomServerModeSort": "DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomServerModeSortEventArgs",
                "CustomFieldValueCells": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomFieldValueCellsEventArgs",
                "CustomRowHeight": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomRowHeightEventArgs",
                "CustomUnboundFieldData": "DevExpress.XtraReports.UI.PivotGrid.CustomFieldDataEventArgs",
                "PrefilterCriteriaChanged": "System.EventArgs",
                "CustomDrawSeries": "DevExpress.XtraCharts.CustomDrawSeriesEventArgs",
                "CustomDrawSeriesPoint": "DevExpress.XtraCharts.CustomDrawSeriesPointEventArgs",
                "CustomDrawCrosshair": "DevExpress.XtraCharts.CustomDrawCrosshairEventArgs",
                "CustomDrawAxisLabel": "DevExpress.XtraCharts.CustomDrawAxisLabelEventArgs",
                "CustomPaint": "DevExpress.XtraCharts.CustomPaintEventArgs",
                "BoundDataChanged": "System.EventArgs",
                "PieSeriesPointExploded": "DevExpress.XtraCharts.PieSeriesPointExplodedEventArgs",
                "AxisScaleChanged": "DevExpress.XtraCharts.AxisScaleChangedEventArgs",
                "AxisWholeRangeChanged": "DevExpress.XtraCharts.AxisRangeChangedEventArgs",
                "AxisVisualRangeChanged": "DevExpress.XtraCharts.AxisRangeChangedEventArgs",
                "SmallChartTextShowing": "System.EventArgs"
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportExplorerModel = (function () {
                function ReportExplorerModel(reportModel, editableObject, clickHandler, dragDropHandler, selection) {
                    var _this = this;
                    this.itemsProvider = new Designer.ObjectExplorerProvider([{ model: reportModel, displayName: "Report", className: "master_report", data: reportModel },
                        { model: ko.pureComputed(function () { return reportModel().styles(); }), displayName: "Styles", className: "styles" },
                        { model: ko.pureComputed(function () { return reportModel().formattingRuleSheet(); }), displayName: "Formatting Rules", className: "formattingrules" },
                        { model: ko.pureComputed(function () { return reportModel().crossBandControls(); }), displayName: "Crossband Controls", className: "xrcrossbandbox" }
                    ], ["bands", "controls", "rows", "cells", "subBands"], editableObject, function (model) {
                        var path = ReportExplorerModel.getPathByMember(model);
                        if (!path) {
                            if (model === reportModel().styles()) {
                                path = "Styles";
                            }
                            else if (model === reportModel().formattingRuleSheet()) {
                                path = "Formatting Rules";
                            }
                            else if (model instanceof Report.StyleModel) {
                                path = ["Styles", "Styles", reportModel().styles().indexOf(model)].join(".");
                            }
                            else if (model instanceof Report.FormattingRule) {
                                path = ["Formatting Rules", "Formatting Rules", reportModel().formattingRuleSheet().indexOf(model)].join(".");
                            }
                        }
                        return path;
                    });
                    this.treeListController = new Designer.ObjectStructureTreeListController(["bands", "controls", "rows", "cells", "Report", "subBands", "Styles", "Formatting Rules", "Crossband Controls"]);
                    this.treeListController.getActions = function (item) {
                        if (item.data.displayName !== "Crossband Controls") {
                            if (item.data.displayName !== "Styles" && item.data.displayName !== "Formatting Rules") {
                                return _this._createActionsForOneElement(clickHandler, selection, editableObject, reportModel, item);
                            }
                            else {
                                return _this._createActionsForArray(item, reportModel);
                            }
                        }
                    };
                    this.treeListController.dragDropHandler = dragDropHandler;
                }
                ReportExplorerModel.getPathByMember = function (model) {
                    if (model.parentModel && model.parentModel()) {
                        if (model instanceof Report.BandViewModel && model.controlType === "SubBand") {
                            return ReportExplorerModel.getPathByMember(model.parentModel()) + ".subBands." + model.parentModel().subBands().indexOf(model);
                        }
                        if (model instanceof Report.BandViewModel) {
                            return ReportExplorerModel.getPathByMember(model.parentModel()) + ".bands." + model.parentModel().bands().indexOf(model);
                        }
                        else if (model instanceof Report.CrossBandControlViewModel) {
                            return "Crossband Controls.Crossband Controls." + model.parentModel().crossBandControls().indexOf(model);
                        }
                        else if (model instanceof Report.TableCellViewModel) {
                            return ReportExplorerModel.getPathByMember(model.parentModel()) + ".cells." + model.parentModel().cells().indexOf(model);
                        }
                        else if (model instanceof Report.TableRowViewModel) {
                            return ReportExplorerModel.getPathByMember(model.parentModel()) + ".rows." + model.parentModel().rows().indexOf(model);
                        }
                        else if (model instanceof Report.ReportElementViewModel) {
                            return ReportExplorerModel.getPathByMember(model.parentModel()) + ".controls." + model.parentModel().controls().indexOf(model);
                        }
                    }
                    else if (model instanceof Report.ReportViewModel) {
                        return "Report";
                    }
                    return null;
                };
                ReportExplorerModel.prototype._createActionsForOneElement = function (clickHandler, selection, editableObject, reportModel, item) {
                    var actions = [{
                            text: "Properties",
                            imageClassName: "dx-image-edit",
                            clickAction: function () {
                                clickHandler();
                            }
                        }];
                    var element = item.data && item.data.data;
                    var isDeleteDeny = element && ((element.getMetaData && element.getMetaData().isDeleteDeny) || false);
                    var isLocked = element && ((element.lockedInUserDesigner && element.lockedInUserDesigner()) || false);
                    if (!isDeleteDeny && !isLocked) {
                        actions.push({
                            text: "Delete",
                            imageClassName: "dxrd-image-recycle-bin",
                            clickAction: function () {
                                var selectedObject = ko.unwrap(editableObject);
                                if (selectedObject instanceof Report.StyleModel) {
                                    reportModel().styles.remove(selectedObject);
                                }
                                else if (selectedObject instanceof Report.FormattingRule) {
                                    reportModel().formattingRuleSheet.remove(selectedObject);
                                }
                                else {
                                    Designer.deleteSelection(selection);
                                }
                            }
                        });
                    }
                    return actions;
                };
                ReportExplorerModel.prototype._createActionsForArray = function (item, reportModel) {
                    if (item.data.displayName === "Styles" || item.data.displayName === "Formatting Rules") {
                        return [{
                                text: "Add New " + (item.data.displayName === "Styles" ? "Style" : "Formatting Rule"),
                                imageClassName: "dx-image-add",
                                clickAction: function () {
                                    if (item.data.displayName === "Styles") {
                                        var newStyleName = Designer.getUniqueNameForNamedObjectsArray(reportModel().styles(), "xrControlStyle");
                                        reportModel().styles.push(new Report.StyleModel({ "@Name": newStyleName }));
                                    }
                                    else {
                                        reportModel().formattingRuleSheet.push(Report.FormattingRule.createNew(reportModel()));
                                    }
                                }
                            }];
                    }
                    return [];
                };
                return ReportExplorerModel;
            })();
            Report.ReportExplorerModel = ReportExplorerModel;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var CustomizeLabelPage = (function (_super) {
                    __extends(CustomizeLabelPage, _super);
                    function CustomizeLabelPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.wizard = wizard;
                        this._id = ko.observable(0);
                        this._labelWidth = ko.observable(0);
                        this._labelHeight = ko.observable(0);
                        this._horizontalPitch = ko.observable(0);
                        this._verticalPitch = ko.observable(0);
                        this._topMargin = ko.observable(0);
                        this._leftMargin = ko.observable(0);
                        this._rightMargin = ko.observable(0);
                        this._bottomMargin = ko.observable(0);
                        this._rowsCount = ko.pureComputed(function () {
                            return _this._getLabelsCount(_this._pageHeight(), _this._verticalPitch(), _this._labelHeight(), _this._topMargin() + _this._bottomMargin());
                        });
                        this._columnsCount = ko.pureComputed(function () {
                            return _this._getLabelsCount(_this._pageWidth(), _this._horizontalPitch(), _this._labelWidth(), _this._leftMargin() + _this._rightMargin());
                        });
                        this._pageHeight = ko.pureComputed(function () {
                            if (_this.selectedPaperSize().unit === _this.unit())
                                return _this.selectedPaperSize().height;
                            if (_this.selectedPaperSize().unit === Report.GraphicsUnit.Millimeter)
                                return _this.selectedPaperSize().height * CustomizeLabelPage.CONVERSION_COEEFICIENT;
                            return _this.selectedPaperSize().height / CustomizeLabelPage.CONVERSION_COEEFICIENT;
                        });
                        this._pageWidth = ko.pureComputed(function () {
                            if (_this.selectedPaperSize().unit === _this.unit())
                                return _this.selectedPaperSize().width;
                            if (_this.selectedPaperSize().unit === Report.GraphicsUnit.Millimeter)
                                return _this.selectedPaperSize().width * CustomizeLabelPage.CONVERSION_COEEFICIENT;
                            return _this.selectedPaperSize().width / CustomizeLabelPage.CONVERSION_COEEFICIENT;
                        });
                        this.template = "dxrd-page-customizeLabel";
                        this.title = "Specify the Label's Parameters";
                        this.description = "You can adjust the label's parameters here if required.";
                        this.paperKinds = function () { return (_this.labelData.paperKinds); };
                        this.selectedPaperSize = ko.observable({ "id": 1, "enumId": 9, "name": "A4", "width": 210.0, "height": 297.0, "unit": 6, "isRollPaper": false });
                        this.unit = ko.observable();
                        this.stepUnit = ko.pureComputed(function () { return _this.unit() === Report.GraphicsUnit.Inch ? 0.01 : 0.1; });
                        this.labelWidth = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._labelWidth())); },
                            write: function (value) { return _this._labelWidth(value); }
                        });
                        this.labelHeight = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._labelHeight())); },
                            write: function (value) { return _this._labelHeight(value); }
                        });
                        this.horizontalPitch = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._horizontalPitch())); },
                            write: function (value) { return _this._horizontalPitch(value); }
                        });
                        this.verticalPitch = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._verticalPitch())); },
                            write: function (value) { return _this._verticalPitch(value); }
                        });
                        this.topMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._topMargin())); },
                            write: function (value) { return _this._topMargin(value); }
                        });
                        this.leftMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._leftMargin())); },
                            write: function (value) { return _this._leftMargin(value); }
                        });
                        this.rightMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._rightMargin())); },
                            write: function (value) { return _this._rightMargin(value); }
                        });
                        this.bottomMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._bottomMargin())); },
                            write: function (value) { return _this._bottomMargin(value); }
                        });
                        this.labelsCountText = ko.pureComputed(function () {
                            return _this._rowsCount() * _this._columnsCount() + " " + Designer.getLocalization("labels on the page") + ", " + _this._columnsCount() + " x " + _this._rowsCount();
                        });
                        this.pageSizeText = ko.pureComputed(function () {
                            return CustomizeLabelPage.getPageSizeText(_this._pageWidth(), _this._pageHeight(), _this.unit());
                        });
                        this.units = [
                            { text: Designer.getLocalization("Inch", "ASPxReportsStringId.ReportDesigner_Wizard_Inch"), value: Report.GraphicsUnit.Inch },
                            { text: Designer.getLocalization("Millimeter", "ASPxReportsStringId.ReportDesigner_Wizard_Millimeter"), value: Report.GraphicsUnit.Millimeter }
                        ];
                        this._begin = function (data) {
                            _this.isVisible = data.reportType === Wizard.ReportType.Label;
                            if (!_this.isVisible)
                                return null;
                            return _this.wizard.labelWizardData().done(function (labelData) {
                                _this.labelData = labelData;
                                _this._id(data.labelDetails.id);
                                _this.unit(data.labelDetails.unit);
                                _this.selectedPaperSize(Designer.findFirstItemMatchesCondition(_this.paperKinds(), function (item) { return item.id === data.labelDetails.paperKindId; }));
                                _this._labelWidth(data.labelDetails.width);
                                _this._labelHeight(data.labelDetails.height);
                                _this._horizontalPitch(data.labelDetails.hPitch);
                                _this._verticalPitch(data.labelDetails.vPitch);
                                _this._topMargin(data.labelDetails.topMargin);
                                _this._leftMargin(data.labelDetails.leftMargin);
                                _this._rightMargin(data.labelDetails.rightMargin);
                                _this._bottomMargin(data.labelDetails.bottomMargin);
                            });
                        };
                        this.commit = function (data) {
                            if (!data.labelDetails)
                                return;
                            data.labelDetails.width = _this._labelWidth();
                            data.labelDetails.height = _this._labelHeight();
                            data.labelDetails.hPitch = _this._horizontalPitch();
                            data.labelDetails.vPitch = _this._verticalPitch();
                            data.labelDetails.topMargin = _this._topMargin();
                            data.labelDetails.leftMargin = _this._leftMargin();
                            data.labelDetails.rightMargin = _this._rightMargin();
                            data.labelDetails.bottomMargin = _this._bottomMargin();
                            data.labelDetails.unit = _this.unit();
                            data.labelDetails.paperKindId = _this.selectedPaperSize().id;
                        };
                        this.actionNext.isDisabled(true);
                        this.unit.subscribe(function (newUnit) {
                            if (newUnit === Report.GraphicsUnit.Inch) {
                                _this._labelWidth(_this._labelWidth() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._labelHeight(_this._labelHeight() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._horizontalPitch(_this._horizontalPitch() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._verticalPitch(_this._verticalPitch() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._topMargin(_this._topMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._leftMargin(_this._leftMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._rightMargin(_this._rightMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._bottomMargin(_this._bottomMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                            }
                            else if (newUnit === Report.GraphicsUnit.Millimeter) {
                                _this._labelWidth(_this._labelWidth() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._labelHeight(_this._labelHeight() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._horizontalPitch(_this._horizontalPitch() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._verticalPitch(_this._verticalPitch() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._topMargin(_this._topMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._leftMargin(_this._leftMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._rightMargin(_this._rightMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._bottomMargin(_this._bottomMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                            }
                        });
                    }
                    CustomizeLabelPage.prototype._getFormattedValueInUnits = function (value) {
                        return getFormattedValueInUnits(value, this.unit());
                    };
                    CustomizeLabelPage.prototype._getOtherMarginValue = function (paperDimentionInLabelUnit, labelPitch, labelWidth, margin, labelsCount) {
                        return this._getFormattedValueInUnits(paperDimentionInLabelUnit - (labelsCount * labelPitch) - margin + labelPitch - labelWidth);
                    };
                    CustomizeLabelPage.prototype._getLabelsCount = function (paperDimentionInLabelUnit, labelPitch, labelWidth, margin) {
                        return Math.floor((paperDimentionInLabelUnit - margin + (labelPitch - labelWidth)) / labelPitch);
                    };
                    CustomizeLabelPage.getPageSizeText = function (width, height, unit) {
                        return getFormattedValueInUnits(width, unit) + " x " + getFormattedValueInUnits(height, unit) + (unit === Report.GraphicsUnit.Inch ? " in" : " mm");
                    };
                    CustomizeLabelPage.CONVERSION_COEEFICIENT = 0.0393701;
                    return CustomizeLabelPage;
                })(Wizard.WizardPage);
                Wizard.CustomizeLabelPage = CustomizeLabelPage;
                function getFormattedValueInUnits(value, unit) {
                    var format = unit === Report.GraphicsUnit.Inch ? 2 : 1;
                    return value.toFixed(format);
                }
                Wizard.getFormattedValueInUnits = getFormattedValueInUnits;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SelectPredefinedLabelsPage = (function (_super) {
                    __extends(SelectPredefinedLabelsPage, _super);
                    function SelectPredefinedLabelsPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.wizard = wizard;
                        this.template = "dxrd-page-selectPredefinedLabels";
                        this.title = "Choose the Label Type";
                        this.description = "Select one of the predefined labels by specifying the Product and its ID.";
                        this.selectedLabelProduct = ko.observable();
                        this.selectedLabelDetails = ko.observable();
                        this.labelDetails = ko.observable();
                        this.selectedPaperSize = ko.computed({
                            read: function () {
                                return Designer.findFirstItemMatchesCondition(_this.labelData.paperKinds, function (item) { return item.id === _this.selectedLabelDetails().paperKindId; });
                            },
                            deferEvaluation: true
                        });
                        this.width = ko.pureComputed(function () { return Wizard.getFormattedValueInUnits(_this.selectedLabelDetails().width, _this.selectedPaperSize().unit) + (_this.selectedPaperSize().unit === Report.GraphicsUnit.Inch ? " in" : " mm"); });
                        this.height = ko.pureComputed(function () { return Wizard.getFormattedValueInUnits(_this.selectedLabelDetails().height, _this.selectedPaperSize().unit) + (_this.selectedPaperSize().unit === Report.GraphicsUnit.Inch ? " in" : " mm"); });
                        this.paperType = ko.pureComputed(function () { return _this.selectedPaperSize().name; });
                        this.pageSizeText = ko.pureComputed(function () { return Wizard.getFormattedValueInUnits(_this.selectedPaperSize().width, _this.selectedPaperSize().unit) + " x " + Wizard.getFormattedValueInUnits(_this.selectedPaperSize().height, _this.selectedPaperSize().unit) + (_this.selectedPaperSize().unit === Report.GraphicsUnit.Inch ? " in" : " mm"); });
                        this.beginAsync = function (data) {
                            _this.isVisible = data.reportType === Wizard.ReportType.Label;
                            if (!_this.isVisible)
                                return null;
                            return _this.wizard.labelWizardData().done(function (labelData) {
                                _this.labelData = labelData;
                                if (data.labelDetails) {
                                    if (!_this.selectedLabelProduct() || _this.selectedLabelProduct().id !== data.labelDetails.productId) {
                                        _this.selectedLabelProduct(Designer.findFirstItemMatchesCondition(_this.labelData.labelProducts, function (item) { return item.id === data.labelDetails.productId; }));
                                    }
                                    _this.selectedLabelDetails(Designer.findFirstItemMatchesCondition(_this.labelData.labelDetails, function (item) { return item.id === data.labelDetails.id; }));
                                }
                                else {
                                    _this.selectedLabelProduct(_this.labelData.labelProducts[0]);
                                }
                            });
                        };
                        this.commit = function (data) {
                            if (_this.selectedLabelDetails() && (!data.labelDetails || data.labelDetails.id !== _this.selectedLabelDetails().id)) {
                                data.labelDetails = $.extend({}, _this.selectedLabelDetails());
                            }
                        };
                        this.selectedLabelProduct.subscribe(function (newProductsType) {
                            var labelDetails = _this.labelData.labelDetails.filter(function (item) { return item.productId === newProductsType.id; });
                            _this.selectedLabelDetails(labelDetails[0]);
                            _this.labelDetails({
                                store: labelDetails,
                                paginate: labelDetails.length > 200,
                                pageSize: 100
                            });
                        });
                    }
                    return SelectPredefinedLabelsPage;
                })(Wizard.WizardPage);
                Wizard.SelectPredefinedLabelsPage = SelectPredefinedLabelsPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
//# sourceMappingURL=report-designer.js.map