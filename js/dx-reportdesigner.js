/**
* DevExpress HTML/JS Reporting (dx-reportdesigner.js)
* Version: 18.2.3
* Build date: 2018-11-05
* Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/NetComponents.xml
*/

var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Internal;
        (function (Internal) {
            DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.addTemplates({
                'dxrd-svg-actions-add_field_to_column_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h4v14H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h2v2H6zM6 4h2v2H6zM6 8h2v2H6zM6 12h2v2H6zM10 0h2v2h-2zM10 4h2v2h-2zM10 8h2v2h-2zM14 0h2v2h-2zM14 4h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 12h-4V8h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
                'dxrd-svg-actions-add_field_to_data_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 14v-4h-4v4h-4v4h4v4h4v-4h4v-4z"/><ellipse class="dxd-icon-fill dxd-opacity-80" cx="6" cy="2" rx="6" ry="2"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 4c0 1.1-2.7 2-6 2s-6-.9-6-2v12c0 1.1 2.7 2 6 2 .7 0 1.4 0 2-.1V12h4V4z"/></svg>',
                'dxrd-svg-actions-add_field_to_filter_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 14v-4h-4v4h-4v4h4v4h4v-4h4v-4zM7 0C3.1 0 0 1.3 0 3v1l6 6v7c0 .5.4 1 1 1 .5 0 1-.4 1-1v-7l6-6V3c0-1.7-3.1-3-7-3zm0 4c-2.8 0-5-.4-5-1s2.2-1 5-1 5 .4 5 1-2.2 1-5 1z"/></svg>',
                'dxrd-svg-actions-add_field_to_row_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 0h14v4H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M14 6h2v2h-2zM10 6h2v2h-2zM6 6h2v2H6zM2 6h2v2H2zM10 10h2v2h-2zM6 10h2v2H6zM2 10h2v2H2zM6 14h2v2H6zM2 14h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
                'dxrd-svg-actions-align_bottoms': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 20h22v2H0zM2 0h8v18H2zM12 8h8v10h-8z"/></svg>',
                'dxrd-svg-actions-align_centers': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 12H12v-2h6V4h-6V0h-2v4H4v6h6v2H0v6h10v4h2v-4h10z"/></svg>',
                'dxrd-svg-actions-align_lefts': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h2v22H0zM4 12h18v8H4zM4 2h10v8H4z"/></svg>',
                'dxrd-svg-actions-align_middles': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M12 0v10h-2V4H4v6H0v2h4v6h6v-6h2v10h6V12h4v-2h-4V0z"/></svg>',
                'dxrd-svg-actions-align_rights': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 0h2v22h-2zM0 12h18v8H0zM8 2h10v8H8z"/></svg>',
                'dxrd-svg-actions-align_to_grid': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M24 6V4h-4V0h-2v4H6V0H4v4H0v2h4v12H0v2h4v4h2v-4h12v4h2v-4h4v-2h-4V6h4zm-6 12H6v-4h8V6h4v12z"/><path class="dxd-icon-fill dxd-opacity-80" d="M14 0h-4l2 2zM2 12l-2-2v4z"/></svg>',
                'dxrd-svg-actions-align_tops': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h22v2H0zM2 4h8v18H2zM12 4h8v10h-8z"/></svg>',
                'dxrd-svg-actions-bottom_margin': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 20h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM18 0h2v2h-2zM2 4h2v14H2zM6 4h10v14H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 20h2v2h-2zM2 20h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 4h2v14h-2zM2 0h2v2H2z"/></svg>',
                'dxrd-svg-actions-bring_to_front': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 6h12v12H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M4 4h4V0H0v8h4zM20 20v-4h4v8h-8v-4z"/></svg>',
                'dxrd-svg-actions-center_horizontally': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M8 6h6v10H8z"/><path class="dxd-icon-fill dxd-opacity-60" d="M0 0v22h22V0H0zm20 10h-4v2h4v8H2v-8h4v-2H2V2h18v8z"/></svg>',
                'dxrd-svg-actions-center_vertically': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 8h10v6H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M22 0H0v22h22V0zM12 20v-4h-2v4H2V2h8v4h2V2h8v18h-8z"/></svg>',
                'dxrd-svg-actions-decrease_horizontal_spacing': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 2v4h-4V0H8v6H4V4H0v6h4V8h4v6h6V8h4v4h4V2zM4 20H0v2h4v2l4-3-4-3zM18 18l-4 3 4 3v-2h4v-2h-4z"/></svg>',
                'dxrd-svg-actions-decrease_vertical_spacing': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 18h4v-4H0V8h6V4H4V0h6v4H8v4h6v6H8v4h4v4H2zM20 4V0h2v4h2l-3 4-3-4zM18 18l3-4 3 4h-2v4h-2v-4z"/></svg>',
                'dxrd-svg-actions-delete_cell': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 12l-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3 2-2-3-3z"/><path class="dxd-icon-fill dxd-opacity-60" d="M10 2h2v2h-2zM10 6h2v2h-2zM6 14h2v2H6zM14 2h2v2h-2zM14 6h2v2h-2zM6 2h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 6h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 10h2v2H6zM2 2h2v2H2zM2 6h2v2H2zM2 10h2v2H2zM2 14h2v2H2z"/></svg>',
                'dxrd-svg-actions-delete_column': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 12l-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3 2-2-3-3z"/><path class="dxd-icon-fill dxd-opacity-60" d="M12 2h2v2h-2zM12 6h2v2h-2zM8 14h2v2H8zM16 2h2v2h-2zM16 6h2v2h-2zM8 2h2v2H8zM8 6h2v2H8zM8 10h2v2H8z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 2h4v14H2z"/></svg>',
                'dxrd-svg-actions-delete_row': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 14l-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3 2-2-3-3z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 8h2v2H2zM6 12h2v2H6zM2 12h2v2H2zM6 16h2v2H6zM2 16h2v2H2zM14 8h2v2h-2zM10 8h2v2h-2zM6 8h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 2h14v4H2z"/></svg>',
                'dxrd-svg-actions-detail': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 0v22h18V0H2zm14 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6V8h10v2zm0-4H6V4h10v2z"/></svg>',
                'dxrd-svg-actions-detail_report': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M16 2h-2V0H8v2H6v2h10z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 2v4H4V2H2v22h18V2h-2zm-2 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6v-2h10v2z"/></svg>',
                'dxrd-svg-actions-distribute_columns_evenly': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 2v10h-2V8h-8v4h-2V8H2v4H0V2h2v4h8V2h2v4h8V2h2zM0 22h10v-8H0v8zm12 0h10v-8H12v8z"/></svg>',
                'dxrd-svg-actions-distribute_rows_evenly': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 4v6h4v2h-4v6h4v2H14v-2h4v-6h-4v-2h4V4h-4V2h10v2h-4zM2 10h10V2H2v8zm0 10h10v-8H2v8z"/></svg>',
                'dxrd-svg-actions-fit_bounds_to_text': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M16 24H8l4-4 4 4zm8-8V8l-4 4 4 4zM12 4l4-4H8l4 4zM0 8v8l4-4-4-4zm13.7-2h-3.4L6 18h3l1-3h4l1 3h3L13.7 6zm-3.1 7l1.2-3.8c.1-.3.2-.6.2-1.1 0 .4.1.8.2 1.1l1.2 3.8h-2.8z"/></svg>',
                'dxrd-svg-actions-fit_text_to_bounds': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M16 4H8l4-4 4 4zM4 16V8l-4 4 4 4zm8 8l4-4H8l4 4zm8-16v8l4-4-4-4zm-6.3-2h-3.4L6 18h3l1-3h4l1 3h3L13.7 6zm-3.1 7l1.2-3.8c.1-.3.2-.6.2-1.1 0 .4.1.8.2 1.1l1.2 3.8h-2.8z"/></svg>',
                'dxrd-svg-actions-fit_to_—Åontainer': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M23 0H1C.5 0 0 .5 0 1v22c0 .5.5 1 1 1h22c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 22H2V2h20v20zm-6-6H8V8h8v8zM10 6l2-2 2 2s-3.9-.1-4 0zm-4 8l-2-2s2-2.1 2-2v4zm4 4h4l-2 2s-2.1-2-2-2zm10-6l-2 2v-4c0-.1 2 2 2 2z"/></svg>',
                'dxrd-svg-actions-group_footer': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 0h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M0 16h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 8h14v2H8zM8 12h14v2H8z"/></svg>',
                'dxrd-svg-actions-group_header': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 16h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 12h14v2H8zM8 8h14v2H8z"/></svg>',
                'dxrd-svg-actions-increase_horizontal_spacing': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 2v4h-4V0H8v6H4V4H0v6h4V8h4v6h6V8h4v4h4V2zM18 20h-4v2h4v2l4-3-4-3zM4 18l-4 3 4 3v-2h4v-2H4z"/></svg>',
                'dxrd-svg-actions-increase_vertical_spacing': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 18h4v-4H0V8h6V4H4V0h6v4H8v4h6v6H8v4h4v4H2zM20 18v-4h2v4h2l-3 4-3-4zM18 4l3-4 3 4h-2v4h-2V4z"/></svg>',
                'dxrd-svg-actions-insert_cell': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 2h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 6h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 10h2v2H6zM6 14h2v2H6zM2 2h2v2H2zM2 6h2v2H2zM2 10h2v2H2zM2 14h2v2H2zM10 2h2v2h-2zM10 6h2v2h-2zM10 10h2v2h-2zM14 2h2v2h-2zM14 6h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
                'dxrd-svg-actions-insert_column_to_left': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h4v14H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h2v2H6zM6 4h2v2H6zM6 8h2v2H6zM6 12h2v2H6zM10 0h2v2h-2zM10 4h2v2h-2zM10 8h2v2h-2zM14 0h2v2h-2zM14 4h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 12h-4V8h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
                'dxrd-svg-actions-insert_column_to_right': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M14 2h4v6h-4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M10 2h2v2h-2zM10 6h2v2h-2zM10 10h2v2h-2zM6 14h2v2H6zM6 2h2v2H6zM6 6h2v2H6zM6 10h2v2H6zM2 2h2v2H2zM2 6h2v2H2zM2 10h2v2H2zM2 14h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
                'dxrd-svg-actions-insert_row_above': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 0h14v4H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M14 6h2v2h-2zM10 6h2v2h-2zM6 6h2v2H6zM2 6h2v2H2zM10 10h2v2h-2zM6 10h2v2H6zM2 10h2v2H2zM6 14h2v2H6zM2 14h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
                'dxrd-svg-actions-insert_row_below': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 14h6v4H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 10h2v2H2zM6 10h2v2H6zM10 10h2v2h-2zM6 6h2v2H6zM2 6h2v2H2zM10 6h2v2h-2zM14 6h2v2h-2zM10 2h2v2h-2zM14 2h2v2h-2zM2 2h2v2H2zM6 2h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
                'dxrd-svg-actions-make_horizontal_spacing_equal': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 4v6h-4V2H8v8H4V6H0v10h4v-4h4v8h6v-8h4v6h4V4z"/></svg>',
                'dxrd-svg-actions-make_same_height': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 16h-2v2h-2l3 4 3-4h-2zM18 6h2V4h2l-3-4-3 4h2zM0 0h6v22H0zM16 8h6v6h-6zM8 0h2v2H8zM12 0h2v2h-2zM8 20h2v2H8zM12 20h2v2h-2z"/></svg>',
                'dxrd-svg-actions-make_same_sizes': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M12 18v-2h-2v2H8l3 4 3-4zM10 4v2h2V4h2l-3-4-3 4zM4 12h2v-2H4V8l-4 3 4 3zM18 10h-2v2h2v2l4-3-4-3zM8 8h6v6H8zM2 2h6V0H0v8h2zM20 0h-6v2h6v6h2V0zM20 20h-6v2h8v-8h-2zM2 14H0v8h8v-2H2z"/></svg>',
                'dxrd-svg-actions-make_same_width': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 20v-2H4v-2l-4 3 4 3v-2zM16 18v2h2v2l4-3-4-3v2zM0 0h22v6H0zM8 16h6v6H8zM20 8h2v2h-2zM20 12h2v2h-2zM0 8h2v2H0zM0 12h2v2H0z"/></svg>',
                'dxrd-svg-actions-make_vertical_spacing_equal': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 18h-6v-4h8V8h-8V4h4V0H6v4h4v4H2v6h8v4H4v4h14z"/></svg>',
                'dxrd-svg-actions-master_report': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M12 2h-2V0H6v2H4v2h8zM14 14h10v4H14zM14 20h10v4H14z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 12h4V2h-2v4H2V2H0v20h12z"/></svg>',
                'dxrd-svg-actions-none': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M4 0v22h16V0H4zm14 14l-2 2-4-4-4 4-2-2 4-4-4-4 2-2 4 4 4-4 2 2-4 4 4 4z"/></svg>',
                'dxrd-svg-actions-page_footer': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM6 4h10v8H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 14h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 0h2v2h-2zM6 20h10v2H6zM2 20h2v2H2zM2 4h2v14H2zM18 20h2v2h-2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
                'dxrd-svg-actions-page_header': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 10h10v8H6zM6 20h10v2H6zM18 0h2v2h-2zM2 4h2v14H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 4h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM18 20h2v2h-2zM2 20h2v2H2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
                'dxrd-svg-actions-remove_horizontal_spacing': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M4 18H0v2h4v2l4-3-4-3zM18 16l-4 3 4 3v-2h4v-2h-4zM4 8V4H0v6h4zM14 8V0H8v14h6zM18 2v10h4V2z"/></svg>',
                'dxrd-svg-actions-remove_vertical_spacing': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 4h-2V0h-2v4h-2l3 4zM16 18h2v4h2v-4h2l-3-4zM4 0h6v4H4zM0 8h14v6H0zM2 18h10v4H2z"/></svg>',
                'dxrd-svg-actions-report_footer': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 16h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 2h2v2h-2zM6 6h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
                'dxrd-svg-actions-report_header': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 6h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 2h2v2h-2zM6 12h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
                'dxrd-svg-actions-send_to_back': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 0h8v8H0zM16 16h8v8h-8z"/><path class="dxd-icon-fill dxd-opacity-80" d="M14 14h4V6h-8v4H6v8h8z"/></svg>',
                'dxrd-svg-actions-size_to_grid': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 4V0h-2v4H6V0H4v4H0v2h4v12H0v2h4v4h2v-4h12v4h2v-4h4v-2h-4V6h4V4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M14 0h-4l2 2zM0 10v4l2-2zM10 24h4l-2-2zM24 14v-4l-2 2z"/></svg>',
                'dxrd-svg-actions-subband': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M2 4h14v6H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 14h14v6H8z"/></svg>',
                'dxrd-svg-actions-top_margin': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 20h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 0h10v2H6zM18 0h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 4h2v14H2zM6 4h10v14H6zM18 20h2v2h-2zM2 20h2v2H2zM18 4h2v14h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 0h2v2H2z"/></svg>',
                'dxrd-svg-actions-vertical_detail': '<svg data-bind="xlink" viewBox="0 0 24 24"><g><path class="dxd-icon-fill dxd-opacity-80" d="M10 6h4v10h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6h-4v10h4V6zM8 6H4v10h4V6zm12-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
                'dxrd-svg-actions-vertical_header': '<svg data-bind="xlink" viewBox="0 0 24 24"><g><path class="dxd-icon-fill dxd-opacity-80" d="M4 6h4v10H4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6H10v10h10V6zm0-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
                'dxrd-svg-actions-vertical_total': '<svg data-bind="xlink" viewBox="0 0 24 24"><g><path class="dxd-icon-fill dxd-opacity-80" d="M16 6h4v10h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM14 6H4v10h10V6zm6-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
                'dxrd-svg-bands-bottom_margin': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M6 20h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM18 0h2v2h-2zM2 4h2v14H2zM6 4h10v14H6z"/><path class="dxd-icon-fill" d="M18 20h2v2h-2zM2 20h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 4h2v14h-2zM2 0h2v2H2z"/></svg>',
                'dxrd-svg-bands-detail': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v22h18V0H2zm14 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6V8h10v2zm0-4H6V4h10v2z"/></svg>',
                'dxrd-svg-bands-detail_report': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 2h-2V0H8v2H6v2h10z"/><path class="dxd-icon-fill" d="M18 2v4H4V2H2v22h18V2h-2zm-2 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6v-2h10v2z"/></svg>',
                'dxrd-svg-bands-group_footer': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 0h12v6H0z"/><path class="dxd-icon-fill" d="M0 16h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 8h14v2H8zM8 12h14v2H8z"/></svg>',
                'dxrd-svg-bands-group_header': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 16h12v6H0z"/><path class="dxd-icon-fill" d="M0 0h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 12h14v2H8zM8 8h14v2H8z"/></svg>',
                'dxrd-svg-bands-master_report': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 2h-2V0H6v2H4v2h8zM14 14h10v4H14zM14 20h10v4H14z"/><path class="dxd-icon-fill" d="M12 12h4V2h-2v4H2V2H0v20h12z"/></svg>',
                'dxrd-svg-bands-page_footer': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM6 4h10v8H6z"/><path class="dxd-icon-fill" d="M6 14h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 0h2v2h-2zM6 20h10v2H6zM2 20h2v2H2zM2 4h2v14H2zM18 20h2v2h-2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
                'dxrd-svg-bands-page_header': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 10h10v8H6zM6 20h10v2H6zM18 0h2v2h-2zM2 4h2v14H2z"/><path class="dxd-icon-fill" d="M6 4h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM18 20h2v2h-2zM2 20h2v2H2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
                'dxrd-svg-bands-report_footer': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill" d="M6 16h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 2h2v2h-2zM6 6h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
                'dxrd-svg-bands-report_header': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill" d="M6 6h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 2h2v2h-2zM6 12h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
                'dxrd-svg-bands-sub_band': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M2 4h14v6H2z"/><path class="dxd-icon-fill" d="M8 14h14v6H8z"/></svg>',
                'dxrd-svg-bands-top_margin': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 20h10v2H6z"/><path class="dxd-icon-fill" d="M6 0h10v2H6zM18 0h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 4h2v14H2zM6 4h10v14H6zM18 20h2v2h-2zM2 20h2v2H2zM18 4h2v14h-2z"/><path class="dxd-icon-fill" d="M2 0h2v2H2z"/></svg>',
                'dxrd-svg-bands-vertical_detail': '<svg data-bind="xlink" viewBox="0 0 24 24"><g><path class="dxd-icon-fill" d="M10 6h4v10h-4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6h-4v10h4V6zM8 6H4v10h4V6zm12-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
                'dxrd-svg-bands-vertical_header': '<svg data-bind="xlink" viewBox="0 0 24 24"><g><path class="dxd-icon-fill" d="M4 6h4v10H4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6H10v10h10V6zm0-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
                'dxrd-svg-bands-vertical_total': '<svg data-bind="xlink" viewBox="0 0 24 24"><g><path class="dxd-icon-fill" d="M16 6h4v10h-4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM14 6H4v10h10V6zm6-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
                'dxrd-svg-chartstructure-axes': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M24 6V4h-2V2h-2V0h-2v2h-4V0h-2v2H8V0H6v4h14v14h4v-2h-2v-4h2v-2h-2V6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M10 14V6H6v2h2v4H6v2h2v2h2v2h2v-2h4v2h2v-4z"/></svg>',
                'dxrd-svg-chartstructure-axisx': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22 17l-6-5v4h-4v-2h-2v2H6v-2H4v2H0v2h4v2h2v-2h4v2h2v-2h4v4zM4 8h2V6h4v4l6-5-6-5v4H6V2H4v2H0v2h4z"/></svg>',
                'dxrd-svg-chartstructure-axisy': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M17 0l-5 6h4v4h-2v2h2v4h-2v2h2v4h2v-4h2v-2h-2v-4h2v-2h-2V6h4zM8 18v-2H6v-4h4L5 6l-5 6h4v4H2v2h2v4h2v-4z"/></svg>',
                'dxrd-svg-chartstructure-chart': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M10 22V12H0c.5 5 5 9.5 10 10zM12 12v10c5-.5 9.5-5 10-10H12z"/><path class="dxd-icon-fill" d="M0 6h4v4H0zM6 4h4v6H6zM12 2h4v8h-4z"/><g><path class="dxd-icon-fill" d="M18 0h4v10h-4z"/></g></svg>',
                'dxrd-svg-chartstructure-constantline': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 6h-6V0h-2v6H0v2h16v16h2V8h6z"/></svg>',
                'dxrd-svg-chartstructure-constantlines': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M24 6V4h-4V0h-2v4h-4V0h-2v4H6v2h6v4H6v2h6v6h2v-6h4v6h2v-6h4v-2h-4V6h4zm-10 4V6h4v4h-4z"/></svg>',
                'dxrd-svg-chartstructure-defaultpane': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h10v22H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M12 0v10h10V0H12zm8 8h-6V2h6v6zM12 22h10V12H12v10zm2-8h6v6h-6v-6z"/></svg>',
                'dxrd-svg-chartstructure-diagram': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 16h4v6H0zM12 10h4v12h-4z"/><path class="dxd-icon-fill" d="M18 2h4v20h-4zM6 6h4v16H6z"/></svg>',
                'dxrd-svg-chartstructure-legend': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h10v10H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M0 12h10v10H0z"/><path class="dxd-icon-fill" d="M12 2h10v2H12zM12 6h10v2H12zM12 14h10v2H12zM12 18h10v2H12z"/></svg>',
                'dxrd-svg-chartstructure-panes': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h10v22H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 0v10h10V0H12z"/><path class="dxd-icon-fill dxd-opacity-60" d="M12 22h10V12H12v10z"/></svg>',
                'dxrd-svg-chartstructure-series': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 22h22V10l-4-4-8 8-4-4-6 6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 0l-8 8-4-4-6 6v4l6-6 4 4 8-8 4 4V4z"/></svg>',
                'dxrd-svg-chartstructure-seriescollection': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M15 7l-9 9v2h18v-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M15 4l9 9V4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 13l9-9-9-4z"/></svg>',
                'dxrd-svg-chartstructure-title': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M4 8v14h14V8H4zm12 8h-2v-2h2v2zm-6 0v-2h2v2h-2zm2 2v2h-2v-2h2zm-4-2H6v-2h2v2zm8-6v2h-2v-2h2zm-4 2h-2v-2h2v2zm-4-2v2H6v-2h2zm-2 8h2v2H6v-2zm8 2v-2h2v2h-2z"/><path class="dxd-icon-fill" d="M8 0h6v6H8z"/></svg>',
                'dxrd-svg-chartstructure-titles': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2h4v4H2zM10 2h4v4h-4zM10 18h4v4h-4zM18 2h4v4h-4zM2 18h4v4H2zM2 10h4v4H2zM18 17.9h4v4h-4zM18 10h4v4h-4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 8v8h8V8H8zm6 6h-4v-4h4v4z"/></svg>',
                'dxrd-svg-color_gear': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.White{fill:#FFFFFF;}</style><path class="White" d="M30 18v-4l-4.4-.7c-.2-.8-.5-1.5-.9-2.1l2.6-3.6-2.8-2.8-3.6 2.6c-.7-.4-1.4-.7-2.1-.9L18 2h-4l-.7 4.4c-.8.2-1.5.5-2.1.9L7.5 4.7 4.7 7.5l2.6 3.6c-.4.7-.7 1.4-.9 2.1L2 14v4l4.4.7c.2.8.5 1.5.9 2.1l-2.6 3.6 2.8 2.8 3.6-2.6c.7.4 1.4.7 2.1.9L14 30h4l.7-4.4c.8-.2 1.5-.5 2.1-.9l3.6 2.6 2.8-2.8-2.6-3.6c.4-.7.7-1.4.9-2.1L30 18zm-14 2c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/></svg>',
                'dxrd-svg-fieldlist-calcboolean': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm18 8L8 18l-4-4v-4l4 4L18 4v4z"/></svg>',
                'dxrd-svg-fieldlist-calcdate': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm11 18c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z"/><path class="dxd-icon-fill dxd-opacity-80" d="M15 10h-3V7c0-.5-.4-1-1-1-.5 0-1 .4-1 1v4c0 .5.4 1 1 1h4c.5 0 1-.4 1-1s-.4-1-1-1z"/></svg>',
                'dxrd-svg-fieldlist-calcdefault': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm17.6 5.8c-.2.1-.4.2-.7.2-.3 0-.5-.1-.7-.2-.2-.1-.2-.3-.2-.4 0-.2 0-.4.1-.6.1-.1.2-.2.2-.3 0-.1 0-.1-.1-.1s-.1-.1-.2-.1c-.4 0-.8.3-1.2.6-.7.6-1.4 2.1-1.8 3.1h2l-1 1.9h-1.6l-.8 2.3c-.6 1.7-1.1 2.8-1.6 3.6-.5.7-1.2 1.3-1.9 1.6-.7.4-1.6.6-2.5.6-.6 0-1-.1-1.3-.3-.2-.1-.3-.5-.3-.7s.2-1 1.2-1c.9 0 1 .8 1 1s-.1.3-.2.4-.2.1-.2.2l.1.1H6c.2 0 .4 0 .5-.1.4-.2.6-.5.8-.9.1-.2.4-.7.7-1.7l1.7-5H8l1-1.9h1.3c.2-.1.6-.9.7-1.1.8-1 1.4-1.7 2.2-2.2.9-.6 1.8-.8 2.9-.8.7 0 1.1.1 1.4.3.3.2.5.4.5.7s-.2.6-.4.8z"/></svg>',
                'dxrd-svg-fieldlist-calcfloat': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm8 16H2v-2h2v-4H2V8h2V6h2v8h2v2zm4 0h-2v-2h2v2zm8-8v2h-2v2h-2v2h4v2h-6v-4h2v-2h2V8h-4V6h6v2z"/></svg>',
                'dxrd-svg-fieldlist-calcinteger': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm6 16H4v-6H2V8h2V6h2v10zm6-9v3h-2v4h2v2H8v-6h2V8H8V6h4v1zm8 0v9h-6v-2h4v-2h-2v-2h2V8h-4V6h6v1z"/></svg>',
                'dxrd-svg-fieldlist-calcstring': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm10 18H4v-6h4v-2H4V8h6v10zm8-4.3V18h-6V4h2v6h4v3.7z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 14h2v2H6zM14 12h2v4h-2z"/></svg>',
                'dxrd-svg-landscape': '<svg data-bind="xlink" viewBox="0 0 34 34"><style>.st0{opacity:0.5;}</style><g><path class="dxd-icon-fill" d="M33 4H1c-.5 0-1 .5-1 1v24c0 .5.5 1 1 1h32c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm-1 24H2V6h30v22z"/><path class="st0 dxd-icon-fill" d="M28 12H6v-2h22v2zm0 2H6v2h22v-2zm0 4H6v2h22v-2zm0 4H6v2h22v-2z"/></g></svg>',
                'dxrd-svg-menu-add_datasource': '<svg data-bind="xlink" viewBox="0 0 24 24"><ellipse class="dxd-icon-fill" cx="8" cy="2" rx="6" ry="2"/><path class="dxd-icon-fill" d="M16 10c-3.3 0-6 2.7-6 6s2.7 6 6 6 6-2.7 6-6-2.7-6-6-6zm3 7h-2v2h-2v-2h-2v-2h2v-2h2v2h2v2zM8 13c-3.1 0-6-.9-6-2v5c0 1.1 2.9 2 6 2h.3c-.2-.6-.3-1.3-.3-2 0-1.1.2-2.1.6-3H8zM14 8.3V4c0 1.1-2.9 2-6 2s-6-.9-6-2v5c0 1.1 2.9 2 6 2 .6 0 1.3 0 1.9-.1 1-1.3 2.5-2.2 4.1-2.6z"/></svg>',
                'dxrd-svg-menu-exit': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22 12l-6-6v4H8v4h8v4z"/><path class="dxd-icon-fill" d="M12 20H2V4h10v4h2V2H0v20h14v-6h-2z"/></svg>',
                'dxrd-svg-menu-new_via_wizard': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M5.7 11.3L9.1 16l1.5-5.4L16 9.1l-4.7-3.4-.1-5.7-4.5 3.3-5.4-2 2 5.4L0 11.2z"/><path class="dxd-icon-fill" d="M23.5 20.6l-8.7-8.8-2.3.7-.6 2.1 8.7 8.8c.7.7 1.9.7 2.6 0l.2-.2c.8-.7.8-1.9.1-2.6zM18 12l2 2V2h-6v2h4zM6 20v-6H4v8h12l-2-2z"/></svg>',
                'dxrd-svg-menu-newreport': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M14 0v6h6z"/><path class="dxd-icon-fill" d="M12 0H2v22h18V8h-8z"/></svg>',
                'dxrd-svg-menu-run_wizard': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M11.3 5.7L11.2 0 6.7 3.3 1.5 1.5l1.8 5.2L0 11.2l5.7.1L9.1 16l1.5-5.4L16 9.1z"/><path class="dxd-icon-fill" d="M23.5 20.6l-8.7-8.8-2.3.7-.6 2.1 8.7 8.8c.7.7 1.9.7 2.6 0l.2-.2c.8-.7.8-1.9.1-2.6z"/></svg>',
                'dxrd-svg-multi_select': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 12h12v12H12zM12 0H0v12h4V4h8z"/><path class="dxd-icon-fill" d="M18 6H6v12h4v-8h8z"/></svg>',
                'dxrd-svg-none': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 0v22h16V0H4zm14 14l-2 2-4-4-4 4-2-2 4-4-4-4 2-2 4 4 4-4 2 2-4 4 4 4z"/></svg>',
                'dxrd-svg-pictureeditor-alignment_bottomcenter': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M10 16h12v12H10z"/></g></svg>',
                'dxrd-svg-pictureeditor-alignment_bottomleft': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M4 16h12v12H4z"/></g></svg>',
                'dxrd-svg-pictureeditor-alignment_bottomright': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M16 16h12v12H16z"/></g></svg>',
                'dxrd-svg-pictureeditor-alignment_middlecenter': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M10 10h12v12H10z"/></g></svg>',
                'dxrd-svg-pictureeditor-alignment_middleleft': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M4 10h12v12H4z"/></g></svg>',
                'dxrd-svg-pictureeditor-alignment_middleright': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M16 10h12v12H16z"/></g></svg>',
                'dxrd-svg-pictureeditor-alignment_topcenter': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M10 4h12v12H10z"/></g></svg>',
                'dxrd-svg-pictureeditor-alignment_topleft': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M4 4h12v12H4z"/></g></svg>',
                'dxrd-svg-pictureeditor-alignment_topright': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M16 4h12v12H16z"/></g></svg>',
                'dxrd-svg-pictureeditor-image_gallery': '<svg data-bind="xlink" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;} .st0{opacity:0.5;}</style><path class="White" d="M22 2H2c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h20c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H3V4h18v16zM15.5 6C16.9 6 18 7.1 18 8.5S16.9 11 15.5 11 13 9.9 13 8.5 14.1 6 15.5 6zM15 19l-8-8-3 3v5h11z"/><path class="st0 White" d="M16.4 19H19l-4-4-1.3 1.3z"/></svg>',
                'dxrd-svg-pictureeditor-size_mode_normal': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .st0{opacity:0.35;}</style><g><path class="Blue" d="M10 10h12v12H10z"/><path class="st0 Black" d="M5 15h3v2H5v4l-5-5 5-5v4zm6-10h4v3h2V5h4l-5-5-5 5zm21 11l-5-5v4h-3v2h3v4l5-5zm-15 8h-2v3h-4l5 5 5-5h-4v-3z"/><path class="Black" d="M28 22c-2.2 0-4 1.8-4 4v5c0 .6.4 1 1 1h6c.6 0 1-.4 1-1v-5c0-2.2-1.8-4-4-4zm0 2c1.1 0 2 .9 2 2h-4c0-1.1.9-2 2-2z"/></g></svg>',
                'dxrd-svg-pictureeditor-size_mode_squeeze': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .st0{opacity:0.35;}</style><g><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M28.2 26.8l2.1 2.1-1.4 1.4-2.1-2.1L24 31v-7h7l-2.8 2.8zm-24.4 0l-2.1 2.1 1.4 1.4 2.1-2.1L8 31v-7H1l2.8 2.8zM28.2 5.2l2.1-2.1-1.4-1.4-2.1 2.1L24 1v7h7l-2.8-2.8zM1 8h7V1L5.2 3.8 3.1 1.7 1.7 3.1l2.1 2.1L1 8z"/></g></svg>',
                'dxrd-svg-pictureeditor-size_mode_stretchimage': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .st0{opacity:0.35;}</style><g><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M5 15h3v2H5v4l-5-5 5-5v4zm6-10h4v3h2V5h4l-5-5-5 5zm21 11l-5-5v4h-3v2h3v4l5-5zm-15 8h-2v3h-4l5 5 5-5h-4v-3z"/></g></svg>',
                'dxrd-svg-pictureeditor-size_mode_zoomimage': '<svg data-bind="xlink" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .st0{opacity:0.35;}</style><g><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M6.2 4.8l2.1 2.1-1.4 1.4-2.1-2.1L2 9V2h7L6.2 4.8zm19.6 0l-2.1 2.1 1.4 1.4 2.1-2.1L30 9V2h-7l2.8 2.8zM6.2 27.2l2.1-2.1-1.4-1.4-2.1 2.1L2 23v7h7l-2.8-2.8zM23 30h7v-7l-2.8 2.8-2.1-2.1-1.4 1.4 2.1 2.1L23 30z"/></g></svg>',
                'dxrd-svg-pictureeditor-toolbar_brush_options': '<svg data-bind="xlink" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;} .BrushColor{fill:#000000;} .st0{opacity:0.75;}</style><g><path class="BrushColor" d="M2 21c8.5 8.6 11.8-4.5 19 0-8.4-8.6-11.8 4.6-19 0z"/><path class="White" d="M8 13l2 2c-2.5 4.2-4 4-8 4 2.5-2.5 3.3-6 6-6zm6-1l6.5-6.5c.3-.3.3-.7 0-1l-2-2c-.3-.3-.7-.3-1 0L11 9l3 3zm-5-1c-.3.3-.3.7 0 1l2 2c.3.3.7.3 1 0l1-1-3-3-1 1z"/></g></svg>',
                'dxrd-svg-pictureeditor-toolbar_clear': '<svg data-bind="xlink" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;} .Color{fill:#5DABE0;} .st0{opacity:0.75;}</style><path class="White" d="M14.2 12l5.5-5.5c.3-.3.3-.8 0-1.1l-1.1-1.1c-.3-.3-.8-.3-1.1 0L12 9.8 6.5 4.2c-.3-.3-.8-.3-1.1 0L4.2 5.4c-.3.3-.3.8 0 1.1L9.8 12l-5.5 5.5c-.3.3-.3.8 0 1.1l1.1 1.1c.3.3.8.3 1.1 0l5.5-5.5 5.5 5.5c.3.3.8.3 1.1 0l1.1-1.1c.3-.3.3-.8 0-1.1L14.2 12z"/></svg>',
                'dxrd-svg-pictureeditor-toolbar_open': '<svg data-bind="xlink" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;} .Color{fill:#5DABE0;} .st0{opacity:0.75;}</style><g><path class="st0 White" d="M7.9 11.9c.4-.6 1-.9 1.7-.9H19V8.7c0-.4-.3-.7-.7-.7H10V5.7c0-.4-.3-.7-.7-.7H3.7c-.4 0-.7.3-.7.7v14l4.9-7.8z"/><path class="White" d="M9.6 12h13.2c.5 0 .9.6.6 1.1l-4 6.5c-.2.3-.5.5-.8.5H4l4.7-7.5c.2-.4.5-.6.9-.6z"/></g></svg>',
                'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment': '<svg data-bind="xlink" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;} .Color{fill:#5DABE0;} .st0{opacity:0.75;}</style><path class="White" d="M20 12V4h-8l3 3-8 8-3-3v8h8l-3-3 8-8z"/></svg>',
                'dxrd-svg-portrait': '<svg data-bind="xlink" viewBox="0 0 34 34"><style>.st0{opacity:0.5;}</style><g><path class="dxd-icon-fill" d="M29 0H5c-.5 0-1 .5-1 1v32c0 .5.5 1 1 1h24c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 32H6V2h22v30z"/><path class="st0 dxd-icon-fill" d="M24 8H10V6h14v2zm0 2H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2z"/></g></svg>',
                'dxrd-svg-preview-export-Export': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22 10l-4-4v2h-1.4C11.8 8 8 11.1 8 15.9V18c1-4.2 4.6-6 8.6-6H18v2l4-4z"/><path class="dxd-icon-fill" d="M18 22H4V2h14l2 2V0H2v24h18v-8l-2 2z"/></svg>',
                'dxrd-svg-preview-export-export-to-csv': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v11h10v-7l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3zM0 3v7h13V3H0zm4 2H2v3h2v1H2V8H1V5h1V4h2v1zm4 0H6v1h1v1h1v1H7v1H5V8h2V7H6V6H5V5h1V4h2v1zm4 3h-1v1h-1V8H9V4h1v4h1V4h1v4z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4z"/></svg>',
                'dxrd-svg-preview-export-export-to-html': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h18v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h19V3H0zm4 6H3V7H2v2H1V4h1v2h1V4h1v5zm4-4H7v4H6V5H5V4h3v1zm6 4h-1V6h-1v1h-1V6h-1v3H9V4h1v1h1v1h1V5h1V4h1v5zm4 0h-3V4h1v4h2v1z"/></svg>',
                'dxrd-svg-preview-export-export-to-image': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h14v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h15V3H0zm2 6H1V4h1v5zm6 0H7V6H6v1H5V6H4v3H3V4h1v1h1v1h1V5h1V4h1v5zm5-4h-3v3h2V7h1v2h-3V8H9V5h1V4h3v1z"/></svg>',
                'dxrd-svg-preview-export-export-to-mht': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM2 5h1v1H2z"/><path class="dxd-icon-fill" d="M0 3v7h13V3H0zm4 3H3v1h1v2H3V7H2v2H1V4h2v1h1v1zm4-1H7v4H6V5H5V4h3v1zm4 0h-2v1h1v1h-1v2H9V4h3v1z"/></svg>',
                'dxrd-svg-preview-export-export-to-pdf': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM2 5h1v1H2z"/><path class="dxd-icon-fill" d="M0 3v7h13V3H0zm4 3H3v1H2v2H1V4h2v1h1v1zm4 2H7v1H5V4h2v1h1v3zm4-3h-2v1h1v1h-1v2H9V4h3v1z"/><path class="dxd-icon-fill" d="M6 5h1v3H6z"/></svg>',
                'dxrd-svg-preview-export-export-to-rtf': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h14v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h15V3H0zm6 6H5V6H4v1H3V6H2v3H1V4h1v1h1v1h1V5h1V4h1v5zm4 0H9V7H8v2H7V4h1v2h1V4h1v5zm4-4h-1v4h-1V5h-1V4h3v1z"/></svg>',
                'dxrd-svg-preview-export-export-to-txt': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h18v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM18 3H0v7h19V3h-1zM4 6H3v1h1v2H3V7H2v2H1V7h1V6H1V4h1v2h1V4h1v2zm4 3H5V4h1v4h2v1zm4-4h-2v1h1v1h1v1h-1v1H9V8h2V7h-1V6H9V5h1V4h2v1zm4 1h-1v1h1v2h-1V7h-1v2h-1V7h1V6h-1V4h1v2h1V4h1v2z"/></svg>',
                'dxrd-svg-preview-export-export-to-xls': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM12.3 3H0v7h13V3h-.7zM4 6H3v1h1v2H3V7H2v2H1V7h1V6H1V4h1v2h1V4h1v2zm4 3H5V4h1v4h2v1zm4-4h-2v1h1v1h1v1h-1v1H9V8h2V7h-1V6H9V5h1V4h2v1z"/></svg>',
                'dxrd-svg-preview-export-export-to-xlsx': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h13V3H0zm4 2H3v4H2V5H1V4h3v1zm4 1H7v1h1v2H7V7H6v2H5V7h1V6H5V4h1v2h1V4h1v2zm4-1h-1v4h-1V5H9V4h3v1z"/></svg>',
                'dxrd-svg-preview-export-export-to': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 4l-4-4v4h4zM22 10v6H12v-6l-2 2v12h14V10h-2zm0 12H12v-4h10v4z"/><path class="dxd-icon-fill" d="M16 10h4v4h-4z"/><path class="dxd-icon-fill" d="M18 6h-6V0H0v20h8V10l2-2h8z"/></svg>',
                'dxrd-svg-preview-first_page': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M6 12l14 8V4zM2 3h2v18H2z"/></svg>',
                'dxrd-svg-preview-last_page': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 12L2 20V4zM18 3h2v18h-2z"/></svg>',
                'dxrd-svg-preview-multi_page_preview': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 0H0v10h10V2H8V0zm0 8H2V2h4v2h2v4zM20 2V0h-8v10h10V2h-2zm0 6h-6V2h4v2h2v4zM8 12H0v10h10v-8H8v-2zm0 8H2v-6h4v2h2v4z"/></svg>',
                'dxrd-svg-preview-next_page': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 12L4 20V4z"/></svg>',
                'dxrd-svg-preview-previous_page': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 12l14 8V4z"/></svg>',
                'dxrd-svg-preview-print': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 0H6v10h10V0zm-2 8H8V2h6v6zM6 24h10v-6H6v6zm2-4h6v2H8v-2z"/><path class="dxd-icon-fill" d="M20 8h-2v4H4V8H2l-2 2v10h4v-4h14v4h4V10z"/></svg>',
                'dxrd-svg-preview-print_page': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 0H6v10h10V0zm-2 8H8V2h6v6zM20 8h-2v2h4z"/><path class="dxd-icon-fill" d="M4 8H2l-2 2v10h12v-8H4zM22 14v-2h-8v12h10V14h-2zm0 8h-6v-8h4v2h2v6z"/></svg>',
                'dxrd-svg-preview-print_preview': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 4l-4-4v4zM21.7 22.3l-4.5-4.5c.5-.8.8-1.8.8-2.8 0-2.8-2.2-5-5-5s-5 2.2-5 5 2.2 5 5 5c1 0 2-.3 2.8-.8l4.5 4.5c.4.4 1 .4 1.4 0s.4-1 0-1.4zM13.1 18c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.4 3-3 3z"/><path class="dxd-icon-fill" d="M13 8c2 0 3.7.8 5 2.1V6h-6V0H0v20h8.1C6.8 18.7 6 17 6 15c0-3.9 3.1-7 7-7z"/></svg>',
                'dxrd-svg-preview-report_designer': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 6l-4-4v4h4zM14 18h2l8-8-2-2-8 8z"/><path class="dxd-icon-fill" d="M12 20v-4l6-6V8h-6V2H0v20h18v-4l-2 2h-4zm-6-4c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/><path class="dxd-icon-fill" d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2H6v-2z"/></svg>',
                'dxrd-svg-preview-search': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2.6 21.4c.8.8 2 .8 2.8 0l4.6-4.6c1.2.7 2.6 1.1 4.1 1.1 4.4 0 8-3.6 8-8s-3.6-8-8-8-8 3.6-8 8c0 1.5.4 2.9 1.1 4.1l-4.6 4.6c-.8.8-.8 2 0 2.8zM10 10.1c0-2.2 1.8-4 4-4s4 1.8 4 4-1.8 4-4 4-4-1.9-4-4z"/></svg>',
                'dxrd-svg-preview-single_page': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 4V0H2v24h20V4h-4zm2 18H4V2h12v4h4v16z"/></svg>',
                'dxrd-svg-preview-sort_asc': '<svg data-bind="xlink" viewBox="0 0 11 11"><path class="dxd-icon-fill" d="M0 7l5-5 5 5z"/></svg>',
                'dxrd-svg-preview-sort_desc': '<svg data-bind="xlink" viewBox="0 0 11 11"><path class="dxd-icon-fill" d="M10 3L5 8 0 3z"/></svg>',
                'dxrd-svg-reportexplorer-component': '<svg data-bind="xlink" viewBox="0 0 24 24"><ellipse class="dxd-icon-fill" cx="11" cy="4" rx="7" ry="2"/><path class="dxd-icon-fill" d="M11 10c-3.9 0-7-.9-7-2v12c0 1.1 3.1 2 7 2s7-.9 7-2V8c0 1.1-3.1 2-7 2z"/></svg>',
                'dxrd-svg-reportexplorer-components': '<svg data-bind="xlink" viewBox="0 0 24 24"><circle class="dxd-icon-fill" cx="12" cy="12" r="2"/><path class="dxd-icon-fill" d="M20 10h-.3c-.2-.7-.5-1.4-.9-2.1l.2-.2c.8-.8.8-2.1 0-2.8-.8-.8-2.1-.8-2.8 0l-.2.2c-.6-.4-1.3-.7-2.1-.9V4c0-1.1-.9-2-2-2S10 2.9 10 4v.3c-.7.2-1.4.4-2.1.8l-.1-.2c-.8-.7-2.1-.7-2.9 0-.7.8-.7 2.1 0 2.9l.2.2c-.4.6-.6 1.3-.8 2H4c-1.1 0-2 .9-2 2s.9 2 2 2h.3c.2.7.5 1.4.9 2.1l-.2.2c-.8.8-.8 2.1 0 2.8.8.8 2.1.8 2.8 0l.2-.2c.6.4 1.3.7 2.1.9v.2c0 1.1.9 2 2 2s2-.9 2-2v-.3c.7-.2 1.4-.5 2.1-.9l.2.2c.8.8 2.1.8 2.8 0 .8-.8.8-2.1 0-2.8L19 16c.4-.6.7-1.3.9-2.1h.1c1.1 0 2-.9 2-2 0-1-.9-1.9-2-1.9zm-8 6c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/></svg>',
                'dxrd-svg-reportexplorer-formatting_rule': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 10h6V2H2v18h12v-2l-4-4z"/><path class="dxd-icon-fill" d="M12 12v2l4 4v4h2v-4l4-4v-2z"/></svg>',
                'dxrd-svg-reportexplorer-formatting_rules': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 0H0v16h2V2h10z"/><path class="dxd-icon-fill" d="M10 10h6V4H4v16h10v-2l-4-4z"/><path class="dxd-icon-fill" d="M12 12v2l4 4v4h2v-4l4-4v-2z"/></svg>',
                'dxrd-svg-reportexplorer-style': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M6 20c1-.3 1.5-1.1 1.7-2 .2-.5.4-1 .8-1.4.3-.3.5-.5.9-.6 0 0 .7-.1 1-.5.1-.1.2-.3.2-.3l.7-1.3c.1-.2.8-.9.8-.9.6-.7 1.3-1.4 1.9-2.1V2H0v18h6zm5.4-6.4c-.1.3-.2.4 0 0zM21.8 8.1c-.2-.2-.5-.1-.8.1-.4.4-.9.7-1.3 1.1-2 1.7-3.5 3.4-5.3 5.3-.1.1-.5.5-.5.6-.2.2-.3.4-.6.8.6.5 1.5 1.2 2.1 1.7.4-.3.6-.6.6-.6l.4-.4c.7-.9 1.1-1.5 1.8-2.4 1.3-1.7 2.5-3.5 3.5-5.4.4-.3.3-.6.1-.8zM12.5 18.1c-.1-.1-.2-.1-.3-.1-.7-.1-1.2.2-1.7.7-.3.3-.6.8-.8 1.3-.2.9-.7 1.7-1.7 2h2.6c1 0 1.8-.4 2.5-1.1.4-.4.7-.9.6-1.5 0-.2-.1-.4-.2-.5-.3-.3-.7-.5-1-.8z"/></svg>',
                'dxrd-svg-reportexplorer-styles': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 0v2H2v14H0V0z"/><path class="dxd-icon-fill" d="M8 20c1-.3 1.5-1.1 1.7-2 .2-.5.4-1 .8-1.4.3-.3.5-.5.9-.6 0 0 .7-.1 1-.5.1-.1.2-.3.2-.3l.7-1.3c.1-.2.8-.9.8-.9.6-.7 1.3-1.4 1.9-2.1V4H4v16h4zm5.4-6.4c-.1.3-.2.4 0 0zM23.8 8.1c-.2-.2-.5-.1-.8.1-.4.4-.9.7-1.3 1.1-2 1.7-3.5 3.4-5.3 5.3-.1.1-.5.5-.5.6-.2.2-.3.4-.6.8.6.5 1.5 1.2 2.1 1.7.4-.3.6-.6.6-.6l.4-.4c.7-.9 1.1-1.5 1.8-2.4 1.3-1.7 2.5-3.5 3.5-5.4.4-.3.3-.6.1-.8zM14.5 18.1c-.1-.1-.2-.1-.3-.1-.7-.1-1.2.2-1.7.7-.4.4-.6.9-.8 1.4-.3.9-.7 1.6-1.7 2h2.6c1 0 1.8-.4 2.5-1.1.4-.4.7-.9.6-1.5 0-.2-.1-.4-.2-.5-.3-.4-.7-.6-1-.9z"/></svg>',
                'dxrd-svg-reportexplorer-tablecell': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 8v8h8V8H8zm6 6h-4v-4h4v4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 2v20h20V2H2zm18 6h-4v2h4v4h-4v2h4v4h-4v-4h-2v4h-4v-4H8v4H4v-4h4v-2H4v-4h4V8H4V4h4v4h2V4h4v4h2V4h4v4z"/></svg>',
                'dxrd-svg-reportexplorer-tablerow': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 8H2v8h20V8h-6zm-8 6H4v-4h4v4zm6 0h-4v-4h4v4zm6 0h-4v-4h4v4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M4 8V4h4v4h2V4h4v4h2V4h4v4h2V2H2v6zM20 16v4h-4v-4h-2v4h-4v-4H8v4H4v-4H2v6h20v-6z"/></svg>',
                'dxrd-svg-series-area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 20v-4l8-8 4 4 8-8v16z"/></svg>',
                'dxrd-svg-series-area3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 12v2h4v2H8v2h4v2H8v2h6V12zM20 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M12 8L8 4l-8 8v4h6v-6h14V0z"/></svg>',
                'dxrd-svg-series-bubbles': '<svg data-bind="xlink" viewBox="0 0 24 24"><circle class="dxd-icon-fill" cx="8" cy="4" r="2"/><circle class="dxd-icon-fill" cx="16" cy="10" r="4"/><circle class="dxd-icon-fill" cx="7" cy="19" r="3"/></svg>',
                'dxrd-svg-series-candle_stick': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 4V2h-2v2h-2v16h2v2h2v-2h2V4h-2zm0 14h-2V6h2v12zM8 2H6v2H4v16h2v2h2v-2h2V4H8z"/></svg>',
                'dxrd-svg-series-doughnut': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M5.1 10C5.5 7 7 5.5 10 5.1V0C5 .5.5 5 0 10h5.1zM12 5.1c3 .5 5 2.9 5 5.9 0 1.3-.4 2.5-1.1 3.5l3.6 3.6c1.5-2 2.5-4.4 2.5-7.1C22 5.3 18 .5 12 0v5.1zM14.5 15.9c-1 .7-2.2 1.1-3.5 1.1-3 0-5.4-2-5.9-5H0c.5 6 5.2 10 11 10 2.7 0 5.1-1 7-2.6l-3.5-3.5z"/></svg>',
                'dxrd-svg-series-doughnut3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2.5v-5.9L22 12zm0 8h-2v-6h2v6zM10 4.9V0C5 .5.5 5 0 10h5c.5-3 2-4.6 5-5.1zM12 0v4.9c2 .4 4.5 2.1 4.9 5.1h5C21.5 5 17 .5 12 0zM5.1 12H0c.4 5 4 7.9 8 9.1v-5.3C6 14.9 5.4 14 5.1 12z"/></svg>',
                'dxrd-svg-series-full_stacked_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2v14L12 6l4 4 6-6V2z"/><path class="dxd-icon-fill" d="M12 10L2 20v2h20V8l-6 6z"/></svg>',
                'dxrd-svg-series-full_stacked_area3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM14 8l6-6V0H0v14L10 4z"/><path class="dxd-icon-fill" d="M10 8L0 18v2h8v-8h6zM20 6l-6 6h6z"/></svg>',
                'dxrd-svg-series-full_stacked_bar': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 4h4v10H4zM10 4h4v6h-4zM10 12h4v8h-4zM16 4h4v8h-4zM16 14h4v6h-4zM4 16h4v4H4z"/></svg>',
                'dxrd-svg-series-full_stacked_bar3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0h4v10H2zM8 0h4v6H8zM8 8h4v4H8zM14 0h4v8h-4zM14 10h4v2h-4zM2 12h4v4H2zM8 14v2h4v2H8v2h4v2H8v2h6V14h-2zM20 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/></svg>',
                'dxrd-svg-series-full_stacked_line': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2h20v2H2zM12 8L2 18v4l10-10 4 4 6-6V6l-6 6z"/></svg>',
                'dxrd-svg-series-full_stacked_line3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 14v2h4v2H8v2h4v2H8v2h6V14h-2zM20 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 0h20v2H0z"/><path class="dxd-icon-fill" d="M12 12h4l4-4V4l-6 6-4-4L0 16v4l10-10z"/></svg>',
                'dxrd-svg-series-full_stacked_spline_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 11.9c1.8 0 2.6 1.3 3.3 2.3S6.5 16 8 16c1.4 0 2.6-2.1 3.7-4.2C13.3 9.1 14.9 6 18 6c1.5 0 2.8.7 4 1.8V2H2v9.9z"/><path class="dxd-icon-fill" d="M18 8c-1.9 0-3.2 2.4-4.5 4.7C12.1 15.3 10.6 18 8 18s-3.7-1.6-4.4-2.7C3 14.3 2.7 14 2 14v8h20V10.7C20.8 9.3 19.4 8 18 8z"/></svg>',
                'dxrd-svg-series-full_stacked_spline_area3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM16 4c1.5 0 2.8.7 4 1.8V0H0v9.9c1.8 0 2.6 1.3 3.3 2.3C4 13.2 4.5 14 6 14c1.4 0 2.6-2.1 3.7-4.2C11.3 7.1 12.9 4 16 4z"/><path class="dxd-icon-fill" d="M11.5 10.8l-.6 1.2H20V8.7C18.8 7.3 17.4 6 16 6c-1.9 0-3.2 2.5-4.5 4.8zM1.6 13.3C1 12.3.7 12 0 12v8h8v-4.6c-1 .4-1.2.6-2 .6-2.6 0-3.6-1.6-4.4-2.7z"/></svg>',
                'dxrd-svg-series-funnel': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12h4l6-6H4zM4 2h16v2H4zM10 22l4-2v-6h-4z"/></svg>',
                'dxrd-svg-series-funnel3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM6 10h4l6-6H0zM0 0h16v2H0zM6 20l2-1v-7H6z"/></svg>',
                'dxrd-svg-series-gantt': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 4h8v4H2zM6 10h14v4H6zM2 16h12v4H2z"/></svg>',
                'dxrd-svg-series-line': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 16L12 6l4 4 6-6v4l-6 6-4-4L2 20z"/></svg>',
                'dxrd-svg-series-line3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20 0l-6 6-4-4L0 12v4L10 6l4 4 6-6z"/><path class="dxd-icon-fill" d="M8 12v2h4v2H8v2h4v2H8v2h6V12h-2zM20 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/></svg>',
                'dxrd-svg-series-manhattan_bar3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 12h4v8H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M12 5.9h4V10h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 10h2V2H6v18h2z"/></svg>',
                'dxrd-svg-series-nested_doughnut': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20 10h2c-.5-5-5-9.5-10-10v2c4 .5 7.5 4 8 8z"/><path class="dxd-icon-fill" d="M11 20c-5 0-9-4-9-9 0-4.6 3-8.5 8-9V0C4 .5 0 5.2 0 11c0 6.1 4.9 11 11 11 5.7 0 10.5-4 11-10h-2c-.5 5-4.3 8-9 8z"/><path class="dxd-icon-fill" d="M11 16c-2.4 0-4.4-2-4.9-4h-2c.5 3 3.4 6 6.9 6 1.4 0 2.7-.4 3.8-1.2l-1.5-1.5c-.6.5-1.4.7-2.3.7zM4.1 10h2c.5-2 2.5-4 4.9-4 2.8 0 5 2.2 5 5 0 .9-.2 1.7-.7 2.4l1.5 1.5c.8-1.1 1.2-2.5 1.2-3.9 0-3.9-3.1-7-7-7-3.5 0-6.4 3-6.9 6z"/></svg>',
                'dxrd-svg-series-pie': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 2v10H2c0 5.5 4.5 10 10 10s10-4.5 10-10S17.5 2 12 2z"/><path class="dxd-icon-fill" d="M10 0C4.5 0 0 4.5 0 10h10V0z"/></svg>',
                'dxrd-svg-series-pie3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM10 0C4.5 0 0 4.5 0 10h10V0zM12 2v8h9.8c-.9-4.6-5-8-9.8-8zM8 21.1V12H2c0 4.1 2 7.6 6 9.1z"/></svg>',
                'dxrd-svg-series-point': '<svg data-bind="xlink" viewBox="0 0 24 24"><circle class="dxd-icon-fill" cx="4" cy="16" r="2"/><circle class="dxd-icon-fill" cx="8" cy="8" r="2"/><circle class="dxd-icon-fill" cx="14" cy="12" r="2"/><circle class="dxd-icon-fill" cx="20" cy="6" r="2"/></svg>',
                'dxrd-svg-series-polar_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm.9 19.9V17c0-.5-.5-1-1-1s-1 .5-1 1v3c-4-.4-7.5-3.8-8-8h3.1c.5 0 1-.5 1-1s-.5-1-1-1h-3H2c.5-4.2 4-7.5 8-8v1c0 .5.5 1 1 1s1-.5 1-1v-.9c4 .5 7.5 3.8 7.9 7.9H19c-.5 0-1 .5-1 1s.5 1 1 1h.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><path class="dxd-icon-fill" d="M6 6h10v10z"/></svg>',
                'dxrd-svg-series-polar_line': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm.9 19.9V17c0-.5-.5-1-1-1s-1 .5-1 1v3c-4-.4-7.5-3.8-8-8h3.1c.5 0 1-.5 1-1s-.5-1-1-1h-3H2c.5-4.2 4-7.5 8-8v1c0 .5.5 1 1 1s1-.5 1-1v-.9c4 .5 7.5 3.8 7.9 7.9H19c-.5 0-1 .5-1 1s.5 1 1 1h.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><path class="dxd-icon-fill" d="M16 16L6 6h10v10zm-6-8l4 4V8h-4z"/></svg>',
                'dxrd-svg-series-polar_point': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm8.8 10H12V2.1c4 .5 7.5 3.8 7.9 7.9zM10 2v8H2.1 2c.5-4.2 4-7.5 8-8zm0 18c-4-.4-7.5-3.8-8-8h8v8zm2-.1V12h7.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="7" cy="15" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/></svg>',
                'dxrd-svg-series-radar_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 16L6 6h10v10zm-6-8l4 4V8h-4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M11.9 15.9c-.3.1-.6.1-.9.1-2.8 0-5-2.2-5-5 0-.3 0-.6.1-.9L4.5 8.5c-.3.8-.5 1.6-.5 2.5 0 3.9 3.1 7 7 7 .9 0 1.7-.2 2.5-.5l-1.6-1.6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/></svg>',
                'dxrd-svg-series-radar_line': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="7" cy="15" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/><g><path class="dxd-icon-fill dxd-opacity-60" d="M13.1 15.5c-.6.3-1.4.5-2.1.5-.7 0-1.4-.2-2.1-.5-.2.7-.8 1.3-1.6 1.4 1.1.7 2.3 1 3.6 1 1.3 0 2.6-.4 3.7-1-.7-.1-1.3-.6-1.5-1.4zM17 7.4c-.1.8-.7 1.4-1.4 1.6.2.6.4 1.3.4 2s-.2 1.4-.5 2.1c.7.2 1.3.8 1.4 1.6.6-1.1 1-2.3 1-3.6s-.3-2.7-.9-3.7zM8.9 6.5c.7-.3 1.4-.5 2.1-.5.7 0 1.5.2 2.1.5.2-.7.8-1.3 1.6-1.4-1.1-.7-2.3-1-3.7-1-1.3-.1-2.6.3-3.6.9.7.2 1.3.7 1.5 1.5zM6.5 13.1c-.3-.7-.5-1.4-.5-2.1s.2-1.4.5-2.1c-.8-.2-1.3-.8-1.5-1.6-.6 1.1-1 2.4-1 3.7s.4 2.6 1 3.7c.2-.8.7-1.4 1.5-1.6z"/></g></svg>',
                'dxrd-svg-series-radar_point': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/><g><path class="dxd-icon-fill dxd-opacity-60" d="M13.1 15.5c-.6.3-1.4.5-2.1.5-.3 0-.6 0-.9-.1h-.2c-.2-.1-.5-.1-.7-.2-.1 0-.2-.1-.3-.1-1.1-.5-2-1.4-2.5-2.5-.1-.1-.1-.2-.1-.3-.1-.2-.2-.4-.2-.7v-.2c-.1-.3-.1-.6-.1-.9 0-.5.1-1 .2-1.5.1-.2.1-.4.2-.6-.7-.2-1.2-.8-1.4-1.6-.1.3-.2.5-.4.8 0 .1-.1.1-.1.2 0 .2-.1.4-.2.6 0 .1-.1.2-.1.3 0 .2-.1.4-.1.6v.3c-.1.3-.1.6-.1.9 0 .3 0 .6.1.9v.2c0 .3.1.5.2.8v.1c.5 1.7 1.6 3.1 3.1 4 .5.3 1.1.6 1.7.8h.1c.3.1.5.1.8.2h.2c.3 0 .6.1.9.1h.5c1.1-.1 2.2-.4 3.1-1-.8-.3-1.4-.8-1.6-1.6zM17 7.4c-.1.8-.7 1.4-1.4 1.6.2.6.4 1.3.4 2s-.2 1.4-.5 2.1c.7.2 1.3.8 1.4 1.6.6-1.1 1-2.3 1-3.6s-.3-2.7-.9-3.7zM7.4 5c.8.1 1.4.7 1.6 1.4.6-.2 1.3-.4 2-.4s1.5.2 2.1.5c.2-.7.8-1.3 1.6-1.4-1.1-.7-2.3-1-3.7-1-1.3-.1-2.6.3-3.6.9z"/></g></svg>',
                'dxrd-svg-series-range_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 14L12 4l4 4 6-6v6l-6 6-4-4L2 20z"/></svg>',
                'dxrd-svg-series-range_area3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M20 0l-6 6-4-4L0 12v6L10 8l2 2h4l4-4z"/></svg>',
                'dxrd-svg-series-range_bar': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 12h4v8H4zM16 6h4v14h-4zM10 2h4v14h-4z"/></svg>',
                'dxrd-svg-series-scatter_line': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22.8 8c-1.5-2.7-4-4.7-7-5.5-3-.8-6.1-.8-8.8.8C3 5.6.5 10 0 14h2.1c.4-4 2.5-6.9 6-8.9 2.2-1.3 4.8-1.4 7.2-.7 2.4.6 4.4 2.3 5.7 4.5 1 1.7 1.2 3.8.7 5.7-.5 1.9-1.8 3.5-3.5 4.5-2.7 1.6-6.2.6-7.8-2.2-1.2-2.1-.4-4.8 1.6-6 .8-.4 1.6-.5 2.5-.3.8.2 1.5.8 2 1.6.3.6.4 1.2.2 1.9-.2.6-.6 1.2-1.1 1.5-.8.5-1.9.2-2.4-.7-.3-.6-.1-1.3.4-1.6l-1-1.8c-1.5.9-2.1 2.9-1.2 4.4 1 1.8 3.3 2.5 5.1 1.4 2.1-1.2 2.9-4 1.7-6.1-.7-1.3-1.8-2.1-3.2-2.5-1.4-.4-2.8-.2-4 .5C8 11 6.9 14.9 8.7 18c2.1 3.8 6.8 5.1 10.6 2.9 2.2-1.3 3.8-3.3 4.4-5.7.6-2.4.3-5-.9-7.2z"/></svg>',
                'dxrd-svg-series-side_by_side_bar': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 12h4v8H4zM16 6h4v14h-4zM10 2h4v18h-4z"/></svg>',
                'dxrd-svg-series-side_by_side_bar3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 10h4v8H0zM12 4h4v6h-4zM10 0H6v18h2v-8h2z"/></svg>',
                'dxrd-svg-series-side_by_side_full_stacked_bar': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h4v12H0zM0 14h4v8H0zM12 0h4v16h-4zM12 18h4v4h-4zM18 8h4v14h-4zM18 0h4v6h-4zM6 8h4v14H6zM6 0h4v6H6z"/></svg>',
                'dxrd-svg-series-side_by_side_full_stacked_bar3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 0h4v12H0zM0 14h4v8H0zM12 0h4v12h-4zM18 8h4v4h-4zM18 0h4v6h-4zM6 0h4v6H6zM10 8H6v14h2V12h2z"/></svg>',
                'dxrd-svg-series-side_by_side_gantt': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0h8v4H2zM4 12h12v4H4zM6 18h12v4H6zM6 6h14v4H6z"/></svg>',
                'dxrd-svg-series-side_by_side_range_bar': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 12h4v8H0zM12 6h4v12h-4zM18 4h4v12h-4zM6 2h4v14H6z"/></svg>',
                'dxrd-svg-series-side_by_side_stacked_bar': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 10h4v2H0zM0 14h4v8H0zM6 12h4v10H6zM6 0h4v10H6zM12 4h4v4h-4zM12 10h4v12h-4zM18 2h4v4h-4zM18 8h4v14h-4z"/></svg>',
                'dxrd-svg-series-side_by_side_stacked_bar3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 8h4v4H0zM0 14h4v8H0zM6 12h2v10H6zM6 0h4v10H6zM12 4h4v4h-4zM12 10h4v2h-4zM18 2h4v4h-4zM18 8h4v2h-4z"/></svg>',
                'dxrd-svg-series-spline': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 11.5C22.1 8.6 19.7 6 17 6c-3 0-4.7 3.1-6.2 5.8C9.6 13.8 8.4 16 7 16c-1.5 0-2-.8-2.7-1.8-.6-1-1.5-2.2-3.3-2.3-.4 0-.7.1-1 .2V15c0-.1.1-.5.4-.8.2-.2.5-.3.6-.3.7 0 1 .4 1.6 1.3C3.4 16.4 4.4 18 7 18c2.6 0 4.1-2.7 5.5-5.2C13.8 10.4 15.1 8 17 8c2.9 0 5.9 5.4 6.9 7.2l.1.2v-3.9z"/></svg>',
                'dxrd-svg-series-spline3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM15 2c2.9 0 5.9 5.4 6.9 7.2l.1.2V5.5C20.1 2.6 17.7 0 15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v2.3c.2.2.4.5.6.9C1.4 10.4 2.4 12 5 12c2.6 0 4.1-2.7 5.5-5.2C11.8 4.4 13.1 2 15 2z"/></svg>',
                'dxrd-svg-series-spline_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M15 2c-3 0-4.7 3.1-6.2 5.8C7.6 9.8 6.4 12 5 12c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V20h22V7.5C20.1 4.6 17.8 2 15 2z"/></svg>',
                'dxrd-svg-series-spline_area3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M22 7.5C20.1 4.6 17.8 2 15 2c-3 0-4.7 3.1-6.2 5.8C7.6 9.8 6.4 12 5 12c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V20h8v-8h14V7.5z"/></svg>',
                'dxrd-svg-series-stacked_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 8l-4-4L2 14v4L12 8l4 4 6-6V2z"/><path class="dxd-icon-fill" d="M12 12L2 22h20V10l-6 6z"/></svg>',
                'dxrd-svg-series-stacked_area3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM8 22v-8l-8 8z"/><path class="dxd-icon-fill" d="M20 2l-6 6-4-4L0 14v4L10 8l2 2h4l4-4z"/></svg>',
                'dxrd-svg-series-stacked_bar': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 8h4v4H4zM4 14h4v6H4zM10 2h4v6h-4zM10 10h4v10h-4zM16 6h4v4h-4zM16 12h4v8h-4z"/></svg>',
                'dxrd-svg-series-stacked_bar3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 6h4v4H0zM0 12h4v6H0zM6 0h4v6H6zM10 8H6v10h2v-6h2zM12 4h4v4h-4zM12 10h4v2h-4z"/></svg>',
                'dxrd-svg-series-stacked_line': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M14 8l-4-4L0 14v4L10 8l4 4 8-8V0z"/><path class="dxd-icon-fill" d="M10 10L0 20v4l10-10 8 8 4-4v-4l-4 4z"/></svg>',
                'dxrd-svg-series-stacked_line3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M14 12l8-8V0l-8 8-4-4L0 14v4L10 8zM10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M10 10l-2 2h4zM0 24l8-8v-4l-8 8zM22 10V6l-6 6h4z"/></svg>',
                'dxrd-svg-series-stacked_spline_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v6c1.2.4 1.8 1.3 2.3 2.1C3 15.2 3.5 16 5 16c1.4 0 2.6-2.1 3.7-4.2C10.3 9.1 12 6 15 6c2.8 0 5.1 2.6 7 5.5v-6C20.1 2.6 17.8 0 15 0z"/><path class="dxd-icon-fill" d="M15 9c-3 0-4.7 3.1-6.2 5.8C7.6 16.8 6.4 19 5 19c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V22h22v-7.5C20.1 11.6 17.8 9 15 9z"/></svg>',
                'dxrd-svg-series-stacked_spline_area3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M15 6c2.8 0 5.1 2.6 7 5.5v-6C20.1 2.6 17.8 0 15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v6c1.2.4 1.8 1.3 2.3 2.1C3 15.2 3.5 16 5 16c1.4 0 2.6-2.1 3.7-4.2C10.3 9.1 12 6 15 6z"/><path class="dxd-icon-fill" d="M5.1 19c-1.5 0-2.1-.8-2.8-1.8-.5-.8-1.2-1.7-2.3-2.1V22h8v-5.7C7 17.8 6.1 19 5.1 19zM10.4 12h9.7c-1.5-1.7-3.2-3-5.2-3-1.9 0-3.3 1.3-4.5 3z"/></svg>',
                'dxrd-svg-series-step_area': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 6V0h-6v12H6V8H0v14h24V6z"/></svg>',
                'dxrd-svg-series-step_area3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM18 14v10h4l2-2v-6l-2-2h-4zm4 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M18 6V0h-6v10H6V6H0v14h8v-8h16V6z"/></svg>',
                'dxrd-svg-series-step_line': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M14 2v18H8v-6H0v2h6v6h10V4h6v8h2V2z"/></svg>',
                'dxrd-svg-series-step_line3d': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM6 12H0v2h4v6h4v-2H6zM16 10h4V8h-2V0h-8v12h2V2h4v6z"/></svg>',
                'dxrd-svg-series-stock': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 0H4v4H0v4h4v14h4v-4h4v-4H8zM20 18V0h-8v4h4v18h8v-4z"/></svg>',
                'dxrd-svg-series-swift_plot': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 8l-4 4-2-2-6 6-4-4-2 2-4-4-2 2v-2l2-2 4 4 2-2 4 4 6-6 2 2 4-4"/></svg>',
                'dxrd-svg-tabs-collapse': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 12l-6 6-2-2 4-4-4-4 2-2z"/></svg>',
                'dxrd-svg-tabs-expand': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 12l6 6 2-2-4-4 4-4-2-2z"/></svg>',
                'dxrd-svg-tabs-expressions': '<svg data-bind="xlink" viewBox="0 0 32 32"><path class="dxd-icon-fill" d="M18.6 10c.3-2.5.6-3.4.8-3.7.6-1 2.2-.2 3 0l4.1-4c-3.6-.5-7.1-1.1-9.8 2-1.2 1.4-2 3.3-2.3 5.7l-.2 2H10l-4 4h7.7l-.7 7c-.2 1.9-.8 3.6-3 2.9l-.8-.3-3.7 3.3 2.3.8c2.4.8 4.9-.1 6.7-1.7 1-.9 1.7-1.9 2.2-3 .4-1.1.7-2.5.9-4.4L18 16h4l4-4h-7.6l.2-2z"/></svg>',
                'dxrd-svg-tabs-fieldlist': '<svg data-bind="xlink" viewBox="0 0 24 24"><ellipse class="dxd-icon-fill" cx="11" cy="2" rx="7" ry="2"/><path class="dxd-icon-fill" d="M11 6c-3.9 0-7-.9-7-2v4c0 1.1 3.1 2 7 2s7-.9 7-2V4c0 1.1-3.1 2-7 2zM11 12c-3.9 0-7-.9-7-2v4c0 1.1 3.1 2 7 2s7-.9 7-2v-4c0 1.1-3.1 2-7 2zM11 18c-3.9 0-7-.9-7-2v4c0 1.1 3.1 2 7 2s7-.9 7-2v-4c0 1.1-3.1 2-7 2z"/></svg>',
                'dxrd-svg-tabs-parameters': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M19.8 5c-.2-.4-.4-.7-.9-1.1C17.3 2.7 14 2 11 2c-3.4 0-6.3.7-7.8 1.9 0 0-.7.5-1 1.1-.1.3-.2.7-.2 1 0 .2-.1.9 1 2l7 7v6c0 .6.5 1 1 1s1-.5 1-1v-6l7-7c.5-.4 1-1.2 1-2 0-.3-.1-.7-.2-1zM11 8c-3.9 0-7-.9-7-2s3.1-2 7-2c4 0 7 .9 7 2s-3.1 2-7 2z"/></svg>',
                'dxrd-svg-tabs-reportexplorer': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 16v-6h-6V6h4V0H6v6h4v4H4v6H0v6h10v-6H6v-4h10v4h-4v6h10v-6z"/></svg>',
                'dxrd-svg-tabs-search': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2.6 21.4c.8.8 2 .8 2.8 0l4.6-4.5c1.1.7 2.5 1.1 4 1.1 4.4 0 8-3.6 8-8s-3.6-8-8-8-8 3.6-8 8c0 1.5.4 2.9 1.1 4.1l-4.6 4.6c-.7.7-.7 1.9.1 2.7zM10 10c0-2.2 1.8-4 4-4s4 1.8 4 4-1.8 4-4 4-4-1.8-4-4z"/></svg>',
                'dxrd-svg-titles-bottom_center': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M4 0v14h14V0H4zm6 8V6h2v2h-2zm2 2v2h-2v-2h2zm-2-6V2h2v2h-2zM6 2h2v2H6V2zm0 4h2v2H6V6zm0 4h2v2H6v-2zm10 2h-2v-2h2v2zm0-4h-2V6h2v2zm-2-4V2h2v2h-2z"/><path class="dxd-icon-fill" d="M6 18h10v4H6z"/></svg>',
                'dxrd-svg-titles-bottom_left': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 0v14h14V0H6zm6 8V6h1.9v2H12zm1.9 2v2H12v-2h1.9zM12 4V2h1.9v2H12zM8 2h1.9v2H8V2zm0 4h1.9v2H8V6zm0 4h1.9v2H8v-2zm9.9 2H16v-2h1.9v2zm0-4H16V6h1.9v2zM16 4V2h1.9v2H16z"/><path class="dxd-icon-fill" d="M2 18h10v4H2z"/></svg>',
                'dxrd-svg-titles-bottom_right': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 0v14h14V0H2zm6 8V6h2v2H8zm2 2v2H8v-2h2zM8 4V2h2v2H8zm6 0h-2V2h2v2zm0 4h-2V6h2v2zm0 4h-2v-2h2v2zM4 10h2v2H4v-2zm0-4h2v2H4V6zm0-2V2h2v2H4z"/><path class="dxd-icon-fill" d="M10 18h10v4H10z"/></svg>',
                'dxrd-svg-titles-left_bottom_vertical': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 2H8v14h14V2zm-8 6h2v2h-2V8zm-2 2h-2V8h2v2zm6-2h2v2h-2V8zm0 6v-2h2v2h-2zm-4 0v-2h2v2h-2zm-4 0v-2h2v2h-2zm2-10v2h-2V4h2zm4 0v2h-2V4h2zm2 0h2v2h-2V4z"/><path class="dxd-icon-fill" d="M0 10h4v10H0z"/></svg>',
                'dxrd-svg-titles-left_center_vertical': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 4H8v14h14V4zm-8 6h2v2h-2v-2zm-2 2h-2v-2h2v2zm6-2h2v2h-2v-2zm2-4v2h-2V6h2zm-4 0v2h-2V6h2zm-4 0v2h-2V6h2zm-2 10v-2h2v2h-2zm4 0v-2h2v2h-2zm4-2h2v2h-2v-2z"/><path class="dxd-icon-fill" d="M0 6h4v10H0z"/></svg>',
                'dxrd-svg-titles-left_top_vertical': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 6H8v14h14V6zm-8 6h2v2h-2v-2zm-2 2h-2v-2h2v2zm6-2h2v2h-2v-2zm2-4v2h-2V8h2zm-4 0v2h-2V8h2zm-4 0v2h-2V8h2zm-2 10v-2h2v2h-2zm4 0v-2h2v2h-2zm4-2h2v2h-2v-2z"/><path class="dxd-icon-fill" d="M0 2h4v10H0z"/></svg>',
                'dxrd-svg-titles-right_bottom_vertical': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 16h14V2H0v14zm8-6H6V8h2v2zm2-2h2v2h-2V8zm-6 2H2V8h2v2zm-2 4v-2h2v2H2zm4 0v-2h2v2H6zm4 0v-2h2v2h-2zm2-10v2h-2V4h2zM8 4v2H6V4h2zM4 6H2V4h2v2z"/><path class="dxd-icon-fill" d="M18 10h4v10h-4z"/></svg>',
                'dxrd-svg-titles-right_center_vertical': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 18h14V4H0v14zm8-6H6v-2h2v2zm2-2h2v2h-2v-2zm-6 2H2v-2h2v2zm0-6v2H2V6h2zm4 0v2H6V6h2zm4 0v2h-2V6h2zm-2 10v-2h2v2h-2zm-4 0v-2h2v2H6zm-2 0H2v-2h2v2z"/><path class="dxd-icon-fill" d="M18 6h4v10h-4z"/></svg>',
                'dxrd-svg-titles-right_top_vertical': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 20h14V6H0v14zm8-6H6v-2h2v2zm2-2h2v2h-2v-2zm-6 2H2v-2h2v2zm0-6v2H2V8h2zm4 0v2H6V8h2zm4 0v2h-2V8h2zm-2 10v-2h2v2h-2zm-4 0v-2h2v2H6zm-2 0H2v-2h2v2z"/><path class="dxd-icon-fill" d="M18 2h4v10h-4z"/></svg>',
                'dxrd-svg-titles-top_center': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 22V8H4v14h14zm-6-8v2h-2v-2h2zm-2-2v-2h2v2h-2zm2 6v2h-2v-2h2zm-6 0h2v2H6v-2zm0-4h2v2H6v-2zm0-4h2v2H6v-2zm10 2h-2v-2h2v2zm0 4h-2v-2h2v2zm0 2v2h-2v-2h2z"/><path class="dxd-icon-fill" d="M6 0h10v4H6z"/></svg>',
                'dxrd-svg-titles-top_left': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 22V8H6v14h14zm-6-8v2h-2v-2h2zm-2-2v-2h2v2h-2zm2 6v2h-2v-2h2zm-6 0h2v2H8v-2zm0-4h2v2H8v-2zm0-4h2v2H8v-2zm10 2h-2v-2h2v2zm0 4h-2v-2h2v2zm0 2v2h-2v-2h2z"/><path class="dxd-icon-fill" d="M2 0h10v4H2z"/></svg>',
                'dxrd-svg-titles-top_right': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M16 22V8H2v14h14zm-6-8v2H8v-2h2zm-2-2v-2h2v2H8zm2 6v2H8v-2h2zm4 2h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2v-2h2v2zM4 10h2v2H4v-2zm0 4h2v2H4v-2zm2 4v2H4v-2h2z"/><path class="dxd-icon-fill" d="M10 0h10v4H10z"/></svg>',
                'dxrd-svg-todo-chart': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 10h4v12H0zM18 12h4v10h-4zM6 6h4v16H6zM12 2h4v20h-4z"/></svg>',
                'dxrd-svg-todo-gauge': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M11 0C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11S17.1 0 11 0zm0 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><path class="dxd-icon-fill dxd-opacity-80" d="M11 9c-.2 0-.4 0-.5.1L7.4 6c-.4-.3-1.1-.3-1.5 0s-.4 1 0 1.4L9 10.5v.5c0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2zM6 10.1L4.5 8.5c-.3.8-.5 1.6-.5 2.5 0 1.9.8 3.7 2 5l1.3-1.3c-.9-.9-1.4-2.1-1.4-3.5 0-.4.1-.8.1-1.1z"/><path class="dxd-icon-fill dxd-opacity-80" d="M11 4c-.9 0-1.8.2-2.5.5l1.8 1.8c.2 0 .5-.1.7-.1 2.8 0 5 2.2 5 5 0 1.3-.5 2.5-1.4 3.4L16 16c1.3-1.3 2-3.1 2-5 0-3.9-3.1-7-7-7z"/></svg>',
                'dxrd-svg-todo-pivotgrid': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 2H4v2l8 8-8 8v2h16v-2H7l8-8-8-8h13z"/></svg>',
                'dxrd-svg-todo-sparkline': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 4v16h20V4H2zm18 10l-2-2-4 4-2-2-4 4-2-2-2 2v-4l2-2 2 2 4-4 2 2 4-4 2 2v4z"/></svg>',
                'dxrd-svg-toolbar-hightlightEditingFields': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 15l-12-5 5 12 2-3 3 3 2-2-3-3zM18 0H0v8h18V0zm-2 6H2V2h14v4zM2 16v-4h8.8l-.8-2H0v8h13.3l-.8-2z"/></svg>',
                'dxrd-svg-toolbar-scripts': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22 6c-.1-1-1.4-3.4-3-4-.7.5-1.5 1.3-.5 4H22z"/><path class="dxd-icon-fill" d="M16 4c0-1.5.8-2.7 1.9-3.4-.4-.3-1.1-.6-2-.6h-12C1.7 0 0 1.8 0 4v.2L3.4 16H17.2s.2 1.9.4 2.4c.1.3.3 1 .5 1.2.4.6.7 1.1.8 1.1C19.6 20 20 19 20 18L16 4zM17.9.6c.2.1-.1-.1 0 0z"/><path class="dxd-icon-fill" d="M16.4 19.9c-.3-.8-.4-1.9-.4-1.9H0c0 2.2 1.7 4 3.9 4h12c.6 0 1.1-.1 1.6-.3 0-.1-.2-.3-.5-.8-.2-.2-.3-.5-.6-1z"/></svg>',
                'dxrd-svg-toolbar-validateBindingMode': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 5V3c0-1.7 3.6-3 8-3s8 1.3 8 3v2c0 1.7-3.6 3-8 3S0 6.7 0 5zm8 9h.5c.6-1.8 1.8-3.3 3.3-4.4-1.1.3-2.4.4-3.8.4-4.4 0-8-1.3-8-3v4c0 1.7 3.6 3 8 3zm0 3c0-.3 0-.7.1-1H8c-4.4 0-8-1.3-8-3v4c0 1.7 3.6 3 8 3h.5c-.3-.9-.5-2-.5-3zm9-7c-3.9 0-7 3.1-7 7s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm1 12h-2v-2h2v2zm0-4h-2v-6h2v6z"/></svg>',
                'dxrd-svg-toolbox-barcode': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h2v20H0zM14 0h4v18h-4zM10 0h2v16h-2zM4 0h4v18H4zM20 0h2v20h-2z"/></svg>',
                'dxrd-svg-toolbox-charactercomb': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 3v18h9V3H2zm7 10v5H5v-1H4v-3h1v-1h3v-2H5v-1h3v1h1v2z"/><path class="dxd-icon-fill" d="M5 14h3v3H5z"/><g><path class="dxd-icon-fill" d="M15 12h3v5h-3z"/><path class="dxd-icon-fill" d="M12 3v18h9V3h-9zm7 9v6h-5V8h1v3h4v1z"/></g></svg>',
                'dxrd-svg-toolbox-chart': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 10h4v12H0zM18 12h4v10h-4zM6 6h4v16H6zM12 2h4v20h-4z"/></svg>',
                'dxrd-svg-toolbox-checkbox': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2v20h20V2H2zm18 6L8 20l-4-4v-4l4 4L20 4v4z"/></svg>',
                'dxrd-svg-toolbox-crossbandbox': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 8h20v2H2zM2 12h20v2H2zM6 4h12v2h2V2H4v4h2zM18 18H6v-2H4v4h16v-4h-2z"/></svg>',
                'dxrd-svg-toolbox-crossbandline': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 8h18v2H2zM2 12h18v2H2zM10 0h2v6h-2zM10 16h2v6h-2z"/></svg>',
                'dxrd-svg-toolbox-gauge': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M11 0C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11S17.1 0 11 0zm0 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><path class="dxd-icon-fill" d="M11 9c-.2 0-.4 0-.5.1L7.4 6c-.4-.3-1.1-.3-1.5 0s-.4 1 0 1.4L9 10.5v.5c0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2zM6 10.1L4.5 8.5c-.3.8-.5 1.6-.5 2.5 0 1.9.8 3.7 2 5l1.3-1.3c-.9-.9-1.4-2.1-1.4-3.5 0-.4.1-.8.1-1.1z"/><path class="dxd-icon-fill" d="M11 4c-.9 0-1.8.2-2.5.5l1.8 1.8c.2 0 .5-.1.7-.1 2.8 0 5 2.2 5 5 0 1.3-.5 2.5-1.4 3.4L16 16c1.3-1.3 2-3.1 2-5 0-3.9-3.1-7-7-7z"/></svg>',
                'dxrd-svg-toolbox-label': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20.7 20.9c-.4-.4-.9-1.4-1.6-2.9L12.3 2H12L5.3 17.6c-.6 1.5-1.2 2.5-1.6 3s-1 .8-1.7.9v.5h6v-.5c-1-.1-1.5-.2-1.7-.3-.4-.3-.6-.7-.6-1.2 0-.4.2-.9.4-1.6l.2-.4h8l.4.9c.3.6.4 1 .4 1.1.1.2.1.4.1.5 0 .3-.1.3-.3.4-.4.2-.9.1-1.6.1H13v1h9v-.5c-.6-.1-1-.3-1.3-.6zM13.4 16H7.2l3.2-7.4 3 7.4z"/></svg>',
                'dxrd-svg-toolbox-line': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 16L8 6V0H0v8h6l10 10v6h8v-8h-6zM2 6V2h4v4H2zm20 16h-4v-4h4v4z"/></svg>',
                'dxrd-svg-toolbox-pagebreak': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 2h14v6H4zM4 16h14v6H4zM0 8v8l4-4zM18 12l4 4V8z"/></svg>',
                'dxrd-svg-toolbox-pageinfo': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M15 10c-3.9 0-7 3.1-7 7s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm1 12h-2v-6h2v6zm0-8h-2v-2h2v2z"/><path class="dxd-icon-fill" d="M14.9 8c.4 0 .8 0 1.1.1V6h-6V0H0v20h6.3c-.3-.9-.5-1.9-.5-3 0-5 4.1-9 9.1-9z"/><path class="dxd-icon-fill" d="M12 0v4h4z"/></svg>',
                'dxrd-svg-toolbox-panel': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2v20h20V2H2zm18 18H4V4h16v16z"/></svg>',
                'dxrd-svg-toolbox-picturebox': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 4v16h20V4H2zm6 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm12 12H4v-1.9L8 12l2 2 6-6 4 4v6z"/></svg>',
                'dxrd-svg-toolbox-pivotgrid': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20 2H4v2l8 8-8 8v2h16v-2H7l8-8-8-8h13z"/></svg>',
                'dxrd-svg-toolbox-richtext': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20 6h-4V2z"/><path class="dxd-icon-fill" d="M10 16v-6h6l4 4V8h-6V2H4v20h12z"/><path class="dxd-icon-fill" d="M12 12v2l8 8v-4l-6-6z"/></svg>',
                'dxrd-svg-toolbox-shape': '<svg data-bind="xlink" viewBox="0 0 24 24"><circle class="dxd-icon-fill" cx="14" cy="14" r="6"/><path class="dxd-icon-fill" d="M14 6c.7 0 1.4.1 2 .3V2H4v12h2c0-4.4 3.6-8 8-8z"/></svg>',
                'dxrd-svg-toolbox-sparkline': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 4v16h20V4H2zm18 10l-2-2-4 4-2-2-4 4-2-2-2 2v-4l2-2 2 2 4-4 2 2 4-4 2 2v4z"/></svg>',
                'dxrd-svg-toolbox-subreport': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 0h6v4H8z"/><path class="dxd-icon-fill" d="M16 2v2h2v18H4V4h2V2H2v22h18V2z"/><path class="dxd-icon-fill" d="M6 6v14h10V6H6zm8 12H8v-2h6v2zm0-4H8v-2h6v2zm0-4H8V8h6v2z"/></svg>',
                'dxrd-svg-toolbox-table': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h6v4H0zM8 0h6v4H8zM16 0h6v4h-6zM0 6h6v4H0zM8 6h6v4H8zM16 6h6v4h-6zM0 12h6v4H0zM8 12h6v4H8zM16 12h6v4h-6zM0 18h6v4H0zM8 18h6v4H8zM16 18h6v4h-6z"/></svg>',
                'dxrd-svg-toolbox-tableofcontents': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v22h18V0H2zm5 18H5v-2h2v2zm0-4H5v-2h2v2zm0-4H5V8h2v2zm0-4H5V4h2v2zm10 12H9v-2h8v2zm0-4H9v-2h8v2zm0-4H9V8h8v2zm0-4H9V4h8v2z"/></svg>',
                'dxrd-svg-toolbox-zipcode': '<svg data-bind="xlink" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2h6v2H2zM0 4h2v6H0zM8 4h2v6H8zM0 12h2v8H0zM8 12h2v8H8zM2 10h6v2H2zM2 20h6v2H2zM14 2h6v2h-6zM12 4h2v6h-2zM20 4h2v6h-2zM12 12h2v8h-2zM20 12h2v8h-2zM14 10h6v2h-6zM14 20h6v2h-6z"/></svg>',
            });
        })(Internal = Designer.Internal || (Designer.Internal = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var SummaryFunctionModel = (function () {
                function SummaryFunctionModel(functionName, args) {
                    var _this = this;
                    this.functionName = ko.observable();
                    this.args = ko.observableArray();
                    this.functionName(functionName);
                    this.args(args.map(function (x) { return { value: ko.observable(x) }; }));
                    this.functionName.subscribe(function (newVal) {
                        _this._updateArgs(newVal);
                    });
                }
                SummaryFunctionModel.from = function (val) {
                    var functionName = null, args = [];
                    if (val) {
                        functionName = val.split('(')[0];
                        args = val.split('(')[1].split(')')[0].split(',');
                        if (args[0] === "") {
                            args = [];
                        }
                        else {
                            args = args.map(function (x) { return x.split('[')[1].split(']')[0]; });
                        }
                    }
                    return new SummaryFunctionModel(functionName, args);
                };
                SummaryFunctionModel.toJson = function (value) {
                    if (!value.functionName()) {
                        return {};
                    }
                    return value.functionName() + '(' + value.args().map(function (x) { return '[' + x.value() + ']'; }).join(',') + ')';
                };
                SummaryFunctionModel.prototype._updateArgs = function (functionName) {
                    if (SummaryFunctionModel.availableItems.indexOf(functionName) !== -1) {
                        if (functionName === "COUNT" || !functionName) {
                            this.args([]);
                        }
                        else if (this.args().length === 0) {
                            this.args.push({ value: ko.observable("") });
                        }
                        else if (this.args().length > 1) {
                            this.args.splice(1, this.args().length - 1);
                        }
                    }
                };
                SummaryFunctionModel.availableItems = ["SUM", "MIN", "MAX", "AVERAGE", "COUNT"];
                return SummaryFunctionModel;
            })();
            Chart.SummaryFunctionModel = SummaryFunctionModel;
            var SummaryFunctionEditor = (function (_super) {
                __extends(SummaryFunctionEditor, _super);
                function SummaryFunctionEditor(modelPropertyInfo, level, parentDisabled) {
                    var _this = this;
                    _super.call(this, modelPropertyInfo, level, parentDisabled);
                    this.argumentTemplateName = ko.bindingHandlers["displayNameExtender"] ? "dxrd-field" : "dxcd-field";
                    this.actionsAreAvailable = ko.observable(false);
                    var subscription = null;
                    this.memberPadding = { paddingLeft: (level + 1) * DevExpress.JS.Widgets.propertiesGridEditorsPaddingLeft };
                    this._model.subscribe(function (newVal) {
                        subscription && subscription.dispose();
                        subscription = ko.computed(function () {
                            _this.actionsAreAvailable(_this.value().functionName() && SummaryFunctionModel.availableItems.indexOf(_this.value() && _this.value().functionName()) === -1);
                        });
                    });
                }
                SummaryFunctionEditor.prototype.getLocalization = function (displayName, localizationId) {
                    return localizationId ? (DevExpress.JS.Localization.localize(localizationId) || displayName) : DevExpress.JS.Utils.getLocalization(displayName);
                };
                SummaryFunctionEditor.prototype.add = function () {
                    this.value().args.push({ value: ko.observable("") });
                };
                SummaryFunctionEditor.prototype.remove = function (index) {
                    this.value().args.splice(index, 1);
                };
                SummaryFunctionEditor.prototype.availableItems = function () {
                    return SummaryFunctionModel.availableItems;
                };
                return SummaryFunctionEditor;
            })(DevExpress.Designer.Widgets.FieldListEditor);
            Chart.SummaryFunctionEditor = SummaryFunctionEditor;
            var CollectionLookupEditorModel = (function (_super) {
                __extends(CollectionLookupEditorModel, _super);
                function CollectionLookupEditorModel(info, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled, textToSearch);
                    this.array = ko.computed(function () { return _this.value() || []; });
                    this.selectedItem = ko.observable();
                    this._disposables.push(this.array);
                }
                Object.defineProperty(CollectionLookupEditorModel.prototype, "editors", {
                    get: function () {
                        var selectedItem = this.selectedItem();
                        return selectedItem && selectedItem["getInfo"] && selectedItem["getInfo"]();
                    },
                    enumerable: true,
                    configurable: true
                });
                return CollectionLookupEditorModel;
            })(DevExpress.JS.Widgets.Editor);
            Chart.CollectionLookupEditorModel = CollectionLookupEditorModel;
            var ChartDataMemberEditor = (function (_super) {
                __extends(ChartDataMemberEditor, _super);
                function ChartDataMemberEditor(info, level, parentDisabled) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled);
                    this.treeListController.itemsFilter = function (item) {
                        if (item.isList)
                            return true;
                        if (_this.name === "argumentDataMember") {
                            return _this._getArgumentDataMemberFilter(item);
                        }
                        else {
                            return _this._getValueDataMemberFilter(item);
                        }
                    };
                }
                ChartDataMemberEditor.prototype._isNumber = function (specifics) {
                    return specifics.indexOf("integer") !== -1 || specifics.indexOf("float") !== -1;
                };
                ChartDataMemberEditor.prototype._isDate = function (specifics) { return specifics.indexOf("date") !== -1; };
                ChartDataMemberEditor.prototype._getArgumentDataMemberFilter = function (item) {
                    var scaleType = this._model() && this._model()["argumentScaleType"]();
                    var itemSpecifics = item.specifics.toLowerCase();
                    if (scaleType === "Numerical") {
                        return this._isNumber(itemSpecifics);
                    }
                    else if (scaleType === "DateTime") {
                        return this._isDate(itemSpecifics);
                    }
                    else {
                        return true;
                    }
                };
                ChartDataMemberEditor.prototype._getValueDataMemberFilter = function (item) {
                    var itemSpecifics = item.specifics.toLowerCase();
                    if (this.name === "weight") {
                        return this._isNumber(itemSpecifics);
                    }
                    else {
                        var scaleType = this._model() && this._model()["valueScaleType"]();
                        if (scaleType === "Numerical") {
                            return this._isNumber(itemSpecifics);
                        }
                        else {
                            return this._isDate(itemSpecifics);
                        }
                    }
                };
                return ChartDataMemberEditor;
            })(Designer.Widgets.FieldListEditor);
            Chart.ChartDataMemberEditor = ChartDataMemberEditor;
            var ChartStructureObjectProvider = (function (_super) {
                __extends(ChartStructureObjectProvider, _super);
                function ChartStructureObjectProvider(target, displayName, localizationId) {
                    _super.call(this, target, displayName, localizationId);
                }
                ChartStructureObjectProvider.prototype.getClassName = function (instance) {
                    if (instance instanceof Chart.SeriesViewModel) {
                        return "SeriesViewModel";
                    }
                    else if (instance instanceof Chart.SecondaryAxisViewModel) {
                        return "SecondaryAxisViewModel";
                    }
                    else {
                        return _super.prototype.getClassName.call(this, instance);
                    }
                };
                return ChartStructureObjectProvider;
            })(DevExpress.Designer.ObjectStructureProvider);
            Chart.ChartStructureObjectProvider = ChartStructureObjectProvider;
            var ChartStructureTreeListController = (function (_super) {
                __extends(ChartStructureTreeListController, _super);
                function ChartStructureTreeListController(propertyNames, listPropertyNames, selectCallback) {
                    var _this = this;
                    _super.call(this, propertyNames, listPropertyNames);
                    this.hasItems = function (item) {
                        return !!listPropertyNames && listPropertyNames.indexOf(item.specifics) !== -1;
                    };
                    this.select = function (value) {
                        _this.selectedItem && _this.selectedItem.isSelected(false);
                        _this.selectedItem = value;
                        value.isSelected(true);
                        selectCallback && selectCallback(value);
                    };
                    this.showIconsForChildItems = function (parent) {
                        if (parent === void 0) { parent = null; }
                        return parent === null || parent.level < 1;
                    };
                }
                return ChartStructureTreeListController;
            })(DevExpress.Designer.ObjectStructureTreeListController);
            Chart.ChartStructureTreeListController = ChartStructureTreeListController;
            var ChartDependencyEditor = (function (_super) {
                __extends(ChartDependencyEditor, _super);
                function ChartDependencyEditor(info, level, parentDisabled, textToSearch) {
                    _super.call(this, info, level, parentDisabled, textToSearch);
                }
                ChartDependencyEditor.prototype.getDependencyOptions = function (templateOptions, propertyName, depPropertyName) {
                    var _this = this;
                    if (!this.bindableOptions) {
                        var debObj = {};
                        this.depProperty = ko.computed(function () { return _this._model() && _this._model()[depPropertyName](); });
                        this._disposables.push(this.depProperty);
                        debObj[propertyName] = this.depProperty;
                        this.bindableOptions = $.extend({}, this.getOptions(templateOptions), debObj);
                    }
                    return this.bindableOptions;
                };
                return ChartDependencyEditor;
            })(DevExpress.JS.Widgets.Editor);
            Chart.ChartDependencyEditor = ChartDependencyEditor;
            var UndoColorPickerEditor = (function (_super) {
                __extends(UndoColorPickerEditor, _super);
                function UndoColorPickerEditor(info, level, parentDisabled) {
                    _super.call(this, info, level, parentDisabled);
                }
                UndoColorPickerEditor.prototype.generateValue = function (undoEngine) {
                    var _this = this;
                    if (!this.generatedValue) {
                        this._disposables.push(this.generatedValue = ko.computed({
                            read: function () { return _this.displayValue(); },
                            write: function (newVal) {
                                undoEngine().start();
                                _this.displayValue(newVal);
                                undoEngine().end();
                            }
                        }));
                    }
                    return this.generatedValue;
                };
                return UndoColorPickerEditor;
            })(Designer.Widgets.ColorPickerEditor);
            Chart.UndoColorPickerEditor = UndoColorPickerEditor;
            var ViewEditor = (function (_super) {
                __extends(ViewEditor, _super);
                function ViewEditor(info, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled, textToSearch);
                    this.contentValue = ko.computed(function () {
                        return _this.value() && _this.value().model() || {};
                    });
                    this._disposables.push(this.contentValue);
                }
                ViewEditor.prototype.generateHeaderValue = function (undoEngine) {
                    var _this = this;
                    if (!this.headerValue) {
                        this._disposables.push(this.headerValue = ko.computed({
                            read: function () { return _this.value() && _this.value().type(); },
                            write: function (newVal) {
                                undoEngine().start();
                                _this.value().type(newVal);
                                undoEngine().end();
                            }
                        }));
                    }
                    return this.headerValue;
                };
                ViewEditor.prototype.generateViewClassName = function (value, isTemplate) {
                    if (isTemplate === void 0) { isTemplate = false; }
                    var _name = (isTemplate ? 'dxrd-svg-fieldlist-' : 'dx-image-fieldlist-') + Chart.SeriesViewModel.getClassName(value);
                    if (isTemplate)
                        return DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.getExistingTemplate(_name);
                    return _name;
                };
                return ViewEditor;
            })(DevExpress.JS.Widgets.Editor);
            Chart.ViewEditor = ViewEditor;
            var PointsEditor = (function (_super) {
                __extends(PointsEditor, _super);
                function PointsEditor(info, level, parentDisabled, textToSearch) {
                    _super.call(this, info, level, parentDisabled, textToSearch);
                }
                PointsEditor.prototype.addPoint = function (model) {
                    return Chart.SeriesPointModel.createNew(model);
                };
                return PointsEditor;
            })(DevExpress.JS.Widgets.Editor);
            Chart.PointsEditor = PointsEditor;
            var ChartDataSourceEditor = (function (_super) {
                __extends(ChartDataSourceEditor, _super);
                function ChartDataSourceEditor() {
                    _super.apply(this, arguments);
                    this.options = null;
                }
                ChartDataSourceEditor.prototype.generateOptions = function (dataSources) {
                    var _this = this;
                    if (!this.options) {
                        var disabled = ko.computed(function () {
                            return _this.disabled() || !dataSources() || dataSources().length === 0;
                        });
                        var value = ko.computed({
                            read: function () {
                                var unwrappedDataSources = dataSources();
                                var dataSource = unwrappedDataSources.filter(function (x) { return !!x && (x.value === _this.value()); })[0];
                                return ko.unwrap(dataSource && dataSource.displayName);
                            },
                            write: function (newVal) {
                                var unwrappedDataSources = dataSources();
                                var dataSource = unwrappedDataSources.filter(function (x) { return !!x && (ko.unwrap(x.displayName) === newVal); })[0];
                                _this.value(dataSource && dataSource.value);
                            }
                        });
                        this._disposables.push(value);
                        this._disposables.push(disabled);
                        this.options = {
                            displayExpr: "displayName",
                            dataSource: dataSources,
                            disabled: disabled,
                            value: value,
                            valueExpr: "displayName",
                            displayCustomValue: true
                        };
                    }
                    return this.options;
                };
                return ChartDataSourceEditor;
            })(DevExpress.JS.Widgets.Editor);
            Chart.ChartDataSourceEditor = ChartDataSourceEditor;
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="widgets/widgets.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            Chart.editorTemplates = {
                dataSource: { header: "dxrd-datasource" },
                chartDataSource: { header: "dxcd-datasource", editorType: Chart.ChartDataSourceEditor },
                collection: { header: "dxcd-collection-lookup-header", content: "dxcd-collection-item", editorType: Chart.CollectionLookupEditorModel },
                views: { header: "dxcd-viewHeader", content: "dxcd-viewContent", editorType: Chart.ViewEditor },
                fieldChart: { header: "dxcd-field", editorType: Designer.Widgets.FieldListEditor },
                dataMemberChart: { header: "dxcd-field", editorType: Designer.Widgets.DataMemberEditor },
                valueDataMember: { header: "dxcd-field", editorType: Chart.ChartDataMemberEditor },
                panes: { header: "dxcd-panes-editor" },
                axisX: { header: "dxcd-axisX-editor" },
                axisY: { header: "dxcd-axisY-editor" },
                legends: { header: "dxcd-legends-editor" },
                summaryFunction: { header: "dx-emptyHeader", content: "dxcd-summaryFunction-content", editorType: Chart.SummaryFunctionEditor },
                points: { custom: "dxcd-pointscollection", editorType: Chart.PointsEditor },
                maxSize: { header: "dxcd-maxSize", editorType: Chart.ChartDependencyEditor },
                minSize: { header: "dxcd-minSize", editorType: Chart.ChartDependencyEditor },
                group: { header: "dxcd-group" },
                undoCustomColorEditor: { header: "dxcd-color-undo", editorType: Chart.UndoColorPickerEditor }
            };
            Chart.defaultBooleanValues = [
                { value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' },
                { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' },
                { value: "Default", displayValue: "Default", localizationId: 'StringId.DefaultBooleanDefault' }
            ], Chart.scaleTypeValues = [
                { value: "Qualitative", displayValue: "Qualitative", localizationId: 'DevExpress.XtraCharts.ScaleType.Qualitative' },
                { value: "Numerical", displayValue: "Numerical", localizationId: 'DevExpress.XtraCharts.ScaleType.Numerical' },
                { value: "DateTime", displayValue: "DateTime", localizationId: 'DevExpress.XtraCharts.ScaleType.DateTime' },
                { value: "Auto", displayValue: "Auto", localizationId: 'DevExpress.XtraCharts.ScaleType.Auto' }
            ], Chart.stringAlignmentValues = [
                { value: "Near", displayValue: "Near", localizationId: 'ChartStringId.WizStringAlignmentNear' },
                { value: "Center", displayValue: "Center", localizationId: 'ChartStringId.WizStringAlignmentCenter' },
                { value: "Far", displayValue: "Far", localizationId: 'ChartStringId.WizStringAlignmentFar' }
            ];
            Chart.paneName = { propertyName: "paneName", modelName: "@PaneName", displayName: 'Pane', localizationId: 'DevExpress.XtraCharts.XYDiagramPane', defaultVal: Designer.getLocalization('Default Pane', 'ChartStringId.DefaultPaneName'), editor: Chart.editorTemplates.panes };
            Chart.axisXName = { propertyName: "axisXName", modelName: "@AxisXName", displayName: 'AxisX', localizationId: "DevExpress.XtraCharts.GanttAxisX", defaultVal: Designer.getLocalization('Primary AxisX', 'ChartStringId.PrimaryAxisXName'), editor: Chart.editorTemplates.axisX };
            Chart.axisYName = { propertyName: "axisYName", modelName: "@AxisYName", displayName: 'AxisY', localizationId: "DevExpress.XtraCharts.SeparatePaneIndicator.AxisY", defaultVal: Designer.getLocalization('Primary AxisY', 'ChartStringId.PrimaryAxisYName'), editor: Chart.editorTemplates.axisY };
            Chart.angle = { propertyName: "angle", modelName: "@Angle", defaultVal: 0, from: Designer.floatFromModel, displayName: "Angle", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraReports.UI.XRLabel.Angle' };
            Chart.borderColor = { propertyName: "borderColor", modelName: "@BorderColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Border Color", editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderColor' };
            Chart.backColor = { propertyName: "backColor", modelName: "@BackColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Background Color", editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControl.BackColor' };
            Chart.dataMember = { propertyName: "dataMember", modelName: "@DataMember" };
            Chart.text = { propertyName: "text", modelName: "@Text", defaultVal: "", displayName: "Text", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'ASPxReportsStringId.ExportName_txt' };
            Chart.visible = { propertyName: "visible", modelName: "@Visible", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Visible", localizationId: 'DevExpress.XtraReports.UI.XRControl.Visible' };
            Chart.name = { propertyName: "name", modelName: "@Name", displayName: "Name", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraReports.UI.XRControl.Name' };
            Chart.tag = { propertyName: "tag", modelName: "@Tag", displayName: "Tag", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraReports.UI.XRControl.Tag' };
            Chart.checkedInLegend = { propertyName: "checkedInLegend", modelName: "@CheckedInLegend", displayName: "Checked In Legend", localizationId: 'DevExpress.XtraCharts.SeriesBase.CheckedInLegend', editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Chart.checkableInLegend = { propertyName: "checkableInLegend", modelName: "@CheckableInLegend", displayName: "Checkable In Legend", localizationId: 'DevExpress.XtraCharts.SeriesBase.CheckableInLegend', editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Chart.legendText = { propertyName: "legendText", modelName: "@LegendText", displayName: "Legend Text", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.Strip.LegendText' }, Chart.showInLegend = { propertyName: "showInLegend", modelName: "@ShowInLegend", displayName: "Show In Legend", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.Indicator.ShowInLegend' };
            Chart.thickness = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.TickmarksBase.Thickness' }, Chart.visibility = { propertyName: "visibility", modelName: "@Visibility", displayName: "Visibility", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.BorderBase.Visibility' }, Chart.color = { propertyName: "color", modelName: "@Color", displayName: "Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.SeriesViewBase.Color' }, Chart.titleAlignment = { propertyName: "titleAlignment", modelName: "@Alignment", displayName: "Alignment", defaultVal: "Center", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.stringAlignmentValues, localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Alignment' }, Chart.textPattern = { propertyName: "textPattern", modelName: "@TextPattern", displayName: "Text Pattern", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.TotalLabel.TextPattern' }, Chart.textAlignment = { propertyName: "textAlignment", modelName: "@TextAlignment", displayName: "Text Alignment", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.stringAlignmentValues, localizationId: 'DevExpress.XtraReports.UI.XRControl.TextAlignment' }, Chart.maxLineCount = { propertyName: "maxLineCount", modelName: "@MaxLineCount", displayName: "Max Line Count", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.MaxLineCount' }, Chart.maxWidth = { propertyName: "maxWidth", modelName: "@MaxWidth", displayName: "Max Width", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsSelection.MaxWidth' }, Chart.textColor = { propertyName: "textColor", modelName: "@TextColor", displayName: "Text Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.TotalLabel.TextColor' }, Chart.antialiasing = { propertyName: "antialiasing", modelName: "@Antialiasing", displayName: "Antialiasing", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.SwiftPlotSeriesView.Antialiasing' }, Chart.font = { propertyName: "font", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 8pt", editor: DevExpress.JS.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
            Chart.enableAxisXZooming = { propertyName: "enableAxisXZooming", modelName: "@EnableAxisXZooming", displayName: "Enable Axis X Zooming" }, Chart.enableAxisXScrolling = { propertyName: "enableAxisXScrolling", modelName: "@EnableAxisXScrolling", displayName: "Enable Axis X Scrolling" }, Chart.enableAxisYZooming = { propertyName: "enableAxisYZooming", modelName: "@EnableAxisYZooming", displayName: "Enable Axis Y Zooming" }, Chart.enableAxisYScrolling = { propertyName: "enableAxisYScrolling", modelName: "@EnableAxisYScrolling", displayName: "Enable Axis Y Scrolling" }, Chart.rotated = { propertyName: "rotated", modelName: "@Rotated", displayName: "Rotated", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.XYDiagram.Rotated' }, Chart.typeNameNotShow = { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" };
            Chart.left = { propertyName: "left", modelName: "@Left", displayName: "Left", localizationId: "DevExpress.XtraPrinting.PaddingInfo.Left", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.right = { propertyName: "right", modelName: "@Top", displayName: "Top", localizationId: "DevExpress.XtraPrinting.PaddingInfo.Top", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.top = { propertyName: "top", modelName: "@Right", displayName: "Right", localizationId: "DevExpress.XtraPrinting.PaddingInfo.Right", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Chart.bottom = { propertyName: "bottom", modelName: "@Bottom", displayName: "Bottom", localizationId: "DevExpress.XtraPrinting.PaddingInfo.Bottom", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.margin = { propertyName: "chartMargins", modelName: "Margins", displayName: "Margins", info: [Chart.left, Chart.right, Chart.top, Chart.bottom], editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XtraReport.Margins' };
            Chart.font18 = { propertyName: "font18", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 18pt", editor: DevExpress.JS.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' }, Chart.font12 = { propertyName: "font12", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 12pt", editor: DevExpress.JS.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' }, Chart.font8 = { propertyName: "font8", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 8pt", editor: DevExpress.JS.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
            Chart.paneSerializationsInfo = [Chart.enableAxisXScrolling, Chart.enableAxisYScrolling, Chart.enableAxisYZooming, Chart.enableAxisXZooming, Chart.backColor, Chart.borderColor], Chart.defaultPane = { propertyName: "defaultPane", modelName: "DefaultPane", displayName: "Default Pane", localizationId: 'ChartStringId.DefaultPaneName', info: Chart.paneSerializationsInfo, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Chart.additionalPaneSerializationsInfo = [Chart.name].concat(Chart.paneSerializationsInfo);
            Chart.chartDataSource = { propertyName: "dataSource", displayName: "Data Source", modelName: "@DataSource", link: true, editor: Chart.editorTemplates.chartDataSource, localizationId: 'DevExpress.XtraReports.UI.XRSparkline.DataSource' };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="metadata.ts" />
/// <reference path="widgets/widgets.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var AxisXYViewModel = (function (_super) {
                __extends(AxisXYViewModel, _super);
                function AxisXYViewModel(model, serializer, info) {
                    _super.call(this, model, serializer, info || Chart.axisXYSerializationsInfo);
                    this.constantLines = Chart.deserializeModelArray(model && model.ConstantLines, function (item, parent) { return new Chart.ConstantLineViewModel(item, parent, serializer); }, Chart.ConstantLineViewModel.prefix);
                    this.scaleBreaks = Chart.deserializeModelArray(model && model.ScaleBreaks, function (item, parent) { return new Chart.ScaleBreakViewModel(item, parent, serializer); }, Chart.ScaleBreakViewModel.prefix);
                    this.strips = Chart.deserializeModelArray(model && model.Strips, function (item, parent) { return new Chart.StripViewModel(item, parent, serializer); }, Chart.StripViewModel.prefix);
                }
                AxisXYViewModel.from = function (info) {
                    return function (model, serializer) {
                        return new AxisXYViewModel(model || {}, serializer, info);
                    };
                };
                AxisXYViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, undefined, refs);
                };
                return AxisXYViewModel;
            })(Designer.SerializableModel);
            Chart.AxisXYViewModel = AxisXYViewModel;
            function initCollectionItem(item, parent) {
                return function () {
                    item.parent = parent;
                    item.innerActions = [
                        {
                            text: Designer.getLocalization("Remove", 'ReportStringId.UD_Capt_SpacingRemove'),
                            imageClassName: "dxrd-image-recycle-bin",
                            imageTemplateName: "dxrd-svg-operations-recycle_bin",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { parent.remove(item); },
                        }
                    ];
                };
            }
            Chart.initCollectionItem = initCollectionItem;
            var SecondaryAxisViewModel = (function (_super) {
                __extends(SecondaryAxisViewModel, _super);
                function SecondaryAxisViewModel(model, parent, serializer) {
                    _super.call(this, model, serializer, Chart.secondaryAxisXYSerializationsInfo);
                    initCollectionItem(this, parent)();
                }
                Object.defineProperty(SecondaryAxisViewModel.prototype, "axisID", {
                    get: function () {
                        return this.parent().indexOf(this);
                    },
                    enumerable: true,
                    configurable: true
                });
                SecondaryAxisViewModel.xPrefix = "Secondary Axis X";
                SecondaryAxisViewModel.yPrefix = "Secondary Axis Y";
                return SecondaryAxisViewModel;
            })(AxisXYViewModel);
            Chart.SecondaryAxisViewModel = SecondaryAxisViewModel;
            var minValue = { propertyName: "minValue", modelName: "@MinValueSerializable", displayName: "Min Value", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.AxisRange.MinValue' }, maxValue = { propertyName: "maxValue", modelName: "@MaxValueSerializable", displayName: "Max Value", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.Range.MaxValue' }, auto = { propertyName: "auto", modelName: "@Auto", displayName: "Auto", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraReports.UI.DocumentExportMode.Auto' }, autoSideMargins = { propertyName: "autoSideMargins", modelName: "@AutoSideMargins", displayName: "Auto Side Margins", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.Range.AutoSideMargins' }, sideMarginsValue = { propertyName: "sideMarginsValue", modelName: "@SideMarginsValue", displayName: "Side Margins Value", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.Range.SideMarginsValue' };
            Chart.visualRangeSerializationsInfo = [auto, autoSideMargins, minValue, maxValue, sideMarginsValue], Chart.visualRange = { propertyName: "visualRange", modelName: "VisualRange", displayName: "Visual Range", info: Chart.visualRangeSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.VisualRange' };
            var alwaysShowZeroLevel = { propertyName: "alwaysShowZeroLevel", modelName: "@AlwaysShowZeroLevel", displayName: "Always Show Zero Level", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.WholeRange.AlwaysShowZeroLevel' };
            Chart.wholeRangeSerializationsInfo = Chart.visualRangeSerializationsInfo.concat(alwaysShowZeroLevel), Chart.wholeRange = { propertyName: "wholeRange", modelName: "WholeRange", displayName: "Whole Range", info: Chart.wholeRangeSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.WholeRange' };
            Chart.radarWholeRange = { propertyName: "radarWholeRange", modelName: "WholeRange", displayName: "Whole Range", info: Chart.visualRangeSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.WholeRange' };
            var dashStyle = {
                propertyName: "dashStyle", modelName: "@DashStyle", displayName: "Dash Style", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Dash", displayValue: "Dash", localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' }, { value: "Dot", displayValue: "Dot", localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' }, { value: "DashDot", displayValue: "DashDot" }, { value: "DashDotDot", displayValue: "DashDotDot" }],
                localizationId: 'DevExpress.XtraCharts.LineStyle.DashStyle' };
            Chart.lineStyleSerializationsInfo = [Chart.thickness, dashStyle], Chart.lineStyle = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", info: Chart.lineStyleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRShape.LineStyle' }, Chart.minorLineStyle = { propertyName: "minorLineStyle", modelName: "MinorLineStyle", displayName: "Minor Line Style", info: Chart.lineStyleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.GridLines.MinorLineStyle' };
            var scaleMode = {
                propertyName: "scaleName", modelName: "@ScaleMode", displayName: "Scale Mode", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [{ value: "Automatic", displayValue: "Automatic", localizationId: 'DevExpress.XtraCharts.ScaleMode.Automatic' }, { value: "Manual", displayValue: "Manual", localizationId: 'DevExpress.XtraCharts.ChartRangeControlClientSnapMode.Manual' }, { value: "Continuous", displayValue: "Continuous", localizationId: 'DevExpress.XtraCharts.ScaleMode.Continuous' }],
                localizationId: 'DevExpress.XtraCharts.ScaleOptionsBase.ScaleMode' }, aggregateFunction = {
                propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: "Aggregate Function",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Average", displayValue: "Average", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: "Sum", displayValue: "Sum", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: "Minimum", displayValue: "Minimum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: "Maximum", displayValue: "Maximum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "Financial", displayValue: "Financial", localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }],
                localizationId: 'DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.AggregateFunction' }, gridSpacing = { propertyName: "gridSpacing", modelName: "@GridSpacing", displayName: "Grid Spacing", localizationId: "DevExpress.XtraCharts.ScaleGridOptionsBase.GridSpacing", defaultVal: 1.0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, autoGrid = { propertyName: "autoGrid", modelName: "@AutoGrid", displayName: "Auto Grid", localizationId: "DevExpress.XtraCharts.ScaleGridOptionsBase.AutoGrid", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true, from: Designer.parseBool }, gridOffset = { propertyName: "gridOffset", modelName: "@GridOffset", displayName: "Grid Offset", localizationId: "DevExpress.XtraCharts.ScaleGridOptionsBase.GridOffset", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.scaleOptionsBaseSerializationsInfo = [autoGrid, aggregateFunction, gridOffset, gridSpacing, scaleMode];
            var numericMeasureUnit = {
                propertyName: "measureUnit", modelName: "@MeasureUnit", displayName: "Measure Unit",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Ones", displayValue: "Ones", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Ones' }, { value: "Tens", displayValue: "Tens", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Tens' }, { value: "Hundreds", displayValue: "Hundreds", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Hundreds' }, { value: "Thousands", displayValue: "Thousands", localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Thousands' }, { value: "Millions", displayValue: "Millions", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Millions' }, { value: "Billions", displayValue: "Billions", localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Billions' }, { value: "Custom", displayValue: "Custom", localizationId: 'DevExpress.XtraReports.UI.SortingSummaryFunction.Custom' }],
                localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions.MeasureUnit' }, numericGridAlignment = {
                propertyName: "gridAlignment", modelName: "@GridAlignment", displayName: "Grid Alignment",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Ones", displayValue: "Ones", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Ones' }, { value: "Tens", displayValue: "Tens", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Tens' }, { value: "Hundreds", displayValue: "Hundreds", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Hundreds' }, { value: "Thousands", displayValue: "Thousands", localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Thousands' }, { value: "Millions", displayValue: "Millions", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Millions' }, { value: "Billions", displayValue: "Billions", localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Billions' }, { value: "Custom", displayValue: "Custom", localizationId: 'DevExpress.XtraReports.UI.SortingSummaryFunction.Custom' }],
                localizationId: 'DevExpress.XtraCharts.ChartRangeControlClientDateTimeGridOptions.GridAlignment' }, customGridAlignment = { propertyName: "customGridAlignment", modelName: "@CustomGridAlignment", defaultVal: null, displayName: "Custom Grid Alignment", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions.CustomGridAlignment' }, customMeasureUnit = { propertyName: "customMeasureUnit", modelName: "@CustomMeasureUnit", defaultVal: null, displayName: "Custom Measure Unit", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions.CustomMeasureUnit' };
            Chart.numericScaleOptionsSerializationsInfo = [numericMeasureUnit, numericGridAlignment, customGridAlignment, customMeasureUnit].concat(Chart.scaleOptionsBaseSerializationsInfo), Chart.numericScaleOptions = { propertyName: "numericScaleOptions", modelName: "NumericScaleOptions", displayName: "Numeric Scale Options", info: Chart.numericScaleOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions' };
            Chart.radarAxisYNumericScaleOptionsSerializationsInfo = [autoGrid, numericGridAlignment, gridOffset, gridSpacing], Chart.radarAxisYNumericScaleOptions = { propertyName: "radarAxisYNumericScaleOptions", modelName: "NumericScaleOptions", displayName: "Numeric Scale Options", info: Chart.radarAxisYNumericScaleOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions' };
            Chart.radarAxisXNumericScaleOptionsSerializationsInfo = Chart.radarAxisYNumericScaleOptionsSerializationsInfo.concat(scaleMode), Chart.radarAxisXNumericScaleOptions = { propertyName: "radarAxisXNumericScaleOptions", modelName: "NumericScaleOptions", displayName: "Numeric Scale Options", info: Chart.radarAxisXNumericScaleOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions' };
            var dateMeasureUnit = {
                propertyName: "measureUnit", modelName: "@MeasureUnit", displayName: "Measure Unit",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Millisecond", displayValue: "Millisecond", localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Millisecond' }, { value: "Second ", displayValue: "Second", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Second' }, { value: "Minute", displayValue: "Minute", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Minute' }, { value: "Hour", displayValue: "Hour", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Hour' }, { value: "Day", displayValue: "Day", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateDay' }, { value: "Week", displayValue: "Week", localizationId: 'DevExpress.XtraCharts.DateTimeGridAlignment.Week' }, { value: "Month", displayValue: "Month", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonth' }, { value: "Quarter", displayValue: "Quarter", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarter' }, { value: "Year", displayValue: "Year", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateYear' }],
                localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions.MeasureUnit' }, dateGridAlignment = {
                propertyName: "gridAlignment", modelName: "@GridAlignment", displayName: "Grid Alignment",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Millisecond", displayValue: "Millisecond", localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Millisecond' }, { value: "Second ", displayValue: "Second", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Second' }, { value: "Minute", displayValue: "Minute", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Minute' }, { value: "Hour", displayValue: "Hour", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Hour' }, { value: "Day", displayValue: "Day", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateDay' }, { value: "Week", displayValue: "Week", localizationId: 'DevExpress.XtraCharts.DateTimeGridAlignment.Week' }, { value: "Month", displayValue: "Month", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonth' }, { value: "Quarter", displayValue: "Quarter", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarter' }, { value: "Year", displayValue: "Year", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateYear' }],
                localizationId: 'DevExpress.XtraCharts.ChartRangeControlClientDateTimeGridOptions.GridAlignment' }, workdaysOnly = { propertyName: "workdaysOnly", modelName: "@WorkdaysOnly", displayName: "Workdays Only", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions.WorkdaysOnly' };
            Chart.dateTimeScaleOptionsSerializationsInfo = [dateGridAlignment, dateMeasureUnit, workdaysOnly].concat(Chart.scaleOptionsBaseSerializationsInfo), Chart.dateTimeScaleOptions = { propertyName: "dateTimeScaleOptions", modelName: "DateTimeScaleOptions", displayName: "Date-Time Scale Options", info: Chart.dateTimeScaleOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions' };
            Chart.qualitativeScaleOptionsSerializationInfo = [autoGrid, gridOffset, gridSpacing], Chart.qualitativeScaleOptions = { propertyName: "qualitativeScaleOptions", modelName: "QualitativeScaleOptions", displayName: "Qualitative Scale Options", localizationId: "DevExpress.XtraCharts.AxisX3D.QualitativeScaleOptions", info: Chart.qualitativeScaleOptionsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var visibleInPanesSerializable = { propertyName: "visibleInPanesSerializable", modelName: "@VisibleInPanesSerializable", displayName: "Visible In Panes Serializable", editor: DevExpress.JS.Widgets.editorTemplates.text }, minorVisible = { propertyName: "minorVisible", modelName: "@MinorVisible", displayName: "Minor Visible", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorVisible' }, minorColor = { propertyName: "minorColor", modelName: "@MinorColor", displayName: "Minor Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.GridLines.MinorColor' };
            var gridLinesAxisBaseSerializationsInfo = [Chart.visible, minorVisible, Chart.color, minorColor, Chart.lineStyle, Chart.minorLineStyle];
            Chart.gridLinesAxisX = { propertyName: "gridLinesAxisX", modelName: "GridLines", displayName: "Grid Lines", info: gridLinesAxisBaseSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.GridLines' }, Chart.gridLinesAxisY = { propertyName: "gridLinesAxisY", modelName: "GridLines", displayName: "Grid Lines", info: gridLinesAxisBaseSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.GridLines' };
            var straggered = { propertyName: "straggered", modelName: "@Straggered", displayName: "Straggered", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool }, allowStagger = { propertyName: "allowStagger", modelName: "@AllowStagger", displayName: "Allow Stagger", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.AllowStagger' }, allowRotate = { propertyName: "allowRotate", modelName: "@AllowRotate", displayName: "Allow Rotate", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.AllowRotate' }, allowHide = { propertyName: "allowHide", modelName: "@AllowHide", displayName: "Allow Hide", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.AllowHide' }, minIndent = { propertyName: "minIndent", modelName: "@MinIndent", displayName: "Min Indent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.MinIndent' }, axisLabelResolveOverlappingOptionsSerializationsInfo = [allowStagger, allowRotate, allowHide, minIndent], axisLabelResolveOverlappingOptions = { propertyName: "resolveOverlappingOptions", modelName: "ResolveOverlappingOptions", displayName: "Resolve Overlapping Options", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: axisLabelResolveOverlappingOptionsSerializationsInfo, localizationId: 'DevExpress.XtraCharts.AxisLabel.ResolveOverlappingOptions' }, enableAntialiasing = { propertyName: "enableAntialiasing", modelName: "@EnableAntialiasing", displayName: "Enable Antialiasing", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.TitleBase.EnableAntialiasing' };
            var axisLabelBaseSerializationsInfo = [enableAntialiasing, Chart.font, Chart.maxLineCount, Chart.maxWidth, axisLabelResolveOverlappingOptions, Chart.textAlignment, Chart.textColor, Chart.textPattern];
            Chart.axisLabelSerializationsInfo = [Chart.angle, straggered, Chart.visibility].concat(axisLabelBaseSerializationsInfo), Chart.axisLabel = { propertyName: "axisLabel", modelName: "Label", displayName: "Label", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: Chart.axisLabelSerializationsInfo, localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
            Chart.minorCount = { propertyName: "minorCount", modelName: "@MinorCount", displayName: "Minor Count", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.AxisBase.MinorCount' }, Chart.interlaced = { propertyName: "interlaced", modelName: "@Interlaced", displayName: "Interlaced", from: Designer.parseBool, defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, localizationId: 'DevExpress.XtraCharts.AxisBase.Interlaced' }, Chart.interlacedColor = { propertyName: "interlacedColor", modelName: "@InterlacedColor", displayName: "Interlaced Color", editor: Designer.Widgets.editorTemplates.customColorEditor, from: Designer.colorFromString, localizationId: 'DevExpress.XtraCharts.AxisBase.InterlacedColor' };
            Chart.axisBaseSerializationsInfo = [Chart.visualRange, Chart.wholeRange, Chart.numericScaleOptions, Chart.dateTimeScaleOptions, Chart.minorCount, Chart.interlacedColor];
            var fillMode = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }, { value: "Hatch", displayValue: "Hatch", localizationId: 'DevExpress.XtraCharts.FillMode.Hatch' }],
                localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode' }, fillStyle2D = [fillMode];
            Chart.rectangleFillStyleSerializationsInfo = [].concat(fillStyle2D), Chart.interlacedFillStyle = { propertyName: "InterlacedFillStyle", modelName: "InterlacedFillStyle", displayName: "Interlaced Fill Style", info: Chart.rectangleFillStyleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.RadarAxis.InterlacedFillStyle' };
            var crossAxis = { propertyName: "crossAxis", modelName: "@CrossAxis", displayName: "Cross Axis", editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.TickmarksBase.CrossAxis' }, minorThickness = { propertyName: "minorThickness", modelName: "@MinorThickness", displayName: "Minor Thickness", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorThickness' }, minorLength = { propertyName: "minorLength", modelName: "@MinorLength", displayName: "Minor Length", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 2, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorLength' }, lengthinfo = { propertyName: "length", modelName: "@Length", displayName: "Length", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 5, localizationId: 'DevExpress.XtraCharts.TickmarksBase.Length' }, tickmarksMinorVisible = { propertyName: "minorVisible", modelName: "@MinorVisible", displayName: "Minor Visible", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorVisible' }, tickmarksBaseSerializationsInfo = [Chart.visible, tickmarksMinorVisible, crossAxis, Chart.thickness, minorThickness, lengthinfo, minorLength], tickmarksSerializationsInfo = [].concat(tickmarksBaseSerializationsInfo);
            Chart.tickmarks = { propertyName: "tickmarks", modelName: "Tickmarks", displayName: "Tickmarks", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: tickmarksSerializationsInfo, localizationId: 'DevExpress.XtraCharts.RadarAxisY.Tickmarks' };
            Chart.axisAlignment = {
                propertyName: "axisAlignment", modelName: "@Alignment",
                displayName: "Alignment", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [{ value: "Near", displayValue: "Near", localizationId: 'DevExpress.XtraCharts.ConstantLineTitleAlignment.Near' }, { value: "Zero", displayValue: "Zero", localizationId: 'DevExpress.XtraCharts.AxisAlignment.Zero' }, { value: "Far", displayValue: "Far", localizationId: 'DevExpress.XtraCharts.ConstantLineTitleAlignment.Far' }],
                localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Alignment' };
            var pattern = { propertyName: "pattern", modelName: "@Pattern", displayName: "Pattern", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.CrosshairAxisLabelOptions.Pattern' }, crosshairAxisLabelOptionsSerializationsInfo = [Chart.visibility, pattern, Chart.backColor, Chart.textColor, Chart.font];
            Chart.crosshairAxisLabelOptions = { propertyName: "crosshairAxisLabelOptions", modelName: "CrosshairAxisLabelOptions", displayName: "Crosshair Axis Label Options", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: crosshairAxisLabelOptionsSerializationsInfo, localizationId: 'DevExpress.XtraCharts.Axis2D.CrosshairAxisLabelOptions' };
            var axisTitleVisibility = { propertyName: "axisTitleVisibility", modelName: "@Visibility", displayName: "Visibility", defaultVal: "False", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.BorderBase.Visibility' };
            Chart.axisTitleSerializationsInfo = [Chart.text, Chart.titleAlignment, Chart.antialiasing, axisTitleVisibility, Chart.textColor, Chart.font12], Chart.axisTitle = { propertyName: "axisTitle", modelName: "Title", displayName: "Title", defaultVal: {}, info: Chart.axisTitleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title' };
            var crosshairLabelVisibility = { propertyName: "crosshairLabelVisibility", modelName: "@CrosshairLabelVisibility", displayName: "Crosshair Label Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.SeriesBase.CrosshairLabelVisibility' };
            Chart.axis2DSerializationsInfo = [Chart.interlaced, Chart.interlacedFillStyle, Chart.tickmarks, Chart.axisTitle, Chart.visibility, Chart.axisAlignment, Chart.axisLabel, Chart.thickness,
                Chart.color, crosshairLabelVisibility, visibleInPanesSerializable, Chart.crosshairAxisLabelOptions].concat(Chart.axisBaseSerializationsInfo);
            Chart.axisY3DInterlaced = { propertyName: "axisY3DInterlaced", modelName: "@Interlaced", displayName: "Interlaced", from: Designer.parseBool, defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, localizationId: 'DevExpress.XtraCharts.AxisBase.Interlaced' };
            var fillMode3D = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }],
                localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode' }, fillStyle3D = [fillMode];
            var rectangleFillStyle3DSerializationsInfo = [].concat(fillStyle3D), rectangleFillStyle3D = { propertyName: "interlacedFillStyle", modelName: "InterlacedFillStyle", displayName: "Interlaced Fill Style", info: rectangleFillStyle3DSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.RadarAxis.InterlacedFillStyle' }, axisLabel3DPosition = {
                propertyName: "axisLabel3DPosition", modelName: "@AxisLabel3DPosition", displayName: "Axis Label 3D Position",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Bottom", displayValue: "Bottom", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Bottom' }, { value: "Left", displayValue: "Left", localizationId: 'DevExpress.XtraReports.UI.XRControl.Left' }, { value: "Right", displayValue: "Right", localizationId: 'DevExpress.XtraCharts.RectangleIndents.Right' }, { value: "Top", displayValue: "Top", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: "Auto", displayValue: "Auto", localizationId: 'DevExpress.XtraReports.UI.DocumentExportMode.Auto' }]
            };
            Chart.axisLabel3DSerializationsInfo = [axisLabel3DPosition].concat(Chart.axisLabelSerializationsInfo), Chart.axisLabel3D = { propertyName: "axisLabel3D", modelName: "Label", displayName: "Label", info: Chart.axisLabel3DSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
            Chart.axis3DSerializationsInfo = [rectangleFillStyle3D, Chart.axisLabel3D].concat(Chart.axisBaseSerializationsInfo);
            var sizeInPixels = { propertyName: "sizeInPixels", modelName: "@SizeInPixels", displayName: "Size In Pixels", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.XYDiagramPaneBase.SizeInPixels' }, scaleBreakStyle = {
                propertyName: "style", modelName: "@Style", displayName: "Style", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [{ value: "Straight", displayValue: "Straight", localizationId: 'DevExpress.XtraCharts.ScaleBreakStyle.Straight' }, { value: "Ragged", displayValue: "Ragged", localizationId: 'DevExpress.XtraCharts.ScaleBreakStyle.Ragged' }, { value: "Waved", displayValue: "Waved", localizationId: 'DevExpress.XtraCharts.ScaleBreakStyle.Waved' }],
                localizationId: 'DevExpress.XtraReports.UI.ConditionFormatting.Style' }, scaleBreaksOptionsSerializationsInfo = [sizeInPixels, Chart.color, scaleBreakStyle];
            Chart.scaleBreaksOptions = { propertyName: "scaleBreakOptions", modelName: "ScaleBreakOptions", displayName: "Scale Break Options", info: scaleBreaksOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.Axis.ScaleBreakOptions' };
            var enabled = { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraReports.UI.EditOptions.Enabled' }, maxCount = { propertyName: "maxCount", modelName: "@MaxCount", displayName: "Max Count", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.AutoScaleBreaks.MaxCount' }, autoScaleBreaksSerializationsInfo = [enabled, maxCount];
            var edge1 = { propertyName: "edge1", modelName: "@Edge1Serializable", displayName: 'Edge1', localizationId: 'DevExpress.XtraCharts.ScaleBreak.Edge1', editor: DevExpress.JS.Widgets.editorTemplates.numeric }, edge2 = { propertyName: "edge2", modelName: "@Edge2Serializable", displayName: 'Edge2', localizationId: 'DevExpress.XtraCharts.ScaleBreak.Edge2', editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.scaleBreaks = { propertyName: "scaleBreaks", modelName: "ScaleBreaks", displayName: 'Scale Breaks', localizationId: 'DevExpress.XtraCharts.Axis.ScaleBreaks', array: true, editor: Chart.editorTemplates.collection }, Chart.scaleBreakSerializationsInfo = [edge1, edge2, Chart.visible, Chart.name, Chart.tag];
            Chart.autoScaleBreaks = { propertyName: "autoScaleBreaks", modelName: "AutoScaleBreaks", displayName: "Auto Scale Breaks", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: autoScaleBreaksSerializationsInfo, localizationId: 'DevExpress.XtraCharts.Axis.AutoScaleBreaks' }, Chart.reverse = { propertyName: "axisReverse", modelName: "@Reverse", displayName: "Reverse", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.Axis.Reverse' };
            var axisValueSerializable = { propertyName: "axisValue", modelName: "@AxisValueSerializable", displayName: "Axis Value", localizationId: "DevExpress.XtraCharts.AxisCoordinate.AxisValue", editor: DevExpress.JS.Widgets.editorTemplates.text }, showBehind = { propertyName: "showBehind", modelName: "@ShowBehind", from: Designer.parseBool, displayName: "Show Behind", localizationId: 'DevExpress.XtraCharts.ConstantLine.ShowBehind', editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Chart.legendName = { propertyName: "legendName", modelName: "@LegendName", displayName: "Legend", localizationId: "DevExpress.XtraCharts.ConstantLine.Legend", defaultVal: Designer.getLocalization('Default Legend', 'ChartStringId.DefaultLegend'), editor: Chart.editorTemplates.legends };
            var showAxisLabel = { propertyName: "showAxisLabel", modelName: "@ShowAxisLabel", displayName: 'Show Axis Label', localizationId: 'DevExpress.XtraCharts.Strip.ShowAxisLabel', editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, axisLabelText = { propertyName: "axisLabelText", modelName: "@AxisLabelText", displayName: "Axis Label Text", localizationId: 'DevExpress.XtraCharts.Strip.AxisLabelText', editor: DevExpress.JS.Widgets.editorTemplates.text };
            Chart.strips = { propertyName: "strips", modelName: "Strips", displayName: 'Strips', localizationId: 'DevExpress.XtraCharts.Axis2D.Strips', array: true, editor: Chart.editorTemplates.collection }, Chart.stripSerializationsInfo = [Chart.visible, Chart.color, Chart.showInLegend, Chart.legendName, Chart.legendText, Chart.checkableInLegend, Chart.checkedInLegend, showAxisLabel, axisLabelText, Chart.name, Chart.tag];
            Chart.constantLineSerializationsInfo = [axisValueSerializable, Chart.name, Chart.visible, Chart.color, Chart.showInLegend, Chart.legendName, Chart.legendText, Chart.checkedInLegend, Chart.checkableInLegend, showBehind, Chart.tag];
            Chart.constantLines = { propertyName: "constantLines", modelName: "ConstantLines", displayName: "Constant Lines", localizationId: "DevExpress.XtraCharts.Axis2D.ConstantLines", array: true, editor: Chart.editorTemplates.collection };
            Chart.axisSerializationsInfo = [Chart.reverse, Chart.scaleBreaksOptions, Chart.autoScaleBreaks].concat(Chart.axis2DSerializationsInfo);
            Chart.axisXYSerializationsInfo = [Chart.constantLines, Chart.scaleBreaks, Chart.strips].concat(Chart.axisSerializationsInfo);
            var axisID = { propertyName: "axisID", modelName: "@AxisID" };
            Chart.secondaryAxisXYSerializationsInfo = [Chart.name, axisID].concat(Chart.axisXYSerializationsInfo);
            Chart.topLevel = { propertyName: "topLevel", modelName: "@TopLevel", displayName: "Top Level", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.RadarAxisY.TopLevel' }, Chart.radarAxisXLabelTextDirection = {
                propertyName: "textDirection", modelName: "TextDirection", displayName: "Text Direction", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [{ value: "LeftToRight", displayValue: "LeftToRight", localizationId: 'ChartStringId.WizGradientLeftToRight' }, { value: "TopToBottom", displayValue: "TopToBottom", localizationId: 'ChartStringId.WizSeriesLabelTextOrientationTopToBottom' }, { value: "BottomToTop", displayValue: "BottomToTop", localizationId: 'ChartStringId.WizSeriesLabelTextOrientationBottomToTop' }, { value: "Radial", displayValue: "Radial", localizationId: 'DevExpress.XtraCharts.PieSeriesLabelPosition.Radial' }, { value: "Tangent", displayValue: "Tangent", localizationId: 'DevExpress.XtraCharts.PieSeriesLabelPosition.Tangent' }],
                localizationId: 'DevExpress.XtraCharts.RadarAxisXLabel.TextDirection' };
            Chart.radarAxisXLabelSerializationsInfo = axisLabelBaseSerializationsInfo.concat(Chart.radarAxisXLabelTextDirection), Chart.radarAxisXLabel = { propertyName: "radarAxisXLabel", modelName: "Label", displayName: "Label", info: Chart.radarAxisXLabelSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRLabel' }, Chart.radarAxisYLabel = { propertyName: "radarAxisYLabel", modelName: "Label", displayName: "Label", info: axisLabelBaseSerializationsInfo.concat([Chart.visible]), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
            var radarAxisSerializationsInfo = [Chart.interlaced, Chart.interlacedColor, Chart.interlacedFillStyle, Chart.visualRange, Chart.minorCount], radarAxisXSerializationsInfo = [Chart.radarAxisXNumericScaleOptions, Chart.radarWholeRange, Chart.gridLinesAxisX, Chart.radarAxisXLabel, Chart.qualitativeScaleOptions].concat(radarAxisSerializationsInfo), radarAxisYSerializationsInfo = [Chart.color, Chart.thickness, Chart.visible, Chart.radarAxisYNumericScaleOptions, Chart.topLevel, Chart.wholeRange, Chart.gridLinesAxisY, Chart.radarAxisYLabel, Chart.tickmarks].concat(radarAxisSerializationsInfo);
            Chart.radarAxisX = { propertyName: "axisX", modelName: "AxisX", displayName: "Axis X", info: radarAxisXSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.GanttAxisX' }, Chart.radarAxisY = { propertyName: "axisY", modelName: "AxisY", displayName: "Axis Y", info: radarAxisYSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.SeparatePaneIndicator.AxisY' };
            Chart.axisX3D = { propertyName: "axisX", modelName: "AxisX", displayName: "Axis X", info: [Chart.gridLinesAxisX, Chart.interlaced, Chart.qualitativeScaleOptions].concat(Chart.axis3DSerializationsInfo), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.GanttAxisX' }, Chart.axisY3D = { propertyName: "axisY", modelName: "AxisY", displayName: "Axis Y", info: [Chart.gridLinesAxisY, Chart.axisY3DInterlaced].concat(Chart.axis3DSerializationsInfo), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.SeparatePaneIndicator.AxisY' };
            Chart.axisX = { propertyName: "axisX", modelName: "AxisX", displayName: "Primary Axis X", localizationId: 'DevExpress.XtraCharts.AxisX', defaultVal: {}, from: AxisXYViewModel.from([Chart.gridLinesAxisX, Chart.qualitativeScaleOptions].concat(Chart.axisXYSerializationsInfo)), toJsonObject: AxisXYViewModel.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.axisY = { propertyName: "axisY", modelName: "AxisY", displayName: "Primary Axis Y", localizationId: 'DevExpress.XtraCharts.AxisY', defaultVal: {}, from: AxisXYViewModel.from([Chart.gridLinesAxisY].concat(Chart.axisXYSerializationsInfo)), toJsonObject: AxisXYViewModel.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="metadata.ts" />
/// <reference path="widgets/widgets.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            Chart.dimension = { propertyName: "dimension", modelName: "@Dimension", displayName: "Dimension", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.SimpleDiagram3D.Dimension' }, Chart.equalPieSize = { propertyName: "equalPieSize", modelName: "@EqualPieSize", displayName: "EqualPieSize", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Chart.typeNameNotShowDiagram = { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" };
            Chart.secondaryAxesX = { propertyName: "secondaryAxesX", modelName: "SecondaryAxesX", displayName: "Secondary Axes X", array: true, editor: Chart.editorTemplates.collection, localizationId: 'DevExpress.XtraCharts.XYDiagram.SecondaryAxesX' }, Chart.secondaryAxesY = { propertyName: "secondaryAxesY", modelName: "SecondaryAxesY", displayName: "Secondary Axes Y", array: true, editor: Chart.editorTemplates.collection, localizationId: 'DevExpress.XtraCharts.XYDiagram.SecondaryAxesY' }, Chart.panes = { propertyName: "panes", modelName: "Panes", displayName: "Additional Panes", array: true, editor: Chart.editorTemplates.collection, localizationId: 'ChartDesignerStringIDs.TreeAdditionalPanelCollection' };
            Chart.drawingStyle = {
                propertyName: "drawingStyle", modelName: "@DrawingStyle", displayName: "Drawing Style", localizationId: "DevExpress.XtraCharts.RadarDiagram.DrawingStyle", defaultVal: "Counterclockwise",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Counterclockwise", displayValue: "Counterclockwise", localizationId: "DevExpress.XtraCharts.RadarDiagramRotationDirection.Counterclockwise" },
                    { value: "Clockwise", displayValue: "Clockwise", localizationId: "DevExpress.XtraCharts.RadarDiagramRotationDirection.Clockwise" }
                ]
            }, Chart.startAngleInDegrees = {
                propertyName: "startAngleInDegrees", modelName: "@StartAngleInDegrees", displayName: "Start Angle in Degrees", localizationId: "DevExpress.XtraCharts.RadarDiagram.StartAngleInDegrees", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 }, Chart.rotationDirection = {
                propertyName: "rotationDirection", modelName: "@RotationDirection", displayName: "Rotation Direction", localizationId: "DevExpress.XtraCharts.RadarDiagram.RotationDirection", defaultVal: "Circle",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Circle", displayValue: "Circle", localizationId: "DevExpress.XtraCharts.RadarDiagramDrawingStyle.Circle" },
                    { value: "Polygon", displayValue: "Polygon", localizationId: "DevExpress.XtraCharts.RadarDiagramDrawingStyle.Polygon" }
                ]
            };
            Chart.diagramSerializationsInfo = [Chart.typeNameNotShowDiagram], Chart.radarSerializationsInfo = [Chart.drawingStyle, Chart.startAngleInDegrees, Chart.rotationDirection, Chart.radarAxisX, Chart.radarAxisY, Chart.margin, Chart.backColor].concat(Chart.diagramSerializationsInfo), Chart.polarSerializationsInfo = [Chart.radarAxisX, Chart.radarAxisY, Chart.margin, Chart.backColor].concat(Chart.diagramSerializationsInfo), Chart.simple3DSerializationsInfo = [Chart.dimension, Chart.margin, Chart.equalPieSize].concat(Chart.diagramSerializationsInfo), Chart.funnel3DSerializationsInfo = [].concat(Chart.simple3DSerializationsInfo), Chart.simpleSerializationsInfo = [Chart.dimension, Chart.margin, Chart.equalPieSize].concat(Chart.diagramSerializationsInfo), Chart.XY2DSerializationsInfo = [Chart.defaultPane, Chart.panes, Chart.axisX, Chart.axisY, Chart.secondaryAxesX, Chart.secondaryAxesY, Chart.margin, Chart.enableAxisXScrolling, Chart.enableAxisXZooming, Chart.enableAxisYScrolling, Chart.enableAxisYZooming, Chart.typeNameNotShowDiagram], Chart.XYSerializationsInfo = [Chart.rotated].concat(Chart.XY2DSerializationsInfo), Chart.XY3DSerializationsInfo = [Chart.axisX3D, Chart.axisY3D, Chart.backColor, Chart.typeNameNotShowDiagram], Chart.GanttDiagramSerializationsInfo = [].concat(Chart.XY2DSerializationsInfo);
            var XYObject = { info: Chart.XYSerializationsInfo, type: "XYDiagram" }, XY2DObject = { info: Chart.XY2DSerializationsInfo, type: "SwiftPlotDiagram" }, XY3DObject = { info: Chart.XY3DSerializationsInfo, type: "XYDiagram3D" }, radarObject = { info: Chart.radarSerializationsInfo, type: "RadarDiagram" }, polarObject = { info: Chart.polarSerializationsInfo, type: "PolarDiagram" }, simpleObject = { info: Chart.simpleSerializationsInfo, type: "SimpleDiagram" }, simple3DObject = { info: Chart.simple3DSerializationsInfo, type: "SimpleDiagram3D" }, funnel3DObject = { info: Chart.funnel3DSerializationsInfo, type: "FunnelDiagram" }, gantObject = { info: Chart.GanttDiagramSerializationsInfo, type: "GanttDiagram" };
            Chart.diagramMapper = {
                "SideBySideBarSeriesView": XYObject,
                "StackedBarSeriesView": XYObject,
                "FullStackedBarSeriesView": XYObject,
                "SideBySideStackedBarSeriesView": XYObject,
                "SideBySideFullStackedBarSeriesView": XYObject,
                "SideBySideBar3DSeriesView": XY3DObject,
                "StackedBar3DSeriesView": XY3DObject,
                "FullStackedBar3DSeriesView": XY3DObject,
                "SideBySideStackedBar3DSeriesView": XY3DObject,
                "SideBySideFullStackedBar3DSeriesView": XY3DObject,
                "ManhattanBarSeriesView": XY3DObject,
                "PointSeriesView": XYObject,
                "BubbleSeriesView": XYObject,
                "LineSeriesView": XYObject,
                "StackedLineSeriesView": XYObject,
                "FullStackedLineSeriesView": XYObject,
                "StepLineSeriesView": XYObject,
                "SplineSeriesView": XYObject,
                "ScatterLineSeriesView": XYObject,
                "SwiftPlotSeriesView": XY2DObject,
                "Line3DSeriesView": XY3DObject,
                "StackedLine3DSeriesView": XY3DObject,
                "FullStackedLine3DSeriesView": XY3DObject,
                "StepLine3DSeriesView": XY3DObject,
                "Spline3DSeriesView": XY3DObject,
                "PieSeriesView": simpleObject,
                "DoughnutSeriesView": simpleObject,
                "NestedDoughnutSeriesView": simpleObject,
                "Pie3DSeriesView": simple3DObject,
                "Doughnut3DSeriesView": simple3DObject,
                "FunnelSeriesView": simpleObject,
                "Funnel3DSeriesView": funnel3DObject,
                "AreaSeriesView": XYObject,
                "StackedAreaSeriesView": XYObject,
                "FullStackedAreaSeriesView": XYObject,
                "StepAreaSeriesView": XYObject,
                "SplineAreaSeriesView": XYObject,
                "StackedSplineAreaSeriesView": XYObject,
                "FullStackedSplineAreaSeriesView": XYObject,
                "Area3DSeriesView": XY3DObject,
                "StackedArea3DSeriesView": XY3DObject,
                "FullStackedArea3DSeriesView": XY3DObject,
                "StepArea3DSeriesView": XY3DObject,
                "SplineArea3DSeriesView": XY3DObject,
                "StackedSplineArea3DSeriesView": XY3DObject,
                "FullStackedSplineArea3DSeriesView": XY3DObject,
                "OverlappedRangeBarSeriesView": XYObject,
                "SideBySideRangeBarSeriesView": XYObject,
                "RangeAreaSeriesView": XYObject,
                "RangeArea3DSeriesView": XY3DObject,
                "RadarPointSeriesView": radarObject,
                "RadarLineSeriesView": radarObject,
                "RadarAreaSeriesView": radarObject,
                "PolarPointSeriesView": polarObject,
                "PolarLineSeriesView": polarObject,
                "PolarAreaSeriesView": polarObject,
                "StockSeriesView": XYObject,
                "CandleStickSeriesView": XYObject,
                "OverlappedGanttSeriesView": gantObject,
                "SideBySideGanttSeriesView": gantObject
            };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="metadata.ts" />
/// <reference path="widgets/widgets.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var FillStyle = (function (_super) {
                __extends(FillStyle, _super);
                function FillStyle(model, info, gradientTypeName, serializer) {
                    var _this = this;
                    this.getInfo = function () { return info; };
                    _super.call(this, model, serializer, info);
                    this.gradientTypeName = gradientTypeName;
                    this.updateOptions(this.fillMode(), serializer, model["Options"]);
                    this._disposables.push(this.fillMode.subscribe(function (newValue) {
                        _this.updateOptions(newValue, serializer, {});
                    }));
                }
                FillStyle.from = function (info, gradientTypeName) {
                    return function (model, serializer) {
                        return new FillStyle(model || {}, info, gradientTypeName, serializer);
                    };
                };
                FillStyle.toJson = function (model, serializer, refs) {
                    return serializer.serialize(model, undefined, refs);
                };
                FillStyle.prototype._optionsTypeMap = function (unitType) {
                    switch (unitType) {
                        case "Gradient": return this.gradientTypeName;
                        case "Hatch": return "HatchFillOptions";
                        default: return undefined;
                    }
                };
                FillStyle.prototype.isPropertyVisible = function (propertyName) {
                    return propertyName !== "options" || (propertyName === "options" && this[propertyName]());
                };
                FillStyle.prototype.updateOptions = function (fillMode, serializer, optionsObject) {
                    var newObject = $.extend({ "@TypeNameSerializable": this._optionsTypeMap(fillMode) }, optionsObject);
                    var optionsInfo = Chart.fillModeMapper[fillMode];
                    this.options(new Designer.SerializableModel(newObject, serializer, optionsInfo));
                };
                return FillStyle;
            })(Designer.SerializableModel);
            Chart.FillStyle = FillStyle;
            Chart.typeNameSerializable = {
                propertyName: "typeName", modelName: "@TypeNameSerializable", from: function (value) { return value; }
            };
            Chart.barSeriesViewGroup = ["SideBySideBarSeriesView", "StackedBarSeriesView", "FullStackedBarSeriesView", "SideBySideStackedBarSeriesView", "SideBySideFullStackedBarSeriesView", "OverlappedRangeBarSeriesView", "SideBySideRangeBarSeriesView", "OverlappedGanttSeriesView", "SideBySideGanttSeriesView"];
            Chart.bar3DSeriesViewGroup = ["SideBySideBar3DSeriesView", "StackedBar3DSeriesView", "FullStackedBar3DSeriesView", "SideBySideStackedBar3DSeriesView", "SideBySideFullStackedBar3DSeriesView", "ManhattanBarSeriesView"];
            Chart.barWidth = { propertyName: "barWidth", modelName: "@BarWidth", displayName: "Bar Width", defaultVal: 0.6, editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.BarSeriesView.BarWidth' };
            Chart.colorEach = { propertyName: "colorEach", modelName: "@ColorEach", displayName: "Color Each", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.SeriesView3DColorEachSupportBase.ColorEach' };
            Chart.borderSerializationsInfo = [Chart.color, Chart.thickness, Chart.visibility], Chart.border = { propertyName: "border", modelName: "Border", displayName: "Border", info: Chart.borderSerializationsInfo, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.TotalLabel.Border' };
            var color2 = { propertyName: "color2", modelName: "@Color2", displayName: "Color2", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.PaletteEntry.Color2' }, typeNameSerializableOptions = { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" };
            Chart.fillMode = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", defaultVal: "Empty", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }, { value: "Hatch", displayValue: "Hatch", localizationId: 'DevExpress.XtraCharts.FillMode.Hatch' }],
                localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode' };
            var gradientModeBase = {
                propertyName: "gradientMode", modelName: "@GradientMode", displayName: "Gradient Mode", defaultVal: "TopToBottom", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "TopToBottom", displayValue: "Top To Bottom", localizationId: 'DevExpress.XtraCharts.TextOrientation.TopToBottom' }, { value: "BottomToTop", displayValue: "Bottom To Top", localizationId: 'DevExpress.XtraCharts.TextOrientation.BottomToTop' }, { value: "LeftToRight", displayValue: "Left To Right" }, { value: "RightToLeft", displayValue: "Right To Left" }, { value: "TopLeftToBottomRight", displayValue: "Top Left To Bottom Right" }, { value: "BottomRightToTopLeft", displayValue: "Bottom Right To Top Left" }, { value: "TopRightToBottomLeft", displayValue: "Top Right To Bottom Left" }, { value: "BottomLeftToTopRight", displayValue: "Bottom Left To Top Right" }, { value: "FromCenterHorizontal", displayValue: "From Center Horizontal", localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.FromCenterHorizontal' }, { value: "ToCenterHorizontal", displayValue: "To Center Horizontal", localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.ToCenterHorizontal' }, { value: "FromCenterVertical", displayValue: "From Center Vertical", localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.FromCenterVertical' }, { value: "ToCenterVertical", displayValue: "To Center Vertical", localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.ToCenterVertical' }],
                localizationId: 'DevExpress.XtraCharts.PolygonGradientFillOptions.GradientMode' }, GradientFillOptionsInfoBase = [gradientModeBase, color2, Chart.tag, { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" }];
            var hatchStyle = {
                propertyName: "hatchStyle", modelName: "@HatchStyle", displayName: "Hatch Style", defaultVal: "BackwardDiagonal", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Horizontal", displayValue: "Horizontal", localizationId: 'DevExpress.XtraCharts.TextOrientation.Horizontal' }, { value: "Vertical", displayValue: "Vertical", localizationId: 'DevExpress.XtraCharts.LayoutDirection.Vertical' }, { value: "ForwardDiagonal", displayValue: "ForwardDiagonal", localizationId: 'ChartStringId.WizHatchForwardDiagonal' }, { value: "BackwardDiagonal", displayValue: "BackwardDiagonal", localizationId: 'ChartStringId.WizHatchBackwardDiagonal' }, { value: "LargeGrid", displayValue: "LargeGrid", localizationId: 'ChartStringId.WizHatchLargeGrid' }, { value: "DiagonalCross", displayValue: "DiagonalCross", localizationId: 'ChartStringId.WizHatchDiagonalCross' }, { value: "Percent05", displayValue: "Percent05", localizationId: 'ChartStringId.WizHatchPercent05' }, { value: "Percent10", displayValue: "Percent10", localizationId: 'ChartStringId.WizHatchPercent10' }, { value: "Percent20", displayValue: "Percent20", localizationId: 'ChartStringId.WizHatchPercent20' }, { value: "Percent25", displayValue: "Percent25", localizationId: 'ChartStringId.WizHatchPercent25' }, { value: "Percent30", displayValue: "Percent30", localizationId: 'ChartStringId.WizHatchPercent30' }, { value: "Percent40", displayValue: "Percent40", localizationId: 'ChartStringId.WizHatchPercent40' }, { value: "Percent50", displayValue: "Percent50", localizationId: 'ChartStringId.WizHatchPercent50' }, { value: "Percent60", displayValue: "Percent60", localizationId: 'ChartStringId.WizHatchPercent60' }, { value: "Percent70", displayValue: "Percent70", localizationId: 'ChartStringId.WizHatchPercent70' }, { value: "Percent75", displayValue: "Percent75", localizationId: 'ChartStringId.WizHatchPercent75' }, { value: "Percent80", displayValue: "Percent80", localizationId: 'ChartStringId.WizHatchPercent80' }, { value: "Percent90", displayValue: "Percent90", localizationId: 'ChartStringId.WizHatchPercent90' }, { value: "LightDownwardDiagonal", displayValue: "LightDownwardDiagonal", localizationId: 'ChartStringId.WizHatchLightDownwardDiagonal' }, { value: "LightUpwardDiagonal", displayValue: "LightUpwardDiagonal", localizationId: 'ChartStringId.WizHatchLightUpwardDiagonal' }, { value: "DarkDownwardDiagonal", displayValue: "DarkDownwardDiagonal", localizationId: 'ChartStringId.WizHatchDarkDownwardDiagonal' }, { value: "DarkUpwardDiagonal", displayValue: "DarkUpwardDiagonal", localizationId: 'ChartStringId.WizHatchDarkUpwardDiagonal' }, { value: "WideDownwardDiagonal", displayValue: "WideDownwardDiagonal", localizationId: 'ChartStringId.WizHatchWideDownwardDiagonal' }, { value: "WideUpwardDiagonal", displayValue: "WideUpwardDiagonal", localizationId: 'ChartStringId.WizHatchWideUpwardDiagonal' }, { value: "LightVertical", displayValue: "LightVertical", localizationId: 'ChartStringId.WizHatchLightVertical' }, { value: "LightHorizontal", displayValue: "LightHorizontal", localizationId: 'ChartStringId.WizHatchLightHorizontal' }, { value: "NarrowVertical", displayValue: "NarrowVertical", localizationId: 'ChartStringId.WizHatchNarrowVertical' }, { value: "NarrowHorizontal", displayValue: "NarrowHorizontal", localizationId: 'ChartStringId.WizHatchNarrowHorizontal' }, { value: "DarkVertical", displayValue: "DarkVertical", localizationId: 'ChartStringId.WizHatchDarkVertical' }, { value: "DarkHorizontal", displayValue: "DarkHorizontal", localizationId: 'ChartStringId.WizHatchDarkHorizontal' }, { value: "DashedDownwardDiagonal", displayValue: "DashedDownwardDiagonal", localizationId: 'ChartStringId.WizHatchDashedDownwardDiagonal' }, { value: "DashedUpwardDiagonal", displayValue: "DashedUpwardDiagonal", localizationId: 'ChartStringId.WizHatchDashedUpwardDiagonal' }, { value: "DashedHorizontal", displayValue: "DashedHorizontal", localizationId: 'ChartStringId.WizHatchDashedHorizontal' }, { value: "DashedVertical", displayValue: "DashedVertical", localizationId: 'ChartStringId.WizHatchDashedVertical' }, { value: "SmallConfetti", displayValue: "SmallConfetti", localizationId: 'ChartStringId.WizHatchSmallConfetti' }, { value: "LargeConfetti", displayValue: "LargeConfetti", localizationId: 'ChartStringId.WizHatchLargeConfetti' }, { value: "ZigZag", displayValue: "ZigZag", localizationId: 'ChartStringId.WizHatchZigZag' }, { value: "Wave", displayValue: "Wave", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Wave' }, { value: "DiagonalBrick", displayValue: "DiagonalBrick", localizationId: 'ChartStringId.WizHatchDiagonalBrick' }, { value: "HorizontalBrick", displayValue: "HorizontalBrick", localizationId: 'ChartStringId.WizHatchHorizontalBrick' }, { value: "Weave", displayValue: "Weave", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Weave' }, { value: "Plaid", displayValue: "Plaid", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Plaid' }, { value: "Divot", displayValue: "Divot", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Divot' }, { value: "DottedGrid", displayValue: "DottedGrid", localizationId: 'ChartStringId.WizHatchDottedGrid' }, { value: "DottedDiamond", displayValue: "DottedDiamond", localizationId: 'ChartStringId.WizHatchDottedDiamond' }, { value: "Shingle", displayValue: "Shingle", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Shingle' }, { value: "Trellis", displayValue: "Trellis", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Trellis' }, { value: "Sphere", displayValue: "Sphere", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Sphere' }, { value: "SmallGrid", displayValue: "SmallGrid", localizationId: 'ChartStringId.WizHatchSmallGrid' }, { value: "SmallCheckerBoard", displayValue: "SmallCheckerBoard", localizationId: 'ChartStringId.WizHatchSmallCheckerBoard' }, { value: "LargeCheckerBoard", displayValue: "LargeCheckerBoard", localizationId: 'ChartStringId.WizHatchLargeCheckerBoard' }, { value: "OutlinedDiamond", displayValue: "OutlinedDiamond", localizationId: 'ChartStringId.WizHatchOutlinedDiamond' }, { value: "SolidDiamond", displayValue: "SolidDiamond", localizationId: 'ChartStringId.WizHatchSolidDiamond' }],
                localizationId: 'DevExpress.XtraCharts.HatchFillOptions.HatchStyle' }, hatchFillOptionsInfo = [hatchStyle, color2, Chart.tag, typeNameSerializableOptions];
            Chart.fillStyleOptionsSerialize = { propertyName: "options", modelName: "Options", displayName: "Options", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.Options' };
            Chart.fillMode3D = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", defaultVal: "Empty", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }],
                localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode' };
            Chart.fillStyle = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRChart.FillStyle' };
            var aggregateFunction = {
                propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: 'Aggregate Function', localizationId: 'DevExpress.XtraCharts.XYDiagram2DSeriesViewBase.AggregateFunction', defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: 'Default', displayValue: Designer.getLocalization('Default', 'ChartStringId.WizAggregateFunctionDefault') }, { value: 'None', displayValue: Designer.getLocalization('None', 'ChartStringId.WizAggregateFunctionNone') }, { value: 'Average', displayValue: Designer.getLocalization('Average', 'ChartStringId.WizAggregateFunctionAverage') }, { value: 'Sum', displayValue: Designer.getLocalization('Sum', 'ChartStringId.WizAggregateFunctionSum') }, { value: 'Minimum', displayValue: Designer.getLocalization('Minimum', 'ChartStringId.WizAggregateFunctionMinimum') }, { value: 'Maximum', displayValue: Designer.getLocalization('Maximum', 'ChartStringId.WizAggregateFunctionMaximum') }, { value: 'Count', displayValue: Designer.getLocalization('Count', 'ChartStringId.WizAggregateFunctionCount') }, { value: 'Financial', displayValue: Designer.getLocalization('Financial', 'ChartStringId.WizAggregateFunctionFinancial') }]
            };
            Chart.viewSerializationsInfo = [Chart.typeNameSerializable, Chart.color, Chart.colorEach, Chart.border, aggregateFunction, Chart.tag];
            Chart.fillModeMapper = {
                "Empty": [],
                "Solid": [Chart.tag],
                "Gradient": GradientFillOptionsInfoBase,
                "Hatch": hatchFillOptionsInfo
            };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="axis.ts" />
/// <reference path="diagram.ts" />
/// <reference path="seriesview.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var DataMemberBase = (function (_super) {
                __extends(DataMemberBase, _super);
                function DataMemberBase(value, valueScaleType) {
                    var _this = this;
                    _super.call(this);
                    this._separator = ';';
                    this._assignValueDataMembers(this, value);
                    if (valueScaleType) {
                        this.valueScaleType = valueScaleType;
                        this._disposables.push(this.valueScaleType.subscribe(function (newVal) {
                            _this._assignValueDataMembers(_this, "");
                        }));
                    }
                }
                DataMemberBase.prototype._assignValueDataMembers = function (valueDataMember, value) {
                    var values = (value || "").split(this._separator);
                    valueDataMember.arrayValueDataMemberNames.forEach(function (name, index) {
                        if (valueDataMember[name])
                            valueDataMember[name](values[index] || "");
                        else
                            valueDataMember[name] = ko.observable(values[index] || "");
                    });
                };
                DataMemberBase.prototype._valueDataMembersToString = function (valueDataMember) {
                    var result = [];
                    valueDataMember.arrayValueDataMemberNames.forEach(function (name) {
                        result.push(valueDataMember[name]() || "");
                    });
                    return result.join(this._separator);
                };
                DataMemberBase.prototype.toString = function () {
                    var _this = this;
                    var shouldSerialize = false;
                    this.arrayValueDataMemberNames.forEach(function (name) {
                        shouldSerialize = shouldSerialize || _this[name]();
                    });
                    return shouldSerialize ? this._valueDataMembersToString(this) : null;
                };
                return DataMemberBase;
            })(Designer.Disposable);
            Chart.DataMemberBase = DataMemberBase;
            var CommonValueDataMembers = (function (_super) {
                __extends(CommonValueDataMembers, _super);
                function CommonValueDataMembers() {
                    _super.apply(this, arguments);
                }
                CommonValueDataMembers.from = function (value) {
                    return new CommonValueDataMembers(value, null);
                };
                CommonValueDataMembers.toJson = function (value) {
                    return value.toString() || {};
                };
                CommonValueDataMembers.prototype.getInfo = function () {
                    return valueDataMembersSerializationsInfo;
                };
                Object.defineProperty(CommonValueDataMembers.prototype, "arrayValueDataMemberNames", {
                    get: function () { return ["value"]; },
                    enumerable: true,
                    configurable: true
                });
                return CommonValueDataMembers;
            })(DataMemberBase);
            Chart.CommonValueDataMembers = CommonValueDataMembers;
            var ValueWeightDataMembers = (function (_super) {
                __extends(ValueWeightDataMembers, _super);
                function ValueWeightDataMembers() {
                    _super.apply(this, arguments);
                }
                ValueWeightDataMembers.prototype.getInfo = function () {
                    return valueWeightDataMembersSerializationsInfo;
                };
                Object.defineProperty(ValueWeightDataMembers.prototype, "arrayValueDataMemberNames", {
                    get: function () { return ["value", "weight"]; },
                    enumerable: true,
                    configurable: true
                });
                return ValueWeightDataMembers;
            })(DataMemberBase);
            Chart.ValueWeightDataMembers = ValueWeightDataMembers;
            var Value1Value2DataMembers = (function (_super) {
                __extends(Value1Value2DataMembers, _super);
                function Value1Value2DataMembers() {
                    _super.apply(this, arguments);
                }
                Value1Value2DataMembers.prototype.getInfo = function () {
                    return value1Value2DataMembersSerializationsInfo;
                };
                Object.defineProperty(Value1Value2DataMembers.prototype, "arrayValueDataMemberNames", {
                    get: function () { return ["value1", "value2"]; },
                    enumerable: true,
                    configurable: true
                });
                return Value1Value2DataMembers;
            })(DataMemberBase);
            Chart.Value1Value2DataMembers = Value1Value2DataMembers;
            var StockValueDataMembers = (function (_super) {
                __extends(StockValueDataMembers, _super);
                function StockValueDataMembers() {
                    _super.apply(this, arguments);
                }
                StockValueDataMembers.prototype.getInfo = function () {
                    return stockDataMembersSerializationsInfo;
                };
                Object.defineProperty(StockValueDataMembers.prototype, "arrayValueDataMemberNames", {
                    get: function () { return ["low", "high", "open", "close"]; },
                    enumerable: true,
                    configurable: true
                });
                return StockValueDataMembers;
            })(DataMemberBase);
            Chart.StockValueDataMembers = StockValueDataMembers;
            var viewTypesDataMembers = {
                "BubbleSeriesView": ValueWeightDataMembers,
                "OverlappedRangeBarSeriesView": Value1Value2DataMembers,
                "SideBySideRangeBarSeriesView": Value1Value2DataMembers,
                "RangeAreaSeriesView": Value1Value2DataMembers,
                "RangeArea3DSeriesView": Value1Value2DataMembers,
                "OverlappedGanttSeriesView": Value1Value2DataMembers,
                "SideBySideGanttSeriesView": Value1Value2DataMembers,
                "StockSeriesView": StockValueDataMembers,
                "CandleStickSeriesView": StockValueDataMembers
            };
            var ChartViewModel = (function (_super) {
                __extends(ChartViewModel, _super);
                function ChartViewModel(model, serializer) {
                    var _this = this;
                    _super.call(this, Designer.cutRefs(model), serializer, Chart.chartSerializationsInfo);
                    var oldType = ko.observable("");
                    this._createDiagram(model["Diagram"], oldType, serializer);
                    ko.computed(function () {
                        _this._createDiagram({}, oldType, serializer);
                    });
                    this.titles = Chart.deserializeModelArray(model && model.Titles, function (title, parent) { return new TitleViewModel(title, parent, serializer); }, TitleViewModel.prefix);
                    this.legends = Chart.deserializeModelArray(model && model.Legends, function (legends, parent) { return new AdditionalLegendViewModel(legends, parent, serializer); }, AdditionalLegendViewModel.prefix);
                    var actions = [
                        {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-top_left",
                            imageTemplateName: "dxrd-svg-titles-top_left",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Alignment": "Near" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-top_center",
                            imageTemplateName: "dxrd-svg-titles-top_center",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Alignment": "Center" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-top_right",
                            imageTemplateName: "dxrd-svg-titles-top_right",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Alignment": "Far" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-right_top_vertical",
                            imageTemplateName: "dxrd-svg-titles-right_top_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Right", "@Alignment": "Near" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-right_center_vertical",
                            imageTemplateName: "dxrd-svg-titles-right_center_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Right", "@Alignment": "Center" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-right_bottom_vertical",
                            imageTemplateName: "dxrd-svg-titles-right_bottom_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Right", "@Alignment": "Far" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-bottom_left",
                            imageTemplateName: "dxrd-svg-titles-bottom_left",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Bottom", "@Alignment": "Near" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-bottom_center",
                            imageTemplateName: "dxrd-svg-titles-bottom_center",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Bottom", "@Alignment": "Center" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-bottom_right",
                            imageTemplateName: "dxrd-svg-titles-bottom_right",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Bottom", "@Alignment": "Far" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-left_bottom_vertical",
                            imageTemplateName: "dxrd-svg-titles-left_bottom_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Left", "@Alignment": "Near" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-left_center_vertical",
                            imageTemplateName: "dxrd-svg-titles-left_center_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Left", "@Alignment": "Center" }); }
                        }, {
                            text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-chart-title-left_top_vertical",
                            imageTemplateName: "dxrd-svg-titles-left_top_vertical",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this.addTitle({ "@Dock": "Left", "@Alignment": "Far" }); }
                        }];
                    this.titles()["innerActions"] = createInnerActionsWithPopover(Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'), "addtitles-action", actions);
                }
                ChartViewModel.from = function (model, serializer) {
                    return new ChartViewModel(model || {}, serializer);
                };
                ChartViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.chartSerializationsInfo, refs);
                };
                ChartViewModel.prototype._createDiagram = function (model, oldType, serializer) {
                    if (model) {
                        var typeName = "";
                        if (this.dataContainer.seriesDataMember() || this.dataContainer.series().length === 0) {
                            typeName = this.dataContainer.seriesTemplate.viewType();
                        }
                        else {
                            typeName = this.dataContainer.series()[0].viewType();
                        }
                        if (oldType.peek() !== Chart.diagramMapper[typeName].type) {
                            oldType(Chart.diagramMapper[typeName].type);
                            this.diagram(DiagramViewModel.createDiagram(model, typeName, serializer));
                        }
                    }
                };
                ChartViewModel.prototype.addTitle = function (model) {
                    model["@Text"] = model["@Name"] = Designer.getUniqueName(this.titles().map(function (x) { return x["name"](); }), TitleViewModel.prefix);
                    this.titles()["innerActions"][0].closePopover();
                    this.titles.push(new TitleViewModel(model, this.titles));
                };
                return ChartViewModel;
            })(Designer.SerializableModel);
            Chart.ChartViewModel = ChartViewModel;
            var ChartElementCollectionItemBase = (function (_super) {
                __extends(ChartElementCollectionItemBase, _super);
                function ChartElementCollectionItemBase(model, parent, serializer, info) {
                    _super.call(this, model, serializer, info);
                    Chart.initCollectionItem(this, parent)();
                }
                ChartElementCollectionItemBase.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, null, refs);
                };
                return ChartElementCollectionItemBase;
            })(Designer.SerializableModel);
            Chart.ChartElementCollectionItemBase = ChartElementCollectionItemBase;
            var TitleViewModel = (function (_super) {
                __extends(TitleViewModel, _super);
                function TitleViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer, Chart.titleSerializationsInfo);
                    this.name = ko.pureComputed({
                        read: function () { return _this["text"] ? _this["text"]() : "title"; },
                        write: function (val) { _this["text"](val); }
                    });
                }
                TitleViewModel.from = function (model, serializer) {
                    return new TitleViewModel(model || {}, null, serializer);
                };
                TitleViewModel.prefix = "Title";
                return TitleViewModel;
            })(ChartElementCollectionItemBase);
            Chart.TitleViewModel = TitleViewModel;
            var AdditionalLegendViewModel = (function (_super) {
                __extends(AdditionalLegendViewModel, _super);
                function AdditionalLegendViewModel(model, parent, serializer) {
                    _super.call(this, model, parent, serializer, Chart.additionalLegendSerializationsInfo);
                }
                AdditionalLegendViewModel.from = function (model, serializer) {
                    return new AdditionalLegendViewModel(model || {}, null, serializer);
                };
                AdditionalLegendViewModel.prefix = "Legend";
                return AdditionalLegendViewModel;
            })(ChartElementCollectionItemBase);
            Chart.AdditionalLegendViewModel = AdditionalLegendViewModel;
            var DataContainerViewModel = (function (_super) {
                __extends(DataContainerViewModel, _super);
                function DataContainerViewModel(model, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer, Chart.dataContainerSerializationsInfo);
                    this.series = Chart.deserializeModelArray(model && model.SeriesSerializable, function (item, parent) { return new SeriesViewModel(item, parent, serializer); }, SeriesViewModel.prefix);
                    var array = Chart.viewBindableSerializationInfo.valuesArray;
                    var actions = [];
                    for (var i = 0; i < array.length; i++) {
                        var value = array[i];
                        var getImageClassName = function (isTemplate) {
                            if (isTemplate === void 0) { isTemplate = false; }
                            return (isTemplate ? "dxrd-svg-fieldlist-" : "dx-image-fieldlist-") + SeriesViewModel.getClassName(value.value);
                        };
                        actions.push({
                            text: Designer.getLocalization(value.displayValue, value.localizationId),
                            imageClassName: getImageClassName(),
                            imageTemplateName: DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.getExistingTemplate(getImageClassName(true)),
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: (function (typeName) { return function (item) {
                                _this.series()["innerActions"][0].closePopover();
                                _this.series.push(new SeriesViewModel({
                                    "@Name": Designer.getUniqueName(_this.series().map(function (x) { return x["name"](); }), SeriesViewModel.prefix),
                                    "View": {
                                        "@TypeNameSerializable": typeName,
                                    }
                                }, _this.series));
                            }; })(value.value)
                        });
                    }
                    this.series()["innerActions"] = createInnerActionsWithPopover(Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'), "addseries-action", actions);
                }
                DataContainerViewModel.from = function (model, serializer) {
                    return new DataContainerViewModel(model || {}, serializer);
                };
                DataContainerViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.dataContainerSerializationsInfo, refs);
                };
                return DataContainerViewModel;
            })(Designer.SerializableModel);
            Chart.DataContainerViewModel = DataContainerViewModel;
            Chart.dataFilterSerializationsInfo = [
                { propertyName: "columnName", displayName: "Column Name", editor: ko.bindingHandlers["displayNameExtender"] ? Designer.Widgets.editorTemplates.field : Chart.editorTemplates.fieldChart, modelName: "@ColumnNameSerializable", localizationId: 'DevExpress.XtraCharts.DataFilter.ColumnName' },
                {
                    propertyName: "dataType", displayName: "Data Type", defaultVal: "System.String", editor: DevExpress.JS.Widgets.editorTemplates.combobox, modelName: "@DataTypeSerializable",
                    valuesArray: [{ value: "System.Boolean", displayValue: "System.Boolean" }, { value: "System.Byte", displayValue: "System.Byte" }, { value: "System.Char", displayValue: "System.Char" }, { value: "System.DateTime", displayValue: "System.DateTime" }, { value: "System.Decimal", displayValue: "System.Decimal" }, { value: "System.Double", displayValue: "System.Double" }, { value: "System.Guid", displayValue: "System.Guid" }, { value: "System.Int16", displayValue: "System.Int16" }, { value: "System.Int32", displayValue: "System.Int32" }, { value: "System.Int64", displayValue: "System.Int64" }, { value: "System.SByte", displayValue: "System.SByte" }, { value: "System.Single", displayValue: "System.Single" }, { value: "System.String", displayValue: "System.String" }, { value: "System.TimeSpan", displayValue: "System.TimeSpan" }, { value: "System.UInt16", displayValue: "System.UInt16" }, { value: "System.UInt32", displayValue: "System.UInt32" }, { value: "System.UInt64", displayValue: "System.UInt64" }],
                    localizationId: 'DevExpress.XtraCharts.DataFilter.DataType' },
                {
                    propertyName: "condition", displayName: "Condition", defaultVal: "Equal", editor: DevExpress.JS.Widgets.editorTemplates.combobox, modelName: "@Condition",
                    valuesArray: [{ value: "Equal", displayValue: "Equal", localizationId: 'DevExpress.XtraCharts.DataFilterCondition.Equal' }, { value: "GreaterThan", displayValue: "GreaterThan" }, { value: "GreaterThanOrEqual", displayValue: "GreaterThanOrEqual" }, { value: "LessThan", displayValue: "LessThan" }, { value: "LessThanOrEqual", displayValue: "LessThanOrEqual" }, { value: "NotEqual", displayValue: "NotEqual" }],
                    localizationId: 'DevExpress.XtraReports.UI.FormattingRule.Condition' },
                { propertyName: "value", displayName: "Value", editor: DevExpress.JS.Widgets.editorTemplates.text, modelName: "@InvariantValueSerializable", localizationId: 'ASPxReportsStringId.FilterEditor_Operand_Type_Value' }
            ];
            var DataFilterModel = (function () {
                function DataFilterModel(model, serializer) {
                    var _this = this;
                    this.columnName = ko.observable("");
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.name = ko.pureComputed(function () {
                        return !!_this.columnName() ? _this.columnName() : Designer.getLocalization("DataFilter", "ChartStringId.DefaultDataFilterName");
                    });
                }
                DataFilterModel.createNew = function () {
                    return new Chart.DefaultDataFilterModel({}, new DevExpress.JS.Utils.ModelSerializer());
                };
                DataFilterModel.prototype.getInfo = function () {
                    return Chart.dataFilterSerializationsInfo;
                };
                return DataFilterModel;
            })();
            Chart.DataFilterModel = DataFilterModel;
            Chart.DefaultDataFilterModel = DataFilterModel;
            var SeriesPointModel = (function (_super) {
                __extends(SeriesPointModel, _super);
                function SeriesPointModel(model, series, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer, Chart.seriesPointSerializationsInfo);
                    this.series = series;
                    this.arrayValueDataMemberNames = series.valueDataMembers().arrayValueDataMemberNames;
                    this._assignValueDataMembers(this, this.valuesSerializable(), null);
                    this._disposables.push(this.series.valueDataMembers.subscribe(function (newValue) { _this.arrayValueDataMemberNames = newValue.arrayValueDataMemberNames; }));
                    this._disposables.push(this.series.valueScaleType.subscribe(function (newValue) {
                        _this._assignValueDataMembers(_this, null, null);
                    }));
                    this.valuesSerializable = ko.computed(function () {
                        return _this.arrayValueDataMemberNames.map(function (name) { return _this[name]; });
                    });
                    this.getInfo = function () {
                        var dataMember = _this.series && _this.series.valueDataMembers();
                        if (!dataMember)
                            return Chart.seriesPointSerializationsInfo;
                        var valueDataMemberInfo = dataMember.getInfo().map(function (info) { return $.extend({}, info, { editor: _this.isDateType ? DevExpress.JS.Widgets.editorTemplates.date : DevExpress.JS.Widgets.editorTemplates.numeric }); });
                        return Chart.seriesPointSerializationsInfo.concat(valueDataMemberInfo);
                    };
                }
                SeriesPointModel.getSerializationValue = function (array, dateConverter) {
                    return array.map(function (item) {
                        var value = ko.unwrap(item);
                        return (value instanceof Date) ? dateConverter(value) : value;
                    });
                };
                SeriesPointModel.createNew = function (series) {
                    return new SeriesPointModel({}, series, new DevExpress.JS.Utils.ModelSerializer());
                };
                SeriesPointModel.valueToJsonObject = function (value) {
                    var result = SeriesPointModel.getSerializationValue(value, Chart.serializeDate);
                    return (result instanceof Array) ? result.join(SeriesPointModel.separator) : result;
                };
                SeriesPointModel.prototype._valueDataMembersToString = function (valueDataMember, isDateType) {
                    var result = [];
                    valueDataMember.arrayValueDataMemberNames.forEach(function (name) {
                        if (isDateType)
                            result.push(Chart.serializeDate(valueDataMember[name]() || ""));
                        result.push(valueDataMember[name]() || "");
                    });
                    return result.join(SeriesPointModel.separator);
                };
                SeriesPointModel.prototype._assignValueDataMembers = function (valueDataMember, value, defaultValue) {
                    var _this = this;
                    var values = (value || "").split(SeriesPointModel.separator);
                    valueDataMember.arrayValueDataMemberNames.forEach(function (name, index) {
                        var newValue = _this.isDateType ? Chart.parseDate(values[index] || defaultValue) : (values[index] || defaultValue);
                        if (valueDataMember[name])
                            valueDataMember[name](newValue);
                        else
                            valueDataMember[name] = ko.observable(newValue);
                    });
                };
                Object.defineProperty(SeriesPointModel.prototype, "isDateType", {
                    get: function () {
                        return this.series.valueScaleType() === "DateTime";
                    },
                    enumerable: true,
                    configurable: true
                });
                SeriesPointModel.separator = ';';
                return SeriesPointModel;
            })(Designer.SerializableModel);
            Chart.SeriesPointModel = SeriesPointModel;
            var SeriesTemplateViewModel = (function (_super) {
                __extends(SeriesTemplateViewModel, _super);
                function SeriesTemplateViewModel(model, serializer, info) {
                    var _this = this;
                    _super.call(this, model, serializer, info);
                    if (this.valueDataMembers) {
                        ko.unwrap(this.valueDataMembers).dispose();
                    }
                    this.viewType = ko.observable(this.view().typeName);
                    this.viewType.subscribe(function (newType) {
                        var newSerializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                        _this.view(SeriesViewViewModel.from({ "@TypeNameSerializable": newType }, newSerializer)());
                    });
                    this._disposables.push(this.view.subscribe(function (newView) {
                        if (_this.viewType() !== newView.typeName) {
                            _this.viewType(newView.typeName);
                        }
                        _this.updateByView(newView);
                    }));
                    this.valueDataMembers = ko.observable(new (viewTypesDataMembers[this.view().typeName] || CommonValueDataMembers)(model["@ValueDataMembersSerializable"] || "", this.valueScaleType));
                    this.dataFilters = DevExpress.JS.Utils.deserializeArray(model.DataFilters, function (item) { return new Chart.DefaultDataFilterModel(item, serializer); });
                    this._disposables.push(ko.computed(function () {
                        _this.dataFilters().forEach(function (dataFilter) {
                            if (!dataFilter["getPath"]) {
                                dataFilter["getPath"] = function (propertyName) {
                                    return _this["getPath"]("argumentDataMember");
                                };
                            }
                        });
                    }));
                    this._disposables.push(this.argumentScaleType.subscribe(function (newVal) {
                        if (newVal !== "Auto" && newVal !== "Qualitative")
                            _this.argumentDataMember("");
                    }));
                    this.updateByView(this.view());
                    this.summaryFunction["getPath"] = function (propertyName) {
                        return _this["getPath"] && _this["getPath"]("summaryFunction") || "";
                    };
                    this.viewBindable = {
                        model: this.view,
                        type: this.viewType
                    };
                }
                SeriesTemplateViewModel.from = function (model, serializer) {
                    return new SeriesTemplateViewModel(model || {}, serializer, Chart.seriesTemplateSerializationsInfo);
                };
                SeriesTemplateViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.seriesTemplateSerializationsInfo, refs);
                };
                SeriesTemplateViewModel.prototype.updateByView = function (view) {
                    if (this.label && this.label.typeNameSerializable) {
                        this.label.typeNameSerializable(mapTypes[view.typeName]);
                    }
                    this.valueDataMembers.peek().dispose();
                    this.valueDataMembers(new (viewTypesDataMembers[view.typeName] || CommonValueDataMembers)(this.valueDataMembers.peek().toString(), this.valueScaleType));
                };
                return SeriesTemplateViewModel;
            })(Designer.SerializableModel);
            Chart.SeriesTemplateViewModel = SeriesTemplateViewModel;
            var SeriesViewModel = (function (_super) {
                __extends(SeriesViewModel, _super);
                function SeriesViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer, Chart.seriesSerializationsInfo);
                    this.isIncompatible = ko.observable(false);
                    Chart.initCollectionItem(this, parent)();
                    this._disposables.push(this["displayName"] = ko.pureComputed(function () {
                        return _this.isIncompatible() ? Designer.getLocalization("(incompatible)", "ChartStringId.IncompatibleSeriesView") + " " + _this["name"]() : _this["name"]();
                    }));
                    this.points = ko.observableArray([]);
                    this._disposables.push(this.points.subscribe(function (newValue) { newValue["owner"] = _this; }));
                    this.points(DevExpress.JS.Utils.deserializeArray(model.Points || [], function (item) { return new SeriesPointModel(item, _this, serializer); })());
                }
                SeriesViewModel.from = function (model, serializer) {
                    return new SeriesViewModel(model || {}, null, serializer);
                };
                SeriesViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.seriesSerializationsInfo, refs);
                };
                SeriesViewModel.getClassName = function (typeName) {
                    return typeName.toLowerCase().split("seriesview")[0];
                };
                SeriesViewModel.prototype.updateByView = function (view) {
                    _super.prototype.updateByView.call(this, view);
                    this.points && this.points([]);
                };
                SeriesViewModel.prefix = "Series";
                return SeriesViewModel;
            })(SeriesTemplateViewModel);
            Chart.SeriesViewModel = SeriesViewModel;
            var SeriesViewViewModel = (function (_super) {
                __extends(SeriesViewViewModel, _super);
                function SeriesViewViewModel(model, serializer) {
                    var _this = this;
                    model["@TypeNameSerializable"] = model["@TypeNameSerializable"] || "SideBySideBarSeriesView";
                    this.getInfo = function () { return _this._getInfo(model["@TypeNameSerializable"]); };
                    _super.call(this, model, serializer);
                    this._createMarkerDependences();
                    this._createLinkOptionsDependences();
                    this["isPropertyDisabled"] = function (propertyName) {
                        return _this._createPropertyDisabledDependence(propertyName, "heightToWidthRatio", _this["heightToWidthRatioAuto"], [true]) ||
                            _this._createPropertyDisabledDependence(propertyName, "minSize", _this["autoSize"], [true]) ||
                            _this._createPropertyDisabledDependence(propertyName, "maxSize", _this["autoSize"], [true]) ||
                            _this._createPropertyDisabledDependence(propertyName, "barDepth", _this["barDepthAuto"], [true]) ||
                            _this._createPropertyDisabledDependence(propertyName, "showFacet", _this["model"], ["Cone", "Pyramid"]);
                    };
                }
                SeriesViewViewModel.from = function (model, serializer) {
                    return ko.observable(new SeriesViewViewModel(model || {}, serializer));
                };
                SeriesViewViewModel.prototype.dispose = function () {
                    this._disposables.forEach(function (x) { return x.dispose(); });
                };
                SeriesViewViewModel.toJson = function (value, serializer, refs) {
                    value = ko.unwrap(value);
                    return serializer.serialize(value, value.getInfo(), refs);
                };
                SeriesViewViewModel.prototype._getInfo = function (typeName) {
                    return [Chart.typeNameSerializable].concat(Chart.viewMapper[typeName]);
                };
                SeriesViewViewModel.prototype._createPropertyDisabledDependence = function (propertyName, depLeftPropertyName, depRightProperty, depValues, reverse) {
                    if (reverse === void 0) { reverse = false; }
                    if (propertyName !== depLeftPropertyName || !depRightProperty)
                        return false;
                    var isDisabled = false;
                    for (var i = 0; i < depValues.length; i++) {
                        if (depRightProperty() === depValues[i]) {
                            isDisabled = true;
                            break;
                        }
                    }
                    return reverse ? !isDisabled : isDisabled;
                };
                SeriesViewViewModel.prototype._createMarkerDependences = function () {
                    var _this = this;
                    ["minValueMarker", "maxValueMarker", "marker1", "marker2", "markerOptions", "lineMarkerOptions", "bubbleMarkerOptions", "pointMarkerOptions"].forEach(function (propertyName) {
                        if (_this[propertyName]) {
                            _this[propertyName].isPropertyDisabled = function (innerName) {
                                return _this._createPropertyDisabledDependence(innerName, "starPointCount", _this[propertyName].kind, ["Star"], true);
                            };
                        }
                    });
                };
                SeriesViewViewModel.prototype._createLinkOptionsDependences = function () {
                    var _this = this;
                    if (!!this["linkOptions"]) {
                        this._disposables.push(this["linkOptions"].color.subscribe(function (newVal) {
                            _this["linkOptions"].colorSource("OwnColor");
                        }));
                    }
                };
                return SeriesViewViewModel;
            })(Designer.SerializableModel);
            Chart.SeriesViewViewModel = SeriesViewViewModel;
            var SeriesLabelViewModel = (function (_super) {
                __extends(SeriesLabelViewModel, _super);
                function SeriesLabelViewModel(model, serializer) {
                    _super.call(this, model, serializer, seriesLabelSerializationsInfo);
                }
                SeriesLabelViewModel.from = function (model, serializer) {
                    return new SeriesLabelViewModel(model || {}, serializer);
                };
                SeriesLabelViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, seriesLabelSerializationsInfo, refs);
                };
                return SeriesLabelViewModel;
            })(Designer.SerializableModel);
            Chart.SeriesLabelViewModel = SeriesLabelViewModel;
            var DiagramViewModel = (function (_super) {
                __extends(DiagramViewModel, _super);
                function DiagramViewModel(model, serializer) {
                    _super.call(this, model, serializer, Chart.diagramSerializationsInfo);
                }
                DiagramViewModel.createDiagram = function (model, type, serializer) {
                    if (serializer === void 0) { serializer = new DevExpress.JS.Utils.ModelSerializer(); }
                    var info = Chart.diagramMapper[type].info;
                    var newDiagram = {
                        getInfo: function () {
                            return info;
                        }
                    };
                    serializer.deserialize(newDiagram, $.extend(model, { "@TypeNameSerializable": Chart.diagramMapper[type].type }));
                    if (info.filter(function (x) { return x.propertyName === Chart.secondaryAxesX.propertyName; }).length > 0) {
                        var createAxes = function (item, parent) { return new Chart.SecondaryAxisViewModel(item, parent, serializer); };
                        newDiagram.secondaryAxesX = Chart.deserializeModelArray(model && model.SecondaryAxesX, createAxes, Chart.SecondaryAxisViewModel.xPrefix);
                        newDiagram.secondaryAxesY = Chart.deserializeModelArray(model && model.SecondaryAxesY, createAxes, Chart.SecondaryAxisViewModel.yPrefix);
                    }
                    if (info.filter(function (x) { return x.propertyName === Chart.panes.propertyName; }).length > 0) {
                        newDiagram.panes = Chart.deserializeModelArray(model && model.Panes, function (item, parent) { return new AdditionalPaneViewModel(item, parent, serializer); }, AdditionalPaneViewModel.prefix);
                    }
                    return newDiagram;
                };
                DiagramViewModel.from = function (model, serializer) {
                    return new DiagramViewModel(model || {}, serializer);
                };
                DiagramViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, null, refs);
                };
                return DiagramViewModel;
            })(Designer.SerializableModel);
            Chart.DiagramViewModel = DiagramViewModel;
            var LegendViewModel = (function (_super) {
                __extends(LegendViewModel, _super);
                function LegendViewModel(model, serializer) {
                    _super.call(this, model, serializer, Chart.legendSerializationsInfo);
                }
                LegendViewModel.from = function (model, serializer) {
                    return new LegendViewModel(model || {}, serializer);
                };
                LegendViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Chart.legendSerializationsInfo, refs);
                };
                return LegendViewModel;
            })(Designer.SerializableModel);
            Chart.LegendViewModel = LegendViewModel;
            var ConstantLineViewModel = (function (_super) {
                __extends(ConstantLineViewModel, _super);
                function ConstantLineViewModel(model, parent, serializer) {
                    _super.call(this, model, parent, serializer, Chart.constantLineSerializationsInfo);
                }
                ConstantLineViewModel.from = function (model, serializer) {
                    return new ConstantLineViewModel(model || {}, null, serializer);
                };
                ConstantLineViewModel.prefix = "Constant Line ";
                return ConstantLineViewModel;
            })(ChartElementCollectionItemBase);
            Chart.ConstantLineViewModel = ConstantLineViewModel;
            var ScaleBreakViewModel = (function (_super) {
                __extends(ScaleBreakViewModel, _super);
                function ScaleBreakViewModel(model, parent, serializer) {
                    _super.call(this, model, parent, serializer, Chart.scaleBreakSerializationsInfo);
                }
                ScaleBreakViewModel.from = function (model, serializer) {
                    return new ScaleBreakViewModel(model || {}, null, serializer);
                };
                ScaleBreakViewModel.prefix = "Scale Break ";
                return ScaleBreakViewModel;
            })(ChartElementCollectionItemBase);
            Chart.ScaleBreakViewModel = ScaleBreakViewModel;
            var StripViewModel = (function (_super) {
                __extends(StripViewModel, _super);
                function StripViewModel(model, parent, serializer) {
                    _super.call(this, model, parent, serializer, Chart.stripSerializationsInfo);
                }
                StripViewModel.from = function (model, serializer) {
                    return new StripViewModel(model || {}, null, serializer);
                };
                StripViewModel.prefix = "Strip ";
                return StripViewModel;
            })(ChartElementCollectionItemBase);
            Chart.StripViewModel = StripViewModel;
            var AdditionalPaneViewModel = (function (_super) {
                __extends(AdditionalPaneViewModel, _super);
                function AdditionalPaneViewModel(model, parent, serializer) {
                    _super.call(this, model, parent, serializer, Chart.additionalPaneSerializationsInfo);
                }
                AdditionalPaneViewModel.from = function (model, serializer) {
                    return new AdditionalPaneViewModel(model || {}, null, serializer);
                };
                AdditionalPaneViewModel.prefix = "Pane ";
                return AdditionalPaneViewModel;
            })(ChartElementCollectionItemBase);
            Chart.AdditionalPaneViewModel = AdditionalPaneViewModel;
            function createInnerActionsWithPopover(text, id, actions) {
                var object = {
                    text: text,
                    imageClassName: "dxrd-image-add",
                    imageTemplateName: "dxrd-svg-operations-add",
                    disabled: ko.observable(false),
                    id: id,
                    _visible: ko.observable(false),
                    popoverVisible: null,
                    togglePopoverVisible: null,
                    closePopover: null,
                    templateName: "dxrd-collectionactions-template",
                    getContainer: function (element, selector) {
                        return $(element).parent().find(selector);
                    },
                    actions: actions
                };
                object.popoverVisible = ko.pureComputed(function () {
                    return object._visible();
                });
                object.togglePopoverVisible = function () {
                    object._visible(!object._visible());
                };
                object.closePopover = function () {
                    object._visible(false);
                };
                return [object];
            }
            ;
            var valueDataMembersSerializationsInfo = [
                { propertyName: "value", displayName: "Value", editor: Chart.editorTemplates.valueDataMember, localizationId: 'ASPxReportsStringId.FilterEditor_Operand_Type_Value' },
            ];
            var valueWeightDataMembersSerializationsInfo = [
                { propertyName: "value", displayName: "Value", editor: Chart.editorTemplates.valueDataMember, localizationId: 'ASPxReportsStringId.FilterEditor_Operand_Type_Value' },
                { propertyName: "weight", displayName: "Weight", editor: Chart.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraPivotGrid.PivotKPIType.Weight' },
            ];
            var value1Value2DataMembersSerializationsInfo = [
                { propertyName: "value1", displayName: "Value 1", editor: Chart.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.ValueLevel.Value_1' },
                { propertyName: "value2", displayName: "Value 2", editor: Chart.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.ValueLevel.Value_2' },
            ];
            var stockDataMembersSerializationsInfo = [
                { propertyName: "low", displayName: "Low", editor: Chart.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.StockLevel.Low' },
                { propertyName: "high", displayName: "High", editor: Chart.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.StockLevel.High' },
                { propertyName: "open", displayName: "Open", editor: Chart.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.StockLevel.Open' },
                { propertyName: "close", displayName: "Close", editor: Chart.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.StockLevel.Close' },
            ];
            var mapTypes = {
                "SideBySideBarSeriesView": "SideBySideBarSeriesLabel",
                "StackedBarSeriesView": "StackedBarSeriesLabel",
                "FullStackedBarSeriesView": "FullStackedBarSeriesLabel",
                "SideBySideStackedBarSeriesView": "StackedBarSeriesLabel",
                "SideBySideFullStackedBarSeriesView": "FullStackedBarSeriesLabel",
                "SideBySideBar3DSeriesView": "Bar3DSeriesLabel",
                "StackedBar3DSeriesView": "StackedBar3DSeriesLabel",
                "FullStackedBar3DSeriesView": "FullStackedBar3DSeriesLabel",
                "SideBySideStackedBar3DSeriesView": "StackedBar3DSeriesLabel",
                "SideBySideFullStackedBar3DSeriesView": "FullStackedBar3DSeriesLabel",
                "ManhattanBarSeriesView": "Bar3DSeriesLabel",
                "PointSeriesView": "PointSeriesLabel",
                "BubbleSeriesView": "BubbleSeriesLabel",
                "LineSeriesView": "PointSeriesLabel",
                "StackedLineSeriesView": "StackedLineSeriesLabel",
                "FullStackedLineSeriesView": "StackedLineSeriesLabel",
                "StepLineSeriesView": "PointSeriesLabel",
                "SplineSeriesView": "PointSeriesLabel",
                "ScatterLineSeriesView": "PointSeriesLabel",
                "SwiftPlotSeriesView": null,
                "Line3DSeriesView": "Line3DSeriesLabel",
                "StackedLine3DSeriesView": "StackedLine3DSeriesLabel",
                "FullStackedLine3DSeriesView": "StackedLine3DSeriesLabel",
                "StepLine3DSeriesView": "Line3DSeriesLabel",
                "Spline3DSeriesView": "Line3DSeriesLabel",
                "PieSeriesView": "PieSeriesLabel",
                "DoughnutSeriesView": "DoughnutSeriesLabel",
                "NestedDoughnutSeriesView": "NestedDoughnutSeriesLabel",
                "Pie3DSeriesView": "Pie3DSeriesLabel",
                "Doughnut3DSeriesView": "Doughnut3DSeriesLabel",
                "FunnelSeriesView": "FunnelSeriesLabel",
                "Funnel3DSeriesView": "Funnel3DSeriesLabel",
                "AreaSeriesView": "PointSeriesLabel",
                "StackedAreaSeriesView": "PointSeriesLabel",
                "FullStackedAreaSeriesView": "FullStackedAreaSeriesLabel",
                "StepAreaSeriesView": "PointSeriesLabel",
                "SplineAreaSeriesView": "PointSeriesLabel",
                "StackedSplineAreaSeriesView": "PointSeriesLabel",
                "FullStackedSplineAreaSeriesView": "FullStackedSplineAreaSeriesLabel",
                "Area3DSeriesView": "Area3DSeriesLabel",
                "StackedArea3DSeriesView": "StackedArea3DSeriesLabel",
                "FullStackedArea3DSeriesView": "FullStackedArea3DSeriesLabel",
                "StepArea3DSeriesView": "Area3DSeriesLabel",
                "SplineArea3DSeriesView": "Area3DSeriesLabel",
                "StackedSplineArea3DSeriesView": "StackedArea3DSeriesLabel",
                "FullStackedSplineArea3DSeriesView": "FullStackedArea3DSeriesLabel",
                "OverlappedRangeBarSeriesView": "RangeBarSeriesLabel",
                "SideBySideRangeBarSeriesView": "RangeBarSeriesLabel",
                "RangeAreaSeriesView": "RangeAreaSeriesLabel",
                "RangeArea3DSeriesView": "RangeArea3DSeriesLabel",
                "RadarPointSeriesView": "RadarPointSeriesLabel",
                "RadarLineSeriesView": "RadarPointSeriesLabel",
                "RadarAreaSeriesView": "RadarPointSeriesLabel",
                "PolarPointSeriesView": "RadarPointSeriesLabel",
                "PolarLineSeriesView": "RadarPointSeriesLabel",
                "PolarAreaSeriesView": "RadarPointSeriesLabel",
                "StockSeriesView": "StockSeriesLabel",
                "CandleStickSeriesView": "StockSeriesLabel",
                "OverlappedGanttSeriesView": "RangeBarSeriesLabel",
                "SideBySideGanttSeriesView": "RangeBarSeriesLabel"
            };
            Chart.diagram = { propertyName: "diagram", modelName: "Diagram", displayName: "Diagram", from: function (val) { return ko.observable(val); }, toJsonObject: DiagramViewModel.toJson, localizationId: 'DevExpress.XtraReports.UI.XRChart.Diagram' };
            var sideBySideEqualBarWidth = { propertyName: "sideBySideEqualBarWidth", modelName: "@SideBySideEqualBarWidth", displayName: "Side By Side Equal Bar Width", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, sideBySideBarDistanceFixed = { propertyName: "sideBySideBarDistanceFixed", modelName: "@SideBySideBarDistanceFixed", displayName: "Side By Side Bar Distance Fixed", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, sideBySideBarDistance = { propertyName: "sideBySideBarDistance", modelName: "@SideBySideBarDistance", displayName: "Side By Side Bar Distance", defaultVal: 0.0, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.seriesPointsSorting = {
                propertyName: "seriesPointsSorting", modelName: "@SeriesPointsSorting", displayName: "Series Points Sorting", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Ascending", displayValue: "Ascending", localizationId: 'DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending' }, { value: "Descending", displayValue: "Descending", localizationId: 'DevExpress.XtraReports.UI.XRColumnSortOrder.Descending' }],
                localizationId: 'DevExpress.XtraCharts.SeriesBase.SeriesPointsSorting' }, Chart.seriesPointsSortingKey = {
                propertyName: "seriesPointsSortingKey", modelName: "@SeriesPointsSortingKey", displayName: "Series Points Sorting Key", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Argument", displayValue: "Argument", localizationId: 'DevExpress.XtraCharts.SeriesSelectionMode.Argument' }, { value: "Value_1", displayValue: "Value_1", localizationId: 'ChartStringId.WizValueLevelValue_1' }, { value: "Value_2", displayValue: "Value_2", localizationId: 'ChartStringId.WizValueLevelValue_2' }, { value: "Value_3", displayValue: "Value_3" }, { value: "Value_4", displayValue: "Value_4" }],
                localizationId: 'DevExpress.XtraCharts.SeriesBase.SeriesPointsSortingKey' }, Chart.legendTextPattern = { propertyName: "legendTextPattern", modelName: "@LegendTextPattern", displayName: "Legend Text Pattern", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.SeriesBase.LegendTextPattern' }, Chart.tag_type = { propertyName: "tag_type", modelName: "@Tag_type", displayName: "Tag_type", editor: DevExpress.JS.Widgets.editorTemplates.text }, Chart.argumentScaleType = { propertyName: "argumentScaleType", modelName: "@ArgumentScaleType", displayName: "Argument Scale Type", defaultVal: "Auto", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.scaleTypeValues, localizationId: 'DevExpress.XtraCharts.SeriesBase.ArgumentScaleType' }, Chart.valueScaleType = {
                propertyName: "valueScaleType", modelName: "@ValueScaleType", displayName: "Value Scale Type", defaultVal: "Numerical", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Numerical", displayValue: "Numerical", localizationId: 'DevExpress.XtraCharts.ScaleType.Numerical' }, { value: "DateTime", displayValue: "DateTime", localizationId: 'DevExpress.XtraTreeList.Data.UnboundColumnType.DateTime' }],
                localizationId: 'DevExpress.XtraCharts.SeriesBase.ValueScaleType' }, Chart.labelsVisibility = { propertyName: "labelsVisibility", modelName: "@LabelsVisibility", displayName: "Labels Visibility", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.SeriesBase.LabelsVisibility' }, Chart.argumentDataMember = { propertyName: "argumentDataMember", modelName: "@ArgumentDataMember", displayName: "Argument Data Member", defaultVal: "", editor: Chart.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.SeriesBase.ArgumentDataMember' }, Chart.valueDataMembersSerializable = { propertyName: "valueDataMembers", modelName: "@ValueDataMembersSerializable", displayName: "Value Data Members", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, from: CommonValueDataMembers.from, toJsonObject: CommonValueDataMembers.toJson, localizationId: 'DevExpress.XtraCharts.SeriesBase.ValueDataMembers' };
            Chart.transparency = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.RadarAreaSeriesView.Transparency' }, Chart.size = { propertyName: "size", modelName: "@Size", displayName: "Size", defaultVal: 2, editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraReports.UI.XRControl.Size' };
            var enabled = { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraReports.UI.EditOptions.Enabled' }, mode = {
                propertyName: "mode", modelName: "@Mode", displayName: "Mode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Count", valuesArray: [{ value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "ThresholdValue", displayValue: "Threshold Value", localizationId: 'DevExpress.XtraCharts.TopNMode.ThresholdValue' }, { value: "ThresholdPercent", displayValue: "Threshold Percent", localizationId: 'DevExpress.XtraCharts.TopNOptions.ThresholdPercent' }],
                localizationId: 'DevExpress.XtraReports.UI.MultiColumn.Mode' }, count = { propertyName: "count", modelName: "@Count", displayName: "Count", defaultVal: 5, editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, showOthers = { propertyName: "showOthers", modelName: "@ShowOthers", displayName: "Show Others", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.TopNOptions.ShowOthers' }, othersArgument = { propertyName: "othersArgument", modelName: "@OthersArgument", displayName: "Others Argument", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.TopNOptions.OthersArgument' }, thresholdValue = { propertyName: "thresholdValue", modelName: "@ThresholdValue", displayName: "Threshold Value", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.TopNMode.ThresholdValue' }, thresholdPercent = { propertyName: "thresholdPercent", modelName: "@ThresholdPercent", displayName: "Threshold Percent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.TopNOptions.ThresholdPercent' };
            Chart.textOrientation = {
                propertyName: "textOrientation", modelName: "@TextOrientation", displayName: "Text Orientation", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Horizontal ", displayValue: "Horizontal", localizationId: 'DevExpress.XtraCharts.TextOrientation.Horizontal' }, { value: "TopToBottom", displayValue: "Top To Bottom", localizationId: 'DevExpress.XtraCharts.TextOrientation.TopToBottom' }, { value: "BottomToTop", displayValue: "Bottom To Top", localizationId: 'DevExpress.XtraCharts.TextOrientation.BottomToTop' }],
                localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.TextOrientation' }, Chart.resolveOverlappingMode = {
                propertyName: "resolveOverlappingMode", modelName: "@ResolveOverlappingMode", displayName: "Resolve Overlapping Mode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }, { value: "HideOverlapped", displayValue: "Hide Overlapped", localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingMode.HideOverlapped' }, { value: "JustifyAroundPoint", displayValue: "Justify Around Point", localizationId: 'DevExpress.XtraCharts.ResolveOverlappingMode.JustifyAroundPoint' }, { value: "JustifyAllAroundPoint", displayValue: "Justify All Around Point", localizationId: 'DevExpress.XtraCharts.ResolveOverlappingMode.JustifyAllAroundPoint' }],
                localizationId: 'DevExpress.XtraCharts.StackedBarTotalLabel.ResolveOverlappingMode' }, Chart.lineColor = { propertyName: "lineColor", modelName: "@LineColor", displayName: "Line Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.LineColor' }, Chart.lineVisibility = { propertyName: "lineVisibility", modelName: "@LineVisibility", displayName: "Line Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.LineVisibility' }, Chart.lineLength = { propertyName: "lineLength", modelName: "@LineLength", displayName: "Line Length", editor: DevExpress.JS.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.LineLength' }, Chart.barPosition = {
                propertyName: "barPosition", modelName: "@Position", displayName: "Position", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Top", displayValue: "Top", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: "Center", displayValue: "Center", localizationId: 'DevExpress.XtraCharts.FunnelSeriesLabelPosition.Center' }, { value: "TopInside", displayValue: "Top Inside", localizationId: 'DevExpress.XtraCharts.BarSeriesLabelPosition.TopInside' }, { value: "BottomInside", displayValue: "Bottom Inside", localizationId: 'DevExpress.XtraCharts.BarSeriesLabelPosition.BottomInside' }],
                localizationId: 'DevExpress.XtraCharts.PointSeriesLabel.Position' }, Chart.showForZeroValues = { propertyName: "showForZeroValues", modelName: "@ShowForZeroValues", displayName: "Show for Zero Values", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.BarSeriesLabel.ShowForZeroValues' };
            var dashStyle = {
                propertyName: "dashStyle", modelName: "@DashStyle", displayName: "Dash Style", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Dash", displayValue: "Dash", localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' }, { value: "Dot", displayValue: "Dot", localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' }, { value: "DashDot", displayValue: "Dash-Dot", localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.DashDot' }, { value: "DashDotDot", displayValue: "Dash-Dot-Dot", localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.DashDotDot' }],
                localizationId: 'DevExpress.XtraCharts.LineStyle.DashStyle' };
            var markerVisibility = { propertyName: "markerVisibility", modelName: "@MarkerVisibility", displayName: "Marker Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Chart.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.RadarLineSeriesView.MarkerVisibility' }, markerKind = {
                propertyName: "kind", modelName: "@Kind", displayName: "Kind", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Square", displayValue: "Square", localizationId: 'DevExpress.XtraCharts.MarkerKind.Square' }, { value: "Diamond", displayValue: "Diamond", localizationId: 'DevExpress.XtraCharts.MarkerKind.Diamond' }, { value: "Triangle", displayValue: "Triangle", localizationId: 'DevExpress.XtraCharts.MarkerKind.Triangle' }, { value: "InvertedTriangle", displayValue: "Inverted Triangle", localizationId: 'DevExpress.XtraCharts.MarkerKind.InvertedTriangle' }, { value: "Circle", displayValue: "Circle", localizationId: 'DevExpress.XtraCharts.CircleEasingFunction' }, { value: "Plus", displayValue: "Plus", localizationId: 'DevExpress.XtraCharts.MarkerKind.Plus' }, { value: "Cross", displayValue: "Cross", localizationId: 'DevExpress.XtraCharts.MarkerKind.Cross' }, { value: "Star", displayValue: "Star", localizationId: 'DevExpress.XtraCharts.MarkerKind.Star' }, { value: "Pentagon", displayValue: "Pentagon", localizationId: 'DevExpress.XtraCharts.MarkerKind.Pentagon' }, { value: "Hexagon", displayValue: "Hexagon", localizationId: 'DevExpress.XtraCharts.MarkerKind.Hexagon' }],
                localizationId: 'DevExpress.XtraCharts.MarkerBase.Kind' }, borderVisible = { propertyName: "borderVisible", modelName: "@BorderVisible", displayName: "Border Visible", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, localizationId: 'DevExpress.XtraCharts.MarkerBase.BorderVisible' };
            Chart.direction = {
                propertyName: "direction", modelName: "@Direction", displayName: "Direction", defaultVal: "TopToBottom", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "TopToBottom", displayValue: "Top To Bottom", localizationId: 'DevExpress.XtraCharts.TextOrientation.TopToBottom' }, { value: "BottomToTop", displayValue: "Bottom To Top", localizationId: 'DevExpress.XtraCharts.TextOrientation.BottomToTop' }, { value: "LeftToRight", displayValue: "Left To Right" }, { value: "RightToLeft", displayValue: "Right To Left" }],
                localizationId: 'DevExpress.XtraReports.UI.MultiColumn.Direction' }, Chart.alignmentVertical = {
                propertyName: "alignmentVertical", modelName: "@AlignmentVertical", displayName: "Vertical Alignment", defaultVal: "Top", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Top", displayValue: "Top", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: "TopOutside", displayValue: "Top Outside", localizationId: 'DevExpress.XtraCharts.LegendAlignmentVertical.TopOutside' }, { value: "Center", displayValue: "Center", localizationId: 'DevExpress.XtraCharts.FunnelSeriesLabelPosition.Center' }, { value: "Bottom", displayValue: "Bottom", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Bottom' }, { value: "BottomOutside", displayValue: "Bottom Outside", localizationId: 'DevExpress.XtraCharts.LegendAlignmentVertical.BottomOutside' }],
                localizationId: 'DevExpress.XtraCharts.Legend.AlignmentVertical' }, Chart.alignmentHorizontal = {
                propertyName: "alignmentHorizontal", modelName: "@AlignmentHorizontal", displayName: "Horizontal Alignment", defaultVal: "RightOutside", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Left", displayValue: "Left", localizationId: 'DevExpress.XtraReports.UI.XRControl.Left' }, { value: "LeftOutside", displayValue: "Left Outside", localizationId: 'DevExpress.XtraCharts.LegendAlignmentHorizontal.LeftOutside' }, { value: "Center", displayValue: "Center", localizationId: 'DevExpress.XtraCharts.FunnelSeriesLabelPosition.Center' }, { value: "Right", displayValue: "Right", localizationId: 'DevExpress.XtraCharts.RectangleIndents.Right' }, { value: "RightOutside", displayValue: "Right Outside", localizationId: 'DevExpress.XtraCharts.LegendAlignmentHorizontal.RightOutside' }],
                localizationId: 'DevExpress.XtraCharts.Legend.AlignmentHorizontal' };
            Chart.dock = {
                propertyName: "dock", modelName: "@Dock", displayName: "Dock", defaultVal: "Top", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Top", displayValue: "Top", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: "Bottom", displayValue: "Bottom", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Bottom' }, { value: "Left", displayValue: "Left", localizationId: 'DevExpress.XtraReports.UI.XRControl.Left' }, { value: "Right", displayValue: "Right", localizationId: 'DevExpress.XtraCharts.RectangleIndents.Right' }],
                localizationId: 'DevExpress.XtraCharts.DockableTitle.Dock' };
            Chart.chartTitleText = { propertyName: "text", modelName: "@Text", displayName: "Text", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'ASPxReportsStringId.ExportName_txt' };
            Chart.padding = { propertyName: "chartPadding", modelName: "Padding", displayName: "Padding", info: [Chart.left, Chart.right, Chart.top, Chart.bottom], editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRBarCode.PaddingInfo' };
            var lineMarkerOptionsSerializationsInfo = [Chart.color, Chart.colorEach, markerVisibility], lineMarker = { propertyName: "lineMarker", modelName: "LineMarker", displayName: "Line Marker", info: lineMarkerOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var topNOptionsSerializationsInfo = [enabled, mode, count, thresholdPercent, thresholdValue, showOthers, othersArgument], topNOptions = { propertyName: "topNOptions", modelName: "TopNOptions", displayName: "Top N Options", info: topNOptionsSerializationsInfo, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.SeriesBase.TopNOptions' };
            var lineStyleSerializationsInfo = [Chart.thickness, dashStyle], lineStyle = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", info: lineStyleSerializationsInfo, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRShape.LineStyle' };
            var seriesLabelSerializationsInfo = [Chart.typeNameNotShow, Chart.textPattern, Chart.textAlignment, Chart.maxLineCount, Chart.maxWidth, Chart.textOrientation, Chart.resolveOverlappingMode,
                Chart.lineColor, Chart.lineVisibility, Chart.lineLength, Chart.antialiasing, Chart.backColor, Chart.textColor, Chart.barPosition, Chart.showForZeroValues, Chart.font8, lineStyle, Chart.border];
            Chart.seriesLabel = { propertyName: "label", modelName: "Label", displayName: "Label", info: seriesLabelSerializationsInfo, defaultVal: {}, from: SeriesLabelViewModel.from, toJsonObject: SeriesLabelViewModel.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
            var autoBindingSettingsEnabled = { propertyName: "autoBindingSettingsEnabled", modelName: "@AutoBindingSettingsEnabled", displayName: "Auto Binding Settings Enabled", localizationId: "DevExpress.XtraCharts.PivotGridDataSourceOptions.AutoBindingSettingsEnabled", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool }, autoLayoutSettingsEnabled = { propertyName: "autoLayoutSettingsEnabled", modelName: "@AutoLayoutSettingsEnabled", displayName: "Auto Layout Settings Enabled", localizationId: "DevExpress.XtraCharts.PivotGridDataSourceOptions.AutoLayoutSettingsEnabled", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Chart.pivotGridDataSourceOptions = { propertyName: "pivotGridDataSourceOptions", modelName: "PivotGridDataSourceOptions", displayName: "Pivot Grid Data Source Options", localizationId: "DevExpress.XtraReports.UI.XRChart.PivotGridDataSourceOptions", info: [autoBindingSettingsEnabled, autoLayoutSettingsEnabled], editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var dataFilters = {
                modelName: "DataFilters", displayName: "Data Filters", propertyName: "dataFilters",
                editor: DevExpress.JS.Widgets.editorTemplates.commonCollection, array: true, addHandler: DataFilterModel.createNew, template: '#dxrd-collectionItemWithAccordion',
                localizationId: 'DevExpress.XtraCharts.SeriesBase.DataFilters' };
            var dataFiltersConjunctionMode = {
                modelName: "@DataFiltersConjunctionMode", defaultVal: "And", displayName: "Conjunction Mode", propertyName: "dataFiltersConjunctionMode", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [{ value: "And", displayValue: "And", localizationId: 'DevExpress.XtraCharts.ConjunctionTypes.And' }, { value: "Or", displayValue: "Or", localizationId: 'DevExpress.XtraCharts.ConjunctionTypes.Or' }],
                localizationId: 'DevExpress.XtraCharts.DataFilterCollection.ConjunctionMode' };
            Chart.summaryFunctionSerializationInfo = {
                propertyName: "summaryFunction", displayName: "Summary Function", modelName: "@SummaryFunction", from: Chart.SummaryFunctionModel.from, toJsonObject: Chart.SummaryFunctionModel.toJson, editor: Chart.editorTemplates.summaryFunction,
                localizationId: 'DevExpress.XtraCharts.SeriesBase.SummaryFunction' };
            var colorDataMember = { propertyName: "colorDataMember", displayName: "Color Data Member", defaultVal: "", modelName: "@ColorDataMember", editor: ko.bindingHandlers["displayNameExtender"] ? Designer.Widgets.editorTemplates.field : Chart.editorTemplates.fieldChart, localizationId: 'DevExpress.XtraCharts.SeriesBase.ColorDataMember' };
            var valuesSerializable = { propertyName: "valuesSerializable", modelName: "@ValuesSerializable", from: function (val) { return ko.observable(val); }, toJsonObject: SeriesPointModel.valueToJsonObject }, argumentSerializable = { propertyName: "argumentSerializable", modelName: "@ArgumentSerializable", displayName: 'Argument', localizationId: 'DevExpress.XtraCharts.SeriesPoint.Argument', editor: DevExpress.JS.Widgets.editorTemplates.text }, colorSerializable = { propertyName: "colorSerializable", modelName: "@ColorSerializable", displayName: 'Color', localizationId: 'DevExpress.XtraCharts.SeriesPoint.Color', from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor };
            Chart.seriesPointSerializationsInfo = [argumentSerializable, valuesSerializable, colorSerializable];
            Chart.points = {
                propertyName: "points", modelName: "Points", displayName: 'Points', localizationId: 'DevExpress.XtraCharts.Series.Points',
                editor: Chart.editorTemplates.points, array: true
            };
            Chart.createViewsArray = function (limitation) {
                var array = [];
                array.push({ value: "SideBySideBarSeriesView", displayValue: "Bar", localizationId: 'DevExpress.Sparkline.SparklineViewType.Bar' });
                array.push({ value: "StackedBarSeriesView", displayValue: "Bar Stacked", localizationId: 'ChartStringId.SvnStackedBar' });
                array.push({ value: "FullStackedBarSeriesView", displayValue: "Bar Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedBar' });
                array.push({ value: "SideBySideStackedBarSeriesView", displayValue: "Side By Side Bar Stacked", localizationId: 'ChartStringId.SvnSideBySideStackedBar' });
                array.push({ value: "SideBySideFullStackedBarSeriesView", displayValue: "Side By Side Bar Stacked 100%", localizationId: 'ChartStringId.SvnSideBySideFullStackedBar' });
                if (!limitation) {
                    array.push({ value: "SideBySideBar3DSeriesView", displayValue: "Bar 3D", localizationId: 'ChartStringId.SvnSideBySideBar3D' });
                    array.push({ value: "StackedBar3DSeriesView", displayValue: "Bar 3D Stacked", localizationId: 'ChartStringId.SvnStackedBar3D' });
                    array.push({ value: "FullStackedBar3DSeriesView", displayValue: "Bar 3D Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedBar3D' });
                    array.push({ value: "SideBySideStackedBar3DSeriesView", displayValue: "Side By Side Bar 3D Stacked " });
                    array.push({ value: "SideBySideFullStackedBar3DSeriesView", displayValue: "Side By Side Bar 3D Stacked 100%", localizationId: 'ChartStringId.SvnSideBySideFullStackedBar3D' });
                    array.push({ value: "ManhattanBarSeriesView", displayValue: "Manhattan Bar", localizationId: 'ChartStringId.SvnManhattanBar' });
                }
                array.push({ value: "PointSeriesView", displayValue: "Point", localizationId: 'ASPxReportsStringId.ReportDesigner_FontOptions_Unit_Point' });
                array.push({ value: "BubbleSeriesView", displayValue: "Bubble", localizationId: 'ChartStringId.SvnBubble' });
                array.push({ value: "LineSeriesView", displayValue: "Line", localizationId: 'DevExpress.XtraReports.UI.XRLine' });
                array.push({ value: "StackedLineSeriesView", displayValue: "Line Stacked", localizationId: 'ChartStringId.SvnStackedLine' });
                array.push({ value: "FullStackedLineSeriesView", displayValue: "Line Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedLine' });
                array.push({ value: "StepLineSeriesView", displayValue: "Step Line", localizationId: 'ChartStringId.SvnStepLine' });
                array.push({ value: "SplineSeriesView", displayValue: "Spline", localizationId: 'ChartStringId.SvnSpline' });
                array.push({ value: "ScatterLineSeriesView", displayValue: "Scatter Line", localizationId: 'ChartStringId.CmdCreateScatterLineChartMenuCaption' });
                array.push({ value: "SwiftPlotSeriesView", displayValue: "Swift Plot", localizationId: 'ChartStringId.SvnSwiftPlot' });
                if (!limitation) {
                    array.push({ value: "Line3DSeriesView", displayValue: "Line 3D", localizationId: 'ChartStringId.SvnLine3D' });
                    array.push({ value: "StackedLine3DSeriesView", displayValue: "Line 3D Stacked", localizationId: 'ChartStringId.SvnStackedLine3D' });
                    array.push({ value: "FullStackedLine3DSeriesView", displayValue: "Line 3D Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedLine3D' });
                    array.push({ value: "StepLine3DSeriesView", displayValue: "Step Line 3D", localizationId: 'ChartStringId.SvnStepLine3D' });
                    array.push({ value: "Spline3DSeriesView", displayValue: "Spline 3D", localizationId: 'ChartStringId.SvnSpline3D' });
                }
                array.push({ value: "PieSeriesView", displayValue: "Pie", localizationId: 'ChartStringId.CmdCreatePieChartMenuCaption' });
                array.push({ value: "DoughnutSeriesView", displayValue: "Doughnut", localizationId: 'ChartStringId.CmdCreateDoughnutChartMenuCaption' });
                array.push({ value: "NestedDoughnutSeriesView", displayValue: "Nested Doughnut", localizationId: 'ChartStringId.CmdCreateNestedDoughnutChartMenuCaption' });
                if (!limitation) {
                    array.push({ value: "Pie3DSeriesView", displayValue: "Pie 3D", localizationId: 'ChartStringId.SvnPie3D' });
                    array.push({ value: "Doughnut3DSeriesView", displayValue: "Doughnut 3D", localizationId: 'ChartStringId.SvnDoughnut3D' });
                }
                array.push({ value: "FunnelSeriesView", displayValue: "Funnel", localizationId: 'ChartStringId.SvnFunnel' });
                if (!limitation) {
                    array.push({ value: "Funnel3DSeriesView", displayValue: "Funnel 3D", localizationId: 'ChartStringId.SvnFunnel3D' });
                }
                array.push({ value: "AreaSeriesView", displayValue: "Area", localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsDataField.Area' });
                array.push({ value: "StackedAreaSeriesView", displayValue: "Area Stacked", localizationId: 'ChartStringId.SvnStackedArea' });
                array.push({ value: "FullStackedAreaSeriesView", displayValue: "Area Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedArea' });
                array.push({ value: "StepAreaSeriesView", displayValue: "Step Area", localizationId: 'ChartStringId.SvnStepArea' });
                array.push({ value: "SplineAreaSeriesView", displayValue: "Spline Area", localizationId: 'ChartStringId.SvnSplineArea' });
                array.push({ value: "StackedSplineAreaSeriesView", displayValue: "Spline Area Stacked", localizationId: 'ChartStringId.SvnSplineStackedArea' });
                array.push({ value: "FullStackedSplineAreaSeriesView", displayValue: "Spline Area Stacked 100%", localizationId: 'ChartStringId.SvnSplineFullStackedArea' });
                if (!limitation) {
                    array.push({ value: "Area3DSeriesView", displayValue: "Area 3D", localizationId: 'ChartStringId.SvnArea3D' });
                    array.push({ value: "StackedArea3DSeriesView", displayValue: "Area 3D Stacked", localizationId: 'ChartStringId.SvnStackedArea3D' });
                    array.push({ value: "FullStackedArea3DSeriesView", displayValue: "Area 3D Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedArea3D' });
                    array.push({ value: "StepArea3DSeriesView", displayValue: "Step 3D Area" });
                    array.push({ value: "SplineArea3DSeriesView", displayValue: "Spline 3D Area" });
                    array.push({ value: "StackedSplineArea3DSeriesView", displayValue: "Spline Area 3D Stacked", localizationId: 'ChartStringId.SvnSplineAreaStacked3D' });
                    array.push({ value: "FullStackedSplineArea3DSeriesView", displayValue: "Spline Area 3D Stacked 100%", localizationId: 'ChartStringId.SvnSplineAreaFullStacked3D' });
                }
                array.push({ value: "OverlappedRangeBarSeriesView", displayValue: "Range Bar", localizationId: 'ChartStringId.SvnOverlappedRangeBar' });
                array.push({ value: "SideBySideRangeBarSeriesView", displayValue: "Side By Side Range Bar", localizationId: 'ChartStringId.SvnSideBySideRangeBar' });
                array.push({ value: "RangeAreaSeriesView", displayValue: "Range Area", localizationId: 'ChartStringId.SvnRangeArea' });
                if (!limitation) {
                    array.push({ value: "RangeArea3DSeriesView", displayValue: "Range Area 3D", localizationId: 'ChartStringId.SvnRangeArea3D' });
                }
                array.push({ value: "RadarPointSeriesView", displayValue: "Radar Point", localizationId: 'ChartStringId.SvnRadarPoint' });
                array.push({ value: "RadarLineSeriesView", displayValue: "Radar Line", localizationId: 'ChartStringId.SvnRadarLine' });
                array.push({ value: "RadarAreaSeriesView", displayValue: "Radar Area", localizationId: 'ChartStringId.CmdCreateRadarAreaChartMenuCaption' });
                array.push({ value: "PolarPointSeriesView", displayValue: "Polar Point", localizationId: 'ChartStringId.SvnPolarPoint' });
                array.push({ value: "PolarLineSeriesView", displayValue: "Polar Line", localizationId: 'ChartStringId.CmdCreatePolarLineChartMenuCaption' });
                array.push({ value: "PolarAreaSeriesView", displayValue: "Polar Area", localizationId: 'ChartStringId.SvnPolarArea' });
                array.push({ value: "StockSeriesView", displayValue: "Stock Series" });
                array.push({ value: "CandleStickSeriesView", displayValue: "Candle Stick", localizationId: 'ChartStringId.CmdCreateCandleStickChartMenuCaption' });
                array.push({ value: "OverlappedGanttSeriesView", displayValue: "Gantt", localizationId: 'ChartStringId.CmdGanttGroupPlaceHolderMenuCaption' });
                array.push({ value: "SideBySideGanttSeriesView", displayValue: "Side By Side Gantt", localizationId: 'ChartStringId.SvnSideBySideGantt' });
                return array;
            };
            Chart.view = {
                propertyName: "view", modelName: "View", displayName: "View", defaultVal: {},
                from: SeriesViewViewModel.from, toJsonObject: SeriesViewViewModel.toJson,
                localizationId: 'DevExpress.XtraReports.UI.XRSparkline.View' }, Chart.viewBindableSerializationInfo = {
                propertyName: "viewBindable", displayName: "View", editor: Chart.editorTemplates.views, valuesArray: Chart.createViewsArray(Chart["limitation"]),
                localizationId: 'DevExpress.XtraReports.UI.XRSparkline.View' }, Chart.seriesTemplateSerializationsInfo = [Chart.viewBindableSerializationInfo, Chart.view, Chart.argumentDataMember, Chart.valueDataMembersSerializable, colorDataMember, Chart.argumentScaleType, Chart.seriesPointsSorting, Chart.seriesPointsSortingKey, Chart.valueScaleType, Chart.checkableInLegend, Chart.checkedInLegend, Chart.showInLegend, Chart.legendName, Chart.legendText, Chart.legendTextPattern, Chart.labelsVisibility, dataFiltersConjunctionMode, Chart.summaryFunctionSerializationInfo, dataFilters, Chart.seriesLabel, topNOptions, Chart.visible], Chart.seriesTemplate = { propertyName: "seriesTemplate", modelName: "SeriesTemplate", displayName: "Series Template", localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesTemplate', info: Chart.seriesTemplateSerializationsInfo, from: SeriesTemplateViewModel.from, toJsonObject: SeriesTemplateViewModel.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.seriesSerializationsInfo = [Chart.name, Chart.points].concat(Chart.seriesTemplateSerializationsInfo), Chart.seriesSerializable = { propertyName: "series", modelName: "SeriesSerializable", displayName: "Series", array: true, editor: Chart.editorTemplates.collection, localizationId: 'DevExpress.XtraReports.UI.XRChart.Series' }, Chart.seriesDataMember = { propertyName: "seriesDataMember", modelName: "@SeriesDataMember", displayName: "Series Data Member", editor: ko.bindingHandlers["displayNameExtender"] ? Designer.Widgets.editorTemplates.field : Chart.editorTemplates.fieldChart, localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesDataMember' }, Chart.dataContainerSerializationsInfo = [Chart.seriesDataMember, Chart.seriesSerializable, Chart.seriesTemplate, Chart.dataMember, Chart.pivotGridDataSourceOptions], Chart.dataContainer = { propertyName: "dataContainer", modelName: "DataContainer", displayName: "Data Container", info: Chart.dataContainerSerializationsInfo, from: DataContainerViewModel.from, toJsonObject: DataContainerViewModel.toJson, editor: Designer.Widgets.editorTemplates.objecteditorCustom };
            Chart.titleSerializationsInfo = [Chart.chartTitleText, Chart.textColor, Chart.dock, Chart.titleAlignment, Chart.visibility, Chart.font18], Chart.titles = { propertyName: "titles", modelName: "Titles", displayName: "Titles", localizationId: 'DevExpress.XtraReports.UI.XRChart.Titles', array: true, editor: Chart.editorTemplates.collection };
            var markerMode = {
                propertyName: "markerMode", modelName: "@MarkerMode", displayName: 'Marker Mode', localizationId: 'DevExpress.XtraCharts.Legend.MarkerMode', defaultVal: "Marker", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Marker", displayValue: Designer.getLocalization('Marker', 'DevExpress.XtraCharts.LegendMarkerMode.Marker') }, { value: "CheckBox", displayValue: Designer.getLocalization('Check Box', 'DevExpress.XtraCharts.LegendMarkerMode.CheckBox') }, { value: "CheckBoxAndMarker", displayValue: Designer.getLocalization('Check Box and Marker', 'DevExpress.XtraCharts.LegendMarkerMode.CheckBoxAndMarker') }, { value: "MarkerAndCheckBox", displayValue: Designer.getLocalization('Marker and Check Box', 'DevExpress.XtraCharts.LegendMarkerMode.MarkerAndCheckBox') }, { value: "None", displayValue: Designer.getLocalization('None', 'DevExpress.XtraCharts.LegendMarkerMode.None') }]
            }, markerOffset = { propertyName: "markerOffset", modelName: "@MarkerOffset", displayName: 'Marker Offset', localizationId: 'DevExpress.XtraCharts.Legend.MarkerOffset', defaultVal: 2, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Chart.legendSerializationsInfo = [Chart.textColor, Chart.backColor, Chart.direction, Chart.alignmentVertical, Chart.alignmentHorizontal, Chart.visibility, markerMode, markerOffset, Chart.border, Chart.margin, Chart.padding, Chart.font8], Chart.legend = { propertyName: "legend", modelName: "Legend", displayName: "Legend", localizationId: 'DevExpress.XtraCharts.Legend', info: Chart.legendSerializationsInfo, from: LegendViewModel.from, toJsonObject: LegendViewModel.toJson, defaultVal: {}, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Chart.additionalLegendSerializationsInfo = [Chart.name].concat(Chart.legendSerializationsInfo), Chart.legends = { propertyName: "legends", modelName: "Legends", displayName: "Legends", localizationId: 'DevExpress.XtraReports.UI.XRChart.Legends', array: true, editor: Chart.editorTemplates.collection };
            Chart.appearanceName = {
                propertyName: "appearanceName", modelName: "@AppearanceNameSerializable", displayName: "Appearance Name", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Nature Colors", displayValue: "Nature Colors", localizationId: 'ChartStringId.AppNatureColors' }, { value: "Pastel Kit", displayValue: "Pastel Kit", localizationId: 'ChartStringId.AppPastelKit' }, { value: "In A Fog", displayValue: "In A Fog", localizationId: 'ChartStringId.AppInAFog' }, { value: "Terracotta Pie", displayValue: "Terracotta Pie", localizationId: 'ChartStringId.PltTerracottaPie' }, { value: "Northern Lights", displayValue: "Northern Lights", localizationId: 'ChartStringId.PltNorthernLights' }, { value: "Chameleon", displayValue: "Chameleon", localizationId: 'ChartStringId.AppChameleon' }, { value: "The Trees", displayValue: "The Trees", localizationId: 'ChartStringId.PltTheTrees' }, { value: "Light", displayValue: "Light", localizationId: 'ChartStringId.AppLight' }, { value: "Gray", displayValue: "Gray", localizationId: 'ChartStringId.AppGray' }, { value: "Dark", displayValue: "Dark", localizationId: 'ChartStringId.AppDark' }, { value: "Dark Flat", displayValue: "Dark Flat", localizationId: 'ChartStringId.AppDarkFlat' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }],
                localizationId: 'DevExpress.XtraReports.UI.XRChart.AppearanceName' }, Chart.paletteName = {
                propertyName: "paletteName", modelName: "@PaletteName", displayName: "Palette Name", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }, { value: "Nature Colors", displayValue: "Nature Colors", localizationId: 'ChartStringId.AppNatureColors' }, { value: "Pastel Kit", displayValue: "Pastel Kit", localizationId: 'ChartStringId.AppPastelKit' }, { value: "In A Fog", displayValue: "In A Fog", localizationId: 'ChartStringId.AppInAFog' }, { value: "Terracotta Pie", displayValue: "Terracotta Pie", localizationId: 'ChartStringId.PltTerracottaPie' }, { value: "Northern Lights", displayValue: "Northern Lights", localizationId: 'ChartStringId.PltNorthernLights' }, { value: "Chameleon", displayValue: "Chameleon", localizationId: 'ChartStringId.AppChameleon' }, { value: "The Trees", displayValue: "The Trees", localizationId: 'ChartStringId.PltTheTrees' }, { value: "Mixed", displayValue: "Mixed", localizationId: 'ChartStringId.PltMixed' }, { value: "Office", displayValue: "Office", localizationId: 'ChartStringId.PltOffice' }, { value: "Black and White", displayValue: "Black and White", localizationId: 'ChartStringId.PltBlackAndWhite' }, { value: "Grayscale", displayValue: "Grayscale", localizationId: 'ChartStringId.PltGrayscale' }, { value: "Apex", displayValue: "Apex", localizationId: 'ChartStringId.PltApex' }, { value: "Aspect", displayValue: "Aspect", localizationId: 'ChartStringId.PltAspect' }, { value: "Civic", displayValue: "Civic", localizationId: 'ChartStringId.PltCivic' }, { value: "Concourse", displayValue: "Concourse", localizationId: 'ChartStringId.PltConcourse' }, { value: "Equity", displayValue: "Equity", localizationId: 'ChartStringId.PltEquity' }, { value: "Flow", displayValue: "Flow", localizationId: 'ChartStringId.PltFlow' }, { value: "Foundry", displayValue: "Foundry", localizationId: 'ChartStringId.PltFoundry' }, { value: "Median", displayValue: "Median", localizationId: 'DevExpress.XtraReports.UI.SortingSummaryFunction.Median' }, { value: "Metro", displayValue: "Metro", localizationId: 'ChartStringId.PltMetro' }, { value: "Module", displayValue: "Module", localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Module' }, { value: "Opulent", displayValue: "Opulent", localizationId: 'ChartStringId.PltOpulent' }, { value: "Oriel", displayValue: "Oriel", localizationId: 'ChartStringId.PltOriel' }, { value: "Origin", displayValue: "Origin", localizationId: 'ChartStringId.PltOrigin' }, { value: "Paper", displayValue: "Paper", localizationId: 'ChartStringId.PltPaper' }, { value: "Solstice", displayValue: "Solstice", localizationId: 'ChartStringId.PltSolstice' }, { value: "Technic", displayValue: "Technic", localizationId: 'ChartStringId.PltTechnic' }, { value: "Trek", displayValue: "Trek", localizationId: 'ChartStringId.PltTrek' }, { value: "Urban", displayValue: "Urban", localizationId: 'ChartStringId.PltUrban' }, { value: "Verve", displayValue: "Verve", localizationId: 'ChartStringId.PltVerve' }, { value: "Office2013", displayValue: "Office2013" }, { value: "Blue Warm", displayValue: "Blue Warm", localizationId: 'ChartStringId.PltBlueWarm' }, { value: "Blue", displayValue: "Blue", localizationId: 'ChartStringId.PltBlue' }, { value: "Blue II", displayValue: "Blue II", localizationId: 'ChartStringId.PltBlueII' }, { value: "Blue Green", displayValue: "Blue Green", localizationId: 'ChartStringId.PltBlueGreen' }, { value: "Green", displayValue: "Green", localizationId: 'ChartStringId.PltGreen' }, { value: "Green Yellow", displayValue: "Green Yellow", localizationId: 'ChartStringId.PltGreenYellow' }, { value: "Yellow", displayValue: "Yellow", localizationId: 'ChartStringId.PltYellow' }, { value: "Yellow Orange", displayValue: "Yellow Orange", localizationId: 'ChartStringId.PltYellowOrange' }, { value: "Orange", displayValue: "Orange", localizationId: 'ChartStringId.PltOrange' }, { value: "Orange Red", displayValue: "Orange Red", localizationId: 'ChartStringId.PltOrangeRed' }, { value: "Red Orange", displayValue: "Red Orange", localizationId: 'ChartStringId.PltRedOrange' }, { value: "Red", displayValue: "Red", localizationId: 'ChartStringId.PltRed' }, { value: "Red Violet", displayValue: "Red Violet", localizationId: 'ChartStringId.PltRedViolet' }, { value: "Violet", displayValue: "Violet", localizationId: 'ChartStringId.PltViolet' }, { value: "Violet II", displayValue: "Violet II", localizationId: 'ChartStringId.PltVioletII' }, { value: "Marquee", displayValue: "Marquee", localizationId: 'ChartStringId.PltMarquee' }, { value: "Slipstream", displayValue: "Slipstream", localizationId: 'ChartStringId.PltSlipstream' }],
                localizationId: 'DevExpress.XtraReports.UI.XRChart.PaletteName' };
            Chart.chartSerializationsInfo = [Chart.appearanceName, Chart.paletteName, Chart.dataContainer, Chart.diagram, Chart.titles, Chart.legend, Chart.legends], Chart.chart = { propertyName: "chart", modelName: "Chart", displayName: "Chart", from: ChartViewModel.from, toJsonObject: ChartViewModel.toJson, localizationId: 'DevExpress.XtraReports.UI.XRChart' };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="chart.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var ChartControlViewModel = (function (_super) {
                __extends(ChartControlViewModel, _super);
                function ChartControlViewModel(options) {
                    var _this = this;
                    _super.call(this);
                    this.chart = options.chart ? options.chart : new Chart.ChartViewModel(options.chartSource, new DevExpress.JS.Utils.ModelSerializer());
                    this.dataSource = options.dataSource;
                    this._initChartElementFunctions();
                    ["seriesDataMember", "dataMember"].forEach(function (val) {
                        _this[val] = ko.computed({
                            read: function () {
                                return _this.chart.dataContainer[val]();
                            }, write: function (newVal) {
                                _this.chart.dataContainer[val](newVal);
                            }
                        });
                    });
                }
                ChartControlViewModel.prototype.getInfo = function () {
                    return Chart.chartControlSerializationsInfo;
                };
                ChartControlViewModel.prototype.getControlFactory = function () {
                    return Chart.controlsFactory;
                };
                ChartControlViewModel.prototype.isSeriesPropertyDisabled = function (name) {
                    if (!this.dataSource()) {
                        return name === "argumentDataMember" || name === "valueDataMembers" || name === "colorDataMember";
                    }
                };
                ChartControlViewModel.prototype.isSeriesTemplatePropertyDisabled = function (name) {
                    if (!this.dataSource()) {
                        return name === "argumentDataMember" || name === "valueDataMembers" || name === "valueScaleType" || name === "argumentScaleType";
                    }
                };
                ChartControlViewModel.prototype._initSeries = function (series) {
                    var _this = this;
                    series["getPath"] = function (propertyName) {
                        if (propertyName === "argumentDataMember" || propertyName === "colorDataMember" || propertyName === "summaryFunction") {
                            return _this.getPath("seriesDataMember");
                        }
                    };
                    series["isPropertyDisabled"] = function (name) {
                        return _this.isSeriesPropertyDisabled(name);
                    };
                    series.valueDataMembers()["getPath"] = function (propertyName) {
                        return _this.getPath("seriesDataMember");
                    };
                    series._disposables.push(series.valueDataMembers.subscribe(function (newVal) {
                        newVal["getPath"] = function (propertyName) {
                            return _this.getPath("seriesDataMember");
                        };
                    }));
                };
                ChartControlViewModel.prototype._initChartElementFunctions = function () {
                    var _this = this;
                    this.chart.dataContainer.series().forEach(function (series) { return _this._initSeries(series); });
                    this._disposables.push(this.chart.dataContainer.series.subscribe(function (args) {
                        if (args[0].status === "added") {
                            _this._initSeries(args[0].value);
                        }
                    }, null, "arrayChange"));
                    this.chart.dataContainer.seriesTemplate["getPath"] = function (propertyName) {
                        return _this.getPath("seriesDataMember");
                    };
                    this.chart.dataContainer.seriesTemplate["isPropertyDisabled"] = function (name) {
                        return _this.isSeriesTemplatePropertyDisabled(name);
                    };
                    this.chart.dataContainer.seriesTemplate.valueDataMembers()["getPath"] = function (propertyName) {
                        return _this.getPath("seriesDataMember");
                    };
                    this._disposables.push(this.chart.dataContainer.seriesTemplate.valueDataMembers.subscribe(function (newValue) {
                        newValue["getPath"] = function (propertyName) {
                            return _this.getPath("seriesDataMember");
                        };
                    }));
                };
                ChartControlViewModel.prototype.getPath = function (propertyName) {
                    var dataSourceInfo = this.dataSource();
                    var dataSourceName = (dataSourceInfo && dataSourceInfo.data && (dataSourceInfo.id || dataSourceInfo.ref)) || "";
                    if (propertyName === "seriesDataMember" || propertyName === "valueDataMembers" || propertyName === "colorDataMember") {
                        return Designer.getFullPath(dataSourceName, this.chart.dataContainer.dataMember());
                    }
                    else if (propertyName === "dataMember") {
                        return dataSourceName;
                    }
                };
                ChartControlViewModel.prototype.serialize = function () {
                    return (new DevExpress.JS.Utils.ModelSerializer()).serialize(this);
                };
                ChartControlViewModel.prototype.save = function () {
                    var data = this.serialize();
                    if (this.onSave) {
                        this.onSave(data);
                    }
                    return data;
                };
                ChartControlViewModel.prototype.isPropertyDisabled = function (name) {
                    return !this.dataSource() && (name === "seriesDataMember" || name === "dataMember");
                };
                return ChartControlViewModel;
            })(DevExpress.JS.Utils.Disposable);
            Chart.ChartControlViewModel = ChartControlViewModel;
            Chart.fakeChartSerializationInfo = [Chart.chartDataSource,
                { propertyName: "dataMember", displayName: "Data Member", defaultVal: "", editor: ko.bindingHandlers["displayNameExtender"] ? Designer.Widgets.editorTemplates.dataMember : Chart.editorTemplates.dataMemberChart, localizationId: 'DevExpress.XtraReports.UI.XRSparkline.DataMember' },
                { propertyName: "seriesDataMember", displayName: "Series Data Member", defaultVal: "", editor: Chart.editorTemplates.fieldChart, localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesDataMember' },
                Chart.seriesTemplate, Chart.seriesSerializable, Chart.diagram, Chart.titles, Chart.legend, Chart.legends];
            Chart.size = { propertyName: "size", modelName: "@SizeF", from: Designer.Size.fromString, displayName: "Size", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRControl.Size' };
            Chart.chartControlSerializationsInfo = [Chart.chart];
            var ChartControlSurface = (function (_super) {
                __extends(ChartControlSurface, _super);
                function ChartControlSurface(control, zoom, size) {
                    var _this = this;
                    if (zoom === void 0) { zoom = ko.observable(1); }
                    if (size === void 0) { size = Designer.Size.fromString("500, 500"); }
                    _super.call(this);
                    this.imageSrc = ko.observable("");
                    this.templateName = "dx-chart-surface";
                    this.width = ko.computed(function () { return size.width() * zoom(); });
                    this.height = ko.computed(function () { return size.height() * zoom(); });
                    this.zoom = zoom;
                    this._disposables.push(this.width);
                    this._disposables.push(this.height);
                    this._disposables.push(ko.computed(function () {
                        var series = control.chart.dataContainer.series();
                        series.forEach(function (val) {
                            val.viewType();
                        });
                        var _self = _this;
                        if (Designer.Chart.HandlerUri) {
                            Chart.ChartRequests.getChartImage(Designer.Chart.HandlerUri, Chart.ChartViewModel.toJson(ko.unwrap(control.chart), new DevExpress.JS.Utils.ModelSerializer(), null), _this.width(), _this.height()).done(function (result) {
                                var allSeries = control.chart.dataContainer.series();
                                allSeries.forEach(function (val) {
                                    val.isIncompatible(false);
                                });
                                _self.imageSrc("data:image/x;base64," + result.Image);
                                result.Indexes.forEach(function (val) {
                                    var series = allSeries[val];
                                    series.isIncompatible(true);
                                });
                            })
                                .fail(function (result) {
                                Designer.NotifyAboutWarning("Impossible to get chart image.");
                            });
                        }
                    }));
                }
                return ChartControlSurface;
            })(Designer.Disposable);
            Chart.ChartControlSurface = ChartControlSurface;
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var ChartRequests = (function () {
                function ChartRequests() {
                }
                ChartRequests.getChartImage = function (uri, chartLayout, width, height) {
                    return Designer.ajax(uri, 'chart', encodeURIComponent(JSON.stringify({
                        width: width,
                        height: height,
                        Chart: JSON.stringify({
                            'ChartXmlSerializer': {
                                '@version': "16.2.0.0",
                                Chart: chartLayout
                            }
                        })
                    })));
                };
                ChartRequests.fieldListCallback = function (request) {
                    var requestJson = JSON.stringify(request);
                    var encodedJson = encodeURIComponent(requestJson);
                    return Designer.ajax(Chart.HandlerUri, 'fieldList', encodedJson);
                };
                return ChartRequests;
            })();
            Chart.ChartRequests = ChartRequests;
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="chartcontrol.ts" />
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            Chart.ActionId = {
                Save: "dxxcd-save"
            };
            var ChartDesignerElements = {
                Main: "dx-chart-middlePart",
                Toolbar: "dxcd-toolbar",
                RightPanel: "dx-right-panel-lightweight",
                LeftPanel: "dx-chart-leftPanel"
            };
            Chart.controlsFactory = new Designer.ControlsFactory();
            function registerControls() {
                Chart.controlsFactory.registerControl("ChartControl", {
                    info: Chart.chartControlSerializationsInfo,
                    surfaceType: Chart.ChartControlSurface,
                    type: Chart.ChartControlViewModel,
                    elementActionsTypes: [],
                    isContainer: true,
                    nonToolboxItem: true
                });
            }
            Chart.registerControls = registerControls;
            function deserializeModelArray(model, creator, prefix) {
                var array = ko.observableArray();
                array(DevExpress.JS.Utils.deserializeArray(model || {}, function (item) { return creator(item, array); })());
                array()["innerActions"] = [{
                        text: Designer.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                        imageClassName: "dxrd-image-add",
                        imageTemplateName: "dxrd-svg-operations-add",
                        disabled: ko.observable(false),
                        visible: true,
                        clickAction: function () {
                            array.push(creator({ "@Name": Designer.getUniqueName(array().map(function (x) { return x["name"] && x["name"](); }), prefix) }, array));
                        }
                    }];
                return array;
            }
            Chart.deserializeModelArray = deserializeModelArray;
            function parseDate(val) {
                if (!val)
                    return null;
                if (val instanceof Date)
                    return val;
                var date = DevExpress.JS.Localization.parseDate(val);
                if (!date) {
                    var enGlobalize = new DevExpress.JS.Localization.Globalize("en");
                    date = enGlobalize["parseDate"](val, { raw: "MM/dd/yyyy HH:mm:ss.SSS" });
                }
                return date;
            }
            Chart.parseDate = parseDate;
            function serializeDate(date) {
                var milliseconds = date.getMilliseconds().toString();
                var zeros;
                switch (3 - milliseconds.length) {
                    case 2:
                        zeros = "00";
                        break;
                    case 1:
                        zeros = "0";
                        break;
                    default:
                        zeros = "";
                }
                return DevExpress.JS.Utils.serializeDate(date) + "." + zeros + milliseconds;
            }
            Chart.serializeDate = serializeDate;
            Chart.HandlerUri = "DXXCD.axd";
            var _limitation = false;
            Object.defineProperty(DevExpress.Designer.Chart, "limitation", {
                get: function () { return _limitation; },
                set: function (newVal) {
                    _limitation = newVal;
                    Chart.viewBindableSerializationInfo.valuesArray = Chart.createViewsArray(newVal);
                }
            });
            function customizeDesignerActions(designerModel, nextCustomizer) {
                var chart = designerModel.model;
                return (function (actions) {
                    var save = {
                        id: Chart.ActionId.Save,
                        text: "Save",
                        imageClassName: "dxrd-image-save",
                        imageTemplateName: "dxrd-svg-menu-save",
                        disabled: ko.observable(false),
                        visible: true,
                        hasSeparator: true,
                        hotKey: { ctrlKey: true, keyCode: "S".charCodeAt(0) },
                        clickAction: function () {
                            chart().save();
                        }
                    };
                    actions.splice(0, 0, save);
                    nextCustomizer && nextCustomizer(actions);
                });
            }
            function updateChartSurfaceContentSize(element, surfaceSize, rtl) {
                if (rtl === void 0) { rtl = false; }
                var $element = $(element);
                return function () {
                    var rightAreaWidth = $element.find(".dxrd-right-panel")[0].offsetWidth;
                    var leftAreaWidth = $element.find(".dx-chart-left-panel")[0].offsetWidth;
                    var otherWidth = rightAreaWidth + leftAreaWidth, surfaceWidth = $element.find(".dxcd-designer")[0].offsetWidth - (otherWidth + 5);
                    $element.find(".dxrd-surface-wrapper").eq(0).css({
                        "right": !rtl ? rightAreaWidth : leftAreaWidth,
                        "left": rtl ? rightAreaWidth : leftAreaWidth,
                        "width": surfaceWidth
                    });
                    surfaceSize(surfaceWidth);
                };
            }
            Chart.updateChartSurfaceContentSize = updateChartSurfaceContentSize;
            function subscribeTreelistArray(chartStructureProvider, array, getPath, subscribeNewItem) {
                return array.subscribe(function (args) {
                    args.forEach(function (changeSet) {
                        if (changeSet.status) {
                            var selectedPath = "";
                            var path = getPath();
                            if (changeSet.status === "deleted") {
                                selectedPath = array().length === 0 ? path.join('.') : [].concat(path, "0").join('.');
                            }
                            else if (changeSet.status === "added") {
                                selectedPath = [].concat(path, changeSet.index).join(".");
                                subscribeNewItem && subscribeNewItem(changeSet.value, array, path);
                            }
                            chartStructureProvider.selectedPath(selectedPath);
                        }
                    });
                }, null, "arrayChange");
            }
            Chart.subscribeTreelistArray = subscribeTreelistArray;
            function getPropertyInfo(serializationsInfo, index, pathComponets) {
                var info = serializationsInfo.filter(function (info) { return info.propertyName === pathComponets[index]; })[0];
                if (info && info.info && index++ < pathComponets.length)
                    info = getPropertyInfo(info.info, index, pathComponets);
                return info;
            }
            Chart.getPropertyInfo = getPropertyInfo;
            function wrapSelectedElement(selectedElement, selectedElementInfo, displayName, propertyName) {
                if (propertyName === void 0) { propertyName = "element"; }
                var object = {};
                object[propertyName] = selectedElement;
                object["owner"] = ko.unwrap(selectedElement)["owner"];
                object["getInfo"] = function () {
                    return [$.extend({}, selectedElementInfo, { displayName: displayName, propertyName: propertyName })];
                };
                return object;
            }
            function createChartStructure(chart, selectedItem, subscriptions) {
                var fakeChart = {
                    dataSource: chart.dataSource,
                    dataMember: chart.chart.dataContainer.dataMember,
                    seriesDataMember: chart.chart.dataContainer.seriesDataMember,
                    seriesTemplate: chart.chart.dataContainer.seriesTemplate,
                    series: chart.chart.dataContainer.series,
                    diagram: ko.computed(function () {
                        if (chart.chart.dataContainer.series().length > 0 || !!chart.chart.dataContainer.seriesDataMember()) {
                            return chart.chart.diagram();
                        }
                        return null;
                    }),
                    titles: chart.chart.titles,
                    legend: chart.chart["legend"],
                    legends: chart.chart.legends,
                    getInfo: function () {
                        return Chart.fakeChartSerializationInfo;
                    },
                    getPath: function (propertyName) { return chart.getPath(propertyName); },
                    isPropertyDisabled: function (propertyName) { return chart.isPropertyDisabled(propertyName); },
                    className: function () { return 'chart'; }
                };
                var chartStructureProvider = new Chart.ChartStructureObjectProvider(fakeChart, "Chart", 'DevExpress.XtraReports.UI.XRChart');
                var chartStructureTreeListController = new Chart.ChartStructureTreeListController(["chart", "Chart", "titles", "legend", "legends", "series", "diagram",
                    "defaultPane", "panes", "axisX", "axisY", "secondaryAxesX", "secondaryAxesY", "constantLines", "scaleBreaks", "strips", "seriesTemplate", "label", "points"], ["chart", "diagram", "axisX", "axisY", "titles", "legends", "series", "panes", "secondaryAxesX", "secondaryAxesY", "constantLines", "scaleBreaks", "strips", "SeriesViewModel", "SecondaryAxisViewModel"], function (newItem) {
                    var selectedElement = chartStructureProvider.selectedMember();
                    if (newItem.data.specifics === "points") {
                        selectedElement = wrapSelectedElement(ko.observableArray(selectedElement), Chart.points, newItem.data.displayName, "points");
                    }
                    else if (Array.isArray(selectedElement)) {
                        selectedElement = wrapSelectedElement(selectedElement, { editor: Chart.editorTemplates.collection }, newItem.data.displayName);
                    }
                    selectedItem(selectedElement);
                });
                var chartStructure = {
                    itemsProvider: chartStructureProvider,
                    treeListController: chartStructureTreeListController,
                    expandRootItems: true,
                    selectedPath: chartStructureProvider.selectedPath
                };
                chartStructureProvider.selectedPath("Chart");
                selectedItem(null);
                subscriptions.push(fakeChart.diagram);
                subscriptions.push(subscribeTreelistArray(chartStructureProvider, chart.chart.dataContainer.series, function () { return ["Chart", "series"]; }));
                subscriptions.push(subscribeTreelistArray(chartStructureProvider, chart.chart.titles, function () { return ["Chart", "titles"]; }));
                subscriptions.push(subscribeTreelistArray(chartStructureProvider, chart.chart.legends, function () { return ["Chart", "legends"]; }));
                var diagramSubscriptions = [];
                var subscribeDiagram = function (diagram) {
                    diagramSubscriptions.forEach(function (val) { return val.dispose(); });
                    var axisCollectionNames = ["constantLines", "scaleBreaks", "strips"];
                    var subscribeAxis = function (axis, array, path) {
                        axisCollectionNames.forEach(function (propertyName) {
                            diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, axis[propertyName], function () { return [].concat(path, array.indexOf(axis), propertyName); }));
                        });
                    };
                    ["axisX", "axisY"].forEach(function (propertyName) {
                        if (diagram[propertyName]) {
                            axisCollectionNames.forEach(function (innerPropertyName) {
                                if (diagram[propertyName][innerPropertyName]) {
                                    diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, diagram[propertyName][innerPropertyName], function () { return ["Chart", "diagram", propertyName, innerPropertyName]; }));
                                }
                            });
                        }
                    });
                    ["secondaryAxesX", "secondaryAxesY"].forEach(function (propertyName) {
                        if (diagram[propertyName]) {
                            diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, diagram[propertyName], function () { return ["Chart", "diagram", propertyName]; }, subscribeAxis));
                            var axis = ko.unwrap(diagram[propertyName]);
                            for (var i = 0; i < axis.length; i++) {
                                subscribeAxis(axis[i], axis, ["Chart", "diagram", propertyName]);
                            }
                        }
                    });
                    if (diagram.panes) {
                        diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, diagram.panes, function () { return ["Chart", "diagram", "panes"]; }));
                    }
                    [].push.apply(subscriptions, diagramSubscriptions);
                };
                subscribeDiagram(chart.chart.diagram());
                chart.chart.diagram.subscribe(function (newVal) {
                    subscribeDiagram(newVal);
                });
                return chartStructure;
            }
            Chart.createChartStructure = createChartStructure;
            function createArrayOfNames(collectionProperty, defaultVal) {
                return ko.computed(function () {
                    return (defaultVal && [defaultVal] || []).concat(collectionProperty().map(function (x) { return x.name(); }));
                });
            }
            function createChartDesigner(element, options, applyBindings) {
                if (applyBindings === void 0) { applyBindings = true; }
                if (options.localization) {
                    DevExpress.JS.Localization.addCultureInfo(options.localization);
                }
                options.callbacks.fieldLists = options.callbacks.fieldLists || Chart.ChartRequests.fieldListCallback;
                registerControls();
                var chartControlModel = ko.observable(), surface = ko.observable(), dataBindingsProvider = ko.observable(), size = new Designer.Size(options.data.width, options.data.height);
                var chartStructure = ko.observable(null);
                var chartSelectedItem = ko.observable(null);
                var subscriptions = [];
                var groups = ko.observableArray();
                var chartSourceSubscription = null;
                var undoModel = ko.observable({});
                var initChartControlModel = function (newModel) {
                    surface() && surface()._disposables.forEach(function (item) { item.dispose(); });
                    subscriptions.forEach(function (item) { return item.dispose(); });
                    subscriptions = [];
                    if (newModel) {
                        groups(newModel.chart.dataContainer.series().map(function (x) { return x.view()["group"] || x["stackedGroup"]; }).filter(function (x) { return !!x; }).map(function (x) { return x(); }));
                        chartControlModel(newModel);
                        undoModel(newModel);
                        surface() && surface()._disposables.forEach(function (item) { item.dispose(); });
                        surface(new Chart.ChartControlSurface(newModel, ko.observable(1), size));
                        if (!!options.fieldListProvider) {
                            dataBindingsProvider(options.fieldListProvider);
                        }
                        else {
                            var _chartSources = options.data.dataSource && options.data.dataSource() ? [options.data.dataSource()] : [];
                            if (options.data.availableChartDataSources) {
                                _chartSources = options.data.availableChartDataSources().map(function (x) {
                                    return x.value;
                                });
                            }
                            var realChartSources = ko.observableArray(_chartSources);
                            dataBindingsProvider(new Designer.FieldListProvider(options.callbacks.fieldLists, realChartSources));
                        }
                        chartStructure(createChartStructure(newModel, chartSelectedItem, subscriptions));
                    }
                    designerModel.undoEngine().clearHistory();
                };
                var init = function (chartSourceValue) {
                    var newModel = new Chart.ChartControlViewModel({
                        chartSource: chartSourceValue,
                        dataSource: options.data.dataSource,
                        callbacks: options.callbacks,
                        size: {
                            height: ko.observable(options.data.height),
                            width: ko.observable(options.data.width),
                            isPropertyDisabled: function (name) { return true; }
                        }
                    });
                    initChartControlModel(newModel);
                };
                var undoEngine = new DevExpress.JS.Utils.UndoEngine(undoModel, ["viewType"], "getInfo");
                undoEngine["_disposeUndoEngineSubscriptionsName"] += "chartdesigner";
                var designerModel = {
                    model: chartControlModel,
                    chartStructure: chartStructure,
                    rightPanelHeader: function () { return DevExpress.Designer.getLocalization('Chart Structure', 'ChartDesignerStringIDs.ChartStructureDockPanelTitle'); },
                    surface: surface,
                    undoEngine: ko.observable(undoEngine),
                    tabPanel: new Designer.TabPanel({
                        tabs: [
                            new Designer.TabInfo({
                                text: "Properties",
                                template: "dxrd-propertygridtab",
                                model: new DevExpress.JS.Widgets.ObjectProperties(chartSelectedItem),
                                localizationId: "ReportStringId.Cmd_Properties"
                            })
                        ],
                        rtl: options.rtl
                    }),
                    surfaceSize: ko.observable(0),
                    isLoading: ko.observable(true),
                    rtl: options.rtl,
                    groups: groups,
                    applyGroup: function (groupName) {
                        if (groups().indexOf(groupName) === -1 && !!groupName) {
                            groups.push(groupName);
                        }
                    }
                };
                if (options.data.chartSource) {
                    chartSourceSubscription = options.data.chartSource.subscribe(function (newValue) {
                        init(newValue);
                    });
                    init(options.data.chartSource());
                }
                else {
                    options.data.chart.subscribe(function (newVal) {
                        initChartControlModel(newVal);
                    });
                    initChartControlModel(options.data.chart());
                }
                designerModel.panes = createArrayOfNames(function () {
                    var panes = chartControlModel().chart.diagram().panes;
                    return panes && panes() || [];
                }, Chart.paneName.defaultVal);
                designerModel.legends = createArrayOfNames(function () {
                    var legends = chartControlModel().chart.legends;
                    return legends && legends() || [];
                }, Chart.legendName.defaultVal);
                designerModel.axisX = createArrayOfNames(function () {
                    var axisX = chartControlModel().chart.diagram().secondaryAxesX;
                    return axisX && axisX() || [];
                }, Chart.axisXName.defaultVal);
                designerModel.axisY = createArrayOfNames(function () {
                    var axisY = chartControlModel().chart.diagram().secondaryAxesY;
                    return axisY && axisY() || [];
                }, Chart.axisYName.defaultVal);
                if (options.data.availableChartDataSources) {
                    designerModel.chartDataSources = options.data.availableChartDataSources;
                }
                else {
                    var displayedChartSources = options.data.dataSource && options.data.dataSource() ? [{ displayName: options.data.dataSource().name, value: options.data.dataSource() }] : [];
                    designerModel.chartDataSources = ko.observableArray(displayedChartSources);
                }
                designerModel.rootStyle = "dxcd-designer dxd-back-primary";
                designerModel.parts = [
                    { id: ChartDesignerElements.Main, templateName: ChartDesignerElements.Main, model: designerModel },
                    { id: ChartDesignerElements.Toolbar, templateName: ChartDesignerElements.Toolbar, model: designerModel },
                    { id: ChartDesignerElements.RightPanel, templateName: ChartDesignerElements.RightPanel, model: designerModel },
                    { id: ChartDesignerElements.LeftPanel, templateName: ChartDesignerElements.LeftPanel, model: designerModel }
                ];
                designerModel.dataBindingsProvider = dataBindingsProvider;
                designerModel.actionLists = new Designer.ActionLists(surface, null, designerModel.undoEngine, customizeDesignerActions(designerModel, options.callbacks.customizeActions));
                designerModel.isLoading(false);
                if (applyBindings) {
                    $(element).children().remove();
                    ko.applyBindings(designerModel, element);
                }
                var updateSurfaceContentSize_ = updateChartSurfaceContentSize(element, designerModel.surfaceSize, designerModel.rtl);
                designerModel.tabPanel.width.subscribe(function () {
                    updateSurfaceContentSize_();
                });
                designerModel.subscriptions = subscriptions;
                designerModel.chartSourceSubscription = chartSourceSubscription;
                designerModel.updateSurfaceSize = function () {
                    updateSurfaceContentSize_();
                };
                DevExpress.Designer.appendStaticContextToRootViewModel(designerModel);
                if (applyBindings) {
                    designerModel.updateSurfaceSize();
                }
                options.callbacks && options.callbacks.init && options.callbacks.init(designerModel);
                return designerModel;
            }
            Chart.createChartDesigner = createChartDesigner;
            ko.bindingHandlers["dxChartDesigner"] = {
                init: function (element, valueAccessor) {
                    var options = ko.unwrap(valueAccessor()) || {};
                    $(element).children().remove();
                    var templateHtml = DevExpress.Analytics.Widgets.Internal.getTemplate('dxrd-designer'), $element = $(element).append(templateHtml);
                    var designerModel = createChartDesigner($element[0], options, false);
                    ko.applyBindings(designerModel, $element.children()[0]);
                    designerModel.updateSurfaceSize();
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        designerModel.model() && designerModel.model()._disposables.forEach(function (item) { return item.dispose(); });
                        designerModel.subscriptions.forEach(function (item) { return item.dispose(); });
                        designerModel.chartSourceSubscription && designerModel.chartSourceSubscription.dispose();
                        designerModel.subscriptions = [];
                        designerModel = null;
                    });
                    return { controlsDescendantBindings: true };
                }
            };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var Internal;
            (function (Internal) {
                var templates = DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.templates;
                DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.addTemplates({
                    'dxrd-svg-fieldlist-area': templates['dxrd-svg-series-area'],
                    'dxrd-svg-fieldlist-area3d': templates['dxrd-svg-series-area3d'],
                    'dxrd-svg-fieldlist-sidebysidebar': templates['dxrd-svg-series-side_by_side_bar'],
                    'dxrd-svg-fieldlist-sidebysidebar3d': templates['dxrd-svg-series-side_by_side_bar3d'],
                    'dxrd-svg-fieldlist-bubble': templates['dxrd-svg-series-bubbles'],
                    'dxrd-svg-fieldlist-candlestick': templates['dxrd-svg-series-candle_stick'],
                    'dxrd-svg-fieldlist-doughnut3d': templates['dxrd-svg-series-doughnut3d'],
                    'dxrd-svg-fieldlist-doughnut': templates['dxrd-svg-series-doughnut'],
                    'dxrd-svg-fieldlist-fullstackedarea': templates['dxrd-svg-series-full_stacked_area'],
                    'dxrd-svg-fieldlist-fullstackedarea3d': templates['dxrd-svg-series-full_stacked_area3d'],
                    'dxrd-svg-fieldlist-fullstackedbar': templates['dxrd-svg-series-full_stacked_bar'],
                    'dxrd-svg-fieldlist-fullstackedbar3d': templates['dxrd-svg-series-full_stacked_bar3d'],
                    'dxrd-svg-fieldlist-fullstackedline': templates['dxrd-svg-series-full_stacked_line'],
                    'dxrd-svg-fieldlist-fullstackedline3d': templates['dxrd-svg-series-full_stacked_line3d'],
                    'dxrd-svg-fieldlist-fullstackedsplinearea': templates['dxrd-svg-series-full_stacked_spline_area'],
                    'dxrd-svg-fieldlist-fullstackedsplinearea3d': templates['dxrd-svg-series-full_stacked_spline_area3d'],
                    'dxrd-svg-fieldlist-funnel': templates['dxrd-svg-series-funnel'],
                    'dxrd-svg-fieldlist-funnel3d': templates['dxrd-svg-series-funnel3d'],
                    'dxrd-svg-fieldlist-overlappedgantt': templates['dxrd-svg-series-gantt'],
                    'dxrd-svg-fieldlist-line': templates['dxrd-svg-series-line'],
                    'dxrd-svg-fieldlist-line3d': templates['dxrd-svg-series-line3d'],
                    'dxrd-svg-fieldlist-manhattanbar': templates['dxrd-svg-series-manhattan_bar3d'],
                    'dxrd-svg-fieldlist-nesteddoughnut': templates['dxrd-svg-series-nested_doughnut'],
                    'dxrd-svg-fieldlist-pie': templates['dxrd-svg-series-pie'],
                    'dxrd-svg-fieldlist-pie3d': templates['dxrd-svg-series-pie3d'],
                    'dxrd-svg-fieldlist-point': templates['dxrd-svg-series-point'],
                    'dxrd-svg-fieldlist-polararea': templates['dxrd-svg-series-polar_area'],
                    'dxrd-svg-fieldlist-polarline': templates['dxrd-svg-series-polar_line'],
                    'dxrd-svg-fieldlist-polarpoint': templates['dxrd-svg-series-polar_point'],
                    'dxrd-svg-fieldlist-radararea': templates['dxrd-svg-series-radar_area'],
                    'dxrd-svg-fieldlist-radarline': templates['dxrd-svg-series-radar_line'],
                    'dxrd-svg-fieldlist-radarpoint': templates['dxrd-svg-series-radar_point'],
                    'dxrd-svg-fieldlist-rangearea': templates['dxrd-svg-series-range_area'],
                    'dxrd-svg-fieldlist-rangearea3d': templates['dxrd-svg-series-range_area3d'],
                    'dxrd-svg-fieldlist-overlappedrangebar': templates['dxrd-svg-series-range_bar'],
                    'dxrd-svg-fieldlist-scatterline': templates['dxrd-svg-series-scatter_line'],
                    'dxrd-svg-fieldlist-sidebysidefullstackedbar': templates['dxrd-svg-series-side_by_side_full_stacked_bar'],
                    'dxrd-svg-fieldlist-sidebysidefullstackedbar3d': templates['dxrd-svg-series-side_by_side_full_stacked_bar3d'],
                    'dxrd-svg-fieldlist-sidebysidegantt': templates['dxrd-svg-series-side_by_side_gantt'],
                    'dxrd-svg-fieldlist-sidebysiderangebar': templates['dxrd-svg-series-side_by_side_range_bar'],
                    'dxrd-svg-fieldlist-sidebysidestackedbar': templates['dxrd-svg-series-side_by_side_stacked_bar'],
                    'dxrd-svg-fieldlist-sidebysidestackedbar3d': templates['dxrd-svg-series-side_by_side_stacked_bar3d'],
                    'dxrd-svg-fieldlist-spline': templates['dxrd-svg-series-spline'],
                    'dxrd-svg-fieldlist-splinearea': templates['dxrd-svg-series-spline_area'],
                    'dxrd-svg-fieldlist-splinearea3d': templates['dxrd-svg-series-spline_area3d'],
                    'dxrd-svg-fieldlist-spline3d': templates['dxrd-svg-series-spline3d'],
                    'dxrd-svg-fieldlist-stackedarea': templates['dxrd-svg-series-stacked_area'],
                    'dxrd-svg-fieldlist-stackedarea3d': templates['dxrd-svg-series-stacked_area3d'],
                    'dxrd-svg-fieldlist-stackedbar': templates['dxrd-svg-series-stacked_bar'],
                    'dxrd-svg-fieldlist-stackedbar3d': templates['dxrd-svg-series-stacked_bar3d'],
                    'dxrd-svg-fieldlist-stackedline': templates['dxrd-svg-series-stacked_line'],
                    'dxrd-svg-fieldlist-stackedline3d': templates['dxrd-svg-series-stacked_line'],
                    'dxrd-svg-fieldlist-stackedsplinearea': templates['dxrd-svg-series-stacked_spline_area'],
                    'dxrd-svg-fieldlist-stackedsplinearea3d': templates['dxrd-svg-series-stacked_spline_area3d'],
                    'dxrd-svg-fieldlist-steparea': templates['dxrd-svg-series-step_area'],
                    'dxrd-svg-fieldlist-steparea3d': templates['dxrd-svg-series-step_area3d'],
                    'dxrd-svg-fieldlist-stepline': templates['dxrd-svg-series-step_line'],
                    'dxrd-svg-fieldlist-stepline3d': templates['dxrd-svg-series-step_line3d'],
                    'dxrd-svg-fieldlist-stock': templates['dxrd-svg-series-stock'],
                    'dxrd-svg-fieldlist-swiftplot': templates['dxrd-svg-series-swift_plot'],
                    'dxrd-svg-fieldlist-chart': templates['dxrd-svg-chartstructure-chart'],
                    'dxrd-svg-fieldlist-diagram': templates['dxrd-svg-chartstructure-diagram'],
                    'dxrd-svg-fieldlist-legend': templates['dxrd-svg-chartstructure-legend'],
                    'dxrd-svg-fieldlist-legends': templates['dxrd-svg-chartstructure-legend'],
                    'dxrd-svg-fieldlist-series': templates['dxrd-svg-chartstructure-seriescollection'],
                    'dxrd-svg-fieldlist-seriestemplate': templates['dxrd-svg-chartstructure-seriescollection'],
                    'dxrd-svg-fieldlist-titles': templates['dxrd-svg-chartstructure-titles'],
                });
            })(Internal = Chart.Internal || (Chart.Internal = {}));
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Chart;
        (function (Chart) {
            var arrowWidthValidationRules = [{
                    type: "custom",
                    validationCallback: function (options) {
                        return options.value % 2 !== 0;
                    },
                    message: DevExpress.Designer.getLocalization("The arrow width should be always odd and greater than 0", "ChartStringId.MsgIncorrectArrowWidth")
                }];
            var invertedStep = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.FullStackedStepAreaSeriesView.InvertedStep", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var fillMode = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", localizationId: "DevExpress.XtraCharts.FillStyle2D.FillMode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }, { value: "Hatch", displayValue: "Hatch", localizationId: 'DevExpress.XtraCharts.FillMode.Hatch' }], defaultVal: "Empty"
            };
            var fillStyleInfo = [fillMode, Chart.fillStyleOptionsSerialize, Chart.tag,];
            var fillStyle = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.FillStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, from: Chart.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Chart.FillStyle.toJson };
            var transparency = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.Transparency", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var enableAntialiasing = {
                propertyName: "enableAntialiasing", modelName: "@EnableAntialiasing", displayName: "Enable Antialiasing", localizationId: "DevExpress.XtraCharts.LineSeriesView.EnableAntialiasing", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var size = { propertyName: "size", modelName: "@Size", displayName: "Size", localizationId: "DevExpress.XtraCharts.Shadow.Size", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 2, editorOptions: { min: 1 } };
            var color = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.Shadow.Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, defaultVal: "79,0,0,0" };
            var visible = { propertyName: "visible", modelName: "@Visible", displayName: "Visible", localizationId: "DevExpress.XtraCharts.Shadow.Visible", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var shadowInfo = [size, color, visible, Chart.tag,];
            var shadow = { propertyName: "shadow", modelName: "Shadow", displayName: "Shadow", localizationId: "DevExpress.XtraCharts.XYDiagramSeriesViewBase.Shadow", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: shadowInfo, };
            var aggregateFunction = {
                propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: "Aggregate Function", localizationId: "DevExpress.XtraCharts.XYDiagram2DSeriesViewBase.AggregateFunction", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Average", displayValue: "Average", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: "Minimum", displayValue: "Minimum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: "Maximum", displayValue: "Maximum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: "Sum", displayValue: "Sum", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "Financial", displayValue: "Financial", localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var color1 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.SeriesViewBase.Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, defaultVal: "transparent" };
            var fullStackedStepAreaSeriesViewinfo = [invertedStep, fillStyle, transparency, enableAntialiasing, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var color2 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.Marker.Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, defaultVal: "transparent" };
            var size1 = { propertyName: "size", modelName: "@Size", displayName: "Size", localizationId: "DevExpress.XtraCharts.SimpleMarker.Size", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 10, editorOptions: { min: 1 } };
            var kind = {
                propertyName: "kind", modelName: "@Kind", displayName: "Kind", localizationId: "DevExpress.XtraCharts.MarkerBase.Kind", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Square", displayValue: "Square", localizationId: 'DevExpress.XtraCharts.MarkerKind.Square' }, { value: "Diamond", displayValue: "Diamond", localizationId: 'DevExpress.XtraCharts.MarkerKind.Diamond' }, { value: "Triangle", displayValue: "Triangle", localizationId: 'DevExpress.XtraCharts.MarkerKind.Triangle' }, { value: "InvertedTriangle", displayValue: "InvertedTriangle" }, { value: "Circle", displayValue: "Circle", localizationId: 'DevExpress.XtraCharts.CircleEasingFunction' }, { value: "Plus", displayValue: "Plus", localizationId: 'DevExpress.XtraCharts.MarkerKind.Plus' }, { value: "Cross", displayValue: "Cross", localizationId: 'DevExpress.XtraCharts.MarkerKind.Cross' }, { value: "Star", displayValue: "Star", localizationId: 'DevExpress.XtraCharts.MarkerKind.Star' }, { value: "Pentagon", displayValue: "Pentagon", localizationId: 'DevExpress.XtraCharts.MarkerKind.Pentagon' }, { value: "Hexagon", displayValue: "Hexagon", localizationId: 'DevExpress.XtraCharts.MarkerKind.Hexagon' }], defaultVal: "Circle"
            };
            var starPointCount = { propertyName: "starPointCount", modelName: "@StarPointCount", displayName: "Star Point Count", localizationId: "DevExpress.XtraCharts.MarkerBase.StarPointCount", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 5, editorOptions: { min: 3, max: 100 } };
            var fillStyle1 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.MarkerBase.FillStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, from: Chart.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Chart.FillStyle.toJson };
            var borderVisible = { propertyName: "borderVisible", modelName: "@BorderVisible", displayName: "Border Visible", localizationId: "DevExpress.XtraCharts.MarkerBase.BorderVisible", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var borderColor = { propertyName: "borderColor", modelName: "@BorderColor", displayName: "Border Color", localizationId: "DevExpress.XtraCharts.MarkerBase.BorderColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, defaultVal: "transparent" };
            var marker1Info = [color2, size1, kind, starPointCount, fillStyle1, borderVisible, borderColor, Chart.tag,];
            var marker1 = { propertyName: "marker1", modelName: "Marker1", displayName: "Marker 1", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker1", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: marker1Info, };
            var marker2Info = [color2, size1, kind, starPointCount, fillStyle1, borderVisible, borderColor, Chart.tag,];
            var marker2 = { propertyName: "marker2", modelName: "Marker2", displayName: "Marker 2", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker2", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: marker2Info, };
            var color3 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.BorderBase.Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, defaultVal: "transparent" };
            var thickness = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", localizationId: "DevExpress.XtraCharts.BorderBase.Thickness", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { min: 1 } };
            var visibility = {
                propertyName: "visibility", modelName: "@Visibility", displayName: "Visibility", localizationId: "DevExpress.XtraCharts.BorderBase.Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var border1Info = [color3, thickness, visibility, Chart.tag,];
            var border1 = { propertyName: "border1", modelName: "Border1", displayName: "Border 1", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Border1", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: border1Info, };
            var border2Info = [color3, thickness, visibility, Chart.tag,];
            var border2 = { propertyName: "border2", modelName: "Border2", displayName: "Border 2", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Border2", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: border2Info, };
            var marker1Visibility = {
                propertyName: "marker1Visibility", modelName: "@Marker1Visibility", displayName: "Marker 1 Visibility", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker1Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var marker2Visibility = {
                propertyName: "marker2Visibility", modelName: "@Marker2Visibility", displayName: "Marker 2 Visibility", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker2Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var fillStyle2 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.RadarAreaSeriesView.FillStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, from: Chart.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Chart.FillStyle.toJson };
            var transparency1 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.RadarAreaSeriesView.Transparency", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 135 };
            var aggregateFunction1 = {
                propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: "Aggregate Function", localizationId: "DevExpress.XtraCharts.RadarSeriesViewBase.AggregateFunction", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Average", displayValue: "Average", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: "Minimum", displayValue: "Minimum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: "Maximum", displayValue: "Maximum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: "Sum", displayValue: "Sum", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "Financial", displayValue: "Financial", localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var shadow1 = { propertyName: "shadow", modelName: "Shadow", displayName: "Shadow", localizationId: "DevExpress.XtraCharts.RadarSeriesViewBase.Shadow", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: shadowInfo, };
            var colorEach = { propertyName: "colorEach", modelName: "@ColorEach", displayName: "Color Each", localizationId: "DevExpress.XtraCharts.RadarSeriesViewBase.ColorEach", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var polarRangeAreaSeriesViewinfo = [marker1, marker2, border1, border2, marker1Visibility, marker2Visibility, fillStyle2, transparency1, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var radarRangeAreaSeriesViewinfo = [marker1, marker2, border1, border2, marker1Visibility, marker2Visibility, fillStyle2, transparency1, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var areaWidth = { propertyName: "areaWidth", modelName: "@AreaWidth", displayName: "Area Width", localizationId: "DevExpress.XtraCharts.Area3DSeriesView.AreaWidth", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 1 } };
            var aggregateFunction2 = {
                propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: "Aggregate Function", localizationId: "DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.AggregateFunction", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Average", displayValue: "Average", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: "Minimum", displayValue: "Minimum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: "Maximum", displayValue: "Maximum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: "Sum", displayValue: "Sum", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "Financial", displayValue: "Financial", localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var transparency2 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.Transparency", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var rangeArea3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency2, color1, Chart.tag,];
            var marker11 = { propertyName: "marker1", modelName: "Marker1", displayName: "Marker 1", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Marker1", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: marker1Info, };
            var marker21 = { propertyName: "marker2", modelName: "Marker2", displayName: "Marker 2", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Marker2", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: marker2Info, };
            var border11 = { propertyName: "border1", modelName: "Border1", displayName: "Border 1", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Border1", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: border1Info, };
            var border21 = { propertyName: "border2", modelName: "Border2", displayName: "Border 2", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Border2", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: border2Info, };
            var marker1Visibility1 = {
                propertyName: "marker1Visibility", modelName: "@Marker1Visibility", displayName: "Marker 1 Visibility", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Marker1Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var marker2Visibility1 = {
                propertyName: "marker2Visibility", modelName: "@Marker2Visibility", displayName: "Marker 2 Visibility", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Marker2Visibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var transparency3 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.Transparency", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 135 };
            var colorEach1 = { propertyName: "colorEach", modelName: "@ColorEach", displayName: "Color Each", localizationId: "DevExpress.XtraCharts.SeriesViewColorEachSupportBase.ColorEach", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var rangeAreaSeriesViewinfo = [marker11, marker21, border11, border21, marker1Visibility1, marker2Visibility1, fillStyle, transparency3, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var invertedStep1 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StackedStepAreaSeriesView.InvertedStep", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var borderInfo = [color3, thickness, visibility, Chart.tag,];
            var border = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.Border", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: borderInfo, };
            var stackedStepAreaSeriesViewinfo = [invertedStep1, border, fillStyle, transparency, enableAntialiasing, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var invertedStep2 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StepArea3DSeriesView.InvertedStep", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var transparency4 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.Transparency", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 135 };
            var stepArea3DSeriesViewinfo = [invertedStep2, areaWidth, aggregateFunction2, transparency4, color1, Chart.tag,];
            var invertedStep3 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StepAreaSeriesView.InvertedStep", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var markerOptionsInfo = [color2, size1, kind, starPointCount, fillStyle1, borderVisible, borderColor, Chart.tag,];
            var markerOptions = { propertyName: "markerOptions", modelName: "MarkerOptions", displayName: "Marker Options", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.MarkerOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: markerOptionsInfo, };
            var markerVisibility = {
                propertyName: "markerVisibility", modelName: "@MarkerVisibility", displayName: "Marker Visibility", localizationId: "DevExpress.XtraCharts.LineSeriesView.MarkerVisibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var stepAreaSeriesViewinfo = [invertedStep3, border, fillStyle, markerOptions, transparency3, markerVisibility, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var stackedGroup = { propertyName: "stackedGroup", modelName: "@StackedGroupSerializable", displayName: "Stacked Group", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.StackedGroup", editor: Chart.editorTemplates.group, defaultVal: null };
            var barDistance = { propertyName: "barDistance", modelName: "@BarDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.BarDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var barDistanceFixed = { propertyName: "barDistanceFixed", modelName: "@BarDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.BarDistanceFixed", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
            var equalBarWidth = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.EqualBarWidth", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var barWidth = { propertyName: "barWidth", modelName: "@BarWidth", displayName: "Bar Width", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.BarWidth", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 0 } };
            var barDepth = { propertyName: "barDepth", modelName: "@BarDepth", displayName: "Bar Depth", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.BarDepth", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 0 } };
            var barDepthAuto = { propertyName: "barDepthAuto", modelName: "@BarDepthAuto", displayName: "Bar Depth Auto", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.BarDepthAuto", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var fillMode1 = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", localizationId: "DevExpress.XtraCharts.FillStyle3D.FillMode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }], defaultVal: "Empty"
            };
            var fillStyleInfo1 = [fillMode1, Chart.fillStyleOptionsSerialize, Chart.tag,];
            var fillStyle3 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.FillStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, from: Chart.FillStyle.from(fillStyleInfo1, "RectangleGradientFillOptions"), toJsonObject: Chart.FillStyle.toJson };
            var model = {
                propertyName: "model", modelName: "@Model", displayName: "Model", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.Model", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Box", displayValue: "Box", localizationId: 'DevExpress.XtraCharts.Bar3DModel.Box' }, { value: "Cylinder", displayValue: "Cylinder", localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.Cylinder' }, { value: "Cone", displayValue: "Cone", localizationId: 'DevExpress.XtraCharts.Bar3DModel.Cone' }, { value: "Pyramid", displayValue: "Pyramid", localizationId: 'DevExpress.XtraCharts.Bar3DModel.Pyramid' }], defaultVal: "Box"
            };
            var showFacet = { propertyName: "showFacet", modelName: "@ShowFacet", displayName: "Show Facet", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.ShowFacet", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var colorEach2 = { propertyName: "colorEach", modelName: "@ColorEach", displayName: "Color Each", localizationId: "DevExpress.XtraCharts.SeriesView3DColorEachSupportBase.ColorEach", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var sideBySideFullStackedBar3DSeriesViewinfo = [stackedGroup, barDistance, barDistanceFixed, equalBarWidth, barWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Chart.tag,];
            var stackedGroup1 = { propertyName: "stackedGroup", modelName: "@StackedGroupSerializable", displayName: "Stacked Group", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.StackedGroup", editor: Chart.editorTemplates.group, defaultVal: null };
            var barDistance1 = { propertyName: "barDistance", modelName: "@BarDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.BarDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var barDistanceFixed1 = { propertyName: "barDistanceFixed", modelName: "@BarDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.BarDistanceFixed", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
            var equalBarWidth1 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.EqualBarWidth", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var barWidth1 = { propertyName: "barWidth", modelName: "@BarWidth", displayName: "Bar Width", localizationId: "DevExpress.XtraCharts.BarSeriesView.BarWidth", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 0 } };
            var border3 = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.BarSeriesView.Border", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: borderInfo, };
            var fillStyle4 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.BarSeriesView.FillStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, from: Chart.FillStyle.from(fillStyleInfo, "RectangleGradientFillOptions"), toJsonObject: Chart.FillStyle.toJson };
            var transparency5 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.BarSeriesView.Transparency", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var sideBySideFullStackedBarSeriesViewinfo = [stackedGroup1, barDistance1, barDistanceFixed1, equalBarWidth1, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var stackedGroup2 = { propertyName: "stackedGroup", modelName: "@StackedGroupSerializable", displayName: "Stacked Group", localizationId: "DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.StackedGroup", editor: Chart.editorTemplates.group, defaultVal: null };
            var barDistance2 = { propertyName: "barDistance", modelName: "@BarDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.BarDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var barDistanceFixed2 = { propertyName: "barDistanceFixed", modelName: "@BarDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.BarDistanceFixed", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
            var equalBarWidth2 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.EqualBarWidth", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var sideBySideStackedBar3DSeriesViewinfo = [stackedGroup2, barDistance2, barDistanceFixed2, equalBarWidth2, barWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Chart.tag,];
            var stackedGroup3 = { propertyName: "stackedGroup", modelName: "@StackedGroupSerializable", displayName: "Stacked Group", localizationId: "DevExpress.XtraCharts.SideBySideStackedBarSeriesView.StackedGroup", editor: Chart.editorTemplates.group, defaultVal: null };
            var barDistance3 = { propertyName: "barDistance", modelName: "@BarDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideStackedBarSeriesView.BarDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var barDistanceFixed3 = { propertyName: "barDistanceFixed", modelName: "@BarDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideStackedBarSeriesView.BarDistanceFixed", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
            var equalBarWidth3 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideStackedBarSeriesView.EqualBarWidth", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var sideBySideStackedBarSeriesViewinfo = [stackedGroup3, barDistance3, barDistanceFixed3, equalBarWidth3, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var lineThickness = { propertyName: "lineThickness", modelName: "@LineThickness", displayName: "Line Thickness", localizationId: "DevExpress.XtraCharts.Line3DSeriesView.LineThickness", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 5, editorOptions: { min: 1 } };
            var lineWidth = { propertyName: "lineWidth", modelName: "@LineWidth", displayName: "Line Width", localizationId: "DevExpress.XtraCharts.Line3DSeriesView.LineWidth", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 1 } };
            var fullStackedLine3DSeriesViewinfo = [lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Chart.tag,];
            var thickness1 = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", localizationId: "DevExpress.XtraCharts.LineStyle.Thickness", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 2, editorOptions: { min: 1 } };
            var dashStyle = {
                propertyName: "dashStyle", modelName: "@DashStyle", displayName: "Dash Style", localizationId: "DevExpress.XtraCharts.LineStyle.DashStyle", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Dash", displayValue: "Dash", localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' }, { value: "Dot", displayValue: "Dot", localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' }, { value: "DashDot", displayValue: "DashDot" }, { value: "DashDotDot", displayValue: "DashDotDot" }], defaultVal: "Solid"
            };
            var lineJoin = {
                propertyName: "lineJoin", modelName: "@LineJoin", displayName: "Line Join", localizationId: "DevExpress.XtraCharts.LineStyle.LineJoin", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Miter", displayValue: "Miter", localizationId: 'System.Drawing.Drawing2D.LineJoin.Miter' }, { value: "Bevel", displayValue: "Bevel", localizationId: 'System.Drawing.Drawing2D.LineJoin.Bevel' }, { value: "Round", displayValue: "Round", localizationId: 'System.Drawing.Drawing2D.LineJoin.Round' }, { value: "MiterClipped", displayValue: "MiterClipped", localizationId: 'System.Drawing.Drawing2D.LineJoin.MiterClipped' }], defaultVal: "Miter"
            };
            var lineStyleInfo = [thickness1, dashStyle, lineJoin, Chart.tag,];
            var lineStyle = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", localizationId: "DevExpress.XtraCharts.LineSeriesView.LineStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: lineStyleInfo, };
            var lineMarkerOptionsInfo = [color2, size1, kind, starPointCount, fillStyle1, borderVisible, borderColor, Chart.tag,];
            var lineMarkerOptions = { propertyName: "lineMarkerOptions", modelName: "LineMarkerOptions", displayName: "Line Marker Options", localizationId: "DevExpress.XtraCharts.LineSeriesView.LineMarkerOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: lineMarkerOptionsInfo, };
            var fullStackedLineSeriesViewinfo = [lineStyle, lineMarkerOptions, markerVisibility, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var lineStyle1 = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", localizationId: "DevExpress.XtraCharts.RadarLineSeriesView.LineStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: lineStyleInfo, };
            var closed = { propertyName: "closed", modelName: "@Closed", displayName: "Closed", localizationId: "DevExpress.XtraCharts.RadarLineSeriesView.Closed", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var lineMarkerOptions1 = { propertyName: "lineMarkerOptions", modelName: "LineMarkerOptions", displayName: "Line Marker Options", localizationId: "DevExpress.XtraCharts.RadarLineSeriesView.LineMarkerOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: lineMarkerOptionsInfo, };
            var markerVisibility1 = {
                propertyName: "markerVisibility", modelName: "@MarkerVisibility", displayName: "Marker Visibility", localizationId: "DevExpress.XtraCharts.RadarLineSeriesView.MarkerVisibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var scatterPolarLineSeriesViewinfo = [lineStyle1, closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var scatterRadarLineSeriesViewinfo = [lineStyle1, closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var stackedLine3DSeriesViewinfo = [lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Chart.tag,];
            var stackedLineSeriesViewinfo = [lineStyle, lineMarkerOptions, markerVisibility, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var weight = { propertyName: "weight", modelName: "@Weight", displayName: "Weight", localizationId: "DevExpress.XtraCharts.NestedDoughnutSeriesView.Weight", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { min: 1 } };
            var innerIndent = { propertyName: "innerIndent", modelName: "@InnerIndent", displayName: "Inner Indent", localizationId: "DevExpress.XtraCharts.NestedDoughnutSeriesView.InnerIndent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 5, editorOptions: { min: 0 } };
            var group = { propertyName: "group", modelName: "@GroupSerializable", displayName: "Group", localizationId: "DevExpress.XtraCharts.NestedDoughnutSeriesView.Group", editor: Chart.editorTemplates.group, defaultVal: null };
            var holeRadiusPercent = { propertyName: "holeRadiusPercent", modelName: "@HoleRadiusPercent", displayName: "Hole Radius Percent", localizationId: "DevExpress.XtraCharts.DoughnutSeriesView.HoleRadiusPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 40, editorOptions: { min: 0, max: 100 } };
            var minAllowedSizePercentage = { propertyName: "minAllowedSizePercentage", modelName: "@MinAllowedSizePercentage", displayName: "Min Allowed Size Percentage", localizationId: "DevExpress.XtraCharts.PieSeriesView.MinAllowedSizePercentage", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 50, editorOptions: { min: 0, max: 100 } };
            var rotation = { propertyName: "rotation", modelName: "@Rotation", displayName: "Rotation", localizationId: "DevExpress.XtraCharts.PieSeriesView.Rotation", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var heightToWidthRatio = { propertyName: "heightToWidthRatio", modelName: "@HeightToWidthRatio", displayName: "Height to Width Ratio", localizationId: "DevExpress.XtraCharts.PieSeriesView.HeightToWidthRatio", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { min: 0 } };
            var border4 = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.PieSeriesView.Border", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: borderInfo, };
            var fillStyle5 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.PieSeriesView.FillStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, from: Chart.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Chart.FillStyle.toJson };
            var runtimeExploding = { propertyName: "runtimeExploding", modelName: "@RuntimeExploding", displayName: "Runtime Exploding", localizationId: "DevExpress.XtraCharts.PieSeriesView.RuntimeExploding", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var explodedDistancePercentage = { propertyName: "explodedDistancePercentage", modelName: "@ExplodedDistancePercentage", displayName: "Exploded Distance Percentage", localizationId: "DevExpress.XtraCharts.PieSeriesViewBase.ExplodedDistancePercentage", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 10, editorOptions: { min: 1 } };
            var explodeMode = {
                propertyName: "explodeMode", modelName: "@ExplodeMode", displayName: "Explode Mode", localizationId: "DevExpress.XtraCharts.PieSeriesViewBase.ExplodeMode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "All", displayValue: "All", localizationId: 'DevExpress.XtraCharts.PieExplodeMode.All' }, { value: "MinValue", displayValue: "MinValue" }, { value: "MaxValue", displayValue: "MaxValue" }, { value: "UsePoints", displayValue: "UsePoints" }, { value: "UseFilters", displayValue: "UseFilters" }, { value: "Others", displayValue: "Others", localizationId: 'DevExpress.XtraCharts.PieExplodeMode.Others' }], defaultVal: "None"
            };
            var sweepDirection = {
                propertyName: "sweepDirection", modelName: "@SweepDirection", displayName: "Sweep Direction", localizationId: "DevExpress.XtraCharts.PieSeriesViewBase.SweepDirection", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Counterclockwise", displayValue: "Counterclockwise", localizationId: 'DevExpress.XtraCharts.PieSweepDirection.Counterclockwise' }, { value: "Clockwise", displayValue: "Clockwise", localizationId: 'DevExpress.XtraCharts.PieSweepDirection.Clockwise' }], defaultVal: "Counterclockwise"
            };
            var totalLabelInfo = [Chart.textColor, Chart.backColor, enableAntialiasing, Chart.maxWidth, Chart.maxLineCount, Chart.textAlignment, Chart.textPattern, visible, Chart.tag, Chart.font12, border, fillStyle, shadow];
            var totalLabel = { propertyName: "totalLabel", modelName: "TotalLabel", displayName: "Total Label", localizationId: "DevExpress.XtraCharts.PieSeriesView.TotalLabel", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: totalLabelInfo, };
            var nestedDoughnutSeriesViewinfo = [weight, innerIndent, group, holeRadiusPercent, minAllowedSizePercentage, rotation, heightToWidthRatio, border4, fillStyle5, runtimeExploding, explodedDistancePercentage, explodeMode, sweepDirection, Chart.tag, totalLabel];
            var thickness2 = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", localizationId: "DevExpress.XtraCharts.LineStyle.Thickness", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { min: 1 } };
            var lineStyleInfo1 = [thickness2, dashStyle, lineJoin, Chart.tag,];
            var lineStyle2 = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", localizationId: "DevExpress.XtraCharts.SwiftPlotSeriesView.LineStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: lineStyleInfo1, };
            var antialiasing = { propertyName: "antialiasing", modelName: "@Antialiasing", displayName: "Antialiasing", localizationId: "DevExpress.XtraCharts.SwiftPlotSeriesView.Antialiasing", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var swiftPlotSeriesViewinfo = [lineStyle2, antialiasing, Chart.axisXName, Chart.axisYName, Chart.paneName, aggregateFunction, color1, Chart.tag,];
            var holeRadiusPercent1 = { propertyName: "holeRadiusPercent", modelName: "@HoleRadiusPercent", displayName: "Hole Radius Percent", localizationId: "DevExpress.XtraCharts.Funnel3DSeriesView.HoleRadiusPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 90, editorOptions: { min: 0, max: 100 } };
            var heightToWidthRatio1 = { propertyName: "heightToWidthRatio", modelName: "@HeightToWidthRatio", displayName: "Height to Width Ratio", localizationId: "DevExpress.XtraCharts.FunnelSeriesViewBase.HeightToWidthRatio", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1 };
            var pointDistance = { propertyName: "pointDistance", modelName: "@PointDistance", displayName: "Point Distance", localizationId: "DevExpress.XtraCharts.FunnelSeriesViewBase.PointDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0, editorOptions: { min: 0 } };
            var funnel3DSeriesViewinfo = [holeRadiusPercent1, heightToWidthRatio1, pointDistance, Chart.tag,];
            var border5 = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.FunnelSeriesView.Border", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: borderInfo, };
            var fillStyle6 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.FunnelSeriesView.FillStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, from: Chart.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Chart.FillStyle.toJson };
            var alignToCenter = { propertyName: "alignToCenter", modelName: "@AlignToCenter", displayName: "Align to Center", localizationId: "DevExpress.XtraCharts.FunnelSeriesView.AlignToCenter", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var heightToWidthRatioAuto = { propertyName: "heightToWidthRatioAuto", modelName: "@HeightToWidthRatioAuto", displayName: "Height to Width Ratio Auto", localizationId: "DevExpress.XtraCharts.FunnelSeriesView.HeightToWidthRatioAuto", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var funnelSeriesViewinfo = [border5, fillStyle6, alignToCenter, heightToWidthRatioAuto, heightToWidthRatio1, pointDistance, Chart.tag,];
            var scatterLineSeriesViewinfo = [lineStyle, lineMarkerOptions, markerVisibility, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var bubbleMarkerOptionsInfo = [kind, starPointCount, fillStyle1, borderVisible, borderColor, Chart.tag,];
            var bubbleMarkerOptions = { propertyName: "bubbleMarkerOptions", modelName: "BubbleMarkerOptions", displayName: "Bubble Marker Options", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.BubbleMarkerOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: bubbleMarkerOptionsInfo, };
            var autoSize = { propertyName: "autoSize", modelName: "@AutoSize", displayName: "Automatic Size", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.AutoSize", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var maxSize = { propertyName: "maxSize", modelName: "@MaxSize", displayName: "Max Size", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.MaxSize", editor: Chart.editorTemplates.maxSize, defaultVal: 0.9 };
            var minSize = { propertyName: "minSize", modelName: "@MinSize", displayName: "Min Size", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.MinSize", editor: Chart.editorTemplates.minSize, defaultVal: 0.3, editorOptions: { min: 0 } };
            var transparency6 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.Transparency", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var bubbleSeriesViewinfo = [bubbleMarkerOptions, autoSize, maxSize, minSize, transparency6, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var lineTensionPercent = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.Spline3DSeriesView.LineTensionPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
            var spline3DSeriesViewinfo = [lineTensionPercent, lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Chart.tag,];
            var lineTensionPercent1 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.SplineArea3DSeriesView.LineTensionPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
            var splineArea3DSeriesViewinfo = [lineTensionPercent1, areaWidth, aggregateFunction2, transparency4, color1, Chart.tag,];
            var lineTensionPercent2 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.FullStackedSplineArea3DSeriesView.LineTensionPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
            var fullStackedSplineArea3DSeriesViewinfo = [lineTensionPercent2, areaWidth, aggregateFunction2, transparency4, color1, Chart.tag,];
            var lineTensionPercent3 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.SplineAreaSeriesView.LineTensionPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
            var splineAreaSeriesViewinfo = [lineTensionPercent3, border, fillStyle, markerOptions, transparency3, markerVisibility, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var lineTensionPercent4 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.FullStackedSplineAreaSeriesView.LineTensionPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
            var fullStackedSplineAreaSeriesViewinfo = [lineTensionPercent4, fillStyle, transparency, enableAntialiasing, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var lineTensionPercent5 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.StackedSplineArea3DSeriesView.LineTensionPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
            var stackedSplineArea3DSeriesViewinfo = [lineTensionPercent5, areaWidth, aggregateFunction2, transparency4, color1, Chart.tag,];
            var lineTensionPercent6 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.SplineSeriesView.LineTensionPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
            var splineSeriesViewinfo = [lineTensionPercent6, lineStyle, lineMarkerOptions, markerVisibility, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var lineTensionPercent7 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.StackedSplineAreaSeriesView.LineTensionPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
            var stackedSplineAreaSeriesViewinfo = [lineTensionPercent7, border, fillStyle, transparency, enableAntialiasing, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var area3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency4, color1, Chart.tag,];
            var fullStackedArea3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency4, color1, Chart.tag,];
            var border6 = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.RadarAreaSeriesView.Border", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: borderInfo, };
            var markerOptions1 = { propertyName: "markerOptions", modelName: "MarkerOptions", displayName: "Marker Options", localizationId: "DevExpress.XtraCharts.RadarAreaSeriesView.MarkerOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: markerOptionsInfo, };
            var polarAreaSeriesViewinfo = [border6, fillStyle2, markerOptions1, transparency1, markerVisibility1, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var radarAreaSeriesViewinfo = [border6, fillStyle2, markerOptions1, transparency1, markerVisibility1, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var stackedArea3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency4, color1, Chart.tag,];
            var fullStackedBar3DSeriesViewinfo = [barWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Chart.tag,];
            var barDistance4 = { propertyName: "barDistance", modelName: "@BarDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideBar3DSeriesView.BarDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var barDistanceFixed4 = { propertyName: "barDistanceFixed", modelName: "@BarDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideBar3DSeriesView.BarDistanceFixed", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
            var equalBarWidth4 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideBar3DSeriesView.EqualBarWidth", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var sideBySideBar3DSeriesViewinfo = [barDistance4, barDistanceFixed4, equalBarWidth4, barWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Chart.tag,];
            var stackedBar3DSeriesViewinfo = [barWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Chart.tag,];
            var polarLineSeriesViewinfo = [lineStyle1, closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var radarLineSeriesViewinfo = [lineStyle1, closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var holeRadiusPercent2 = { propertyName: "holeRadiusPercent", modelName: "@HoleRadiusPercent", displayName: "Hole Radius Percent", localizationId: "DevExpress.XtraCharts.Doughnut3DSeriesView.HoleRadiusPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 60, editorOptions: { min: 0, max: 100 } };
            var depth = { propertyName: "depth", modelName: "@Depth", displayName: "Depth", localizationId: "DevExpress.XtraCharts.Pie3DSeriesView.Depth", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 15, editorOptions: { min: 1, max: 100 } };
            var sizeAsPercentage = { propertyName: "sizeAsPercentage", modelName: "@SizeAsPercentage", displayName: "Size As Percentage", localizationId: "DevExpress.XtraCharts.Pie3DSeriesView.SizeAsPercentage", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 100, editorOptions: { min: 0, max: 100 } };
            var pieFillStyleInfo = [fillMode1, Chart.fillStyleOptionsSerialize, Chart.tag,];
            var pieFillStyle = { propertyName: "pieFillStyle", modelName: "PieFillStyle", displayName: "Pie Fill Style", localizationId: "DevExpress.XtraCharts.Pie3DSeriesView.PieFillStyle", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: pieFillStyleInfo, };
            var doughnut3DSeriesViewinfo = [holeRadiusPercent2, depth, sizeAsPercentage, pieFillStyle, explodedDistancePercentage, explodeMode, sweepDirection, Chart.tag,];
            var holeRadiusPercent3 = { propertyName: "holeRadiusPercent", modelName: "@HoleRadiusPercent", displayName: "Hole Radius Percent", localizationId: "DevExpress.XtraCharts.DoughnutSeriesView.HoleRadiusPercent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 60, editorOptions: { min: 0, max: 100 } };
            var doughnutSeriesViewinfo = [holeRadiusPercent3, minAllowedSizePercentage, rotation, heightToWidthRatio, border4, fillStyle5, runtimeExploding, explodedDistancePercentage, explodeMode, sweepDirection, Chart.tag, totalLabel];
            var size2 = { propertyName: "size", modelName: "@Size", displayName: "Size", localizationId: "DevExpress.XtraCharts.SimpleMarker.Size", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 8, editorOptions: { min: 1 } };
            var pointMarkerOptionsInfo = [size2, kind, starPointCount, fillStyle1, borderVisible, borderColor, Chart.tag,];
            var pointMarkerOptions = { propertyName: "pointMarkerOptions", modelName: "PointMarkerOptions", displayName: "Point Marker Options", localizationId: "DevExpress.XtraCharts.RadarPointSeriesView.PointMarkerOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: pointMarkerOptionsInfo, };
            var polarPointSeriesViewinfo = [pointMarkerOptions, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var arrowWidth = { propertyName: "arrowWidth", modelName: "@ArrowWidth", displayName: "Arrow Width", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.ArrowWidth", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 7, editorOptions: { min: 1 }, validationRules: arrowWidthValidationRules };
            var arrowHeight = { propertyName: "arrowHeight", modelName: "@ArrowHeight", displayName: "Arrow Height", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.ArrowHeight", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 5, editorOptions: { min: 1 } };
            var minIndent = { propertyName: "minIndent", modelName: "@MinIndent", displayName: "Min Indent", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.MinIndent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 2, editorOptions: { min: 0 } };
            var thickness3 = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.Thickness", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 3, editorOptions: { min: 1 } };
            var visible1 = { propertyName: "visible", modelName: "@Visible", displayName: "Visible", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.Visible", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var colorSource = {
                propertyName: "colorSource", modelName: "@ColorSource", displayName: "Color Source", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.ColorSource", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "ParentColor", displayValue: "ParentColor" }, { value: "ParentBorderColor", displayValue: "ParentBorderColor" }, { value: "ChildColor", displayValue: "ChildColor" }, { value: "ChildBorderColor", displayValue: "ChildBorderColor" }, { value: "OwnColor", displayValue: "OwnColor" }], defaultVal: "ParentColor"
            };
            var color4 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Chart.editorTemplates.undoCustomColorEditor, defaultVal: "transparent" };
            var inFront = { propertyName: "inFront", modelName: "@InFront", displayName: "In Front", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.InFront", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var linkOptionsInfo = [arrowWidth, arrowHeight, minIndent, thickness3, visible1, colorSource, color4, inFront, Chart.tag,];
            var linkOptions = { propertyName: "linkOptions", modelName: "LinkOptions", displayName: "Link Options", localizationId: "DevExpress.XtraCharts.GanttSeriesView.LinkOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: linkOptionsInfo, };
            var minValueMarkerInfo = [color2, size1, kind, starPointCount, fillStyle1, borderVisible, borderColor, Chart.tag,];
            var minValueMarker = { propertyName: "minValueMarker", modelName: "MinValueMarker", displayName: "Min Value Marker", localizationId: "DevExpress.XtraCharts.RangeBarSeriesView.MinValueMarker", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: minValueMarkerInfo, };
            var maxValueMarkerInfo = [color2, size1, kind, starPointCount, fillStyle1, borderVisible, borderColor, Chart.tag,];
            var maxValueMarker = { propertyName: "maxValueMarker", modelName: "MaxValueMarker", displayName: "Max Value Marker", localizationId: "DevExpress.XtraCharts.RangeBarSeriesView.MaxValueMarker", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: maxValueMarkerInfo, };
            var minValueMarkerVisibility = {
                propertyName: "minValueMarkerVisibility", modelName: "@MinValueMarkerVisibility", displayName: "Min Value Marker Visibility", localizationId: "DevExpress.XtraCharts.RangeBarSeriesView.MinValueMarkerVisibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var maxValueMarkerVisibility = {
                propertyName: "maxValueMarkerVisibility", modelName: "@MaxValueMarkerVisibility", displayName: "Max Value Marker Visibility", localizationId: "DevExpress.XtraCharts.RangeBarSeriesView.MaxValueMarkerVisibility", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
            };
            var overlappedGanttSeriesViewinfo = [linkOptions, minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var radarPointSeriesViewinfo = [pointMarkerOptions, aggregateFunction1, shadow1, colorEach, color1, Chart.tag,];
            var barDistance5 = { propertyName: "barDistance", modelName: "@BarDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideGanttSeriesView.BarDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var barDistanceFixed5 = { propertyName: "barDistanceFixed", modelName: "@BarDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideGanttSeriesView.BarDistanceFixed", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
            var equalBarWidth5 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideGanttSeriesView.EqualBarWidth", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var sideBySideGanttSeriesViewinfo = [barDistance5, barDistanceFixed5, equalBarWidth5, linkOptions, minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var areaSeriesViewinfo = [border, fillStyle, markerOptions, transparency3, markerVisibility, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var fillMode2 = {
                propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", localizationId: "DevExpress.XtraCharts.CandleStickReductionOptions.FillMode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "FilledOnReduction", displayValue: "FilledOnReduction" }, { value: "FilledOnIncrease", displayValue: "FilledOnIncrease" }, { value: "AlwaysEmpty", displayValue: "AlwaysEmpty" }, { value: "AlwaysFilled", displayValue: "AlwaysFilled" }], defaultVal: "FilledOnReduction"
            };
            var color5 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.ReductionStockOptions.Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, editor: Designer.Widgets.editorTemplates.customColorEditor, defaultVal: "255,255,0,0" };
            var level = {
                propertyName: "level", modelName: "@Level", displayName: "Level", localizationId: "DevExpress.XtraCharts.ReductionStockOptions.Level", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Low", displayValue: "Low", localizationId: 'DevExpress.XtraCharts.StockLevel.Low' }, { value: "High", displayValue: "High", localizationId: 'DevExpress.XtraCharts.StockLevel.High' }, { value: "Open", displayValue: "Open", localizationId: 'DevExpress.XtraCharts.StockLevel.Open' }, { value: "Close", displayValue: "Close", localizationId: 'DevExpress.XtraCharts.StockLevel.Close' }], defaultVal: "Close"
            };
            var visible2 = { propertyName: "visible", modelName: "@Visible", displayName: "Visible", localizationId: "DevExpress.XtraCharts.ReductionStockOptions.Visible", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var colorMode = {
                propertyName: "colorMode", modelName: "@ColorMode", displayName: "Color Mode", localizationId: "DevExpress.XtraCharts.ReductionStockOptions.ColorMode", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "PreviousToCurrentPoint", displayValue: "PreviousToCurrentPoint" }, { value: "OpenToCloseValue", displayValue: "OpenToCloseValue" }], defaultVal: "PreviousToCurrentPoint"
            };
            var reductionOptionsInfo = [fillMode2, color5, level, visible2, colorMode, Chart.tag,];
            var reductionOptions = { propertyName: "reductionOptions", modelName: "ReductionOptions", displayName: "Reduction Options", localizationId: "DevExpress.XtraCharts.CandleStickSeriesView.ReductionOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: reductionOptionsInfo, };
            var levelLineLength = { propertyName: "levelLineLength", modelName: "@LevelLineLength", displayName: "Level Line Length", localizationId: "DevExpress.XtraCharts.FinancialSeriesViewBase.LevelLineLength", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0.25, editorOptions: { min: 1 } };
            var lineThickness1 = { propertyName: "lineThickness", modelName: "@LineThickness", displayName: "Line Thickness", localizationId: "DevExpress.XtraCharts.FinancialSeriesViewBase.LineThickness", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 2, editorOptions: { min: 1 } };
            var reductionOptionsInfo1 = [color5, level, visible2, colorMode, Chart.tag,];
            var reductionOptions1 = { propertyName: "reductionOptions", modelName: "ReductionOptions", displayName: "Reduction Options", localizationId: "DevExpress.XtraCharts.FinancialSeriesViewBase.ReductionOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: reductionOptionsInfo1, };
            var candleStickSeriesViewinfo = [reductionOptions, levelLineLength, lineThickness1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var fullStackedAreaSeriesViewinfo = [fillStyle, transparency, enableAntialiasing, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var fullStackedBarSeriesViewinfo = [barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var line3DSeriesViewinfo = [lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Chart.tag,];
            var lineSeriesViewinfo = [lineStyle, lineMarkerOptions, markerVisibility, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var manhattanBarSeriesViewinfo = [barWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Chart.tag,];
            var overlappedRangeBarSeriesViewinfo = [minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var pie3DSeriesViewinfo = [depth, sizeAsPercentage, pieFillStyle, explodedDistancePercentage, explodeMode, sweepDirection, Chart.tag,];
            var pieSeriesViewinfo = [minAllowedSizePercentage, rotation, heightToWidthRatio, border4, fillStyle5, runtimeExploding, explodedDistancePercentage, explodeMode, sweepDirection, Chart.tag, totalLabel];
            var pointMarkerOptions1 = { propertyName: "pointMarkerOptions", modelName: "PointMarkerOptions", displayName: "Point Marker Options", localizationId: "DevExpress.XtraCharts.PointSeriesView.PointMarkerOptions", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: pointMarkerOptionsInfo, };
            var pointSeriesViewinfo = [pointMarkerOptions1, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var barDistance6 = { propertyName: "barDistance", modelName: "@BarDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideBarSeriesView.BarDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var barDistanceFixed6 = { propertyName: "barDistanceFixed", modelName: "@BarDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideBarSeriesView.BarDistanceFixed", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
            var equalBarWidth6 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideBarSeriesView.EqualBarWidth", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var sideBySideBarSeriesViewinfo = [barDistance6, barDistanceFixed6, equalBarWidth6, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var barDistance7 = { propertyName: "barDistance", modelName: "@BarDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideRangeBarSeriesView.BarDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 0 };
            var barDistanceFixed7 = { propertyName: "barDistanceFixed", modelName: "@BarDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideRangeBarSeriesView.BarDistanceFixed", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
            var equalBarWidth7 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideRangeBarSeriesView.EqualBarWidth", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: true };
            var sideBySideRangeBarSeriesViewinfo = [barDistance7, barDistanceFixed7, equalBarWidth7, minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var stackedAreaSeriesViewinfo = [border, fillStyle, transparency, enableAntialiasing, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var stackedBarSeriesViewinfo = [barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var invertedStep4 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StepLineSeriesView.InvertedStep", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var stepLineSeriesViewinfo = [invertedStep4, lineStyle, lineMarkerOptions, markerVisibility, enableAntialiasing, colorEach1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var showOpenClose = {
                propertyName: "showOpenClose", modelName: "@ShowOpenClose", displayName: "Show Open Close", localizationId: "DevExpress.XtraCharts.StockSeriesView.ShowOpenClose", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Both", displayValue: "Both", localizationId: 'DevExpress.XtraCharts.ErrorBarDirection.Both' }, { value: "Open", displayValue: "Open", localizationId: 'DevExpress.XtraCharts.StockLevel.Open' }, { value: "Close", displayValue: "Close", localizationId: 'DevExpress.XtraCharts.StockLevel.Close' }], defaultVal: "Both"
            };
            var stockSeriesViewinfo = [showOpenClose, levelLineLength, lineThickness1, reductionOptions1, shadow, Chart.paneName, Chart.axisXName, Chart.axisYName, aggregateFunction, color1, Chart.tag,];
            var invertedStep5 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StepLine3DSeriesView.InvertedStep", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false };
            var stepLine3DSeriesViewinfo = [invertedStep5, lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Chart.tag,];
            Chart.viewMapper = {
                FullStackedStepAreaSeriesView: fullStackedStepAreaSeriesViewinfo,
                PolarRangeAreaSeriesView: polarRangeAreaSeriesViewinfo,
                RadarRangeAreaSeriesView: radarRangeAreaSeriesViewinfo,
                RangeArea3DSeriesView: rangeArea3DSeriesViewinfo,
                RangeAreaSeriesView: rangeAreaSeriesViewinfo,
                StackedStepAreaSeriesView: stackedStepAreaSeriesViewinfo,
                StepArea3DSeriesView: stepArea3DSeriesViewinfo,
                StepAreaSeriesView: stepAreaSeriesViewinfo,
                SideBySideFullStackedBar3DSeriesView: sideBySideFullStackedBar3DSeriesViewinfo,
                SideBySideFullStackedBarSeriesView: sideBySideFullStackedBarSeriesViewinfo,
                SideBySideStackedBar3DSeriesView: sideBySideStackedBar3DSeriesViewinfo,
                SideBySideStackedBarSeriesView: sideBySideStackedBarSeriesViewinfo,
                FullStackedLine3DSeriesView: fullStackedLine3DSeriesViewinfo,
                FullStackedLineSeriesView: fullStackedLineSeriesViewinfo,
                ScatterPolarLineSeriesView: scatterPolarLineSeriesViewinfo,
                ScatterRadarLineSeriesView: scatterRadarLineSeriesViewinfo,
                StackedLine3DSeriesView: stackedLine3DSeriesViewinfo,
                StackedLineSeriesView: stackedLineSeriesViewinfo,
                NestedDoughnutSeriesView: nestedDoughnutSeriesViewinfo,
                SwiftPlotSeriesView: swiftPlotSeriesViewinfo,
                Funnel3DSeriesView: funnel3DSeriesViewinfo,
                FunnelSeriesView: funnelSeriesViewinfo,
                ScatterLineSeriesView: scatterLineSeriesViewinfo,
                BubbleSeriesView: bubbleSeriesViewinfo,
                Spline3DSeriesView: spline3DSeriesViewinfo,
                SplineArea3DSeriesView: splineArea3DSeriesViewinfo,
                FullStackedSplineArea3DSeriesView: fullStackedSplineArea3DSeriesViewinfo,
                SplineAreaSeriesView: splineAreaSeriesViewinfo,
                FullStackedSplineAreaSeriesView: fullStackedSplineAreaSeriesViewinfo,
                StackedSplineArea3DSeriesView: stackedSplineArea3DSeriesViewinfo,
                SplineSeriesView: splineSeriesViewinfo,
                StackedSplineAreaSeriesView: stackedSplineAreaSeriesViewinfo,
                Area3DSeriesView: area3DSeriesViewinfo,
                FullStackedArea3DSeriesView: fullStackedArea3DSeriesViewinfo,
                PolarAreaSeriesView: polarAreaSeriesViewinfo,
                RadarAreaSeriesView: radarAreaSeriesViewinfo,
                StackedArea3DSeriesView: stackedArea3DSeriesViewinfo,
                FullStackedBar3DSeriesView: fullStackedBar3DSeriesViewinfo,
                SideBySideBar3DSeriesView: sideBySideBar3DSeriesViewinfo,
                StackedBar3DSeriesView: stackedBar3DSeriesViewinfo,
                PolarLineSeriesView: polarLineSeriesViewinfo,
                RadarLineSeriesView: radarLineSeriesViewinfo,
                Doughnut3DSeriesView: doughnut3DSeriesViewinfo,
                DoughnutSeriesView: doughnutSeriesViewinfo,
                PolarPointSeriesView: polarPointSeriesViewinfo,
                OverlappedGanttSeriesView: overlappedGanttSeriesViewinfo,
                RadarPointSeriesView: radarPointSeriesViewinfo,
                SideBySideGanttSeriesView: sideBySideGanttSeriesViewinfo,
                AreaSeriesView: areaSeriesViewinfo,
                CandleStickSeriesView: candleStickSeriesViewinfo,
                FullStackedAreaSeriesView: fullStackedAreaSeriesViewinfo,
                FullStackedBarSeriesView: fullStackedBarSeriesViewinfo,
                Line3DSeriesView: line3DSeriesViewinfo,
                LineSeriesView: lineSeriesViewinfo,
                ManhattanBarSeriesView: manhattanBarSeriesViewinfo,
                OverlappedRangeBarSeriesView: overlappedRangeBarSeriesViewinfo,
                Pie3DSeriesView: pie3DSeriesViewinfo,
                PieSeriesView: pieSeriesViewinfo,
                PointSeriesView: pointSeriesViewinfo,
                SideBySideBarSeriesView: sideBySideBarSeriesViewinfo,
                SideBySideRangeBarSeriesView: sideBySideRangeBarSeriesViewinfo,
                StackedAreaSeriesView: stackedAreaSeriesViewinfo,
                StackedBarSeriesView: stackedBarSeriesViewinfo,
                StepLineSeriesView: stepLineSeriesViewinfo,
                StockSeriesView: stockSeriesViewinfo,
                StepLine3DSeriesView: stepLine3DSeriesViewinfo,
            };
        })(Chart = Designer.Chart || (Designer.Chart = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var CoordinateGridViewModel = (function (_super) {
            __extends(CoordinateGridViewModel, _super);
            function CoordinateGridViewModel(options) {
                var _this = this;
                _super.call(this);
                this.width = ko.observable(0);
                this.height = ko.observable(0);
                this.verticalGridLines = ko.observableArray();
                this.horizontalGridLines = ko.observableArray();
                this.majorVerticalGridLines = ko.observableArray();
                this.majorHorizontalGridLines = ko.observableArray();
                this._disposables.push(ko.computed(function () {
                    var flip = !!ko.unwrap(options.flip);
                    var gridSize = Designer.unitsToPixel(options.snapGridSize(), options.measureUnit(), options.zoom());
                    var width = Designer.unitsToPixel(options.width(), options.measureUnit(), options.zoom());
                    _this.width(width + 0.5);
                    _this._initGrid(width, gridSize, _this.verticalGridLines, flip);
                    _this._initGrid(width, 4 * gridSize, _this.majorVerticalGridLines, flip);
                }));
                this._disposables.push(ko.computed(function () {
                    var gridSize = Designer.unitsToPixel(options.snapGridSize(), options.measureUnit(), options.zoom());
                    var height = Designer.unitsToPixel(options.height(), options.measureUnit(), options.zoom());
                    _this.height(height + 0.5);
                    _this._initGrid(height, gridSize, _this.horizontalGridLines);
                    _this._initGrid(height, 4 * gridSize, _this.majorHorizontalGridLines);
                }));
            }
            CoordinateGridViewModel.prototype._initGrid = function (length, gridSize, gridLines, flip) {
                if (flip === void 0) { flip = false; }
                var lines = gridLines.peek();
                var arrayLength = Math.ceil(length / gridSize), currentLength = lines.length, diff = arrayLength - currentLength;
                if (diff > 0) {
                    for (var index = currentLength; index < arrayLength; index++) {
                        gridLines.push({ coordVal: ko.observable((index + 1) * gridSize + 0.5), visible: ko.observable(true) });
                    }
                }
                if (flip) {
                    for (var index = 0, coordVal = length; index < gridLines.peek().length; index++, coordVal -= gridSize) {
                        gridLines.peek()[index].coordVal(coordVal - 0.5);
                        gridLines.peek()[index].visible(index < arrayLength);
                    }
                }
                else {
                    for (var index = 0, coordVal = 0; index < gridLines.peek().length; coordVal += gridSize, index++) {
                        gridLines.peek()[index].coordVal(coordVal + 0.5);
                        gridLines.peek()[index].visible(index < arrayLength);
                    }
                }
            };
            CoordinateGridViewModel.prototype.dispose = function () {
                _super.prototype.dispose.call(this);
                this.horizontalGridLines([]);
                this.verticalGridLines([]);
                this.majorHorizontalGridLines([]);
                this.majorVerticalGridLines([]);
            };
            return CoordinateGridViewModel;
        })(Designer.Disposable);
        Designer.CoordinateGridViewModel = CoordinateGridViewModel;
        ko.bindingHandlers['coordinateGrid'] = {
            init: function (element, valueAccessor) {
                $(element).children().remove();
                var values = valueAccessor(), gridViewModel = new CoordinateGridViewModel(values), templateHtml = DevExpress.Analytics.Widgets.Internal.getTemplate('dxrd-coordinategrid'), $element = $(element).append(templateHtml);
                ko.applyBindings(gridViewModel, $element.children()[0]);
                ko.utils.domNodeDisposal.addDisposeCallback($element.children()[0], function () {
                    gridViewModel.dispose();
                });
                return { controlsDescendantBindings: true };
            }
        };
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var RulerViewModel = (function (_super) {
            __extends(RulerViewModel, _super);
            function RulerViewModel(options) {
                var _this = this;
                _super.call(this);
                this.height = ko.observable(0);
                this.width = ko.observable(0);
                this.gridLines = ko.observableArray();
                this.majorGridLines = ko.observableArray();
                this.disable = null;
                this.defaultGridLinesCoordinate = ko.observable();
                this._disposables.push(ko.computed(function () {
                    var gridSize = Designer.unitsToPixel(25, options.units(), options.zoom());
                    _this.defaultGridLinesCoordinate({ x: 4, x1: "80%", x2: "100%", majorX1: "70%", majorX2: "100%" });
                    var flip = !!ko.unwrap(options.flip);
                    if (options.direction === "vertical") {
                        _this.height(options.length() + 0.5);
                        _this.width(20);
                        if (flip) {
                            flip = false;
                            _this.defaultGridLinesCoordinate({ x: 11, x1: "20%", x2: "0%", majorX1: "30%", majorX2: "0%" });
                        }
                    }
                    else {
                        _this.width(options.length() + 0.5);
                        _this.height(20);
                    }
                    _this._initGrid(options.length(), gridSize, _this.gridLines, flip);
                    _this._initGrid(options.length(), 4 * gridSize, _this.majorGridLines, flip);
                }));
                this.disable = options.disable;
            }
            RulerViewModel.prototype._initGrid = function (length, gridSize, gridLines, flip) {
                if (flip === void 0) { flip = false; }
                var arrayLength = Math.round(length / gridSize) + 1, currentLength = gridLines.peek().length, diff = arrayLength - currentLength;
                if (diff > 0) {
                    for (var index = 0; index < diff; index++) {
                        gridLines.push({ coordVal: ko.observable(0), text: ko.observable(0), visible: ko.observable(false) });
                    }
                }
                if (flip) {
                    for (var index = 0, coordVal = length; index < gridLines.peek().length; index++, coordVal -= gridSize) {
                        gridLines.peek()[index].coordVal(coordVal - 0.5);
                        gridLines.peek()[index].text(index);
                        gridLines.peek()[index].visible(index < arrayLength);
                    }
                }
                else {
                    for (var index = 0, coordVal = 0; index < gridLines.peek().length; coordVal += gridSize, index++) {
                        gridLines.peek()[index].coordVal(coordVal + 0.5);
                        gridLines.peek()[index].text(index);
                        gridLines.peek()[index].visible(index < arrayLength);
                    }
                }
            };
            return RulerViewModel;
        })(Designer.Disposable);
        Designer.RulerViewModel = RulerViewModel;
        ko.bindingHandlers['ruler'] = {
            init: function (element, valueAccessor) {
                $(element).children().remove();
                var values = valueAccessor(), options_ = $.extend({}, ko.unwrap(values), {}), zoom = options_.zoom, options = {
                    length: options_.length,
                    units: options_.units,
                    direction: options_.direction || "",
                    zoom: zoom,
                    flip: options_.flip,
                    disable: options_.disable
                }, rulerViewModel = new RulerViewModel(options), templateHtml = DevExpress.Analytics.Widgets.Internal.getTemplate('dxrd-ruler' + options.direction), $element = $(element).append(templateHtml);
                ko.applyBindings(rulerViewModel, $element.children()[0]);
                ko.utils.domNodeDisposal.addDisposeCallback($element.children()[0], function () {
                    rulerViewModel.dispose();
                    rulerViewModel.gridLines(null);
                    rulerViewModel.majorGridLines(null);
                });
                return { controlsDescendantBindings: true };
            }
        };
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var EditOptionsEditorNameEditorModel = (function (_super) {
                __extends(EditOptionsEditorNameEditorModel, _super);
                function EditOptionsEditorNameEditorModel(modelPropertyInfo, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, modelPropertyInfo, level, parentDisabled, textToSearch);
                    this.displayValue = ko.observable("");
                    var extesions = DevExpress.Report.EditingFieldExtensions.instance();
                    var editorOptions = modelPropertyInfo.editorOptions;
                    var categoriesToFilter = [];
                    if (editorOptions) {
                        categoriesToFilter = editorOptions.categories || extesions.categories(editorOptions.excludeCategories);
                    }
                    this.itemsProvider = {
                        getItems: function (path) {
                            var editorSet = extesions.editors();
                            var filteredEditorSet = !categoriesToFilter
                                ? editorSet
                                : editorSet.filter(function (e) { return categoriesToFilter.indexOf(e.category) !== -1; });
                            var editorMembers = filteredEditorSet.map(function (item) {
                                var mask = item.options && item.options["mask"];
                                return {
                                    name: item.name,
                                    displayName: item.displayName,
                                    specifics: "_none_",
                                    templateName: "dxrd-editingField-editor-treelist-item",
                                    title: item.displayName + (mask ? " [" + mask + "]" : "")
                                };
                            });
                            return $.Deferred().resolve(editorMembers).promise();
                        }
                    };
                    var editor = extesions.editor(this.value());
                    if (editor) {
                        this.value(editor.name);
                        this.displayValue(editor.displayName);
                    }
                    this.value.subscribe(function (newValue) {
                        var editor = extesions.editor(newValue);
                        if (editor) {
                            _this.value(editor.name);
                            _this.displayValue(editor.displayName);
                            return;
                        }
                        _this.displayValue("");
                        _this.value("");
                    });
                }
                return EditOptionsEditorNameEditorModel;
            })(DevExpress.Analytics.Widgets.Editor);
            Report.EditOptionsEditorNameEditorModel = EditOptionsEditorNameEditorModel;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var StylesEditorHeaderModel = (function () {
                function StylesEditorHeaderModel(styleName, styles, disabled) {
                    var _this = this;
                    this.displayExpr = "name";
                    this.valueExpr = "name";
                    this.displayCustomValue = true;
                    this.placeholder = DevExpress.Analytics.Localization.selectPlaceholder();
                    this.noDataText = DevExpress.Analytics.Localization.noDataText();
                    this.value = ko.pureComputed({
                        read: function () {
                            return styleName();
                        },
                        write: function (newVal) {
                            if (newVal !== DevExpress.Designer.getLocalization(StylesEditorHeaderModel.newItem, StylesEditorHeaderModel.newItemTextId)) {
                                styleName(newVal);
                            }
                        }
                    });
                    this.items = ko.pureComputed(function () {
                        var result = [new Report.StyleModel({ "@Name": DevExpress.Designer.getLocalization(StylesEditorHeaderModel.newItem, StylesEditorHeaderModel.newItemTextId) })];
                        if (styles && styles()) {
                            result.push.apply(result, styles());
                        }
                        return result;
                    });
                    this.onValueChanged = function (e) {
                        if (e.value === DevExpress.Designer.getLocalization(StylesEditorHeaderModel.newItem, StylesEditorHeaderModel.newItemTextId)) {
                            var newStyleName = Designer.getUniqueNameForNamedObjectsArray(styles(), "xrControlStyle"), newStyle = new Report.StyleModel({ "@Name": newStyleName });
                            styles.push(newStyle);
                            _this.value(newStyleName);
                        }
                    };
                    this.disabled = disabled;
                }
                StylesEditorHeaderModel.newItem = "Create New Style";
                StylesEditorHeaderModel.newItemTextId = "ASPxReportsStringId.ReportDesigner_StylesEditor_CreateNew";
                return StylesEditorHeaderModel;
            })();
            Report.StylesEditorHeaderModel = StylesEditorHeaderModel;
            ko.bindingHandlers['dxStylesEditor'] = {
                init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    $(element).children().remove();
                    var values = valueAccessor(), templateHtml = DevExpress.Analytics.Widgets.Internal.getTemplate('dx-propertieseditor'), $element = $(element).append(templateHtml);
                    var style = ko.pureComputed(function () {
                        var value = valueAccessor(), styles = value.styles && value.styles(), filtered = styles && styles.filter(function (item) {
                            return item.name() === valueAccessor().styleName();
                        });
                        return (filtered && filtered.length > 0) ? filtered[0] : null;
                    });
                    ko.applyBindings(bindingContext.createChildContext(new DevExpress.JS.Widgets.ObjectProperties(style, { editors: Report.styleSerializationInfo }, 1, viewModel.disabled, undefined, viewModel.textToSearch)), $element.children()[0]);
                    return { controlsDescendantBindings: true };
                }
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var DataBindingBase = (function (_super) {
                __extends(DataBindingBase, _super);
                function DataBindingBase(model, serializer) {
                    var _this = this;
                    _super.call(this);
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this._disposables.push(this.displayExpr = ko.pureComputed(function () {
                        var parameter = _this.parameter();
                        return parameter ? parameter.parameterName() : _this.dataMember();
                    }));
                }
                DataBindingBase.prototype.getInfo = function () {
                    return Report.dataBindingBaseSerializationInfo;
                };
                DataBindingBase.prototype._findDataSourceFromPath = function (path, dataSources) {
                    var dataSourceId = path.split('.')[0];
                    var dataSourceInfo = (dataSources || []).filter(function (dataSource) { return dataSource.ref === dataSourceId || dataSource.id === dataSourceId; })[0];
                    if (dataSourceInfo) {
                        return dataSourceInfo.data;
                    }
                    return null;
                };
                DataBindingBase.prototype.updateParameter = function (pathRequest, dataSources) {
                    this.parameter(this._findDataSourceFromPath(pathRequest.fullPath, dataSources)().filter(function (item) { return item.parameterName() === pathRequest.path; })[0]);
                    this.dataSource(null);
                };
                DataBindingBase.prototype.updateBinding = function (path, dataSources) {
                    if (!!path) {
                        var pathRequest = new DevExpress.JS.Widgets.PathRequest(path);
                        if (path.indexOf("Parameters.") === 0) {
                            this.updateParameter(pathRequest, dataSources);
                        }
                        else {
                            this.dataMember(pathRequest.path);
                            this.dataSource(this._findDataSourceFromPath(path, dataSources));
                            this.parameter(null);
                        }
                    }
                    else {
                        this.resetValue();
                    }
                };
                DataBindingBase.prototype.getValuePath = function (dataSourceHelper) {
                    if (this.parameter()) {
                        return "Parameters." + this.parameter().parameterName();
                    }
                    var dataSourceName = "";
                    if (this.dataSource()) {
                        var ds = dataSourceHelper.findDataSourceInfo(this.dataSource());
                        dataSourceName = ds && (ds.id || ds.ref);
                    }
                    return dataSourceName && this.dataMember() ? (dataSourceName + "." + this.dataMember()) : "";
                };
                DataBindingBase.prototype.generateValue = function (undoEngine, dataSourceHelper, dataSources) {
                    var _this = this;
                    if (!this.generatedValue) {
                        this._disposables.push(this.generatedValue = ko.computed({
                            read: function () {
                                return _this.getValuePath(dataSourceHelper);
                            },
                            write: function (val) {
                                undoEngine.start();
                                _this.updateBinding(val, dataSources);
                                undoEngine.end();
                            }
                        }));
                    }
                    return this.generatedValue;
                };
                DataBindingBase.prototype.resetValue = function () {
                    this.parameter(null);
                    this.dataSource(null);
                    this.dataMember(null);
                };
                DataBindingBase.prototype.isEmpty = function () {
                    return !(this.dataMember() || this.dataSource() || this.parameter());
                };
                return DataBindingBase;
            })(Designer.Disposable);
            Report.DataBindingBase = DataBindingBase;
            var DataBinding = (function (_super) {
                __extends(DataBinding, _super);
                function DataBinding(model, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer);
                    this.visible = ko.observable(true);
                    this.disabled = ko.pureComputed(function () {
                        var dataMember = _this.dataMember();
                        return !(_this.parameter() || dataMember);
                    });
                    this._disposables.push(this.disabled.subscribe(function (newVal) {
                        newVal && _this.formatString("");
                    }));
                    this._disposables.push(this.disabled);
                }
                DataBinding.initialize = function (model, serializer) {
                    var currentDataBindings = DevExpress.JS.Utils.deserializeArray(model, function (item) { return new DataBinding(item, serializer); });
                    (this["allDataBindings"] || []).forEach(function (value) {
                        if (currentDataBindings().filter(function (databinding) { return databinding.propertyName() === value; }).length === 0)
                            currentDataBindings.push(new DataBinding({ "@PropertyName": value }, serializer));
                    });
                    currentDataBindings()["findBinding"] = function (bindingName) {
                        return currentDataBindings().filter(function (binding) { return binding.propertyName() === bindingName; })[0];
                    };
                    return currentDataBindings;
                };
                DataBinding.prototype.getInfo = function () {
                    return Report.dataBindingSerializationInfo;
                };
                DataBinding.prototype.updateParameter = function (pathRequest, dataSources) {
                    _super.prototype.updateParameter.call(this, pathRequest, dataSources);
                    this.dataMember(pathRequest.path);
                };
                DataBinding.prototype.resetValue = function () {
                    _super.prototype.resetValue.call(this);
                    this.formatString("");
                };
                return DataBinding;
            })(DataBindingBase);
            Report.DataBinding = DataBinding;
            Report.dataBindingBaseSerializationInfo = [
                { propertyName: "parameter", modelName: "@Parameter", link: true },
                { propertyName: "dataSource", modelName: "@DataSource", link: true },
                { propertyName: "dataMember", modelName: "@DataMember" }
            ];
            Report.dataBindingSerializationInfo = Report.dataBindingBaseSerializationInfo.concat([
                { propertyName: "propertyName", modelName: "@PropertyName" },
                { propertyName: "formatString", modelName: "@FormatString" }
            ]);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            function getFirstSurfaceParentByType(target, type) {
                return target instanceof type ? target : getFirstSurfaceParentByType(target.parent, type);
            }
            ;
            function getExpressionPath(container, path) {
                var parentParametersPath = "Parameters.";
                if (path.indexOf(parentParametersPath) !== -1) {
                    return '?' + path.substring(parentParametersPath.length);
                }
                var dataSourceInfo = Report.getDataSourceDataMember(container);
                path = (dataSourceInfo.dataMember && path.indexOf(dataSourceInfo.dataMember) === 0) ? path.slice(dataSourceInfo.dataMember.length + 1) : path;
                return '[' + path + ']';
            }
            Report.getExpressionPath = getExpressionPath;
            function createPictureBox(container, bindingPath, dataBindingMode) {
                var newControl = container.createChild($.extend({ "@ControlType": "XRPictureBox" }, Report.controlsFactory.controlsMap["XRPictureBox"].defaultVal));
                if (dataBindingMode === Report.DataBindingMode.Bindings) {
                    var binding = newControl["dataBindings"]().findBinding("ImageSource");
                    binding.dataMember(bindingPath);
                }
                else {
                    var binding = newControl["expressionObj"].getExpression("ImageSource", "BeforePrint");
                    binding.value(getExpressionPath(container, bindingPath));
                }
                return newControl;
            }
            function selectTreeListItem(item, event) {
                if (item instanceof DevExpress.Analytics.Widgets.TreeListItemViewModel && !item.isMultiSelected() && !item.isSelected())
                    item.toggleSelected(item, event);
            }
            Report.selectTreeListItem = selectTreeListItem;
            function getUsefulReportWidth(surface) {
                var report = surface && surface.getControlModel();
                return surface ?
                    Designer.Size.fromString(((report.pageWidth() - report.margins.left() - report.margins.right()) / (surface.dpi() / 100)).toString() + ", 23") :
                    Designer.Size.fromString("200, 23");
            }
            function createSimpleControl(controlType, dropTargetControl) {
                return dropTargetControl.createChild($.extend({ "@ControlType": controlType }, Report.controlsFactory.controlsMap[controlType].defaultVal));
            }
            function assignBinding(control, container, bindingName, item, dataBindingMode) {
                if (dataBindingMode === Report.DataBindingMode.Bindings) {
                    var binding = control.dataBindings().findBinding(bindingName);
                    if (item.path.indexOf("Parameters.") === -1) {
                        binding.dataMember(new DevExpress.JS.Widgets.PathRequest(item.path).path);
                    }
                    else {
                        binding.dataMember(item.data.name);
                        binding.parameter(item.data);
                    }
                }
                else {
                    var binding = control.expressionObj.getExpression(bindingName, "BeforePrint");
                    var path = item.data instanceof Report.Parameter ? item.path : new DevExpress.JS.Widgets.PathRequest(item.path).path;
                    binding.value(getExpressionPath(container, path));
                }
                return control;
            }
            function isList(data) {
                return data.isList === true || data.specifics === "List" || data.specifics === "ListSource";
            }
            Report.isList = isList;
            var FieldListDragDropHelper = (function () {
                function FieldListDragDropHelper(_dataBindingMode, _size) {
                    this._dataBindingMode = _dataBindingMode;
                    this._size = _size;
                    this._getItemsFromList = function (treeListItem, childCollection) {
                        var deferred = $.Deferred();
                        treeListItem.getItems().done(function (items) {
                            var simpleFields = items.filter(function (item) { return !isList(item.data); });
                            childCollection.push.apply(childCollection, simpleFields);
                            deferred.resolve();
                        });
                        return deferred.promise();
                    };
                }
                FieldListDragDropHelper.prototype._createTable = function (parent, items) {
                    var _this = this;
                    if (items.length === 0)
                        return null;
                    var tableSize = this._size ? [this._size.width(), this._size.height()].join(",") : "200, 23";
                    var table = parent.getControlFactory().createControl({ "@ControlType": "XRTable", "@SizeF": tableSize }, parent);
                    var tableRow = table.createChild({ "@ControlType": "XRTableRow", "@Weight": "1" });
                    items.forEach(function (item) {
                        var cell = createSimpleControl("XRTableCell", tableRow);
                        if (item.data.specifics !== "Array") {
                            assignBinding(cell, tableRow, "Text", item, _this._dataBindingMode);
                        }
                        else {
                            var path = item.data instanceof Report.Parameter ? item.path : new DevExpress.JS.Widgets.PathRequest(item.path).path;
                            cell.addChild(createPictureBox(cell, path, _this._dataBindingMode));
                        }
                    });
                    return table;
                };
                FieldListDragDropHelper.prototype._getFirstLevelItems = function (treeListItems) {
                    var deferred = $.Deferred();
                    var promises = [];
                    var childCollection = [];
                    for (var i = 0; i < treeListItems.length; i++) {
                        if (!isList(treeListItems[i].data))
                            childCollection.push.apply(childCollection, [treeListItems[i]]);
                        else
                            promises.push(this._getItemsFromList(treeListItems[i], childCollection));
                    }
                    $.when.apply($, promises).done(function () {
                        deferred.resolve(childCollection);
                    });
                    return deferred.promise();
                };
                FieldListDragDropHelper.prototype.createTableFromListSource = function (treeListItem, parent) {
                    var _this = this;
                    var deferred = $.Deferred();
                    treeListItem.getItems().done(function (items) {
                        if (items.length === 0)
                            deferred.resolve(null);
                        var simpleFields = items.filter(function (item) { return !isList(item.data); });
                        if (simpleFields.length === 1) {
                            var control = (Report.memberControlsMap[simpleFields.specifics] || Report.memberControlsMap["Default"]).drop(simpleFields[0], parent, _this._dataBindingMode);
                            deferred.resolve(control);
                        }
                        else if (simpleFields.length > 1) {
                            deferred.resolve(_this._createTable(parent, simpleFields));
                        }
                        else {
                            _this.createTableFromItems(items, parent).done(function (table) { return deferred.resolve(table); });
                        }
                    });
                    return deferred.promise();
                };
                FieldListDragDropHelper.prototype.createTableFromItems = function (treeListItems, parent) {
                    var _this = this;
                    var deferred = $.Deferred();
                    this._getFirstLevelItems(treeListItems).done(function (items) { return deferred.resolve(_this._createTable(parent, items)); });
                    return deferred.promise();
                };
                return FieldListDragDropHelper;
            })();
            Report.memberControlsMap = {
                "Array": {
                    drop: function (treeListItem, dropTargetControl, dataBindingMode) {
                        return createPictureBox(dropTargetControl, new DevExpress.JS.Widgets.PathRequest(treeListItem.path).path, dataBindingMode);
                    },
                    size: function (surface) {
                        return Designer.Size.fromString("100, 100");
                    }
                },
                "Bool": {
                    drop: function (treeListItem, dropTargetControl, dataBindingMode) {
                        var control = createSimpleControl("XRCheckBox", dropTargetControl);
                        assignBinding(control, dropTargetControl, "CheckState", treeListItem, dataBindingMode);
                        control.text(treeListItem.data.displayName);
                        return control;
                    },
                    size: function (surface) {
                        return Designer.Size.fromString("100, 23");
                    }
                },
                "List": {
                    drop: function (treeListItem, dropTargetControl, dataBindingMode, size) {
                        var helper = new FieldListDragDropHelper(dataBindingMode, size);
                        if (treeListItem.data.specifics === "ListSource")
                            return helper.createTableFromListSource(treeListItem, dropTargetControl);
                        return helper.createTableFromItems([treeListItem], dropTargetControl);
                    },
                    size: getUsefulReportWidth,
                    adjustDropTarget: function (dropTarget) {
                        if (dropTarget instanceof Report.ReportSurface)
                            return dropTarget;
                        var targetSurface = getFirstSurfaceParentByType(dropTarget, Report.BandSurface);
                        targetSurface.underCursor().x = 0;
                        return targetSurface;
                    }
                },
                "MultiList": {
                    drop: function (treeListItem, dropTargetControl, dataBindingMode, size) {
                        var helper = new FieldListDragDropHelper(dataBindingMode, size);
                        return helper.createTableFromItems(treeListItem.selectedItems(), dropTargetControl);
                    },
                    size: getUsefulReportWidth,
                    adjustDropTarget: function (dropTarget) {
                        if (dropTarget instanceof Report.ReportSurface)
                            return dropTarget;
                        var targetSurface = getFirstSurfaceParentByType(dropTarget, Report.BandSurface);
                        targetSurface.underCursor().x = 0;
                        return targetSurface;
                    }
                },
                "Default": {
                    drop: function (treeListItem, dropTargetControl, dataBindingMode) {
                        var control = createSimpleControl("XRLabel", dropTargetControl);
                        assignBinding(control, dropTargetControl, "Text", treeListItem, dataBindingMode);
                        return control;
                    },
                    size: function (surface) {
                        return Designer.Size.fromString("100, 23");
                    }
                }
            };
            var FieldListDragDropHandler = (function (_super) {
                __extends(FieldListDragDropHandler, _super);
                function FieldListDragDropHandler(surface, selection, undoEngine, snapHelper, dragHelperContent, dataSources, onComponentAdded) {
                    var _this = this;
                    _super.call(this, surface, selection, undoEngine, snapHelper, dragHelperContent);
                    this._getKey = function (item) { return (item.data.isList || item.isMultiSelected()) ? "List" : item.data.specifics; };
                    this._undoEngine = undoEngine;
                    this._dataSources = dataSources;
                    this._disposables.push(this.dataBindingMode = ko.computed(function () { return surface() && surface()._control.dataBindingMode || Report.DataBindingMode.Expressions; }));
                    this.cursor = 'arrow';
                    this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                    this.containment = '.dxrd-designer';
                    this["cursorAt"] = {
                        top: 0,
                        left: 0
                    };
                    this["helper"] = function (draggable, event) {
                        _super.prototype.helper.call(_this, draggable);
                        var item = draggable;
                        selectTreeListItem(item, event);
                        _this._setDragHelperContent(Report.memberControlsMap, _this._getKey(item));
                    };
                }
                FieldListDragDropHandler.prototype._setDragHelperContent = function (memberControlsMap, key) {
                    var size = (memberControlsMap[key] || memberControlsMap["Default"]).size(this.surface());
                    this.recalculateSize(size);
                    this.dragHelperContent.setContent(new Designer.Rectangle(0, 0, this._size.width(), this._size.height()));
                };
                FieldListDragDropHandler.prototype._getDropTarget = function (memberControlsMapElement) {
                    return memberControlsMapElement && memberControlsMapElement.adjustDropTarget && memberControlsMapElement.adjustDropTarget(this.selection.dropTarget) || this.selection.dropTarget;
                };
                FieldListDragDropHandler.prototype._needToChangeHelperContent = function (dragHelperContent, className) {
                    return dragHelperContent && dragHelperContent.className === className;
                };
                FieldListDragDropHandler.prototype._updateInnerControlSize = function (control) {
                    if (!control.rows)
                        return;
                    var cells = control.rows()[0].cells();
                    var innerControls = [];
                    cells.forEach(function (cell) {
                        innerControls = innerControls.concat(cell.controls());
                    });
                    if (innerControls.length === 0)
                        return;
                    var cellWidth = cells[0].width();
                    var cellHeight = cells[0].height();
                    innerControls.forEach(function (control) {
                        control.size.width(cellWidth);
                        control.size.height(cellHeight);
                    });
                };
                FieldListDragDropHandler.prototype._addControl = function (control, dropTarget) {
                    if (!control)
                        return;
                    this._undoEngine().start();
                    this.addControl(control, dropTarget, this._size);
                    this._updateInnerControlSize(control);
                    this._undoEngine().end();
                    this.onComponentAdded({ parent: dropTarget.getControlModel(), model: control });
                };
                FieldListDragDropHandler.prototype._isDefaultBindingAssigned = function (control, treeListItem) {
                    if (control["hasDefaultBindingProperty"] && !isList(treeListItem.data)) {
                        if (this.dataBindingMode() === Report.DataBindingMode.Bindings) {
                            var dataBinding = control.getDefaultBinding();
                            dataBinding.updateBinding(treeListItem.path, this._dataSources.peek());
                        }
                        else {
                            var dataSourceInfo = Report.getDataSourceDataMember(control);
                            var expression = control.getDefaultBinding();
                            var path = treeListItem.data instanceof Report.Parameter ? treeListItem.path : new DevExpress.JS.Widgets.PathRequest(treeListItem.path).path;
                            expression.value(getExpressionPath(control, path));
                        }
                        return true;
                    }
                    return false;
                };
                FieldListDragDropHandler.prototype.drag = function (event, ui) {
                    if (this.selection.dropTarget) {
                        var element = event.target;
                        var draggable = ko.dataFor(element);
                        var key = this._getKey(draggable), dropTarget = this._getDropTarget(Report.memberControlsMap[key]);
                        var dropTargetControl = dropTarget.getControlModel();
                        var boundedClass = "dxrd-image-ghost-bounded";
                        var dragHelperContent = this.dragHelperContent.controls()[0];
                        if (dropTargetControl["hasDefaultBindingProperty"] && !isList(draggable.data)) {
                            if (!this._needToChangeHelperContent(dragHelperContent, boundedClass)) {
                                var rect = new Designer.Rectangle(12, 12, 12, 12);
                                rect.className = boundedClass;
                                this._size.width(12);
                                this._size.height(12);
                                this.dragHelperContent.setContent(rect);
                            }
                            $(element).draggable("option", "snap", false);
                            this.snapHelper.deactivateSnapLines();
                            event.altKey = true;
                        }
                        else if (this._needToChangeHelperContent(dragHelperContent, boundedClass)) {
                            this._setDragHelperContent(Report.memberControlsMap, key);
                        }
                    }
                    _super.prototype.drag.call(this, event, ui);
                };
                FieldListDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
                    var _this = this;
                    if (this.selection.dropTarget) {
                        if (this.selection.dropTarget instanceof Report.ReportSurface)
                            return;
                        var position = this._getAbsoluteSurfacePosition(ui);
                        this.selection.dropTarget.underCursor().x = position.left - this.selection.dropTarget["absolutePosition"].x();
                        this.selection.dropTarget.underCursor().y = position.top - this.selection.dropTarget["absolutePosition"].y();
                        var item = draggable;
                        var key = item.data.isList ? "List" : item.data.specifics;
                        if (this.surface().isFit(this.selection.dropTarget)) {
                            var dropTarget = this._getDropTarget(Report.memberControlsMap[key]), dropTargetControl = dropTarget.getControlModel();
                            var isMultiSelect = item.selectedItems().length > 1;
                            if (!isMultiSelect && this._isDefaultBindingAssigned(dropTargetControl, item))
                                return;
                            dropTarget = dropTargetControl.getMetaData().isContainer ? dropTarget : dropTarget.parent;
                            if (!dropTarget.canDrop())
                                return;
                            if (!isMultiSelect && !isList(item.data)) {
                                var control = (Report.memberControlsMap[key] || Report.memberControlsMap["Default"]).drop(item, dropTarget.getControlModel(), this.dataBindingMode());
                                this._addControl(control, dropTarget);
                                return;
                            }
                            Report.memberControlsMap[isMultiSelect ? "MultiList" : key]
                                .drop(item, dropTarget.getControlModel(), this.dataBindingMode(), Report.memberControlsMap[isMultiSelect ? "MultiList" : key].size(this.surface()))
                                .done(function (control) {
                                _this._addControl(control, dropTarget);
                            });
                        }
                    }
                };
                return FieldListDragDropHandler;
            })(Designer.DragDropHandler);
            Report.FieldListDragDropHandler = FieldListDragDropHandler;
            var ReportToolboxDragDropHandler = (function (_super) {
                __extends(ReportToolboxDragDropHandler, _super);
                function ReportToolboxDragDropHandler(surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory, onComponentAdded) {
                    _super.call(this, surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory);
                    this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                }
                ReportToolboxDragDropHandler.prototype.dispose = function () {
                    this.surface = null;
                    this.dragHelperContent = null;
                    this.snapHelper = null;
                };
                ReportToolboxDragDropHandler.prototype.helper = function (draggable) {
                    _super.prototype.helper.call(this, draggable);
                    var toolboxItem = draggable;
                    if (toolboxItem.type === "XRTableOfContents") {
                        var width = this.surface().pageWidth() - (this.surface().margins.right() + this.surface().margins.left());
                        var size = new Designer.Size(width, 46);
                        this.recalculateSize(size);
                        this.dragHelperContent.setContent(new Designer.Rectangle(0, 0, width, this._size.height()));
                    }
                };
                ReportToolboxDragDropHandler.prototype._processProperty = function (propertyName, target, callback) {
                    if (target instanceof Object && !$.isFunction(target)) {
                        !!target[propertyName] && callback(target);
                        for (var name in target) {
                            if (target[name] instanceof Object && !$.isFunction(target[name])) {
                                this._processProperty(propertyName, target[name], callback);
                            }
                        }
                    }
                };
                ReportToolboxDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
                    var reportSurface = this.surface();
                    var toolboxItem = $.extend(true, {}, draggable);
                    this._processProperty("@Padding", toolboxItem.info, function (target) {
                        var model = Designer.Widgets.PaddingModel.from(target["@Padding"]);
                        Designer.Widgets.PaddingModel.unitProperties.forEach(function (name) {
                            model[name](model[name]() * reportSurface.dpi() / 100);
                        });
                        model.dpi(reportSurface.dpi());
                        target["@Padding"] = model.toString();
                    });
                    _super.prototype.doStopDrag.call(this, ui, toolboxItem);
                };
                ReportToolboxDragDropHandler.prototype.addControl = function (control, dropTargetSurface, size) {
                    if (control.controlType === "XRTableOfContents") {
                        var reportSurface = this.surface();
                        var reportModel = reportSurface.getControlModel();
                        var targetBand = getBandIfItDoesNotContainTOC(reportModel, "ReportHeaderBand") || getBandIfItDoesNotContainTOC(reportModel, "ReportFooterBand");
                        if (!targetBand)
                            return;
                        dropTargetSurface = Designer.findSurface(targetBand);
                        var tocModel = control;
                        tocModel.allLevels().forEach(function (lvl) {
                            lvl.height(Report.reculculateUnit(lvl.height(), targetBand.dpi()));
                        });
                    }
                    _super.prototype.addControl.call(this, control, dropTargetSurface, size);
                    this.onComponentAdded({ parent: dropTargetSurface.getControlModel(), model: control });
                };
                return ReportToolboxDragDropHandler;
            })(Designer.ToolboxDragDropHandler);
            Report.ReportToolboxDragDropHandler = ReportToolboxDragDropHandler;
            function getBandIfItDoesNotContainTOC(reportModel, bandType) {
                var band = (Designer.findFirstItemMatchesCondition(reportModel.bands(), function (item) { return item.controlType === bandType; }));
                if (band) {
                    return !!Report.bandControlsSomeXRTableOfContents(band) ? null : band;
                }
                return reportModel.createChild({ "@ControlType": bandType });
            }
            Report.getBandIfItDoesNotContainTOC = getBandIfItDoesNotContainTOC;
            var ReportSnapLinesCollector = (function (_super) {
                __extends(ReportSnapLinesCollector, _super);
                function ReportSnapLinesCollector(_rtl) {
                    _super.call(this);
                    this._rtl = _rtl;
                }
                ReportSnapLinesCollector.prototype._getCollection = function (parent) {
                    if (parent["controls"] && parent["controls"]().length > 0) {
                        return parent["controls"]();
                    }
                    else if (parent["rows"]) {
                        return parent["rows"]();
                    }
                    else if (parent["cells"]) {
                        return parent["cells"]();
                    }
                };
                ReportSnapLinesCollector.prototype._enumerateBandCollection = function (bandsHolder, parentAbsoluteProsition, callback) {
                    var collection = bandsHolder.bands();
                    var bandOffset = 0;
                    for (var i = 0; i < collection.length; i++) {
                        var itemRect = collection[i].getUsefulRect();
                        bandOffset = bandOffset + (collection[i - 1] && collection[i - 1].getUsefulRect().height || 0);
                        var itemAbsoluteRect = this._processBandRtl({
                            top: collection[i].absolutePosition.y(),
                            bottom: collection[i].absolutePosition.y() + collection[i].height(),
                            left: itemRect.left + parentAbsoluteProsition.left,
                            right: itemRect.right + parentAbsoluteProsition.left
                        });
                        if (collection[i] instanceof Report.DetailReportBandSurface) {
                            this._enumerateBandCollection(collection[i].bandsHolder, itemAbsoluteRect, callback);
                        }
                        else {
                            callback(collection[i], itemAbsoluteRect);
                        }
                    }
                    if (bandsHolder.verticalBandsContainer && !bandsHolder.verticalBandsContainer.scrollOffset()) {
                        bandsHolder.verticalBandsContainer.verticalBands().forEach((function (band) { return callback(band, band.getUsefulRect()); }));
                    }
                };
                ReportSnapLinesCollector.prototype._processBandRtl = function (itemAbsoluteRect) {
                    if (this._rtl()) {
                        itemAbsoluteRect.right = itemAbsoluteRect.left;
                        itemAbsoluteRect.left = 0;
                    }
                    return itemAbsoluteRect;
                };
                ReportSnapLinesCollector.prototype._enumerateCollection = function (parent, parentAbsoluteProsition, callback) {
                    if (parent.bandsHolder)
                        this._enumerateBandCollection(parent.bandsHolder, parentAbsoluteProsition, callback);
                    _super.prototype._enumerateCollection.call(this, parent, parentAbsoluteProsition, callback);
                };
                return ReportSnapLinesCollector;
            })(Designer.SnapLinesCollector);
            Report.ReportSnapLinesCollector = ReportSnapLinesCollector;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ContentByTypeEditor = (function (_super) {
                __extends(ContentByTypeEditor, _super);
                function ContentByTypeEditor() {
                    _super.apply(this, arguments);
                }
                ContentByTypeEditor.prototype.createObjectProperties = function () {
                    return new DevExpress.JS.Widgets.ObjectProperties(this.getViewModel(), undefined, this.level + 1, this.disabled, undefined, this.textToSearch);
                };
                ContentByTypeEditor.prototype.getViewModel = function () {
                    var _this = this;
                    var value = ko.computed(function () {
                        return _this.value() && _this.value().content();
                    });
                    this._disposables.push(value);
                    return value;
                };
                return ContentByTypeEditor;
            })(DevExpress.JS.Widgets.PropertyGridEditor);
            Report.ContentByTypeEditor = ContentByTypeEditor;
            var LinesEditor = (function (_super) {
                __extends(LinesEditor, _super);
                function LinesEditor() {
                    _super.apply(this, arguments);
                    this.collapsed = ko.observable(false);
                }
                return LinesEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.LinesEditor = LinesEditor;
            var RichTextFileEditor = (function (_super) {
                __extends(RichTextFileEditor, _super);
                function RichTextFileEditor(info, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled, textToSearch);
                    this.format = ko.observable("");
                    this._disposables.push(this.format.subscribe(function (newVal) {
                        _this._model().format(_this._toStreamType(newVal));
                    }));
                }
                RichTextFileEditor.prototype._toStreamType = function (extension) {
                    switch (extension.toLowerCase()) {
                        case "txt":
                            return Report.XRRichTextStreamType.PlainText;
                        case "htm":
                        case "html":
                            return Report.XRRichTextStreamType.HtmlText;
                        case "docx":
                            return Report.XRRichTextStreamType.XmlText;
                    }
                    return Report.XRRichTextStreamType.RtfText;
                };
                return RichTextFileEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.RichTextFileEditor = RichTextFileEditor;
            var GaugeStyleEditor = (function (_super) {
                __extends(GaugeStyleEditor, _super);
                function GaugeStyleEditor(info, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, info, 0, parentDisabled, textToSearch);
                    this._viewModel = ko.observable();
                    this.viewmodel = {
                        items: ko.pureComputed(function () {
                            if (_this._viewModel() && _this._viewModel().viewType) {
                                return _this._viewModel().viewType() === 'Circular' ? Report.circularValues : Report.linearValues;
                            }
                            else {
                                return [];
                            }
                        })
                    };
                    this._disposables.push(this.viewmodel.items);
                }
                GaugeStyleEditor.prototype.update = function (viewModel) {
                    _super.prototype.update.call(this, viewModel);
                    this._viewModel(viewModel);
                };
                return GaugeStyleEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.GaugeStyleEditor = GaugeStyleEditor;
            var ReportExpressionEditor = (function (_super) {
                __extends(ReportExpressionEditor, _super);
                function ReportExpressionEditor(modelPropertyInfo, level, parentDisabled, textToSearch) {
                    _super.call(this, modelPropertyInfo, level, parentDisabled, textToSearch);
                    this._subscription = null;
                }
                ReportExpressionEditor.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this._subscription && this._subscription.dispose();
                };
                ReportExpressionEditor.prototype._createReportItems = function (reportExplorerProvider, onClick, sender) {
                    var item = {
                        displayName: Designer.getLocalization("Report Items", "ReportStringId.ExpressionEditor_ItemInfo_ReportItems"),
                        content: {
                            isSelected: ko.observable(false),
                            data: {
                                fields: {
                                    itemsProvider: reportExplorerProvider,
                                    expandRootItems: true,
                                    selectedPath: ko.observable(""),
                                    templateName: "dx-ee-treelist-item",
                                    treeListController: new DevExpress.JS.Widgets.ExpressionEditorTreeListController("", function (item, element) { onClick('[' + ["ReportItems", item.text].join('.') + ']'); })
                                }
                            },
                            name: "dx-expressioneditor-fields"
                        }
                    };
                    this._subscription = item.content.isSelected.subscribe(function (newVal) {
                        sender.showDescription(!newVal);
                    });
                    return item;
                };
                ReportExpressionEditor.prototype._createValuesTab = function () {
                    var items = this.values().map(function (item) {
                        var display = item.value || item;
                        return {
                            text: "'" + display + "'",
                            displayName: display
                        };
                    });
                    return DevExpress.Analytics.Widgets.createExpressionEditorCollectionToolOptions(items, "Values", "ReportStringId.ExpressionEditor_ItemInfo_Values");
                };
                ReportExpressionEditor.prototype.patchOptions = function (reportExplorerProvider) {
                    var _this = this;
                    if (!this.value()) {
                        return false;
                    }
                    else {
                        if (!this.value()["customizeCategories"])
                            this.value()["customizeCategories"] = function (sender, groups, onClick) {
                                _this._subscription && _this._subscription.dispose();
                                groups.splice(0, 0, _this._createReportItems(reportExplorerProvider, onClick, sender));
                                if (_this.values() && _this.values().length > 0) {
                                    groups.splice(2, 0, _this._createValuesTab());
                                }
                                Report.Utils.addVariablesToExpressionEditor(groups, _this.value().eventName === "PrintOnPage" ? function (items) {
                                    items.push({ text: "Arguments.PageIndex", val: "[Arguments.PageIndex]", descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Arguments_PageIndex' });
                                    items.push({ text: "Arguments.PageCount", val: "[Arguments.PageCount]", descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Arguments_PageCount' });
                                    return items;
                                } : undefined);
                            };
                        return true;
                    }
                };
                return ReportExpressionEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.ReportExpressionEditor = ReportExpressionEditor;
            var ExplorerEditor = (function (_super) {
                __extends(ExplorerEditor, _super);
                function ExplorerEditor(modelPropertyInfo, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, modelPropertyInfo, level, parentDisabled, textToSearch);
                    this._collectionNames = ["controls", "bands"];
                    this._disposables.push(this.displayExpr = ko.computed(function () {
                        var value = ko.unwrap(_this.value);
                        return value && ko.unwrap(value.displayName || value.name) || "";
                    }));
                    var model = ko.computed(function () { return _this._model() && _this._model()["root"]; });
                    this._disposables.push(model);
                    this._disposables.push(this.itemsProvider = new Designer.ObjectExplorerProvider([{ model: model, name: "Report", displayName: "Report", className: "master_report" }], ["bands", "controls", "rows", "cells"], this.value, Report.ReportExplorerModel.getPathByMember));
                    this.itemsProvider.path("Report");
                    this.treeListController = new Designer.ObjectStructureTreeListController(["bands", "controls", "rows", "cells", "Report"]);
                    this.treeListController.canSelect = function (item) {
                        return !item.hasItems && !(item.data && (item.data["data"] instanceof Report.BandViewModel));
                    };
                    this.treeListController.itemsFilter = function (item) {
                        return item && item["data"] && _this._isVisible(item["data"]);
                    };
                }
                ExplorerEditor.prototype._isVisible = function (item) {
                    if (item instanceof Report.BandViewModel) {
                        for (var i = 0; i < this._collectionNames.length; i++) {
                            var collection = item[this._collectionNames[i]] && item[this._collectionNames[i]]();
                            if (collection) {
                                for (var j = 0; j < collection.length; j++) {
                                    if (this._isVisible(collection[j]))
                                        return true;
                                }
                            }
                        }
                        return false;
                    }
                    else {
                        return item !== this._model() &&
                            item.controlType !== "XRTableOfContents" &&
                            item.controlType !== "XRPivotGrid" &&
                            item.controlType !== "XRPageBreak" &&
                            item.controlType !== "XRSubreport" &&
                            item.controlType !== "PivotGridField";
                    }
                };
                return ExplorerEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.ExplorerEditor = ExplorerEditor;
            var DrillDownEditor = (function (_super) {
                __extends(DrillDownEditor, _super);
                function DrillDownEditor(info, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled, textToSearch);
                    this.path = ko.observable(null);
                    this._disposables.push(ko.computed(function () {
                        if (_this._model() && _this._model() instanceof Report.BandViewModel) {
                            var bands = _this._model().parentModel()["bands"]();
                            var position = bands.indexOf(_this._model());
                            var target = _this._findFistAvailableBand(bands, bands.indexOf(_this._model()) - 1);
                            if (target) {
                                _this._setDisabled(false);
                                _this.itemsProvider.path(Report.ReportExplorerModel.getPathByMember(target));
                            }
                            else {
                                _this.itemsProvider.path("");
                                _this._setDisabled(true);
                            }
                        }
                    }));
                }
                DrillDownEditor.prototype._setDisabled = function (value) {
                    var info = this.info();
                    if (info.disabled) {
                        if (ko.isObservable(info.disabled)) {
                            info.disabled(value);
                        }
                        else {
                            info.disabled = value;
                        }
                    }
                    else {
                        info.disabled = ko.observable(value);
                    }
                };
                DrillDownEditor.prototype._findFistAvailableBand = function (bands, position) {
                    if (position === -1) {
                        return null;
                    }
                    var target = bands[position];
                    if (target && (target.controlType === "GroupHeaderBand" || target.controlType === "DetailBand")) {
                        return target;
                    }
                    else if (target) {
                        return this._findFistAvailableBand(bands, position - 1);
                    }
                    else {
                        return null;
                    }
                };
                return DrillDownEditor;
            })(ExplorerEditor);
            Report.DrillDownEditor = DrillDownEditor;
            var DataBindingsEditor = (function (_super) {
                __extends(DataBindingsEditor, _super);
                function DataBindingsEditor(info, level, parentDisabled, textToSearch) {
                    _super.call(this, info, level, parentDisabled, textToSearch);
                }
                DataBindingsEditor.prototype.createObjectProperties = function () {
                    var _this = this;
                    var model = ko.pureComputed(function () {
                        var obj = {};
                        obj.isPropertyModified = function (name) {
                            return !obj[name].isEmpty();
                        };
                        obj.actions = [{
                                action: function (propertyName) { obj[propertyName].resetValue(); },
                                title: DevExpress.Designer.getLocalization("Reset", "ASPxReportsStringId.ReportDesigner_PropertyGrid_PopupMenu_Reset"),
                                visible: function () { return true; }
                            }];
                        var databindings = _this.value()();
                        (databindings || []).map(function (value) { obj[value.propertyName()] = value; });
                        return obj;
                    });
                    this._disposables.push(model);
                    return new DevExpress.JS.Widgets.ObjectProperties(model, { editors: Report.dataBindingsSerializationInfo }, this.level + 1, this.disabled, undefined, this.textToSearch);
                };
                return DataBindingsEditor;
            })(DevExpress.JS.Widgets.PropertyGridEditor);
            Report.DataBindingsEditor = DataBindingsEditor;
            var ComboboxUndoEditor = (function (_super) {
                __extends(ComboboxUndoEditor, _super);
                function ComboboxUndoEditor(info, level, parentDisabled, textToSearch) {
                    _super.call(this, info, level, parentDisabled, textToSearch);
                }
                ComboboxUndoEditor.prototype.generateValue = function (undoEngine) {
                    var _this = this;
                    if (!this.undoValue) {
                        this._disposables.push(this.undoValue = ko.computed({
                            read: function () {
                                return _this.value();
                            },
                            write: function (val) {
                                undoEngine().start();
                                _this.value(val);
                                undoEngine().end();
                            }
                        }));
                    }
                    return this.undoValue;
                };
                return ComboboxUndoEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.ComboboxUndoEditor = ComboboxUndoEditor;
            var ChartValueBindingEditor = (function (_super) {
                __extends(ChartValueBindingEditor, _super);
                function ChartValueBindingEditor(info, level, parentDisabled, textToSearch) {
                    _super.call(this, info, level, parentDisabled, textToSearch);
                    this.treeListController = new DevExpress.JS.Widgets.TreeListController();
                }
                ChartValueBindingEditor.prototype.generateDisplayValue = function (reportDataSource) {
                    var _this = this;
                    if (!this.displayBinding) {
                        this._disposables.push(this.displayBinding = ko.computed(function () {
                            return _this._model && _this._model() && _this._model()["displayValue"](reportDataSource());
                        }));
                    }
                    return this.displayBinding();
                };
                ChartValueBindingEditor.prototype.generateValue = function (undoEngine, reportParameters, reportDataSource) {
                    var _this = this;
                    if (!this.binding) {
                        this._disposables.push(this.binding = ko.computed({
                            read: function () {
                                return _this._model && _this._model() && _this._model()["calculatePath"](reportDataSource()) || "";
                            },
                            write: function (path) {
                                var pathRequest = new DevExpress.JS.Widgets.PathRequest(path);
                                undoEngine.start();
                                _this._model()["updateValue"](pathRequest, reportParameters());
                                undoEngine.end();
                            }
                        }));
                    }
                    return this.binding;
                };
                return ChartValueBindingEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.ChartValueBindingEditor = ChartValueBindingEditor;
            var FontEditorUndo = (function (_super) {
                __extends(FontEditorUndo, _super);
                function FontEditorUndo(info, level, parentDisabled, textToSearch) {
                    _super.call(this, info, level, parentDisabled, textToSearch);
                }
                FontEditorUndo.prototype.generateValue = function (undoEngine) {
                    this.undoEngine = undoEngine;
                    return this.viewmodel;
                };
                FontEditorUndo.prototype.createObjectProperties = function () {
                    var _this = this;
                    var undoValue = ko.computed({
                        read: function () {
                            return _this.value();
                        },
                        write: function (val) {
                            _this.undoEngine && _this.undoEngine().start();
                            _this.value(val);
                            _this.undoEngine && _this.undoEngine().end();
                        }
                    });
                    this._disposables.push(undoValue);
                    var model = new DevExpress.JS.Widgets.FontModel(undoValue);
                    this._disposables.push(model);
                    return new DevExpress.JS.Widgets.ObjectProperties(ko.observable(model), { editors: DevExpress.JS.Widgets.fontInfo }, this.level + 1, this.disabled, undefined, this.textToSearch);
                };
                return FontEditorUndo;
            })(DevExpress.JS.Widgets.PropertyGridEditor);
            Report.FontEditorUndo = FontEditorUndo;
            var FormattingRuleEditor = (function (_super) {
                __extends(FormattingRuleEditor, _super);
                function FormattingRuleEditor(info, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled, textToSearch);
                    var rules = ko.pureComputed(function () {
                        var formattingRuleSheet = _this._model() && _this._model()["root"] && _this._model()["root"].formattingRuleSheet || ko.observableArray();
                        formattingRuleSheet().forEach(function (rule) {
                            _this._disposables.push(rule.selected = ko.pureComputed({
                                read: function () {
                                    return _this.value()().filter(function (link) { return link.value() === rule; }).length > 0;
                                },
                                write: function (val) {
                                    if (val) {
                                        _this.value().push(Report.FormattingRuleLink.createNew(rule));
                                    }
                                    else {
                                        var link = _this.value()().filter(function (itemLink) { return itemLink.value() === rule; })[0];
                                        _this.value().remove(link);
                                    }
                                }
                            }));
                        });
                        return formattingRuleSheet;
                    });
                    this._disposables.push(rules);
                    this.options = {
                        addHandler: function () { return DevExpress.Designer.Report.FormattingRule.createNew(_this._model()["root"]); },
                        values: rules,
                        displayName: this.displayName(),
                        level: this.level,
                        info: this.info
                    };
                }
                return FormattingRuleEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.FormattingRuleEditor = FormattingRuleEditor;
            var BandEditorBase = (function (_super) {
                __extends(BandEditorBase, _super);
                function BandEditorBase() {
                    var _this = this;
                    _super.apply(this, arguments);
                    this.generateValue = function (bands) {
                        if (!_this.bands) {
                            _this.bands = bands(_this.filter, _this.noneNeaded);
                        }
                        return _this.bands;
                    };
                    this.bands = null;
                }
                return BandEditorBase;
            })(DevExpress.JS.Widgets.Editor);
            Report.BandEditorBase = BandEditorBase;
            var RunningBandEditor = (function (_super) {
                __extends(RunningBandEditor, _super);
                function RunningBandEditor() {
                    _super.apply(this, arguments);
                    this.filter = function (item) {
                        return item.controlType === "GroupHeaderBand" || item.controlType === "DetailReportBand";
                    };
                    this.noneNeaded = true;
                }
                return RunningBandEditor;
            })(BandEditorBase);
            Report.RunningBandEditor = RunningBandEditor;
            var BandsEditor = (function (_super) {
                __extends(BandsEditor, _super);
                function BandsEditor() {
                    _super.apply(this, arguments);
                    this.filter = function (item) {
                        return !(item instanceof Report.DetailReportBand);
                    };
                    this.noneNeaded = false;
                }
                return BandsEditor;
            })(BandEditorBase);
            Report.BandsEditor = BandsEditor;
            var SortingBandEditor = (function (_super) {
                __extends(SortingBandEditor, _super);
                function SortingBandEditor(info, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled, textToSearch);
                    this.filter = function (item) {
                        return item.controlType === "GroupHeaderBand" || item.controlType === "DetailBand";
                    };
                    this.noneNeaded = true;
                    var value = ko.computed(function () { return _this.value() || {}; });
                    this._disposables.push(value);
                    this.viewmodel = new DevExpress.JS.Widgets.ObjectProperties(value, { editors: [Report.sortFields, Report.groupFields] }, level + 1, this.disabled, textToSearch);
                    this._disposables.push(this.viewmodel);
                }
                return SortingBandEditor;
            })(BandEditorBase);
            Report.SortingBandEditor = SortingBandEditor;
            var ComponentNameEditor = (function (_super) {
                __extends(ComponentNameEditor, _super);
                function ComponentNameEditor(info, level, parentDisabled, textToSearch) {
                    var _this = this;
                    _super.call(this, info, level, parentDisabled, textToSearch);
                    this.generateRules = function (valueBeforeChange) {
                        var model = _this._model();
                        _this.currentValidationRules = [{
                                type: "custom",
                                validationCallback: function (options) {
                                    return model && model.renameComponentStrategy.validateName(options.value);
                                },
                                message: Designer.nameValidationRules[0].message
                            }, {
                                type: "custom",
                                validationCallback: function (options) {
                                    return model && model.renameComponentStrategy.validateUnique(options.value, valueBeforeChange.peek());
                                },
                                message: DevExpress.Designer.getLocalization("Name is not unique", "ASPxReportsStringId.ReportDesigner_NameUniqueError")
                            }];
                        return _this.getValidationRules();
                    };
                }
                ComponentNameEditor.prototype.getValidationRules = function () {
                    return (this.currentValidationRules || []).concat(_super.prototype.getValidationRules.call(this));
                };
                return ComponentNameEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.ComponentNameEditor = ComponentNameEditor;
            var NameEditor = (function (_super) {
                __extends(NameEditor, _super);
                function NameEditor(info, level, parentDisabled, textToSearch) {
                    _super.call(this, info, level, parentDisabled, textToSearch);
                }
                NameEditor.prototype.getValidationRules = function () {
                    return (this.currentValidationRules || []).concat(_super.prototype.getValidationRules.call(this));
                };
                NameEditor.prototype.generateRules = function (allControls) {
                    var self = this;
                    self.currentValidationRules = [{
                            type: "custom",
                            validationCallback: function (options) {
                                return allControls().filter(function (x) {
                                    if (ko.unwrap(x.name) !== options.value)
                                        return false;
                                    var model = self._model();
                                    if (!model || x === model)
                                        return false;
                                    var same = model["isSame"];
                                    if (same && $.isFunction(same) && same(x))
                                        return false;
                                    return true;
                                }).length === 0;
                            },
                            message: DevExpress.Designer.getLocalization("Invalid name", "ASPxReportsStringId.ReportDesigner_NameValidationError")
                        }];
                    return self.getValidationRules();
                };
                return NameEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.NameEditor = NameEditor;
            var UndoEditor = (function (_super) {
                __extends(UndoEditor, _super);
                function UndoEditor(info, level, parentDisabled, textToSearch) {
                    _super.call(this, info, level, parentDisabled, textToSearch);
                }
                UndoEditor.prototype.generateValue = function (undoEngine) {
                    var _this = this;
                    if (!this.generatedValue) {
                        this._disposables.push(this.generatedValue = ko.computed({
                            read: function () {
                                return _this.value();
                            },
                            write: function (val) {
                                undoEngine().start();
                                _this.value(val);
                                undoEngine().end();
                            }
                        }));
                    }
                    return this.generatedValue;
                };
                return UndoEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.UndoEditor = UndoEditor;
            var PivotGridCriteriaEditor = (function (_super) {
                __extends(PivotGridCriteriaEditor, _super);
                function PivotGridCriteriaEditor(info, level, parentDisabled, textToSearch) {
                    _super.call(this, info, level, parentDisabled, textToSearch);
                }
                PivotGridCriteriaEditor.prototype._createItemsProvider = function (fieldListProvider) {
                    var _this = this;
                    return {
                        getItems: function (pathRequest) {
                            var model = _this._model.peek();
                            if (!model || pathRequest.fullPath.indexOf("Parameters") === 0)
                                return $.Deferred().resolve().promise();
                            var pivot = model["parent"];
                            var result = $.Deferred();
                            var fullPath = new DevExpress.JS.Widgets.PathRequest(Designer.getFullPath(pivot.getPath(""), pivot.dataMember()));
                            ko.unwrap(fieldListProvider).getItems(fullPath).done(function (dataSourceItems) {
                                var items = [], fields = pivot.fields();
                                for (var i = 0; i < fields.length; i++) {
                                    var field = fields[i];
                                    if (field.area() === "DataArea") {
                                        continue;
                                    }
                                    var dataMemberInfo = dataSourceItems.filter(function (item) { return item.name === field.fieldName(); })[0];
                                    items.push({
                                        displayName: field.getDisplayName(),
                                        isList: false,
                                        name: field.name(),
                                        specifics: dataMemberInfo && dataMemberInfo.specifics.toLowerCase() || "integer"
                                    });
                                }
                                result.resolve(items);
                            });
                            return result.promise();
                        }
                    };
                };
                PivotGridCriteriaEditor.prototype._createDisplayNameProvider = function () {
                    var _this = this;
                    return {
                        getDisplayNameByPath: function (path, name) {
                            var model = _this._model.peek();
                            if (!model)
                                return $.Deferred().resolve().promise();
                            var pivot = model["parent"];
                            var field = Designer.find(pivot.fields.peek(), function (f) { return f.name() === name; });
                            return $.Deferred()
                                .resolve(field ? field.getDisplayName() : name)
                                .promise();
                        },
                        getRealName: function (path, name) {
                            var model = _this._model.peek();
                            if (!model)
                                return $.Deferred().resolve().promise();
                            var pivot = model["parent"];
                            var field = Designer.find(pivot.fields.peek(), function (f) { return (f.getDisplayName() || name) === name; });
                            return $.Deferred()
                                .resolve(field && field.name())
                                .promise();
                        }
                    };
                };
                PivotGridCriteriaEditor.prototype.wrapModel = function (fieldListProvider) {
                    if (!this.itemsProvider) {
                        this.itemsProvider = this._createItemsProvider(fieldListProvider);
                        this.displayNameProvider = this._createDisplayNameProvider();
                    }
                    return this;
                };
                return PivotGridCriteriaEditor;
            })(DevExpress.JS.Widgets.Editor);
            Report.PivotGridCriteriaEditor = PivotGridCriteriaEditor;
            var FieldsComboboxEditor = (function (_super) {
                __extends(FieldsComboboxEditor, _super);
                function FieldsComboboxEditor() {
                    _super.apply(this, arguments);
                    this.wrappedValues = null;
                }
                FieldsComboboxEditor.prototype._createItem = function (displayNameProvider, item) {
                    var deferred = $.Deferred();
                    displayNameProvider.getDisplayNameByPath(this.path(), item).done(function (result) {
                        deferred.resolve({ value: item, displayValue: result });
                    }).fail(function () {
                        deferred.resolve({ value: item, displayValue: item });
                    });
                    return deferred;
                };
                FieldsComboboxEditor.prototype._updateValues = function (values, displayNameProvider) {
                    var _this = this;
                    this.wrappedValues(values);
                    $.when.apply($, values.map(function (x) { return _this._createItem(displayNameProvider, x.value); })).done(function () {
                        var results = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            results[_i - 0] = arguments[_i];
                        }
                        _this.wrappedValues(results);
                    });
                };
                FieldsComboboxEditor.prototype.wrapValues = function (displayNameProvider) {
                    var _this = this;
                    if (!this.wrappedValues) {
                        this.wrappedValues = ko.observableArray();
                        this._disposables.push(this.values.subscribe(function (newVal) {
                            _this._updateValues(newVal, displayNameProvider());
                        }));
                        this._updateValues(this.values(), displayNameProvider());
                    }
                    return this.wrappedValues;
                };
                return FieldsComboboxEditor;
            })(Designer.Widgets.FieldListEditor);
            Report.FieldsComboboxEditor = FieldsComboboxEditor;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var FormattingRule = (function (_super) {
                __extends(FormattingRule, _super);
                function FormattingRule(model, parent, serializer) {
                    var _this = this;
                    _super.call(this);
                    this.className = function () {
                        return "formattingrule";
                    };
                    this.controlType = "XRFormattingRule";
                    this.selected = ko.observable(false);
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.parent = parent || null;
                    var path = ko.pureComputed(function () {
                        var dsPath = _this.getPath("");
                        if (!!dsPath) {
                            return Designer.getFullPath(dsPath, _this.dataMember() || parent.dataMember());
                        }
                        else {
                            return dsPath;
                        }
                    });
                    this._disposables.push(path);
                    this["conditionObj"] = {
                        value: this.condition,
                        path: path,
                        functions: DevExpress.Designer.Report.reportFunctionDisplay,
                        customizeCategories: function (_, categories, __) { Report.Utils.addVariablesToExpressionEditor(categories); }
                    };
                }
                FormattingRule.createNew = function (report) {
                    return new FormattingRule({}, report);
                };
                FormattingRule.prototype.getInfo = function () {
                    return Report.formattingRuleSerializationsInfo;
                };
                FormattingRule.prototype.getPath = function (propertyName) {
                    return this.parent && this.parent.dsHelperProvider() && this.parent.dsHelperProvider().getDataSourcePath(this["dataSource"]() || this.parent.dataSource());
                };
                FormattingRule.prototype.displayType = function () {
                    return Designer.getLocalization("Formatting Rule", "DevExpress.XtraReports.UI.FormattingRule");
                };
                return FormattingRule;
            })(Designer.Disposable);
            Report.FormattingRule = FormattingRule;
            var FormattingRuleLink = (function () {
                function FormattingRuleLink(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                FormattingRuleLink.createNew = function (rule) {
                    var link = new FormattingRuleLink({});
                    link.value = ko.observable(rule);
                    return link;
                };
                FormattingRuleLink.prototype.getInfo = function () {
                    return Report.formattingRuleLinkSerializationsInfo;
                };
                return FormattingRuleLink;
            })();
            Report.FormattingRuleLink = FormattingRuleLink;
            Report.formattingRuleLinkSerializationsInfo = [
                { propertyName: "value", modelName: "@Value", link: true }
            ];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.editorTemplates = {
                dataSource: { header: "dxrd-datasource" },
                dataBindings: { header: "dxrd-dataBindings", content: "dxrd-dataBindingsContent", editorType: Report.DataBindingsEditor },
                dataBinding: { header: "dxrd-dataBinding", content: "dxrd-dataBindingContent", editorType: Designer.Widgets.FieldListEditor },
                reportExplorer: { header: "dxrd-reportexplorer-editor", editorType: Report.ExplorerEditor },
                reportSourceUrl: { header: "dxrd-reportSourceUrl" },
                bands: { header: "dxrd-bands", editorType: Report.BandsEditor },
                runningBand: { header: "dxrd-bands", editorType: Report.RunningBandEditor },
                sortingBand: { header: "dxrd-bands", content: "dx-objectEditorContent", editorType: Report.SortingBandEditor },
                style: { header: "dxrd-style", content: "dxrd-styleContent" },
                stylePriority: { header: "dxrd-stylePriority" },
                contentByType: { header: "dxrd-content-type", content: "dx-objectEditorContent", editorType: Report.ContentByTypeEditor },
                lookUpValues: { custom: "dxrd-lookUpValues" },
                reportexpression: { header: "dxrd-reportexpression", editorType: Report.ReportExpressionEditor },
                drillDownControls: { header: "dxrd-reportexplorer-editor", editorType: Report.DrillDownEditor },
                viewStyle: { header: "dxrd-viewStyle", editorType: Report.GaugeStyleEditor },
                pivotGridFields: { custom: "dxrd-pivotGridFields" },
                scriptsBox: { header: "dxrd-scriptsbox" },
                formattingRule: { custom: "dxrd-formattingRuleCollection", editorType: Report.FormattingRuleEditor },
                toclevel: { custom: "dxrd-levelCollection" },
                calculatedFields: { custom: "dxrd-calculatedFields" },
                parameters: { custom: "dxrd-parameters" },
                reportRtlProperty: { header: "dxrd-reportRtlProperty" },
                comboboxUndo: { header: "dx-combobox-undo", editorType: Report.ComboboxUndoEditor },
                fontUndo: { header: "dx-emptyHeader", content: "dx-objectEditorContentUndo", editorType: Report.FontEditorUndo },
                chartValueBinding: { header: "dxrd-chartValueBinding", editorType: Report.ChartValueBindingEditor },
                name: { header: "dxrd-name", editorType: Report.NameEditor },
                componentName: { header: "dxrd-component-name", editorType: Report.ComponentNameEditor },
                numericUndo: { header: "dx-numeric-undo", editorType: Report.UndoEditor },
                pivotCriteria: { header: "dxrd-pivotcriteria", editorType: Report.PivotGridCriteriaEditor },
                fieldsCombobox: { header: "dxrd-fields-combobox", editorType: Report.FieldsComboboxEditor },
                richTextLoad: { header: "dxrd-richtext-loadfile", editorType: Report.RichTextFileEditor }
            };
            Report.textAlignmentValues = [
                { value: "TopLeft", displayValue: "Top Left", localizationId: "DevExpress.XtraPrinting.TextAlignment.TopLeft" },
                { value: "MiddleLeft", displayValue: "Middle Left", localizationId: "DevExpress.XtraPrinting.TextAlignment.MiddleLeft" },
                { value: "BottomLeft", displayValue: "Bottom Left", localizationId: "DevExpress.XtraPrinting.TextAlignment.BottomLeft" },
                { value: "TopCenter", displayValue: "Top Center", localizationId: "DevExpress.XtraPrinting.TextAlignment.TopCenter" },
                { value: "MiddleCenter", displayValue: "Middle Center", localizationId: "DevExpress.XtraPrinting.TextAlignment.MiddleCenter" },
                { value: "BottomCenter", displayValue: "Bottom Center", localizationId: "DevExpress.XtraPrinting.TextAlignment.BottomCenter" },
                { value: "TopJustify", displayValue: "Top Justify", localizationId: "DevExpress.XtraPrinting.TextAlignment.TopJustify" },
                { value: "MiddleJustify", displayValue: "Middle Justify", localizationId: "DevExpress.XtraPrinting.TextAlignment.MiddleJustify" },
                { value: "BottomJustify", displayValue: "Bottom Justify", localizationId: "DevExpress.XtraPrinting.TextAlignment.BottomJustify" },
                { value: "TopRight", displayValue: "Top Right", localizationId: "DevExpress.XtraPrinting.TextAlignment.TopRight" },
                { value: "MiddleRight", displayValue: "Middle Right", localizationId: "DevExpress.XtraPrinting.TextAlignment.MiddleRight" },
                { value: "BottomRight", displayValue: "Bottom Right", localizationId: "DevExpress.XtraPrinting.TextAlignment.BottomRight" },
            ];
            Report.borderDashStyleValues = [
                { value: "Solid", displayValue: "Solid", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.Solid" },
                { value: "Dash", displayValue: "Dash", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.Dash" },
                { value: "Dot", displayValue: "Dot", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.Dot" },
                { value: "DashDot", displayValue: "Dash-Dot", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.DashDot" },
                { value: "DashDotDot", displayValue: "Dash-Dot-Dot", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.DashDotDot" }
            ];
            Report.stylePrioritySerializationInfo = [
                { propertyName: "useBackColor", modelName: "@UseBackColor", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useBorderColor", modelName: "@UseBorderColor", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useBorderDashStyle", modelName: "@UseBorderDashStyle", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useBorders", modelName: "@UseBorders", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useBorderWidth", modelName: "@UseBorderWidth", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useFont", modelName: "@UseFont", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useForeColor", modelName: "@UseForeColor", defaultVal: true, from: Designer.parseBool },
                { propertyName: "usePadding", modelName: "@UsePadding", defaultVal: true, from: Designer.parseBool },
                { propertyName: "useTextAlignment", modelName: "@UseTextAlignment", defaultVal: true, from: Designer.parseBool }
            ];
            Report.xlsxFormatString = { propertyName: "xlsxFormatString", modelName: "@XlsxFormatString", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text, displayName: "Xlsx Format String", localizationId: "DevExpress.XtraReports.UI.XRControl.XlsxFormatString" };
            Report.name = { propertyName: "name", modelName: "@Name", displayName: "Name", localizationId: "DevExpress.XtraReports.UI.XRControl.Name", editor: Report.editorTemplates.name, validationRules: Designer.nameValidationRules };
            Report.displayName = { propertyName: "displayNameObject", modelName: "@DisplayName", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "", displayName: "Display Name", localizationId: "DevExpress.XtraReports.UI.XtraReport.DisplayName" };
            Report.text = { propertyName: "text", modelName: "@Text", defaultVal: "", displayName: "Text", localizationId: "DevExpress.XtraReports.UI.XRControl.Text", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Report.textArea = { propertyName: "textArea", displayName: "Text", localizationId: "DevExpress.XtraReports.UI.XRControl.Text", defaultVal: "", editor: $.extend({}, DevExpress.JS.Widgets.editorTemplates.stringArray, { editorType: Report.LinesEditor }) };
            Report.textTrimming = {
                propertyName: "textTrimming", modelName: "@TextTrimming", displayName: "Text Trimming", localizationId: "DevExpress.XtraReports.UI.XRControl.TextTrimming", defaultVal: "Character", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "System.Drawing.StringTrimming.None" },
                    { value: "Character", displayValue: "Character", localizationId: "System.Drawing.StringTrimming.Character" },
                    { value: "Word", displayValue: "Word", localizationId: "System.Drawing.StringTrimming.Word" },
                    { value: "EllipsisCharacter", displayValue: "Ellipsis Character", localizationId: "System.Drawing.StringTrimming.EllipsisCharacter" },
                    { value: "EllipsisWord", displayValue: "Ellipsis Word", localizationId: "System.Drawing.StringTrimming.EllipsisWord" },
                    { value: "EllipsisPath", displayValue: "Ellipsis Path", localizationId: "System.Drawing.StringTrimming.EllipsisPath" }
                ]
            };
            Report.size = { propertyName: "size", modelName: "@SizeF", from: Designer.Size.fromString, displayName: "Size", localizationId: "DevExpress.XtraReports.UI.XRControl.Size", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.location = { propertyName: "location", modelName: "@LocationFloat", from: Designer.Point.fromString, displayName: "Location", localizationId: "DevExpress.XtraReports.UI.XRControl.Location", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.defaultBooleanValuesArray = [
                { value: "True", displayValue: "True", localizationId: "DevExpress.Utils.DefaultBoolean.True" },
                { value: "False", displayValue: "False", localizationId: "DevExpress.Utils.DefaultBoolean.False" },
                { value: "Default", displayValue: "Default", localizationId: "DevExpress.Utils.DefaultBoolean.Default" }
            ];
            Report.tag = { propertyName: "tag", modelName: "@Tag", displayName: "Tag", localizationId: "DevExpress.XtraReports.UI.XRControl.Tag", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "" };
            Report.lockedInUserDesigner = { propertyName: "_lockedInUserDesigner", modelName: "@LockedInUserDesigner", defaultVal: false, from: Designer.parseBool };
            Report.visible = { propertyName: "visible", modelName: "@Visible", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Visible", localizationId: "DevExpress.XtraReports.UI.XRControl.Visible" };
            Report.defaultBooleanVisible = {
                propertyName: "visible", modelName: "@Visible", displayName: "Visible", localizationId: "DevExpress.XtraReports.UI.Formatting.Visible", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Report.defaultBooleanValuesArray
            };
            Report.backColor = $.extend({ displayName: "Background Color", editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControl.BackColor' }, Report.previewBackColor);
            Report.foreColor = $.extend({ displayName: "Foreground Color", editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControlStyle.ForeColor' }, Report.previewForeColor);
            Report.font = $.extend({ displayName: "Font", editor: DevExpress.JS.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' }, Report.previewFont);
            Report.borderColor = $.extend({ displayName: "Border Color", editor: Designer.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderColor' }, Report.previewBorderColor);
            Report.borders = { propertyName: "borders", modelName: "@Borders", displayName: "Borders", localizationId: "DevExpress.XtraReports.UI.XRControl.Borders", editor: Designer.Widgets.editorTemplates.borders };
            Report.borderWidth = { propertyName: "borderWidth", modelName: "@BorderWidth", displayName: "Border Width", localizationId: "DevExpress.XtraReports.UI.XRControl.BorderWidth", from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.borderDashStyle = $.extend({
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Border Dash Style", localizationId: "DevExpress.XtraReports.UI.XRControl.BorderDashStyle",
                valuesArray: [].concat(Report.borderDashStyleValues, [{ value: "Double", displayValue: "Double", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.Double" }])
            }, Report.previewBorderDashStyle);
            Report.paddingString = { propertyName: "padding", modelName: "@Padding" };
            Report.padding = { displayName: "Padding", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, propertyName: "paddingObj", localizationId: 'DevExpress.XtraReports.UI.XRBarCode.PaddingInfo' };
            Report.paddingGroup = [Report.paddingString, Report.padding];
            Report.textAlignment = $.extend({
                displayName: "Text Alignment",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: Report.textAlignmentValues,
                localizationId: 'DevExpress.XtraReports.UI.XRControl.TextAlignment' }, Report.previewTextAlignment);
            Report.anchorVertical = {
                propertyName: "anchorVertical",
                modelName: "@AnchorVertical", displayName: "Anchor Vertically", localizationId: "DevExpress.XtraReports.UI.XRControl.AnchorVertical", defaultVal: "None",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.VerticalAnchorStyles.None" },
                    { value: "Top", displayValue: "Top", localizationId: "DevExpress.XtraReports.UI.VerticalAnchorStyles.Top" },
                    { value: "Bottom", displayValue: "Bottom", localizationId: "DevExpress.XtraReports.UI.VerticalAnchorStyles.Bottom" },
                    { value: "Both", displayValue: "Both", localizationId: "DevExpress.XtraReports.UI.VerticalAnchorStyles.Both" }
                ]
            };
            Report.anchorHorizontal = {
                propertyName: "anchorHorizontal",
                modelName: "@AnchorHorizontal", displayName: "Anchor Horizontally", localizationId: "DevExpress.XtraReports.UI.XRControl.AnchorHorizontal", defaultVal: "None",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.HorizontalAnchorStyles.None" },
                    { value: "Left", displayValue: "Left", localizationId: "DevExpress.XtraReports.UI.HorizontalAnchorStyles.Left" },
                    { value: "Right", displayValue: "Right", localizationId: "DevExpress.XtraReports.UI.HorizontalAnchorStyles.Right" },
                    { value: "Both", displayValue: "Both", localizationId: "DevExpress.XtraReports.UI.HorizontalAnchorStyles.Both" }
                ]
            };
            Report.textFitMode = {
                propertyName: "textFitMode",
                modelName: "@TextFitMode", displayName: "Text Fit Mode", localizationId: "DevExpress.XtraReports.UI.XRLabel.TextFitMode", defaultVal: "None",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.TextFitMode.None" },
                    { value: "GrowOnly", displayValue: "Grow Only", localizationId: "DevExpress.XtraReports.UI.TextFitMode.GrowOnly" },
                    { value: "ShrinkOnly", displayValue: "Shrink Only", localizationId: "DevExpress.XtraReports.UI.TextFitMode.ShrinkOnly" },
                    { value: "ShrinkAndGrow", displayValue: "Shrink And Grow", localizationId: "DevExpress.XtraReports.UI.TextFitMode.ShrinkAndGrow" }
                ]
            };
            Report.angle = { propertyName: "angle", modelName: "@Angle", defaultVal: 0, from: Designer.floatFromModel, displayName: "Angle", localizationId: "DevExpress.XtraReports.UI.XRLabel.Angle", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.canGrow = { propertyName: "canGrow", modelName: "@CanGrow", defaultVal: true, from: Designer.parseBool, displayName: "Can Grow", localizationId: "DevExpress.XtraReports.UI.XRControl.CanGrow", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.canShrink = { propertyName: "canShrink", modelName: "@CanShrink", defaultVal: false, from: Designer.parseBool, displayName: "Can Shrink", localizationId: "DevExpress.XtraReports.UI.XRControl.CanShrink", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.multiline = { propertyName: "multiline", modelName: "@Multiline", defaultVal: false, from: Designer.parseBool, displayName: "Multiline", localizationId: "DevExpress.XtraReports.UI.XRLabel.Multiline", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.wordWrap = { propertyName: "wordWrap", modelName: "@WordWrap", defaultVal: true, from: Designer.parseBool, displayName: "Word Wrap", localizationId: "DevExpress.XtraReports.UI.XRControl.WordWrap", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.autoWidth = { propertyName: "autoWidth", modelName: "@AutoWidth", defaultVal: false, from: Designer.parseBool, displayName: "Auto Width", localizationId: "DevExpress.XtraReports.UI.XRLabel.AutoWidth", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.keepTogether = { propertyName: "keepTogether", modelName: "@KeepTogether", defaultVal: true, from: Designer.parseBool, displayName: "Keep Together", localizationId: "DevExpress.XtraReports.UI.XRControl.KeepTogether", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.keepTogetherDefaultValueFalse = { propertyName: "keepTogether", modelName: "@KeepTogether", defaultVal: false, from: Designer.parseBool, displayName: "Keep Together", localizationId: "DevExpress.XtraReports.UI.XRControl.KeepTogether", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.processDuplicatesTarget = {
                propertyName: "processDuplicatesTarget", modelName: "@ProcessDuplicatesTarget", displayName: "Process Duplicates Target", localizationId: "DevExpress.XtraReports.UI.XRLabel.ProcessDuplicatesTarget",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Value", from: Designer.fromEnum,
                valuesArray: [
                    { value: "Value", displayValue: "Value", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesTarget.Value" },
                    { value: "Tag", displayValue: "Tag", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesTarget.Tag" }
                ]
            };
            Report.processDuplicatesMode = {
                propertyName: "processDuplicatesMode", modelName: "@ProcessDuplicatesMode", displayName: "Process Duplicates Mode", localizationId: "DevExpress.XtraReports.UI.XRLabel.ProcessDuplicatesMode",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Leave", from: Designer.fromEnum,
                valuesArray: [
                    { value: "Leave", displayValue: "Leave", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesMode.Leave" },
                    { value: "Merge", displayValue: "Merge", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesMode.Merge" },
                    { value: "Suppress", displayValue: "Suppress", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesMode.Suppress" },
                    { value: "SuppressAndShrink", displayValue: "Suppress and Shrink", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesMode.SuppressAndShrink" }
                ]
            };
            Report.processNullValues = {
                propertyName: "processNullValues",
                modelName: "@ProcessNullValues", displayName: "Process Null Values", localizationId: "DevExpress.XtraReports.UI.XRLabel.ProcessNullValues",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Leave", from: Designer.fromEnum,
                valuesArray: [
                    { value: "Leave", displayValue: "Leave", localizationId: "DevExpress.XtraReports.UI.ValueSuppressType.Leave" },
                    { value: "Suppress", displayValue: "Suppress", localizationId: "DevExpress.XtraReports.UI.ValueSuppressType.Suppress" },
                    { value: "SuppressAndShrink", displayValue: "Suppress and Shrink", localizationId: "DevExpress.XtraReports.UI.ValueSuppressType.SuppressAndShrink" },
                ]
            };
            Report.reportPrintOptionsSerializationInfo = [
                { propertyName: "printOnEmptyDataSource", defaultVal: true, from: Designer.parseBool, modelName: "@PrintOnEmptyDataSource", displayName: "Print when Data Source is Empty", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.PrintOnEmptyDataSource", editor: DevExpress.JS.Widgets.editorTemplates.bool },
                { propertyName: "detailCountAtDesignTime", defaultVal: 0, from: Designer.floatFromModel, modelName: "@DetailCountAtDesignTime", displayName: "Detail Count at Design Time", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.DetailCountAtDesignTime", editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "detailCountOnEmptyDataSource", defaultVal: 1, from: Designer.floatFromModel, modelName: "@DetailCountOnEmptyDataSource", displayName: "Detail Count when Data Source is Empty", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.DetailCountOnEmptyDataSource", editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "blankDetailCount", defaultVal: 0, from: Designer.floatFromModel, modelName: "@BlankDetailCount", displayName: "Blank Detail Count", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.BlankDetailCount", editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "detailCount", defaultVal: 0, from: Designer.floatFromModel, modelName: "@DetailCount", displayName: "Detail Count", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.DetailCount", editor: DevExpress.JS.Widgets.editorTemplates.numeric }
            ];
            Report.dataAdapter = { propertyName: "dataAdapter", modelName: "@DataAdapter", link: true, editor: null };
            Report.dataSource = { propertyName: "dataSource", modelName: "@DataSource", displayName: "Data Source", localizationId: "DevExpress.XtraReports.UI.XtraReportBase.DataSource", link: true, editor: Report.editorTemplates.dataSource };
            Report.dataMember = { propertyName: "dataMember", modelName: "@DataMember", displayName: "Data Member", localizationId: "DevExpress.XtraReports.UI.XtraReportBase.DataMember", defaultVal: "", editor: Designer.Widgets.editorTemplates.dataMember };
            Report.dataBindings = function (dataBindingsArray) {
                return {
                    propertyName: "dataBindings",
                    modelName: "DataBindings",
                    array: true,
                    info: Report.dataBindingSerializationInfo,
                    displayName: "Data Bindings", localizationId: "DevExpress.XtraReports.UI.XRControl.DataBindings",
                    editor: Report.editorTemplates.dataBindings,
                    allDataBindings: dataBindingsArray,
                    from: Report.DataBinding.initialize
                };
            };
            Report.createSinglePopularBindingInfos = function (propertyName) {
                return [Report.createPopularBindingInfo({ bindingName: propertyName, propertyName: "" }, false), Report.createPopularBindingInfo({ bindingName: propertyName, propertyName: "" })];
            };
            Report.createPopularBindingInfos = function (options) {
                var dataBindingOptions = {
                    propertyName: "popularDataBinding" + options.propertyName,
                    displayName: options.propertyName,
                    localizationId: options.localizationId,
                    bindingName: options.propertyName,
                };
                var expressionOptions = {
                    propertyName: "popularExpression" + options.propertyName,
                    displayName: options.propertyName,
                    localizationId: options.localizationId,
                    bindingName: options.propertyName,
                };
                return [Report.createPopularBindingInfo(dataBindingOptions, false), Report.createPopularBindingInfo(expressionOptions)];
            };
            Report.createPopularBindingInfo = function (options, isExpression) {
                if (isExpression === void 0) { isExpression = true; }
                var newInfo = {
                    propertyName: options.propertyName || (isExpression ? "popularExpression" : "popularDataBinding"),
                    displayName: options.displayName || (isExpression ? "Expression" : "Data Binding"),
                    localizationId: options.localizationId || (isExpression ? "DevExpress.XtraReports.UI.CalculatedField.Expression" : "ReportStringId.STag_Name_DataBinding"),
                    editor: isExpression ? Report.editorTemplates.reportexpression : Report.editorTemplates.dataBinding,
                };
                if (isExpression)
                    newInfo["expressionName"] = options.bindingName;
                else
                    newInfo["bindingName"] = options.bindingName;
                return newInfo;
            };
            Report.filterString = { propertyName: "_filterString", modelName: "@FilterString" };
            Report.filterStringEditable = { propertyName: "filterString", displayName: "Filter String", localizationId: "DevExpress.XtraReports.UI.XtraReportBase.FilterString", defaultVal: "", editor: Designer.Widgets.editorTemplates.filterEditor };
            Report.bookmark = { propertyName: "bookmark", modelName: "@Bookmark", displayName: "Bookmark", localizationId: "DevExpress.XtraReports.UI.XRControl.Bookmark", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Report.bookmarkParent = { propertyName: "bookmarkParent", modelName: "@BookmarkParent", link: true, displayName: "Parent Bookmark", localizationId: "DevExpress.XtraReports.UI.XRControl.BookmarkParent", defaultVal: null, editor: Report.editorTemplates.reportExplorer };
            Report.navigateUrl = { propertyName: "navigateUrl", modelName: "@NavigateUrl", displayName: "Navigation URL", localizationId: "DevExpress.XtraReports.UI.XRControl.NavigateUrl", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Report.target = { propertyName: "target", modelName: "@Target", displayName: "Navigation Target", localizationId: "DevExpress.XtraReports.UI.XRControl.Target", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "" };
            Report.nullValueText = { propertyName: "nullValueText", modelName: "@NullValueText", displayName: "Null Value Text", localizationId: "DevExpress.XtraReports.UI.XRControl.NullValueText", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text };
            Report.styleName = { propertyName: "styleName", modelName: "@StyleName", editor: Report.editorTemplates.style, displayName: "Style", localizationId: "DevExpress.XtraReports.UI.ConditionFormatting.Style", defaultVal: null };
            Report.evenStyleName = { propertyName: "evenStyleName", modelName: "@EvenStyleName", editor: Report.editorTemplates.style, displayName: "Even Style", localizationId: "DevExpress.XtraReports.UI.XRControl.XRControlStyles.EvenStyle", defaultVal: null };
            Report.oddStyleName = { propertyName: "oddStyleName", modelName: "@OddStyleName", editor: Report.editorTemplates.style, displayName: "Odd Style", localizationId: "DevExpress.XtraReports.UI.XRControl.XRControlStyles.OddStyle", defaultVal: null };
            Report.stylePriority = { propertyName: "stylePriority", modelName: "StylePriority", info: Report.stylePrioritySerializationInfo };
            Report.summaryFunctionValues = [
                { value: "Avg", displayValue: "Average", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Avg" },
                { value: "Count", displayValue: "Count", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Count" },
                { value: "Sum", displayValue: "Sum", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Sum" },
                { value: "RunningSum", displayValue: "Running Summary", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.RunningSum" },
                { value: "Percentage", displayValue: "Percentage", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Percentage" },
                { value: "Max", displayValue: "Max", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Max" },
                { value: "Min", displayValue: "Min", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Min" },
                { value: "Median", displayValue: "Median", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Median" },
                { value: "Var", displayValue: "Variance", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Var" },
                { value: "VarP", displayValue: "Population Variance", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.VarP" },
                { value: "StdDev", displayValue: "Standard Deviation", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.StdDev" },
                { value: "StdDevP", displayValue: "Standard Population Deviation", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.StdDevP" },
                { value: "DAvg", displayValue: "Average (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DAvg" },
                { value: "DCount", displayValue: "Count (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DCount" },
                { value: "DSum", displayValue: "Summary (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DSum" },
                { value: "DVar", displayValue: "Variance (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DVar" },
                { value: "DVarP", displayValue: "Population Variance (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DVarP" },
                { value: "DStdDev", displayValue: "Standard Deviation (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DStdDev" },
                { value: "DStdDevP", displayValue: "Standard Population Deviation (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DStdDevP" },
                { value: "RecordNumber", displayValue: "Record Number", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.RecordNumber" },
                { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Custom" }
            ];
            Report.textFormatString = { propertyName: "textFormatString", modelName: "@TextFormatString", defaultVal: "", editor: Designer.Widgets.editorTemplates.formatEditor, displayName: "Text Format String", localizationId: "DevExpress.XtraReports.UI.XRControl.TextFormatString" };
            Report.summarySerializationInfo = [
                { propertyName: "ignoreNullValues", modelName: "@IgnoreNullValues", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Ignore Null Values", localizationId: "DevExpress.XtraReports.UI.XRSummary.IgnoreNullValues" },
                { propertyName: "formatString", modelName: "@FormatString", defaultVal: "", editor: Designer.Widgets.editorTemplates.formatEditor, displayName: "Format String", localizationId: "DevExpress.XtraReports.UI.XRSummary.FormatString" },
                {
                    propertyName: "Running", modelName: "@Running", defaultVal: "None",
                    editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Running", localizationId: "DevExpress.XtraReports.UI.XRSummary.Running",
                    valuesArray: [
                        { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.SummaryRunning.None" },
                        { value: "Group", displayValue: "Group", localizationId: "DevExpress.XtraReports.UI.SummaryRunning.Group" },
                        { value: "Report", displayValue: "Report", localizationId: "DevExpress.XtraReports.UI.SummaryRunning.Report" },
                        { value: "Page", displayValue: "Page", localizationId: "DevExpress.XtraReports.UI.SummaryRunning.Page" }
                    ]
                },
                {
                    propertyName: "Func", modelName: "@Func", defaultVal: "Sum",
                    editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Function", localizationId: "DevExpress.XtraReports.UI.XRSummary.Func",
                    valuesArray: Report.summaryFunctionValues
                }
            ];
            Report.summary = { propertyName: "Summary", modelName: "Summary", info: Report.summarySerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, displayName: "Summary", localizationId: "DevExpress.XtraReports.UI.XRLabel.Summary" };
            Report.reportPrintOptions = { propertyName: "reportPrintOptions", modelName: "ReportPrintOptions", info: Report.reportPrintOptionsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, displayName: "Report Print Options", localizationId: "DevExpress.XtraReports.UI.XtraReport.ReportPrintOptions" };
            Report.afterPrint = { propertyName: "onAfterPrint", modelName: "@OnAfterPrint", displayName: "After Print", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnAfterPrint", editor: Report.editorTemplates.scriptsBox }, Report.beforePrint = { propertyName: "onBeforePrint", modelName: "@OnBeforePrint", displayName: "Before Print", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnBeforePrint", editor: Report.editorTemplates.scriptsBox }, Report.sizeChanged = { propertyName: "onSizeChanged", modelName: "@OnSizeChanged", displayName: "Size Changed", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnSizeChanged", editor: Report.editorTemplates.scriptsBox };
            Report.truncatedControlEventsSerializationInfo = [
                Report.afterPrint, Report.beforePrint,
                { propertyName: "onLocationChanged", modelName: "@OnLocationChanged", displayName: "Location Changed", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnLocationChanged", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onParentChanged", modelName: "@OnParentChanged", displayName: "Parent Changed", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnParentChanged", editor: Report.editorTemplates.scriptsBox },
            ];
            Report.truncatedControlScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRPageBreak.Scripts", info: Report.truncatedControlEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var commonEventsSerializationInfo = Report.truncatedControlEventsSerializationInfo.concat([Report.sizeChanged,
                { propertyName: "onDraw", modelName: "@OnDraw", displayName: "Draw", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnDraw", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onEvaluateBinding", modelName: "@OnEvaluateBinding", displayName: "Evaluate Binding", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnEvaluateBinding", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrintOnPage", modelName: "@OnPrintOnPage", displayName: "Print on Page", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnPrintOnPage", editor: Report.editorTemplates.scriptsBox }
            ]);
            Report.commonScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRControl.Scripts", info: commonEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var controlEventsSerializationInfo = commonEventsSerializationInfo.concat([
                { propertyName: "onHtmlItemCreated", modelName: "@OnHtmlItemCreated", displayName: "Html Item Created", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnHtmlItemCreated", editor: Report.editorTemplates.scriptsBox }
            ]);
            Report.controlScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRLine.Scripts", info: controlEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var textControlEventsSerializationInfo = controlEventsSerializationInfo.concat([
                { propertyName: "onTextChanged", modelName: "@OnTextChanged", displayName: "Text Changed", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnTextChanged", editor: Report.editorTemplates.scriptsBox }
            ]);
            Report.textControlScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRLabel.Scripts", info: textControlEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var labelEventsSerializationInfo = textControlEventsSerializationInfo.concat([
                { propertyName: "onSummaryCalculated", modelName: "@OnSummaryCalculated", displayName: "Summary Calculated", localizationId: "DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryCalculated", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onSummaryGetResult", modelName: "@OnSummaryGetResult", displayName: "Summary Get Result", localizationId: "DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryGetResult", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onSummaryReset", modelName: "@OnSummaryReset", displayName: "Summary Reset", localizationId: "DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryReset", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onSummaryRowChanged", modelName: "@OnSummaryRowChanged", displayName: "Summary Row Changed", localizationId: "DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryRowChanged", editor: Report.editorTemplates.scriptsBox }
            ]);
            Report.labelScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRLabel.Scripts", info: labelEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var specificChartEventsSerializationInfo = [
                { propertyName: "onCustomDrawSeries", modelName: "@OnCustomDrawSeries", displayName: "Custom Draw a Series", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawSeries", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomDrawSeriesPoint", modelName: "@OnCustomDrawSeriesPoint", displayName: "Custom Draw a Series Point", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawSeriesPoint", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomDrawCrosshair", modelName: "@OnCustomDrawCrosshair", displayName: "Custom Draw Crosshair", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawCrosshair", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomDrawAxisLabel", modelName: "@OnCustomDrawAxisLabel", displayName: "Custom Draw an Axis Label", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawAxisLabel", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomPaint", modelName: "@OnCustomPaint", displayName: "Custom Paint", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnCustomPaint", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onBoundDataChanged", modelName: "@OnBoundDataChanged", displayName: "Bound Data Changed", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnBoundDataChanged", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPieSeriesPointExploded", modelName: "@OnPieSeriesPointExploded", displayName: "Pie Series Point Exploded", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnPieSeriesPointExploded", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onAxisScaleChanged", modelName: "@OnAxisScaleChanged", displayName: "Axis Scale Changed", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnAxisScaleChanged", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onAxisWholeRangeChanged", modelName: "@OnAxisWholeRangeChanged", displayName: "Axis Whole Range Changed", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnAxisWholeRangeChanged", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onAxisVisualRangeChanged", modelName: "@OnAxisVisualRangeChanged", displayName: "Axis Visual Range Changed", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnAxisVisualRangeChanged", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onSmallChartTextShowing", modelName: "@OnSmallChartTextShowing", displayName: "Small Chart Text Showing", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnSmallChartTextShowing", editor: Report.editorTemplates.scriptsBox }
            ], chartEventsSerializationInfo = controlEventsSerializationInfo.concat(specificChartEventsSerializationInfo);
            Report.chartScripts = { propertyName: "scripts", modelName: "Scripts", info: chartEventsSerializationInfo, displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRChart.Scripts", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var specificPivotEventsSerializationInfo = [
                { propertyName: "onCustomCellDisplayText", modelName: "@OnCustomCellDisplayText", displayName: "Custom Cell Display Text", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomCellDisplayText", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomCellValue", modelName: "@OnCustomCellValue", displayName: "Custom Cell Value", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomCellValue", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomColumnWidth", modelName: "@OnCustomColumnWidth", displayName: "Custom Column Width", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomColumnWidth", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomFieldSort", modelName: "@OnCustomFieldSort", displayName: "Custom Field Sort", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomFieldSort", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomFieldValueCells", modelName: "@OnCustomFieldValueCells", displayName: "Custom Field Value Cells", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomFieldValueCells", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomGroupInterval", modelName: "@OnCustomGroupInterval", displayName: "Custom Group Interval", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomGroupInterval", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomRowHeight", modelName: "@OnCustomRowHeight", displayName: "Custom Row Height", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomRowHeight", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomSummary", modelName: "@OnCustomSummary", displayName: "Custom Summary", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomSummary", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onCustomUnboundFieldData", modelName: "@OnCustomUnboundFieldData", displayName: "Custom Unbound Field Data", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomUnboundFieldData", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onFieldValueDisplayText", modelName: "@OnFieldValueDisplayText", displayName: "Field Value Display Text", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnFieldValueDisplayText", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrefilterCriteriaChanged", modelName: "@OnPrefilterCriteriaChanged", displayName: "Prefilter Criteria Changed", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrefilterCriteriaChanged", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrintCell", modelName: "@OnPrintCell", displayName: "Print Cell", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrintCell", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrintFieldValue", modelName: "@OnPrintFieldValue", displayName: "Print Field Value", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrintFieldValue", editor: Report.editorTemplates.scriptsBox },
                { propertyName: "onPrintHeader", modelName: "@OnPrintHeader", displayName: "Print Header", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrintHeader", editor: Report.editorTemplates.scriptsBox }
            ], pivotEventsSerializationInfo = Report.truncatedControlEventsSerializationInfo.concat([Report.sizeChanged], specificPivotEventsSerializationInfo);
            Report.pivotScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.Scripts", info: pivotEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.subreportScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.SubreportBase.Scripts", info: Report.truncatedControlEventsSerializationInfo.concat(Report.sizeChanged), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var commonBandEventsSerializationInfo = [Report.afterPrint, Report.beforePrint];
            Report.commonBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.Band.Scripts", info: commonBandEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var onBandLevelChanged = { propertyName: "onBandLevelChanged", modelName: "@OnBandLevelChanged", displayName: "Band Level Changed", localizationId: "DevExpress.XtraReports.UI.GroupBandScripts.OnBandLevelChanged", editor: Report.editorTemplates.scriptsBox }, groupBandEventsSerializationInfo = commonBandEventsSerializationInfo.concat([onBandLevelChanged]);
            Report.groupBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.Scripts", info: groupBandEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var onSortingSummaryGetResult = { propertyName: "onSortingSummaryGetResult", modelName: "@OnSortingSummaryGetResult", displayName: "Sorting Summary Get Result", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBandScripts.OnSortingSummaryGetResult", editor: Report.editorTemplates.scriptsBox }, onSortingSummaryReset = { propertyName: "onSortingSummaryReset", modelName: "@OnSortingSummaryReset", displayName: "Sorting Summary Reset", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBandScripts.OnSortingSummaryReset", editor: Report.editorTemplates.scriptsBox }, onSortingSummaryRowChanged = { propertyName: "onSortingSummaryRowChanged", modelName: "@OnSortingSummaryRowChanged", displayName: "Sorting Summary RowChanged", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBandScripts.OnSortingSummaryRowChanged", editor: Report.editorTemplates.scriptsBox }, groupHeaderBandEventsSerializationInfo = groupBandEventsSerializationInfo.concat([onSortingSummaryGetResult, onSortingSummaryReset, onSortingSummaryRowChanged]);
            Report.groupHeaderBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.Scripts", info: groupHeaderBandEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var onBandHeightChanged = { propertyName: "onBandHeightChanged", modelName: "@OnBandHeightChanged", displayName: "Band's Height Changed", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnBandHeightChanged", editor: Report.editorTemplates.scriptsBox }, onDataSourceRowChanged = { propertyName: "onDataSourceRowChanged", modelName: "@OnDataSourceRowChanged", displayName: "Data Source's Row Changed", localizationId: "DevExpress.XtraReports.UI.XtraReportBase.DataSource", editor: Report.editorTemplates.scriptsBox }, onDataSourceDemanded = { propertyName: "onDataSourceDemanded", modelName: "@OnDataSourceDemanded", displayName: "Data Source Demanded", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnDataSourceDemanded", editor: Report.editorTemplates.scriptsBox }, detailReportBandEventsSerializationInfo = commonBandEventsSerializationInfo.concat([onBandHeightChanged, onDataSourceRowChanged, onDataSourceDemanded]);
            Report.detailReportBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.DetailReportBand.Scripts", info: detailReportBandEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var onFillEmptySpace = { propertyName: "onFillEmptySpace", modelName: "@OnFillEmptySpace", displayName: "Fill Empty Space", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnFillEmptySpace", editor: Report.editorTemplates.scriptsBox }, onPrintProgress = { propertyName: "onPrintProgress", modelName: "@OnPrintProgress", displayName: "Print Progress", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnPrintProgress", editor: Report.editorTemplates.scriptsBox }, onParametersRequestBeforeShow = { propertyName: "onParametersRequestBeforeShow", modelName: "@OnParametersRequestBeforeShow", displayName: "Parameters Request Before Show", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnParametersRequestBeforeShow", editor: Report.editorTemplates.scriptsBox }, onParametersRequestValueChanged = { propertyName: "onParametersRequestValueChanged", modelName: "@OnParametersRequestValueChanged", displayName: "Parameters Changed", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnParametersRequestValueChanged", editor: Report.editorTemplates.scriptsBox }, onParametersRequestSubmit = { propertyName: "onParametersRequestSubmit", modelName: "@OnParametersRequestSubmit", displayName: "Parameters Submitted", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnParametersRequestSubmit", editor: Report.editorTemplates.scriptsBox }, reportEventsSerializationInfo = detailReportBandEventsSerializationInfo.concat([
                onFillEmptySpace, onPrintProgress, onParametersRequestBeforeShow, onParametersRequestValueChanged, onParametersRequestSubmit
            ]);
            Report.reportScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XtraReport.Scripts", info: reportEventsSerializationInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.allScripts = {
                propertyName: "scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRControl.Scripts", info: labelEventsSerializationInfo.concat(specificChartEventsSerializationInfo, specificPivotEventsSerializationInfo, [
                    onBandLevelChanged, onSortingSummaryGetResult, onSortingSummaryReset, onSortingSummaryRowChanged, onBandHeightChanged, onDataSourceRowChanged, onDataSourceDemanded,
                    onFillEmptySpace, onPrintProgress, onParametersRequestBeforeShow, onParametersRequestValueChanged, onParametersRequestSubmit
                ]), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor
            };
            Report.lineWidth = { propertyName: "lineWidth", modelName: "@LineWidth", defaultVal: 1, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Line Width", localizationId: "DevExpress.XtraReports.UI.XRLine.LineWidth" };
            Report.lineStyle = {
                propertyName: "lineStyle",
                modelName: "@LineStyle", defaultVal: "Solid", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Line Style", localizationId: "DevExpress.XtraReports.UI.XRLine.LineStyle",
                valuesArray: [
                    { value: "Solid", displayValue: "Solid", localizationId: "DevExpress.XtraCharts.DashStyle.Solid" },
                    { value: "Dash", displayValue: "Dash", localizationId: "DevExpress.XtraCharts.DashStyle.Dash" },
                    { value: "Dot", displayValue: "Dot", localizationId: "DevExpress.XtraCharts.DashStyle.Dot" },
                    { value: "DashDot", displayValue: "Dash-Dot", localizationId: "DevExpress.XtraCharts.DashStyle.DashDot" },
                    { value: "DashDotDot", displayValue: "Dash-Dot-Dot", localizationId: "DevExpress.XtraCharts.DashStyle.DashDotDot" }
                ]
            };
            Report.dpi = { propertyName: "dpi", modelName: "@Dpi", defaultVal: 100, from: Designer.floatFromModel };
            var borderWidthSerializable = { propertyName: "borderWidthSerializable", modelName: "@BorderWidthSerializable", displayName: "Border Width", localizationId: "DevExpress.XtraReports.UI.Formatting.BorderWidthSerializable", from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, sides = $.extend({ displayName: "Borders", editor: Designer.Widgets.editorTemplates.borders, localizationId: 'DevExpress.XtraReports.UI.XRControl.Borders' }, Report.previewSides);
            Report.formattingSerializationsInfo = [Report.backColor, sides, Report.borderColor, Report.borderDashStyle, borderWidthSerializable,
                Report.foreColor, Report.font, Report.textAlignment, Report.defaultBooleanVisible
            ].concat(Report.paddingGroup);
            Report.conditionObj = { propertyName: "conditionObj", displayName: "Condition", localizationId: "DevExpress.XtraReports.UI.FormattingRule.Condition", editor: Designer.Widgets.editorTemplates.expressionEditor }, Report.formatting = { propertyName: "formatting", modelName: "Formatting", displayName: "Formatting", localizationId: "DevExpress.XtraReports.UI.FormattingRule.Formatting", info: Report.formattingSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.formattingRuleSerializationsInfo = [
                { propertyName: "name", modelName: "@Name", displayName: "Name", localizationId: "DevExpress.XtraReports.UI.FormattingRule.Name", editor: DevExpress.JS.Widgets.editorTemplates.text, validationRules: Designer.nameValidationRules },
                { propertyName: "condition", modelName: "@Condition", displayName: "Condition", localizationId: "DevExpress.XtraReports.UI.FormattingRule.Condition", defaultVal: "" },
                Report.conditionObj,
                Report.dataSource, Report.dataMember,
                Report.formatting
            ];
            Report.formattingRuleLinks = {
                propertyName: "formattingRuleLinks", modelName: "FormattingRuleLinks", displayName: "Formatting Rules", localizationId: "DevExpress.XtraReports.UI.XRControl.FormattingRules", array: true,
                editor: Report.editorTemplates.formattingRule, addHandler: DevExpress.Designer.Report.FormattingRule.createNew,
                displayPropertyName: "name"
            };
            Report.canPublish = { propertyName: "canPublish", modelName: "@CanPublish", displayName: "Can Publish", localizationId: "DevExpress.XtraReports.UI.XRControl.CanPublish", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            var sortingFieldName = { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", localizationId: "DevExpress.XtraReports.UI.SortingOptions.FieldName", defaultVal: "", editor: Report.editorTemplates.fieldsCombobox }, targetBand = { propertyName: "targetBand", modelName: "@TargetBand", link: true, displayName: "Target Band", localizationId: "DevExpress.XtraReports.UI.SortingOptions.TargetBand", editor: Report.editorTemplates.sortingBand };
            Report.sortingOptionsSerializationsInfo = [targetBand, sortingFieldName], Report.interactiveSorting = { propertyName: "interactiveSorting", modelName: "InteractiveSorting", displayName: "Interactive Sorting", localizationId: "DevExpress.XtraReports.UI.XRLabel.InteractiveSorting", info: Report.sortingOptionsSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.expressionBindingSerializationsInfo = [
                { propertyName: "eventName", modelName: "@EventName" },
                { propertyName: "propertyName", modelName: "@PropertyName" },
                { propertyName: "expression", modelName: "@Expression" },
            ], Report.expressionBindings = { propertyName: "expressionBindings", modelName: "ExpressionBindings", array: true, info: Report.expressionBindingSerializationsInfo };
            Report.rtl = {
                propertyName: "rightToLeft", modelName: "@RightToLeft", displayName: "Right To Left", localizationId: "DevExpress.XtraReports.UI.XRControl.RightToLeft", defaultVal: "Inherit", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "No", displayValue: "No", localizationId: "DevExpress.XtraReports.UI.RightToLeft.No" },
                    { value: "Yes", displayValue: "Yes", localizationId: "DevExpress.XtraReports.UI.RightToLeft.Yes" },
                    { value: "Inherit", displayValue: "Inherit", localizationId: "DevExpress.XtraReports.UI.RightToLeft.Inherit" }
                ]
            };
            Report.stylesObj = { propertyName: "styleObj", displayName: "Styles", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.Styles' };
            Report.sizeLocation = [Report.size, Report.location];
            Report.bordersProperties = [Report.borders, Report.borderWidth, Report.borderDashStyle, Report.borderColor];
            Report.baseControlProperties = [Report.name, Report.visible, Report.dpi, Report.lockedInUserDesigner, Report.tag, Report.expressionBindings];
            Report.commonBandProperties = [Report.backColor, Report.formattingRuleLinks].concat(Report.baseControlProperties, Report.bordersProperties, Report.paddingGroup);
            Report.commonControlProperties = [Report.styleName, Report.evenStyleName, Report.oddStyleName, Report.stylesObj, Report.stylePriority, Report.canPublish].concat(Report.commonBandProperties);
            Report.fontGroup = [Report.font, Report.foreColor];
            Report.bookmarkGroup = [Report.bookmark, Report.bookmarkParent];
            Report.navigationGroup = [Report.navigateUrl, Report.target].concat(Report.bookmarkGroup);
            Report.datasourcePrintOptionsGroup = [Report.dataSource, Report.dataMember, Report.dataAdapter, Report.filterString, Report.filterStringEditable, Report.reportPrintOptions];
            Report.processGroup = [Report.processDuplicatesMode, Report.processDuplicatesTarget, Report.processNullValues];
            Report.canGrowShrinkGroup = [Report.canGrow, Report.canShrink];
            Report.labelGroup = [Report.textAlignment, Report.text, Report.textArea, Report.textFormatString, Report.textFitMode, Report.nullValueText,
                Report.keepTogetherDefaultValueFalse, Report.summary, Report.multiline, Report.angle, Report.wordWrap, Report.xlsxFormatString, Report.rtl, Report.interactiveSorting
            ].concat(Report.commonControlProperties, Report.fontGroup, Report.navigationGroup, Report.canGrowShrinkGroup, Report.processGroup);
            Report.editOptions = {
                propertyName: "editOptions",
                modelName: "EditOptions",
                displayName: "Edit Options", localizationId: "DevExpress.XtraReports.UI.XRLabel.EditOptions",
                editor: DevExpress.JS.Widgets.editorTemplates.objecteditor,
                from: function (model, serializer) { return new Report.EditOptions(model, serializer); },
                toJsonObject: function (value, serializer) { return serializer.serialize(value); }
            };
            Report.textEditOptions = $.extend({}, Report.editOptions, {
                propertyName: "textEditOptions",
                from: function (model, serializer) { return new Report.TextEditOptions(model, serializer); }
            });
            Report.labelSerializationsInfo = [
                Report.textEditOptions,
                Report.autoWidth, Report.anchorVertical, Report.anchorHorizontal, Report.labelScripts, Report.textTrimming,
                Report.dataBindings(["Text", "NavigateUrl", "Tag", "Bookmark"])
            ].concat(Report.createSinglePopularBindingInfos("Text"), Report.sizeLocation, Report.labelGroup);
            Report.panelSerializationsInfo = [
                Report.canGrow, Report.canShrink, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal, Report.controlScripts,
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
                { propertyName: "controls", modelName: "Controls", array: true },
                Report.rtl
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup);
            Report.rtf = { propertyName: "_rtf", defaultVal: "", displayName: "RTF", editor: DevExpress.JS.Widgets.editorTemplates.stringArray, localizationId: 'ASPxReportsStringId.ExportName_rtf' }, Report.textRtf = { propertyName: "textRtf", defaultVal: "", displayName: "Text", localizationId: "DevExpress.XtraReports.UI.XRRichTextBase.RtfText", editor: DevExpress.JS.Widgets.editorTemplates.stringArray }, Report.serializableRtfString = { propertyName: "_serializableRtfString", modelName: "@SerializableRtfString", displayName: "Load file", localizationId: "DevExpress.XtraReports.UI.XRRichText.SerializableRtfString", editor: Report.editorTemplates.richTextLoad };
            Report.richTextSerializationsInfo = [
                Report.serializableRtfString,
                Report.rtf, Report.textRtf,
                Report.nullValueText, Report.keepTogetherDefaultValueFalse, Report.anchorVertical, Report.anchorHorizontal, Report.textControlScripts,
                Report.dataBindings(["Bookmark", "Html", "NavigateUrl", "Rtf", "Tag"]),
                Report.createPopularBindingInfo({ bindingName: "Html", propertyName: "popularDataBindingHtml", displayName: "Html", localizationId: "ReportStringId.STag_Name_HtmlDataBinding" }, false),
                Report.createPopularBindingInfo({ bindingName: "Html", propertyName: "popularExpressionHtml", displayName: "Html", localizationId: "ReportStringId.STag_Name_HtmlExpressionBinding" }),
                Report.createPopularBindingInfo({ bindingName: "Rtf", propertyName: "popularDataBindingRtf", displayName: "Rtf", localizationId: "ReportStringId.STag_Name_RtfDataBinding" }, false),
                Report.createPopularBindingInfo({ bindingName: "Rtf", propertyName: "popularExpressionRtf", displayName: "Rtf", localizationId: "ReportStringId.STag_Name_RtfExpressionBinding" }),
            ].concat(Report.sizeLocation, Report.fontGroup, Report.commonControlProperties, Report.navigationGroup, Report.processGroup, Report.canGrowShrinkGroup);
            Report.unknownSerializationsInfo = [].concat(Report.baseControlProperties, Report.sizeLocation);
            Report.dataBindingsSerializationInfo = [
                { propertyName: "ActualValue", editor: Report.editorTemplates.dataBinding, displayName: "Actual Value", localizationId: "DevExpress.XtraReports.UI.XRGauge.ActualValue" },
                { propertyName: "Bookmark", editor: Report.editorTemplates.dataBinding, displayName: "Bookmark", localizationId: "DevExpress.XtraReports.UI.XRControl.Bookmark" },
                { propertyName: "CheckState", editor: Report.editorTemplates.dataBinding, displayName: "Check State", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.CheckState" },
                { propertyName: "Html", editor: Report.editorTemplates.dataBinding, displayName: "HTML", localizationId: 'ASPxReportsStringId.ExportName_html' },
                { propertyName: "Image", editor: Report.editorTemplates.dataBinding, displayName: "Image", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.Image" },
                { propertyName: "ImageSource", editor: Report.editorTemplates.dataBinding, displayName: "Image Source", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageSource" },
                { propertyName: "ImageUrl", editor: Report.editorTemplates.dataBinding, displayName: "Image URL", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageUrl" },
                { propertyName: "Maximum", editor: Report.editorTemplates.dataBinding, displayName: "Maximum", localizationId: "DevExpress.XtraReports.UI.XRGauge.Maximum" },
                { propertyName: "Minimum", editor: Report.editorTemplates.dataBinding, displayName: "Minimum", localizationId: "DevExpress.XtraReports.UI.XRGauge.Minimum" },
                { propertyName: "NavigateUrl", editor: Report.editorTemplates.dataBinding, displayName: "Navigation URL", localizationId: "DevExpress.XtraReports.UI.XRControl.NavigateUrl" },
                { propertyName: "Rtf", editor: Report.editorTemplates.dataBinding, displayName: "RTF", localizationId: 'ASPxReportsStringId.ExportName_rtf' },
                { propertyName: "Tag", editor: Report.editorTemplates.dataBinding, displayName: "Tag", localizationId: "DevExpress.XtraReports.UI.XRControl.Tag" },
                { propertyName: "TargetValue", editor: Report.editorTemplates.dataBinding, displayName: "Target Value", localizationId: "DevExpress.XtraReports.UI.XRGauge.TargetValue" },
                { propertyName: "Text", editor: Report.editorTemplates.dataBinding, displayName: "Text", localizationId: "DevExpress.XtraReports.UI.XRControl.Text" }
            ];
            Report.popularPropertiesLabel = ["text", "textArea", "popularDataBinding", "popularExpression", "textFormatString", "Summary", "angle", "bookmark", "bookmarkParent", "autoWidth", "canGrow", "canShrink", "multiline", "wordWrap"];
            Report.popularPropertiesRichText = ["rtf", "popularDataBindingRtf", "popularExpressionRtf", "html", "popularDataBindingHtml", "popularExpressionHtml", "bookmark", "bookmarkParent", "canGrow", "canShrink"];
            Report.rtlLayout = {
                propertyName: "rtlLayout", modelName: "@RightToLeftLayout", displayName: "Right To Left Layout", localizationId: "DevExpress.XtraReports.UI.XtraReport.RightToLeftLayout", defaultVal: "No", editor: Report.editorTemplates.reportRtlProperty,
                valuesArray: [
                    { value: "No", displayValue: "No", localizationId: "DevExpress.XtraReports.UI.RightToLeftLayout.No" },
                    { value: "Yes", displayValue: "Yes", localizationId: "DevExpress.XtraReports.UI.RightToLeftLayout.Yes" }
                ]
            };
            Report.rtlReport = $.extend({}, Report.rtl, { defaultVal: "No", editor: Report.editorTemplates.reportRtlProperty });
            Report.imageType = {
                propertyName: "imageType", displayName: "Image Type", localizationId: "DevExpress.XtraReports.UI.XRChart.ImageType", modelName: "@ImageType", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "Metafile", valuesArray: [
                    { value: "Metafile", displayValue: "Metafile", localizationId: "DevExpress.XtraReports.UI.ChartImageType.Metafile" },
                    { value: "Bitmap", displayValue: "Bitmap", localizationId: "DevExpress.XtraReports.UI.ChartImageType.Bitmap" }
                ]
            };
            Report.processHiddenCellMode = {
                propertyName: "processHiddenCellMode",
                modelName: "@ProcessHiddenCellMode",
                displayName: "Process Hidden Cell Mode",
                valuesArray: [
                    { value: "LeaveEmptySpace", displayValue: "Leave Empty Space" },
                    { value: "ResizeCellsEqually", displayValue: "Resize Cells Equally" },
                    { value: "ResizeCellsProportionally", displayValue: "Resize Cells Proportionally" },
                    { value: "StretchPreviousCell", displayValue: "Stretch Previous Cell" },
                    { value: "StretchNextCell", displayValue: "Stretch Next Cell" },
                    { value: "DecreaseTableWidth", displayValue: "Decrease Table Width" }
                ],
                defaultVal: "LeaveEmptySpace",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                localizationId: 'DevExpress.XtraReports.UI.XRTable.ProcessHiddenCellMode' };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ComponentsModel = (function () {
                function ComponentsModel(model, renameComponentStrategy) {
                    var _this = this;
                    this.renameComponentStrategy = renameComponentStrategy;
                    this.className = function () {
                        return "component";
                    };
                    this.controlType = "XRComponent";
                    var _name = ko.observable(model.name);
                    this.data = model.data;
                    this.name = ko.pureComputed({
                        read: function () { return _name(); },
                        write: function (value) {
                            if (value !== _name() && renameComponentStrategy.validateName(value) && renameComponentStrategy.validateUnique(value, _name())) {
                                if (renameComponentStrategy.tryRename(value, _this.data)) {
                                    _name(value);
                                }
                            }
                        }
                    });
                }
                ComponentsModel.prototype.getInfo = function () {
                    return [Report.componentName];
                };
                return ComponentsModel;
            })();
            Report.ComponentsModel = ComponentsModel;
            Report.componentName = $.extend(true, {}, Report.name, { editor: Report.editorTemplates.componentName });
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Anchoring = (function (_super) {
                __extends(Anchoring, _super);
                function Anchoring(subscrible, model, anchoringProperty) {
                    _super.call(this);
                    this.state = Anchoring.states.complete;
                    this.anchoring = anchoringProperty;
                    this.start(subscrible, model);
                }
                Anchoring.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.subscribtion.dispose();
                };
                Anchoring.prototype.start = function (subscrible, model) {
                    var _this = this;
                    this.subscribtion && this.subscribtion.dispose();
                    var oldVal = ko.observable(subscrible());
                    this.subscribtion = subscrible.subscribe(function (newVal) {
                        if (_this.state !== Anchoring.states.fromControls) {
                            _this.state = Anchoring.states.inProgress;
                            _this.anchorSubscribtion(newVal, oldVal, model);
                        }
                        oldVal(newVal);
                        _this.state = Anchoring.states.complete;
                    });
                };
                Anchoring.states = {
                    inProgress: "inProgress",
                    complete: "complete",
                    fromControls: "fromControls"
                };
                return Anchoring;
            })(Designer.Disposable);
            Report.Anchoring = Anchoring;
            var VerticalAcnhoring = (function (_super) {
                __extends(VerticalAcnhoring, _super);
                function VerticalAcnhoring(subscrible, model, anchoringProperty) {
                    var _this = this;
                    _super.call(this, subscrible, model, anchoringProperty);
                    this.anchorSubscribtion = function (parentSizeValue, oldValue, model) {
                        if (Designer.checkModelReady(model.root) && isFinite(oldValue()) && oldValue()) {
                            if (_this.anchoring() === "Both") {
                                var newSize = model.size.height() + parentSizeValue - oldValue();
                                model.size.height(newSize > 0 ? newSize : 1);
                            }
                            if (_this.anchoring() === "Bottom") {
                                var newLocation = model.location.y() + parentSizeValue - oldValue();
                                model.location.y(newLocation > 0 ? newLocation : 0);
                            }
                        }
                    };
                    this._disposables.push(model.size.height.subscribe(function (newVal) {
                        if (_this.state === Anchoring.states.complete) {
                            _this.state = Anchoring.states.fromControls;
                        }
                    }));
                    this._disposables.push(model.location.y.subscribe(function (newVal) {
                        if (_this.state === Anchoring.states.complete) {
                            _this.state = Anchoring.states.fromControls;
                        }
                    }));
                }
                return VerticalAcnhoring;
            })(Anchoring);
            Report.VerticalAcnhoring = VerticalAcnhoring;
            var HorizontalAnchoring = (function (_super) {
                __extends(HorizontalAnchoring, _super);
                function HorizontalAnchoring(subscrible, model, anchoringProperty) {
                    var _this = this;
                    _super.call(this, subscrible, model, anchoringProperty);
                    this.anchorSubscribtion = function (parentSizeValue, oldValue, model) {
                        if (Designer.checkModelReady(model.root) && isFinite(oldValue()) && oldValue()) {
                            if (_this.anchoring() === "Both") {
                                var newSize = model.size.width() + parentSizeValue - oldValue();
                                model.size.width(newSize > 0 ? newSize : 1);
                            }
                            if (_this.anchoring() === "Right") {
                                var newLocation = model.location.x() + parentSizeValue - oldValue();
                                model.location.x(newLocation > 0 ? newLocation : 0);
                            }
                        }
                    };
                }
                return HorizontalAnchoring;
            })(Anchoring);
            Report.HorizontalAnchoring = HorizontalAnchoring;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.stylesProperties = ["foreColor", "borderColor", "borderWidth", "backColor", "borders", "borderDashStyle", "padding", "textAlignment", "font"];
            var ReportElementViewModel = (function (_super) {
                __extends(ReportElementViewModel, _super);
                function ReportElementViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.initialize();
                    this.formattingRuleLinks = DevExpress.JS.Utils.deserializeArray(model.FormattingRuleLinks, function (item) { return new Report.FormattingRuleLink(item, serializer); });
                    var _generateProperty = function (propertyName, stylePriorityName) {
                        _this["_" + propertyName] = ko.observable(_this[propertyName]());
                        _this._disposables.push(_this[propertyName] = ko.computed({
                            read: function () { return _this._getStyleProperty(propertyName, stylePriorityName, _this.root); },
                            write: function (val) {
                                if (_this._getStyleProperty(propertyName, stylePriorityName, _this.root) !== val) {
                                    if (_this.stylePriority && _this.stylePriority[stylePriorityName]) {
                                        _this.stylePriority[stylePriorityName](false);
                                    }
                                    _this["_" + propertyName](val);
                                }
                            }
                        }));
                    };
                    this.dsHelperProvider = function () { return _this.root["dataSourceHelper"] && _this.root["dataSourceHelper"](); };
                    this.initBindings();
                    this.getStyleProperty = function (propertyName, stylePriorityName) { return _this._getStyleProperty(propertyName, stylePriorityName, _this.root); };
                    for (var i = 0; i < Report.stylesProperties.length; i++) {
                        if (this[Report.stylesProperties[i]]) {
                            var stylePriorityName = this._getStylePriorityPropertyName(Report.stylesProperties[i]);
                            _generateProperty(Report.stylesProperties[i], stylePriorityName);
                        }
                    }
                    ;
                    if (this.padding) {
                        this._createPaddingDependencies();
                    }
                    this.toggleUseStyle = function (propertyName) {
                        var styleName = _this._getStylePriorityPropertyName(propertyName);
                        _this.stylePriority[styleName](!_this.stylePriority[styleName]());
                    };
                    this.actions.push({ action: this.toggleUseStyle, title: Designer.getLocalization("Style Priority", "DevExpress.XtraReports.UI.XRControl.StylePriority"), visible: function (name) { return _this.isStyleProperty(name); } });
                    this._disposables.push(this.lockedInUserDesigner = ko.computed({
                        read: function () {
                            var parent = _this.parentModel(), parentLocked = (parent && parent["lockedInUserDesigner"]) ? parent["lockedInUserDesigner"]() : false;
                            return _this._lockedInUserDesigner() || parentLocked;
                        },
                        write: function (newValue) { return _this._lockedInUserDesigner(newValue); }
                    }));
                }
                ReportElementViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.dataBindings);
                    this.resetObservableArray(this.formattingRuleLinks);
                    this.resetObservableArray(this.dataBindings);
                };
                ReportElementViewModel.prototype._getStylePriorityPropertyName = function (propertyName) {
                    propertyName = propertyName === "paddingObj" ? "padding" : propertyName;
                    return "use" + propertyName.charAt(0).toUpperCase() + propertyName.substr(1);
                };
                ReportElementViewModel.prototype._getStyle = function (root) {
                    var styleName = this.styleName && this.styleName(), style = styleName && root && root.findStyle && root.findStyle(styleName);
                    return style;
                };
                ReportElementViewModel.prototype._checkModify = function (target, propertyName) {
                    var property = target && (target["_" + propertyName] || target[propertyName]);
                    return ko.unwrap(property) && target.isPropertyModified(propertyName);
                };
                ReportElementViewModel.prototype._getStyleProperty = function (propertyName, stylePriorityName, root) {
                    if (this.stylePriority && this.stylePriority[stylePriorityName] && this.stylePriority[stylePriorityName]() || !this._checkModify(this, propertyName)) {
                        var style = this._getStyle(root);
                        if (this._checkModify(style, propertyName)) {
                            return style[propertyName]();
                        }
                    }
                    if (this._checkModify(this, propertyName)) {
                        return this["_" + propertyName]();
                    }
                    var defaultValue = this.getPropertyDefaultValue(propertyName);
                    if (defaultValue && !(defaultValue instanceof Object)) {
                        return defaultValue;
                    }
                    var parent = this.parentModel();
                    if (parent) {
                        return parent.getStyleProperty(propertyName, stylePriorityName);
                    }
                };
                ReportElementViewModel.prototype._zOrderChange = function (bringToFront) {
                    var parent = this.parentModel(), controlContainer = parent && parent[this.getControlContainerName()];
                    if (controlContainer) {
                        var itemIndex = controlContainer().indexOf(this);
                        controlContainer.splice(itemIndex, 1);
                        controlContainer.splice((bringToFront ? 0 : controlContainer().length), 0, this);
                    }
                };
                ReportElementViewModel.prototype._createPaddingDependencies = function () {
                    var _this = this;
                    this.paddingObj = new Designer.Widgets.PaddingModel();
                    this._disposables.push(this.paddingObj);
                    this.paddingObj.applyFromString(this["padding"]());
                    this._disposables.push(this.paddingObj.dpi = ko.computed(function () { return _this.dpi && _this.dpi(); }));
                    var isUpdate = false;
                    var lock = function (action) {
                        if (!isUpdate) {
                            isUpdate = true;
                            action();
                            isUpdate = false;
                        }
                    };
                    this._disposables.push(this.padding.subscribe(function (newVal) { return lock(function () { return _this.paddingObj.applyFromString(newVal); }); }));
                    ["left", "right", "top", "bottom"].forEach(function (name) {
                        _this._disposables.push(_this.paddingObj[name].subscribe(function (newVal) {
                            if (_this.root["isModelReady"] && _this.root["isModelReady"]() || !_this.root["isModelReady"])
                                lock(function () { return _this.padding(_this.paddingObj.toString()); });
                        }));
                    });
                    this._disposables.push(this.paddingObj.dpi.subscribe(function (newVal) { return lock(function () {
                        if (_this["_padding"]())
                            _this["_padding"](_this.paddingObj.toString());
                    }); }));
                    this.paddingObj["resetValue"] = function () {
                        lock(function () {
                            ["left", "right", "top", "bottom"].forEach(function (name) { return _this.paddingObj[name](null); });
                            _this.padding(_this.paddingObj.toString());
                            _this.paddingObj.applyFromString(_this.padding());
                        });
                    };
                };
                ReportElementViewModel.prototype.getControlFactory = function () {
                    return DevExpress.Designer.Report.controlsFactory;
                };
                ReportElementViewModel.prototype.addChild = function (control) {
                    if (control.controlType === "XRTableOfContents") {
                        var band;
                        if (Report.isHeaderOrFooterBandType(this)) {
                            var tocAlreadyExists = Report.bandControlsSomeXRTableOfContents(this);
                            if (tocAlreadyExists) {
                                throw new Error("Only one TOC can be added!!!");
                                return;
                            }
                        }
                        else if (band = Report.ControlViewModel.getNearestBand(this)) {
                            if (Report.isHeaderOrFooterBandType(band)) {
                                band.addChild(control);
                            }
                            return;
                        }
                        else {
                            throw new Error("TOC can be added only to ReportHeaderBand or ReportFooterBand!!!");
                            return;
                        }
                    }
                    _super.prototype.addChild.call(this, control);
                };
                ReportElementViewModel.prototype.initDataBindingProperties = function () {
                    var _this = this;
                    var bindingInfos = this.getInfo().filter(function (info) { return "bindingName" in info; });
                    bindingInfos.forEach(function (info) {
                        _this[info.propertyName] = _this.dataBindings()["findBinding"](info["bindingName"]);
                    });
                };
                ReportElementViewModel.prototype.initExpressionProperties = function () {
                    var _this = this;
                    if (!this.expressionBindings)
                        return;
                    var path = ko.pureComputed(function () {
                        return _this.getPath("expression");
                    });
                    this._disposables.push(path);
                    this.expressionObj = this.getControlFactory()._createExpressionObject(this.controlType, this.expressionBindings, path, this["Summary"] && this["Summary"]["Running"] && ko.computed(function () { return _this["Summary"]["Running"]() != "None"; }));
                    if (!this.expressionObj)
                        return;
                    this._disposables.push(this.expressionObj);
                    var expressionInfos = this.getInfo().filter(function (info) { return "expressionName" in info; });
                    expressionInfos.forEach(function (info) {
                        var expression = _this.expressionObj.getExpression(info["expressionName"], "BeforePrint");
                        if (expression)
                            _this[info.propertyName] = expression;
                    });
                };
                ReportElementViewModel.prototype.initBindings = function () {
                    this.initDataBindingProperties();
                    this.initExpressionProperties();
                };
                ReportElementViewModel.prototype.isStyleProperty = function (propertyName) {
                    var _this = this;
                    propertyName = propertyName === "paddingObj" ? "padding" : propertyName;
                    return this.stylePriority && Report.stylePrioritySerializationInfo.some(function (info) { return info.propertyName == _this._getStylePriorityPropertyName(propertyName); });
                };
                ReportElementViewModel.prototype.isResettableProperty = function (propertyName) {
                    return _super.prototype.isResettableProperty.call(this, propertyName) && propertyName !== "dataBindings";
                };
                ReportElementViewModel.prototype.getActionClassName = function (propertyName) {
                    var result = "";
                    if (this.isStyleProperty(propertyName)) {
                        result += this.stylePriority[this._getStylePriorityPropertyName(propertyName)]() ? " dxrd-editormenu-usestyle" : "";
                    }
                    if (this.isPropertyModified(propertyName)) {
                        result += " dxrd-editormenu-modified";
                    }
                    return result;
                };
                ReportElementViewModel.prototype.className = function () {
                    return this.controlType.toLowerCase();
                };
                ReportElementViewModel.prototype.initialize = function () {
                    if (!this.size) {
                        this.size = new Designer.Size(0, 0);
                    }
                };
                ReportElementViewModel.prototype.getPath = function (propertyName) {
                    if (propertyName === "expression" && this.dsHelperProvider()) {
                        var firstParentWithDS = Report.Utils.findFirstParentWithPropertyName(this, "dataSource");
                        var rootDataSourceName = this.dsHelperProvider().getDataSourcePath(ko.unwrap(firstParentWithDS["dataSource"]));
                        var rootDataMember = ko.unwrap(firstParentWithDS["dataMember"]) || "";
                        if (!!rootDataSourceName) {
                            return !!rootDataMember ? [rootDataSourceName, rootDataMember].join('.') : rootDataSourceName;
                        }
                        else {
                            return "";
                        }
                    }
                    return "";
                };
                ReportElementViewModel.prototype.isPropertyDisabled = function (name) {
                    return this.lockedInUserDesigner();
                };
                ReportElementViewModel.prototype.isPropertyVisible = function (name) {
                    if (this.dataBindingMode !== Report.DataBindingMode.Bindings) {
                        return name !== "dataBindings"
                            && name !== "formattingRuleLinks"
                            && name !== "formattingRuleSheet"
                            && name.indexOf("popularDataBinding") !== 0;
                    }
                    else {
                        return name.indexOf("popularExpression") !== 0;
                    }
                    return true;
                };
                ReportElementViewModel.prototype.sendToBack = function () {
                    this._zOrderChange(false);
                };
                ReportElementViewModel.prototype.bringToFront = function () {
                    this._zOrderChange(true);
                };
                ReportElementViewModel.prototype.getControlContainerName = function () { return "controls"; };
                Object.defineProperty(ReportElementViewModel.prototype, "dataBindingMode", {
                    get: function () {
                        return this.root !== this ? this.root.dataBindingMode : Report.DataBindingMode.Expressions;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ReportElementViewModel.prototype, "dpi", {
                    get: function () { return this.root !== this ? this.root.dpi : this._innerDpi; },
                    set: function (value) { this._innerDpi = value; },
                    enumerable: true,
                    configurable: true
                });
                ReportElementViewModel.prototype.rtl = function () {
                    var rtl = ko.unwrap(this["rightToLeft"]);
                    if (rtl === "Yes")
                        return true;
                    if (this.parentModel() && (!rtl || rtl === "Inherit"))
                        return this.parentModel().rtl();
                    return false;
                };
                return ReportElementViewModel;
            })(Designer.ElementViewModel);
            Report.ReportElementViewModel = ReportElementViewModel;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ControlViewModel = (function (_super) {
                __extends(ControlViewModel, _super);
                function ControlViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    if (this.text) {
                        this.textArea = this.text;
                    }
                    this.controls = Designer.deserializeChildArray(control.Controls, this, function (childControl) { return _this.createControl(childControl, serializer); });
                    if (this.anchorVertical || this.anchorHorizontal) {
                        this.anchoring(parent);
                        this._disposables.push(this.parentModel.subscribe(function (newParent) {
                            if (_this.vertAnchoring && _this.horAnchoring && newParent) {
                                _this.vertAnchoring.start(newParent.size.height, _this);
                                _this.horAnchoring.start(newParent.size.width, _this);
                            }
                            else {
                                _this.anchoring(newParent);
                            }
                        }));
                    }
                    if (this.interactiveSorting) {
                        this.interactiveSorting = new Report.SortingOptions(control["InteractiveSorting"], this.root, serializer);
                        this._disposables.push(this.interactiveSorting);
                    }
                    this._disposables.push(this.hasBindings = ko.pureComputed(function () {
                        var bindings = _this.dataBindings && _this.dataBindings();
                        return !!bindings && bindings.filter(function (dataBinding) { return !dataBinding.isEmpty(); }).length > 0 || _this.hasExpressionBindings();
                    }));
                    var stylesObject = Report.createObjectFromInfo(this, Report.stylesInfo);
                    ;
                    if (stylesObject) {
                        this[Report.stylesObj.propertyName] = stylesObject;
                    }
                    if (this["Summary"])
                        this["Summary"].isPropertyVisible = function (propertyName) {
                            return propertyName === "Func" ? _this.isPropertyVisible("dataBindings") : true;
                        };
                    if (this.textFormatString) {
                        var binding = this["dataBindings"] && this["dataBindings"]().filter(function (binding) { return binding.propertyName() === "Text"; })[0];
                        var summaryFormatString = null;
                        var bindingFormatString = null;
                        this["_textFormatString"] = ko.observable(this.textFormatString.peek());
                        _a = [this["Summary"], binding].map(function (obj) {
                            if (obj && obj["formatString"]) {
                                obj["_formatString"] = ko.observable(obj["formatString"].peek());
                                _this._disposables.push(obj["formatString"] = ko.computed({
                                    read: function () {
                                        return _this["_textFormatString"]() ||
                                            obj["_formatString"]();
                                    },
                                    write: function (x) { _this.textFormatString(x); }
                                }));
                                return obj["_formatString"];
                            }
                        }), summaryFormatString = _a[0], bindingFormatString = _a[1];
                        this._disposables.push(this.textFormatString = ko.computed({
                            read: function () {
                                return _this["_textFormatString"]() ||
                                    summaryFormatString && summaryFormatString() ||
                                    bindingFormatString && bindingFormatString();
                            },
                            write: function (x) {
                                _this["_textFormatString"](x);
                                summaryFormatString && summaryFormatString(null);
                                bindingFormatString && bindingFormatString(null);
                            }
                        }));
                    }
                    this.dataBindingsAreValid = ko.observable(true);
                    this._disposables.push(ko.computed(function () {
                        var bindings = _this.dataBindings && _this.dataBindings();
                        if (bindings) {
                            if (bindings.length === 0)
                                _this.dataBindingsAreValid(true);
                            else {
                                var report = _this.root;
                                if (!report || !(report instanceof Report.ReportViewModel))
                                    return;
                                var dsHelper = report.dsHelperProvider();
                                var parameters = report.parameters();
                                var fieldListProvider = report.getControlFactory().fieldListProvider();
                                if (!dsHelper || !parameters || !fieldListProvider)
                                    return;
                                var defaultDataSourceInfo = dsHelper.findDataSourceInfo(ko.unwrap(Report.Utils.findFirstParentWithPropertyName(_this, "dataSource").dataSource));
                                var reqFinished = 0;
                                var reqCount = bindings.length;
                                var reqResult = true;
                                var deferred = $.Deferred();
                                for (var i = 0; i < bindings.length; i++) {
                                    var binding = bindings[i], parameter = binding.parameter(), dataMember = binding.dataMember(), dataSource = binding.dataSource();
                                    if (parameter) {
                                        if (dataSource)
                                            reqResult = false;
                                        else
                                            reqResult = reqResult && parameters.some(function (x) { return x.name === parameter.name; });
                                        reqFinished++;
                                    }
                                    else if (dataMember) {
                                        var dsInfo = null;
                                        if (dataSource) {
                                            dsInfo = dataSource["dataSourceInfo"];
                                            if (dsHelper.usedDataSources().indexOf(dsInfo) < 0) {
                                                reqResult = false;
                                                reqFinished++;
                                            }
                                        }
                                        else {
                                            dsInfo = defaultDataSourceInfo;
                                        }
                                        if (dsInfo) {
                                            var lastPart = dataMember.slice(dataMember.lastIndexOf(".") + 1);
                                            fieldListProvider.getItems(new DevExpress.Analytics.Utils.PathRequest((_a = [dsInfo.id || dsInfo.ref]).concat.apply(_a, dataMember.split(".").slice(0, -1)).join(".")))
                                                .done(function (result) { if (result.every(function (x) { return x.isList || x.name !== lastPart; }))
                                                reqResult = false; })
                                                .fail(function () { reqResult = false; })
                                                .always(function () { if (++reqFinished === reqCount)
                                                deferred.resolve(reqResult); });
                                        }
                                        else {
                                            reqResult = false;
                                            reqFinished++;
                                        }
                                    }
                                    else if (dataSource) {
                                        reqResult = false;
                                        reqFinished++;
                                    }
                                    else
                                        reqFinished++;
                                    if (!reqResult) {
                                        reqFinished += reqCount - 1 - i;
                                        break;
                                    }
                                }
                                if (reqFinished === reqCount)
                                    deferred.resolve(reqResult);
                                deferred.done(function (result) { _this.dataBindingsAreValid(result); });
                            }
                        }
                        var _a;
                    }));
                    var _a;
                }
                ControlViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.controls);
                    this.resetObservableArray(this.controls);
                };
                ControlViewModel.getNearestBand = function (target) {
                    var bandModel = null;
                    var model = target;
                    do {
                        if (model instanceof Report.BandViewModel)
                            bandModel = model;
                        model = model.parentModel();
                    } while (!bandModel && model);
                    return bandModel;
                };
                ControlViewModel.prototype.anchoring = function (parent) {
                    if (parent) {
                        this.vertAnchoring = new Report.VerticalAcnhoring(parent.size.height, this, this.anchorVertical);
                        this.horAnchoring = new Report.HorizontalAnchoring(parent.size.width, this, this.anchorHorizontal);
                        this._disposables.push(this.vertAnchoring);
                        this._disposables.push(this.horAnchoring);
                    }
                };
                ControlViewModel.prototype.getNearestParent = function (target) {
                    if (["XRPageBreak", "XRPivotGrid", "XRSubreport", "XRTableOfContents"].indexOf(this.controlType) !== -1) {
                        return ControlViewModel.getNearestBand(target);
                    }
                    else {
                        return _super.prototype.getNearestParent.call(this, target);
                    }
                };
                ControlViewModel.prototype.isPropertyDisabled = function (name) {
                    if (name === "textFitMode") {
                        return this["canGrow"]() || this["canShrink"]() || (this.controlType === "XRLabel" && this["autoWidth"]());
                    }
                    else if (name === "processNullValues") {
                        return this["Summary"] && ko.unwrap(this["Summary"]["Running"]) !== "None";
                    }
                    return _super.prototype.isPropertyDisabled.call(this, name);
                };
                ControlViewModel.prototype.isPropertyVisible = function (name) {
                    if (this.multiline && this.multiline()) {
                        if (name === "text")
                            return false;
                    }
                    else {
                        if (name === "textArea")
                            return false;
                    }
                    return _super.prototype.isPropertyVisible.call(this, name);
                };
                ControlViewModel.prototype.hasExpressionBindings = function () {
                    return !!(this.expressionBindings && this.expressionBindings().filter(function (binding) { return !!binding.expression(); })[0]);
                };
                ControlViewModel.prototype.hasDataBindingByName = function (property) {
                    if (property === void 0) { property = "Text"; }
                    var bindings = this.dataBindings && this.dataBindings() && this.dataBindings().filter(function (dataBinding) { return !dataBinding.isEmpty(); });
                    if (!!bindings && bindings.length > 0) {
                        var binding = this.dataBindings()["findBinding"](property);
                        return !!binding && !binding.isEmpty();
                    }
                    return !!(this.expressionBindings && this.expressionBindings().filter(function (binding) { return binding.propertyName() === property; }).length > 0);
                };
                Object.defineProperty(ControlViewModel.prototype, "hasDefaultBindingProperty", {
                    get: function () {
                        return !!this.getControlInfo().defaultBindingName;
                    },
                    enumerable: true,
                    configurable: true
                });
                ControlViewModel.prototype.getExpressionBinding = function (property, event) {
                    if (property === void 0) { property = "Text"; }
                    if (event === void 0) { event = "BeforePrint"; }
                    if (!this.expressionBindings)
                        return null;
                    var binding = this.expressionBindings().filter(function (binding) { return binding.propertyName() === property && binding.eventName() === event; })[0];
                    return binding && binding.expression();
                };
                ControlViewModel.prototype.getControlInfo = function () {
                    return _super.prototype.getControlInfo.call(this);
                };
                ControlViewModel.prototype.getDefaultBinding = function () {
                    var bindingName = this.getControlInfo().defaultBindingName;
                    if (this.dataBindingMode !== Report.DataBindingMode.Bindings) {
                        return this.expressionObj.getExpression(bindingName, "BeforePrint");
                    }
                    else {
                        return this.dataBindings().filter(function (x) { return x.propertyName() === bindingName; })[0];
                    }
                };
                return ControlViewModel;
            })(Report.ReportElementViewModel);
            Report.ControlViewModel = ControlViewModel;
            var ControlSurfaceBase = (function (_super) {
                __extends(ControlSurfaceBase, _super);
                function ControlSurfaceBase(control, context, unitProperties) {
                    var _this = this;
                    _super.call(this, control, context, unitProperties);
                    this.delta = 0.5;
                    this.template = "dxrd-control";
                    this.selectiontemplate = "dxrd-control-selection";
                    this.contenttemplate = "dxrd-control-content";
                    this.displayNameParameters = ko.pureComputed(function () {
                        var control = _this.getControlModel();
                        var parameters = {
                            text: null,
                            isExpression: true,
                            dataSource: null,
                            dataMember: null,
                            dataMemberOffset: null
                        };
                        if (control["controls"] && control["controls"]().length !== 0) {
                            parameters.text = "";
                            return parameters;
                        }
                        parameters.text = control["getExpressionBinding"] && control["getExpressionBinding"]();
                        parameters.isExpression = !!parameters.text;
                        if (parameters.isExpression) {
                            parameters.dataMember = control["getPath"] && control["getPath"]("expression") || "";
                            return parameters;
                        }
                        if (_this.hasBindings) {
                            var textBinding = Designer.getFirstItemByPropertyValue(control["dataBindings"](), "propertyName", "Text");
                            if (textBinding && textBinding.dataMember()) {
                                var dataMember = textBinding.dataMember();
                                var dataSource = textBinding.dataSource();
                                var parentWithDS = Report.Utils.findFirstParentWithPropertyName(control, "dataSource");
                                var rootDataMember = parentWithDS["dataMember"] && parentWithDS["dataMember"]() || "";
                                var rootDataSource = parentWithDS["dataSource"] && parentWithDS["dataSource"]() || null;
                                if ((!dataSource || dataSource === rootDataSource) && dataMember.indexOf(rootDataMember) === 0 && dataMember.charAt(rootDataMember.length) === ".") {
                                    parameters.dataMemberOffset = rootDataMember;
                                    parameters.dataMember = dataMember.substr(rootDataMember.length + 1);
                                }
                                else {
                                    parameters.dataMemberOffset = "";
                                    parameters.dataMember = textBinding.dataMember();
                                }
                                parameters.dataSource = dataSource || rootDataSource;
                                return parameters;
                            }
                        }
                        parameters.text = _this.displayText();
                        return parameters;
                    });
                    this.displayName = ko.pureComputed(function () {
                        var parameters = _this.displayNameParameters();
                        return parameters.dataMember ? ("[" + parameters.dataMember + "]") : (parameters.text || "");
                    });
                    this._disposables.push(this.contentSizes = ko.pureComputed(function () { return _this.cssCalculator.contentSizeCss(_this.rect().width, _this.rect().height, _this._context.zoom()); }));
                    this._disposables.push(this.contentHeightWithoutZoom = ko.pureComputed(function () { return _this.contentSizes().height / _this._context.zoom(); }));
                    this._disposables.push(this.contentWidthWithoutZoom = ko.pureComputed(function () { return _this.contentSizes().width / _this._context.zoom(); }));
                    this._disposables.push(this.borderCss = ko.pureComputed(function () {
                        return (!control["borders"] || control["borders"]() === "None") ? { "border": "solid 1px Silver" } : _this.cssCalculator.borderCss(_this._context.zoom());
                    }));
                    this._disposables.push(this.isIntersect = ko.pureComputed(function () {
                        return _this.isThereIntersectionWithUsefulArea() ||
                            _this.isThereIntersectionWithCrossBandControls() ||
                            _this.isThereIntersectionWithControls();
                    }));
                    this._disposables.push(this.adorntemplate = ko.computed(function () { return _this.getAdornTemplate(); }));
                    this._disposables.push(this.displayNameParameters);
                    this._disposables.push(this.displayName);
                }
                ControlSurfaceBase.prototype._isThereIntersectionWithUsefulArea = function (useFullWidth) {
                    var right = ko.unwrap(this.getRoot().rtl) && this.container() ? (this.container().rect().width - this.rect().left) : this.rect().right;
                    return right > useFullWidth && Math.abs(right - useFullWidth) > this.delta;
                };
                ControlSurfaceBase._appendValue = function (accumulator, value, needToAppend) {
                    if (needToAppend === void 0) { needToAppend = true; }
                    if (needToAppend) {
                        accumulator += accumulator ? (" " + value) : value;
                    }
                    return accumulator;
                };
                ControlSurfaceBase.prototype.checkParent = function (surfaceParent) {
                    var thisParent = this.parent instanceof Report.BandSurface || this.parent instanceof Report.ReportSurface ? null : this.parent;
                    var anotherParent = surfaceParent instanceof Report.BandSurface || this.parent instanceof Report.ReportSurface ? null : surfaceParent;
                    return thisParent === anotherParent;
                };
                ControlSurfaceBase.prototype.isThereIntersection = function (rect1, rect2) {
                    var rect1Right = rect1.right || rect1.left + rect1.width, rect2Right = rect2.right || rect2.left + rect2.width, rect1Bottom = rect1.bottom || rect1.top + rect1.height, rect2Bottom = rect2.bottom || rect2.top + rect2.height;
                    return rect1Right > rect2.left && Math.abs(rect1Right - rect2.left) > this.delta &&
                        rect2Right > rect1.left && Math.abs(rect2Right - rect1.left) > this.delta &&
                        rect1Bottom > rect2.top && Math.abs(rect1Bottom - rect2.top) > this.delta &&
                        rect2Bottom > rect1.top && Math.abs(rect2Bottom - rect1.top) > this.delta;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithParent = function (parentRect, childRect) {
                    var rectWidhtElement = childRect.right || childRect.left + childRect.width, rectHeightElement = childRect.bottom || childRect.top + childRect.height;
                    return rectWidhtElement > parentRect.width && Math.abs(rectWidhtElement - parentRect.width) > this.delta ||
                        rectHeightElement > parentRect.height && Math.abs(rectHeightElement - parentRect.height) > this.delta;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithUsefulArea = function () {
                    var _container = this.container();
                    if (_container instanceof DevExpress.Designer.Report.BandSurface && _container["getUsefulRect"] && _container["getUsefulRect"]()) {
                        return this._isThereIntersectionWithUsefulArea(this.container()["getUsefulRect"]().width);
                    }
                    else if (_container instanceof DevExpress.Designer.Report.VerticalBandSurface) {
                        return false;
                    }
                    else {
                        var root = this.getRoot(), usefulPageWidth = root.pageWidth() - root.margins.left() - root.margins.right();
                        return this._isThereIntersectionWithUsefulArea(usefulPageWidth);
                    }
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithCrossBandControls = function (currentRect) {
                    if (currentRect === void 0) { currentRect = this.absoluteRect(); }
                    var isThereIntersection = false, crossBandControls = this.getRoot()["crossBandControls"]();
                    if (this.isThereIntersectionWithNeighborsCollection(currentRect, crossBandControls.filter(function (control) { return control.visible() && control.getControlModel().controlType === "XRCrossBandLine"; }), "rect")) {
                        return true;
                    }
                    var crossBandBoxControls = crossBandControls.filter(function (control) { return control.visible() && control.getControlModel().controlType === "XRCrossBandBox"; });
                    for (var crossbandIndex = 0; crossbandIndex < crossBandBoxControls.length; crossbandIndex++) {
                        var rects = crossBandBoxControls[crossbandIndex]._getCrossBandBoxSides();
                        for (var rectIndex = 0; rectIndex < rects.length; rectIndex++) {
                            if (this !== crossBandBoxControls[crossbandIndex] && this.isThereIntersection(currentRect, rects[rectIndex])) {
                                isThereIntersection = true;
                                break;
                            }
                        }
                        ;
                        if (isThereIntersection)
                            break;
                    }
                    ;
                    return isThereIntersection;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithControls = function () {
                    var collectionControls = this.parent && this.parent.getChildrenCollection() && this.parent.getChildrenCollection()().filter(function (control) { return !control.isIntersectionDeny; }) || [];
                    return this.isThereIntersectionWithParentCollection(this.rect())
                        || this.isThereIntersectionWithChildCollection(this.rect())
                        || this.isThereIntersectionWithNeighborsCollection(this.rect(), collectionControls);
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithParentCollection = function (currentRect, controlRectProperty) {
                    if (controlRectProperty === void 0) { controlRectProperty = "rect"; }
                    return this.parent && this.parent instanceof DevExpress.Designer.Report.ControlSurfaceBase &&
                        this.parent[controlRectProperty] && this.isThereIntersectionWithParent(this.parent[controlRectProperty](), currentRect);
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithChildCollection = function (currentRect, controlRectProperty) {
                    if (controlRectProperty === void 0) { controlRectProperty = "rect"; }
                    return this["controls"] && this["controls"]().length > 0 &&
                        this.isThereIntersectionWithChildControls(currentRect, this["controls"](), controlRectProperty);
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithNeighborsCollection = function (currentRect, collectionControls, controlRectProperty) {
                    if (controlRectProperty === void 0) { controlRectProperty = "rect"; }
                    for (var i = 0; i < collectionControls.length; i++) {
                        if (this !== collectionControls[i] && this.isThereIntersection(currentRect, collectionControls[i][controlRectProperty]())) {
                            return true;
                        }
                    }
                    return false;
                };
                ControlSurfaceBase.prototype.isThereIntersectionWithChildControls = function (currentRect, collectionControls, controlRectProperty) {
                    if (controlRectProperty === void 0) { controlRectProperty = "rect"; }
                    for (var i = 0; i < collectionControls.length; i++) {
                        if (this !== collectionControls[i] && this.isThereIntersectionWithParent(currentRect, collectionControls[i][controlRectProperty]())) {
                            return true;
                        }
                    }
                    return false;
                };
                ControlSurfaceBase.prototype.getAdornTemplate = function () {
                    var result = ControlSurface._appendValue("", "dxrd-intersect", this.isIntersect());
                    result = ControlSurface._appendValue(result, "dxrd-control-rtl", this._control.rtl());
                    if (this.hasBindings) {
                        if (this._context["validationMode"] && this._context["validationMode"]() && !this.bindingsIsValid)
                            result = ControlSurface._appendValue(result, "dxrd-image-surface-bounded-notvalid", true);
                        else
                            result = ControlSurface._appendValue(result, "dxrd-image-surface-bounded", true);
                    }
                    return result;
                };
                ControlSurfaceBase.prototype.hasDataBindingByName = function (propertyName) {
                    return !!(this._control["hasDataBindingByName"] && this._control["hasDataBindingByName"](propertyName));
                };
                Object.defineProperty(ControlSurfaceBase.prototype, "hasBindings", {
                    get: function () { return !!(this._control["hasBindings"] && this._control["hasBindings"]()); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControlSurfaceBase.prototype, "bindingsIsValid", {
                    get: function () {
                        var bindingsValid = this._control["dataBindingsAreValid"]();
                        if (this._control["dataBindingMode"] !== "Bindings") {
                            if (!!this._control["expressionBindings"]) {
                                return this._control["expressionObj"].validateExpression();
                            }
                            return true;
                        }
                        else {
                            return bindingsValid;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                ControlSurfaceBase.prototype.displayText = function () {
                    if (this._control.controlType == "XRPanel")
                        return DevExpress.Designer.getLocalization("Place controls here to keep them together", "ReportStringId.PanelDesignMsg");
                    var text = this._control["text"] && this._control["text"]() ? this._control["text"]() : "";
                    if (this._control["multiline"] && !this._control["multiline"]()) {
                        text = text.replace(/\r/g, "").replace(/\n/g, "");
                    }
                    return text;
                };
                return ControlSurfaceBase;
            })(Designer.SurfaceElementBase);
            Report.ControlSurfaceBase = ControlSurfaceBase;
            var ControlSurface = (function (_super) {
                __extends(ControlSurface, _super);
                function ControlSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, ControlSurface._unitProperties);
                    this["multiline"] = control["multiline"] || false;
                    this.getUsefulRect = function () {
                        var borderWidth = ko.unwrap(control["borderWidth"]), borderFlags = control["borders"]();
                        var rect = { top: 0, left: 0, width: _this.rect().width, height: _this.rect().height };
                        if (borderWidth) {
                            if (borderFlags === "All") {
                                rect.height -= 2 * borderWidth;
                                rect.width -= 2 * borderWidth;
                            }
                            else {
                                if (borderFlags.indexOf("Top") >= 0)
                                    rect.height -= borderWidth;
                                if (borderFlags.indexOf("Right") >= 0)
                                    rect.width -= borderWidth;
                                if (borderFlags.indexOf("Bottom") >= 0)
                                    rect.height -= borderWidth;
                                if (borderFlags.indexOf("Left") >= 0)
                                    rect.width -= borderWidth;
                            }
                        }
                        return rect;
                    };
                }
                ControlSurface.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.controls);
                    this.resetObservableArray(this.controls);
                };
                ControlSurface._unitProperties = {
                    _height: function (o) {
                        return o.size.height;
                    },
                    _width: function (o) {
                        return o.size.width;
                    },
                    _x: function (o) {
                        return o.location.x;
                    },
                    _y: function (o) {
                        return o.location.y;
                    }
                };
                return ControlSurface;
            })(ControlSurfaceBase);
            Report.ControlSurface = ControlSurface;
            var TextControlSurfaceBase = (function (_super) {
                __extends(TextControlSurfaceBase, _super);
                function TextControlSurfaceBase(control, context, units) {
                    var _this = this;
                    if (units === void 0) { units = ControlSurface._unitProperties; }
                    _super.call(this, control, context, units);
                    this._$element = ko.observable(null);
                    this._font = null;
                    this.contenttemplate = "dxrd-textcontrol-content";
                    this["multiline"] = control["multiline"] || false;
                    this._disposables.push(this._font = new DevExpress.JS.Widgets.FontModel(control["font"]));
                    var canGrow = function () { return control["canGrow"] && control["canGrow"](); };
                    var textElementSizeHelper = new Report.TextElementSizeHelper();
                    this.fitTextToBoundsAction = new Report.FitTextToBoundsAction(this, textElementSizeHelper);
                    this.fitBoundsToTextAction = new Report.FitBoundsToTextAction(this, textElementSizeHelper);
                    this._disposables.push(this.characterHeight = ko.computed(function () {
                        return textElementSizeHelper.getTextContainerSize("a", {
                            "font-size": _this._font.size() + _this._font.unit(),
                            "font-family": _this._font.family(),
                            "height": "auto",
                            "width": "auto"
                        }).height;
                    }));
                    this._disposables.push(ko.computed(function () {
                        if (_this._$element()) {
                            _this._$element().height('auto');
                            var text = _this._control["text"]();
                            var characterHeight = _this.characterHeight();
                            var contentHeight = _this._$element().height();
                            if (contentHeight > _this.rect().height && !canGrow()) {
                                var visibleHeight = Math.floor(_this.rect().height / characterHeight) * characterHeight;
                                if (visibleHeight)
                                    _this._$element().height(visibleHeight + 'px');
                            }
                        }
                    }));
                }
                TextControlSurfaceBase.prototype.getAlignments = function () {
                    var textAlignment = this._control["textAlignment"]();
                    var vertical = "";
                    var horizontal = "";
                    for (var i = 0; i < textAlignment.length; i++) {
                        if (textAlignment[i] === textAlignment[i].toLocaleUpperCase()) {
                            if (vertical === "") {
                                vertical += textAlignment[i];
                            }
                            else if (vertical !== "") {
                                horizontal += textAlignment[i];
                            }
                        }
                        else {
                            if (horizontal !== "") {
                                horizontal += textAlignment[i];
                            }
                            else {
                                vertical += textAlignment[i];
                            }
                        }
                    }
                    return {
                        vertical: vertical,
                        horizontal: horizontal
                    };
                };
                TextControlSurfaceBase.prototype.getWordWrap = function () {
                    return this._control["wordWrap"] && this._control["wordWrap"]();
                };
                TextControlSurfaceBase.prototype.getCssContent = function (content) {
                    if (content === void 0) { content = {}; }
                    return DevExpress.JS.Utils.extend({}, this.contentCss(), {
                        "box-sizing": "border-box",
                        "height": "auto",
                        "display": "inline-block",
                        "width": "auto",
                        "transform": "scale(" + this._context.zoom() + ")"
                    }, content);
                };
                TextControlSurfaceBase.prototype.getContentSize = function () {
                    return this.contentSizes();
                };
                TextControlSurfaceBase.prototype.getText = function () {
                    return this.displayText();
                };
                TextControlSurfaceBase.prototype.getFontModel = function () {
                    return this._font;
                };
                TextControlSurfaceBase.prototype.setFontSize = function (size) {
                    this._font.size(size);
                };
                TextControlSurfaceBase.prototype.cacheElementContent = function ($element) {
                    this._$element(null);
                    this._$element($element);
                };
                TextControlSurfaceBase.prototype.fitTextToBounds = function () {
                    this.fitTextToBoundsAction.fit();
                };
                TextControlSurfaceBase.prototype.fitWidthToText = function () {
                    this.fitBoundsToTextAction.fitWidth();
                };
                TextControlSurfaceBase.prototype.fitHeightToText = function () {
                    this.fitBoundsToTextAction.fitHeight();
                };
                TextControlSurfaceBase.prototype.fitBoundsToText = function () {
                    this.fitBoundsToTextAction.fitBounds();
                };
                return TextControlSurfaceBase;
            })(ControlSurfaceBase);
            Report.TextControlSurfaceBase = TextControlSurfaceBase;
            var TodoControlSurface = (function (_super) {
                __extends(TodoControlSurface, _super);
                function TodoControlSurface(control, context) {
                    _super.call(this, control, context);
                    this["controlTypeClass"] = "dxrd-image-todo-" + control.controlType.slice(2).toLowerCase();
                    this["controlTypeIconTemplate"] = "dxrd-svg-todo-" + control.controlType.slice(2).toLowerCase();
                    this.template = "dxrd-todocontrol";
                }
                return TodoControlSurface;
            })(ControlSurface);
            Report.TodoControlSurface = TodoControlSurface;
            ko.bindingHandlers["controlDisplayName"] = {
                update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var value = valueAccessor(), surface = ko.unwrap(value);
                    var parameters = surface.displayNameParameters();
                    var setElementText = function (value) { return $(element).text(value ? ("[" + value + "]") : ""); };
                    if (parameters.isExpression) {
                        $(element).text(parameters.text);
                        var expressionConverter = new DevExpress.JS.Utils.DisplayExpressionConverter(bindingContext.$root.displayNameProvider());
                        expressionConverter.toDisplayExpression(parameters.dataMember, parameters.text).done(function (result) {
                            $(element).text(result);
                        });
                    }
                    else if (parameters.dataMember) {
                        setElementText(parameters.dataMember);
                        bindingContext.$root.displayNameProvider()
                            .getDisplayName(parameters.dataSource, parameters.dataMember, parameters.dataMemberOffset, false)
                            .done(function (data) { return setElementText(data); })
                            .fail(function () { return setElementText(parameters.dataMember); });
                    }
                    else {
                        $(element).text(parameters.text || "");
                    }
                }
            };
            ko.bindingHandlers["displayNameExtender"] = {
                init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var value = ko.unwrap(valueAccessor());
                    var displayName = ko.observable("");
                    var displayNameLoader = ko.computed(function () {
                        if (value.dataMember()) {
                            var displayNameProvider = bindingContext.$root.displayNameProvider.peek();
                            var promise = value.path ? displayNameProvider.getDisplayNameByPath(value.path(), value.dataMember()) :
                                displayNameProvider.getDisplayName(value.dataSource(), value.dataMember(), value.dataMemberOffset, value.includeDataSourceName);
                            promise.done(function (data) { return displayName(data); })
                                .fail(function () { return displayName(value.dataMember()); });
                        }
                        else {
                            displayName("");
                        }
                    }).extend({ rateLimit: 0 });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        displayNameLoader.dispose();
                    });
                    var innerBindingContext = bindingContext.extend({ $displayName: displayName });
                    ko.applyBindingsToDescendants(innerBindingContext, element);
                    return { controlsDescendantBindings: true };
                }
            };
            ko.virtualElements.allowedBindings["displayNameExtender"] = true;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var CalculatedField = (function (_super) {
                __extends(CalculatedField, _super);
                function CalculatedField(model, serializer) {
                    _super.call(this);
                    this.templateName = "dx-treelist-item";
                    this.contenttemplate = "dxrd-calculatedfield-content";
                    this.isList = false;
                    this.isCalculated = true;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                CalculatedField.prototype.getInfo = function () {
                    return calculatedFieldSerializationInfo;
                };
                Object.defineProperty(CalculatedField.prototype, "displayName", {
                    get: function () {
                        return this["displayNameObject"]() || this.calculatedFieldName();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CalculatedField.prototype, "name", {
                    get: function () {
                        return this.calculatedFieldName();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CalculatedField.prototype, "specifics", {
                    get: function () {
                        var type = this.fieldType();
                        if (["Byte", "Int16", "Int32"].indexOf(type) > -1) {
                            return "calcinteger";
                        }
                        else if (["Float", "Double", "Decimal"].indexOf(type) > -1) {
                            return "calcfloat";
                        }
                        else if (["DateTime", "TimeSpan"].indexOf(type) > -1) {
                            return "calcdate";
                        }
                        return "calc" + (type === "None" ? "default" : type.toLowerCase());
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CalculatedField.prototype, "type", {
                    get: function () {
                        return this.fieldType();
                    },
                    enumerable: true,
                    configurable: true
                });
                return CalculatedField;
            })(Designer.Disposable);
            Report.CalculatedField = CalculatedField;
            var calculatedFieldScriptsInfo = [
                { propertyName: "onGetValue", modelName: "@OnGetValue", displayName: "Get a Value", localizationId: "DevExpress.XtraReports.UI.CalculatedFieldScripts.OnGetValue", editor: Report.editorTemplates.scriptsBox }
            ];
            Report.calculatedFieldScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.CalculatedField.Scripts", info: calculatedFieldScriptsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var calculatedFieldSerializationInfo = [
                { propertyName: "calculatedFieldName", modelName: "@Name" },
                { propertyName: "nameEditable", displayName: "Name", editor: DevExpress.JS.Widgets.editorTemplates.text, validationRules: Designer.nameValidationRules, localizationId: 'DevExpress.XtraReports.UI.XRControl.Name' },
                Report.displayName,
                {
                    propertyName: "fieldType", modelName: "@FieldType", displayName: "Field Type", localizationId: "DevExpress.XtraReports.UI.CalculatedField.FieldType", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "None", from: Designer.fromEnum,
                    valuesArray: [
                        { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.FieldType.None" },
                        { value: "String", displayValue: "String", localizationId: "DevExpress.XtraReports.UI.FieldType.String" },
                        { value: "DateTime", displayValue: "DateTime", localizationId: "DevExpress.XtraReports.UI.FieldType.DateTime" },
                        { value: "TimeSpan", displayValue: "TimeSpan", localizationId: "DevExpress.XtraReports.UI.FieldType.TimeSpan" },
                        { value: "Byte", displayValue: "Byte", localizationId: "DevExpress.XtraReports.UI.FieldType.Byte" },
                        { value: "Int16", displayValue: "Int16", localizationId: "DevExpress.XtraReports.UI.FieldType.Int16" },
                        { value: "Int32", displayValue: "Int32", localizationId: "DevExpress.XtraReports.UI.FieldType.Int32" },
                        { value: "Float", displayValue: "Float", localizationId: "DevExpress.XtraReports.UI.FieldType.Float" },
                        { value: "Double", displayValue: "Double", localizationId: "DevExpress.XtraReports.UI.FieldType.Double" },
                        { value: "Decimal", displayValue: "Decimal", localizationId: "DevExpress.XtraReports.UI.FieldType.Decimal" },
                        { value: "Boolean", displayValue: "Boolean", localizationId: "DevExpress.XtraReports.UI.FieldType.Boolean" }
                    ]
                },
                Report.dataSource,
                Report.dataMember,
                { propertyName: "expression", modelName: "@Expression", displayName: "Expression", localizationId: "DevExpress.XtraReports.UI.CalculatedField.Expression", defaultVal: "" },
                { propertyName: "expressionObj", displayName: "Expression", localizationId: "DevExpress.XtraReports.UI.CalculatedField.Expression", editor: Designer.Widgets.editorTemplates.expressionEditor },
                Report.calculatedFieldScripts
            ];
            var CalculatedFieldsSource = (function (_super) {
                __extends(CalculatedFieldsSource, _super);
                function CalculatedFieldsSource(calculatedFields, reportDataSource, dataSourceHelper) {
                    var _this = this;
                    _super.call(this);
                    this._calculatedFieldsInfo = {};
                    this._ordinaryFieldsInfo = {};
                    this._fieldsDataMembersInfo = {};
                    this.addAction = {
                        clickAction: function (item) {
                            return _this.addCalculatedField(item.path);
                        },
                        imageClassName: "dxrd-image-add-calcfield",
                        imageTemplateName: "dxrd-svg-operations-add_calcfield",
                        text: "Add calculated field",
                        displayText: function () { return Designer.getLocalization("Add calculated field", 'ASPxReportsStringId.ReportDesigner_FieldListActions_AddCalculatedField'); }
                    };
                    this.removeAction = {
                        clickAction: function (item) {
                            _this.removeCalculatedField(item.path);
                        },
                        position: 50,
                        imageClassName: "dxrd-image-recycle-bin",
                        imageTemplateName: "dxrd-svg-operations-recycle_bin",
                        text: "Remove calculated field",
                        displayText: function () { return Designer.getLocalization("Remove calculated field", "ASPxReportsStringId.ReportDesigner_FieldListActions_RemoveCalculatedField"); }
                    };
                    this._calculatedFieldsInfo = {};
                    this._calculatedFields = calculatedFields;
                    this._dataSourceHelper = ko.observable(dataSourceHelper);
                    this._reportDataSource = reportDataSource;
                    for (var index = 0; index < calculatedFields().length; index++) {
                        this._initializeCalculatedField(calculatedFields()[index]);
                    }
                    ;
                    var self = this;
                    this._disposables.push(this._calculatedFields.subscribe(function (changes) {
                        for (var index = 0; index < changes.length; index++) {
                            if (changes[index].status === "added") {
                                self._initializeCalculatedField(changes[index].value);
                            }
                            else if (changes[index].status === "deleted") {
                                var fullPath = self._getFieldPathRequest(changes[index].value).fullPath;
                                self._getDataMembersInfoByPath(fullPath).remove(function (item) {
                                    return changes[index].value.name === item.name;
                                });
                                changes[index].value.dispose();
                            }
                        }
                        ;
                    }, null, "arrayChange"));
                    this._disposables.push(this._reportDataSource.subscribe(function (newValue) {
                        for (var index = 0; index < calculatedFields().length; index++) {
                            if (!calculatedFields()[index].dataSource()) {
                                _this._updateFieldPathRequest(calculatedFields()[index]);
                            }
                        }
                    }));
                    this.addCalculatedField = function (fullPath) {
                        var pathRequest = new DevExpress.JS.Widgets.PathRequest(fullPath);
                        var newField = _this.createCalculatedField(pathRequest.path);
                        var dataSourceInfo = _this._dataSourceHelper().findDataSourceInfoByID(pathRequest.id) || _this._dataSourceHelper().findDataSourceInfoByRef(pathRequest.ref);
                        newField.dataSource(dataSourceInfo.data);
                        calculatedFields.push(newField);
                        return newField;
                    };
                    this.removeCalculatedField = function (fullPath) {
                        var pathRequest = new DevExpress.JS.Widgets.PathRequest(fullPath);
                        calculatedFields.remove(function (item) {
                            var path = item.dataMember() ? (item.dataMember() + "." + item.name) : item.name;
                            return pathRequest.path === path;
                        });
                    };
                }
                CalculatedFieldsSource.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    for (var name in this._calculatedFieldsInfo) {
                        this.disposeObservableArray(this._calculatedFieldsInfo[name]);
                        this.resetObservableArray(this._calculatedFieldsInfo[name]);
                        delete this._calculatedFieldsInfo[name];
                    }
                    this.disposeObservableArray(this._calculatedFields);
                    this.resetObservableArray(this._calculatedFields);
                    this._dataSourceHelper(null);
                    this._reportDataSource = null;
                    this._fieldsDataMembersInfo = null;
                    this._fieldsCallback = null;
                };
                CalculatedFieldsSource.prototype._getDataMembersInfoByPath = function (fullPath) {
                    this._calculatedFieldsInfo[fullPath] = this._calculatedFieldsInfo[fullPath] || ko.observableArray();
                    return this._calculatedFieldsInfo[fullPath];
                };
                CalculatedFieldsSource.prototype._subscribeFieldProperties = function (field) {
                    var _this = this;
                    field._disposables.push(field.dataMember.subscribe(function (newValue) {
                        _this._getDataMembersInfoByPath(field.pathRequest.fullPath).remove(field);
                        field.pathRequest = new DevExpress.JS.Widgets.PathRequest(Designer.getFullPath(field.pathRequest.id || field.pathRequest.ref, newValue));
                        _this._getDataMembersInfoByPath(field.pathRequest.fullPath).push(field);
                    }));
                    field._disposables.push(field.dataSource.subscribe(function (newValue) {
                        _this._updateFieldPathRequest(field);
                    }));
                    field._disposables.push(field.calculatedFieldName.subscribe(function (newValue) {
                        _this._getDataMembersInfoByPath(field.pathRequest.fullPath).notifySubscribers();
                    }));
                };
                CalculatedFieldsSource.prototype._getFieldPathRequest = function (field) {
                    var dataSourceInfo = this._dataSourceHelper().findDataSourceInfo(field.dataSource() || this._reportDataSource());
                    if (dataSourceInfo)
                        return new DevExpress.JS.Widgets.PathRequest(Designer.getFullPath(dataSourceInfo.id || dataSourceInfo.ref, field.dataMember()));
                    return new DevExpress.JS.Widgets.PathRequest("none");
                };
                CalculatedFieldsSource.prototype._updateFieldPathRequest = function (field) {
                    this._getDataMembersInfoByPath(field.pathRequest.fullPath).remove(field);
                    field.pathRequest = this._getFieldPathRequest(field);
                    if (field.pathRequest.ref !== "none") {
                        this._getDataMembersInfoByPath(field.pathRequest.fullPath).push(field);
                    }
                };
                CalculatedFieldsSource.prototype._initializeCalculatedField = function (field) {
                    var _this = this;
                    var pathRequest = this._getFieldPathRequest(field);
                    field["getPath"] = function (propertyName) {
                        var dataSourceInfo = _this._dataSourceHelper().findDataSourceInfo(field.dataSource() || _this._reportDataSource());
                        return dataSourceInfo && (dataSourceInfo.id || dataSourceInfo.ref);
                    };
                    field.expressionObj = {
                        value: field["expression"],
                        path: ko.pureComputed(function () {
                            return _this._getFieldPathRequest(field).fullPath;
                        }),
                        fieldName: field.calculatedFieldName,
                        functions: DevExpress.Designer.Report.reportFunctionDisplay.filter(function (cat) { return cat.category != "Summary"; })
                    };
                    field._disposables.push(field.expressionObj.path);
                    field.nameEditable = ko.pureComputed({
                        read: function () {
                            return field.calculatedFieldName();
                        },
                        write: function (value) {
                            var fields = this._ordinaryFieldsInfo[field.pathRequest.fullPath];
                            if (!!value && Designer.getFirstItemByPropertyValue(this._calculatedFields(), "name", value) === null && Designer.getFirstItemByPropertyValue(fields || [], "displayName", value) === null) {
                                field.calculatedFieldName(value);
                            }
                        },
                        owner: this
                    });
                    field._disposables.push(field.nameEditable);
                    field.pathRequest = pathRequest;
                    field.propertyGrid = new DevExpress.JS.Widgets.ObjectProperties(ko.observable(field));
                    field._disposables.push(field.propertyGrid);
                    this._subscribeFieldProperties(field);
                    this._getDataMembersInfoByPath(pathRequest.fullPath).push(field);
                };
                CalculatedFieldsSource.prototype._generateNewFieldName = function () {
                    var i = 1;
                    var generatedName;
                    do {
                        generatedName = "calculatedField" + i++;
                    } while (Designer.getFirstItemByPropertyValue(this._calculatedFields(), "name", generatedName) !== null);
                    return generatedName;
                };
                CalculatedFieldsSource.prototype.createCalculatedField = function (dataMember) {
                    return new CalculatedField({
                        "@Name": this._generateNewFieldName(),
                        "@DataMember": dataMember
                    });
                };
                CalculatedFieldsSource.prototype.getActions = function (context) {
                    var result = [];
                    if (context.hasItems && (context.data.specifics === "List" || context.data.specifics === "ListSource") && context.path.indexOf("Parameters") !== 0) {
                        result.push(this.addAction);
                    }
                    if (context.data && context.data.specifics && context.data.specifics.indexOf("calc") === 0) {
                        result.push(this.removeAction);
                    }
                    return result;
                };
                CalculatedFieldsSource.prototype.beforeItemsFilled = function (request, items) {
                    if (request.fullPath) {
                        items.push.apply(items, this._getDataMembersInfoByPath(request.fullPath)());
                    }
                    return false;
                };
                CalculatedFieldsSource.prototype.afterItemsFilled = function (request, items) {
                    if (request.fullPath) {
                        this._ordinaryFieldsInfo[request.fullPath] = items;
                        items.sort(function (a, b) {
                            var aIsList = Report.FieldListController.isList(a) ? 1 : 0;
                            var bIsList = Report.FieldListController.isList(b) ? 1 : 0;
                            if (aIsList !== bIsList) {
                                return bIsList - aIsList;
                            }
                            else {
                                return (a.displayName && b.displayName) ? a.displayName.localeCompare(b.displayName) : a.name.localeCompare(b.name);
                            }
                        });
                    }
                };
                return CalculatedFieldsSource;
            })(Designer.Disposable);
            Report.CalculatedFieldsSource = CalculatedFieldsSource;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var DataSourceHelper = (function (_super) {
                __extends(DataSourceHelper, _super);
                function DataSourceHelper(objects, dataSourceRefs, availableDataSources) {
                    var _this = this;
                    _super.call(this);
                    this.usedDataSources = ko.observableArray();
                    this.allDataSources = ko.observableArray();
                    this.usedDataSources.push({ ref: "none", name: "none", specifics: "none", data: null, dataSerializer: null });
                    this._objects = objects;
                    for (var i = 0; i < objects().length; i++) {
                        var ref = objects()[i]["_model"]["@Ref"];
                        var dataSourceRef = dataSourceRefs.filter(function (ds) { return ds.ref === ref; })[0];
                        if (dataSourceRef) {
                            objects()[i]["dataSourceInfo"] = { ref: ref, data: objects()[i], name: dataSourceRef.name, isSqlDataSource: dataSourceRef.isSqlDataSource, dataSerializer: dataSourceRef.dataSerializer };
                            this._addUsedDataSource(objects()[i]["dataSourceInfo"]);
                        }
                    }
                    ;
                    var self = this;
                    this._disposables.push(objects.subscribe(function (changes) {
                        for (var index = 0; index < changes.length; index++) {
                            if (!changes[index].value["dataSourceInfo"])
                                return;
                            if (changes[index].status === "added") {
                                self._addUsedDataSource(changes[index].value["dataSourceInfo"]);
                            }
                            else if (changes[index].status === "deleted") {
                                var dataSourceInfo = self.findDataSourceInfo(changes[index].value);
                                if (dataSourceInfo) {
                                    _this.usedDataSources.remove(dataSourceInfo);
                                    _this.allDataSources.remove(dataSourceInfo);
                                }
                            }
                        }
                    }, null, "arrayChange"));
                    this.availableDataSources = (availableDataSources || []).map(function (object) {
                        return $.extend({}, object, { data: new Report.ObjectStorageItem(object.data, function () { return _this; }) });
                    });
                    this.allDataSources.push.apply(this.allDataSources, this.availableDataSources);
                }
                DataSourceHelper.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this._objects = null;
                    this.availableDataSources.splice(0);
                    this.usedDataSources([]);
                    this.allDataSources([]);
                };
                DataSourceHelper.prototype.getDataSourcePath = function (dataSource) {
                    var dataSourceInfo = dataSource && this.findDataSourceInfo(dataSource);
                    if (dataSourceInfo) {
                        return dataSourceInfo.id || dataSourceInfo.ref;
                    }
                    else {
                        return "";
                    }
                };
                DataSourceHelper.prototype._findDataSourceInfo = function (name, collection) {
                    return collection().filter(function (info) { return info.name === name; })[0];
                };
                DataSourceHelper.prototype._getDataSourceInfo = function (name) {
                    var result = this._findDataSourceInfo(name, this.usedDataSources);
                    if (!result) {
                        var resultSource = this._findDataSourceInfo(name, this.allDataSources);
                        if (resultSource) {
                            result = this._addDataSource(resultSource, resultSource.data);
                        }
                    }
                    return result;
                };
                DataSourceHelper.prototype._getDataSourceName = function (dataSource) {
                    var dataSourceInfo = this.findDataSourceInfo(dataSource);
                    return dataSourceInfo && dataSourceInfo.name;
                };
                DataSourceHelper.prototype._addUsedDataSource = function (result) {
                    this.usedDataSources.splice(this.usedDataSources().length - 1, 0, result);
                    this.allDataSources.push(result);
                };
                DataSourceHelper.prototype._addDataSource = function (dataSource, data) {
                    if (!dataSource.name) {
                        throw new Error("dataSource name is undefined or null (ref=" + dataSource.ref + ", id=" + dataSource.id + ")");
                    }
                    var dataSourceName = Designer.getUniqueNameForNamedObjectsArray(this.allDataSources(), Designer.replaceInvalidSymbols(dataSource.name));
                    var newData = data;
                    if (this._objects().indexOf(data) === -1) {
                        newData = data.clone();
                        newData["dataSourceInfo"] = $.extend({}, dataSource, { name: dataSourceName, data: newData });
                        newData["name"] = ko.observable(dataSourceName);
                        this._objects.push(newData);
                    }
                    return this.findDataSourceInfo(newData);
                };
                DataSourceHelper.prototype.addDataSource = function (dataSourceInfo) {
                    var _this = this;
                    var data = (dataSourceInfo.data instanceof Report.ObjectItem) ? dataSourceInfo.data : Report.ObjectItem.createNew(dataSourceInfo.data, function () { return _this; });
                    return this._addDataSource(dataSourceInfo, data).data;
                };
                DataSourceHelper.prototype.removeDataSource = function (dataSourceInfo) {
                    this._objects.remove(dataSourceInfo.data);
                };
                DataSourceHelper.prototype.dataSourceValue = function (value, undoEngine) {
                    var _this = this;
                    var dataSourceValue = ko.pureComputed({
                        read: function () {
                            return _this._getDataSourceName(value());
                        },
                        write: function (val) {
                            var _undoEngine = undoEngine && undoEngine();
                            _undoEngine && _undoEngine.start();
                            var newDataSource = _this._getDataSourceInfo(val);
                            if (DataSourceHelper._assignValueInTimeout) {
                                setTimeout(function () {
                                    value(newDataSource && newDataSource.data);
                                    _undoEngine && _undoEngine.end();
                                }, 1);
                            }
                            else {
                                value(newDataSource && newDataSource.data);
                                _undoEngine && _undoEngine.end();
                            }
                        }
                    });
                    this._disposables.push(dataSourceValue);
                    return dataSourceValue;
                };
                DataSourceHelper.prototype.dataSourceDisplayExpr = function (dataSource) {
                    return (!dataSource || !dataSource.data) ? DevExpress.Designer.localizeNoneString("none") : dataSource.name;
                };
                DataSourceHelper.prototype.mergedDataSources = function () {
                    var _this = this;
                    var dataSources = this.usedDataSources().slice(0, -1);
                    for (var i = this.availableDataSources.length - 1; i >= 0; i--) {
                        if (!Designer.findFirstItemMatchesCondition(dataSources, function (item) { return item.name === _this.availableDataSources[i].name; })) {
                            dataSources.unshift(this.availableDataSources[i]);
                        }
                    }
                    return dataSources;
                };
                DataSourceHelper.prototype.findDataSourceInfo = function (dataSource) {
                    return this.usedDataSources().filter(function (info) { return info.data === dataSource; })[0];
                };
                DataSourceHelper.prototype.findDataSourceInfoByID = function (id) {
                    return this.usedDataSources().filter(function (info) { return info.id === id; })[0];
                };
                DataSourceHelper.prototype.findDataSourceInfoByRef = function (ref) {
                    return this.usedDataSources().filter(function (info) { return info.ref === ref; })[0];
                };
                DataSourceHelper.prototype.findDataSourceInfoByName = function (name) {
                    return this.usedDataSources().filter(function (item) { return item.name === name; })[0];
                };
                DataSourceHelper.defaultReportExtensionKey = "DataSerializationExtension";
                DataSourceHelper.defaultObjectDataSourceItemSpecifics = "Default";
                DataSourceHelper._assignValueInTimeout = true;
                return DataSourceHelper;
            })(Designer.Disposable);
            Report.DataSourceHelper = DataSourceHelper;
            function addDataSourceToReport(dataSourceHelper, report, undoEngine, itemsProvider, dataSource, forceAssigning) {
                if (forceAssigning === void 0) { forceAssigning = false; }
                undoEngine.start();
                var findFirstDataSourceWithSerializer = Designer.findFirstItemMatchesCondition(dataSourceHelper.usedDataSources.peek(), function (item) { return !!item.dataSerializer && item.dataSerializer !== dataSource.dataSerializer; });
                var result = dataSourceHelper.addDataSource(dataSource);
                if (!findFirstDataSourceWithSerializer && dataSource.dataSerializer) {
                    report.extensions.peek().forEach(function (item, index) {
                        if (item.key.peek() === DataSourceHelper.defaultReportExtensionKey) {
                            report.extensions.splice(index, 1);
                        }
                    });
                    var newDataSerializer = new Report.ExtensionModel({});
                    newDataSerializer.key = ko.observable(DataSourceHelper.defaultReportExtensionKey);
                    newDataSerializer.value = ko.observable(dataSource.dataSerializer);
                    report.extensions.push(newDataSerializer);
                }
                if (forceAssigning || !report.dataSource()) {
                    report.dataSource(result);
                    itemsProvider
                        .getItems(new DevExpress.JS.Widgets.PathRequest(dataSource.id || dataSource.ref))
                        .done(function (dataMembers) {
                        var lists = dataMembers.filter(function (item) { return Report.isList(item); });
                        if (dataMembers.length === 0 || includeNonListItem(dataMembers)) {
                            report.dataMember("");
                        }
                        else if (!Designer.find(lists, function (item) { return item.name === report.dataMember(); })) {
                            report.dataMember(lists[0].name);
                        }
                    });
                }
                undoEngine.end();
            }
            Report.addDataSourceToReport = addDataSourceToReport;
            function includeNonListItem(dataMembers) {
                return dataMembers.some(function (field) { return !DevExpress.JS.Utils.isList(field) || field.specifics === DataSourceHelper.defaultObjectDataSourceItemSpecifics; });
            }
            Report.includeNonListItem = includeNonListItem;
            function removeDataSourceFromReport(dataSourceHelper, reportDataSource, undoEngine, dataSource) {
                undoEngine().start();
                dataSourceHelper.removeDataSource(dataSource);
                if (reportDataSource() === dataSource.data) {
                    reportDataSource(dataSourceHelper.findDataSourceInfoByRef("none").data);
                }
                undoEngine().end();
            }
            Report.removeDataSourceFromReport = removeDataSourceFromReport;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ExtensionModel = (function () {
                function ExtensionModel(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                ExtensionModel.prototype.getInfo = function () {
                    return extensionSerializationInfo;
                };
                return ExtensionModel;
            })();
            Report.ExtensionModel = ExtensionModel;
            var extensionSerializationInfo = [
                { propertyName: "key", modelName: "@Key" },
                { propertyName: "value", modelName: "@Value" }
            ];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var GroupFieldModel = (function (_super) {
                __extends(GroupFieldModel, _super);
                function GroupFieldModel(model, serializer) {
                    var _this = this;
                    _super.call(this);
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.changeSortOrder = function () {
                        var sortOrderValue = _this.sortOrder();
                        if (sortOrderValue === "Ascending") {
                            _this.sortOrder("Descending");
                        }
                        else if (sortOrderValue === "None") {
                            _this.sortOrder("Ascending");
                        }
                        else {
                            _this.sortOrder("None");
                        }
                    };
                    this._disposables.push(this.sortOrderClass = ko.pureComputed(function () {
                        var orderString = _this.sortOrder().toLowerCase();
                        orderString = orderString === "none" ? "unsorted" : orderString;
                        return { class: "dxrd-image-" + orderString, template: "dxrd-svg-operations-" + orderString };
                    }));
                }
                GroupFieldModel.prototype.getInfo = function () {
                    return groupFieldSerializationInfo;
                };
                GroupFieldModel.createNew = function () {
                    return new GroupFieldModel({});
                };
                return GroupFieldModel;
            })(Designer.Disposable);
            Report.GroupFieldModel = GroupFieldModel;
            var groupFieldSerializationInfo = [
                { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", localizationId: "DevExpress.XtraReports.UI.GroupField.FieldName", editor: Report.editorTemplates.dataBinding },
                { propertyName: "sortOrder", modelName: "@SortOrder", displayName: "Sort Order", localizationId: "DevExpress.XtraReports.UI.GroupField.SortOrder", defaultVal: "Ascending" }
            ];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var LookUpValue = (function () {
                function LookUpValue(model, serializer) {
                    var _this = this;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.value = ko.pureComputed({
                        read: function () {
                            return _this._value() && _this._value().content();
                        },
                        write: function (newValue) {
                            _this._value() && _this._value().content(newValue);
                        }
                    });
                }
                LookUpValue.createNew = function () {
                    return new LookUpValue({});
                };
                LookUpValue.from = function (model, serializer) {
                    return new LookUpValue(model, serializer);
                };
                LookUpValue.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Report.lookUpValueSerializationInfo, refs);
                };
                LookUpValue.prototype.getInfo = function () {
                    if (this.valueInfo) {
                        return Report.lookUpValueSerializationInfo.concat(this.valueInfo());
                    }
                    return Report.lookUpValueSerializationInfo;
                };
                Object.defineProperty(LookUpValue.prototype, "isEmpty", {
                    get: function () {
                        return this._value() === null || this._value() === undefined;
                    },
                    enumerable: true,
                    configurable: true
                });
                return LookUpValue;
            })();
            Report.LookUpValue = LookUpValue;
            Report.lookUpValueSerializationInfo = [
                { propertyName: "description", modelName: "@Description", displayName: "Description", localizationId: "DevExpress.XtraReports.Parameters.Parameter.Description", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "_value", modelName: "@Value", link: true },
            ];
            var ReportParameterHelper = (function (_super) {
                __extends(ReportParameterHelper, _super);
                function ReportParameterHelper() {
                    _super.apply(this, arguments);
                }
                return ReportParameterHelper;
            })(DevExpress.Report.Preview.ParameterHelper);
            Report.ReportParameterHelper = ReportParameterHelper;
            var Parameter = (function (_super) {
                __extends(Parameter, _super);
                function Parameter(model, report, objectsStorage, parameterHelper, serializer) {
                    var _this = this;
                    _super.call(this);
                    this.templateName = "dx-treelist-item";
                    this.contenttemplate = "dxrd-parameterContent";
                    this.collapsed = ko.observable(false);
                    this.valueInfo = ko.observable();
                    this.multiValueInfo = ko.observable();
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    var self = this;
                    this.objectsStorage = objectsStorage;
                    this._parameterHelper = parameterHelper;
                    this["_name"] = ko.observable(this.parameterName());
                    this["change"] = function (e, parameters) {
                        if (parameters.filter(function (x) { return x.parameterName() === e.value; }).length === 1) {
                            _this["_name"](e.value);
                        }
                        else {
                            _this.parameterName(_this["_name"]());
                        }
                    };
                    if (!this._type()) {
                        this._type(objectsStorage.getType("System.String"));
                    }
                    if (this._obsoleteValue()) {
                        this.value(this._obsoleteValue().content());
                        this._obsoleteValue(null);
                    }
                    delete this._obsoleteValue;
                    this.type = ko.pureComputed({
                        read: function () {
                            return _this._type().content();
                        },
                        write: function (val) {
                            var oldVal = _this._type().content();
                            if (val !== oldVal) {
                                var editorValue = _this.value();
                                if (_this.isMultiValue())
                                    _this.value([]);
                                else
                                    _this.value(null);
                                _this.updateLookUpValues(undefined, null);
                                setTimeout(function () {
                                    _this._type(objectsStorage.getType(val));
                                    if (_this.isMultiValue())
                                        return;
                                    if (val === "System.DateTime") {
                                        _this.value(_this.defaultValue);
                                    }
                                    else {
                                        _this.value(_this._convertSingleValue(editorValue));
                                    }
                                    _this.updateLookUpValues(_this._type().content(), _this.defaultValue);
                                }, 1);
                            }
                        }
                    });
                    this._initializeValue();
                    this._disposables.push(this.isMultiValue.subscribe(function (newMultiValue) {
                        if (newMultiValue) {
                            _this.value = ko.observableArray([_this._parameterHelper.createMultiValue(_this, _this.value())]);
                        }
                        else {
                            _this.value = ko.observable(_this.defaultValue);
                        }
                    }));
                    this.valueInfo = ko.pureComputed(function () {
                        var result = $.extend(true, {}, parameterValueSerializationInfo, parameterHelper.getParameterInfo(_this));
                        result.propertyName = "value";
                        if (_this.type() === "System.String" || _this.isMultiValue()) {
                            result.defaultVal = "";
                        }
                        return result;
                    });
                    this._initializeLookUpSourceType();
                    this._disposables.push(ko.computed(function () {
                        var lookUpSettings = _this.lookUpSettings();
                        if (lookUpSettings) {
                            lookUpSettings.updateFilter(_this, report);
                            if (lookUpSettings instanceof Report.StaticListLookUpSettings) {
                                _this._disposables.push(lookUpSettings.lookUpValues.subscribe(function (changes) {
                                    for (var index = 0; index < changes.length; index++) {
                                        if (changes[index].status === "added") {
                                            self.initializeLookUpValue(changes[index].value);
                                            changes[index].value.valueInfo = self.multiValueInfo;
                                        }
                                        else if (changes[index].status === "deleted") {
                                            self.objectsStorage.objects.remove(changes[index].value._value());
                                        }
                                    }
                                }, null, "arrayChange"));
                            }
                        }
                    }));
                    this.viewmodel = new DevExpress.JS.Widgets.ObjectProperties(ko.observable(this));
                }
                Parameter.valueToJsonObject = function (value) {
                    var result = ReportParameterHelper.getSerializationValue(value, DevExpress.JS.Utils.serializeDate);
                    return (result instanceof Array) ? result.join(Parameter.separator) : result;
                };
                Parameter.prototype._getTypeValue = function (typeName) {
                    var values = Parameter.typeValues.filter(function (type) { return type.value === typeName; });
                    return values.length > 0 ? values[0] : null;
                };
                Parameter.prototype._initializeLookUpSourceType = function () {
                    var _this = this;
                    var lookUpSettings = this.lookUpSettings(), lookUpValues = lookUpSettings && (lookUpSettings instanceof Report.StaticListLookUpSettings) && lookUpSettings.lookUpValues();
                    if (lookUpValues) {
                        lookUpValues.forEach(function (lookUpValue) {
                            lookUpValue.valueInfo = _this.multiValueInfo;
                            if (lookUpValue.isEmpty)
                                _this.initializeLookUpValue(lookUpValue);
                        });
                    }
                    this.lookUpSourceType = ko.observable("None");
                    if (lookUpSettings) {
                        if (lookUpSettings.objectType().indexOf("StaticListLookUpSettings") !== -1) {
                            this.lookUpSourceType("StaticListLookUpSettings");
                        }
                        else {
                            this.lookUpSourceType("DynamicListLookUpSettings");
                        }
                    }
                    this._disposables.push(this.lookUpSourceType.subscribe(function (newVal) {
                        if (newVal === "StaticListLookUpSettings") {
                            _this.lookUpSettings(_this.objectsStorage.createStaticLookUpSetting());
                        }
                        else if (newVal === "DynamicListLookUpSettings") {
                            _this.lookUpSettings(_this.objectsStorage.createDynamicLookUpSetting());
                        }
                        else {
                            _this.objectsStorage.objects.remove(_this.lookUpSettings());
                            _this.lookUpSettings(null);
                        }
                    }));
                };
                Parameter.prototype._tryConvertValue = function (value) {
                    var condition = function (val) { return val !== void 0 && val !== null && !isNaN(typeof val === "string" ? "" : val); };
                    if (!condition(value)) {
                        return { isValid: false, newValue: null };
                    }
                    var typeValue = this._getTypeValue(this.type()), newValue = (typeValue && typeValue.valueConverter) ? typeValue.valueConverter(value) : value;
                    return { isValid: condition(newValue), newValue: newValue };
                };
                Parameter.prototype._convertSingleValue = function (value) {
                    var result = this._tryConvertValue(value);
                    return result.isValid ? result.newValue : this.defaultValue;
                };
                Parameter.prototype._initializeValue = function () {
                    var _this = this;
                    var value = this.value();
                    if (this.isMultiValue()) {
                        typeof value === "string"
                            ? this.value = this._parameterHelper.createMultiValueArray(value.split(Parameter.separator), this, function (part) { return _this._convertSingleValue(part); })
                            : this.value = ko.observableArray();
                    }
                    else if (this.allowNull() && !value) {
                        this.value(null);
                    }
                    else {
                        this.value(this._convertSingleValue(value));
                    }
                };
                Parameter.prototype.getInfo = function () {
                    if (this.type) {
                        var info = $.extend(true, [], Report.parameterSerializationInfo);
                        info.splice(info.indexOf(info.filter(function (prop) { return prop.propertyName === "value"; })[0]), 1, this.valueInfo());
                        return info;
                    }
                    return Report.parameterSerializationInfo;
                };
                Parameter.prototype.isPropertyVisible = function (name) {
                    if (name === "lookUpSettings") {
                        return !!this.lookUpSettings();
                    }
                    return true;
                };
                Parameter.prototype.initializeLookUpValue = function (lookUpValue) {
                    var newValue = this.objectsStorage.addValue();
                    newValue.type(this.type());
                    newValue.content(this.defaultValue);
                    lookUpValue._value(newValue);
                };
                Parameter.prototype.updateLookUpValues = function (newType, value) {
                    if (value === void 0) { value = null; }
                    var lookUpSettings = this.lookUpSettings(), lookUpValues = lookUpSettings && (lookUpSettings instanceof Report.StaticListLookUpSettings) && lookUpSettings.lookUpValues();
                    if (!lookUpSettings || !lookUpValues)
                        return;
                    lookUpValues.forEach(function (lookUpValue) {
                        var lookUpVal = lookUpValue._value();
                        lookUpVal.content(value);
                        !!newType && lookUpVal.type(newType);
                    });
                };
                Parameter.prototype.getParameterDescriptor = function () {
                    return { description: this.description.peek(), displayName: "Value", localizationId: "DevExpress.XtraReports.Parameters.Parameter.Value", name: this.parameterName.peek(), type: this.type.peek(), value: this.value.peek(), visible: this.visible.peek(), multiValue: this.isMultiValue.peek(), allowNull: this.allowNull.peek() };
                };
                Object.defineProperty(Parameter.prototype, "name", {
                    get: function () {
                        return this.parameterName();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Parameter.prototype, "specifics", {
                    get: function () {
                        var typeValue = this._getTypeValue(this.type());
                        return typeValue ? typeValue.specifics : "default";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Parameter.prototype, "icon", {
                    get: function () {
                        var typeValue = this._getTypeValue(this.type());
                        return typeValue && typeValue.icon;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Parameter.prototype, "defaultValue", {
                    get: function () {
                        var typeValue = this._getTypeValue(this.type());
                        var _value = typeValue ? typeValue.defaultValue : "";
                        if (_value instanceof Date) {
                            _value = new Date(_value);
                        }
                        return _value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Parameter.prototype, "displayName", {
                    get: function () {
                        return this.parameterName();
                    },
                    enumerable: true,
                    configurable: true
                });
                Parameter.separator = "|";
                Parameter.defaultGuidValue = "00000000-0000-0000-0000-000000000000";
                Parameter.typeValues = [
                    { value: "System.String", displayValue: "String", defaultValue: "", specifics: "String", valueConverter: function (val) { return val.toString(); }, localizationId: "UtilsUIStringId.Parameter_Type_String" },
                    { value: "System.DateTime", displayValue: "Date", defaultValue: new Date(new Date().setHours(0, 0, 0, 0)), specifics: "Date", valueConverter: function (val) { return DevExpress.JS.Localization.parseDate(val); }, localizationId: "UtilsUIStringId.Parameter_Type_DateTime" },
                    { value: "System.Int16", displayValue: "Number (16 bit integer)", defaultValue: "0", specifics: "Integer", valueConverter: DevExpress.Data.integerValueConverter, localizationId: "UtilsUIStringId.Parameter_Type_Int16" },
                    { value: "System.Int32", displayValue: "Number (32 bit integer)", defaultValue: "0", specifics: "Integer", valueConverter: DevExpress.Data.integerValueConverter, localizationId: "UtilsUIStringId.Parameter_Type_Int32" },
                    { value: "System.Int64", displayValue: "Number (64 bit integer)", defaultValue: "0", specifics: "Integer", valueConverter: DevExpress.Data.integerValueConverter, localizationId: "UtilsUIStringId.Parameter_Type_Int64" },
                    { value: "System.Single", displayValue: "Number (floating-point)", defaultValue: "0", specifics: "Float", valueConverter: DevExpress.Data.floatValueConverter, localizationId: "UtilsUIStringId.Parameter_Type_Float" },
                    { value: "System.Double", displayValue: "Number (double-precision floating-point)", defaultValue: "0", specifics: "Float", valueConverter: DevExpress.Data.floatValueConverter, localizationId: "UtilsUIStringId.Parameter_Type_Double" },
                    { value: "System.Decimal", displayValue: "Number (decimal)", defaultValue: "0", specifics: "Float", valueConverter: DevExpress.Data.floatValueConverter, localizationId: "UtilsUIStringId.Parameter_Type_Decimal" },
                    { value: "System.Boolean", displayValue: "Boolean", defaultValue: false, specifics: "Bool", valueConverter: function (val) { return String(val).toLowerCase() === "true" ? true : (String(val).toLowerCase() === "false" ? false : null); }, localizationId: "UtilsUIStringId.Parameter_Type_Boolean" },
                    { value: "System.Guid", displayValue: "Guid", defaultValue: Parameter.defaultGuidValue, valueConverter: function (val) { return DevExpress.JS.Widgets.validateGuid(val) ? val : Parameter.defaultGuidValue; }, specifics: "guid", localizationId: "UtilsUIStringId.Parameter_Type_Guid" }
                ];
                return Parameter;
            })(Designer.Disposable);
            Report.Parameter = Parameter;
            var parameterValueSerializationInfo = { propertyName: "value", displayName: "Value", localizationId: "DevExpress.XtraReports.Parameters.Parameter.Value", modelName: "@ValueInfo", from: function (val) { return ko.observable(val); }, toJsonObject: Parameter.valueToJsonObject };
            Report.parameterLookUpSettingsSerializationInfo = { propertyName: "lookUpSettings", displayName: "Look-Up Settings", localizationId: "DevExpress.XtraReports.Parameters.Parameter.LookUpSettings", modelName: "@LookUpSettings", link: true, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.parameterSerializationInfo = [
                { propertyName: "parameterName", modelName: "@Name", displayName: "Name", localizationId: 'DevExpress.XtraReports.UI.XRControl.Name', defaultVal: "", validationRules: Designer.nameValidationRules, editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "description", modelName: "@Description", displayName: "Description", localizationId: "DevExpress.XtraReports.Parameters.Parameter.Description", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                Report.visible,
                { propertyName: "isMultiValue", modelName: "@MultiValue", displayName: "MultiValue", localizationId: "DevExpress.XtraReports.Parameters.Parameter.MultiValue", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool },
                { propertyName: "allowNull", modelName: "@AllowNull", displayName: "Allow Null", localizationId: "DevExpress.XtraReports.Parameters.Parameter.AllowNull", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool },
                { propertyName: "type", displayName: "Type", localizationId: "DevExpress.XtraReports.Parameters.Parameter.Type", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: (Parameter.typeValues) },
                parameterValueSerializationInfo,
                { propertyName: "_obsoleteValue", modelName: "@Value", link: true },
                { propertyName: "_type", modelName: "@Type", link: true },
                {
                    propertyName: "lookUpSourceType", displayName: "Look-Up Settings Type", localizationId: "DevExpress.XtraReports.Parameters.Parameter.LookUpSettings", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    valuesArray: [
                        { value: "None", displayValue: "No Look-Up", localizationId: "PreviewStringId.ParameterLookUpSettingsNoLookUp" },
                        { value: "StaticListLookUpSettings", displayValue: "Static List", localizationId: "DevExpress.XtraReports.Parameters.StaticListLookUpSettings" },
                        { value: "DynamicListLookUpSettings", displayValue: "Dynamic List", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings" }
                    ]
                },
                Report.parameterLookUpSettingsSerializationInfo
            ];
            var ParametersViewModel = (function (_super) {
                __extends(ParametersViewModel, _super);
                function ParametersViewModel(report) {
                    var _this = this;
                    _super.call(this);
                    this.addAction = {
                        clickAction: function (item) {
                            return _this.add();
                        },
                        imageClassName: "dxrd-image-add",
                        imageTemplateName: "dxrd-svg-operations-add",
                        text: "Add parameter",
                        displayText: function () { return Designer.getLocalization("Add parameter", 'ASPxReportsStringId.ReportDesigner_FieldListActions_AddParameter'); }
                    };
                    this.removeAction = {
                        clickAction: function (item) {
                            _this.remove({ model: item.data });
                        },
                        imageClassName: "dxrd-image-recycle-bin",
                        imageTemplateName: "dxrd-svg-operations-recycle_bin",
                        text: "Remove parameter",
                        displayText: function () { return Designer.getLocalization("Remove parameter", 'ASPxReportsStringId.ReportDesigner_FieldListActions_RemoveParameter'); }
                    };
                    this.parameters = report.parameters;
                    this.remove = function (e) {
                        _this.parameters.splice(_this.parameters.indexOf(e.model), 1);
                    };
                    this.add = function () {
                        var newParameter = _this.createParameter();
                        _this.parameters.push(newParameter);
                        return newParameter;
                    };
                    this.createParameter = function () {
                        var newName = Designer.getUniqueNameForNamedObjectsArray(_this.parameters(), "parameter"), newParameter = new Parameter({ "@Name": newName, "@Description": "P" + newName.slice(1) }, report, report.objectsStorageHelper, report.parameterHelper);
                        return newParameter;
                    };
                }
                ParametersViewModel.prototype.getActions = function (context) {
                    var result = [];
                    if (context.hasItems && context.path.indexOf("Parameters") === 0) {
                        result.push(this.addAction);
                    }
                    if (context.path.indexOf("Parameters.") === 0) {
                        result.push(this.removeAction);
                    }
                    return result;
                };
                ParametersViewModel.prototype.beforeItemsFilled = function (request, items) {
                    if (request.ref !== "Parameters")
                        return false;
                    items.push.apply(items, request.fullPath === "Parameters" ? this.parameters.slice(0) : []);
                    return true;
                };
                ParametersViewModel.prototype.afterItemsFilled = function (request, items) {
                    if (!request.fullPath) {
                        var parameters = Designer.findFirstItemMatchesCondition(items, function (item) { return item.specifics === "parameters"; });
                        if (parameters)
                            parameters.displayName = Designer.getLocalization("Parameters", "DevExpress.XtraReports.UI.XtraReport.Parameters");
                        var noneDataSource = !request.fullPath && Designer.findFirstItemMatchesCondition(items, function (item) { return item.specifics === "none"; });
                        if (noneDataSource)
                            noneDataSource.displayName = Designer.localizeNoneString("none");
                    }
                };
                return ParametersViewModel;
            })(Designer.Disposable);
            Report.ParametersViewModel = ParametersViewModel;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="parameter.ts"/>
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ObjectItem = (function (_super) {
                __extends(ObjectItem, _super);
                function ObjectItem(model, dsHelperProvider, serializer) {
                    _super.call(this);
                    this.dsHelperProvider = dsHelperProvider;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    this.afterDeserialization(model, serializer);
                }
                ObjectItem.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.dsHelperProvider = null;
                };
                ObjectItem.createNew = function (model, dsHelperProvider, serializer) {
                    var objectType = model["@ObjectType"] || "";
                    if (objectType.indexOf("StaticListLookUpSettings") !== -1) {
                        return new StaticListLookUpSettings(model, dsHelperProvider, serializer);
                    }
                    else if (objectType.indexOf("DynamicListLookUpSettings") !== -1) {
                        return new DynamicListLookUpSettings(model, dsHelperProvider, serializer);
                    }
                    else if (objectType.indexOf("ReportServer") !== -1 && model["@ObjectType"].indexOf("DataSource") !== -1) {
                        return new UniversalDataSource(model, dsHelperProvider, serializer);
                    }
                    return new ObjectStorageItem(model, dsHelperProvider, serializer);
                };
                ObjectItem.prototype.getInfo = function () {
                    return [{ propertyName: "objectType", modelName: "@ObjectType" }];
                };
                ObjectItem.prototype.afterDeserialization = function (model, serializer) {
                    Designer.cutRefs(model);
                };
                ObjectItem.prototype.clone = function () {
                    var serializer = new DevExpress.JS.Utils.ModelSerializer();
                    return ObjectItem.createNew(serializer.serialize(this), this.dsHelperProvider, serializer);
                };
                return ObjectItem;
            })(Designer.Disposable);
            Report.ObjectItem = ObjectItem;
            var ObjectStorageItem = (function (_super) {
                __extends(ObjectStorageItem, _super);
                function ObjectStorageItem(model, dsHelperProvider, serializer) {
                    var _this = this;
                    this.getInfo = (model && model["@Base64"]) ? function () {
                        return _this._getInfo().concat({ propertyName: "base64", modelName: "@Base64" });
                    } : function () { return _this._getInfo(); };
                    _super.call(this, $.extend({ "@ObjectType": "DevExpress.XtraReports.Serialization.ObjectStorageInfo" }, model), dsHelperProvider, serializer);
                }
                ObjectStorageItem.prototype._getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([{ propertyName: "content", modelName: "@Content" }, { propertyName: "type", modelName: "@Type" },
                        { propertyName: "name", modelName: "@Name", defaultVal: "" }]);
                };
                ObjectStorageItem.prototype.isEmpty = function () {
                    return this.type && this.type() === "System.DateTime"
                        && this.content && (this.content() === undefined || this.content() === null);
                };
                return ObjectStorageItem;
            })(ObjectItem);
            Report.ObjectStorageItem = ObjectStorageItem;
            var ObjectStorageParameter = (function (_super) {
                __extends(ObjectStorageParameter, _super);
                function ObjectStorageParameter(model, serializer) {
                    _super.call(this, model, serializer, [{ propertyName: "_type", modelName: "@Type", link: true }, Report.parameterLookUpSettingsSerializationInfo]);
                }
                return ObjectStorageParameter;
            })(Designer.SerializableModel);
            Report.ObjectStorageParameter = ObjectStorageParameter;
            var TableInfoCollectionItem = (function (_super) {
                __extends(TableInfoCollectionItem, _super);
                function TableInfoCollectionItem(model, dataSource, dsHelper, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer, tableInfoCollectionItemSerializationsInfo);
                    this.filterString = ko.observable(null);
                    var options = new DevExpress.JS.Widgets.FilterStringOptions(this["_filterString"], ko.pureComputed(function () {
                        return dsHelper() && (dsHelper().getDataSourcePath(dataSource) + "." + _this["tableName"]());
                    }), ko.pureComputed(function () { return !dataSource; }));
                    options.helper.canChoiceParameters = true;
                    this.filterString(options);
                }
                return TableInfoCollectionItem;
            })(Designer.SerializableModel);
            Report.TableInfoCollectionItem = TableInfoCollectionItem;
            var tableInfoCollectionItemSerializationsInfo = [Report.filterString, Report.filterStringEditable, { propertyName: "tableName", modelName: "@TableName" }];
            var UniversalDataSource = (function (_super) {
                __extends(UniversalDataSource, _super);
                function UniversalDataSource(model, dsHelperProvider, serializer) {
                    var _this = this;
                    _super.call(this, $.extend({ "@ObjectType": "DevExpress.ReportServer.Infrastructure.Data.UniversalDataSource" }, model), dsHelperProvider, serializer);
                    this.parameters = DevExpress.JS.Utils.deserializeArray(model.Parameters || [], function (item) { return new ObjectStorageParameter(item, serializer); });
                    this.tableInfoCollection = DevExpress.JS.Utils.deserializeArray(model.TableInfoCollection || [], function (item) { return new TableInfoCollectionItem(item, _this, dsHelperProvider, serializer); });
                    this.spParameterInfoCollection = DevExpress.JS.Utils.deserializeArray(model.StoredProcedureParameterInfoCollection || [], function (item) { return new ObjectStorageParameter(item, serializer); });
                }
                UniversalDataSource.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.parameters);
                    this.disposeObservableArray(this.tableInfoCollection);
                    this.disposeObservableArray(this.spParameterInfoCollection);
                    this.resetObservableArray(this.parameters);
                    this.resetObservableArray(this.tableInfoCollection);
                    this.resetObservableArray(this.spParameterInfoCollection);
                };
                UniversalDataSource.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([
                        { propertyName: "parameters", modelName: "Parameters", array: true },
                        { propertyName: "tableInfoCollection", modelName: "TableInfoCollection", array: true },
                        { propertyName: "spParameterInfoCollection", modelName: "StoredProcedureParameterInfoCollection", array: true },
                        { propertyName: "name", modelName: "@Name" }]);
                };
                return UniversalDataSource;
            })(ObjectItem);
            Report.UniversalDataSource = UniversalDataSource;
            var LookUpSettings = (function (_super) {
                __extends(LookUpSettings, _super);
                function LookUpSettings(model, dsHelperProvider, serializer) {
                    _super.call(this, model, dsHelperProvider, serializer);
                }
                LookUpSettings.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([Report.filterString, Report.filterStringEditable]);
                };
                LookUpSettings.prototype.updateFilter = function (parameter, report) {
                    this.filterString.helper.parameters = ko.pureComputed({
                        read: function () {
                            var currentIndex = report.parameters.peek().indexOf(parameter);
                            return report && report.parameters().filter(function (_, index) { return index < currentIndex; });
                        },
                        deferEvaluation: true
                    });
                };
                return LookUpSettings;
            })(ObjectItem);
            Report.LookUpSettings = LookUpSettings;
            var StaticListLookUpSettings = (function (_super) {
                __extends(StaticListLookUpSettings, _super);
                function StaticListLookUpSettings(model, dsHelperProvider, serializer) {
                    _super.call(this, $.extend({ "@ObjectType": "DevExpress.XtraReports.Parameters.StaticListLookUpSettings" }, model), dsHelperProvider, serializer);
                    this.filterString = new DevExpress.JS.Widgets.FilterStringOptions(this._filterString);
                    this.filterString.helper.canChoiceParameters = true;
                    this.filterString.itemsProvider = ko.observable(null);
                }
                StaticListLookUpSettings.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat({ propertyName: "lookUpValues", displayName: "Values", localizationId: "DevExpress.XtraReports.Parameters.StaticListLookUpSettings.LookUpValues", modelName: "LookUpValues", array: true, editor: Report.editorTemplates.lookUpValues });
                };
                StaticListLookUpSettings.prototype.afterDeserialization = function (model, serializer) {
                    this.lookUpValues = DevExpress.JS.Utils.deserializeArray(model.LookUpValues || [], function (item) { return new Report.LookUpValue(item, serializer); });
                    _super.prototype.afterDeserialization.call(this, model, serializer);
                };
                StaticListLookUpSettings.prototype.updateFilter = function (parameter, report) {
                    this.filterString.itemsProvider({
                        getItems: function (pathRequest) {
                            var result = $.Deferred();
                            result.resolve([
                                {
                                    displayName: "Description",
                                    isList: false,
                                    name: "Description",
                                    specifics: "String"
                                },
                                {
                                    displayName: "Value",
                                    isList: false,
                                    name: "Value",
                                    specifics: parameter.specifics
                                }
                            ]);
                            return result.promise();
                        }
                    });
                    _super.prototype.updateFilter.call(this, parameter, report);
                };
                return StaticListLookUpSettings;
            })(LookUpSettings);
            Report.StaticListLookUpSettings = StaticListLookUpSettings;
            var DynamicListLookUpSettings = (function (_super) {
                __extends(DynamicListLookUpSettings, _super);
                function DynamicListLookUpSettings(model, dsHelperProvider, serializer) {
                    var _this = this;
                    _super.call(this, $.extend({ "@ObjectType": "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings" }, model), dsHelperProvider, serializer);
                    this.dsHelperProvider = dsHelperProvider;
                    this.filterString = new DevExpress.JS.Widgets.FilterStringOptions(this._filterString, ko.pureComputed(function () { return _this.getPath("valueMember"); }), ko.pureComputed(function () { return !_this.dataSource(); }));
                }
                DynamicListLookUpSettings.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([
                        Report.dataAdapter, Report.dataSource, Report.dataMember,
                        { propertyName: "displayMember", modelName: "@DisplayMember", displayName: "Display Member", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.DisplayMember", defaultVal: "", editor: Designer.Widgets.editorTemplates.field },
                        { propertyName: "valueMember", modelName: "@ValueMember", displayName: "Value Member", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.ValueMember", defaultVal: "", editor: Designer.Widgets.editorTemplates.field },
                        { propertyName: "sortMember", modelName: "@SortMember", displayName: "Sort Member", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.SortMember", defaultVal: "", editor: Designer.Widgets.editorTemplates.field },
                        {
                            propertyName: "sortOrder", modelName: "@SortOrder", displayName: "Sort Order", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.SortOrder", defaultVal: "None", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: [
                                {
                                    value: "None", displayValue: "None", localizationId: 'DevExpress.Data.ColumnSortOrder.None'
                                }, {
                                    value: "Ascending", displayValue: "Ascending", localizationId: 'DevExpress.Data.ColumnSortOrder.Ascending'
                                }, {
                                    value: "Descending", displayValue: "Descending", localizationId: 'DevExpress.Data.ColumnSortOrder.Descending'
                                }]
                        }
                    ]);
                };
                DynamicListLookUpSettings.prototype.getPath = function (propertyName) {
                    if (propertyName === "dataMember") {
                        return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
                    }
                    else if (propertyName === "displayMember" || propertyName === "valueMember" || propertyName === "sortMember") {
                        return Designer.getFullPath(this.getPath("dataMember"), this.dataMember());
                    }
                    return "";
                };
                return DynamicListLookUpSettings;
            })(LookUpSettings);
            Report.DynamicListLookUpSettings = DynamicListLookUpSettings;
            var ObjectsStorage = (function (_super) {
                __extends(ObjectsStorage, _super);
                function ObjectsStorage(objects, dsHelperProvider) {
                    _super.call(this);
                    this.objects = objects;
                    this.dsHelperProvider = dsHelperProvider;
                }
                ObjectsStorage.prototype.findType = function (content) {
                    var objectStorages = this.objects().filter(function (item) { return item instanceof ObjectStorageItem; });
                    var result = objectStorages.filter(function (item) {
                        return item.type() === "System.Type" && item.content() === content;
                    });
                    return result.length === 0 ? null : result[0];
                };
                ObjectsStorage.prototype.getType = function (type) {
                    var typeObject = this.findType(type);
                    if (!typeObject) {
                        typeObject = new ObjectStorageItem({
                            "@Content": type,
                            "@Type": "System.Type"
                        }, this.dsHelperProvider);
                        this.objects.push(typeObject);
                    }
                    return typeObject;
                };
                ObjectsStorage.prototype.addValue = function () {
                    var newValueRef = new ObjectStorageItem({ "@Content": "" }, this.dsHelperProvider);
                    this.objects.push(newValueRef);
                    return newValueRef;
                };
                ObjectsStorage.prototype.createStaticLookUpSetting = function () {
                    var lookUpObject = new StaticListLookUpSettings({}, this.dsHelperProvider);
                    this.objects.push(lookUpObject);
                    return lookUpObject;
                };
                ObjectsStorage.prototype.createDynamicLookUpSetting = function () {
                    var lookUpObject = new DynamicListLookUpSettings({}, this.dsHelperProvider);
                    this.objects.push(lookUpObject);
                    return lookUpObject;
                };
                return ObjectsStorage;
            })(Designer.Disposable);
            Report.ObjectsStorage = ObjectsStorage;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var StyleModel = (function (_super) {
                __extends(StyleModel, _super);
                function StyleModel(model, serializer) {
                    var _this = this;
                    _super.call(this);
                    this.className = function () {
                        return "stylemodel";
                    };
                    this.controlType = "XRStyleModel";
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                    ["backColor", "foreColor", "borderColor"].forEach(function (propertyName) {
                        _this._disposables.push(_this[propertyName] = ko.pureComputed({
                            read: function () { return _this["_" + propertyName] && _this["_" + propertyName]() || StyleModel.defaults[propertyName]; },
                            write: function (val) { _this["_" + propertyName](val); }
                        }));
                    });
                    this._disposables.push(this.paddingObj = new Designer.Widgets.PaddingModel());
                    this.paddingObj.applyFromString(this["padding"]());
                    var isUpdate = false;
                    var lock = function (action) {
                        if (!isUpdate) {
                            isUpdate = true;
                            action();
                            isUpdate = false;
                        }
                    };
                    this._disposables.push(this.padding.subscribe(function (newVal) {
                        lock(function () { return _this.paddingObj.applyFromString(newVal); });
                    }));
                    ["left", "right", "top", "bottom"].forEach(function (name) {
                        _this._disposables.push(_this.paddingObj[name].subscribe(function (newVal) {
                            lock(function () { return _this.padding(_this.paddingObj.toString()); });
                        }));
                    });
                }
                StyleModel.prototype.getInfo = function () {
                    return Report.styleSerializationInfo;
                };
                StyleModel.prototype.isPropertyModified = function (name) {
                    var needName = this["_" + name] ? "_" + name : name;
                    var property = ko.unwrap(this[needName]);
                    if (property instanceof Object) {
                        return !property.isEmpty();
                    }
                    else {
                        return !!property;
                    }
                };
                StyleModel.prototype.displayType = function () {
                    return Designer.getLocalization("Control Style", "DevExpress.XtraReports.UI.XRControlStyle");
                };
                StyleModel.defaults = {
                    "backColor": "transparent",
                    "foreColor": "Black",
                    "borderColor": "Black"
                };
                return StyleModel;
            })(DevExpress.JS.Utils.Disposable);
            Report.StyleModel = StyleModel;
            var _backColor = { propertyName: "_backColor", modelName: "@BackColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString };
            var _foreColor = { propertyName: "_foreColor", modelName: "@ForeColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString };
            var _borderColor = { propertyName: "_borderColor", modelName: "@BorderColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString };
            Report.styleSerializationInfo = $.extend(true, [], [
                Report.name, Report.font, Report.textAlignment,
                _foreColor,
                _backColor,
                _borderColor,
                { propertyName: "backColor", displayName: "Background Color", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.BackColor", editor: Designer.Widgets.editorTemplates.customColorEditor },
                { propertyName: "foreColor", displayName: "Foreground Color", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.ForeColor", editor: Designer.Widgets.editorTemplates.customColorEditor },
                { propertyName: "borderColor", displayName: "Border Color", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.BorderColor", editor: Designer.Widgets.editorTemplates.customColorEditor },
                { propertyName: "borders", modelName: "@Sides", displayName: "Borders", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.Borders", editor: Designer.Widgets.editorTemplates.borders },
                { propertyName: "borderWidth", modelName: "@BorderWidthSerializable", displayName: "Border Width", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.BorderWidth", from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric }
            ]).concat([Report.borderDashStyle], Report.paddingGroup);
            Report.styleSerializationInfo.forEach(function (item) { delete item.defaultVal; });
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.DataBindingMode = {
                "Bindings": "Bindings",
                "Expressions": "Expressions",
                "ExpressionsAdvanced": "ExpressionsAdvanced"
            };
            Report.PromptBoolean = {
                "False": "False",
                "True": "True",
                "Prompt": "Prompt"
            };
            var colors = ['Transparent', 'AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod', 'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DodgerBlue', 'Firebrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green', 'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenrodYellow', 'LightGreen', 'LightGray', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen'];
            var WrappedExpressionOptions = (function (_super) {
                __extends(WrappedExpressionOptions, _super);
                function WrappedExpressionOptions(options, handlers, fieldListProvider, eventName) {
                    var _this = this;
                    _super.call(this);
                    this.eventName = eventName;
                    this.isValid = ko.observable(true);
                    this.expression = ko.observable(null);
                    this.rootItems = [
                        { name: "Parameters", needPrefix: true },
                        { name: "ReportItems", needPrefix: false, rootPath: "Root" },
                        { name: "DataSource", needPrefix: false, rootPath: "Root" }
                    ];
                    this._disposables.push(this.value = ko.computed({
                        read: function () {
                            return _this.expression() && _this.expression().expression() || "";
                        },
                        write: function (newVal) {
                            if (_this.expression()) {
                                if (newVal && newVal.trim()) {
                                    _this.expression().expression(newVal);
                                }
                                else {
                                    handlers.removeExpression(_this.expression());
                                }
                                ;
                            }
                            else {
                                if (newVal && newVal.trim())
                                    handlers.addExpression(newVal);
                            }
                        }
                    }));
                    this.path = options.path;
                    this.functions = options.functions;
                    var specificRootItems = {
                        "DataSource": function (path) {
                            return path === "DataSource" && ["CurrentRowIndex", "RowCount"].map(function (name) { return Report.Utils.createIDataMemberInfoByName(name, "integer"); });
                        }
                    };
                    if (this.eventName === "PrintOnPage") {
                        this.rootItems.push({ name: "Arguments", needPrefix: false, rootPath: "Root" });
                        specificRootItems["Arguments"] = function (path) {
                            return path === "Arguments" && ["PageIndex", "PageCount"].map(function (name) { return Report.Utils.createIDataMemberInfoByName(name, "integer"); });
                        };
                    }
                    this._disposables.push(ko.computed(function () {
                        var unwrappedfieldListProvider = ko.unwrap(fieldListProvider);
                        if (_this.value() && unwrappedfieldListProvider) {
                            DevExpress.Analytics.Utils.validateExpression({
                                fieldListProvider: {
                                    getItemByPath: function (path) {
                                        return unwrappedfieldListProvider.getItemByPath(path, specificRootItems);
                                    },
                                    getItems: function () { return void 0; }
                                },
                                expression: _this.value(),
                                path: _this.path(),
                                rootItems: _this.rootItems.map(function (x) { return x.name; }),
                            }).done(function () { return _this.isValid(true); }).fail(function () { return _this.isValid(false); });
                        }
                        else {
                            _this.isValid(true);
                        }
                    }));
                }
                return WrappedExpressionOptions;
            })(DevExpress.JS.Utils.Disposable);
            Report.WrappedExpressionOptions = WrappedExpressionOptions;
            var ExpressionWrapper = (function (_super) {
                __extends(ExpressionWrapper, _super);
                function ExpressionWrapper(_bindingMode, _fieldListProvider) {
                    if (_bindingMode === void 0) { _bindingMode = Report.DataBindingMode.Expressions; }
                    _super.call(this);
                    this._bindingMode = _bindingMode;
                    this._fieldListProvider = _fieldListProvider;
                    this._valuesDictionary = {
                        ForeColor: colors,
                        BackColor: colors,
                        FillColor: colors,
                        BorderColor: colors,
                        Borders: ["Left", "Right", "Top", "Bottom", "All"],
                        BorderDashStyle: Report.borderDashStyleValues,
                        TextAlignment: Report.textAlignmentValues,
                        Name: Object.keys(ko.unwrap(DevExpress.JS.Widgets.availableFonts))
                    };
                    this._displayNameDictionary = {
                        Text: { localizationId: "DevExpress.XtraReports.UI.XRControl.Text", displayName: "Text" },
                        Visible: { localizationId: "DevExpress.XtraReports.UI.XRControl.Visible", displayName: "Visible" },
                        NavigateUrl: { localizationId: "DevExpress.XtraReports.UI.XRControl.NavigateUrl", displayName: "Navigate Url" },
                        Bookmark: { localizationId: "DevExpress.XtraReports.UI.XRControl.Bookmark", displayName: "Bookmark" },
                        Tag: { localizationId: "DevExpress.XtraReports.UI.XRControl.Tag", displayName: "Tag" },
                        LeftF: { localizationId: "DevExpress.XtraReports.UI.XRControl.Left", displayName: "Left" },
                        TopF: { localizationId: "DevExpress.XtraReports.UI.XRControl.Top", displayName: "Top" },
                        WidthF: { localizationId: "DevExpress.XtraReports.UI.XRControl.Width", displayName: "Width" },
                        HeightF: { localizationId: "DevExpress.XtraReports.UI.XRControl.Height", displayName: "Height" },
                        StyleName: { localizationId: "DevExpress.XtraReports.UI.XRControl.StyleName", displayName: "Style Name" },
                        ForeColor: { localizationId: "DevExpress.XtraReports.UI.XRControl.ForeColor", displayName: "Foreground Color" },
                        BackColor: { localizationId: "DevExpress.XtraReports.UI.XRControl.BackColor", displayName: "Background Color" },
                        BorderColor: { localizationId: "DevExpress.XtraReports.UI.XRControl.BorderColor", displayName: "Border Color" },
                        Borders: { localizationId: "DevExpress.XtraReports.UI.XRControl.Borders", displayName: "Borders" },
                        BorderWidth: { localizationId: "DevExpress.XtraReports.UI.XRControl.BorderWidth", displayName: "Border Width" },
                        BorderDashStyle: { localizationId: "DevExpress.XtraReports.UI.XRControl.BorderDashStyle", displayName: "Border Dash Style" },
                        TextAlignment: { localizationId: "DevExpress.XtraReports.UI.XRControl.TextAlignment", displayName: "Text Alignment" },
                        Font: { localizationId: "DevExpress.XtraReports.UI.XRControl.Font", displayName: "Font" },
                        Padding: { localizationId: "DevExpress.XtraReports.UI.XRControl.Padding", displayName: "Padding" },
                        Appearance: { localizationId: "ReportStringId.CatAppearance", displayName: "Appearance" },
                        Layout: { localizationId: "ReportStringId.CatLayout", displayName: "Layout" },
                        Name: { localizationId: "ReportStringId.UD_TTip_FormatFontName", displayName: "Name" },
                        Size: { localizationId: "System.Drawing.Font.Size", displayName: "Size" },
                        Italic: { localizationId: "System.Drawing.Font.Italic", displayName: "Italic" },
                        Strikeout: { localizationId: "System.Drawing.Font.Strikeout", displayName: "Strikeout" },
                        Bold: { localizationId: "System.Drawing.Font.Bold", displayName: "Bold" },
                        Underline: { localizationId: "System.Drawing.Font.Underline", displayName: "Underline" },
                        Left: { localizationId: "DevExpress.XtraPrinting.PaddingInfo.Left", displayName: "Left" },
                        Right: { localizationId: "DevExpress.XtraPrinting.PaddingInfo.Right", displayName: "Right" },
                        Top: { localizationId: "DevExpress.XtraPrinting.PaddingInfo.Top", displayName: "Top" },
                        Bottom: { localizationId: "DevExpress.XtraPrinting.PaddingInfo.Bottom", displayName: "Bottom" },
                        CheckState: { localizationId: "DevExpress.XtraReports.UI.XRCheckBox.CheckState", displayName: "Check State" },
                        Image: { localizationId: "DevExpress.XtraReports.UI.XRPictureBox.Image", displayName: "Image" },
                        ImageSource: { localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageSource", displayName: "Image Source" },
                        ImageUrl: { localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageUrl", displayName: "Image Url" },
                        BinaryData: { localizationId: "DevExpress.XtraReports.UI.XRBarCode.BinaryData", displayName: "Binary Data" },
                        TargetValue: { localizationId: "DevExpress.XtraReports.UI.XRGauge.TargetValue", displayName: "Target Value" },
                        ActualValue: { localizationId: "DevExpress.XtraReports.UI.XRGauge.ActualValue", displayName: "Actual Value" },
                        PrintOnPage: { localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnPrintOnPage", displayName: "PrintOnPage" },
                        BeforePrint: { localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnBeforePrint", displayName: "BeforePrint" },
                        Minimum: { localizationId: "DevExpress.XtraReports.UI.XRGauge.Minimum", displayName: "Minimum" },
                        Maximum: { localizationId: "DevExpress.XtraReports.UI.XRGauge.Maximum", displayName: "Maximum" },
                        FillColor: { localizationId: "DevExpress.XtraReports.UI.XRShape.FillColor", displayName: "Fill Color" }
                    };
                    this._expressionsInfo = {};
                    this._expressionsSerializationInfoCache = {};
                }
                ExpressionWrapper.prototype.dispose = function () {
                    this._expressionsInfo = null;
                    this._expressionsSerializationInfoCache = null;
                    this._fieldListProvider = null;
                };
                ExpressionWrapper.createExpression = function (propertyName, eventName, expression) {
                    return {
                        getInfo: function () { return Report.expressionBindingSerializationsInfo; },
                        eventName: ko.observable(eventName),
                        expression: ko.observable(expression),
                        propertyName: ko.observable(propertyName)
                    };
                };
                ExpressionWrapper.prototype._createPropertyByName = function (propertyName, prefix) {
                    var result = {
                        propertyName: prefix ? [prefix, propertyName].join('.') : propertyName,
                        modelName: propertyName,
                        displayName: propertyName,
                        editor: Report.editorTemplates.reportexpression
                    };
                    if (this._displayNameDictionary[propertyName]) {
                        result.localizationId = this._displayNameDictionary[propertyName].localizationId;
                        result.displayName = this._displayNameDictionary[propertyName].displayName;
                    }
                    if (this._valuesDictionary[propertyName]) {
                        result.valuesArray = this._valuesDictionary[propertyName];
                    }
                    return result;
                };
                ExpressionWrapper.prototype._createInfo = function (rootInfo, prefix, path) {
                    var _this = this;
                    var info = rootInfo;
                    for (var i = 0; i < path.length; i++) {
                        if (typeof (path[i]) !== "string" && Array.isArray(path[i])) {
                            info.push.apply(info, path[i].map(function (innerProperty) { return _this._createPropertyByName(innerProperty, path[i - 1]); }));
                        }
                        else {
                            var currentInfo = info.filter(function (x) { return x.propertyName === path[i]; })[0];
                            if (!currentInfo) {
                                currentInfo = this._createPropertyByName(path[i]);
                                if (i !== path.length - 1) {
                                    currentInfo.editor = DevExpress.JS.Widgets.editorTemplates.objecteditor;
                                    currentInfo.info = [];
                                }
                                info.push(currentInfo);
                            }
                            info = currentInfo.info;
                        }
                    }
                    return rootInfo;
                };
                ExpressionWrapper.prototype._addControlInfo = function (controlType) {
                    var params = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        params[_i - 1] = arguments[_i];
                    }
                    if (!this._expressionsSerializationInfoCache[controlType]) {
                        this._expressionsSerializationInfoCache[controlType] = [];
                    }
                    this._expressionsSerializationInfoCache[controlType] = this._createInfo(this._expressionsSerializationInfoCache[controlType], "", params.filter(function (x) { return !!x; }));
                };
                ExpressionWrapper.prototype._createSerializationInfo = function (controlType, useEvents) {
                    var _this = this;
                    if (useEvents === void 0) { useEvents = false; }
                    var propertyNames = Object.keys(this._expressionsInfo[controlType]);
                    propertyNames.forEach(function (propertyName) {
                        var propertyDescriptor = _this._expressionsInfo[controlType][propertyName];
                        if (!useEvents) {
                            if (propertyDescriptor.events.indexOf("BeforePrint") !== -1)
                                _this._addControlInfo(controlType, propertyDescriptor.group, propertyName, propertyDescriptor.objectProperties);
                        }
                        else {
                            propertyDescriptor.events.forEach(function (eventName) {
                                _this._addControlInfo(controlType, eventName, propertyDescriptor.group, propertyName, propertyDescriptor.objectProperties);
                            });
                        }
                    });
                };
                ExpressionWrapper.prototype._getStateObjKeys = function (object) {
                    return Object.keys(object).filter(function (name) { return name !== "getInfo" && name !== "_model" && name !== "update"; });
                };
                ExpressionWrapper.prototype._getExpressionFromArray = function (propertyName, eventName, expressions) {
                    return expressions().filter(function (x) {
                        return x.propertyName() === propertyName &&
                            x.eventName() === eventName;
                    })[0];
                };
                ExpressionWrapper.prototype._createExpressionMap = function (propertyName, eventName, expressions, subscriptions, path, summaryRunning) {
                    var _this = this;
                    var isValid = ko.observable(true);
                    var functions = !!summaryRunning
                        ? ko.computed(function () { return summaryRunning() ? _this._summaryFunctions() : Report.reportFunctionDisplay; })
                        : Report.reportFunctionDisplay;
                    var expressionOptions = new WrappedExpressionOptions({
                        path: path || ko.observable(""),
                        functions: functions
                    }, {
                        addExpression: function (newVal) {
                            expressions.push(ExpressionWrapper.createExpression(propertyName, eventName, newVal));
                        },
                        removeExpression: function (expression) {
                            expressions.remove(expression);
                        }
                    }, this._fieldListProvider, eventName);
                    expressionOptions._disposables.push(functions);
                    expressionOptions.expression(this._getExpressionFromArray(propertyName, eventName, expressions));
                    return expressionOptions;
                };
                ExpressionWrapper.prototype._summaryFunctions = function () {
                    return Report.reportFunctionDisplay
                        .filter(function (cat) { return cat.category != "Aggregate"; })
                        .concat([
                        {
                            display: "Summary",
                            category: "Summary",
                            items: ["Avg", "Count", "Sum", "RunningSum", "Percentage", "Max", "Min", "Median", "Var", "VarP", "StdDev", "StdDevP", "DAvg", "DCount", "DSum", "DVar", "DVarP", "DStdDev", "DStdDevP", "RecordNumber"]
                                .reduce(function (acc, f) {
                                acc["sum" + f] = [{ paramCount: 1, text: "sum" + f + "()", descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_Summary" + f }];
                                return acc;
                            }, {})
                        }
                    ]);
                };
                ExpressionWrapper.prototype._mapExpressionsToObjectByEventName = function (object, eventName, expressions, subscriptions, path, summaryRunning) {
                    var _this = this;
                    var properties = this._getStateObjKeys(object);
                    properties.forEach(function (propertyName) {
                        if (!ko.isObservable(object[propertyName])) {
                            _this._mapExpressionsToObjectByEventName(object[propertyName], eventName, expressions, subscriptions, path, summaryRunning);
                        }
                        else {
                            object[propertyName] = _this._createExpressionMap(propertyName, eventName, expressions, subscriptions, path, summaryRunning);
                            subscriptions.push(object[propertyName]);
                        }
                    });
                };
                ExpressionWrapper.prototype._validateExpressions = function (object) {
                    var _this = this;
                    var isValid = true;
                    this._getStateObjKeys(object).forEach(function (propertyName) {
                        if (!isValid)
                            return;
                        if (object[propertyName] instanceof Object && !(object[propertyName] instanceof WrappedExpressionOptions)) {
                            isValid = _this._validateExpressions(object[propertyName]);
                        }
                        else {
                            isValid = object[propertyName].isValid();
                        }
                    });
                    return isValid;
                };
                ExpressionWrapper.prototype._getExpressionByPropertyName = function (object, propertyNameToSearch) {
                    if (object[propertyNameToSearch]) {
                        return object[propertyNameToSearch];
                    }
                    else {
                        var properties = this._getStateObjKeys(object);
                        var innerObjectPropertyNames = properties.filter(function (propertyName) { return !(object[propertyName] instanceof WrappedExpressionOptions); });
                        for (var i = 0; i < innerObjectPropertyNames.length; i++) {
                            var result = this._getExpressionByPropertyName(object[innerObjectPropertyNames[i]], propertyNameToSearch);
                            if (result)
                                return result;
                        }
                    }
                };
                ExpressionWrapper.prototype._mapExpressionsToObject = function (controlType, expressions, path, summaryRunning) {
                    var _this = this;
                    if (this._bindingMode === Report.DataBindingMode.Bindings) {
                        return null;
                    }
                    var useEvents = this._bindingMode === Report.DataBindingMode.ExpressionsAdvanced;
                    var subscriptions = [];
                    if (!this._expressionsSerializationInfoCache[controlType]) {
                        this._createSerializationInfo(controlType, useEvents);
                    }
                    var stateObj = {
                        getInfo: function () { return _this._expressionsSerializationInfoCache[controlType]; },
                        getExpression: function (propertyName, eventName) {
                            if (useEvents) {
                                return _this._getExpressionByPropertyName(stateObj[eventName], propertyName);
                            }
                            else {
                                return _this._getExpressionByPropertyName(stateObj, propertyName);
                            }
                        },
                        dispose: function () {
                            subscriptions.forEach(function (x) { return x.dispose(); });
                            subscriptions.splice(0);
                        },
                        validateExpression: function () {
                            return _this._validateExpressions(stateObj);
                        }
                    };
                    new DevExpress.JS.Utils.ModelSerializer().deserialize(stateObj, {});
                    if (useEvents) {
                        var events = this._getStateObjKeys(stateObj);
                        events.forEach(function (eventName) {
                            _this._mapExpressionsToObjectByEventName(stateObj[eventName], eventName, expressions, subscriptions, path, summaryRunning);
                        });
                    }
                    else {
                        this._mapExpressionsToObjectByEventName(stateObj, "BeforePrint", expressions, subscriptions, path, summaryRunning);
                    }
                    subscriptions.push(expressions.subscribe(function (args) {
                        args.forEach(function (arg) {
                            if (arg.status === "deleted") {
                                stateObj.getExpression(arg.value.propertyName(), arg.value.eventName()).expression(null);
                            }
                            else if (arg.status === "added") {
                                stateObj.getExpression(arg.value.propertyName(), arg.value.eventName()).expression(arg.value);
                            }
                        });
                    }, null, "arrayChange"));
                    return { stateObj: stateObj, subscriptions: subscriptions };
                };
                ExpressionWrapper.prototype.setPropertyDescription = function (controlType, propertyName, events, objectProperties, group) {
                    if (!this._expressionsInfo[controlType])
                        this._expressionsInfo[controlType] = {};
                    this._expressionsInfo[controlType][propertyName] = {
                        events: events,
                        group: group,
                        objectProperties: objectProperties
                    };
                };
                ExpressionWrapper.prototype.hidePropertyDescriptions = function (controlType) {
                    var _this = this;
                    var propertyNames = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        propertyNames[_i - 1] = arguments[_i];
                    }
                    propertyNames.forEach(function (propertyName) { return delete _this._expressionsInfo[controlType][propertyName]; });
                };
                ExpressionWrapper.prototype.createExpressionsObject = function (controlType, expressions, path, summaryRunning) {
                    var result = this._mapExpressionsToObject(controlType, expressions, path, summaryRunning);
                    if (!result)
                        return;
                    return result.stateObj;
                };
                ExpressionWrapper.prototype.setLocalizationId = function (propertyName, localizationId, displayName) {
                    this._displayNameDictionary[propertyName] = {
                        localizationId: localizationId,
                        displayName: displayName || propertyName
                    };
                };
                ExpressionWrapper.prototype.setValues = function (propertyName, values) {
                    this._valuesDictionary[propertyName] = values;
                };
                return ExpressionWrapper;
            })(Designer.Disposable);
            Report.ExpressionWrapper = ExpressionWrapper;
            var ReportItemsProvider = (function (_super) {
                __extends(ReportItemsProvider, _super);
                function ReportItemsProvider(allControls, fieldListProvider) {
                    var _this = this;
                    _super.call(this);
                    this._rootItems = {
                        "ReportItems": function (path, allControls) {
                            return _this.getReportElementsByPath(allControls, path.split('.'));
                        }
                    };
                    this.getItems = function (path, rootItems) {
                        var rootItems = $.extend({}, _this._rootItems, rootItems);
                        var getItemsFunc = undefined;
                        Object.keys(rootItems).some(function (currentName) {
                            var rootItem = { propertyName: currentName, getItems: rootItems[currentName] };
                            getItemsFunc = _this._tryGenerateGetItemsFunc(rootItem, path.path) || _this._tryGenerateGetItemsFunc(rootItem, path.fullPath);
                            return !!getItemsFunc;
                        });
                        if (getItemsFunc) {
                            var $deferred = $.Deferred();
                            var items = getItemsFunc(allControls());
                            items && $deferred.resolve(items) || $deferred.reject();
                            return $deferred.promise();
                        }
                        else if (path.fullPath === "Root") {
                            var $deferred = $.Deferred();
                            var result = Object.keys(rootItems).map(function (name) { return Report.Utils.createIDataMemberInfoByName(name); });
                            $deferred.resolve(result);
                            return $deferred.promise();
                        }
                        else {
                            return fieldListProvider.getItems(path);
                        }
                    };
                    this.getItemByPath = function (pathRequest, rootItems) {
                        return _this._getItemByPath(pathRequest, rootItems, true);
                    };
                }
                ReportItemsProvider.prototype._getControlByName = function (allControls, name) {
                    if (name === "Report") {
                        return allControls.filter(function (x) { return x instanceof Report.ReportViewModel; })[0];
                    }
                    return allControls.filter(function (x) { return x.name() === name; })[0];
                };
                ReportItemsProvider.prototype._getProperties = function (targetInfo, propertyName) {
                    return targetInfo.filter(function (x) { return x.modelName === '@' + propertyName || x.modelName === propertyName; })[0];
                };
                ReportItemsProvider.prototype._tryGenerateGetItemsFunc = function (rootItem, path) {
                    if (path.indexOf(rootItem.propertyName) === 0) {
                        return function (allControls) { return rootItem.getItems(path, allControls); };
                    }
                };
                ReportItemsProvider.prototype.getReportElementsByPath = function (allControls, path) {
                    if (path.length === 1) {
                        return allControls.map(function (x) {
                            var name = x instanceof Report.ReportViewModel ? 'Report' : x.name();
                            return Report.Utils.createIDataMemberInfoByName(name);
                        });
                    }
                    path = path.slice(1);
                    var control = this._getControlByName(allControls, path[0]);
                    if (!control) {
                        return null;
                    }
                    var info = control.getInfo();
                    var controlsPath = path.slice(1);
                    for (var i = 0; i < controlsPath.length; i++) {
                        info = this._getProperties(info, controlsPath[i]);
                        info = info && info.info;
                    }
                    if (info) {
                        return info.filter(function (x) { return !!x.modelName && !x.array; }).map(function (x) {
                            var name = x.modelName.indexOf('@') === 0 ? x.modelName.slice(1) : x.modelName;
                            return Report.Utils.createIDataMemberInfoByName(name, x.info ? "list" : "string");
                        });
                    }
                    else {
                        return null;
                    }
                };
                ReportItemsProvider.prototype._getItemByPath = function (pathRequest, rootItems, askParents) {
                    var _this = this;
                    var $deferred = $.Deferred();
                    var parts = pathRequest.fullPath.split('.');
                    var propertyName = parts.pop();
                    var parentPathRequest = new DevExpress.JS.Widgets.PathRequest(parts.join('.'));
                    this.getItems(parentPathRequest, rootItems).done(function (items) {
                        var item = items.filter(function (x) { return x.name === propertyName; })[0];
                        if (item) {
                            if (askParents && parts.length > 1)
                                _this._getItemByPath(parentPathRequest, rootItems, false)
                                    .done(function () { return $deferred.resolve(item); })
                                    .fail(function () { return $deferred.reject(); });
                            else
                                $deferred.resolve(item);
                        }
                        else
                            $deferred.reject();
                    }).fail(function () { return $deferred.reject(); });
                    return $deferred.promise();
                };
                return ReportItemsProvider;
            })(Designer.Disposable);
            Report.ReportItemsProvider = ReportItemsProvider;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            function sortBands(band1, band2) {
                return Report.BandViewModel.getBandWeight(band1) - Report.BandViewModel.getBandWeight(band2);
            }
            Report.sortBands = sortBands;
            function setMarkerWidth(bandHolder, levelCount, currentLevel) {
                if (currentLevel === void 0) { currentLevel = 0; }
                if (bandHolder && bandHolder.bands().length !== 0) {
                    bandHolder.bands().forEach(function (band) {
                        band.markerWidth(Report.BandSurface.collapsedHeight * (levelCount - currentLevel));
                        setMarkerWidth(band.bandsHolder, levelCount, currentLevel + 1);
                    });
                    bandHolder.verticalBandsContainer && bandHolder.verticalBandsContainer.markerWidth(Report.BandSurface.collapsedHeight * (levelCount - currentLevel));
                }
            }
            function getLevelCount(bandHolder) {
                var result = 0, maxLevelCount = 0;
                if (!bandHolder)
                    return result;
                if (bandHolder.bands().length !== 0) {
                    bandHolder.bands().forEach(function (band) {
                        var levelCount = getLevelCount(band.bandsHolder);
                        if (levelCount > maxLevelCount) {
                            maxLevelCount = levelCount;
                        }
                    });
                    result = maxLevelCount + 1;
                }
                else if (bandHolder.verticalBandsContainer && bandHolder.verticalBandsContainer.visible) {
                    result = maxLevelCount + 1;
                }
                return result;
            }
            function reculculateUnit(value, dpi) {
                return Math.round(value * dpi) / 100;
            }
            Report.reculculateUnit = reculculateUnit;
            var ReportViewModel = (function (_super) {
                __extends(ReportViewModel, _super);
                function ReportViewModel(report, serializer) {
                    var _this = this;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    report = report.XtraReportsLayoutSerializer || report;
                    this.controlType = "DevExpress.XtraReports.UI.XtraReport";
                    _super.call(this, report, null, serializer);
                    if (this.pageWidth() === Report.pageWidth.defaultVal) {
                        this.pageWidth(ReportViewModel.defaultPageSize.width);
                    }
                    if (this.pageHeight() === Report.pageHeight.defaultVal) {
                        this.pageHeight(ReportViewModel.defaultPageSize.height);
                    }
                    this._dataBindingMode = ko.observable("");
                    this._update = ko.observable(false);
                    this._disposables.push(this.isModelReady = ko.pureComputed(function () { return !_this._update(); }));
                    this._disposables.push(this.key = ko.pureComputed(function () { return _this.name(); }));
                    this.dataSourceRefs = [];
                    this.dataSourceHelper = ko.observable();
                    this.parameterHelper = new Report.ReportParameterHelper();
                    this._disposables.push(this.measureUnit.subscribe(function (val) {
                        _this._update(true);
                        _this._recalculateUnits(val);
                        _this._update(false);
                    }));
                    this._disposables.push(this.landscape.subscribe(function (newVal) {
                        var width = _this.pageWidth();
                        _this.pageWidth(_this.pageHeight());
                        _this.pageHeight(width);
                    }));
                    this._disposables.push(this.dataSource.subscribe(function (newVal) {
                        if (!newVal) {
                            _this.dataMember(null);
                        }
                    }));
                    this.styles = DevExpress.JS.Utils.deserializeArray(report.StyleSheet, function (item) { return new Report.StyleModel(item, serializer); });
                    this.objectStorage = DevExpress.JS.Utils.deserializeArray(report.ObjectStorage, function (item) { return Report.ObjectItem.createNew(item, _this.dsHelperProvider, serializer); });
                    this.componentStorage = DevExpress.JS.Utils.deserializeArray(report.ComponentStorage, function (item) { return Report.ObjectItem.createNew(item, _this.dsHelperProvider, serializer); });
                    this.objectStorage.push.apply(this.objectStorage, this.componentStorage().filter(function (item) { return item.objectType().indexOf("DataSource") !== -1; }));
                    this.componentStorage.remove(function (item) { return item.objectType().indexOf("DataSource") !== -1; });
                    this.objectsStorageHelper = new Report.ObjectsStorage(this.objectStorage, this.dsHelperProvider);
                    this._disposables.push(this.objectsStorageHelper);
                    this.parameters = DevExpress.JS.Utils.deserializeArray(report.Parameters, function (item) { return new Report.Parameter(item, _this, _this.objectsStorageHelper, _this.parameterHelper, serializer); });
                    this.objectStorage().forEach(function (objectStorage) {
                        if (objectStorage instanceof Report.UniversalDataSource) {
                            objectStorage["tableInfoCollection"]().forEach(function (tableInfoCollection) {
                                tableInfoCollection.filterString().helper.parameters = _this.parameters;
                            });
                        }
                    });
                    this.bands = DevExpress.JS.Utils.deserializeArray(report.Bands, function (item) { return _this.createControl(item, serializer); });
                    Report.BandViewModel.initLevels(this.bands());
                    this.bands().sort(sortBands);
                    this.extensions = DevExpress.JS.Utils.deserializeArray(report.Extensions, function (item) { return new Report.ExtensionModel(item, serializer); });
                    this.crossBandControls = DevExpress.JS.Utils.deserializeArray(report.CrossBandControls, function (item) { return _this.createControl(item, serializer); });
                    this.calculatedFields = DevExpress.JS.Utils.deserializeArray(report.CalculatedFields, function (item) { return new Report.CalculatedField(item, serializer); });
                    this._initializeBands();
                    this.formattingRuleSheet = DevExpress.JS.Utils.deserializeArray(report.FormattingRuleSheet, function (item) { return new Report.FormattingRule(item, _this, serializer); });
                    this.components = ko.observableArray([]);
                    this._disposables.push(this.formattingRuleSheet.subscribe(function (args) {
                        args.forEach(function (rule) {
                            if (!rule.value.name()) {
                                rule.value.name(Designer.getUniqueNameForNamedObjectsArray(_this.formattingRuleSheet(), "formattingRule"));
                            }
                            if (!rule.value.parent) {
                                rule.value.parent = _this;
                            }
                        });
                    }, null, "arrayChange"));
                    this._disposables.push(this.margins.left.subscribe(function (newVal) {
                        if (_this.isModelReady() && newVal > _this.pageWidth() - _this.margins.right()) {
                            _this.margins.right(_this.pageWidth() - _this.margins.left());
                        }
                    }));
                    this._disposables.push(this.margins.right.subscribe(function (newVal) {
                        if (_this.isModelReady() && newVal > _this.pageWidth() - _this.margins.left()) {
                            _this.margins.left(_this.pageWidth() - _this.margins.right());
                        }
                    }));
                    this._disposables.push(this.paperKind.subscribe(function (newVal) {
                        if (newVal !== "Custom") {
                            var size = Designer.papperKindMapper[newVal];
                            _this.pageHeight(Math.round((_this.landscape() ? size.width : size.height) * (_this._innerDpi.peek() / 100) * 100) / 100);
                            _this.pageWidth(Math.round((_this.landscape() ? size.height : size.width) * (_this._innerDpi.peek() / 100) * 100) / 100);
                        }
                    }));
                    var dataMember = ko.pureComputed(function () {
                        return Designer.getFullPath(_this.getPath("dataMember"), _this.dataMember());
                    });
                    var dataSource = this.dataSource;
                    var disabled = ko.pureComputed(function () { return !dataSource(); });
                    var filterString = new DevExpress.JS.Widgets.FilterStringOptions(this["_filterString"], dataMember, disabled);
                    this._disposables.push(dataMember);
                    this._disposables.push(disabled);
                    filterString.helper.parameters = this.parameters;
                    this["filterString"] = filterString;
                    this._scriptReferencesString = ko.observable(this.scriptReferencesString());
                    this._disposables.push(this.scriptReferencesString = ko.pureComputed({
                        read: function () { return _this._scriptReferencesString(); },
                        write: function (newVal) { _this._scriptReferencesString(newVal.replace(/\n/g, "\r\n")); }
                    }));
                }
                ReportViewModel.prototype._getDpi = function (unitType) {
                    switch (unitType) {
                        case "HundredthsOfAnInch": return 100;
                        case "TenthsOfAMillimeter": return 254;
                        case "Pixels": return 96;
                    }
                };
                ReportViewModel.prototype._recalculateUnits = function (unitType) {
                    var newDpi = this._getDpi(unitType), oldDpi = this._innerDpi(), coef = newDpi / oldDpi;
                    Designer.objectsVisitor(this, function (target) {
                        if (target && target["constructor"] && target["constructor"].unitProperties) {
                            for (var i = 0; i < target["constructor"].unitProperties.length; i++) {
                                var propertyName = target["constructor"].unitProperties[i];
                                var property = target["_" + propertyName] || target[propertyName];
                                !!ko.unwrap(property) && property(Math.round(ko.unwrap(property) * coef * 100) / 100);
                            }
                            ;
                        }
                    });
                    this._innerDpi(newDpi);
                };
                ReportViewModel.prototype.findStyle = function (styleName) {
                    var result = null;
                    for (var i = 0; i < this.styles().length; i++) {
                        if (this.styles()[i].name() === styleName) {
                            return this.styles()[i];
                        }
                    }
                    ;
                    return result;
                };
                ReportViewModel.prototype._initializeBands = function () {
                    var traverse = function (xs) { return xs.reduce(function (res, x) { res.push.apply(res, [x].concat(traverse(ko.unwrap(x["bands"]) || []))); return res; }, []); };
                    var bandNames = traverse(this.bands()).map(function (x) { return x.name(); });
                    if (this.bands().length === 0) {
                        this.createChild({ "@ControlType": "DetailBand", "@Name": "Detail1" });
                    }
                    else if (Designer.getFirstItemByPropertyValue(this.bands(), "controlType", "DetailBand") === null && Designer.getFirstItemByPropertyValue(this.bands(), "controlType", "VerticalDetailBand") === null) {
                        this.createChild({ "@ControlType": "DetailBand", "@Name": Designer.getUniqueName(bandNames, "Detail") });
                    }
                    if (Designer.getFirstItemByPropertyValue(this.bands(), "controlType", "TopMarginBand") === null) {
                        this.createChild({ "@ControlType": "TopMarginBand", "@Name": Designer.getUniqueName(bandNames, "TopMargin") });
                    }
                    if (Designer.getFirstItemByPropertyValue(this.bands(), "controlType", "BottomMarginBand") === null) {
                        this.createChild({ "@ControlType": "BottomMarginBand", "@Name": Designer.getUniqueName(bandNames, "BottomMargin") });
                    }
                };
                ReportViewModel.prototype.isPropertyDisabled = function (name) {
                    if (name === "pageWidth" || name === "pageHeight") {
                        return this.paperKind() !== "Custom";
                    }
                    else if (name === "dataMember") {
                        return this.dataSource() === null;
                    }
                };
                ReportViewModel.prototype.getSubreportUrls = function () {
                };
                ReportViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.parameters);
                    this.disposeObservableArray(this.calculatedFields);
                    this.disposeObservableArray(this.crossBandControls);
                    this.disposeObservableArray(this.formattingRuleSheet);
                    this.disposeObservableArray(this.bands);
                    this.disposeObservableArray(this.objectStorage);
                    this.disposeObservableArray(this.styles);
                    this.resetObservableArray(this.componentStorage);
                    this.resetObservableArray(this.extensions);
                    this.resetObservableArray(this.objectStorage);
                    this.resetObservableArray(this.parameters);
                    this.resetObservableArray(this.calculatedFields);
                    this.resetObservableArray(this.crossBandControls);
                    this.resetObservableArray(this.formattingRuleSheet);
                    this.resetObservableArray(this.bands);
                    this.resetObservableArray(this.styles);
                };
                ReportViewModel.prototype.initialize = function () {
                    _super.prototype.initialize.call(this);
                    this.size.height = this.pageHeight;
                    this.size.width = this.pageWidth;
                };
                ReportViewModel.prototype.getNearestParent = function (target) {
                    return this;
                };
                ReportViewModel.prototype.addChild = function (control) {
                    if (control instanceof Report.CrossBandControlViewModel) {
                        control.parentModel(this);
                        control.startBand(this.bands()[0]);
                        control.endBand(this.bands()[0]);
                        this.crossBandControls.push(control);
                    }
                    else if (control instanceof Report.BandViewModel) {
                        Report.DetailReportBand.addBandToContainer(this, control);
                    }
                    else {
                        Designer.NotifyAboutWarning("Attempt to add wrong child control.");
                    }
                };
                ReportViewModel.prototype.removeChild = function (control) {
                    if (control instanceof Report.CrossBandControlViewModel) {
                        this.crossBandControls.splice(this.crossBandControls().indexOf(control), 1);
                    }
                    else if (control instanceof Report.BandViewModel) {
                        if (this.bands().length > 1) {
                            this.bands.splice(this.bands().indexOf(control), 1);
                        }
                    }
                    else {
                        Designer.NotifyAboutWarning("Attempt to remove wrong child control.");
                    }
                };
                ReportViewModel.prototype.serialize = function () {
                    return (new DevExpress.JS.Utils.ModelSerializer()).serialize(this);
                };
                ReportViewModel.prototype.save = function () {
                    var data = this.serialize();
                    if (this.onSave) {
                        this.onSave(data);
                    }
                    return data;
                };
                ReportViewModel.prototype.getPath = function (propertyName) {
                    var helper = ko.unwrap(this.dataSourceHelper);
                    if (!helper)
                        return;
                    var path = helper.getDataSourcePath(this.dataSource());
                    if (propertyName === "expression" && this.dataMember())
                        path += '.' + this.dataMember();
                    return path;
                };
                ReportViewModel.prototype.isStyleProperty = function (propertyName) { return false; };
                Object.defineProperty(ReportViewModel.prototype, "dataBindingMode", {
                    get: function () {
                        return this._dataBindingMode();
                    },
                    enumerable: true,
                    configurable: true
                });
                ReportViewModel.bandsTypeOrdering = ["TopMarginBand", "ReportHeaderBand", "PageHeaderBand", "GroupHeaderBand", "DetailBand", "DetailReportBand", "GroupFooterBand", "ReportFooterBand", "PageFooterBand", "BottomMarginBand"];
                ReportViewModel.unitProperties = ["snapGridSize"];
                ReportViewModel.defaultPageSize = {
                    width: 850,
                    height: 1100
                };
                return ReportViewModel;
            })(Report.ReportElementViewModel);
            Report.ReportViewModel = ReportViewModel;
            var ReportSurface = (function (_super) {
                __extends(ReportSurface, _super);
                function ReportSurface(report, zoom) {
                    var _this = this;
                    if (zoom === void 0) { zoom = ko.observable(1); }
                    _super.call(this, report, {
                        measureUnit: report.measureUnit, zoom: zoom
                    }, ReportSurface._unitProperties);
                    this.allowMultiselect = false;
                    this.locked = false;
                    this.focused = ko.observable(false);
                    this.selected = ko.observable(false);
                    this.templateName = ko.observable("dxrd-report");
                    this.underCursor = ko.observable(new Designer.HoverInfo());
                    this.crossBandControls = ko.observableArray();
                    this.minHeight = ko.observable();
                    this.maxMarkerWidth = ko.observable();
                    this.validationMode = ko.observable(false);
                    this.parent = null;
                    this.zoom = zoom;
                    this.dpi = report.dpi;
                    this._disposables.push(this.rtl = ko.pureComputed(function () { return report.rtl() && report.rtlLayout() === "Yes"; }));
                    this.measureUnit = report.measureUnit;
                    this._context = this;
                    this._watermarkImageNaturalSize = ko.observable({ width: 0, height: 0 });
                    this.drawWatermark = report.drawWatermark;
                    this.watermark = report.watermark;
                    this._disposables.push(report.watermark.image.subscribe(function (val) {
                        _this._updateWatermarkImageNaturalSize(val);
                    }));
                    this._updateWatermarkImageNaturalSize(report.watermark.image.peek());
                    this._disposables.push(this._watermarkTextRenderingResult = ko.pureComputed(function () {
                        var canvas = document.createElement('canvas');
                        var originalWidthPx = Designer.unitsToPixel(report.pageWidth(), _this.measureUnit());
                        var originalHeightPx = Designer.unitsToPixel(report.pageHeight(), _this.measureUnit());
                        canvas.width = originalWidthPx;
                        canvas.height = originalHeightPx;
                        var context = canvas.getContext('2d');
                        context.translate(originalWidthPx / 2, originalHeightPx / 2);
                        switch (report.watermark.textDirection()) {
                            case 'Vertical':
                                context.rotate(-Math.PI / 2);
                                break;
                            case 'ForwardDiagonal':
                                context.rotate(-50 * Math.PI / 180);
                                break;
                            case 'BackwardDiagonal':
                                context.rotate(50 * Math.PI / 180);
                        }
                        context.textAlign = 'center';
                        context.textBaseline = 'middle';
                        var font = new Designer.CssCalculator(report.watermark, ko.observable(false)).fontCss();
                        context.font = [font.fontStyle.toLowerCase(), font.fontWeight.toLowerCase(), font.fontSize, font.fontFamily].filter(function (x) { return x; }).join(' ');
                        context.fillStyle = report.watermark.foreColor();
                        context.fillText(report.watermark.text(), 0, 0);
                        return canvas.toDataURL('image/png');
                    }));
                    this._disposables.push(this._width = ko.pureComputed({
                        read: function () {
                            return _this["pageWidth"]();
                        }
                    }));
                    this._disposables.push(this._height = ko.pureComputed({
                        read: function () {
                            return _this["pageHeight"]();
                        }
                    }));
                    this.margins = {
                        bottom: this["_bottom"],
                        left: this._createMargin("_left", "_right"),
                        right: this._createMargin("_right", "_left"),
                        top: this["_top"]
                    };
                    this._disposables.push(this.pageWidthWithoutMargins = ko.computed(function () {
                        return _this.pageWidth() - _this.margins.left() - _this.margins.right();
                    }));
                    this._disposables.push(this.margins.left);
                    this._disposables.push(this.margins.right);
                    this._disposables.push(this.bandsHolder = new Report.BandsHolder(this));
                    this.bandsHolder.initialize(report.bands);
                    this._disposables.push(ko.computed(function () {
                        var levelCount = getLevelCount(_this.bandsHolder);
                        setMarkerWidth(_this.bandsHolder, levelCount, 0);
                        _this.maxMarkerWidth(Report.BandSurface.collapsedHeight * levelCount + 22);
                    }));
                    this._disposables.push(this.effectiveHeight = ko.pureComputed(function () {
                        var minHeight = _this.bandsHolder.getHeight();
                        _this.minHeight(minHeight);
                        return minHeight + 20;
                    }));
                    this._disposables.push(Designer.createObservableArrayMapCollection(report.crossBandControls, this.crossBandControls, this._createSurface));
                    this._disposables.push(this.ghostContainerOffset = ko.pureComputed(function () {
                        return _this.rtl() ? 0 : _this.margins.left();
                    }));
                    var marginOptions = new SurfaceMarginResizeOptions(this.margins, this.rtl, this.pageWidth);
                    this._disposables.push(marginOptions);
                    this.rightMarginOffset = marginOptions.rightMarginOffset;
                    this.leftMarginOffset = marginOptions.leftMarginOffset;
                    this.rightMarginResizableOffset = marginOptions.rightMarginResizableOffset;
                    this.leftMarginResizableOffset = marginOptions.leftMarginResizableOffset;
                    this.leftMarginResizeOptions = marginOptions.leftMarginOptions;
                    this.rightMarginResizeOptions = marginOptions.rightMarginOptions;
                }
                ReportSurface.prototype._createMargin = function (side, oppositeSide) {
                    var _this = this;
                    return ko.pureComputed({
                        read: function () { return _this.rtl() ? _this[oppositeSide]() : _this[side](); },
                        write: function (value) {
                            _this.rtl() ? _this[oppositeSide](value) : _this[side](value);
                        }
                    });
                };
                ReportSurface.prototype._updateWatermarkImageNaturalSize = function (val) {
                    var _this = this;
                    if (!val)
                        return;
                    var image = new Image();
                    image.src = 'data:image/png;base64,' + val;
                    image.onload = function (e) {
                        _this._watermarkImageNaturalSize({ width: image.naturalWidth, height: image.naturalHeight });
                        image.onload = null;
                    };
                };
                ReportSurface.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.crossBandControls);
                    this.resetObservableArray(this.crossBandControls);
                };
                ReportSurface.prototype.getChildrenCollection = function () {
                    return this.bandsHolder.bands;
                };
                ReportSurface.prototype.isFit = function (dropTarget) {
                    return dropTarget.underCursor().y >= -0.1
                        && dropTarget.underCursor().x >= 0
                        && ((this === dropTarget) ? this.effectiveHeight() : dropTarget.rect().height) > dropTarget.underCursor().y
                        && (this.pageWidth() - this.margins.left()) > dropTarget.underCursor().x;
                };
                ReportSurface.prototype.canDrop = function () { return true; };
                ReportSurface.prototype.wrapRtlProperty = function (data, undoEngine, element) {
                    var _this = this;
                    var wrapper = ko.computed({
                        read: data.value,
                        write: function (newValue) {
                            undoEngine.peek().start();
                            var prevValue = _this.rtl.peek();
                            data.value(newValue);
                            if (prevValue !== _this.rtl.peek()) {
                                var report = _this.getControlModel();
                                var left = report.margins.left();
                                report.margins.left(report.margins.right());
                                report.margins.right(left);
                            }
                            undoEngine.peek().end();
                        }
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () { wrapper.dispose(); });
                    return $.extend({}, data, { value: wrapper });
                };
                ReportSurface.prototype.checkParent = function (surfaceParent) { return false; };
                ReportSurface._unitProperties = {
                    _width: function (o) { return o.size.width; },
                    _height: function (o) { return o.size.height; },
                    pageWidth: function (o) { return o.size.width; },
                    pageHeight: function (o) { return o.size.height; },
                    snapGridSize: function (o) {
                        return o.snapGridSize;
                    },
                    _bottom: function (o) { return o.margins.bottom; },
                    _left: function (o) { return o.margins.left; },
                    _right: function (o) { return o.margins.right; },
                    _top: function (o) { return o.margins.top; }
                };
                return ReportSurface;
            })(Designer.SurfaceElementArea);
            Report.ReportSurface = ReportSurface;
            var SurfaceMarginResizeOptions = (function (_super) {
                __extends(SurfaceMarginResizeOptions, _super);
                function SurfaceMarginResizeOptions(margins, rtl, pageWidth) {
                    var _this = this;
                    _super.call(this);
                    this.rtl = rtl;
                    this.handle = "w";
                    this.oppositeHandle = "e";
                    var elements = [];
                    this._disposables.push(rtl.subscribe(function (value) {
                        $(elements).find(".ui-resizable-e, .ui-resizable-w")
                            .removeClass("ui-resizable-" + (value ? _this.handle : _this.oppositeHandle))
                            .addClass("ui-resizable-" + (value ? _this.oppositeHandle : _this.handle));
                    }));
                    var rightOptions = null;
                    var leftOptions = null;
                    this._disposables.push(this.rightMarginOffset = ko.pureComputed(function () {
                        return rtl() ? 0 : pageWidth() - margins.left() - margins.right();
                    }));
                    this._disposables.push(this.leftMarginOffset = ko.pureComputed(function () {
                        return rtl() ? pageWidth() - margins.left() : 0;
                    }));
                    this._disposables.push(this.rightMarginResizableOffset = ko.pureComputed(function () {
                        return rtl() ? margins.right() : _this.rightMarginOffset();
                    }));
                    this._disposables.push(this.leftMarginResizableOffset = ko.pureComputed(function () {
                        return rtl() ? margins.right() : 0;
                    }));
                    this.rightMarginOptions = function (undoEngine, element) {
                        if (!rightOptions) {
                            var margin = margins.right();
                            var maxRightMargin = pageWidth() - margins.left() - 1;
                            rightOptions = _this._createOptions(undoEngine, function (ui) {
                                margin = margins.right();
                                maxRightMargin = pageWidth() - margins.left() - 1;
                                $(ui.element).resizable("option", "minWidth", 0);
                                $(ui.element).resizable("option", "maxWidth", maxRightMargin);
                            }, function (ui) {
                                margins.right(Math.min(Math.max(0, ui.size.width - ui.originalSize.width + margin), maxRightMargin));
                                if (!ui.element.hasClass("dxrd-ruler-shadow")) {
                                    $(ui.element).css({ left: _this.rightMarginResizableOffset(), width: 0 });
                                }
                                else {
                                    $(ui.element).css({ left: _this.rightMarginOffset() });
                                }
                            });
                            _this._disposables.push(rightOptions);
                        }
                        elements.push(element);
                        return rightOptions;
                    };
                    this.leftMarginOptions = function (undoEngine, element) {
                        if (!leftOptions) {
                            leftOptions = _this._createOptions(undoEngine, function (ui) {
                                $(ui.element).resizable("option", "minWidth", 0);
                                $(ui.element).resizable("option", "maxWidth", pageWidth() - margins.right() - 1);
                            }, function (ui) {
                                margins.left(pageWidth() - Math.max(0, ui.size.width) - margins.right());
                                $(ui.element).css({ left: _this.leftMarginResizableOffset(), width: (pageWidth() - margins.left() - margins.right()) });
                            });
                            _this._disposables.push(leftOptions);
                        }
                        elements.push(element);
                        return leftOptions;
                    };
                }
                SurfaceMarginResizeOptions.prototype._createOptions = function (undoEngine, startDelegate, resizeDelegate) {
                    var _this = this;
                    return ko.computed(function () {
                        return {
                            handles: _this.rtl() ? _this.oppositeHandle : _this.handle,
                            start: function (e, ui) {
                                startDelegate(ui);
                                undoEngine().start();
                            },
                            resize: function (e, ui) {
                                resizeDelegate(ui);
                            },
                            stop: function (e, ui) {
                                undoEngine().end();
                            }
                        };
                    });
                };
                return SurfaceMarginResizeOptions;
            })(Designer.Disposable);
            var ReportActions = (function () {
                function ReportActions(onComponentAdded) {
                    var _this = this;
                    this._contextModel = ko.observable();
                    this._targetModel = ko.computed(function () {
                        var model = _this._contextModel();
                        if (model) {
                            if (model.parentModel() && model.parentModel().parentModel() && model.controlType === "SubBand") {
                                model = model.parentModel().parentModel();
                            }
                            else if (model.parentModel() && model.controlType !== "DevExpress.XtraReports.UI.XtraReport" && model.controlType !== "DetailReportBand") {
                                model = model.parentModel();
                            }
                            else {
                                model = model;
                            }
                        }
                        return model;
                    });
                    this.actions = [
                        {
                            text: "Insert Top Margin Band",
                            displayText: function () { return Designer.getLocalization("Insert Top Margin Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertTopMarginBand'); },
                            imageClassName: "dxrd-image-actions-top_margin",
                            imageTemplateName: "dxrd-svg-actions-top_margin",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("TopMarginBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("TopMarginBand"); },
                        }, {
                            text: "Insert Report Header Band",
                            displayText: function () { return Designer.getLocalization("Insert Report Header Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertReportHeaderBand'); },
                            imageClassName: "dxrd-image-actions-report_header",
                            imageTemplateName: "dxrd-svg-actions-report_header",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("ReportHeaderBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("ReportHeaderBand"); },
                        }, {
                            text: "Insert Page Header Band",
                            displayText: function () { return Designer.getLocalization("Insert Page Header Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertPageHeaderBand'); },
                            imageClassName: "dxrd-image-actions-page_header",
                            imageTemplateName: "dxrd-svg-actions-page_header",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("PageHeaderBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("PageHeaderBand"); },
                        }, {
                            text: "Insert Group Header Band",
                            displayText: function () { return Designer.getLocalization("Insert Group Header Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertGroupHeaderBand'); },
                            imageClassName: "dxrd-image-actions-group_header",
                            imageTemplateName: "dxrd-svg-actions-group_header",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this._addBand("GroupHeaderBand"); },
                        }, {
                            text: "Insert Detail Band",
                            displayText: function () { return Designer.getLocalization("Insert Detail Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertDetailBand'); },
                            imageClassName: "dxrd-image-actions-detail",
                            imageTemplateName: "dxrd-svg-actions-detail",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("DetailBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("DetailBand"); },
                        }, {
                            text: "Insert Vertical Header Band",
                            displayText: function () { return Designer.getLocalization("Insert Vertical Header Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertVerticalHeaderBand'); },
                            imageClassName: "dxrd-svg-actions-vertical_header",
                            imageTemplateName: "dxrd-svg-actions-vertical_header",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("VerticalHeaderBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("VerticalHeaderBand"); },
                        }, {
                            text: "Insert Vertical Detail Band",
                            displayText: function () { return Designer.getLocalization("Insert Vertical Detail Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertVerticalDetailBand'); },
                            imageClassName: "dxrd-svg-actions-vertical_detail",
                            imageTemplateName: "dxrd-svg-actions-vertical_detail",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("VerticalDetailBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("VerticalDetailBand"); },
                        }, {
                            text: "Insert Vertical Total Band",
                            displayText: function () { return Designer.getLocalization("Insert Vertical Total Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertVerticalTotalBand'); },
                            imageClassName: "dxrd-svg-actions-vertical_total",
                            imageTemplateName: "dxrd-svg-actions-vertical_total",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("VerticalTotalBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("VerticalTotalBand"); },
                        }, {
                            text: "Insert Detail Report Band",
                            displayText: function () { return Designer.getLocalization("Insert Detail Report Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertDetailReportBand'); },
                            imageClassName: "dxrd-image-actions-detail_report",
                            imageTemplateName: "dxrd-svg-actions-detail_report",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this._addBand("DetailReportBand"); },
                        }, {
                            text: "Insert Group Footer Band",
                            displayText: function () { return Designer.getLocalization("Insert Group Footer Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertGroupFooterBand'); },
                            imageClassName: "dxrd-image-actions-group_footer",
                            imageTemplateName: "dxrd-svg-actions-group_footer",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () { _this._addBand("GroupFooterBand"); },
                        }, {
                            text: "Insert Report Footer Band",
                            displayText: function () { return Designer.getLocalization("Insert Report Footer Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertReportFooterBand'); },
                            imageClassName: "dxrd-image-actions-report_footer",
                            imageTemplateName: "dxrd-svg-actions-report_footer",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("ReportFooterBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("ReportFooterBand"); },
                        }, {
                            text: "Insert Page Footer Band",
                            displayText: function () { return Designer.getLocalization("Insert Page Footer Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertPageFooterBand'); },
                            imageClassName: "dxrd-image-actions-page_footer",
                            imageTemplateName: "dxrd-svg-actions-page_footer",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("PageFooterBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("PageFooterBand"); },
                        }, {
                            text: "Insert Bottom Margin Band",
                            displayText: function () { return Designer.getLocalization("Insert Bottom Margin Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertBottomMarginBand'); },
                            imageClassName: "dxrd-image-actions-bottom_margin",
                            imageTemplateName: "dxrd-svg-actions-bottom_margin",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("BottomMarginBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("BottomMarginBand"); },
                        }, {
                            text: "Insert Sub-Band",
                            displayText: function () { return Designer.getLocalization("Insert Sub-Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertSubBand'); },
                            imageClassName: "dxrd-image-actions-subband",
                            imageTemplateName: "dxrd-svg-actions-subband",
                            disabled: ko.pureComputed(function () {
                                return !_this._canAddBand("SubBand");
                            }),
                            visible: true,
                            clickAction: function () { _this._addBand("SubBand"); },
                        }
                    ];
                    this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                }
                ReportActions.prototype._canAddBand = function (bandType) {
                    if (!this._targetModel()) {
                        return false;
                    }
                    if (bandType === "GroupHeaderBand" || bandType === "GroupFooterBand" || bandType === "DetailReportBand") {
                        return true;
                    }
                    if (bandType === "SubBand") {
                        var model = (this._contextModel());
                        return model !== null && !model.lockedInUserDesigner() && (model.controlType.indexOf("XtraReport") === -1 && ["DetailReportBand", "TopMarginBand", "BottomMarginBand", "SubBand"].indexOf(model.controlType) === -1);
                    }
                    if (this._targetModel().controlType === "DetailReportBand" && (bandType === "TopMarginBand" || bandType === "BottomMarginBand" || bandType === "PageHeaderBand" || bandType === "PageFooterBand")) {
                        return false;
                    }
                    return this._targetModel()["bands"]().filter(function (band) { return band.controlType === bandType; }).length === 0;
                };
                ReportActions.prototype._addBand = function (bandType) {
                    if (this._canAddBand(bandType)) {
                        var model = this._targetModel();
                        if (bandType === "SubBand") {
                            model = this._contextModel();
                        }
                        var height = model.root["dpi"]();
                        var control = model.createChild({ "@ControlType": bandType, "@HeightF": height });
                        this.onComponentAdded({ parent: model, model: control });
                    }
                };
                ReportActions.prototype.getActions = function (context) {
                    if (context instanceof ReportViewModel || context instanceof Report.BandViewModel) {
                        this._contextModel(context);
                        return this.actions;
                    }
                    else {
                        this._contextModel(null);
                    }
                    return [];
                };
                return ReportActions;
            })();
            Report.ReportActions = ReportActions;
            Report.paperKind = {
                propertyName: "paperKind", modelName: "@PaperKind", defaultVal: "Letter", displayName: "Paper Kind", localizationId: "DevExpress.XtraReports.UI.XtraReport.PaperKind",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "A2", displayValue: "A2", localizationId: "System.Drawing.Printing.PaperKind.A2" },
                    { value: "A3", displayValue: "A3", localizationId: "System.Drawing.Printing.PaperKind.A3" },
                    { value: "A3Extra", displayValue: "A3Extra", localizationId: "System.Drawing.Printing.PaperKind.A3Extra" },
                    { value: "A3ExtraTransverse", displayValue: "A3ExtraTransverse", localizationId: "System.Drawing.Printing.PaperKind.A3ExtraTransverse" },
                    { value: "A3Rotated", displayValue: "A3Rotated", localizationId: "System.Drawing.Printing.PaperKind.A3Rotated" },
                    { value: "A3Transverse", displayValue: "A3Transverse", localizationId: "System.Drawing.Printing.PaperKind.A3Transverse" },
                    { value: "A4", displayValue: "A4", localizationId: "System.Drawing.Printing.PaperKind.A4" },
                    { value: "A4Extra", displayValue: "A4Extra", localizationId: "System.Drawing.Printing.PaperKind.A4Extra" },
                    { value: "A4Plus", displayValue: "A4Plus", localizationId: "System.Drawing.Printing.PaperKind.A4Plus" },
                    { value: "A4Rotated", displayValue: "A4Rotated", localizationId: "System.Drawing.Printing.PaperKind.A4Rotated" },
                    { value: "A4Small", displayValue: "A4Small", localizationId: "System.Drawing.Printing.PaperKind.A4Small" },
                    { value: "A4Transverse", displayValue: "A4Transverse", localizationId: "System.Drawing.Printing.PaperKind.A4Transverse" },
                    { value: "A5", displayValue: "A5", localizationId: "System.Drawing.Printing.PaperKind.A5" },
                    { value: "A5Extra", displayValue: "A5Extra", localizationId: "System.Drawing.Printing.PaperKind.A5Extra" },
                    { value: "A5Rotated", displayValue: "A5Rotated", localizationId: "System.Drawing.Printing.PaperKind.A5Rotated" },
                    { value: "A5Transverse", displayValue: "A5Transverse", localizationId: "System.Drawing.Printing.PaperKind.A5Transverse" },
                    { value: "A6", displayValue: "A6", localizationId: "System.Drawing.Printing.PaperKind.A6" },
                    { value: "A6Rotated", displayValue: "A6Rotated", localizationId: "System.Drawing.Printing.PaperKind.A6Rotated" },
                    { value: "APlus", displayValue: "APlus", localizationId: "System.Drawing.Printing.PaperKind.APlus" },
                    { value: "B4", displayValue: "B4", localizationId: "System.Drawing.Printing.PaperKind.B4" },
                    { value: "B4Envelope", displayValue: "B4Envelope", localizationId: "System.Drawing.Printing.PaperKind.B4Envelope" },
                    { value: "B4JisRotated", displayValue: "B4JisRotated", localizationId: "System.Drawing.Printing.PaperKind.B4JisRotated" },
                    { value: "B5", displayValue: "B5", localizationId: "System.Drawing.Printing.PaperKind.B5" },
                    { value: "B5Envelope", displayValue: "B5Envelope", localizationId: "System.Drawing.Printing.PaperKind.B5Envelope" },
                    { value: "B5Extra", displayValue: "B5Extra", localizationId: "System.Drawing.Printing.PaperKind.B5Extra" },
                    { value: "B5JisRotated", displayValue: "B5JisRotated", localizationId: "System.Drawing.Printing.PaperKind.B5JisRotated" },
                    { value: "B5Transverse", displayValue: "B5Transverse", localizationId: "System.Drawing.Printing.PaperKind.B5Transverse" },
                    { value: "B6Envelope", displayValue: "B6Envelope", localizationId: "System.Drawing.Printing.PaperKind.B6Envelope" },
                    { value: "B6Jis", displayValue: "B6Jis", localizationId: "System.Drawing.Printing.PaperKind.B6Jis" },
                    { value: "B6JisRotated", displayValue: "B6JisRotated", localizationId: "System.Drawing.Printing.PaperKind.B6JisRotated" },
                    { value: "BPlus", displayValue: "BPlus", localizationId: "System.Drawing.Printing.PaperKind.BPlus" },
                    { value: "C3Envelope", displayValue: "C3Envelope", localizationId: "System.Drawing.Printing.PaperKind.C3Envelope" },
                    { value: "C4Envelope", displayValue: "C4Envelope", localizationId: "System.Drawing.Printing.PaperKind.C4Envelope" },
                    { value: "C5Envelope", displayValue: "C5Envelope", localizationId: "System.Drawing.Printing.PaperKind.C5Envelope" },
                    { value: "C65Envelope", displayValue: "C65Envelope", localizationId: "System.Drawing.Printing.PaperKind.C65Envelope" },
                    { value: "C6Envelope", displayValue: "C6Envelope", localizationId: "System.Drawing.Printing.PaperKind.C6Envelope" },
                    { value: "CSheet", displayValue: "CSheet", localizationId: "System.Drawing.Printing.PaperKind.CSheet" },
                    { value: "Custom", displayValue: "Custom", localizationId: "System.Drawing.Printing.PaperKind.Custom" },
                    { value: "DLEnvelope", displayValue: "DLEnvelope", localizationId: "System.Drawing.Printing.PaperKind.DLEnvelope" },
                    { value: "DSheet", displayValue: "DSheet", localizationId: "System.Drawing.Printing.PaperKind.DSheet" },
                    { value: "ESheet", displayValue: "ESheet", localizationId: "System.Drawing.Printing.PaperKind.ESheet" },
                    { value: "Executive", displayValue: "Executive", localizationId: "System.Drawing.Printing.PaperKind.Executive" },
                    { value: "Folio", displayValue: "Folio", localizationId: "System.Drawing.Printing.PaperKind.Folio" },
                    { value: "GermanLegalFanfold", displayValue: "GermanLegalFanfold", localizationId: "System.Drawing.Printing.PaperKind.GermanLegalFanfold" },
                    { value: "GermanStandardFanfold", displayValue: "GermanStandardFanfold", localizationId: "System.Drawing.Printing.PaperKind.GermanStandardFanfold" },
                    { value: "InviteEnvelope", displayValue: "InviteEnvelope", localizationId: "System.Drawing.Printing.PaperKind.InviteEnvelope" },
                    { value: "IsoB4", displayValue: "IsoB4", localizationId: "System.Drawing.Printing.PaperKind.IsoB4" },
                    { value: "ItalyEnvelope", displayValue: "ItalyEnvelope", localizationId: "System.Drawing.Printing.PaperKind.ItalyEnvelope" },
                    { value: "JapaneseDoublePostcard", displayValue: "JapaneseDoublePostcard", localizationId: "System.Drawing.Printing.PaperKind.JapaneseDoublePostcard" },
                    { value: "JapaneseDoublePostcardRotated", displayValue: "JapaneseDoublePostcardRotated", localizationId: "System.Drawing.Printing.PaperKind.JapaneseDoublePostcardRotated" },
                    { value: "JapanesePostcard", displayValue: "JapanesePostcard", localizationId: "System.Drawing.Printing.PaperKind.JapanesePostcard" },
                    { value: "Ledger", displayValue: "Ledger", localizationId: "System.Drawing.Printing.PaperKind.Ledger" },
                    { value: "Legal", displayValue: "Legal", localizationId: "System.Drawing.Printing.PaperKind.Legal" },
                    { value: "LegalExtra", displayValue: "LegalExtra", localizationId: "System.Drawing.Printing.PaperKind.LegalExtra" },
                    { value: "Letter", displayValue: "Letter", localizationId: "System.Drawing.Printing.PaperKind.Letter" },
                    { value: "LetterExtra", displayValue: "LetterExtra", localizationId: "System.Drawing.Printing.PaperKind.LetterExtra" },
                    { value: "LetterExtraTransverse", displayValue: "LetterExtraTransverse", localizationId: "System.Drawing.Printing.PaperKind.LetterExtraTransverse" },
                    { value: "LetterPlus", displayValue: "LetterPlus", localizationId: "System.Drawing.Printing.PaperKind.LetterPlus" },
                    { value: "LetterRotated", displayValue: "LetterRotated", localizationId: "System.Drawing.Printing.PaperKind.LetterRotated" },
                    { value: "LetterSmall", displayValue: "LetterSmall", localizationId: "System.Drawing.Printing.PaperKind.LetterSmall" },
                    { value: "LetterTransverse", displayValue: "LetterTransverse", localizationId: "System.Drawing.Printing.PaperKind.LetterTransverse" },
                    { value: "MonarchEnvelope", displayValue: "MonarchEnvelope", localizationId: "System.Drawing.Printing.PaperKind.MonarchEnvelope" },
                    { value: "Note", displayValue: "Note", localizationId: "System.Drawing.Printing.PaperKind.Note" },
                    { value: "Number10Envelope", displayValue: "Number10Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number10Envelope" },
                    { value: "Number11Envelope", displayValue: "Number11Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number11Envelope" },
                    { value: "Number12Envelope", displayValue: "Number12Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number12Envelope" },
                    { value: "Number14Envelope", displayValue: "Number14Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number14Envelope" },
                    { value: "Number9Envelope", displayValue: "Number9Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number9Envelope" },
                    { value: "PersonalEnvelope", displayValue: "PersonalEnvelope", localizationId: "System.Drawing.Printing.PaperKind.PersonalEnvelope" },
                    { value: "Prc16K", displayValue: "Prc16K", localizationId: "System.Drawing.Printing.PaperKind.Prc16K" },
                    { value: "Prc16KRotated", displayValue: "Prc16KRotated", localizationId: "System.Drawing.Printing.PaperKind.Prc16KRotated" },
                    { value: "Prc32K", displayValue: "Prc32K", localizationId: "System.Drawing.Printing.PaperKind.Prc32K" },
                    { value: "Prc32KBig", displayValue: "Prc32KBig", localizationId: "System.Drawing.Printing.PaperKind.Prc32KBig" },
                    { value: "Prc32KBigRotated", displayValue: "Prc32KBigRotated", localizationId: "System.Drawing.Printing.PaperKind.Prc32KBigRotated" },
                    { value: "Prc32KRotated", displayValue: "Prc32KRotated", localizationId: "System.Drawing.Printing.PaperKind.Prc32KRotated" },
                    { value: "PrcEnvelopeNumber1", displayValue: "PrcEnvelopeNumber1", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber1" },
                    { value: "PrcEnvelopeNumber10", displayValue: "PrcEnvelopeNumber10", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber10" },
                    { value: "PrcEnvelopeNumber10Rotated", displayValue: "PrcEnvelopeNumber10Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber10Rotated" },
                    { value: "PrcEnvelopeNumber1Rotated", displayValue: "PrcEnvelopeNumber1Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber1Rotated" },
                    { value: "PrcEnvelopeNumber2", displayValue: "PrcEnvelopeNumber2", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber2" },
                    { value: "PrcEnvelopeNumber2Rotated", displayValue: "PrcEnvelopeNumber2Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber2Rotated" },
                    { value: "PrcEnvelopeNumber3", displayValue: "PrcEnvelopeNumber3", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber3" },
                    { value: "PrcEnvelopeNumber3Rotated", displayValue: "PrcEnvelopeNumber3Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber3Rotated" },
                    { value: "PrcEnvelopeNumber4", displayValue: "PrcEnvelopeNumber4", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber4" },
                    { value: "PrcEnvelopeNumber4Rotated", displayValue: "PrcEnvelopeNumber4Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber4Rotated" },
                    { value: "PrcEnvelopeNumber5", displayValue: "PrcEnvelopeNumber5", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber5" },
                    { value: "PrcEnvelopeNumber5Rotated", displayValue: "PrcEnvelopeNumber5Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber5Rotated" },
                    { value: "PrcEnvelopeNumber6", displayValue: "PrcEnvelopeNumber6", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber6" },
                    { value: "PrcEnvelopeNumber6Rotated", displayValue: "PrcEnvelopeNumber6Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber6Rotated" },
                    { value: "PrcEnvelopeNumber7", displayValue: "PrcEnvelopeNumber7", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber7" },
                    { value: "PrcEnvelopeNumber7Rotated", displayValue: "PrcEnvelopeNumber7Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber7Rotated" },
                    { value: "PrcEnvelopeNumber8", displayValue: "PrcEnvelopeNumber8", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber8" },
                    { value: "PrcEnvelopeNumber8Rotated", displayValue: "PrcEnvelopeNumber8Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber8Rotated" },
                    { value: "PrcEnvelopeNumber9", displayValue: "PrcEnvelopeNumber9", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber9" },
                    { value: "PrcEnvelopeNumber9Rotated", displayValue: "PrcEnvelopeNumber9Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber9Rotated" },
                    { value: "Quarto", displayValue: "Quarto", localizationId: "System.Drawing.Printing.PaperKind.Quarto" },
                    { value: "Standard10x11", displayValue: "Standard10x11", localizationId: "System.Drawing.Printing.PaperKind.Standard10x11" },
                    { value: "Standard10x14", displayValue: "Standard10x14", localizationId: "System.Drawing.Printing.PaperKind.Standard10x14" },
                    { value: "Standard11x17", displayValue: "Standard11x17", localizationId: "System.Drawing.Printing.PaperKind.Standard11x17" },
                    { value: "Standard12x11", displayValue: "Standard12x11", localizationId: "System.Drawing.Printing.PaperKind.Standard12x11" },
                    { value: "Standard15x11", displayValue: "Standard15x11", localizationId: "System.Drawing.Printing.PaperKind.Standard15x11" },
                    { value: "Standard9x11", displayValue: "Standard9x11", localizationId: "System.Drawing.Printing.PaperKind.Standard9x11" },
                    { value: "Statement", displayValue: "Statement", localizationId: "System.Drawing.Printing.PaperKind.Statement" },
                    { value: "Tabloid", displayValue: "Tabloid", localizationId: "System.Drawing.Printing.PaperKind.Tabloid" },
                    { value: "TabloidExtra", displayValue: "TabloidExtra", localizationId: "System.Drawing.Printing.PaperKind.TabloidExtra" },
                    { value: "USStandardFanfold", displayValue: "USStandardFanfold", localizationId: "System.Drawing.Printing.PaperKind.USStandardFanfold" }
                ]
            };
            Report.landscape = { propertyName: "landscape", modelName: "@Landscape", displayName: "Landscape", localizationId: "DevExpress.XtraReports.UI.XtraReport.Landscape", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.margins = { propertyName: "margins", modelName: "@Margins", from: Designer.Margins.fromString, displayName: "Margins", localizationId: "DevExpress.XtraReports.UI.XtraReport.Margins", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.pageColor = { propertyName: "pageColor", modelName: "@PageColor", defaultVal: "White", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Page Color", localizationId: "DevExpress.XtraReports.UI.XtraReport.PageColor", editor: Designer.Widgets.editorTemplates.customColorEditor };
            Report.measureUnit = {
                propertyName: "measureUnit",
                modelName: "@ReportUnit", defaultVal: "HundredthsOfAnInch", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Measure Units", localizationId: "DevExpress.XtraReports.UI.XtraReport.ReportUnit", from: Designer.fromEnum,
                valuesArray: [
                    { value: "HundredthsOfAnInch", displayValue: "Hundredths of an Inch", localizationId: "DevExpress.XtraReports.UI.ReportUnit.HundredthsOfAnInch" },
                    { value: "TenthsOfAMillimeter", displayValue: "Tenths of a Millimeter", localizationId: "DevExpress.XtraReports.UI.ReportUnit.TenthsOfAMillimeter" },
                    { value: "Pixels", displayValue: "Pixels", localizationId: "DevExpress.XtraReports.UI.ReportUnit.Pixels" }
                ]
            };
            Report.snapGridSize = { propertyName: "snapGridSize", modelName: "@SnapGridSize", defaultVal: 12.5, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Snap Grid Size", localizationId: "DevExpress.XtraReports.UI.XtraReport.SnapGridSize" };
            Report.drawWatermark = { propertyName: "drawWatermark", modelName: "@DrawWatermark", displayName: "Draw the Watermark", localizationId: "DevExpress.XtraReports.UI.XtraReport.DrawWatermark", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.showPreviewMarginLines = { propertyName: "showPreviewMarginLines", modelName: "@ShowPreviewMarginLines", displayName: "Show Margin Lines in Preview", localizationId: "DevExpress.XtraReports.UI.XtraReport.ShowPreviewMarginLines", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.verticalContentSplitting = {
                propertyName: "verticalContentSplitting",
                modelName: "@VerticalContentSplitting", displayName: "Vertical Content Splitting", localizationId: "DevExpress.XtraReports.UI.XtraReport.VerticalContentSplitting", defaultVal: "Exact", from: Designer.fromEnum,
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "Exact", displayValue: "Exact", localizationId: "DevExpress.XtraPrinting.VerticalContentSplitting.Exact" },
                    { value: "Smart", displayValue: "Smart", localizationId: "DevExpress.XtraPrinting.VerticalContentSplitting.Smart" }
                ]
            };
            Report.reportExportOptionsSerializationInfo = { propertyName: "exportOptions", modelName: "ExportOptions", displayName: "Export Options", localizationId: "DevExpress.XtraReports.UI.XtraReport.ExportOptions", from: Report.ExportOptions.from, toJsonObject: Report.ExportOptions.toJson, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.foreColorWatermark = $.extend({}, Report.foreColor, { defaultVal: "Red" });
            Report.fontWatermark = $.extend({}, Report.font, { defaultVal: "Verdana, 36pt" });
            Report.watermarkSerializationsInfo = [
                Report.fontWatermark, Report.foreColorWatermark,
                { propertyName: "textTransparency", modelName: "@TextTransparency", displayName: "Text Transparency", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.TextTransparency", defaultVal: 50, editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                {
                    propertyName: "text", modelName: "@Text", displayName: "Text", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.Text", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.comboboxEditable,
                    valuesArray: [{ value: "ASAP", displayValue: "ASAP", localizationId: 'PreviewStringId.WMForm_Watermark_Asap' }, { value: "CONFIDENTIAL", displayValue: "CONFIDENTIAL", localizationId: 'PreviewStringId.WMForm_Watermark_Confidential' }, { value: "COPY", displayValue: "COPY", localizationId: 'PreviewStringId.WMForm_Watermark_Copy' }, { value: "DO NOT COPY", displayValue: "DO NOT COPY", localizationId: 'PreviewStringId.WMForm_Watermark_DoNotCopy' }, { value: "DRAFT", displayValue: "DRAFT", localizationId: 'PreviewStringId.WMForm_Watermark_Draft' }, { value: "EVALUATION", displayValue: "EVALUATION", localizationId: 'PreviewStringId.WMForm_Watermark_Evaluation' }, { value: "ORIGINAL", displayValue: "ORIGINAL", localizationId: 'PreviewStringId.WMForm_Watermark_Original' }, { value: "PERSONAL", displayValue: "PERSONAL", localizationId: 'PreviewStringId.WMForm_Watermark_Personal' }, { value: "SAMPLE", displayValue: "SAMPLE", localizationId: 'PreviewStringId.WMForm_Watermark_Sample' }, { value: "TOP SECRET", displayValue: "TOP SECRET", localizationId: 'PreviewStringId.WMForm_Watermark_TopSecret' }, { value: "URGENT", displayValue: "URGENT", localizationId: 'PreviewStringId.WMForm_Watermark_Urgent' }]
                },
                {
                    propertyName: "textDirection", modelName: "@TextDirection", displayName: "Text Direction", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.TextDirection", defaultVal: "ForwardDiagonal", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    valuesArray: [
                        { value: "Horizontal", displayValue: "Horizontal", localizationId: "DevExpress.XtraPrinting.Drawing.DirectionMode.Horizontal" },
                        { value: "ForwardDiagonal", displayValue: "ForwardDiagonal", localizationId: "DevExpress.XtraPrinting.Drawing.DirectionMode.ForwardDiagonal" },
                        { value: "BackwardDiagonal", displayValue: "BackwardDiagonal", localizationId: "DevExpress.XtraPrinting.Drawing.DirectionMode.BackwardDiagonal" },
                        { value: "Vertical", displayValue: "Vertical", localizationId: "DevExpress.XtraPrinting.Drawing.DirectionMode.Vertical" }
                    ]
                },
                { propertyName: "image", modelName: "@Image", displayName: "Image", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.Image", editor: DevExpress.JS.Widgets.editorTemplates.image },
                { propertyName: "imageTransparency", modelName: "@ImageTransparency", displayName: "Image Transparency", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ImageTransparency", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric },
                { propertyName: "imageTiling", modelName: "@ImageTiling", displayName: "Image Tiling", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ImageTiling", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool },
                {
                    propertyName: "imageAlign", modelName: "@ImageAlign", displayName: "Image Alignment", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ImageAlign", defaultVal: "MiddleCenter", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    valuesArray: [
                        { value: "TopLeft", displayValue: "TopLeft", localizationId: "System.Drawing.ContentAlignment.TopLeft" },
                        { value: "TopCenter", displayValue: "TopCenter", localizationId: "System.Drawing.ContentAlignment.TopCenter" },
                        { value: "TopRight", displayValue: "TopRight", localizationId: "System.Drawing.ContentAlignment.TopRight" },
                        { value: "MiddleLeft", displayValue: "MiddleLeft", localizationId: "System.Drawing.ContentAlignment.MiddleLeft" },
                        { value: "MiddleCenter", displayValue: "MiddleCenter", localizationId: "System.Drawing.ContentAlignment.MiddleCenter" },
                        { value: "MiddleRight", displayValue: "MiddleRight", localizationId: "System.Drawing.ContentAlignment.MiddleRight" },
                        { value: "BottomLeft", displayValue: "BottomLeft", localizationId: "System.Drawing.ContentAlignment.BottomLeft" },
                        { value: "BottomCenter", displayValue: "BottomCenter", localizationId: "System.Drawing.ContentAlignment.BottomCenter" },
                        { value: "BottomRight", displayValue: "BottomRight", localizationId: "System.Drawing.ContentAlignment.BottomRight" }
                    ]
                },
                {
                    propertyName: "imageViewMode", modelName: "@ImageViewMode", displayName: "Image View Mode", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ImageViewMode", defaultVal: "Clip", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                        { value: "Clip", displayValue: "Clip", localizationId: "DevExpress.XtraPrinting.Drawing.ImageViewMode.Clip" },
                        { value: "Stretch", displayValue: "Stretch", localizationId: "DevExpress.XtraPrinting.Drawing.ImageViewMode.Stretch" },
                        { value: "Zoom", displayValue: "Zoom", localizationId: "DevExpress.XtraPrinting.Drawing.ImageViewMode.Zoom" }
                    ]
                },
                { propertyName: "pageRange", modelName: "@PageRange", displayName: "Page Range", localizationId: "DevExpress.XtraPrinting.Drawing.Watermark.PageRange", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "showBehind", modelName: "@ShowBehind", defaultVal: true, from: Designer.parseBool, displayName: "Show Behind", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ShowBehind", editor: DevExpress.JS.Widgets.editorTemplates.bool }
            ];
            Report.watermark = { propertyName: "watermark", modelName: "Watermark", displayName: "Watermark", localizationId: "DevExpress.XtraReports.UI.XtraReport.Watermark", info: Report.watermarkSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.rollPaper = { propertyName: "rollPaper", modelName: "@RollPaper", displayName: "Roll Paper", localizationId: "DevExpress.XtraReports.UI.XtraReport.RollPaper", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Report.requestParameters = { propertyName: "requestParameters", modelName: "@RequestParameters", displayName: "Request Parameters", localizationId: "DevExpress.XtraReports.UI.XtraReport.RequestParameters", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Report.formattingRuleSheet = { propertyName: "formattingRuleSheet", modelName: "FormattingRuleSheet", displayName: "Formatting Rule Sheet", localizationId: "DevExpress.XtraReports.UI.XtraReport.FormattingRuleSheet", array: true };
            Report.pageWidth = { propertyName: "pageWidth", modelName: "@PageWidth", displayName: "Page Width", localizationId: "DevExpress.XtraReports.UI.XtraReport.PageWidth", defaultVal: -1, from: Designer.floatFromModel, toJsonObject: Designer.saveAsInt, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Report.pageHeight = { propertyName: "pageHeight", modelName: "@PageHeight", displayName: "Page Height", localizationId: "DevExpress.XtraReports.UI.XtraReport.PageHeight", defaultVal: -1, from: Designer.floatFromModel, toJsonObject: Designer.saveAsInt, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.scriptLanguage = {
                propertyName: "scriptLanguage", modelName: "@ScriptLanguage", displayName: "Script Language", localizationId: "DevExpress.XtraReports.UI.XtraReport.ScriptLanguage", defaultVal: "CSharp", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "CSharp", displayValue: "C#", localizationId: "DevExpress.XtraReports.ScriptLanguage.CSharp" },
                    { value: "VisualBasic", displayValue: "Visual Basic", localizationId: "DevExpress.XtraReports.ScriptLanguage.VisualBasic" },
                    { value: "JScript", displayValue: "JScript", localizationId: "DevExpress.XtraReports.ScriptLanguage.JScript" }
                ]
            };
            Report.scriptReferencesString = { propertyName: "scriptReferencesString", modelName: "@ScriptReferencesString", defaultVal: "", displayName: "Script References", localizationId: "DevExpress.XtraReports.UI.XtraReport.ScriptReferences", editor: DevExpress.JS.Widgets.editorTemplates.stringArray };
            Report.calculatedFields = {
                propertyName: "calculatedFields", modelName: "CalculatedFields", displayName: "Calculated Fields", localizationId: "DevExpress.XtraReports.UI.XtraReport.CalculatedFields", array: true,
                template: "#dxrd-collectionItemWithAccordion",
                editor: Report.editorTemplates.calculatedFields
            };
            Report.parametersInfo = {
                propertyName: "parameters", modelName: "Parameters", displayName: "Parameters", localizationId: "DevExpress.XtraReports.UI.XtraReport.Parameters", array: true,
                template: "#dxrd-collectionItemWithAccordion",
                editor: Report.editorTemplates.parameters
            };
            Report.bookmarkDuplicateSuppress = { propertyName: "bookmarkDuplicateSuppress", modelName: "@BookmarkDuplicateSuppress", displayName: "Bookmark Duplicate Suppress", localizationId: "DevExpress.XtraReports.UI.XtraReport.BookmarkDuplicateSuppress", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            Report.horizontalContentSplitting = {
                propertyName: "horizontalContentSplitting", modelName: "@HorizontalContentSplitting", displayName: "Horizontal Content Splitting", localizationId: "DevExpress.XtraReports.UI.XtraReport.HorizontalContentSplitting", defaultVal: "Exact", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "Exact", displayValue: "Exact", localizationId: "DevExpress.XtraPrinting.HorizontalContentSplitting.Exact" },
                    { value: "Smart", displayValue: "Smart", localizationId: "DevExpress.XtraPrinting.HorizontalContentSplitting.Smart" }
                ]
            };
            Report.reportSerializationInfo = [
                $.extend({}, Report.backColor, { defaultVal: "transparent" }),
                $.extend({}, Report.foreColor, { defaultVal: "Black" }),
                $.extend({}, Report.borderColor, { defaultVal: "Black" }),
                $.extend({}, Report.font, { defaultVal: "Times New Roman, 9pt" }),
                $.extend({}, Report.textAlignment, { defaultVal: "TopLeft" }),
                $.extend({}, Report.borderWidth, { defaultVal: 1 }),
                $.extend({}, Report.borderDashStyle, { defaultVal: "Solid" }),
                $.extend({}, Report.borders, { defaultVal: "None" }),
                { propertyName: "size", visible: false },
                Report.landscape,
                Report.paperKind,
                Report.pageColor,
                Report.bookmark,
                Report.margins, Report.rollPaper, Report.requestParameters,
                Report.measureUnit,
                Report.snapGridSize,
                Report.drawWatermark,
                Report.watermark,
                Report.displayName, Report.verticalContentSplitting, Report.showPreviewMarginLines,
                Report.calculatedFields,
                { propertyName: "scriptsSource", modelName: "@ScriptsSource" },
                Report.pageWidth,
                Report.pageHeight,
                {
                    propertyName: "bands",
                    modelName: "Bands",
                    array: true
                },
                { propertyName: "crossBandControls", modelName: "CrossBandControls", array: true },
                { propertyName: "styles", modelName: "StyleSheet", array: true },
                { propertyName: "objectStorage", modelName: "ObjectStorage", array: true },
                { propertyName: "componentStorage", modelName: "ComponentStorage", array: true },
                { propertyName: "extensions", modelName: "Extensions", array: true },
                Report.formattingRuleSheet,
                Report.formattingRuleLinks,
                Report.parametersInfo,
                { propertyName: "version", modelName: "@Version" },
                Report.reportExportOptionsSerializationInfo, Report.reportScripts, Report.scriptLanguage, Report.scriptReferencesString,
                Report.rtlReport, Report.rtlLayout, Report.bookmarkDuplicateSuppress, Report.horizontalContentSplitting
            ].concat(Report.baseControlProperties, Report.datasourcePrintOptionsGroup, Report.paddingGroup);
            Report.popularPropertiesReport = ["dataSource", "dataMember", "filterString", "measureUnit"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var bandsWeight = {
                "TopMarginBand": 100,
                "ReportHeaderBand": 200,
                "PageHeaderBand": 300,
                "GroupHeaderBand": 400,
                "DetailBand": 500,
                "VerticalHeaderBand": 500,
                "VerticalDetailBand": 600,
                "VerticalTotalBand": 700,
                "DetailReportBand": 800,
                "GroupFooterBand": 900,
                "ReportFooterBand": 1000,
                "PageFooterBand": 1100,
                "BottomMarginBand": 1200
            };
            var MultiColumn = (function (_super) {
                __extends(MultiColumn, _super);
                function MultiColumn(model, pageWidth, margins, serializer) {
                    var _this = this;
                    _super.call(this, model || {}, serializer, multiColumnSerializationsInfo);
                    this.grayAreaWidth = ko.observable(0);
                    this._disposables.push(this.realColumnWidth = ko.pureComputed(function () {
                        var bandWidth = pageWidth() - margins.left(), result = bandWidth;
                        _this.grayAreaWidth(0);
                        if (_this.mode() === "UseColumnWidth") {
                            if (_this.columnWidth() > bandWidth - margins.right()) {
                                _this.grayAreaWidth(margins.right());
                                result = bandWidth - margins.right() - _this.columnSpacing();
                            }
                            else if (_this.columnWidth() > 0) {
                                _this.grayAreaWidth(bandWidth - _this.columnWidth() - _this.columnSpacing());
                                result = _this.columnWidth();
                            }
                        }
                        else if (_this.mode() === "UseColumnCount" && _this.columnCount() > 1) {
                            result = (bandWidth - margins.right()) / _this.columnCount() - _this.columnSpacing() / 2;
                            _this.grayAreaWidth(bandWidth - result - _this.columnSpacing());
                        }
                        return result;
                    }));
                    this._disposables.push(this.columnWidth.subscribe(function (newVal) { _this.mode("UseColumnWidth"); }));
                    this._disposables.push(this.columnCount.subscribe(function (newVal) { _this.mode("UseColumnCount"); }));
                }
                MultiColumn.unitProperties = ["columnWidth", "columnSpacing"];
                return MultiColumn;
            })(Designer.SerializableModel);
            Report.MultiColumn = MultiColumn;
            var BandViewModel = (function (_super) {
                __extends(BandViewModel, _super);
                function BandViewModel(band, parent, serializer) {
                    var _this = this;
                    _super.call(this, band, parent, serializer);
                    this.preInit(band, parent, serializer);
                    this.createChildsArray(band, serializer);
                    this.initHeight();
                    this.size.height = this.height;
                    if (this.level) {
                        this._level = ko.observable(this.level.peek());
                        this._disposables.push(this.level = ko.pureComputed({
                            read: function () { return _this._level(); },
                            write: function (newVal) {
                                var parentBands = _this.parentModel() && _this.parentModel().bands;
                                var groupArray = BandViewModel.generateArray(parentBands(), _this.controlType, newVal);
                                var target = groupArray[newVal];
                                groupArray.splice(newVal, 0, groupArray.splice(_this._level(), 1)[0]);
                                _this._level(newVal);
                                if (!!target) {
                                    for (var i = newVal + 1; i < groupArray.length; i++) {
                                        if (!groupArray[i] || groupArray[i]._level() === i)
                                            break;
                                        groupArray[i]._level(i);
                                    }
                                    for (var i = newVal - 1; i >= 0; i--) {
                                        if (!groupArray[i] || groupArray[i]._level() === i)
                                            break;
                                        groupArray[i]._level(i);
                                    }
                                }
                                BandViewModel.replaceArrays((_this.controlType === "GroupHeaderBand" ? groupArray.reverse() : groupArray).filter(function (x) { return !!x; }), parentBands, _this);
                            }
                        }));
                    }
                    var stylesObject = Report.createObjectFromInfo(this, Report.stylesInfo);
                    ;
                    if (stylesObject) {
                        this[Report.stylesObj.propertyName] = stylesObject;
                    }
                }
                BandViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.bands);
                    this.disposeObservableArray(this.controls);
                    this.resetObservableArray(this.bands);
                    this.resetObservableArray(this.controls);
                };
                BandViewModel.initLevels = function (bands) {
                    ["GroupHeaderBand", "GroupFooterBand", "DetailReportBand"].map(function (type) {
                        return type === "GroupHeaderBand" ?
                            bands.filter(function (b) { return b.controlType === type; }).sort(Report.sortBands).reverse() :
                            bands.filter(function (b) { return b.controlType === type; }).sort(Report.sortBands);
                    }).forEach(function (items) {
                        for (var i = 0; i < items.length; i++) {
                            if (items[i]._level() === 0) {
                                items[i]._level(i);
                            }
                        }
                    });
                };
                BandViewModel.generateArray = function (allbands, controlType, newLevel) {
                    var array = allbands.filter(function (x) { return x.controlType === controlType; });
                    newLevel = newLevel || array.length - 1;
                    array = controlType === "GroupHeaderBand" ? array.reverse() : array;
                    var length = (array.length > 0 && array[array.length - 1].level() > newLevel ? array[array.length - 1].level() : newLevel) + 1;
                    var j = 0;
                    var fakeArray = [];
                    for (var i = 0; i < length; i++) {
                        if (j < array.length && array[j]._level() === i) {
                            fakeArray.push(array[j]);
                            j++;
                        }
                        else {
                            fakeArray.push(undefined);
                        }
                    }
                    return fakeArray;
                };
                BandViewModel.replaceArrays = function (newArray, target, band) {
                    if (newArray.length > 0) {
                        var currentArray = target().filter(function (b) { return b.controlType === band.controlType; });
                        var inc = target().indexOf(currentArray[0]);
                        var from = currentArray.indexOf(band);
                        var to = newArray.indexOf(band);
                        target.splice(to + inc, 0, target.splice(inc + from, 1)[0]);
                    }
                };
                BandViewModel.prototype.createChildsArray = function (band, serializer) {
                    var _this = this;
                    var subBands = [];
                    if (band.SubBands) {
                        for (var key in band.SubBands) {
                            subBands.push(new Report.SubBandViewModel(band.SubBands[key], this, serializer));
                        }
                    }
                    this.bands = ko.observableArray(subBands);
                    this.controls = Designer.deserializeChildArray(band.Controls, this, function (control) { return _this.createControl(control, serializer); });
                };
                BandViewModel.prototype.initHeight = function () {
                    var _this = this;
                    var _heightFromControls = 0;
                    this._disposables.push(this.heightFromControls = ko.pureComputed(function () {
                        _heightFromControls = 0;
                        if (Designer.checkModelReady(_this.root)) {
                            for (var i = 0; i < _this.controls().length; i++) {
                                if (!_this.controls()[i].update()) {
                                    var controlY = _this.controls()[i].anchorVertical && _this.controls()[i].anchorVertical() === "Bottom" && _this.controls()[i].vertAnchoring.state !== Report.Anchoring.states.fromControls ? 0 : _this.controls()[i].location.y(), controlHeight = _this.controls()[i].anchorVertical && _this.controls()[i].anchorVertical() === "Both" && _this.controls()[i].vertAnchoring.state !== Report.Anchoring.states.fromControls ? 1 : _this.controls()[i].size.height(), controlBottom = controlY + controlHeight;
                                    if (controlBottom > _heightFromControls) {
                                        _heightFromControls = controlBottom;
                                    }
                                }
                            }
                            ;
                            _heightFromControls = Math.round(_heightFromControls * 100) / 100;
                            _this.height(Math.max(_heightFromControls, _this.height()));
                            _heightFromControls = _heightFromControls > 0 ? _heightFromControls : 0;
                        }
                        return _heightFromControls;
                    }));
                };
                BandViewModel.prototype.preInit = function (band, parent, serializer) {
                };
                BandViewModel.prototype.addChild = function (control) {
                    if (control instanceof Report.SubBandViewModel) {
                        this.bands.push(control);
                    }
                    else {
                        _super.prototype.addChild.call(this, control);
                    }
                };
                BandViewModel.prototype.getPath = function (propertyName) {
                    if (propertyName === "dataMember") {
                        return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this["dataSource"]());
                    }
                    else if (propertyName === "groupFields") {
                        return Designer.getFullPath(this.parentModel()["getPath"]("dataMember"), this.parentModel()["dataMember"]());
                    }
                    return _super.prototype.getPath.call(this, propertyName);
                };
                BandViewModel.prototype.initSize = function () {
                    var _this = this;
                    this.size.height = this.height;
                    this._disposables.push(this.size.width = ko.computed({
                        read: function () {
                            return _this.root.size.width() - (_this.root["margins"] ? ((_this.root["margins"].left && _this.root["margins"].left()) + (_this.root["margins"].right && _this.root["margins"].right())) : 0);
                        }, write: function (newVal) { return void 0; }
                    }));
                    this.size.isPropertyDisabled = function (name) { return name === "width" || name === "height" && ko.unwrap(DevExpress.Designer.Report.controlsFactory.getPropertyInfo("DetailBand", "Height").disabled); };
                    this.size.isPropertyVisible = function (name) { return name !== "height" || ko.unwrap(DevExpress.Designer.Report.controlsFactory.getPropertyInfo("DetailBand", "Height").visible) !== false; };
                };
                BandViewModel.prototype.initialize = function () {
                    _super.prototype.initialize.call(this);
                    this.initSize();
                };
                BandViewModel.prototype.removeChild = function (control) {
                    if (control instanceof BandViewModel) {
                        if (this.bands().indexOf(control) !== -1) {
                            this.bands.splice(this.bands().indexOf(control), 1);
                        }
                    }
                    else {
                        _super.prototype.removeChild.call(this, control);
                    }
                };
                BandViewModel.isReorderingBand = function (control) {
                    return ["GroupHeaderBand", "GroupFooterBand", "DetailReportBand"].indexOf(control.controlType) > -1;
                };
                BandViewModel.insertBand = function (bands, newBand) {
                    if (newBand.controlType === "GroupHeaderBand" || newBand.controlType === "GroupFooterBand" || newBand.controlType === "DetailReportBand") {
                        var array = BandViewModel.generateArray(bands(), newBand.controlType);
                        var level = array.length;
                        for (var i = 0; i < array.length; i++) {
                            if (!array[i]) {
                                level = i;
                                break;
                            }
                        }
                        newBand._level(level);
                    }
                    BandViewModel.insertBandSorted(bands, newBand);
                };
                BandViewModel.insertBandSorted = function (bands, newBand) {
                    if (newBand) {
                        var cloneBands = bands().slice(0);
                        var previousBandIndex = bands().indexOf(newBand);
                        if (previousBandIndex === -1) {
                            cloneBands.push(newBand);
                        }
                        cloneBands.sort(Report.sortBands);
                        var index = cloneBands.indexOf(newBand);
                        if (previousBandIndex !== -1) {
                            bands.splice(previousBandIndex, 1);
                        }
                        bands.splice(index, 0, newBand);
                    }
                };
                BandViewModel.prototype.isPropertyDisabled = function (name) {
                    if (name === "dataMember" && this["dataSource"]) {
                        return this["dataSource"]() === null;
                    }
                    else {
                        _super.prototype.isPropertyDisabled.call(this, name);
                    }
                };
                BandViewModel.getBandWeight = function (band) {
                    if (band.controlType === "GroupHeaderBand") {
                        return bandsWeight[band.controlType] - (band["level"]() || 0);
                    }
                    if (band.controlType === "GroupFooterBand") {
                        return bandsWeight[band.controlType] + (band["level"]() || 0);
                    }
                    if (band.controlType === "DetailReportBand") {
                        return bandsWeight[band.controlType] + (band["level"]() || -1);
                    }
                    return bandsWeight[band.controlType];
                };
                return BandViewModel;
            })(Report.ReportElementViewModel);
            Report.BandViewModel = BandViewModel;
            var BandSurface = (function (_super) {
                __extends(BandSurface, _super);
                function BandSurface(band, context, unitProperties) {
                    var _this = this;
                    if (unitProperties === void 0) { unitProperties = BandSurface._unitProperties; }
                    _super.call(this, band, context, unitProperties);
                    this.isSomeParentCollapsed = ko.observable(false);
                    this._resize = function (delta, oldDelta) {
                        _this._height(_this._height() + delta - oldDelta);
                        return delta;
                    };
                    this.showMarker = true;
                    this.templateName = "dxrd-band";
                    this.selectionTemplate = "dxrd-band-selection";
                    this.vrulerTemplate = "dxrd-band-vruler";
                    this.contentSelectionTemplate = "dxrd-bandselection-content";
                    this.leftMarginTemplate = "dxrd-band-coordinate-grid";
                    this.leftMarginSelectionTemplate = "dxrd-band-coordinate-grid-selection";
                    this.allowMultiselect = false;
                    this.markerWidth = ko.observable(BandSurface.collapsedHeight);
                    this.collapsed = ko.observable(false);
                    this._disposables.push(ko.computed(function () {
                        _this._width(context.pageWidth() - context.margins.left());
                    }));
                    this._disposables.push(this.collapsed = ko.pureComputed({
                        read: function () {
                            return !band.expanded();
                        },
                        write: function (newVal) {
                            band.expanded(!newVal);
                        }
                    }));
                    this._disposables.push(this._totalHeight = ko.pureComputed(function () { return _this.getTotalHeight(); }));
                    this.name = band.name;
                    var subBandsHeight = 0;
                    this._disposables.push(this.subBandsHeight = ko.pureComputed(function () { return _this.bandsHolder.getHeight(); }));
                    this._disposables.push(this.heightWithoutSubBands = ko.pureComputed(function () {
                        return _this.height() - _this.subBandsHeight();
                    }));
                    this._disposables.push(this.height = ko.pureComputed(function () { return _this.getHeight(); }));
                    this.createChildCollection(band);
                    this.createUnderCursor();
                    this._disposables.push(this.hasOwnRuler = ko.pureComputed(function () { return _this.getHasOwnRuler(); }));
                    this._disposables.push(this.rulerHeight = ko.pureComputed(function () {
                        return _this.collapsed() ? BandSurface.collapsedHeight : (_this.heightWithoutSubBands());
                    }));
                    var root = this.getControlModel().root;
                    var nearMarginWidth = function () { return root.margins.right() + root.margins.left(); };
                    this.coordinateGridOptions = {
                        left: ko.pureComputed(function () {
                            return _this.rtlLayout() ? _this._context.margins.right() : 0;
                        }),
                        height: this.getControlModel().height,
                        snapGridSize: root.snapGridSize,
                        zoom: context.zoom,
                        measureUnit: context.measureUnit,
                        width: ko.pureComputed(function () {
                            return root.pageWidth() - nearMarginWidth();
                        }),
                        flip: context.rtl
                    };
                    var oldDelta = 0;
                    this["resize"] = function (params) {
                        oldDelta = _this._resize(params.delta.dh, oldDelta);
                    };
                    this["resizeTheBand"] = function (params) {
                        oldDelta = _this._resize(params.delta.dh, oldDelta);
                    };
                    this["stopResize"] = function () {
                        oldDelta = 0;
                    };
                    this._disposables.push(this["markerClass"] = ko.pureComputed(function () {
                        var cssClass = "dxrd-band-marker-body";
                        if (band.controlType.toLowerCase().indexOf("header") !== -1 || band.controlType === "TopMarginBand") {
                            cssClass = "dxrd-band-marker-header";
                        }
                        else if (band.controlType.toLowerCase().indexOf("footer") !== -1 || band.controlType === "BottomMarginBand") {
                            cssClass = "dxrd-band-marker-footer";
                        }
                        if (_this.focused()) {
                            return cssClass += "-focused";
                        }
                        return cssClass;
                    }));
                    this._disposables.push(this["leftMargin"] = ko.pureComputed(function () {
                        return 0 - (context["margins"] && context.margins.left() || 0) + 10;
                    }));
                    this._disposables.push(this.canResize = ko.computed(function () {
                        return _this.selected() && !_this.locked && !_this.collapsed() && !Designer.DragDropHandler.started();
                    }));
                    this._disposables.push(this.minHeight = ko.computed(function () {
                        var minHeight = (_this.heightFromControls && _this.heightFromControls() || 0) + _this.subBandsHeight();
                        return minHeight || 1;
                    }));
                    this.getUsefulRect = function () {
                        var usefulWidth = _this.rect().width;
                        var margins = _this.getControlModel().root["margins"];
                        if (_this["grayAreaWidth"] && _this["grayAreaWidth"]()) {
                            usefulWidth -= _this["grayAreaWidth"]() + (_this["columnSpacing"] && _this["columnSpacing"]() || 0);
                        }
                        else {
                            usefulWidth -= _this._getMarginWidth(margins, _this._context.rtl());
                        }
                        if (_this.rtlLayout()) {
                            var nearMarginWidth = _this._getMarginWidth(margins, _this._context.rtl(), false);
                            var left = _this.container().rect().width - usefulWidth - nearMarginWidth;
                            return { top: 0, left: left, right: usefulWidth + nearMarginWidth, bottom: _this.height(), width: usefulWidth, height: _this.height() };
                        }
                        else {
                            return { top: 0, left: 0, right: usefulWidth, bottom: _this.height(), width: usefulWidth, height: _this.height() };
                        }
                    };
                    this._disposables.push(this.backgroundRect = ko.pureComputed(function () { return _this.getBackgroundRect(); }));
                }
                BandSurface.prototype._getMarginWidth = function (margins, rtl, isFarMargin) {
                    if (isFarMargin === void 0) { isFarMargin = true; }
                    var marginWidht = margins ? (isFarMargin && this._context.rtl() ? margins.left && margins.left() : margins.right && margins.right()) || 0 : 0;
                    return Designer.unitsToPixel(marginWidht, this._context.measureUnit(), this._context.zoom());
                };
                BandSurface.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.controls);
                    this.resetObservableArray(this.controls);
                };
                BandSurface.prototype.createChildCollection = function (band) {
                    this._disposables.push(this.bandsHolder = new Report.BandsHolder(this));
                    this.bandsHolder.initialize(band.bands);
                };
                BandSurface.prototype.createUnderCursor = function () {
                    var _this = this;
                    var _underCursor = ko.observable(new Designer.HoverInfo());
                    this._disposables.push(this.underCursor = ko.pureComputed({
                        read: function () {
                            _underCursor().isOver = _underCursor().x > _this._context.margins.left();
                            return _underCursor();
                        },
                        write: function (val) { _underCursor(val); }
                    }));
                };
                BandSurface.prototype.getTotalHeight = function () {
                    return this._height() + this.bandsHolder.getTotalHeight();
                };
                BandSurface.prototype.getHeight = function () {
                    if (this.collapsed())
                        return BandSurface.collapsedHeight;
                    else
                        return this._height() + this.subBandsHeight();
                };
                BandSurface.prototype.getHasOwnRuler = function () {
                    return true;
                };
                BandSurface.prototype.getBackgroundRect = function () {
                    var top = 0, bottom, height = this._height();
                    var parent = this.parent;
                    if (!parent) {
                        return { top: top, bottom: bottom, height: height };
                    }
                    var parentBands = ko.unwrap(parent.bandsHolder.bands);
                    var parentBackgroundRect = ko.unwrap(parent.backgroundRect);
                    if (parentBackgroundRect) {
                        top += parentBackgroundRect.top;
                        bottom = parentBackgroundRect.bottom;
                    }
                    else {
                        var pageHeight = parent.pageHeight();
                        var bottomMargin = parent.margins.bottom();
                        var footer = parentBands.filter(function (x) { return x._control.controlType === "PageFooterBand"; })[0];
                        bottom = pageHeight - bottomMargin;
                        if (footer)
                            bottom -= footer._totalHeight();
                    }
                    var bandIndex = parentBands.indexOf(this);
                    if (parent.bandsHolder.verticalBandsContainer.visible && parent.bandsHolder.verticalBandsContainer.bandPosition() <= bandIndex) {
                        top += parent.bandsHolder.verticalBandsContainer._height();
                    }
                    for (var i = 0; i < bandIndex; i++) {
                        top += parentBands[i]._totalHeight();
                    }
                    if (top > bottom)
                        height = 0;
                    else if (top + height > bottom)
                        height = bottom - top;
                    return { top: top, bottom: bottom, height: height };
                };
                BandSurface.prototype.getAbsolutePositionY = function () {
                    return this.parent.bandsHolder.getBandAbsolutePositionY(this);
                };
                BandSurface.prototype.updateAbsolutePosition = function () {
                    if (!this.parent)
                        return;
                    var newY = 0;
                    var parent = this.parent;
                    this.absolutePosition.x(0);
                    if (ko.unwrap(parent["collapsed"])) {
                        this.absolutePosition.y(parent["absolutePosition"].y());
                        return;
                    }
                    this.absolutePosition.y(this.getAbsolutePositionY());
                };
                BandSurface.prototype.markerClick = function (selection) {
                    if (selection.expectClick) {
                        selection.expectClick = false;
                        return;
                    }
                    if (!this.focused()) {
                        selection.initialize(this);
                    }
                    else {
                        this.collapsed(!this.collapsed());
                    }
                };
                BandSurface.prototype.canDrop = function () { return _super.prototype.canDrop.call(this) && !this.collapsed(); };
                Object.defineProperty(BandSurface.prototype, "zoom", {
                    get: function () { return this.getRoot().zoom; },
                    enumerable: true,
                    configurable: true
                });
                BandSurface.prototype.checkParent = function (surfaceParent) {
                    return false;
                };
                BandSurface.collapsedHeight = 27;
                BandSurface._unitProperties = {
                    _height: function (o) { return o.height; },
                    heightFromControls: function (o) { return o.heightFromControls; }
                };
                return BandSurface;
            })(Designer.SurfaceElementBase);
            Report.BandSurface = BandSurface;
            var multiColumnSerializationsInfo = [
                { propertyName: "columnCount", modelName: "@ColumnCount", displayName: "Column Count", localizationId: "DevExpress.XtraReports.UI.MultiColumn.ColumnCount", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric, from: Designer.floatFromModel },
                { propertyName: "columnWidth", modelName: "@ColumnWidth", displayName: "Column Width", localizationId: "DevExpress.XtraReports.UI.MultiColumn.ColumnWidth", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric, from: Designer.floatFromModel },
                { propertyName: "columnSpacing", modelName: "@ColumnSpacing", displayName: "Column Spacing", localizationId: "DevExpress.XtraReports.UI.MultiColumn.ColumnSpacing", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric, from: Designer.floatFromModel },
                {
                    propertyName: "layout", modelName: "@Layout", displayName: "Layout", localizationId: "DevExpress.XtraReports.UI.MultiColumn.Layout", defaultVal: "DownThenAcross", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                        { value: "DownThenAcross", displayValue: "DownThenAcross", localizationId: "DevExpress.XtraPrinting.ColumnLayout.DownThenAcross" },
                        { value: "AcrossThenDown", displayValue: "AcrossThenDown", localizationId: "DevExpress.XtraPrinting.ColumnLayout.AcrossThenDown" }
                    ]
                }, {
                    propertyName: "mode", modelName: "@Mode", displayName: "Mode", localizationId: "DevExpress.XtraReports.UI.MultiColumn.Mode", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                        { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.MultiColumnMode.None" },
                        { value: "UseColumnCount", displayValue: "UseColumnCount", localizationId: "DevExpress.XtraReports.UI.MultiColumnMode.UseColumnCount" },
                        { value: "UseColumnWidth", displayValue: "UseColumnWidth", localizationId: "DevExpress.XtraReports.UI.MultiColumnMode.UseColumnWidth" }
                    ]
                }
            ];
            Report.multiColumn = { propertyName: "multiColumn", modelName: "MultiColumn", displayName: "Multi-Column Options", localizationId: "DevExpress.XtraReports.UI.DetailBand.MultiColumn", info: multiColumnSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.expanded = { propertyName: "expanded", modelName: "@Expanded", from: Designer.parseBool, defaultVal: true };
            Report.groupFields = {
                propertyName: "groupFields",
                modelName: "GroupFields", displayName: "Group Fields", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.GroupFields", array: true, editor: DevExpress.JS.Widgets.editorTemplates.commonCollection,
                addHandler: DevExpress.Designer.Report.GroupFieldModel.createNew, template: '#dxrd-collection-item-group',
                getChildCaption: function (index) {
                    if (index === 0)
                        return DevExpress.Designer.getLocalization('Group By', 'DataAccessUIStringId.QueryBuilderColumns_GroupBy');
                    return DevExpress.Designer.getLocalization('Then By', 'ASPxReportsStringId.ReportDesigner_SortFields_ThenBy');
                }
            };
            Report.drillDownDetailReportExpanded = { propertyName: "drillDownDetailReportExpanded", modelName: "@DrillDownExpanded", displayName: "Drill-Down Expanded", localizationId: "DevExpress.XtraReports.UI.Band.DrillDownExpanded", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, defaultVal: true }, Report.drillDownControl = { propertyName: "drillDownControl", modelName: "@DrillDownControl", displayName: "Drill-Down Control", localizationId: "DevExpress.XtraReports.UI.Band.DrillDownControl", link: true, defaultVal: null, editor: Report.editorTemplates.drillDownControls };
            Report.sortFields = {
                propertyName: "sortFields",
                modelName: "SortFields", displayName: "Sort Fields", localizationId: "DevExpress.XtraReports.UI.DetailBand.SortFields", array: true, editor: DevExpress.JS.Widgets.editorTemplates.commonCollection,
                addHandler: DevExpress.Designer.Report.GroupFieldModel.createNew, template: '#dxrd-collection-item-group',
                getChildCaption: function (index) {
                    if (index === 0)
                        return DevExpress.Designer.getLocalization('Sort By', 'ASPxReportsStringId.ReportDesigner_SortFields_SortBy');
                    return DevExpress.Designer.getLocalization('Then By', 'ASPxReportsStringId.ReportDesigner_SortFields_ThenBy');
                }
            };
            Report.groupUnion = {
                propertyName: "groupUnion",
                modelName: "@GroupUnion", displayName: "Group Union", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.GroupUnion", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "None", from: Designer.fromEnum,
                valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.GroupUnion.None" },
                    { value: "WholePage", displayValue: "Whole Page", localizationId: "DevExpress.XtraReports.UI.GroupUnion.WholePage" },
                    { value: "WithFirstDetail", displayValue: "With First Detail", localizationId: "DevExpress.XtraReports.UI.GroupUnion.WithFirstDetail" }
                ]
            };
            Report.groupFooterUnion = {
                propertyName: "groupFooterUnion",
                modelName: "@GroupUnion", displayName: "Group Union", localizationId: "DevExpress.XtraReports.UI.GroupFooterBand.GroupUnion", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "None", from: Designer.fromEnum,
                valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.GroupFooterUnion.None" },
                    { value: "WithLastDetail", displayValue: "With Last Detail", localizationId: "DevExpress.XtraReports.UI.GroupFooterUnion.WithLastDetail" }
                ]
            };
            Report.printAtBottom = { propertyName: "printAtBottom", modelName: "@PrintAtBottom", defaultVal: false, from: Designer.parseBool, displayName: "Print at Bottom", localizationId: "DevExpress.XtraReports.UI.ReportFooterBand.PrintAtBottom", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.printOn = {
                propertyName: "printOn",
                modelName: "@PrintOn", displayName: "Print On", localizationId: "DevExpress.XtraReports.UI.PageBand.PrintOn", defaultVal: "AllPages",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "AllPages", displayValue: "All Pages", localizationId: "DevExpress.XtraReports.UI.PrintOnPages.AllPages" },
                    { value: "NotWithReportHeader", displayValue: "Not with Report Header", localizationId: "DevExpress.XtraReports.UI.PrintOnPages.NotWithReportHeader" },
                    { value: "NotWithReportFooter", displayValue: "Not with Report Footer", localizationId: "DevExpress.XtraReports.UI.PrintOnPages.NotWithReportFooter" },
                    { value: "NotWithReportHeaderAndReportFooter", displayValue: "Not with Report Header and Report Footer", localizationId: "DevExpress.XtraReports.UI.PrintOnPages.NotWithReportHeaderAndReportFooter" }
                ]
            };
            Report.level = { propertyName: "level", modelName: "@Level", displayName: "Level", localizationId: "DevExpress.XtraReports.UI.GroupBand.Level", defaultVal: 0, from: Designer.floatFromModel, editor: Report.editorTemplates.numericUndo };
            Report.repeatEveryPage = { propertyName: "repeatEveryPage", modelName: "@RepeatEveryPage", displayName: "Repeat Every Page", localizationId: "DevExpress.XtraReports.UI.GroupBand.RepeatEveryPage", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.pageBreak = {
                propertyName: "pageBreak",
                modelName: "@PageBreak", displayName: "Page Break", localizationId: "DevExpress.XtraReports.UI.Band.PageBreak", defaultVal: "None", from: Designer.fromEnum,
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.PageBreak.None" },
                    { value: "BeforeBand", displayValue: "Before the Band", localizationId: "DevExpress.XtraReports.UI.PageBreak.BeforeBand" },
                    { value: "BeforeBandExceptFirstEntry", displayValue: "Before the Band, Except for the First Entry", localizationId: "DevExpress.XtraReports.UI.PageBreak.BeforeBandExceptFirstEntry" },
                    { value: "AfterBand", displayValue: "After the Band", localizationId: "DevExpress.XtraReports.UI.PageBreak.AfterBand" },
                    { value: "AfterBandExceptLastEntry", displayValue: "After the Band, Except for the Last Entry", localizationId: "DevExpress.XtraReports.UI.PageBreak.AfterBandExceptLastEntry" }
                ]
            };
            Report.keepTogetherWithDetailReports = { propertyName: "keepTogetherWithDetailReports", modelName: "@KeepTogetherWithDetailReports", defaultVal: false, from: Designer.parseBool, displayName: "Keep Together with Detail Reports", localizationId: "DevExpress.XtraReports.UI.DetailBand.KeepTogetherWithDetailReports", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.height = { propertyName: "height", modelName: "@HeightF", defaultVal: 100, displayName: "Height", localizationId: "DevExpress.XtraReports.UI.Band.Height", from: Designer.floatFromModel };
            Report.commonBandSerializationInfo = [
                Report.textAlignment, Report.expanded,
                { propertyName: "controls", modelName: "Controls", array: true },
                { propertyName: "bands", modelName: "SubBands", array: true },
            ].concat(Report.commonBandProperties, Report.fontGroup);
            Report.bandSerializationInfo = [
                Report.styleName, Report.stylesObj, Report.stylePriority, Report.height,
            ].concat(Report.commonBandSerializationInfo);
            Report.detailReportBandSerializationInfo = [
                Report.level, Report.height, Report.pageBreak, Report.detailReportBandScripts,
                Report.keepTogetherDefaultValueFalse,
                Report.drillDownDetailReportExpanded,
                Report.drillDownControl,
                Report.keepTogetherWithDetailReports
            ].concat(Report.commonBandSerializationInfo, Report.datasourcePrintOptionsGroup).filter(function (x) { return x.propertyName !== "bands"; }).concat([{
                    propertyName: "bands",
                    modelName: "Bands",
                    array: true
                }]);
            Report.detailBandSerializationInfo = [
                Report.evenStyleName, Report.oddStyleName,
                Report.keepTogetherDefaultValueFalse,
                Report.drillDownDetailReportExpanded,
                Report.drillDownControl,
                Report.keepTogetherWithDetailReports, Report.sortFields, Report.pageBreak, Report.commonBandScripts
            ].concat(Report.bandSerializationInfo);
            Report.reportHeaderBandSerializationInfo = [Report.keepTogetherDefaultValueFalse, Report.pageBreak, Report.commonBandScripts].concat(Report.bandSerializationInfo);
            Report.reportFooterBandSerializationInfo = [Report.printAtBottom].concat(Report.reportHeaderBandSerializationInfo);
            Report.pageBandSerializationInfo = [Report.printOn, Report.commonBandScripts].concat(Report.bandSerializationInfo);
            var groupBand = [Report.keepTogetherDefaultValueFalse, Report.level, Report.pageBreak, Report.repeatEveryPage].concat(Report.bandSerializationInfo);
            var sortingSummarySerializationsInfo = [
                { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.Enabled", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool },
                {
                    propertyName: "Function", modelName: "@Function", displayName: "Function", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.Function", defaultVal: "Sum", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    valuesArray: Report.summaryFunctionValues
                },
                { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.FieldName", defaultVal: "", editor: Designer.Widgets.editorTemplates.field },
                { propertyName: "ignoreNullValues", modelName: "@IgnoreNullValues", displayName: "Ignore Null Values", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.IgnoreNullValues", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool },
                {
                    propertyName: "sortOrder", modelName: "@SortOrder", displayName: "SortOrder", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.SortOrder", defaultVal: "Ascending", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    valuesArray: [
                        { value: "Ascending", displayValue: "Ascending", localizationId: "DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending" },
                        { value: "Descending", displayValue: "Descending", localizationId: "DevExpress.XtraReports.UI.XRColumnSortOrder.Descending" }
                    ]
                },
            ];
            Report.sortingSummary = { propertyName: "sortingSummary", modelName: "SortingSummary", displayName: "Sorting Summary", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.SortingSummary", info: sortingSummarySerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.groupHeaderBandSerializationInfo = [Report.groupFields, Report.groupUnion, Report.sortingSummary, Report.drillDownDetailReportExpanded,
                Report.drillDownControl, Report.groupHeaderBandScripts].concat(groupBand);
            Report.groupFooterBandSerializationInfo = [Report.groupFooterUnion, Report.printAtBottom, Report.groupBandScripts].concat(groupBand);
            Report.popularPropertiesReportHeader = ["pageBreak", "keepTogether"], Report.popularPropertiesReportFooter = ["pageBreak", "keepTogether", "printAtBottom"], Report.popularPropertiesPageHeader = ["printOn"], Report.popularPropertiesPageFooter = ["printOn"], Report.popularPropertiesGroupHeader = ["groupFields", "groupUnion", "level", "pageBreak", "keepTogether", "repeatEveryPage"], Report.popularPropertiesGroupFooter = ["groupFooterUnion", "pageBreak", "keepTogether", "repeatEveryPage", "printAtBottom"], Report.popularPropertiesDetail = ["sortFields", "pageBreak", "keepTogether", "keepTogetherWithDetailReports"], Report.popularPropertiesDetailReport = ["dataSource", "dataMember", "dataAdapter", "filterString"];
            ko.bindingHandlers["dxWatermark"] = {
                update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                    var options = valueAccessor();
                    var leftMargin = options.forLeftMargin;
                    var band = options.band;
                    var reportSurface = options.reportSurface;
                    var backgroundRect = band.backgroundRect();
                    var pxs = function (x) { return x === 0 ? '0' : (x + 'px'); };
                    var url = function (s) { return s ? DevExpress.JS.Utils.formatUnicorn('url("{0}")', s) : s; };
                    var size = function (w, h) { return pxs(w) + ' ' + pxs(h); };
                    var getOffset = function (size, vertical) {
                        var noOffsetKey = vertical ? 'Top' : 'Left', fullOffsetKey = vertical ? 'Bottom' : 'Right', pageSize = vertical ? reportSurface.pageHeight() : reportSurface.pageWidth(), align = options.align;
                        return (pageSize - size) * (align.indexOf(noOffsetKey) >= 0 ? 0 : align.indexOf(fullOffsetKey) >= 0 ? 1 : 0.5);
                    };
                    element.style['height'] = pxs(backgroundRect.height);
                    element.style['width'] = pxs(leftMargin ? reportSurface.margins.left() : band._width());
                    element.style['background-image'] = url(options.image);
                    element.style['opacity'] = (255 - options.transparency) / 255 + '';
                    element.style['background-repeat'] = options.tiling ? 'repeat' : 'no-repeat';
                    var xOffset = 0, yOffset = 0, _a = reportSurface._watermarkImageNaturalSize(), width = _a.width, height = _a.height;
                    switch (options.viewMode) {
                        case 'Clip':
                            width *= reportSurface.zoom();
                            height *= reportSurface.zoom();
                            xOffset = getOffset(width, false);
                            yOffset = getOffset(height, true);
                            element.style['background-size'] = size(width, height);
                            break;
                        case 'Stretch':
                            xOffset = yOffset = 0;
                            element.style['background-size'] = size(reportSurface.pageWidth(), reportSurface.pageHeight());
                            break;
                        case 'Zoom':
                            var xRatio = reportSurface.pageWidth() / width, yRatio = reportSurface.pageHeight() / height, ratio;
                            if (xRatio < yRatio) {
                                ratio = xRatio;
                                xOffset = 0;
                                yOffset = getOffset(ratio * height, true);
                            }
                            else {
                                ratio = yRatio;
                                xOffset = getOffset(ratio * width, false);
                                yOffset = 0;
                            }
                            element.style['background-size'] = size(width * ratio, height * ratio);
                            break;
                    }
                    element.style['background-position-y'] = pxs(yOffset - backgroundRect.top);
                    element.style['background-position-x'] = pxs(xOffset - (backgroundRect.left || 0) - (leftMargin ? 0 : reportSurface.margins.left()));
                }
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var SubBandViewModel = (function (_super) {
                __extends(SubBandViewModel, _super);
                function SubBandViewModel(band, parent, serializer) {
                    _super.call(this, band, parent, serializer);
                    if (parent["multiColumn"]) {
                        this["multiColumn"] = parent["multiColumn"];
                    }
                }
                return SubBandViewModel;
            })(Report.BandViewModel);
            Report.SubBandViewModel = SubBandViewModel;
            var SubBandSurface = (function (_super) {
                __extends(SubBandSurface, _super);
                function SubBandSurface(band, context) {
                    _super.call(this, band, context);
                    this.leftMarginTemplate = "dxrd-sub-band-coordinate-grid";
                    if (band["multiColumn"]) {
                        var multiColumn = (band["multiColumn"]);
                        this["grayAreaWidth"] = ko.pureComputed(function () {
                            return Designer.unitsToPixel(multiColumn.grayAreaWidth(), context.measureUnit(), context.zoom());
                        });
                        this["columnWidth"] = ko.pureComputed(function () {
                            return Designer.unitsToPixel(multiColumn.realColumnWidth(), context.measureUnit(), context.zoom());
                        });
                        this["columnSpacing"] = ko.pureComputed(function () {
                            return Designer.unitsToPixel(multiColumn.columnSpacing(), context.measureUnit(), context.zoom());
                        });
                    }
                }
                SubBandSurface.prototype.getAbsolutePositionY = function () {
                    var y = _super.prototype.getAbsolutePositionY.call(this);
                    if (this.parent.bandsHolder.bands().indexOf(this) === 0) {
                        return y + (this.parent.heightWithoutSubBands());
                    }
                    return y;
                };
                SubBandSurface.prototype.getBackgroundRect = function () {
                    var top = 0, bottom, height = this._height();
                    var parent = this.parent;
                    var parentBands = ko.unwrap(parent.bandsHolder.bands);
                    var parentBackgroundRect = ko.unwrap(parent.backgroundRect);
                    top += (parentBackgroundRect.top + parentBackgroundRect.height);
                    bottom = parentBackgroundRect.bottom;
                    var bandIndex = parentBands.indexOf(this);
                    for (var i = 0; i < bandIndex; i++) {
                        top += parentBands[i]._totalHeight();
                    }
                    if (top > bottom)
                        height = 0;
                    else if (top + height > bottom)
                        height = bottom - top;
                    return { top: top, bottom: bottom, height: height };
                };
                return SubBandSurface;
            })(Report.BandSurface);
            Report.SubBandSurface = SubBandSurface;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var DetailBand = (function (_super) {
                __extends(DetailBand, _super);
                function DetailBand() {
                    _super.apply(this, arguments);
                }
                DetailBand.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.sortFields);
                    this.resetObservableArray(this.sortFields);
                };
                DetailBand.prototype.preInit = function (band, parent, serializer) {
                    this.multiColumn = new Report.MultiColumn(band["MultiColumn"], this.root["pageWidth"] || ko.observable(0), this.root["margins"] || Designer.Margins.fromString());
                    this._disposables.push(this.multiColumn);
                    this.sortFields = DevExpress.JS.Utils.deserializeArray(band.SortFields, function (field) { return new Report.GroupFieldModel(field, serializer); });
                };
                return DetailBand;
            })(Report.BandViewModel);
            Report.DetailBand = DetailBand;
            var DetailBandSurface = (function (_super) {
                __extends(DetailBandSurface, _super);
                function DetailBandSurface(band, context) {
                    _super.call(this, band, context);
                    var multiColumn = band.multiColumn;
                    this.grayAreaWidth = ko.pureComputed(function () {
                        return Designer.unitsToPixel(multiColumn.grayAreaWidth(), context.measureUnit(), context.zoom());
                    });
                    this.columnWidth = ko.pureComputed(function () {
                        return Designer.unitsToPixel(multiColumn.realColumnWidth(), context.measureUnit(), context.zoom());
                    });
                    this.columnSpacing = ko.pureComputed(function () {
                        return Designer.unitsToPixel(multiColumn.columnSpacing(), context.measureUnit(), context.zoom());
                    });
                }
                return DetailBandSurface;
            })(Report.BandSurface);
            Report.DetailBandSurface = DetailBandSurface;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var DetailReportBand = (function (_super) {
                __extends(DetailReportBand, _super);
                function DetailReportBand(band, parent, serializer) {
                    var _this = this;
                    _super.call(this, band, parent, serializer);
                    this._disposables.push(this.dataSource.subscribe(function (newVal) {
                        if (!newVal) {
                            _this.dataMember(null);
                        }
                    }));
                    var dataMember = ko.pureComputed(function () {
                        return Designer.getFullPath(_this.getPath("dataMember"), _this.dataMember());
                    });
                    var disabled = ko.pureComputed(function () { return !_this.dataSource(); });
                    this.filterString = new DevExpress.JS.Widgets.FilterStringOptions(this._filterString, dataMember, disabled);
                    this._disposables.push(dataMember);
                    this._disposables.push(disabled);
                    this.filterString.helper.parameters = this.root["parameters"];
                }
                DetailReportBand.addBandToContainer = function (container, control) {
                    control.parentModel(container);
                    if (control instanceof Report.DetailBand) {
                        container.bands().filter(function (x) { return x instanceof Report.VerticalBandViewModel; }).forEach(function (x) { return container.removeChild(x); });
                    }
                    else if (control instanceof Report.VerticalBandViewModel) {
                        if (container.bands().every(function (x) { return !(x instanceof Report.VerticalBandViewModel); })) {
                            var detailBand = container.bands().filter(function (x) { return x instanceof Report.DetailBand; })[0];
                            detailBand && container.removeChild(detailBand);
                            if (control.controlType !== "VerticalDetailBand")
                                container.createChild({ "@ControlType": "VerticalDetailBand", "@HeightF": container.root.dpi() });
                        }
                        else {
                            var band = container.bands().filter(function (x) { return x instanceof Report.VerticalBandViewModel; })[0];
                            if (band)
                                control.height(band.height());
                        }
                    }
                    Report.BandViewModel.insertBand(container.bands, control);
                };
                DetailReportBand.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.bands);
                    this.resetObservableArray(this.bands);
                };
                DetailReportBand.prototype.initHeight = function () {
                    var _this = this;
                    this._disposables.push(this.height = ko.pureComputed({
                        read: function () {
                            if (Designer.checkModelReady(_this.root)) {
                                var verticalBand = _this.bands().filter(function (x) { return x instanceof Report.VerticalBandViewModel; })[0];
                                var height = 0;
                                if (verticalBand)
                                    height = verticalBand.height();
                                return _this.bands().filter(function (x) { return !(x instanceof Report.VerticalBandViewModel); }).reduce(function (sum, b) { return sum + b.height(); }, height);
                            }
                            return 0;
                        },
                        write: function (newHeight) {
                            var deltaHeight = newHeight - _this.height.peek(), oldHeight = _this.bands()[_this.bands().length - 1].height.peek();
                            _this.bands()[_this.bands().length - 1].height(oldHeight + deltaHeight);
                        }
                    }));
                };
                DetailReportBand.prototype.createChildsArray = function (band, serializer) {
                    var bands = [];
                    if (band.Bands) {
                        var factory = this.getControlFactory();
                        for (var key in band.Bands) {
                            bands.push(new (factory.controlsMap[band.Bands[key]["@ControlType"]].type || Report.BandViewModel)(band.Bands[key], this, serializer));
                        }
                        Report.BandViewModel.initLevels(bands);
                        bands.sort(Report.sortBands);
                    }
                    this.bands = ko.observableArray(bands);
                    if (this.bands().length === 0)
                        this.createChild({ "@ControlType": "DetailBand", "@HeightF": this.height() });
                };
                DetailReportBand.prototype.addChild = function (control) {
                    if (control instanceof Report.BandViewModel && !(control instanceof Report.SubBandViewModel)) {
                        DetailReportBand.addBandToContainer(this, control);
                    }
                };
                return DetailReportBand;
            })(Report.BandViewModel);
            Report.DetailReportBand = DetailReportBand;
            var DetailReportBandSurface = (function (_super) {
                __extends(DetailReportBandSurface, _super);
                function DetailReportBandSurface(band, context) {
                    var _this = this;
                    _super.call(this, band, context, {
                        _height: function (o) { return o.height; }
                    });
                    this.templateName = "dxrd-detailreportband";
                    this.selectionTemplate = "dxrd-detailreportband-selection";
                    this.leftMarginTemplate = "dxrd-detail-report-band-coordinate-grid";
                    this._disposables.push(ko.computed(function () {
                        var isSomeParentCollapsed = _this.collapsed() || _this.isSomeParentCollapsed();
                        _this.bandsHolder.bands().forEach(function (band) {
                            band.isSomeParentCollapsed(isSomeParentCollapsed);
                        });
                    }));
                }
                DetailReportBandSurface.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                };
                DetailReportBandSurface.prototype.getChildrenCollection = function () {
                    return this.bandsHolder.bands;
                };
                DetailReportBandSurface.prototype.createUnderCursor = function () {
                    var _this = this;
                    var _underCursor = ko.observable(new Designer.HoverInfo());
                    this._disposables.push(this.underCursor = ko.pureComputed({
                        read: function () {
                            _underCursor().isOver = _this.bandsHolder.checkUnderCursor();
                            return _underCursor();
                        },
                        write: function (val) { _underCursor(val); }
                    }));
                };
                DetailReportBandSurface.prototype.getTotalHeight = function () {
                    return this.bandsHolder.getTotalHeight();
                };
                DetailReportBandSurface.prototype.getHeight = function () {
                    if (this.collapsed()) {
                        return Report.BandSurface.collapsedHeight;
                    }
                    else {
                        return this.bandsHolder.getHeight();
                    }
                };
                DetailReportBandSurface.prototype.getHasOwnRuler = function () {
                    return this.collapsed();
                };
                return DetailReportBandSurface;
            })(Report.BandSurface);
            Report.DetailReportBandSurface = DetailReportBandSurface;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var GroupHeaderBand = (function (_super) {
                __extends(GroupHeaderBand, _super);
                function GroupHeaderBand(band, parent, serializer) {
                    var _this = this;
                    _super.call(this, band, parent, serializer);
                    this.groupFields = DevExpress.JS.Utils.deserializeArray(band.GroupFields, function (field) { return new Report.GroupFieldModel(field, serializer); });
                    this.sortingSummary.getPath = function (propertyName) {
                        if (propertyName === "fieldName") {
                            return _this.getPath("groupFields");
                        }
                    };
                }
                GroupHeaderBand.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.groupFields);
                    this.resetObservableArray(this.groupFields);
                };
                return GroupHeaderBand;
            })(Report.BandViewModel);
            Report.GroupHeaderBand = GroupHeaderBand;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var TopMarginBand = (function (_super) {
                __extends(TopMarginBand, _super);
                function TopMarginBand() {
                    _super.apply(this, arguments);
                }
                TopMarginBand.prototype.initHeight = function () {
                    this.height = this.parentModel() && this.root.margins.top || ko.observable(0);
                    _super.prototype.initHeight.call(this);
                };
                return TopMarginBand;
            })(Report.BandViewModel);
            Report.TopMarginBand = TopMarginBand;
            var BottomMarginBand = (function (_super) {
                __extends(BottomMarginBand, _super);
                function BottomMarginBand() {
                    _super.apply(this, arguments);
                }
                BottomMarginBand.prototype.initHeight = function () {
                    this.height = this.parentModel() && this.root.margins.bottom || ko.observable(0);
                    _super.prototype.initHeight.call(this);
                };
                return BottomMarginBand;
            })(Report.BandViewModel);
            Report.BottomMarginBand = BottomMarginBand;
            var BottomMarginSurface = (function (_super) {
                __extends(BottomMarginSurface, _super);
                function BottomMarginSurface() {
                    _super.apply(this, arguments);
                }
                BottomMarginSurface.prototype.getBackgroundRect = function () {
                    var top = this.parent.pageHeight() - this._height(), bottom, height = this._height();
                    return { top: top, bottom: bottom, height: height };
                };
                return BottomMarginSurface;
            })(Report.BandSurface);
            Report.BottomMarginSurface = BottomMarginSurface;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var PageFooterSurface = (function (_super) {
                __extends(PageFooterSurface, _super);
                function PageFooterSurface() {
                    _super.apply(this, arguments);
                }
                PageFooterSurface.prototype.getBackgroundRect = function () {
                    var top = 0, bottom, height = this._height();
                    top = this.parent.pageHeight() - this._totalHeight() - this.parent.margins.bottom();
                    return { top: top, bottom: bottom, height: height };
                };
                return PageFooterSurface;
            })(Report.BandSurface);
            Report.PageFooterSurface = PageFooterSurface;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var VerticalBandViewModel = (function (_super) {
                __extends(VerticalBandViewModel, _super);
                function VerticalBandViewModel(band, parent, serializer) {
                    var _this = this;
                    _super.call(this, band, parent, serializer);
                    var _widthFromControls = 0;
                    this._disposables.push(this.widthFromControls = ko.pureComputed(function () {
                        _widthFromControls = 0;
                        if (Designer.checkModelReady(_this.root)) {
                            _widthFromControls = _this.controls().length > 0 ? Math.max.apply(Math, _this.controls().filter(function (x) { return !x.update(); }).map(function (x) { return x.location.x() + x.size.width(); })) : 1;
                            _widthFromControls = Math.round(_widthFromControls * 100) / 100;
                            _this.width(Math.max(_widthFromControls, _this.width()));
                            _widthFromControls = _widthFromControls > 0 ? _widthFromControls : 0;
                        }
                        return _widthFromControls;
                    }));
                    this._disposables.push(this.height.subscribe(function (newValue) {
                        if (_this.update())
                            return;
                        var verticalBands = _this.parentModel() && (_this.parentModel()["bands"]() || []).filter(function (x) { return x instanceof VerticalBandViewModel; });
                        var minValue = Math.max.apply(Math, verticalBands.map(function (x) { return x.heightFromControls(); }));
                        if (newValue < minValue)
                            newValue = minValue;
                        verticalBands.forEach(function (x) {
                            x.update(true);
                            x.height(newValue);
                            x.update(false);
                        });
                    }));
                }
                VerticalBandViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.controls);
                    this.resetObservableArray(this.controls);
                };
                VerticalBandViewModel.prototype.initSize = function () {
                    this.size.height = this.height;
                    this.size.width = this.width;
                };
                return VerticalBandViewModel;
            })(Report.BandViewModel);
            Report.VerticalBandViewModel = VerticalBandViewModel;
            var VerticalBandSurface = (function (_super) {
                __extends(VerticalBandSurface, _super);
                function VerticalBandSurface(band, context, unitProperties) {
                    var _this = this;
                    if (unitProperties === void 0) { unitProperties = VerticalBandSurface._unitProperties; }
                    _super.call(this, band, context, unitProperties);
                    this._resize = function (delta, oldDelta) {
                        var width = Math.max(_this._width() + delta - oldDelta, _this.minimumWidth());
                        _this._width(width);
                        return delta;
                    };
                    this.resizeHandles = ko.computed(function () {
                        return _this.rtlLayout() ? 'w' : 'e';
                    });
                    this.templateName = "dxrd-vertical-band";
                    this.selectiontemplate = "dxrd-vertical-band-selection";
                    this.contentSelectionTemplate = "dxrd-vertical-band-selection-content";
                    this._disposables.push(this.collapsed = ko.pureComputed({
                        read: function () {
                            return !band.expanded();
                        },
                        write: function (newVal) {
                            band.expanded(!newVal);
                        }
                    }));
                    this.coordinateGridOptions = {
                        height: band.height,
                        snapGridSize: band.root.snapGridSize,
                        width: band.width,
                        zoom: context.zoom,
                        measureUnit: context.measureUnit,
                        flip: context.rtl
                    };
                    this.name = band.name;
                    this.height = ko.pureComputed(function () {
                        if (_this.collapsed())
                            return Report.BandSurface.collapsedHeight;
                        return _this._height() + VerticalBandSurface.markerHeight;
                    });
                    this._disposables.push(this.backgroundRect = ko.pureComputed(function () {
                        var top = _this.verticalBandsContainer._getTopOffset();
                        return {
                            top: top,
                            left: _this.absolutePosition.x(),
                            height: _this._height(),
                            width: _this._width()
                        };
                    }));
                    var oldDelta = 0;
                    this["resize"] = function (params) {
                        if (_this.rtlLayout() && params.delta.dx) {
                            oldDelta = _this._resize(-1 * params.delta.dx, oldDelta);
                        }
                        else if (params.delta.dh) {
                            oldDelta = _this.verticalBandsContainer["_resize"](params.delta.dh, oldDelta);
                        }
                        else {
                            oldDelta = _this._resize(params.delta.dw, oldDelta);
                        }
                    };
                    this["stopResize"] = function () {
                        oldDelta = 0;
                    };
                    this._disposables.push(this.canResize = ko.computed(function () {
                        return _this.selected() && !_this.locked && !Designer.DragDropHandler.started();
                    }));
                    this.getUsefulRect = function () {
                        return {
                            top: _this.absolutePosition.y(),
                            bottom: _this.absolutePosition.y() + _this._height(),
                            left: _this.absolutePosition.x() - _this.verticalBandsContainer.scrollOffset(),
                            right: _this.absolutePosition.x() + _this.rect().width - _this.verticalBandsContainer.scrollOffset()
                        };
                    };
                    var x = this.underCursor().x;
                    var self = this;
                    var createCursor = function (newCursor) {
                        var cursor = $.extend(true, {}, newCursor);
                        delete cursor.x;
                        Object.defineProperty(cursor, "x", {
                            get: function () {
                                return x;
                            },
                            set: function (newVal) {
                                x = newVal + self.verticalBandsContainer.scrollOffset();
                            },
                            configurable: true
                        });
                        return cursor;
                    };
                    var underCursor = createCursor(this.underCursor());
                    this.underCursor = (function (newVal) {
                        if (!newVal)
                            return underCursor;
                        x = newVal.x;
                        underCursor = createCursor(newVal);
                    });
                    this._disposables.push(this.resizeHandles);
                }
                VerticalBandSurface.prototype._getRtlAbsolutePositionX = function (bandIndex, bands) {
                    var allBandsWidth = this.verticalBandsContainer.getBandsWidth(bands);
                    if (bandIndex !== 0) {
                        return bands[bandIndex - 1].absolutePosition.x() - bands[bandIndex]._width();
                    }
                    else if (allBandsWidth > this.verticalBandsContainer.width()) {
                        return bands.reduce(function (acc, band, index) { return acc += (index === 0 ? 0 : band._width()); }, 0);
                    }
                    else {
                        return this.verticalBandsContainer.width() - bands[bandIndex]._width();
                    }
                };
                VerticalBandSurface.prototype.getAbsolutePositionX = function () {
                    var newX = 0;
                    var bandIndex;
                    var parentBands = ko.unwrap(this.verticalBandsContainer.verticalBands);
                    if (parentBands && parentBands.length !== 0) {
                        bandIndex = parentBands.indexOf(this);
                        if (bandIndex === -1)
                            return 0;
                        if (this.rtlLayout()) {
                            newX = this._getRtlAbsolutePositionX(bandIndex, parentBands);
                        }
                        else if (bandIndex > 0 && parentBands[bandIndex - 1])
                            newX = parentBands[bandIndex - 1].absolutePosition.x() + parentBands[bandIndex - 1]._width();
                    }
                    return newX;
                };
                VerticalBandSurface.prototype.updateAbsolutePosition = function () {
                    if (!this.parent)
                        return;
                    this.absolutePosition.x(this.getAbsolutePositionX());
                    this.absolutePosition.y(this.verticalBandsContainer.topOffset() + VerticalBandSurface.markerHeight);
                };
                VerticalBandSurface.prototype.minimumHeight = function () {
                    return this.verticalBandsContainer.minHeight && this.verticalBandsContainer.minHeight();
                };
                VerticalBandSurface.prototype.minimumWidth = function () {
                    return this.widthFromControls && this.widthFromControls();
                };
                Object.defineProperty(VerticalBandSurface.prototype, "verticalBandsContainer", {
                    get: function () {
                        return this.parent.bandsHolder.verticalBandsContainer;
                    },
                    enumerable: true,
                    configurable: true
                });
                VerticalBandSurface.markerHeight = 27;
                VerticalBandSurface._unitProperties = {
                    _width: function (x) { return x.width; },
                    _height: function (x) { return x.height; },
                    heightFromControls: function (o) { return o.heightFromControls; },
                    widthFromControls: function (o) { return o.widthFromControls; }
                };
                return VerticalBandSurface;
            })(Designer.SurfaceElementBase);
            Report.VerticalBandSurface = VerticalBandSurface;
            var VerticalBandsContainerSurface = (function (_super) {
                __extends(VerticalBandsContainerSurface, _super);
                function VerticalBandsContainerSurface(_parent) {
                    var _this = this;
                    _super.call(this);
                    this._parent = _parent;
                    this.markerWidth = ko.observable(Report.BandSurface.collapsedHeight);
                    this.name = "Vertical Bands";
                    this.bandOffset = 29;
                    this.templateName = "dxrd-vertical-bands-container";
                    this.selectionTemplate = "dxrd-vertical-bands-container-selection";
                    this.vrulerTemplate = "dxrd-vertical-bands-container-vruler";
                    this.leftMarginTemplate = "dxrd-vertical-bands-leftMargin";
                    this.leftMarginSelectionTemplate = "dxrd-vertical-bands-leftMargin-selection";
                    this.verticalBands = ko.observableArray();
                    this.scrollOffset = ko.observable(0);
                    this._disposables.push(this.bandPosition = ko.computed(function () {
                        return _this.getBandPosition();
                    }), this.topOffset = ko.computed(function () {
                        var offset = 0;
                        if (_this.bandPosition() > 0) {
                            var prevBand = _this._parent.bandsHolder.bands()[_this.bandPosition() - 1];
                            if (prevBand) {
                                return prevBand.absolutePosition.y() + prevBand.height();
                            }
                        }
                        if (_this._parent instanceof Report.DetailReportBandSurface) {
                            return _this._parent["absolutePosition"].y();
                        }
                        else
                            return 0;
                    }), this.collapsed = ko.computed({
                        read: function () { return _this.verticalBands().some(function (x) { return x.collapsed(); }); },
                        write: function (newVal) { return _this.verticalBands().forEach(function (x) { return x.collapsed(newVal); }); }
                    }), this.width = ko.computed(function () { return _parent._context.pageWidth() - _parent._context.margins.left() - (!_this.collapsed() ? _parent._context.margins.right() : 0); }), this.leftMargin = ko.pureComputed(function () { return 0 - (_parent._context.margins && _parent._context.margins.left() || 0) + 10; }), this.height = ko.computed({
                        read: function () {
                            return _this.verticalBands()[0] && _this.verticalBands()[0].height() || 0;
                        },
                        write: function (newVal) { return _this.verticalBands().forEach((function (x) { return x._height(newVal - VerticalBandSurface.markerHeight); })); }
                    }), this._height = ko.computed(function () { return _this.verticalBands()[0] && _this.verticalBands()[0]._height() || 0; }), this.focused = ko.computed(function () {
                        return _this.verticalBands().some(function (x) { return x.focused(); });
                    }), this.leftOffset = ko.computed(function () { return _parent.rtlLayout() ? _parent._context.margins.right() : 0; }), this.grayAreaWidth = ko.computed(function () {
                        return Math.max(0, _this.width() - _this.getBandsWidth(_this.verticalBands()));
                    }), this.grayAreaLeft = ko.computed(function () {
                        var bands = _this.verticalBands();
                        if (!bands.length)
                            return 0;
                        var band = bands[bands.length - 1];
                        return band.absolutePosition.x() + band._width();
                    }), this.minHeight = ko.pureComputed(function () {
                        return Math.max.apply(Math, _this.verticalBands().map(function (x) { return (x.heightFromControls && x.heightFromControls()) || 1; })) + VerticalBandSurface.markerHeight;
                    }));
                    var oldDelta = 0;
                    this["_resize"] = function (delta, oldDelta) {
                        var firstBand = _this.verticalBands()[0];
                        firstBand._height(firstBand._height() + delta - oldDelta);
                        return delta;
                    };
                    this["resize"] = function (params) {
                        oldDelta = _this["_resize"](params.delta.dh, oldDelta);
                    };
                    this["stopResize"] = function () {
                        oldDelta = 0;
                    };
                }
                VerticalBandsContainerSurface.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.verticalBands);
                    this.resetObservableArray(this.verticalBands);
                };
                VerticalBandsContainerSurface.prototype.getBandPosition = function () {
                    if (this.visible)
                        return this._parent.getControlModel().bands().indexOf(this.verticalBands()[0]._control);
                    return -1;
                };
                VerticalBandsContainerSurface.prototype.createScrollViewOptions = function (target, selection) {
                    return {
                        direction: 'horizontal',
                        showScrollbar: 'always',
                        useNative: false,
                        scrollByContent: false,
                        scrollByThumb: true,
                        onStart: function () {
                            selection["disabled"](true);
                        },
                        onScroll: function (e) {
                            target.scrollOffset(e.scrollOffset.left);
                        },
                        onEnd: function () {
                            selection["disabled"](false);
                        }
                    };
                };
                VerticalBandsContainerSurface.prototype.markerClick = function (selection) {
                    if (selection.expectClick) {
                        selection.expectClick = false;
                        return;
                    }
                    if (!this.focused()) {
                        selection.initialize(this.verticalBands()[0]);
                    }
                    else {
                        this.collapsed(!this.collapsed());
                    }
                };
                VerticalBandsContainerSurface.prototype.getBandsWidth = function (bands) {
                    return bands.reduce(function (acc, band, index) { return acc += band._width(); }, 0);
                };
                VerticalBandsContainerSurface.prototype._getTopOffset = function () {
                    var top = 0;
                    if (this._parent instanceof Report.DetailReportBandSurface) {
                        top = this._parent["backgroundRect"]().top;
                    }
                    if (this.bandPosition() > 0) {
                        for (var i = 0; i < this.bandPosition(); i++) {
                            top += this._parent.bandsHolder.bands()[i]._totalHeight();
                        }
                        ;
                    }
                    return top;
                };
                Object.defineProperty(VerticalBandsContainerSurface.prototype, "visible", {
                    get: function () {
                        return this.verticalBands().length > 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VerticalBandsContainerSurface.prototype, "zoom", {
                    get: function () { return this._parent.zoom; },
                    enumerable: true,
                    configurable: true
                });
                return VerticalBandsContainerSurface;
            })(Designer.Disposable);
            Report.VerticalBandsContainerSurface = VerticalBandsContainerSurface;
            var width = { propertyName: "width", modelName: "@WidthF", defaultVal: 300, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Width", localizationId: "DevExpress.XtraReports.UI.XRControl.Width", from: Designer.floatFromModel };
            var commonVerticalBandProperties = [width, Report.keepTogetherDefaultValueFalse].concat(Report.bandSerializationInfo);
            var bandLayout = {
                propertyName: "bandLayout",
                modelName: "@BandLayout",
                displayName: "Band Layout",
                localizationId: "DevExpress.XtraReports.UI.VerticalDetailBand.BandLayout",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "AcrossOnly", displayValue: "Across Only", localizationId: "DevExpress.XtraReports.UI.VerticalBandLayout.AcrossOnly" },
                    { value: "AcrossThenDown", displayValue: "Across Then Down", localizationId: "DevExpress.XtraReports.UI.VerticalBandLayout.AcrossThenDown" }
                ],
                defaultVal: "AcrossOnly"
            };
            Report.verticalHeaderBandSerializationInfo = [Report.repeatEveryPage].concat(commonVerticalBandProperties);
            Report.popularPropertiesVerticalHeaderBand = ["repeatEveryPage"];
            Report.verticalDetailBandSerializationInfo = [bandLayout, Report.sortFields].concat(commonVerticalBandProperties);
            Report.popularPropertiesVerticalDetailBand = ["bandLayout", "sortFields"];
            Report.verticalTotalBandSerializationInfo = [].concat(commonVerticalBandProperties);
            Report.popularPropertiesVerticalTotalBand = [];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var CheckBoxViewModel = (function (_super) {
                __extends(CheckBoxViewModel, _super);
                function CheckBoxViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this._disposables.push(this.checkState.subscribe(function (val) {
                        if (val === "Unchecked") {
                            _this.checked(false);
                        }
                        else {
                            _this.checked(true);
                        }
                    }));
                    this._disposables.push(this.checked.subscribe(function (val) {
                        if (val) {
                            _this.checkState("Checked");
                        }
                        else {
                            _this.checkState("Unchecked");
                        }
                    }));
                }
                return CheckBoxViewModel;
            })(Report.ControlViewModel);
            Report.CheckBoxViewModel = CheckBoxViewModel;
            var XRCheckboxSurface = (function (_super) {
                __extends(XRCheckboxSurface, _super);
                function XRCheckboxSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.checkboxSize = 14;
                    this.checkStateWidth = ko.observable();
                    this.visibleText = ko.observable(true);
                    this.contenttemplate = "dxrd-checkbox-content";
                    this._disposables.push(this.checkStateClass = ko.pureComputed(function () {
                        return "dxrd-checkbox-checkstate-" + control["checkState"]().toLowerCase();
                    }));
                    this.leftPadding = function () {
                        var padding = ko.unwrap(control["paddingObj"]) || Designer.Widgets.PaddingModel.from(Designer.Widgets.PaddingModel.defaultVal);
                        return Designer.unitsToPixel(padding.left(), context.measureUnit());
                    };
                    this._disposables.push(this.textWidth = ko.pureComputed(function () {
                        return _this.contentWidthWithoutZoom() - _this.checkboxSize - _this.leftPadding();
                    }));
                    this._disposables.push(this.visibleText = ko.pureComputed(function () {
                        return control["glyphAlignment"]() !== "Center";
                    }));
                    this._disposables.push(this.checkStateWidth = ko.pureComputed(function () {
                        return _this.visibleText() ? _this.checkboxSize + "px" : "100%";
                    }));
                    this.isGlyphAlignmentNear = ko.pureComputed(function () {
                        return _this._control.rtl() ? control["glyphAlignment"]() === "Far" : control["glyphAlignment"]() === "Near";
                    });
                    this._disposables.push(this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.backGroundCss(), _this.cssCalculator.foreColorCss(), _this.cssCalculator.textAlignmentCss(), _this.cssCalculator.paddingsCss());
                    }));
                }
                return XRCheckboxSurface;
            })(Report.TextControlSurfaceBase);
            Report.XRCheckboxSurface = XRCheckboxSurface;
            Report.checkState = {
                propertyName: "checkState",
                modelName: "@CheckState", displayName: "Check State", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.CheckState", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                defaultVal: "Unchecked",
                valuesArray: [
                    { value: "Unchecked", displayValue: "Unchecked", localizationId: "StringId.CheckUnchecked" },
                    { value: "Checked", displayValue: "Checked", localizationId: "StringId.CheckChecked" },
                    { value: "Indeterminate", displayValue: "Indeterminate", localizationId: "StringId.CheckIndeterminate" }
                ]
            };
            Report.checked = { propertyName: "checked", modelName: "@Checked", defaultVal: false, from: Designer.parseBool, displayName: "Checked", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.Checked", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.glyphAlignment = {
                propertyName: "glyphAlignment",
                modelName: "@GlyphAlignment", displayName: "Glyph Alignment", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.GlyphAlignment",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                defaultVal: "Near", valuesArray: [
                    { value: "Near", displayValue: "Near", localizationId: "DevExpress.Utils.HorzAlignment.Near" },
                    { value: "Center", displayValue: "Center", localizationId: "DevExpress.Utils.HorzAlignment.Center" },
                    { value: "Far", displayValue: "Far", localizationId: "DevExpress.Utils.HorzAlignment.Far" }
                ]
            };
            Report.chekEditOptions = $.extend({}, Report.editOptions, {
                propertyName: "checkEditOptions",
                from: function (model, serializer) { return new Report.CheckEditOptions(model, serializer); }
            });
            Report.checkboxSerializationsInfo = [
                Report.checkState, Report.checked, Report.text, Report.textFormatString, Report.wordWrap, Report.glyphAlignment, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal,
                $.extend({}, Report.textAlignment, { defaultVal: "MiddleLeft" }),
                Report.textControlScripts, Report.textTrimming, Report.xlsxFormatString,
                Report.dataBindings(["Text", "NavigateUrl", "Tag", "Bookmark", "CheckState"]),
                Report.rtl,
                Report.chekEditOptions
            ].concat(Report.createPopularBindingInfos({ propertyName: "CheckState", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.CheckState" }), Report.createPopularBindingInfos({ propertyName: "Text", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.Text" }), Report.sizeLocation, Report.commonControlProperties, Report.fontGroup, Report.navigationGroup);
            Report.popularPropertiesCheckBox = ["checkState", "popularDataBindingCheckState", "popularExpressionCheckState", "text", "popularDataBindingText", "popularExpressionText", "bookmark", "bookmarkParent"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var dataFilterReportPropertiesSerializationsInfo = [{ propertyName: "dataMember", modelName: "@DataMember" }, { propertyName: "dataSource", modelName: "@DataSource", link: true }], valueDataBinding = { propertyName: "value", displayName: "Value Data Members", editor: Report.editorTemplates.chartValueBinding, localizationId: 'DevExpress.XtraCharts.SeriesBase.ValueDataMembers' };
            var dataFilterReportSerializationFakeInfo = [
                { propertyName: "misc", displayName: "Misc", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: Designer.Chart.dataFilterSerializationsInfo, localizationId: 'ChartStringId.PropertyGridCategory_Misc' },
                { propertyName: "report", displayName: "Report Data", localizationId: "ReportStringId.CatReportData", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor, info: [valueDataBinding] }
            ];
            var DataFilterModelReport = (function (_super) {
                __extends(DataFilterModelReport, _super);
                function DataFilterModelReport(model, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer);
                    this.misc = this._mapObject(Designer.Chart.dataFilterSerializationsInfo);
                    this.misc.isPropertyDisabled = function (propertyName) {
                        return propertyName === "value" && _this.dataMember() != null;
                    };
                    this.report = this._createReportDataProperty();
                }
                DataFilterModelReport.prototype.getInfo = function () {
                    return [].concat([].concat(Designer.Chart.dataFilterSerializationsInfo, dataFilterReportPropertiesSerializationsInfo)
                        .map(function (x) { return { propertyName: x.propertyName, modelName: x.modelName, link: x.link }; }), dataFilterReportSerializationFakeInfo);
                };
                DataFilterModelReport.prototype._createReportDataProperty = function () {
                    var _this = this;
                    return {
                        updateValue: function (pathRequest, parameters) {
                            if (!!pathRequest.fullPath) {
                                if (pathRequest.fullPath.indexOf("Parameters") === 0) {
                                    var parameterName = pathRequest.fullPath.split('.').pop();
                                    _this.dataSource(parameters.filter(function (x) { return x.name === parameterName; })[0]);
                                    _this.dataMember("Value");
                                }
                                else {
                                    _this.dataMember(pathRequest.path);
                                    _this.dataSource(null);
                                }
                            }
                            else {
                                _this.dataMember(null);
                                _this.dataSource(null);
                            }
                        },
                        displayValue: function (reportDataSource) {
                            if (_this.dataSource()) {
                                return ["Parameters", _this.dataSource().name].join(" - ");
                            }
                            else {
                                if (_this.dataMember()) {
                                    return [reportDataSource.name, _this.dataMember()].join(" - ");
                                }
                                return "";
                            }
                        },
                        calculatePath: function (reportDataSource) {
                            if (_this.dataSource()) {
                                return ["Parameters", _this.dataSource().name].join('.');
                            }
                            else {
                                if (_this.dataMember()) {
                                    return [reportDataSource.ref || reportDataSource.id, _this.dataMember()].join('.');
                                }
                                return "";
                            }
                        },
                        getInfo: function () { return [valueDataBinding]; },
                        value: this._mapObject(dataFilterReportPropertiesSerializationsInfo)
                    };
                };
                DataFilterModelReport.prototype._mapObject = function (info) {
                    var _this = this;
                    var obj = { getInfo: function () { return info; } };
                    for (var i = 0; i < info.length; i++) {
                        var propertyName = info[i].propertyName;
                        obj[propertyName] = this[propertyName];
                    }
                    obj["getPath"] = function (propertyName) {
                        return _this["getPath"](propertyName);
                    };
                    return obj;
                };
                return DataFilterModelReport;
            })(Designer.Chart.DataFilterModel);
            Report.DataFilterModelReport = DataFilterModelReport;
            Designer.Chart.DefaultDataFilterModel = DataFilterModelReport;
            var XRChartViewModel = (function (_super) {
                __extends(XRChartViewModel, _super);
                function XRChartViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    ["seriesDataMember", "dataMember"].forEach(function (val) {
                        _this[val] = ko.computed({
                            read: function () {
                                return _this.chart.dataContainer[val]();
                            }, write: function (newVal) {
                                _this.chart.dataContainer[val](newVal);
                            }
                        });
                    });
                    ["appearanceName", "paletteName"].forEach(function (val) {
                        _this[val] = ko.computed({
                            read: function () {
                                return _this.chart[val]();
                            }, write: function (newVal) {
                                _this.chart[val](newVal);
                            }
                        });
                    });
                    this.pivotGridDataSourceOptions = ko.computed(function () {
                        return _this.chart.dataContainer.pivotGridDataSourceOptions;
                    });
                    this.isPivotGridDataSource = ko.observable(this.dataSource() instanceof Report.XRPivotGridViewModel);
                    this.isPivotGridDataSource.subscribe(function (newVal) {
                        XRChartViewModel.setDataMembers(_this.chart, newVal);
                    });
                    this.realDataSource = ko.computed(function () {
                        _this.isPivotGridDataSource(_this.dataSource() instanceof Report.XRPivotGridViewModel);
                        var rootSource = _this.root && _this.root["dataSource"] && _this.root["dataSource"]();
                        return _this.dataSource() || rootSource;
                    });
                    this._disposables.push(ko.computed(function () {
                        var dataSources = _this.root && _this.root.dsHelperProvider && _this.root.dsHelperProvider() && _this.root.dsHelperProvider().usedDataSources().map(function (ds) { return ds.data; });
                        if (dataSources && !_this.isPivotGridDataSource() && dataSources.indexOf(_this.dataSource()) === -1)
                            _this.dataSource(null);
                    }));
                    this.chartModel = this._createChartModel();
                    this.isPivotGridDataSource.subscribe(function (newVal) {
                        XRChartViewModel.setDataMembers(_this.chart, newVal);
                    });
                }
                XRChartViewModel.prototype.getInfo = function () {
                    return Report.xrChartSerializationInfo;
                };
                XRChartViewModel.assignValueDataMembers = function (chart, str) {
                    var valueDataMembers = chart.dataContainer.seriesTemplate.valueDataMembers();
                    var assign = function (array) {
                        array.forEach(function (property) { valueDataMembers[property](str); });
                    };
                    if (valueDataMembers instanceof Designer.Chart.CommonValueDataMembers) {
                        assign(["value"]);
                    }
                    else if (valueDataMembers instanceof Designer.Chart.ValueWeightDataMembers) {
                        assign(["value", "weight"]);
                    }
                    else if (valueDataMembers instanceof Designer.Chart.Value1Value2DataMembers) {
                        assign(["value1", "value2"]);
                    }
                    else if (valueDataMembers instanceof Designer.Chart.StockValueDataMembers) {
                        assign(["open", "close", "hight", "low"]);
                    }
                };
                XRChartViewModel.setDataMembers = function (chart, isPivotGrid) {
                    if (isPivotGrid) {
                        XRChartViewModel.assignValueDataMembers(chart, "Values");
                        chart.dataContainer.seriesTemplate.argumentDataMember("Arguments");
                        chart.dataContainer.seriesDataMember("Series");
                    }
                    else {
                        XRChartViewModel.assignValueDataMembers(chart, null);
                        chart.dataContainer.seriesTemplate.argumentDataMember(null);
                        chart.dataContainer.seriesDataMember(null);
                    }
                };
                XRChartViewModel.prototype._createChartModel = function () {
                    var _this = this;
                    var model = new Designer.Chart.ChartControlViewModel({
                        chart: this.chart,
                        dataSource: this.dataSource
                    });
                    model.isSeriesPropertyDisabled = function (propertyName) {
                        if (!_this.realDataSource() || (_this.realDataSource() instanceof Report.XRPivotGridViewModel)) {
                            return propertyName === "argumentDataMember" || propertyName === "valueDataMembers" || propertyName === "colorDataMember";
                        }
                    };
                    model.isSeriesTemplatePropertyDisabled = function (propertyName) {
                        if (!_this.realDataSource() || (_this.realDataSource() instanceof Report.XRPivotGridViewModel && model.chart.dataContainer.pivotGridDataSourceOptions.autoBindingSettingsEnabled())) {
                            return propertyName === "argumentDataMember" || propertyName === "valueDataMembers" || propertyName === "valueScaleType" || propertyName === "argumentScaleType";
                        }
                    };
                    model.getPath = function (propertyName) {
                        if (_this.realDataSource() instanceof Report.XRPivotGridViewModel || propertyName === "dataMember")
                            return _this.getPath(propertyName);
                        if (propertyName === "seriesDataMember") {
                            return Designer.getFullPath(_this.getPath("dataMember"), model.dataMember());
                        }
                    };
                    model.isPropertyDisabled = function (propertyName) {
                        return _this.isPropertyDisabled(propertyName);
                    };
                    return model;
                };
                XRChartViewModel.prototype.isPropertyDisabled = function (name) {
                    if (!this.realDataSource() || (this.realDataSource() instanceof Report.XRPivotGridViewModel && this.pivotGridDataSourceOptions()["autoBindingSettingsEnabled"]())) {
                        return name === "seriesDataMember" || name === "dataMember";
                    }
                    else if (!this.realDataSource() || this.realDataSource() instanceof Report.XRPivotGridViewModel) {
                        return name === "dataMember";
                    }
                };
                XRChartViewModel.prototype.getPath = function (propertyName) {
                    if (this.dataSource() instanceof Report.XRPivotGridViewModel) {
                        return ["PivotGrid", propertyName].join('.');
                    }
                    var dsHelperProvider = this.dsHelperProvider();
                    var dataSourceName = dsHelperProvider && dsHelperProvider.getDataSourcePath(this.realDataSource());
                    if (propertyName === "seriesDataMember") {
                        return Designer.getFullPath(dataSourceName, this.dataMember());
                    }
                    else if (propertyName === "dataMember") {
                        return dataSourceName;
                    }
                };
                return XRChartViewModel;
            })(Report.ControlViewModel);
            Report.XRChartViewModel = XRChartViewModel;
            var ChartSurface = (function (_super) {
                __extends(ChartSurface, _super);
                function ChartSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.designTime = ko.observable(false);
                    this.imageSrc = ko.observable("");
                    this.template = "dxrd-shape";
                    this.contenttemplate = "dxrd-shape-content";
                    this.selectiontemplate = "dxrd-chart-selection";
                    this._disposables.push(ko.computed(function () {
                        if (!_this.designTime()) {
                            var _self = _this;
                            if (Designer.Report.HandlerUri) {
                                Report.ReportRenderingService.getChartImage(_this).done(function (result) {
                                    _self.imageSrc("data:image/x;base64," + result.Image);
                                }).fail(function (jqXHR) {
                                    Designer.NotifyAboutWarning("Impossible to get chart image.");
                                });
                            }
                        }
                    }));
                }
                ChartSurface.prototype.runDesignerButtonText = function () {
                    return Designer.getLocalization('Run Designer', 'ReportStringId.Verb_RunDesigner');
                };
                return ChartSurface;
            })(Report.ControlSurface);
            Report.ChartSurface = ChartSurface;
            var ChartFieldListExtender = (function () {
                function ChartFieldListExtender() {
                }
                ChartFieldListExtender.prototype.beforeItemsFilled = function (request, items) {
                    if (request.ref !== "PivotGrid" && request.id !== "PivotGrid")
                        return false;
                    switch (request.path) {
                        case "dataMember": return true;
                        case "seriesDataMember":
                            {
                                items.push({ name: "Arguments", displayName: "Arguments", specifics: "String" }, { name: "Series", displayName: Designer.getLocalization("Series", 'DevExpress.XtraReports.UI.XRChart.Series'), specifics: "String" }, { name: "Values", displayName: Designer.getLocalization("Values", 'DevExpress.XtraCharts.SeriesPoint.Values'), specifics: "Integer" });
                                return true;
                            }
                            ;
                        case "valueDataMembers": {
                            items.push({ name: "Values", displayName: Designer.getLocalization("Values", 'DevExpress.XtraCharts.SeriesPoint.Values'), specifics: "Integer" });
                            return true;
                        }
                    }
                };
                return ChartFieldListExtender;
            })();
            Report.ChartFieldListExtender = ChartFieldListExtender;
            Report.chart = { propertyName: "chart", modelName: "Chart", from: Designer.Chart.chart.from, toJsonObject: Designer.Chart.chart.toJsonObject };
            Report.xrChartSerializationInfo = [Designer.Chart.appearanceName, Designer.Chart.paletteName, Report.chart, Report.stylePriority, Designer.Chart.chartDataSource, Report.imageType, Report.chartScripts,
                { propertyName: "dataMember", displayName: "Data Member", localizationId: "DevExpress.XtraReports.UI.XRChart.DataMember", defaultVal: "", editor: Designer.Widgets.editorTemplates.dataMember }
            ].concat(Report.baseControlProperties, Report.sizeLocation, Report.bordersProperties);
            Report.createChartDesignerOptions = function (designerModel, dataSourceHelper, model, parameters, chartValueBindingProvider) {
                var chartDesignerOptionsVisible = ko.observable(false);
                var chartIsDirty;
                var currentChart = ko.observable(null);
                var disposables = [];
                var chartDisposables = [];
                disposables.push(chartDesignerOptionsVisible.subscribe(function (newVal) {
                    if (newVal) {
                        currentChart().designTime(true);
                        designerModel.undoEngine().start();
                    }
                    else {
                        chartDisposables.forEach(function (x) { return x.dispose(); });
                        chartDisposables = [];
                        designerModel.undoEngine().end();
                        var isDirty = chartIsDirty();
                        chartDesignerOptions.options.data.chart(null);
                        if (isDirty) {
                            var undoEngine = designerModel.undoEngine();
                            undoEngine.undo();
                            undoEngine.redoEnabled(false);
                            undoEngine._observers.pop();
                        }
                        currentChart().designTime(false);
                        currentChart(null);
                    }
                }));
                var chartDesignerOptions = {
                    dispose: function () {
                        chartDisposables.forEach(function (x) { return x.dispose(); });
                        disposables.forEach(function (x) { return x.dispose(); });
                        chartDisposables = [];
                        disposables = [];
                    },
                    options: null,
                    visible: chartDesignerOptionsVisible,
                    buttons: [{
                            toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                text: Designer.getLocalization('OK', 'PivotGridStringId.FilterOk'), onClick: function () {
                                    chartIsDirty(false);
                                    chartDesignerOptionsVisible(false);
                                }
                            }
                        },
                        {
                            toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                text: Designer.getLocalization("Cancel", "ASPxReportsStringId.SearchDialog_Cancel"), onClick: function () {
                                    chartDesignerOptionsVisible(false);
                                }
                            }
                        }],
                    run: function (chartSurface) {
                        var xrChart = chartSurface._control;
                        currentChart(chartSurface);
                        if (!chartDesignerOptions.options) {
                            chartDesignerOptions.options = {
                                callbacks: {
                                    customizeActions: function (actions) {
                                        for (var i = 0; i < actions.length; i++) {
                                            if (actions[i].id === DevExpress.Designer.ActionId.Undo || actions[i].id === DevExpress.Designer.ActionId.Redo) {
                                                actions[i].hasSeparator = false;
                                            }
                                            else {
                                                actions[i].visible = false;
                                                actions[i].hasSeparator = false;
                                            }
                                        }
                                    },
                                    init: function (chartModel) {
                                        chartDisposables.push(chartIsDirty = ko.computed({
                                            read: function () {
                                                return chartModel.undoEngine().isDirty();
                                            },
                                            write: function (newVal) {
                                                chartModel.undoEngine().isDirty(newVal);
                                            }
                                        }));
                                        chartModel.displayNameProvider = designerModel.displayNameProvider;
                                        chartModel.dataSourceHelper = dataSourceHelper;
                                        chartDisposables.push(chartModel.reportParameters = ko.computed(function () { return parameters().parameters(); }));
                                        chartDisposables.push(chartModel.reportDataSource = ko.computed(function () { return dataSourceHelper().findDataSourceInfo(model() && model().dataSource()); }));
                                        chartModel.reportDataBindingsProvider = chartValueBindingProvider;
                                        chartDisposables.push(chartDesignerOptionsVisible.subscribe(function (newVal) {
                                            if (newVal) {
                                                chartModel.updateSurfaceSize();
                                            }
                                        }));
                                    }
                                },
                                data: {
                                    chart: ko.observable(xrChart.chartModel),
                                    availableChartDataSources: designerModel.chartDataSources,
                                    width: 500,
                                    height: 500
                                },
                                rtl: designerModel.rtl,
                                fieldListProvider: designerModel.dataBindingsProvider
                            };
                        }
                        else {
                            chartDesignerOptions.options.data.chart(xrChart.chartModel);
                        }
                        chartDesignerOptions.visible(true);
                    },
                    container: function (element) { return DevExpress.Analytics.Utils.getParentContainer(element, ".dx-designer"); }
                };
                return chartDesignerOptions;
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Pivot;
        (function (Pivot) {
            var SortBySummaryInfoCondition = (function () {
                function SortBySummaryInfoCondition(model, fieldsProvider, serializer) {
                    this._fieldsProvider = fieldsProvider;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model);
                }
                SortBySummaryInfoCondition.prototype.getInfo = function () {
                    var fields = this._fieldsProvider.fieldsAvailableForCondition();
                    if (fields.length < 1) {
                        return Pivot.sortBySummaryConditionInfo;
                    }
                    var conditionInfoClone = Pivot.sortBySummaryConditionInfo.slice(0), fieldComponentName = Designer.find(Pivot.sortBySummaryConditionInfo, function (item) { return item.modelName === "@FieldComponentName"; }), fieldComponentNameClone = $.extend(true, {}, fieldComponentName);
                    fields.forEach(function (fieldName) { fieldComponentNameClone.valuesArray.push({ value: fieldName, displayValue: fieldName }); });
                    conditionInfoClone.splice(conditionInfoClone.indexOf(fieldComponentName), 1, fieldComponentNameClone);
                    return conditionInfoClone;
                };
                SortBySummaryInfoCondition.createNew = function (parent, serializer) {
                    return new SortBySummaryInfoCondition({}, parent, serializer);
                };
                return SortBySummaryInfoCondition;
            })();
            Pivot.SortBySummaryInfoCondition = SortBySummaryInfoCondition;
            var SortBySummaryInfo = (function () {
                function SortBySummaryInfo(model, field, serializer) {
                    var _this = this;
                    this._field = field;
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model, Pivot.sortBySummaryInfo);
                    this.conditions = DevExpress.JS.Utils.deserializeArray(model["Conditions"] || {}, function (item) { return new SortBySummaryInfoCondition(item, _this, serializer); });
                }
                SortBySummaryInfo.prototype._pivotGridFields = function () {
                    return this._field.parentModel().fields;
                };
                SortBySummaryInfo.prototype.getInfo = function () {
                    var _this = this;
                    var fields = this._pivotGridFields();
                    if (!fields) {
                        return Pivot.sortBySummaryInfo;
                    }
                    var sortBySummaryInfoClone = Pivot.sortBySummaryInfo.slice(0), fieldComponentName = Designer.find(Pivot.sortBySummaryInfo, function (item) { return item.modelName === "@FieldComponentName"; }), fieldComponentNameClone = $.extend(true, {}, fieldComponentName);
                    fields().forEach(function (field) {
                        if (field.name() !== _this._field.name()) {
                            fieldComponentNameClone.valuesArray.push({ value: field.name(), displayValue: field.name() });
                        }
                    });
                    sortBySummaryInfoClone.splice(Pivot.sortBySummaryInfo.indexOf(fieldComponentName), 1, fieldComponentNameClone);
                    return sortBySummaryInfoClone;
                };
                SortBySummaryInfo.prototype.fieldsAvailableForCondition = function () {
                    var _this = this;
                    var fields = this._pivotGridFields();
                    if (!fields) {
                        return [];
                    }
                    var result = [];
                    fields().forEach(function (field) {
                        var condition = Designer.find(_this.conditions(), function (item) { return item.fieldComponentName() === field.name(); });
                        if (!condition) {
                            result.push(field.name());
                        }
                    });
                    return result;
                };
                ;
                SortBySummaryInfo.from = function (model, serializer) {
                    return model;
                };
                SortBySummaryInfo.toJSON = function (viewModel, serializer, refs) {
                    return (serializer || new DevExpress.JS.Utils.ModelSerializer()).serialize(viewModel, Pivot.sortBySummaryInfo, refs);
                };
                return SortBySummaryInfo;
            })();
            Pivot.SortBySummaryInfo = SortBySummaryInfo;
            Pivot.summaryTypeValues = [
                { value: "Count", displayValue: "Count", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Count" },
                { value: "Sum", displayValue: "Sum", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Sum" },
                { value: "Min", displayValue: "Min", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Min" },
                { value: "Max", displayValue: "Max", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Max" },
                { value: "Average", displayValue: "Average", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Average" },
                { value: "StdDev", displayValue: "Standard Deviation", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.StdDev" },
                { value: "StdDevp", displayValue: "Standard Deviation for Entire Population", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.StdDevp" },
                { value: "Var", displayValue: "Variation", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Var" },
                { value: "Varp", displayValue: "Variation for Entire Population", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Varp" },
                { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Custom" }
            ], Pivot.summaryType = {
                propertyName: "summaryType", modelName: "@SummaryType", displayName: "Summary Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SummaryType",
                defaultVal: "Sum", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Pivot.summaryTypeValues
            }, Pivot.fieldComponentName = {
                propertyName: "fieldComponentName", modelName: "@FieldComponentName", displayName: "Field", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.Field",
                defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "", displayValue: "(none)", localizationId: 'ChartStringId.WizNoBackImage' }]
            }, Pivot.conditions = {
                propertyName: "conditions", modelName: "Conditions", displayName: "Conditions", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.Conditions", array: true,
                template: "#dxrd-commonCollectionItem",
                editor: { custom: "dxrd-pivot-sortBySummaryInfo-conditions" }
            }, Pivot.field = { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.FieldName", defaultVal: null, editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.customTotalSummaryType = {
                propertyName: "customTotalSummaryType", modelName: "@CustomTotalSummaryType", displayName: "Custom Total Summary Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.CustomTotalSummaryType",
                defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "", displayValue: "(none)", localizationId: 'ChartStringId.WizNoBackImage' }].concat(Pivot.summaryTypeValues)
            };
            Pivot.sortBySummaryInfo = [Pivot.conditions, Pivot.customTotalSummaryType, Pivot.fieldComponentName, Pivot.field, Pivot.summaryType];
            Pivot.sortBySummaryConditionInfo = [
                Pivot.fieldComponentName,
                { modelName: "@Value", propertyName: "value", displayName: "Value", editor: DevExpress.JS.Widgets.editorTemplates.text, localizationId: 'ASPxReportsStringId.FilterEditor_Operand_Type_Value' },
                {
                    modelName: "@Value_type", propertyName: "valueType", displayName: "Type", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "<Null>", valuesArray: [
                        { value: "System.String", displayValue: "String", localizationId: "UtilsUIStringId.Parameter_Type_String" },
                        { value: "System.Byte", displayValue: "Number (8 bit integer)", localizationId: "DataAccessStringId.Type_SByte" },
                        { value: "System.Int16", displayValue: "Number (16 bit integer)", localizationId: "UtilsUIStringId.Parameter_Type_Int16" },
                        { value: "System.Int32", displayValue: "Number (32 bit integer)", localizationId: "UtilsUIStringId.Parameter_Type_Int32" },
                        { value: "System.Int64", displayValue: "Number (64 bit integer)", localizationId: "UtilsUIStringId.Parameter_Type_Int64" },
                        { value: "System.Single", displayValue: "Number (floating-point)", localizationId: "UtilsUIStringId.Parameter_Type_Float" },
                        { value: "System.Double", displayValue: "Number (double-precision floating-point)", localizationId: "UtilsUIStringId.Parameter_Type_Double" },
                        { value: "System.Decimal", displayValue: "Number (decimal)", localizationId: "UtilsUIStringId.Parameter_Type_Decimal" },
                        { value: "System.Boolean", displayValue: "Boolean", localizationId: "UtilsUIStringId.Parameter_Type_Boolean" },
                        { value: "System.Char", displayValue: "Char", localizationId: "DataAccessStringId.Type_Char" },
                        { value: "System.DateTime", displayValue: "Date", localizationId: "UtilsUIStringId.Parameter_Type_DateTime" },
                        { value: "<Null>", displayValue: "<Null>" }
                    ],
                    localizationId: 'DevExpress.XtraPrinting.XlEncryptionOptions.Type' }
            ];
        })(Pivot = Designer.Pivot || (Designer.Pivot = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Pivot;
        (function (Pivot) {
            function comparerFields(firstField, secondField) {
                return firstField.areaIndex() - secondField.areaIndex();
            }
            Pivot.comparerFields = comparerFields;
            var PivotGridFieldViewModel = (function (_super) {
                __extends(PivotGridFieldViewModel, _super);
                function PivotGridFieldViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, Designer.cutRefs(model), parent, serializer);
                    this.controlType = "PivotGridField";
                    this.areaIndexEditable = ko.pureComputed({
                        read: function () { return _this.areaIndex(); },
                        write: function (newValue) {
                            if (newValue >= 0) {
                                var fields = parent["getFieldsFromArea"](_this.area());
                                if (newValue >= fields.length)
                                    return;
                                var currentValue = _this.areaIndex(), delta = newValue < currentValue ? 1 : -1, min = Math.min(newValue, currentValue), max = Math.max(newValue, currentValue);
                                fields.forEach(function (field) {
                                    var fieldAreaIndex = field.areaIndex();
                                    if (min <= fieldAreaIndex && fieldAreaIndex <= max)
                                        field.areaIndex(fieldAreaIndex + delta);
                                });
                                _this.areaIndex(newValue);
                            }
                        }
                    });
                    this._disposables.push(this.area.subscribe(function (newValue) {
                        _this.areaIndex(parent["getFieldsFromArea"](_this.area()).length - 1);
                    }));
                    this.sortBySummaryInfo = new Pivot.SortBySummaryInfo(this.sortBySummaryInfo || {}, this, serializer);
                }
                PivotGridFieldViewModel.createNew = function (parent) {
                    return function () {
                        return new PivotGridFieldViewModel({}, ko.unwrap(parent), null);
                    };
                };
                PivotGridFieldViewModel.prototype.getInfo = function () {
                    return Pivot.pivotGridFieldSerializationsInfo;
                };
                PivotGridFieldViewModel.prototype.getControlFactory = function () {
                    return DevExpress.Designer.Report.controlsFactory;
                };
                PivotGridFieldViewModel.prototype.getPath = function (propertyName) {
                    return Designer.getFullPath(this.parentModel()["getPath"](""), this.parentModel()["dataMember"]());
                };
                PivotGridFieldViewModel.prototype.getDisplayName = function () {
                    return this.caption() || this.fieldName() || this.name() || this["displayName"] && this["displayName"]();
                };
                PivotGridFieldViewModel.fieldHeight = 20;
                return PivotGridFieldViewModel;
            })(Designer.ElementViewModel);
            Pivot.PivotGridFieldViewModel = PivotGridFieldViewModel;
            var PivotGridFieldSurface = (function (_super) {
                __extends(PivotGridFieldSurface, _super);
                function PivotGridFieldSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, null);
                    this.isIntersect = ko.computed(function () { return false; });
                    this.displayText = function () {
                        return control.caption() || control.fieldName() || (control["displayName"]() || "");
                    };
                    this._disposables.push(ko.computed(function () {
                        _this._width(control["width"]() * context.zoom());
                        _this._height(PivotGridFieldViewModel.fieldHeight * context.zoom());
                    }));
                    this.template = "dxrd-pivotgrid-field";
                    this.selectiontemplate = "dxrd-pivotgrid-field-selection";
                    this.area = control.area;
                    this.areaIndex = control.areaIndex;
                    this._disposables.push(this.minWidth = ko.pureComputed(function () {
                        return _this.area() === "ColumnArea" || _this.area() === "FilterArea" ? 100 : 0;
                    }));
                    this._disposables.push(this.positionWidthWithoutZoom = ko.pureComputed(function () {
                        return _this["position"].width() / _this._context.zoom();
                    }));
                }
                return PivotGridFieldSurface;
            })(Designer.Report.ControlSurfaceBase);
            Pivot.PivotGridFieldSurface = PivotGridFieldSurface;
            Pivot.caption = { displayName: "Caption", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.Caption", propertyName: "caption", modelName: "@Caption", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.index = { displayName: "Index", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField.Index", propertyName: "index", modelName: "@Index", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.fieldName = { propertyName: "fieldName", modelName: "@FieldName", displayName: "Data Column Name", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.FieldName", editor: Designer.Widgets.editorTemplates.field }, Pivot.minWidth = { displayName: "Min Width", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.MinWidth", propertyName: "minWidth", modelName: "@MinWidth", defaultVal: 20, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.width = { displayName: "Width", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.Width", propertyName: "width", modelName: "@Width", defaultVal: 100, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.area = {
                displayName: "Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.Area", propertyName: "area", modelName: "@Area", editor: DevExpress.JS.Widgets.editorTemplates.combobox, defaultVal: "FilterArea",
                valuesArray: [
                    { value: "RowArea", displayValue: "Row Area", localizationId: "DevExpress.XtraPivotGrid.PivotArea.RowArea" },
                    { value: "ColumnArea", displayValue: "Column Area", localizationId: "DevExpress.XtraPivotGrid.PivotArea.ColumnArea" },
                    { value: "FilterArea", displayValue: "Filter Area", localizationId: "DevExpress.XtraPivotGrid.PivotArea.FilterArea" },
                    { value: "DataArea", displayValue: "Data Area", localizationId: "DevExpress.XtraPivotGrid.PivotArea.DataArea" },
                ]
            }, Pivot.allowedAreas = {
                propertyName: "allowedAreas", modelName: "@AllowedAreas", displayName: "Allowed Areas", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.AllowedAreas", defaultVal: "All", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "All", displayValue: "All", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.All" },
                    { value: "RowArea", displayValue: "Row Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.RowArea" },
                    { value: "ColumnArea", displayValue: "Column Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.ColumnArea" },
                    { value: "FilterArea", displayValue: "Filter Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.FilterArea" },
                    { value: "DataArea", displayValue: "Data Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.DataArea" }
                ]
            }, Pivot.areaIndex = { propertyName: "areaIndex", modelName: "@AreaIndex", defaultVal: -1 }, Pivot.areaIndexEditable = { propertyName: "areaIndexEditable", displayName: "Area Index", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.AreaIndex", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Pivot.unboundType = {
                propertyName: "unboundType", modelName: "@UnboundType", displayName: "Unbound Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundType", defaultVal: "Bound", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Bound", displayValue: "Bound", localizationId: "DevExpress.Data.UnboundColumnType.Bound" },
                    { value: "Integer", displayValue: "Integer", localizationId: "DevExpress.Data.UnboundColumnType.Integer" },
                    { value: "Decimal", displayValue: "Decimal", localizationId: "DevExpress.Data.UnboundColumnType.Decimal" },
                    { value: "DateTime", displayValue: "DateTime", localizationId: "DevExpress.XtraTreeList.Data.UnboundColumnType.DateTime" },
                    { value: "String", displayValue: "String", localizationId: "DevExpress.Data.UnboundColumnType.String" },
                    { value: "Boolean", displayValue: "Boolean", localizationId: "DevExpress.Data.UnboundColumnType.Boolean" },
                    { value: "Object", displayValue: "Object", localizationId: "DevExpress.Data.UnboundColumnType.Object" }
                ]
            }, Pivot.unboundFieldName = { propertyName: "unboundFieldName", modelName: "@UnboundFieldName", displayName: "Unbound Field Name", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundFieldName", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.unboundExpression = { propertyName: "unboundExpression", modelName: "@UnboundExpression", displayName: "Unbound Expression", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundExpression", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.topValueType = {
                propertyName: "topValueType", modelName: "@TopValueType", displayName: "Top Value Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TopValueType", defaultVal: "Absolute", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Absolute", displayValue: "Absolute", localizationId: "DevExpress.XtraPivotGrid.PivotTopValueType.Absolute" },
                    { value: "Percent", displayValue: "Percent", localizationId: "DevExpress.XtraPivotGrid.PivotTopValueType.Percent" },
                    { value: "Sum", displayValue: "Sum", localizationId: "DevExpress.XtraPivotGrid.PivotTopValueType.Sum" }
                ]
            }, Pivot.topValueShowOthers = { propertyName: "topValueShowOthers", modelName: "@TopValueShowOthers", displayName: "Top Value Show Others", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TopValueShowOthers", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Pivot.topValueCount = { propertyName: "topValueCount", modelName: "@TopValueCount", displayName: "Top Value Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TopValueCount", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.summaryDisplayType = {
                propertyName: "summaryDisplayType", modelName: "@SummaryDisplayType", displayName: "Summary Display Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SummaryDisplayType", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.Default" },
                    { value: "AbsoluteVariation", displayValue: "Absolute Variation", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.AbsoluteVariation" },
                    { value: "PercentVariation", displayValue: "Percent Variation", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentVariation" },
                    { value: "PercentOfColumn", displayValue: "Percent Of Column", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfColumn" },
                    { value: "PercentOfRow", displayValue: "Percent Of Row", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfRow" },
                    { value: "PercentOfColumnGrandTotal", displayValue: "Percent Of Column Grand Total", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfColumnGrandTotal" },
                    { value: "PercentOfRowGrandTotal", displayValue: "Percent Of Row Grand Total", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfRowGrandTotal" },
                    { value: "PercentOfGrandTotal", displayValue: "Percent Of Grand Total", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfGrandTotal" },
                    { value: "RankInColumnSmallestToLargest", displayValue: "Rank In Column Smallest To Largest", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInColumnSmallestToLargest" },
                    { value: "RankInRowSmallestToLargest", displayValue: "Rank In Row Smallest To Largest", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInRowSmallestToLargest" },
                    { value: "RankInColumnLargestToSmallest", displayValue: "Rank In Column Largest To Smallest", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInColumnLargestToSmallest" },
                    { value: "RankInRowLargestToSmallest", displayValue: "Rank In Row Largest To Smallest", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInRowLargestToSmallest" },
                    { value: "Index", displayValue: "Index", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.Index" }
                ]
            }, Pivot.sortOrder = {
                propertyName: "sortOrder", modelName: "@SortOrder", displayName: "Sort Order", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SortOrder", defaultVal: "Ascending", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Ascending", displayValue: "Ascending", localizationId: "DevExpress.XtraPivotGrid.PivotSortOrder.Ascending" }, { value: "Descending", displayValue: "Descending", localizationId: "DevExpress.XtraPivotGrid.PivotSortOrder.Descending" }
                ]
            }, Pivot.sortMode = {
                propertyName: "sortMode", modelName: "@SortMode", displayName: "Sort Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SortMode", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.Default" },
                    { value: "Value", displayValue: "Value", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.Value" },
                    { value: "DisplayText", displayValue: "DisplayText", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.DisplayText" },
                    { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.Custom" },
                    { value: "Key", displayValue: "Key", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.Key" },
                    { value: "ID", displayValue: "ID", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.ID" },
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.None" }
                ]
            }, Pivot.showNewValues = { propertyName: "showNewValues", modelName: "@ShowNewValues", displayName: "Show New Values", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.ShowNewValues", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Pivot.runningTotal = { propertyName: "runningTotal", modelName: "@RunningTotal", displayName: "Running Total", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.RunningTotal", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Pivot.rowValueLineCount = { propertyName: "rowValueLineCount", modelName: "@RowValueLineCount", displayName: "Row Value Line Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridField.RowValueLineCount", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.groupIntervalNumericRange = { propertyName: "groupIntervalNumericRange", modelName: "@GroupIntervalNumericRange", displayName: "Group Interval Numeric Range", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.GroupIntervalNumericRange", defaultVal: 10, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.groupInterval = {
                propertyName: "groupInterval", modelName: "@GroupInterval", displayName: "Group Interval", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField.GroupInterval", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Default" },
                    { value: "Date", displayValue: "Date", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Date" },
                    { value: "DateDay", displayValue: "DateDay", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateDay" },
                    { value: "DateDayOfWeek", displayValue: "Day Of Week", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateDayOfWeek" },
                    { value: "DateDayOfYear", displayValue: "Day Of Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateDayOfYear" },
                    { value: "DateWeekOfMonth", displayValue: "Week Of Month", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateWeekOfMonth" },
                    { value: "DateWeekOfYear", displayValue: "Week Of Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateWeekOfYear" },
                    { value: "DateMonth", displayValue: "Month", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonth" },
                    { value: "DateQuarter", displayValue: "Quarter", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarter" },
                    { value: "DateYear", displayValue: "Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateYear" },
                    { value: "YearAge", displayValue: "Year Age", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.YearAge" },
                    { value: "MonthAge", displayValue: "Month Age", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.MonthAge" },
                    { value: "WeekAge", displayValue: "Week Age", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.WeekAge" },
                    { value: "DayAge", displayValue: "Day Age", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DayAge" },
                    { value: "Alphabetical", displayValue: "Alphabetical", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Alphabetical" },
                    { value: "Numeric", displayValue: "Numeric", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Numeric" },
                    { value: "Hour", displayValue: "Hour", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Hour" },
                    { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Custom" },
                    { value: "Minute", displayValue: "Minute", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Minute" },
                    { value: "Second", displayValue: "Second", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Second" },
                    { value: "DateMonthYear", displayValue: "Month-Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonthYear" },
                    { value: "DateQuarterYear", displayValue: "Quarter-Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarterYear" },
                    { value: "DateHour", displayValue: "Date-Hour", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateHour" },
                    { value: "DateHourMinute", displayValue: "Date-Hour-Minute", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateHourMinute" },
                    { value: "DateHourMinuteSecond", displayValue: "Date-Hour-Minute-Second", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateHourMinuteSecond" }
                ]
            }, Pivot.grandTotalText = { propertyName: "grandTotalText", modelName: "@GrandTotalText", displayName: "Grand Total Text", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.GrandTotalText", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.expandedInFieldsGroup = { propertyName: "expandedInFieldsGroup", modelName: "@ExpandedInFieldsGroup", displayName: "Expanded In Fields Group", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.ExpandedInFieldsGroup", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, Pivot.emptyValueText = { propertyName: "emptyValueText", modelName: "@EmptyValueText", displayName: "Empty Value Text", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.EmptyValueText", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.emptyCellText = { propertyName: "emptyCellText", modelName: "@EmptyCellText", displayName: "Empty Cell Text", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.EmptyCellText", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.displayFolder = { propertyName: "displayFolder", modelName: "@DisplayFolder", displayName: "Display Folder", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.DisplayFolder", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }, Pivot.columnValueLineCount = { propertyName: "columnValueLineCount", modelName: "@ColumnValueLineCount", displayName: "Column Value Line Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridField.ColumnValueLineCount", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, Pivot.totalsVisibility = {
                propertyName: "totalsVisibility", modelName: "@TotalsVisibility", displayName: "Totals Visibility", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalsVisibility", defaultVal: "AutomaticTotals", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "AutomaticTotals", displayValue: "Automatic Totals", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsVisibility.AutomaticTotals" },
                    { value: "CustomTotals", displayValue: "Custom Totals", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsVisibility.CustomTotals" },
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsVisibility.None" }
                ]
            }, Pivot.useNativeFormat = { propertyName: "useNativeFormat", modelName: "@UseNativeFormat", displayName: "Export As Numbers To Excel", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UseNativeFormat", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Designer.Report.defaultBooleanValuesArray }, Pivot.KPIGraphic = {
                propertyName: "KPIGraphic", modelName: "@KPIGraphic", displayName: "KPI Graphic", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.KPIGraphic", defaultVal: "ServerDefined", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.None" },
                    { value: "ServerDefined", displayValue: "Server Defined", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ServerDefined" },
                    { value: "Shapes", displayValue: "Shapes", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Shapes" },
                    { value: "TrafficLights", displayValue: "Traffic Lights", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.TrafficLights" },
                    { value: "RoadSigns", displayValue: "Road Signs", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.RoadSigns" },
                    { value: "Gauge", displayValue: "Gauge", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Gauge" },
                    { value: "ReversedGauge", displayValue: "Reversed Gauge", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedGauge" },
                    { value: "Thermometer", displayValue: "Thermometer", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Thermometer" },
                    { value: "ReversedThermometer", displayValue: "Reversed Thermometer", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedThermometer" },
                    { value: "Cylinder", displayValue: "Cylinder", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Cylinder" },
                    { value: "ReversedCylinder", displayValue: "Reversed Cylinder", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedCylinder" },
                    { value: "Faces", displayValue: "Faces", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Faces" },
                    { value: "VarianceArrow", displayValue: "Variance Arrow", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.VarianceArrow" },
                    { value: "StandardArrow", displayValue: "Standard Arrow", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.StandardArrow" },
                    { value: "StatusArrow", displayValue: "Status Arrow", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.StatusArrow" },
                    { value: "ReversedStatusArrow", displayValue: "Reversed Status Arrow", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedStatusArrow" }
                ]
            };
            var formatType = {
                propertyName: "formatType", modelName: "@FormatType", displayName: "Format Type", localizationId: "DevExpress.Utils.FormatInfo.FormatType", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.Utils.FormatType.None" },
                    { value: "Numeric", displayValue: "Numeric", localizationId: "DevExpress.Utils.FormatType.Numeric" },
                    { value: "DateTime", displayValue: "DateTime", localizationId: "DevExpress.Utils.FormatType.DateTime" },
                    { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.Utils.FormatType.Custom" }
                ]
            }, formatString = { propertyName: "formatString", modelName: "@FormatString", displayName: "Format String", localizationId: "DevExpress.Utils.FormatInfo.FormatString", defaultVal: "", editor: Designer.Widgets.editorTemplates.formatEditor };
            var formatInfo = [formatType, formatString];
            Pivot.cellFormat = { propertyName: "cellFormat", modelName: "CellFormat", displayName: "Cell Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.CellFormat", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Pivot.totalCellFormat = { propertyName: "totalCellFormat", modelName: "TotalCellFormat", displayName: "Total Cell Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalCellFormat", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Pivot.grandTotalCellFormat = { propertyName: "grandTotalCellFormat", modelName: "GrandTotalCellFormat", displayName: "Grand Total Cell Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.GrandTotalCellFormat", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Pivot.valueFormat = { propertyName: "valueFormat", modelName: "ValueFormat", displayName: "Value Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.ValueFormat", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, Pivot.totalValueFormat = { propertyName: "totalValueFormat", modelName: "TotalValueFormat", displayName: "Total Value Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalValueFormat", info: formatInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var textHorizontalAligment = {
                propertyName: "textHorizontalAligment", modelName: "@HAlignment", displayName: "Text Horizontal Aligment", localizationId: "DevExpress.PivotGrid.Printing.PrintTextOptions.HAlignment", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.Utils.HorzAlignment.Default" },
                    { value: "Near", displayValue: "Near", localizationId: "DevExpress.Utils.HorzAlignment.Near" },
                    { value: "Center", displayValue: "Center", localizationId: "DevExpress.Utils.HorzAlignment.Center" },
                    { value: "Far", displayValue: "Far", localizationId: "DevExpress.Utils.HorzAlignment.Far" }
                ]
            }, textVerticalAligment = {
                propertyName: "textVerticalAligment", modelName: "@VAlignment", displayName: "Text Vertical Aligment", localizationId: "DevExpress.PivotGrid.Printing.PrintTextOptions.VAlignment", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.Utils.VertAlignment.Default" },
                    { value: "Top", displayValue: "Top", localizationId: "DevExpress.Utils.VertAlignment.Top" },
                    { value: "Center", displayValue: "Center", localizationId: "DevExpress.Utils.VertAlignment.Center" },
                    { value: "Bottom", displayValue: "Bottom", localizationId: "DevExpress.Utils.VertAlignment.Bottom" }
                ]
            }, trimming = {
                propertyName: "trimming", modelName: "@Trimming", displayName: "Trimming", localizationId: "DevExpress.PivotGrid.Printing.PrintTextOptions.Trimming", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "System.Drawing.StringTrimming.None" },
                    { value: "Character", displayValue: "Character", localizationId: "System.Drawing.StringTrimming.Character" },
                    { value: "Word", displayValue: "Word", localizationId: "System.Drawing.StringTrimming.Word" },
                    { value: "EllipsisCharacter", displayValue: "EllipsisCharacter", localizationId: "System.Drawing.StringTrimming.EllipsisCharacter" },
                    { value: "EllipsisWord", displayValue: "EllipsisWord", localizationId: "System.Drawing.StringTrimming.EllipsisWord" },
                    { value: "EllipsisPath", displayValue: "EllipsisPath", localizationId: "System.Drawing.StringTrimming.EllipsisPath" }
                ]
            }, appearanceWordWrap = {
                propertyName: "wordWrap", modelName: "@WordWrap", displayName: "Word Wrap", localizationId: "DevExpress.PivotGrid.Printing.PrintTextOptions.WordWrap", defaultVal: "NoWrap", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "NoWrap", displayValue: "No Wrap", localizationId: "DevExpress.Utils.WordWrap.NoWrap" },
                    { value: "Wrap", displayValue: "Wrap", localizationId: "DevExpress.Utils.WordWrap.Wrap" }
                ]
            };
            var textOptionsInfo = [textHorizontalAligment, textVerticalAligment, trimming, appearanceWordWrap], textOptions = { propertyName: "textOptions", modelName: "TextOptions", displayName: "Text Options", localizationId: "DevExpress.XtraReports.UI.XRAppearanceObject.TextOptions", info: textOptionsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Pivot.appearanceInfo = [Designer.Report.backColor, Designer.Report.borderColor, Designer.Report.foreColor, Designer.Report.font, textOptions];
            var cellAppearance = { propertyName: "cellAppearance", modelName: "Cell", displayName: "Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Cell", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, totalCellAppearance = { propertyName: "totalCellAppearance", modelName: "TotalCell", displayName: "Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.TotalCell", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, customTotalCellAppearance = { propertyName: "customTotalCellAppearance", modelName: "CustomTotalCell", displayName: "Custom Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.CustomTotalCell", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, grandTotalCellAppearance = { propertyName: "grandTotalCellAppearance", modelName: "GrandTotalCell", displayName: "Grand Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.GrandTotalCell", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, fieldValueAppearance = { propertyName: "fieldValueAppearance", modelName: "FieldValue", displayName: "Field Value", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValue", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, fieldValueTotalAppearance = { propertyName: "fieldValueTotalAppearance", modelName: "FieldValueTotal", displayName: "Field Value Total", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValueTotal", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, fieldValueGrandTotalAppearance = { propertyName: "fieldValueGrandTotalAppearance", modelName: "FieldValueGrandTotal", displayName: "Field Value Grand Total", localizationId: "DevExpress.XtraPivotGrid.PivotGridAppearancesBase.FieldValueGrandTotal", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor }, fieldHeaderAppearance = { propertyName: "fieldHeaderAppearance", modelName: "FieldHeader", displayName: "Field Header", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldHeader", info: Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Pivot.appearancesInfo = [cellAppearance, totalCellAppearance, customTotalCellAppearance, grandTotalCellAppearance, fieldHeaderAppearance, fieldValueAppearance, fieldValueGrandTotalAppearance, fieldValueTotalAppearance];
            var appearances = { propertyName: "appearances", modelName: "Appearance", displayName: "Appearance", localizationId: "DevExpress.XtraPivotGrid.PivotGridField.Appearance", info: Pivot.appearancesInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var allowDrag = { propertyName: "allowDrag", modelName: "@AllowDrag", displayName: "Allow Drag", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowDrag", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Designer.Report.defaultBooleanValuesArray }, allowDragInCustomizationForm = { propertyName: "@allowDragInCustomizationForm", modelName: "AllowDragInCustomizationForm", displayName: "Allow Drag In Customization Form", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Designer.Report.defaultBooleanValuesArray, localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsCustomization.AllowDragInCustomizationForm' }, allowExpand = { propertyName: "allowExpand", modelName: "@AllowExpand", displayName: "Allow Expand", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowExpand", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Designer.Report.defaultBooleanValuesArray }, allowFilter = { propertyName: "allowFilter", modelName: "@AllowFilter", displayName: "Allow Filter", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowFilter", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Designer.Report.defaultBooleanValuesArray }, allowFilterBySummary = { propertyName: "allowFilterBySummary", modelName: "@AllowFilterBySummary", displayName: "Allow Filter By Summary", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowFilterBySummary", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Designer.Report.defaultBooleanValuesArray }, allowRunTimeSummaryChange = { propertyName: "allowRunTimeSummaryChange", modelName: "@AllowRunTimeSummaryChange", displayName: "Allow Run Time Summary Change", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowRunTimeSummaryChange", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, allowSort = { propertyName: "allowSort", modelName: "@AllowSort", displayName: "Allow Sort", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowSort", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Designer.Report.defaultBooleanValuesArray }, allowSortBySummary = { propertyName: "allowSortBySummary", modelName: "@AllowSortBySummary", displayName: "Allow Sort By Summary", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowSortBySummary", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Designer.Report.defaultBooleanValuesArray }, groupFilterMode = { propertyName: "groupFilterMode", modelName: "@GroupFilterMode", displayName: "Group Filter Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.GroupFilterMode", defaultVal: null, editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "List", displayValue: "List", localizationId: "DevExpress.XtraPivotGrid.PivotGroupFilterMode.List" }, { value: "Tree", displayValue: "Tree", localizationId: "DevExpress.XtraPivotGrid.PivotGroupFilterMode.Tree" }] }, hideEmptyVariationItems = { propertyName: "hideEmptyVariationItems", modelName: "@HideEmptyVariationItems", displayName: "Hide Empty Variation Items", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.HideEmptyVariationItems", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showCustomTotals = { propertyName: "showCustomTotals", modelName: "@ShowCustomTotals", displayName: "Show Custom Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowCustomTotals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showGrandTotal = { propertyName: "showGrandTotal", modelName: "@ShowGrandTotal", displayName: "Show Grand Total", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowGrandTotal", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showSummaryTypeName = { propertyName: "showSummaryTypeName", modelName: "@ShowSummaryTypeName", displayName: "Show Summary Type Name", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowSummaryTypeName", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showTotals = { propertyName: "showTotals", modelName: "@ShowTotals", displayName: "Show Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowTotals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showValues = { propertyName: "showValues", modelName: "@ShowValues", displayName: "Show Values", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowValues", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            Pivot.unboundExpressionMode = {
                propertyName: "unboundExpressionMode", modelName: "@UnboundExpressionMode", displayName: "Unbound Expression Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundExpressionMode", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "UseSummaryValues", displayValue: "Use Summary Values", localizationId: "DevExpress.XtraPivotGrid.UnboundExpressionMode.UseSummaryValues" },
                    { value: "DataSource", displayValue: "Data Source", localizationId: "DevExpress.XtraPivotGrid.UnboundExpressionMode.DataSource" },
                    { value: "UseAggregateFunctions", displayValue: "Use Aggregate Functions", localizationId: "DevExpress.XtraPivotGrid.UnboundExpressionMode.UseAggregateFunctions" },
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.UnboundExpressionMode.Default" }
                ]
            };
            var optionsInfo = [allowDrag, allowDragInCustomizationForm, allowExpand, allowFilter, allowFilterBySummary, allowRunTimeSummaryChange, allowSort, allowSortBySummary, groupFilterMode,
                hideEmptyVariationItems, showCustomTotals, showGrandTotal, showSummaryTypeName, showTotals, showValues];
            Pivot.options = { propertyName: "options", modelName: "Options", displayName: "Options", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.Options", info: optionsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Pivot.sortBySummary = { propertyName: "sortBySummaryInfo", modelName: "SortBySummaryInfo", displayName: "Sort By Summary Info", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SortBySummaryInfo", from: Pivot.SortBySummaryInfo.from, toJsonObject: Pivot.SortBySummaryInfo.toJSON, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Pivot.pivotGridFieldSerializationsInfo = [
                appearances,
                Pivot.allowedAreas, Pivot.area, Pivot.areaIndex, Pivot.areaIndexEditable,
                Pivot.caption, Pivot.cellFormat, Pivot.columnValueLineCount,
                Pivot.displayFolder, Pivot.emptyCellText, Pivot.emptyValueText, Pivot.expandedInFieldsGroup,
                Pivot.fieldName, Pivot.summaryType, Pivot.topValueCount, Pivot.topValueShowOthers,
                Pivot.grandTotalCellFormat, Pivot.grandTotalText, Pivot.groupInterval, Pivot.groupIntervalNumericRange,
                Pivot.index, Pivot.KPIGraphic, Pivot.minWidth, Pivot.width, Pivot.rowValueLineCount, Pivot.runningTotal,
                Pivot.showNewValues, Pivot.sortMode, Pivot.sortOrder, Pivot.summaryDisplayType,
                Pivot.topValueType, Pivot.totalCellFormat, Pivot.totalValueFormat, Pivot.totalsVisibility,
                Pivot.unboundExpression, Pivot.unboundExpressionMode, Pivot.unboundFieldName, Pivot.unboundType, Pivot.useNativeFormat,
                Pivot.valueFormat, Pivot.options, Pivot.sortBySummary
            ].concat(Designer.Report.baseControlProperties), Pivot.popularPropertiesPivotGridField = ["area", "areaIndexEditable", "fieldName", "caption", "groupInterval", "summaryType", "summaryDisplayType", "unboundType", "unboundExpression"];
            Pivot.pivotGridFieldsSerializable = { displayName: "Fields", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.Fields", propertyName: "fields", modelName: "Fields", array: true, editor: Designer.Report.editorTemplates.pivotGridFields, template: "#dxrd-collectionItemWithAccordion", };
        })(Pivot = Designer.Pivot || (Designer.Pivot = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRPivotGridViewModel = (function (_super) {
                __extends(XRPivotGridViewModel, _super);
                function XRPivotGridViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.fields = DevExpress.JS.Utils.deserializeArray(model && model.Fields || [], function (item) { return new Designer.Pivot.PivotGridFieldViewModel(item, _this, serializer); });
                    this._disposables.push(this.fields.subscribe(function () {
                        ["FilterArea", "DataArea", "ColumnArea", "RowArea"].forEach(function (area) {
                            var areaFields = _this.getFieldsFromArea(area);
                            for (var index = 0; index < areaFields.length; index++) {
                                areaFields[index].areaIndex(index);
                            }
                        });
                    }));
                    this.addFieldToArea = function (area) {
                        if (_this.lockedInUserDesigner())
                            return;
                        var newField = new Designer.Pivot.PivotGridFieldViewModel({ "@ControlType": "PivotGridField", "@Area": area }, _this, serializer);
                        newField.index(_this.fields().length);
                        newField.areaIndex(_this.getFieldsFromArea(area).length);
                        _this.fields.push(newField);
                    };
                    this._initCriteriaString();
                }
                XRPivotGridViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.fields);
                    this.resetObservableArray(this.fields);
                };
                XRPivotGridViewModel.prototype._initCriteriaString = function () {
                    var _this = this;
                    this.prefilter.criteriaString = new DevExpress.JS.Widgets.FilterStringOptions(this.prefilter._criteriaString);
                    this.prefilter.criteriaString.helper.canChoiceParameters = false;
                    this.prefilter.criteriaString.helper.canChoiceProperty = false;
                    this.prefilter.criteriaString.helper.getDisplayPropertyName = function (path, name) {
                        var field = Designer.find(_this.fields.peek(), function (f) { return f.name() === name; });
                        return $.Deferred()
                            .resolve(field ? field.getDisplayName() : name)
                            .promise();
                    };
                    this.prefilter.parent = this;
                };
                XRPivotGridViewModel.prototype.removeChild = function (selectedField) {
                    this.fields.splice(this.fields().indexOf(selectedField), 1);
                };
                XRPivotGridViewModel.prototype.getFieldsFromArea = function (area) {
                    var result = [];
                    result.push.apply(result, this.fields().filter(function (field) { return field.area() === area; }));
                    return result.sort(Designer.Pivot.comparerFields);
                };
                XRPivotGridViewModel.prototype.getPath = function (propertyName) {
                    return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
                };
                return XRPivotGridViewModel;
            })(Report.ControlViewModel);
            Report.XRPivotGridViewModel = XRPivotGridViewModel;
            var PivotGridSurface = (function (_super) {
                __extends(PivotGridSurface, _super);
                function PivotGridSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.contenttemplate = "dxrd-pivotgrid-content";
                    this.selectiontemplate = "dxrd-pivotgrid-selection";
                    this._disposables.push(this.filterFields = ko.pureComputed(function () {
                        return _this.getAreaFields("FilterArea");
                    }));
                    this._disposables.push(this.dataFields = ko.pureComputed(function () {
                        return _this.getAreaFields("DataArea");
                    }));
                    this._disposables.push(this.columnFields = ko.pureComputed(function () {
                        return _this.getAreaFields("ColumnArea");
                    }));
                    this._disposables.push(this.rowFields = ko.pureComputed(function () {
                        return _this.getAreaFields("RowArea");
                    }));
                    this._disposables.push(this.totalsHeight = ko.pureComputed(function () {
                        return _this.columnFields().length > 0 ? _this.columnFields().length * Designer.Pivot.PivotGridFieldViewModel.fieldHeight : Designer.Pivot.PivotGridFieldViewModel.fieldHeight;
                    }));
                    this._disposables.push(this.rowHeaderHeight = ko.pureComputed(function () {
                        return _this.totalsHeight() + (_this.dataFields().length > 0 ? Designer.Pivot.PivotGridFieldViewModel.fieldHeight : 0) + 8;
                    }));
                    this._disposables.push(this.totalsDataFieldWidth = ko.pureComputed(function () {
                        return _this.getTotalsAreaFieldWidth("DataArea", context.zoom());
                    }));
                    this._disposables.push(this.totalsRowFieldWidth = ko.pureComputed(function () {
                        return _this.getTotalsAreaFieldWidth("RowArea", context.zoom());
                    }));
                }
                PivotGridSurface.prototype._getChildrenHolderName = function () { return "fields"; };
                PivotGridSurface.prototype.getAreaFields = function (area) {
                    return this.fields().filter(function (field) { return field.area() === area; }).sort(Designer.Pivot.comparerFields);
                };
                PivotGridSurface.prototype.getTotalsAreaFieldWidth = function (area, zoom) {
                    var total = 0, areaFields = this.getAreaFields(area);
                    areaFields.forEach(function (field) { total += field.rect().width; });
                    return areaFields.length > 0 ? total / zoom : 100;
                };
                PivotGridSurface.prototype.getAdornTemplate = function () {
                    return this.isIntersect() ? "dxrd-intersect" : "";
                };
                PivotGridSurface.prototype.isThereIntersectionWithChildCollection = function () {
                    return false;
                };
                return PivotGridSurface;
            })(Report.ControlSurface);
            Report.PivotGridSurface = PivotGridSurface;
            var PivotGridActions = (function (_super) {
                __extends(PivotGridActions, _super);
                function PivotGridActions() {
                    _super.call(this);
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Insert Field in Filter Area",
                            displayText: function () { return Designer.getLocalization("Insert Field in Filter Area", 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheFilterArea'); },
                            imageClassName: "dxrd-image-actions-add_field_to_filter_area",
                            imageTemplateName: "dxrd-svg-actions-add_field_to_filter_area",
                            clickAction: function (model) { model["addFieldToArea"]("FilterArea"); }
                        },
                        {
                            text: "Insert Field in Data Area",
                            displayText: function () { return Designer.getLocalization("Insert Field in Data Area", 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheDataArea'); },
                            imageClassName: "dxrd-image-actions-add_field_to_data_area",
                            imageTemplateName: "dxrd-svg-actions-add_field_to_data_area",
                            clickAction: function (model) { model["addFieldToArea"]("DataArea"); }
                        },
                        {
                            text: "Insert Field in Column Area",
                            displayText: function () { return Designer.getLocalization("Insert Field in Column Area", 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheColumnArea'); },
                            imageClassName: "dxrd-image-actions-add_field_to_column_area",
                            imageTemplateName: "dxrd-svg-actions-add_field_to_column_area",
                            clickAction: function (model) { model["addFieldToArea"]("ColumnArea"); }
                        },
                        {
                            text: "Insert Field in Row Area",
                            displayText: function () { return Designer.getLocalization("Insert Field in Row Area", 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheRowArea'); },
                            imageClassName: "dxrd-image-actions-add_field_to_row_area",
                            imageTemplateName: "dxrd-svg-actions-add_field_to_row_area",
                            clickAction: function (model) { model["addFieldToArea"]("RowArea"); }
                        }
                    ]);
                }
                PivotGridActions.prototype.condition = function (context) {
                    return context instanceof XRPivotGridViewModel;
                };
                return PivotGridActions;
            })(Designer.BaseActionsProvider);
            Report.PivotGridActions = PivotGridActions;
            var linesAppearance = { propertyName: "linesAppearance", modelName: "Lines", displayName: "Lines", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Lines", info: Designer.Pivot.appearanceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.pivotGridAppearances = { propertyName: "appearances", modelName: "Appearance", displayName: "Appearance", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.Appearance", info: Designer.Pivot.appearancesInfo.concat(linesAppearance), editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var cellStyleName = { propertyName: "cellStyleName", modelName: "@CellStyleName", displayName: "Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Cell", editor: Report.editorTemplates.style, defaultVal: null }, customTotalCellStyleName = { propertyName: "customTotalCellStyleName", modelName: "@CustomTotalCellStyleName", displayName: "Custom Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.CustomTotalCell", editor: Report.editorTemplates.style, defaultVal: null }, fieldHeaderStyleName = { propertyName: "fieldHeaderStyleName", modelName: "@FieldHeaderStyleName", displayName: "Field Header", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldHeader", editor: Report.editorTemplates.style, defaultVal: null }, fieldValueGrandTotalStyleName = { propertyName: "fieldValueGrandTotalStyleName", modelName: "@FieldValueGrandTotalStyleName", displayName: "Field Value Grand Total", localizationId: "DevExpress.XtraPivotGrid.PivotGridAppearancesBase.FieldValueGrandTotal", editor: Report.editorTemplates.style, defaultVal: null }, fieldValueStyleName = { propertyName: "fieldValueStyleName", modelName: "@FieldValueStyleName", displayName: "Field Value", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValue", editor: Report.editorTemplates.style, defaultVal: null }, fieldValueTotalStyleName = { propertyName: "fieldValueTotalStyleName", modelName: "@FieldValueTotalStyleName", displayName: "Field Value Total", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValueTotal", editor: Report.editorTemplates.style, defaultVal: null }, filterSeparatorStyleName = { propertyName: "filterSeparatorStyleName", modelName: "@FilterSeparatorStyleName", displayName: "Filter Separator", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FilterSeparator", editor: Report.editorTemplates.style, defaultVal: null }, grandTotalCellStyleName = { propertyName: "grandTotalCellStyleName", modelName: "@GrandTotalCellStyleName", displayName: "Grand Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.GrandTotalCell", editor: Report.editorTemplates.style, defaultVal: null }, headerGroupLineStyleName = { propertyName: "headerGroupLineStyleName", modelName: "@HeaderGroupLineStyleName", displayName: "Header Group Line", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.HeaderGroupLine", editor: Report.editorTemplates.style, defaultVal: null }, linesStyleName = { propertyName: "linesStyleName", modelName: "@LinesStyleName", displayName: "Lines", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Lines", editor: Report.editorTemplates.style, defaultVal: null }, totalCellStyleName = { propertyName: "totalCellStyleName", modelName: "@TotalCellStyleName", displayName: "Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.TotalCell", editor: Report.editorTemplates.style, defaultVal: null };
            Report.pivotGridStyles = [cellStyleName, customTotalCellStyleName, fieldHeaderStyleName, fieldValueGrandTotalStyleName, fieldValueStyleName, fieldValueTotalStyleName, filterSeparatorStyleName,
                grandTotalCellStyleName, headerGroupLineStyleName, linesStyleName, totalCellStyleName];
            var criteriaString = { propertyName: "_criteriaString", modelName: "@CriteriaString" };
            var criteriaStringEditable = { propertyName: "criteriaString", displayName: "Criteria", localizationId: "DevExpress.XtraPivotGrid.Prefilter.Criteria", defaultVal: "", editor: Report.editorTemplates.pivotCriteria };
            var enabled = { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", localizationId: "DevExpress.XtraPivotGrid.PrefilterBase.Enabled", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool };
            var prefilterSerializationsInfo = [criteriaString, criteriaStringEditable, enabled];
            Report.prefilter = { propertyName: "prefilter", modelName: "Prefilter", displayName: "Prefilter", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.Prefilter", info: prefilterSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var autoTransposeChart = { propertyName: "autoTransposeChart", modelName: "@AutoTransposeChart", displayName: "Auto Transpose Chart", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.AutoTransposeChart", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, dataProvideMode = {
                propertyName: "dataProvideMode", modelName: "@DataProvideMode", displayName: "Data Provide Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.DataProvideMode", defaultVal: "ProvideLastLevelData", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "ProvideLastLevelData", displayValue: "Provide Last Level Data", localizationId: "DevExpress.XtraPivotGrid.PivotChartDataProvideMode.ProvideLastLevelData" },
                    { value: "UseCustomSettings", displayValue: "Use Custom Settings", localizationId: "DevExpress.XtraPivotGrid.PivotChartDataProvideMode.UseCustomSettings" }
                ]
            }, dataProvidePriority = {
                propertyName: "dataProvidePriority", modelName: "@DataProvidePriority", displayName: "Data Provide Priority", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.DataProvidePriority", defaultVal: "Rows", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Columns", displayValue: "Columns", localizationId: "DevExpress.XtraPivotGrid.PivotChartDataProvidePriority.Columns" },
                    { value: "Rows", displayValue: "Rows", localizationId: "DevExpress.XtraPivotGrid.PivotChartDataProvidePriority.Rows" }
                ]
            }, fieldValuesProvideMode = {
                propertyName: "fieldValuesProvideMode", modelName: "@FieldValuesProvideMode", displayName: "Field Values Provide Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.FieldValuesProvideMode", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.PivotChartFieldValuesProvideMode.Default" },
                    { value: "DisplayText", displayValue: "Display Text", localizationId: "DevExpress.XtraPivotGrid.PivotChartFieldValuesProvideMode.DisplayText" },
                    { value: "Value", displayValue: "Value", localizationId: "DevExpress.XtraPivotGrid.PivotChartFieldValuesProvideMode.Value" }
                ]
            }, maxAllowedPointCountInSeries = { propertyName: "maxAllowedPointCountInSeries", modelName: "@MaxAllowedPointCountInSeries", displayName: "Max Allowed Point Count In Series", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.MaxAllowedPointCountInSeries", defaultVal: 100, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, maxAllowedSeriesCount = { propertyName: "maxAllowedSeriesCount", modelName: "@MaxAllowedSeriesCount", displayName: "Max Allowed Series Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.MaxAllowedSeriesCount", defaultVal: 10, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, provideColumnCustomTotals = { propertyName: "provideColumnCustomTotals", modelName: "@ProvideColumnCustomTotals", displayName: "Provide Column Custom Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideColumnCustomTotals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideColumnGrandTotals = { propertyName: "provideColumnGrandTotals", modelName: "@ProvideColumnGrandTotals", displayName: "Provide Column Grand Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideColumnGrandTotals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideColumnTotals = { propertyName: "provideColumnTotals", modelName: "@ProvideColumnTotals", displayName: "Provide Column Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideColumnTotals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideDataByColumns = { propertyName: "provideDataByColumns", modelName: "@ProvideDataByColumns", displayName: "Provide Data By Columns", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideDataByColumns", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideDataFieldsOnSeries = { propertyName: "provideDataFieldsOnSeries", modelName: "@ProvideDataFieldsOnSeries", displayName: "Provide Data Fields On Series", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideDataFieldsOnSeries", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideEmptyCells = { propertyName: "provideEmptyCells", modelName: "@ProvideEmptyCells", displayName: "Provide Empty Cells", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideEmptyCells", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideRowCustomTotals = { propertyName: "provideRowCustomTotals", modelName: "@ProvideRowCustomTotals", displayName: "Provide Row Custom Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideRowCustomTotals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideRowGrandTotals = { propertyName: "provideRowGrandTotals", modelName: "@ProvideRowGrandTotals", displayName: "Provide Row Grand Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideRowGrandTotals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, provideRowTotals = { propertyName: "provideRowTotals", modelName: "@ProvideRowTotals", displayName: "Provide Row Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideRowTotals", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, optionsChartDataSourceInfo = [autoTransposeChart, dataProvideMode, dataProvidePriority, fieldValuesProvideMode, maxAllowedPointCountInSeries,
                maxAllowedSeriesCount, provideColumnCustomTotals, provideColumnGrandTotals, provideColumnTotals, provideDataByColumns, provideDataFieldsOnSeries, provideEmptyCells,
                provideRowCustomTotals, provideRowGrandTotals, provideRowTotals], optionsChartDataSource = { propertyName: "optionsChartDataSource", modelName: "OptionsChartDataSource", displayName: "Options Chart Data Source", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsChartDataSource", info: optionsChartDataSourceInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var allowCrossGroupVariation = { propertyName: "allowCrossGroupVariation", modelName: "@AllowCrossGroupVariation", displayName: "Allow Cross Group Variation", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.AllowCrossGroupVariation", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, autoExpandGroups = { propertyName: "autoExpandGroups", modelName: "@AutoExpandGroups", displayName: "Aut oExpand Groups", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.AutoExpandGroups", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Report.defaultBooleanValuesArray }, caseSensitive = { propertyName: "caseSensitive", modelName: "@CaseSensitive", displayName: "Case Sensitive", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.CaseSensitive", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, dataFieldUnboundExpressionMode = {
                propertyName: "dataFieldUnboundExpressionMode", modelName: "@DataFieldUnboundExpressionMode", displayName: "Data Field Unbound Expression Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.DataFieldUnboundExpressionMode", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.DataFieldUnboundExpressionMode.Default" },
                    { value: "UseSummaryValues", displayValue: "Use Summary Values", localizationId: "DevExpress.XtraPivotGrid.DataFieldUnboundExpressionMode.UseSummaryValues" }
                ]
            }, drillDownMaxRowCount = { propertyName: "DrillDownMaxRowCount", modelName: "@DrillDownMaxRowCount", displayName: "Drill Down Max Row Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.DrillDownMaxRowCount", defaultVal: -1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, filterByVisibleFieldsOnly = { propertyName: "filterByVisibleFieldsOnly", modelName: "@FilterByVisibleFieldsOnly", displayName: "Filter By Visible Fields Only", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.FilterByVisibleFieldsOnly", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, dataProcessingEngine = {
                propertyName: "dataProcessingEngine", modelName: "@DataProcessingEngine", displayName: "Data Processing Engine", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.DataProcessingEngine", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.PivotDataProcessingEngine.Default" },
                    { value: "Legacy", displayValue: "Legacy", localizationId: "DevExpress.XtraPivotGrid.PivotDataProcessingEngine.Legacy" },
                    { value: "LegacyOptimized", displayValue: "Legacy Optimized", localizationId: "DevExpress.XtraPivotGrid.PivotDataProcessingEngine.LegacyOptimized" }
                ]
            }, optionsDataInfo = [allowCrossGroupVariation, autoExpandGroups, caseSensitive, dataFieldUnboundExpressionMode, drillDownMaxRowCount, filterByVisibleFieldsOnly, dataProcessingEngine], optionsData = { propertyName: "optionsData", modelName: "OptionsData", displayName: "Data Options", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsData", info: optionsDataInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var area = {
                propertyName: "area", modelName: "@Area", displayName: "Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataField.Area", defaultVal: "None", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPivotGrid.PivotDataArea.None" },
                    { value: "ColumnArea", displayValue: "Column Area", localizationId: "DevExpress.XtraPivotGrid.PivotDataArea.ColumnArea" },
                    { value: "RowArea", displayValue: "Row Area", localizationId: "DevExpress.XtraPivotGrid.PivotDataArea.RowArea" }
                ]
            }, areaIndex = { propertyName: "areaIndex", modelName: "@AreaIndex", displayName: "Area Index", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataField.AreaIndex", defaultVal: -1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, columnValueLineCount = { propertyName: "columnValueLineCount", modelName: "@ColumnValueLineCount", displayName: "Column Value Line Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataFieldEx.ColumnValueLineCount", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, fieldNaming = {
                propertyName: "fieldNaming", modelName: "@FieldNaming", displayName: "Field Naming", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataField.FieldNaming", defaultVal: "FieldName", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "FieldName", displayValue: "Field Name", localizationId: "DevExpress.XtraPivotGrid.DataFieldNaming.FieldName" },
                    { value: "Name", displayValue: "Name", localizationId: "DevExpress.XtraPivotGrid.DataFieldNaming.Name" }
                ]
            }, rowHeaderWidth = { propertyName: "rowHeaderWidth", modelName: "@RowHeaderWidth", displayName: "Row Header Width", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataField.RowHeaderWidth", defaultVal: 100, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, rowValueLineCount = { propertyName: "rowValueLineCount", modelName: "@RowValueLineCount", displayName: "Row Value Line Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataFieldEx.RowValueLineCount", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, optionsDataFieldInfo = [area, areaIndex, Designer.Pivot.caption, columnValueLineCount, fieldNaming, rowHeaderWidth, rowValueLineCount], optionsDataField = { propertyName: "optionsDataField", modelName: "OptionsDataField", displayName: "Data Field Options", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsDataField", info: optionsDataFieldInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var columnFieldValueSeparator = { propertyName: "columnFieldValueSeparator", modelName: "@ColumnFieldValueSeparator", displayName: "Column Field Value Separator", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.ColumnFieldValueSeparator", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, columnHeaderPaddingBottom = { propertyName: "columnHeaderPaddingBottom", modelName: "@ColumnHeaderPaddingBottom", displayName: "Column Header Padding Bottom", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.ColumnHeaderPaddingBottom", defaultVal: -1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, filterSeparatorBarPadding = { propertyName: "filterSeparatorBarPadding", modelName: "@FilterSeparatorBarPadding", displayName: "Filter Separator Bar Padding", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.FilterSeparatorBarPadding", defaultVal: -1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, mergeColumnFieldValues = { propertyName: "mergeColumnFieldValues", modelName: "@MergeColumnFieldValues", displayName: "Merge Column Field Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.MergeColumnFieldValues", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, mergeRowFieldValues = { propertyName: "mergeRowFieldValues", modelName: "@MergeRowFieldValues", displayName: "Merge Row Field Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.MergeRowFieldValues", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printColumnFieldValues = { propertyName: "printColumnFieldValues", modelName: "@PrintColumnFieldValues", displayName: "Print Column FieldValues", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintColumnFieldValues", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printColumnHeaders = { propertyName: "printColumnHeaders", modelName: "@PrintColumnHeaders", displayName: "Print Column Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintColumnHeaders", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Report.defaultBooleanValuesArray }, printDataHeaders = { propertyName: "printDataHeaders", modelName: "@PrintDataHeaders", displayName: "Print Data Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintDataHeaders", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Report.defaultBooleanValuesArray }, printFilterHeaders = { propertyName: "printFilterHeaders", modelName: "@PrintFilterHeaders", displayName: "Print Filter Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintFilterHeaders", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Report.defaultBooleanValuesArray }, printHeadersOnEveryPage = { propertyName: "printHeadersOnEveryPage", modelName: "@PrintHeadersOnEveryPage", displayName: "Print Headers on Every Page", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintHeadersOnEveryPage", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printColumnAreaOnEveryPage = { propertyName: "printColumnAreaOnEveryPage", modelName: "@PrintColumnAreaOnEveryPage", displayName: "Print Column Area on Every Page", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintColumnAreaOnEveryPage", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printRowAreaOnEveryPage = { propertyName: "printRowAreaOnEveryPage", modelName: "@PrintRowAreaOnEveryPage", displayName: "Print Row Area on Every Page", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintRowAreaOnEveryPage", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printHorzLines = { propertyName: "printHorzLines", modelName: "@PrintHorzLines", displayName: "Print Horizontal Lines", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintHorzLines", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Report.defaultBooleanValuesArray }, printRowFieldValues = { propertyName: "printRowFieldValues", modelName: "@PrintRowFieldValues", displayName: "Print Row FieldValues", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintRowFieldValues", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printRowHeaders = { propertyName: "printRowHeaders", modelName: "@PrintRowHeaders", displayName: "Print Row Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintRowHeaders", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Report.defaultBooleanValuesArray }, printUnusedFilterFields = { propertyName: "printUnusedFilterFields", modelName: "@PrintUnusedFilterFields", displayName: "Print Unused Filter Fields", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintUnusedFilterFields", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, printVertLines = { propertyName: "printVertLines", modelName: "@PrintVertLines", displayName: "Print Vertical Lines", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintVertLines", defaultVal: "Default", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: Report.defaultBooleanValuesArray }, rowFieldValueSeparator = { propertyName: "rowFieldValueSeparator", modelName: "@RowFieldValueSeparator", displayName: "Row Field Value Separator", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.RowFieldValueSeparator", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, usePrintAppearance = { propertyName: "usePrintAppearance", modelName: "@UsePrintAppearance", displayName: "Use Print Appearance", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.UsePrintAppearance", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, optionsPrintInfo = [columnFieldValueSeparator, columnHeaderPaddingBottom, filterSeparatorBarPadding, mergeColumnFieldValues, mergeRowFieldValues, printColumnAreaOnEveryPage, printColumnFieldValues, printColumnHeaders, printDataHeaders, printFilterHeaders,
                printHeadersOnEveryPage, printHorzLines, printRowFieldValues, printRowHeaders, printRowAreaOnEveryPage, printUnusedFilterFields, printVertLines, rowFieldValueSeparator, usePrintAppearance], optionsPrint = { propertyName: "optionsPrint", modelName: "OptionsPrint", displayName: "Print Options", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsPrint", info: optionsPrintInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var columnTotalsLocation = { propertyName: "columnTotalsLocation", modelName: "@ColumnTotalsLocation", displayName: "Column Totals Location", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ColumnTotalsLocation", defaultVal: "Far", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Near", displayValue: "Near", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsLocation.Near" }, { value: "Far", displayValue: "Far ", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsLocation.Far" }] }, groupFieldsInCustomizationWindow = { propertyName: "groupFieldsInCustomizationWindow", modelName: "@GroupFieldsInCustomizationWindow", displayName: "Group Fields in the Customization Window", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsView.GroupFieldsInCustomizationWindow", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, rowTotalsLocation = {
                propertyName: "rowTotalsLocation", modelName: "@RowTotalsLocation", displayName: "Row Totals Location", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.RowTotalsLocation", defaultVal: "Far", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "Near", displayValue: "Near", localizationId: "DevExpress.XtraPivotGrid.PivotRowTotalsLocation.Near" },
                    { value: "Far", displayValue: "Far", localizationId: "DevExpress.XtraPivotGrid.PivotRowTotalsLocation.Far" },
                    { value: "Tree", displayValue: "Tree", localizationId: "DevExpress.XtraPivotGrid.PivotRowTotalsLocation.Tree" }
                ]
            }, rowTreeOffset = { propertyName: "rowTreeOffset", modelName: "@RowTreeOffset", displayName: "Row Tree Offset", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.RowTreeOffset", defaultVal: 21, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, rowTreeWidth = { propertyName: "rowTreeWidth", modelName: "@RowTreeWidth", displayName: "Row Tree Width", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.RowTreeWidth", defaultVal: 100, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, showColumnGrandTotalHeader = { propertyName: "showColumnGrandTotalHeader", modelName: "@ShowColumnGrandTotalHeader", displayName: "Show Column Grand Total Header", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnGrandTotalHeader", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showColumnGrandTotals = { propertyName: "showColumnGrandTotals", modelName: "@ShowColumnGrandTotals", displayName: "Show Column Grand Totals", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnGrandTotals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showColumnHeaders = { propertyName: "showColumnHeaders", modelName: "@ShowColumnHeaders", displayName: "Show Column Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnHeaders", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showColumnTotals = { propertyName: "showColumnTotals", modelName: "@ShowColumnTotals", displayName: "Show Column Totals", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnTotals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showCustomTotalsForSingleValues = { propertyName: "showCustomTotalsForSingleValues", modelName: "@ShowCustomTotalsForSingleValues", displayName: "Show Custom Totals For Single Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowCustomTotalsForSingleValues", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showDataHeaders = { propertyName: "showDataHeaders", modelName: "@ShowDataHeaders", displayName: "Show Data Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowDataHeaders", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showFilterHeaders = { propertyName: "showFilterHeaders", modelName: "@ShowFilterHeaders", displayName: "Show Filter Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowFilterHeaders", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showFilterSeparatorBar = { propertyName: "showFilterSeparatorBar", modelName: "@ShowFilterSeparatorBar", displayName: "Show Filter Separator Bar", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowFilterSeparatorBar", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showGrandTotalsForSingleValues = { propertyName: "showGrandTotalsForSingleValues", modelName: "@ShowGrandTotalsForSingleValues", displayName: "Show Grand Totals For Single Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowGrandTotalsForSingleValues", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showHorzLines = { propertyName: "showHorzLines", modelName: "@ShowHorzLines", displayName: "Show Horz Lines", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowHorzLines", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showRowGrandTotalHeader = { propertyName: "showRowGrandTotalHeader", modelName: "@ShowRowGrandTotalHeader", displayName: "Show Row Grand Total Header", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowGrandTotalHeader", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showRowGrandTotals = { propertyName: "showRowGrandTotals", modelName: "@ShowRowGrandTotals", displayName: "Show Row Grand Totals", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowGrandTotals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showRowHeaders = { propertyName: "showRowHeaders", modelName: "@ShowRowHeaders", displayName: "Show Row Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowHeaders", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showRowTotals = { propertyName: "showRowTotals", modelName: "@ShowRowTotals", displayName: "Show Row Totals", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowTotals", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showTotalsForSingleValues = { propertyName: "showTotalsForSingleValues", modelName: "@ShowTotalsForSingleValues", displayName: "Show Totals For Single Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowTotalsForSingleValues", defaultVal: false, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, showVertLines = { propertyName: "showVertLines", modelName: "@ShowVertLines", displayName: "Show Vert Lines", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowVertLines", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool }, optionsViewInfo = [columnTotalsLocation, groupFieldsInCustomizationWindow, rowTotalsLocation, rowTreeOffset, rowTreeWidth, showColumnGrandTotalHeader, showColumnGrandTotals, showColumnHeaders, showColumnTotals, showCustomTotalsForSingleValues,
                showDataHeaders, showFilterHeaders, showFilterSeparatorBar, showGrandTotalsForSingleValues, showHorzLines, showRowGrandTotalHeader, showRowGrandTotals, showRowHeaders, showRowTotals,
                showTotalsForSingleValues, showVertLines], optionsView = { propertyName: "optionsView", modelName: "OptionsView", displayName: "View Options", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsView", info: optionsViewInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.pivotGridOptions = [optionsChartDataSource, optionsDataField, optionsData, optionsPrint, optionsView];
            Report.pivotGridSerializationsInfo = [
                Report.pivotGridAppearances,
                Report.anchorVertical, Report.anchorHorizontal, Report.dataSource, Report.dataMember, Report.prefilter,
                Report.keepTogether,
                Designer.Pivot.pivotGridFieldsSerializable, Report.pivotScripts, Report.rtl].concat(Report.baseControlProperties, Report.sizeLocation, Report.bookmarkGroup, Report.pivotGridStyles, Report.pivotGridOptions);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRPictureBoxViewModel = (function (_super) {
                __extends(XRPictureBoxViewModel, _super);
                function XRPictureBoxViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.format = ko.observable(null);
                    var originalImageWidth = ko.observable(), originalImageHeight = ko.observable(), imageHeight = ko.observable(this.size.height()), imageWidth = ko.observable(this.size.width());
                    this._sizing = ko.observable(this.sizing());
                    this.size["_width"] = this.size.width;
                    this.size["_height"] = this.size.height;
                    this.size.isPropertyDisabled = function (propertyName) {
                        return _this._sizing() === "AutoSize";
                    };
                    if (!this.imageSource() && model["@Image"]) {
                        this.imageSource(new DevExpress.Report.ImageSource('img', model["@Image"]));
                        delete this["_model"]["@Image"];
                    }
                    var oldSizingValue = this._sizing();
                    this._disposables.push(this.sizing = ko.computed({
                        read: function () {
                            return _this._sizing();
                        },
                        write: function (value) {
                            var undo = DevExpress.Analytics.Utils.UndoEngine.tryGetUndoEngine(_this);
                            undo && undo.start();
                            if (oldSizingValue === "AutoSize") {
                                _this.size["_width"](imageWidth());
                                _this.size["_height"](imageHeight());
                            }
                            oldSizingValue = value;
                            _this._sizing(value);
                            if (value === "CenterImage")
                                _this.imageAlignment("MiddleCenter");
                            undo && undo.end();
                        }
                    }));
                    this._disposables.push(this.size.width = ko.pureComputed({
                        read: function () {
                            return _this.isAutoSize ? imageWidth() : _this.size["_width"]();
                        },
                        write: function (value) {
                            if (!_this.isAutoSize) {
                                _this.size["_width"](value);
                            }
                        }
                    }));
                    this._disposables.push(this.size.height = ko.pureComputed({
                        read: function () {
                            return _this.isAutoSize ? imageHeight() : _this.size["_height"]();
                        },
                        write: function (value) {
                            if (!_this.isAutoSize) {
                                _this.size["_height"](value);
                            }
                        }
                    }));
                    this._disposables.push(ko.computed(function () {
                        var img = new Image();
                        img.onload = function () {
                            var report = _this.root;
                            _this._disposables.push(ko.computed(function () {
                                originalImageWidth(Designer.pixelToUnits(img.width, report.measureUnit(), 1));
                                originalImageHeight(Designer.pixelToUnits(img.height, report.measureUnit(), 1));
                            }));
                        };
                        var imageSource = _this.imageSource();
                        if (imageSource) {
                            img.src = imageSource.getDataUrl(_this.format);
                        }
                    }));
                    var toPixel = function (value) {
                        return Designer.unitsToPixel(value, _this.root["measureUnit"]());
                    };
                    this._disposables.push(ko.computed(function () {
                        if (_this.isAutoSize && _this.imageSource.peek()) {
                            var borders = new Designer.Widgets.BordersModel({ value: _this["borders"] }), borderWidth = _this["borderWidth"]() || 0, top, bottom, left, right, paddings = (_this["paddingObj"]);
                            top = borders.top() ? borderWidth : 0;
                            bottom = borders.bottom() ? borderWidth : 0;
                            left = borders.left() ? borderWidth : 0;
                            right = borders.right() ? borderWidth : 0;
                            imageWidth(originalImageWidth() + right + left + toPixel(paddings.left()) + toPixel(paddings.right()));
                            imageHeight(originalImageHeight() + top + bottom + toPixel(paddings.top()) + toPixel(paddings.bottom()));
                        }
                    }));
                    this._disposables.push(this.isSmallerImage = ko.pureComputed(function () {
                        return originalImageWidth() <= _this.size.width() && originalImageHeight() <= _this.size.height();
                    }));
                    this._disposables.push(this.imageUrl.subscribe(function (newVal) {
                        if (newVal) {
                            _this.imageSource(null);
                        }
                    }));
                    this._disposables.push(this.imageSource.subscribe(function (newVal) {
                        if (newVal) {
                            _this.imageUrl(Report.imageUrl.defaultVal);
                        }
                    }));
                }
                XRPictureBoxViewModel.prototype.isAlignmentDisabled = function () {
                    return ["Tile", "StretchImage", "AutoSize"].indexOf(this._sizing()) !== -1;
                };
                XRPictureBoxViewModel.prototype.isPropertyDisabled = function (propertyName) {
                    if (propertyName === "imageAlignment")
                        return this.isAlignmentDisabled();
                    _super.prototype.isPropertyDisabled.call(this, propertyName);
                };
                Object.defineProperty(XRPictureBoxViewModel.prototype, "isAutoSize", {
                    get: function () {
                        return this._sizing() === "AutoSize";
                    },
                    enumerable: true,
                    configurable: true
                });
                return XRPictureBoxViewModel;
            })(Report.ControlViewModel);
            Report.XRPictureBoxViewModel = XRPictureBoxViewModel;
            Report.backgroundSizeCss = ["-o-background-size", "mozBackgroundSize", "backgroundSize"];
            Report.backgroundOriginCss = ["background-origin", "-webkit-background-origin", " -o-background-origin", "mozBackgroundOrigin", "backgroundOrigin"];
            var PictureBoxSurface = (function (_super) {
                __extends(PictureBoxSurface, _super);
                function PictureBoxSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.selectiontemplate = "dxrd-picturebox-selection";
                    var control = this.getControlModel();
                    this._disposables.push(this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.paddingsCss());
                    }));
                    this._disposables.push(this.contentCss = ko.pureComputed(function () {
                        var imageSource = control.imageSource();
                        var urlContent = imageSource
                            ? imageSource.getDataUrl(control.format)
                            : control.imageUrl();
                        return $.extend({}, _this._createBackimage(control["backColor"](), urlContent, control.sizing(), control.isSmallerImage()), _this._createBackgroundOrigin(), control.isAlignmentDisabled() ? {} : _this._createBackgroundPosition(control.imageAlignment()));
                    }));
                }
                PictureBoxSurface.prototype._createBackgroundPosition = function (alignment) {
                    var x = "0%";
                    var y = "0%";
                    if (alignment.indexOf("Middle") !== -1)
                        y = "50%";
                    if (alignment.indexOf("Bottom") !== -1)
                        y = "100%";
                    if (alignment.indexOf("Center") !== -1)
                        x = "50%";
                    if (alignment.indexOf("Right") !== -1)
                        x = "100%";
                    return {
                        backgroundPosition: [x, y].join(" ")
                    };
                };
                PictureBoxSurface.prototype._createBackimage = function (background, urlContent, sizing, isSmallerImage) {
                    var backgroundResult = {};
                    if (urlContent) {
                        backgroundResult = { background: background + " url(" + urlContent + ") no-repeat" };
                        if (sizing) {
                            if (sizing === "Squeeze") {
                                sizing = isSmallerImage ? "CenterImage" : "ZoomImage";
                            }
                            switch (sizing) {
                                case "StretchImage":
                                    for (var i = 0; i < Report.backgroundSizeCss.length; i++) {
                                        backgroundResult[Report.backgroundSizeCss[i]] = "100% 100%";
                                    }
                                    break;
                                case "ZoomImage":
                                    for (var i = 0; i < Report.backgroundSizeCss.length; i++) {
                                        backgroundResult[Report.backgroundSizeCss[i]] = "contain";
                                    }
                                    backgroundResult["backgroundPosition"] = "center center";
                                    break;
                                case "AutoSize":
                                    for (var i = 0; i < Report.backgroundSizeCss.length; i++) {
                                        backgroundResult[Report.backgroundSizeCss[i]] = "100% 100%";
                                    }
                                    break;
                                case "Tile":
                                    backgroundResult["backgroundRepeat"] = "repeat";
                            }
                        }
                        return backgroundResult;
                    }
                    backgroundResult = { background: background };
                    return backgroundResult;
                };
                PictureBoxSurface.prototype._createBackgroundOrigin = function () {
                    var result = {};
                    for (var i = 0; i < Report.backgroundOriginCss.length; i++) {
                        result[Report.backgroundOriginCss[i]] = "content-box";
                    }
                    ;
                    result["width"] = this.contentWidthWithoutZoom() + "px";
                    result["height"] = this.contentHeightWithoutZoom() + "px";
                    return result;
                };
                PictureBoxSurface.prototype.getResizeOptions = function (resizeHandler) {
                    var _this = this;
                    if (!this.resizeOptions && resizeHandler) {
                        var resizeDisabled = ko.computed(function () {
                            return resizeHandler.disabled && resizeHandler.disabled() || _this._control.sizing() === "AutoSize";
                        });
                        this.resizeOptions = {
                            disabled: resizeDisabled,
                            snapHelper: resizeHandler.snapHelper,
                            starting: resizeHandler.starting,
                            stopped: resizeHandler.stopped
                        };
                        this._disposables.push(resizeDisabled);
                    }
                    return this.resizeOptions;
                };
                PictureBoxSurface.prototype.getAdornTemplate = function () {
                    var superAdornTemplate = _super.prototype.getAdornTemplate.call(this), placeholder = this.hasBindings || !this.getControlModel().imageSource() ? "dxrd-image-surface-picturebox_placeholder" : "";
                    return superAdornTemplate + (superAdornTemplate && placeholder ? " " : "") + placeholder;
                };
                return PictureBoxSurface;
            })(Report.ControlSurface);
            Report.PictureBoxSurface = PictureBoxSurface;
            Report.imageUrl = { propertyName: "imageUrl", modelName: "@ImageUrl", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: "", displayName: "Image Url", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageUrl" };
            Report.imageSource = {
                propertyName: "imageSource",
                modelName: "@ImageSource",
                editor: { header: "dxrd-image-loadfile", editorType: DevExpress.Analytics.Widgets.Editor },
                displayName: "Image Source",
                localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageSource",
                from: function (val) { return ko.observable(DevExpress.Report.ImageSource.parse(val)); },
                toJsonObject: DevExpress.Report.ImageSource.toString,
                defaultVal: null
            };
            Report.sizing = {
                propertyName: "sizing", modelName: "@Sizing", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Sizing", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.Sizing", defaultVal: "Normal", from: Designer.fromEnum, valuesArray: [
                    { value: "Normal", displayValue: "Normal", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.Normal" },
                    { value: "StretchImage", displayValue: "Stretch Image", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.StretchImage" },
                    { value: "AutoSize", displayValue: "Auto-Size", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.AutoSize" },
                    { value: "CenterImage", displayValue: "Center Image", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.CenterImage" },
                    { value: "ZoomImage", displayValue: "Zoom Image", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.ZoomImage" },
                    { value: "Squeeze", displayValue: "Squeeze", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.Squeeze" },
                    { value: "Tile", displayValue: "Tile", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.Tile" }
                ]
            };
            Report.imageAlignment = {
                propertyName: "imageAlignment", modelName: "@ImageAlignment", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Alignment", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.Alignment", defaultVal: "Default", from: Designer.fromEnum, valuesArray: [
                    { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPrinting.ImageAlignment.Default" },
                    { value: "TopLeft", displayValue: "Top Left", localizationId: "DevExpress.XtraPrinting.ImageAlignment.TopLeft" },
                    { value: "TopCenter", displayValue: "Top Center", localizationId: "DevExpress.XtraPrinting.ImageAlignment.TopCenter" },
                    { value: "TopRight", displayValue: "Top Right", localizationId: "DevExpress.XtraPrinting.ImageAlignment.TopRight" },
                    { value: "MiddleLeft", displayValue: "Middle Left", localizationId: "DevExpress.XtraPrinting.ImageAlignment.MiddleLeft" },
                    { value: "MiddleCenter", displayValue: "Middle Center", localizationId: "DevExpress.XtraPrinting.ImageAlignment.MiddleCenter" },
                    { value: "MiddleRight", displayValue: "Middle Right", localizationId: "DevExpress.XtraPrinting.ImageAlignment.MiddleRight" },
                    { value: "BottomLeft", displayValue: "Bottom Left", localizationId: "DevExpress.XtraPrinting.ImageAlignment.BottomLeft" },
                    { value: "BottomCenter", displayValue: "Bottom Center", localizationId: "DevExpress.XtraPrinting.ImageAlignment.BottomCenter" },
                    { value: "BottomRight", displayValue: "Bottom Right", localizationId: "DevExpress.XtraPrinting.ImageAlignment.BottomRight" }
                ]
            };
            Report.imageEditOptions = $.extend({}, Report.editOptions, {
                propertyName: "imageEditOptions",
                from: function (model, serializer) { return new Report.ImageEditOptions(model, serializer); }
            });
            Report.pictureBoxSerializationsInfo = [
                Report.imageUrl, Report.imageSource, Report.sizing, Report.imageAlignment, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal, Report.controlScripts,
                Report.dataBindings(["Bookmark", "Image", "ImageSource", "ImageUrl", "NavigateUrl", "Tag"]),
                Report.imageEditOptions,
                { propertyName: "format" }
            ].concat(Report.createPopularBindingInfos({ propertyName: "ImageUrl", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageUrl" }), Report.createPopularBindingInfos({ propertyName: "ImageSource", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageSource" }), Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup, Report.processGroup);
            Report.popularPropertiesPicture = ["imageSource", "popularDataBindingImageSource", "popularExpressionImageSource", "imageUrl", "popularDataBindingImageUrl", "popularExpressionImageUrl", "sizing", "imageAlignment", "bookmark", "bookmarkParent", "format"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var TableCalculationProvider = (function () {
                function TableCalculationProvider(_table) {
                    this._table = _table;
                    this._tableOffset = {
                        width: null,
                        left: null
                    };
                    this._calculationStarted = false;
                    this._calculationTimeout = null;
                    this._calculationNodes = [];
                }
                TableCalculationProvider.prototype._resetState = function () {
                    this._calculationNodes = [];
                    this._tableOffset.width = null;
                    this._tableOffset.left = null;
                    this._calculationStarted = false;
                };
                TableCalculationProvider.prototype._startCalculation = function (calculationNodes) {
                    if (calculationNodes === void 0) { calculationNodes = this._calculationNodes; }
                    this._calculationStarted = true;
                    var rows = this._table.rows().map(function (row, rowIndex) {
                        return row.cells().map(function (cell, cellIndex) {
                            var modifiedCell = calculationNodes.filter(function (x) { return x.column === cellIndex && x.row === rowIndex; })[0];
                            var weight = cell.weight();
                            return modifiedCell ? modifiedCell.calc : function () { return cell.weight(weight); };
                        });
                    });
                    this._tableOffset.left && this._table.location.x(this._table.location.x() + this._tableOffset.left);
                    this._tableOffset.width && this._table.size.width(this._table.size.width() + this._tableOffset.width);
                    rows.forEach(function (r) { return r.forEach(function (c) { return c(); }); });
                    this._calculationStarted = false;
                };
                TableCalculationProvider.prototype.addTableOffset = function (width, left) {
                    this._tableOffset.width = width;
                    this._tableOffset.left = left;
                };
                TableCalculationProvider.prototype.addCalculationNode = function (node) {
                    var _this = this;
                    if (this._calculationStarted)
                        return;
                    this._calculationNodes.push(node);
                    this._calculationTimeout && clearTimeout(this._calculationTimeout);
                    this._calculationTimeout = setTimeout(function () {
                        var undo = DevExpress.Analytics.Utils.UndoEngine.tryGetUndoEngine(_this._table);
                        undo && undo.start();
                        _this._startCalculation();
                        _this._resetState();
                        undo && undo.end();
                    }, 1);
                };
                TableCalculationProvider.prototype.hasCalculationNode = function (rowIndex, cellIndex) {
                    return this._calculationNodes.some(function (x) { return x.column === cellIndex && x.row === rowIndex; });
                };
                return TableCalculationProvider;
            })();
            Report.TableCalculationProvider = TableCalculationProvider;
            var TableControlViewModel = (function (_super) {
                __extends(TableControlViewModel, _super);
                function TableControlViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this.rows = ko.observableArray();
                    this._disposables.push(this.rowsTotalWeight = ko.pureComputed(function () {
                        var result = 0;
                        _this.rows().forEach(function (row) {
                            result += row.weight();
                        });
                        return result;
                    }));
                    this._disposables.push(this.pixelHeightWeight = ko.pureComputed(function () {
                        return _this.size.height() !== 0 ? _this.rowsTotalWeight() / _this.size.height() : 0;
                    }));
                    var deserializedRows = DevExpress.JS.Utils.deserializeArray(control.Rows, function (item) { return new TableRowViewModel(item, _this, serializer); });
                    this.rows(deserializedRows());
                    this.tableCalculationProvider = new TableCalculationProvider(this);
                }
                TableControlViewModel.prototype._getAdjacentCells = function (condition) {
                    var adjacentCells = [];
                    this.rows().forEach(function (row) {
                        row.cells().filter(function (cell) { return condition(cell); }).forEach(function (cell) {
                            adjacentCells.push(cell);
                        });
                    });
                    return adjacentCells;
                };
                TableControlViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.rows);
                    this.resetObservableArray(this.rows);
                };
                TableControlViewModel.prototype.updateRowLocation = function (row, deltaHeight) {
                    var oldHeight = row.height();
                    var rowIndex = this.rows().indexOf(row);
                    if (rowIndex > 0) {
                        var topRowHeight = this.rows()[rowIndex - 1].height;
                        var topHeight = topRowHeight() - deltaHeight;
                        topRowHeight(topHeight > 0 ? topHeight : 0);
                    }
                    else {
                        var deltaWeight = (row.weight() / oldHeight) * deltaHeight;
                        row.weight(row.weight() + deltaWeight);
                        this.location.y(this.location.y() - deltaHeight);
                        this.size.height(this.size.height() + deltaHeight);
                    }
                };
                TableControlViewModel.prototype.addChild = function (control, position, onComponentAdded) {
                    if (control instanceof TableRowViewModel) {
                        if (this.rows().indexOf(control) === -1) {
                            control.parentModel(this);
                            if (position != null) {
                                this.rows.splice(position, 0, control);
                            }
                            else {
                                this.rows.push(control);
                            }
                            if ($.isFunction(onComponentAdded))
                                onComponentAdded({ parent: this, model: control });
                        }
                    }
                    else {
                        throw new Error("Trying to add non a row to the table.");
                    }
                };
                TableControlViewModel.prototype.insertRow = function (selectedRow, isRowAbove, onComponentAdded) {
                    var selectedRowHeight = selectedRow.height(), newRow = new TableRowViewModel({
                        "@ControlType": "XRTableRow",
                        "@Weight": selectedRow.weight(),
                        "@HeightF": selectedRowHeight,
                    }, this), indexSelectedRow = this.rows.indexOf(selectedRow);
                    selectedRow.cells().forEach(function (cell) {
                        newRow.createChild({ "@ControlType": "XRTableCell", "@Weight": cell.weight(), "@Padding": "2,2,0,0,100", "@Multiline": "true" });
                    });
                    this.addChild(newRow, indexSelectedRow + (isRowAbove ? 0 : 1), onComponentAdded);
                    this.size.height(this.size.height() + selectedRowHeight);
                };
                TableControlViewModel.prototype.removeChild = function (selectedRow) {
                    if (this.rows().length > 0 && this.rows().indexOf(selectedRow) !== -1) {
                        var index = this.rows().indexOf(selectedRow);
                        this.size.height(this.size.height() - selectedRow.height());
                        this.rows.splice(index, 1);
                    }
                    if (this.rows().length === 0) {
                        this.parentModel().removeChild(this);
                    }
                };
                TableControlViewModel.prototype.insertColumn = function (selectedCell, isRight, onComponentAdded) {
                    var selectedCellX = selectedCell.surface.rect().left, selectedCellRight = selectedCell.surface.rect().left + selectedCell.surface.rect().width, adjacentCells = this._getAdjacentCells(function (cell) { return isRight ? ((cell.surface.rect().left + cell.surface.rect().width) === selectedCellRight) : (cell.surface.rect().left === selectedCellX); });
                    adjacentCells.forEach(function (cell) {
                        cell.parentModel().insertCellCopy(cell, isRight, onComponentAdded);
                    });
                };
                TableControlViewModel.prototype.addColumnToCalculation = function (diff, last) {
                    if (last === void 0) { last = false; }
                    var rows = this.rows();
                    for (var i = 0; i < rows.length; i++) {
                        rows[i].addCellToCalculation(last ? rows[i].cells().length - 1 : 0, diff);
                    }
                };
                return TableControlViewModel;
            })(Report.ControlViewModel);
            Report.TableControlViewModel = TableControlViewModel;
            var TableRowViewModel = (function (_super) {
                __extends(TableRowViewModel, _super);
                function TableRowViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this.top = ko.observable(0);
                    this.width = parent.size.width;
                    this.cells = ko.observableArray();
                    this._disposables.push(this.cellsTotalWeight = ko.pureComputed(function () {
                        var result = 0;
                        _this.cells().forEach(function (cell) {
                            result += cell.weight();
                        });
                        return result;
                    }));
                    this._disposables.push(this.pixelWidthWeight = ko.pureComputed(function () {
                        return parent.size.width() !== 0 ? _this.cellsTotalWeight() / parent.size.width() : 0;
                    }));
                    this._disposables.push(this.height = ko.pureComputed({
                        read: function () {
                            var result = parent.size.height() * _this.weight() / parent.rowsTotalWeight();
                            return Math.round(result * 100) / 100;
                        },
                        write: function (newHeight) {
                            var dHeight = newHeight - _this.height(), newWeight = parent.pixelHeightWeight() * newHeight, dWeight = newWeight - _this.weight(), thisRowIndex = parent.rows().indexOf(_this);
                            _this.weight(newWeight);
                            if (thisRowIndex < parent.rows().length - 1) {
                                parent.rows()[thisRowIndex + 1].weight(parent.rows()[thisRowIndex + 1].weight() - dWeight);
                            }
                            else {
                                parent.size.height(parent.size.height() + dHeight);
                            }
                        }
                    }));
                    this.size = new Designer.Size(0, 0);
                    this._disposables.push(this.size.height = ko.pureComputed({ read: function () { return _this.height(); }, write: function (newVal) { if (Designer.checkModelReady(_this.root)) {
                            _this.height(newVal);
                        } } }));
                    this._disposables.push(this.size.width = ko.pureComputed({ read: function () { return _this.width(); }, write: function (newVal) { if (Designer.checkModelReady(_this.root)) {
                            _this.width(newVal);
                        } } }));
                    var deserializedCells = DevExpress.JS.Utils.deserializeArray(control.Cells, function (item) { return _this.getControlFactory().createControl(item, _this, serializer); });
                    this.cells(deserializedCells());
                    var _top = ko.observable(null);
                    this._disposables.push(this.top = ko.pureComputed({
                        read: function () {
                            var index = parent.rows().indexOf(_this);
                            if (index > 0) {
                                var previousRow = parent.rows()[index - 1];
                                _top(previousRow.top() + previousRow.height());
                            }
                            else {
                                _top(0);
                            }
                            return _top();
                        },
                        write: function (val) {
                            parent.updateRowLocation(_this, _top() - val);
                            _top(val);
                        }
                    }));
                }
                TableRowViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.cells);
                    this.resetObservableArray(this.cells);
                };
                TableRowViewModel.prototype.hasCalculationNode = function (cellIndex) {
                    return this.parentModel().tableCalculationProvider.hasCalculationNode(this.parentModel().rows().indexOf(this), cellIndex);
                };
                TableRowViewModel.prototype.addCellToCalculation = function (cellIndex, delta) {
                    var cell = this.cells()[cellIndex];
                    var newWeight = this.pixelWidthWeight() * (cell.width() + delta);
                    this.parentModel().tableCalculationProvider.addCalculationNode({
                        column: cellIndex,
                        row: this.parentModel().rows().indexOf(this),
                        calc: function () {
                            cell.weight(newWeight);
                        }
                    });
                };
                TableRowViewModel.prototype.addColumnToCalculation = function (diff, last) {
                    this.parentModel().addColumnToCalculation(diff, last);
                };
                TableRowViewModel.prototype.addTableOffset = function (width, left) {
                    this.parentModel().tableCalculationProvider.addTableOffset(width, left);
                };
                TableRowViewModel.prototype.addChild = function (control, position, onComponentAdded) {
                    if (control instanceof TableCellViewModel) {
                        if (this.cells().indexOf(control) === -1) {
                            control.parentModel(this);
                            if (position != null) {
                                this.cells.splice(position, 0, control);
                            }
                            else {
                                this.cells.push(control);
                            }
                            if ($.isFunction(onComponentAdded))
                                onComponentAdded({ parent: this, model: control });
                        }
                    }
                    else {
                        throw new Error("Trying to add non a cell to the table row.");
                    }
                };
                TableRowViewModel.prototype.insertCellCopy = function (selectedCell, isRight, onComponentAdded) {
                    var newCellWeight = selectedCell.weight() / 2, newCell = new TableCellViewModel({ "@ControlType": "XRTableCell", "@Weight": newCellWeight, "@Padding": selectedCell.padding(), "@Multiline": "true" }, this), indexSelectedCell = this.cells.indexOf(selectedCell);
                    this.addChild(newCell, indexSelectedCell + (isRight ? 1 : 0), onComponentAdded);
                    if (newCell["text"]) {
                        newCell["text"](newCell.name());
                    }
                    selectedCell.weight(newCellWeight);
                };
                TableRowViewModel.prototype.removeChild = function (selectedCell) {
                    if (this.cells().length > 0 && this.cells().indexOf(selectedCell) !== -1) {
                        var index = this.cells().indexOf(selectedCell), selectedCellWeight = selectedCell.weight();
                        this.cells.splice(index, 1);
                        if (this.cells()[index]) {
                            this.cells()[index].weight(this.cells()[index].weight() + selectedCellWeight);
                        }
                        else if (this.cells()[index - 1]) {
                            this.cells()[index - 1].weight(this.cells()[index - 1].weight() + selectedCellWeight);
                        }
                        if (this.cells().length === 0) {
                            this.parentModel().removeChild(this);
                        }
                    }
                };
                TableRowViewModel.unitProperties = [];
                return TableRowViewModel;
            })(Report.ControlViewModel);
            Report.TableRowViewModel = TableRowViewModel;
            var TableCellViewModel = (function (_super) {
                __extends(TableCellViewModel, _super);
                function TableCellViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this._disposables.push(this.width = ko.pureComputed({
                        read: function () {
                            var result = parent.width() * _this.weight() / parent.cellsTotalWeight();
                            return Math.round(result * 100) / 100;
                        },
                        write: function (newWidth) {
                            var currentIndex = parent.cells().indexOf(_this);
                            if (parent.hasCalculationNode(currentIndex))
                                return;
                            var diff = newWidth - _this.width();
                            if (currentIndex < parent.cells().length - 1) {
                                parent.addCellToCalculation(currentIndex, diff);
                                parent.addCellToCalculation(currentIndex + 1, diff * -1);
                            }
                            else {
                                parent.addColumnToCalculation(diff, true);
                                parent.addTableOffset(diff);
                            }
                        }
                    }));
                    this.height = parent.height;
                    this.size = new Designer.Size(0, 0);
                    this.size.isPropertyDisabled = function (name) { return name === "height"; };
                    this._disposables.push(this.size.height = ko.pureComputed({ read: function () { return _this.height(); }, write: function (newVal) { if (Designer.checkModelReady(_this.root)) {
                            _this.height(newVal);
                        } } }));
                    this._disposables.push(this.size.width = ko.pureComputed({ read: function () { return _this.width(); }, write: function (newVal) { if (Designer.checkModelReady(_this.root)) {
                            _this.width(newVal);
                        } } }));
                    this._disposables.push(this.left = ko.pureComputed({
                        read: function () {
                            var index = parent.cells().indexOf(_this);
                            if (index > 0) {
                                var previousCell = parent.cells()[index - 1];
                                return previousCell.left() + previousCell.width();
                            }
                            else {
                                return 0;
                            }
                        },
                        write: function (val) {
                            if (val === _this.left())
                                return;
                            var index = parent.cells().indexOf(_this);
                            var diff = val - _this.left();
                            if (index > 0) {
                                parent.addCellToCalculation(index - 1, diff);
                                parent.addCellToCalculation(index, diff * -1);
                            }
                            else {
                                parent.addColumnToCalculation(diff * -1);
                                parent.addTableOffset(diff * -1, diff);
                            }
                        }
                    }));
                }
                TableCellViewModel.unitProperties = [];
                return TableCellViewModel;
            })(Report.ControlViewModel);
            Report.TableCellViewModel = TableCellViewModel;
            var TableSurface = (function (_super) {
                __extends(TableSurface, _super);
                function TableSurface(control, context) {
                    _super.call(this, control, context, TableSurface._unitProperties);
                    this._isUpdating = false;
                    this.template = "dxrd-table";
                    this.selectiontemplate = "dxrd-table-selection";
                    this._disposables.push(this.css = ko.pureComputed(function () {
                        return {};
                    }));
                    this._disposables.push(this.contentCss = ko.pureComputed(function () {
                        return {};
                    }));
                }
                TableSurface.prototype._getChildrenHolderName = function () { return "rows"; };
                TableSurface.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.rows);
                    this.resetObservableArray(this.rows);
                };
                TableSurface.prototype._isCellInColumn = function (cell, locationStart, locationEnd) {
                    return Math.abs(cell.rect().left - locationStart) < 0.01 && Math.abs(cell.rect().left + cell.rect().width - locationEnd) < 0.01;
                };
                TableSurface.prototype.selectColumn = function (selection, cellSurface) {
                    var _this = this;
                    selection.initialize(this);
                    var locationStart = cellSurface.rect().left, locationEnd = locationStart + cellSurface.rect().width;
                    selection.selecting({ control: cellSurface, cancel: false });
                    this.rows().forEach(function (rowSurface) {
                        rowSurface.cells().forEach(function (cellSurface) {
                            if (_this._isCellInColumn(cellSurface, locationStart, locationEnd)) {
                                selection.selecting({ control: cellSurface, cancel: false });
                                return true;
                            }
                        });
                    });
                };
                TableSurface.prototype.isThereIntersectionWithChildCollection = function () {
                    return false;
                };
                TableSurface._unitProperties = {
                    _x: function (o) {
                        return o.location.x;
                    },
                    _y: function (o) {
                        return o.location.y;
                    },
                    _width: function (o) {
                        return o.size.width;
                    },
                    _height: function (o) {
                        return o.size.height;
                    }
                };
                return TableSurface;
            })(Report.ControlSurfaceBase);
            Report.TableSurface = TableSurface;
            (function (TableActionDirection) {
                TableActionDirection[TableActionDirection["vertical"] = 0] = "vertical";
                TableActionDirection[TableActionDirection["horizontal"] = 1] = "horizontal";
            })(Report.TableActionDirection || (Report.TableActionDirection = {}));
            var TableActionDirection = Report.TableActionDirection;
            var TableComponentSurface = (function (_super) {
                __extends(TableComponentSurface, _super);
                function TableComponentSurface() {
                    _super.apply(this, arguments);
                }
                TableComponentSurface.prototype._getNeededProperties = function (rect) {
                    if (this.direction === TableActionDirection.vertical) {
                        return {
                            positionProperty: rect.top === undefined ? this.rect().top : rect.top,
                            secondaryPositionProperty: rect.bottom,
                            sizeProperty: rect.height
                        };
                    }
                    else {
                        return {
                            positionProperty: rect.left === undefined ? this.rect().left : rect.left,
                            secondaryPositionProperty: rect.right,
                            sizeProperty: rect.width
                        };
                    }
                };
                TableComponentSurface.prototype._generateRect = function (rect, result) {
                    if (this.direction === TableActionDirection.vertical) {
                        rect.top = result.positionProperty === undefined ? rect.top : result.positionProperty;
                        rect.bottom = result.secondaryPositionProperty === undefined ? rect.bottom : result.secondaryPositionProperty;
                        rect.height = result.sizeProperty === undefined ? rect.height : result.sizeProperty;
                    }
                    else {
                        rect.left = result.positionProperty === undefined ? rect.left : result.positionProperty;
                        rect.right = result.secondaryPositionProperty === undefined ? rect.right : result.secondaryPositionProperty;
                        rect.width = result.sizeProperty === undefined ? rect.width : result.sizeProperty;
                        delete rect.height;
                    }
                    return rect;
                };
                TableComponentSurface.prototype.beforeRectUpdated = function (rect) {
                    var incomingRect = this._getNeededProperties(rect);
                    var currentRect = this._getNeededProperties(this.rect());
                    var model = this.getControlModel();
                    var parentModel = this.parent.getControlModel();
                    if (incomingRect.secondaryPositionProperty !== undefined) {
                        incomingRect.positionProperty = currentRect.positionProperty;
                        incomingRect.sizeProperty = incomingRect.secondaryPositionProperty < incomingRect.positionProperty ? 0
                            : incomingRect.secondaryPositionProperty - incomingRect.positionProperty;
                    }
                    if (incomingRect.positionProperty > currentRect.secondaryPositionProperty) {
                        incomingRect.positionProperty = currentRect.secondaryPositionProperty;
                        return this._generateRect(rect, incomingRect);
                    }
                    if (incomingRect.sizeProperty === undefined) {
                        incomingRect.sizeProperty = currentRect.sizeProperty + currentRect.positionProperty - incomingRect.positionProperty;
                    }
                    var childCollectionName = this.parent._getChildrenHolderName();
                    var positionRedused = parseInt(currentRect.positionProperty) > incomingRect.positionProperty;
                    var sizeIncreased = parseInt(currentRect.sizeProperty) < incomingRect.sizeProperty && !positionRedused;
                    var position = parentModel[childCollectionName]().indexOf(model);
                    if (position !== 0 && positionRedused) {
                        var prevElementRect = this._getNeededProperties(parentModel[childCollectionName]()[position - 1].surface.rect());
                        if (prevElementRect.positionProperty > incomingRect.positionProperty) {
                            incomingRect.sizeProperty -= (prevElementRect.positionProperty - incomingRect.positionProperty);
                            incomingRect.positionProperty = prevElementRect.positionProperty;
                        }
                    }
                    if (sizeIncreased && position !== parentModel[childCollectionName]().length - 1) {
                        var nextElementRect = this._getNeededProperties(parentModel[childCollectionName]()[position + 1].surface.rect());
                        if (nextElementRect.secondaryPositionProperty < incomingRect.positionProperty + incomingRect.sizeProperty) {
                            incomingRect.sizeProperty = nextElementRect.secondaryPositionProperty - incomingRect.positionProperty;
                        }
                    }
                    return this._generateRect(rect, incomingRect);
                };
                return TableComponentSurface;
            })(Report.TextControlSurfaceBase);
            Report.TableComponentSurface = TableComponentSurface;
            var TableRowSurface = (function (_super) {
                __extends(TableRowSurface, _super);
                function TableRowSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, TableRowSurface._unitProperties);
                    this.direction = TableActionDirection.vertical;
                    this._disposables.push(this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.backGroundCss());
                    }));
                    this._disposables.push(this.contentCss = ko.pureComputed(function () {
                        return {};
                    }));
                }
                TableRowSurface.prototype._getChildrenHolderName = function () { return "cells"; };
                TableRowSurface.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.cells);
                    this.resetObservableArray(this.cells);
                };
                TableRowSurface.prototype.getAdornTemplate = function () {
                    return TableRowSurface._appendValue("", "dxrd-image-surface-bounded", this.hasBindings);
                };
                TableRowSurface._unitProperties = {
                    _height: function (o) {
                        return o.height;
                    },
                    _width: function (o) {
                        return o.width;
                    },
                    _y: function (o) {
                        return o.top;
                    }
                };
                return TableRowSurface;
            })(TableComponentSurface);
            Report.TableRowSurface = TableRowSurface;
            var TableCellSurface = (function (_super) {
                __extends(TableCellSurface, _super);
                function TableCellSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, TableCellSurface._unitProperties);
                    this._row = this.parent.getControlModel();
                    this._table = this._row.parentModel();
                    this._cellIndex = function () { return _this._row.cells().indexOf(_this.getControlModel()); };
                    this._rowIndex = function () { return _this._table.rows().indexOf(_this._row); };
                    this.direction = TableActionDirection.horizontal;
                    this["multiline"] = control["multiline"];
                    this._disposables.push(this.contentSizes = ko.pureComputed(function () {
                        if (_this._isShowBorder("Left")) {
                            return _this.cssCalculator.contentSizeCss(_this.rect().width, _this.heightWithRowSpan(), _this._context.zoom());
                        }
                        var bordersArray = control.borders().indexOf("All") === -1 ? control.borders().split(/\s*,\s*/g) : ["Left", "Top", "Right", "Bottom"];
                        var index = bordersArray.indexOf("Left");
                        var width = _this.rect().width;
                        if (index !== -1) {
                            bordersArray.splice(index, 1);
                            width += 1;
                        }
                        return _this.cssCalculator.contentSizeCss(width, _this.heightWithRowSpan(), _this._context.zoom(), bordersArray.join(","));
                    }));
                    this._disposables.push(this.css = ko.pureComputed(function () {
                        var bottom = _this.cssCalculator.cellBorder("Bottom", _this._context.zoom());
                        var right = _this.cssCalculator.cellBorder("Right", _this._context.zoom());
                        var left = _this._isShowBorder("Left") ? _this.cssCalculator.cellBorder("Left", _this._context.zoom()) : _this.cssCalculator.createControlBorder("", 0, "transparent", ["Left"], "Left");
                        var top = _this._isShowBorder("Top") ? _this.cssCalculator.cellBorder("Top", _this._context.zoom()) : { borderTop: "" };
                        return $.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.backGroundCss(), right, bottom, top, left, _this.cssCalculator.foreColorCss(), _this.cssCalculator.textAlignmentCss());
                    }));
                    this._disposables.push(this.rowSpan = ko.pureComputed(function () {
                        if (_this.controls().length > 0) {
                            return 1;
                        }
                        for (var i = 1; i <= _this._rowIndex() && _this._rowIndex() - i >= 0; i++) {
                            var cell = _this._getAdjacentCellByRowIndex(_this._rowIndex() - i);
                            if (cell && cell.surface.rowSpan() > i)
                                return 0;
                        }
                        var rowSpan = control["rowSpan"]();
                        var lastRowSpan = 1;
                        var rowCount = _this._table.rows().length;
                        for (var i = 1; i < rowSpan && i + _this._rowIndex() < rowCount; i++, lastRowSpan++) {
                            var nextCell = _this._getAdjacentCellByRowIndex(_this._rowIndex() + i);
                            if (nextCell && (nextCell.width() != control.width() || nextCell["rowSpan"]() > 1 || nextCell.controls().length > 0)) {
                                return lastRowSpan;
                            }
                        }
                        return lastRowSpan;
                    }));
                    this._disposables.push(this.heightWithRowSpan = ko.pureComputed(function () {
                        var _height = _this.rect().height;
                        if (_this.rowSpan() > 1) {
                            for (var i = 1; i < _this.rowSpan(); i++) {
                                var cell = _this._getAdjacentCellByRowIndex(_this._rowIndex() + i);
                                if (cell && cell.surface)
                                    _height += cell.surface.rect().height;
                            }
                        }
                        else if (_this.rowSpan() === 0) {
                            return 0;
                        }
                        return _height;
                    }));
                    this.offsetZIndex = function () {
                        var hasRowSpan = _this.rowSpan() > 1;
                        return hasRowSpan && (_this.selected() || _this.focused()) && 2 || hasRowSpan && 1 || null;
                    };
                    this.getUsefulRect = function () {
                        var borderWidth = ko.unwrap(control["borderWidth"]), borderFlags = control.borders();
                        var rect = { top: 0, left: 0, width: _this.rect().width, height: _this.rect().height };
                        if (borderWidth) {
                            var allBorders = borderFlags === "All";
                            if ((allBorders || borderFlags.indexOf("Top") >= 0) && _this._isShowBorder("Top")) {
                                rect.top += borderWidth;
                                rect.height -= borderWidth;
                            }
                            if (allBorders || borderFlags.indexOf("Right") >= 0)
                                rect.width -= borderWidth;
                            if (allBorders || borderFlags.indexOf("Bottom") >= 0)
                                rect.height -= borderWidth;
                            if ((allBorders || borderFlags.indexOf("Left") >= 0) && _this._isShowBorder("Left")) {
                                rect.left += borderWidth;
                                rect.width -= borderWidth;
                            }
                        }
                        return rect;
                    };
                }
                TableCellSurface.prototype._getAdjacentCellByRowIndex = function (rowIndex) {
                    var nextRow = this._table.rows()[rowIndex];
                    return nextRow && nextRow.cells && nextRow.cells()[this._cellIndex()];
                };
                TableCellSurface.prototype._isShowBorder = function (side) {
                    if (side === "Top") {
                        var prevCell = this._getAdjacentCellByRowIndex(this._rowIndex() - 1);
                        var borders = prevCell && prevCell["borders"]();
                        return (this._rowIndex() === 0) || (borders && borders !== "All" && borders.indexOf("Bottom") === -1);
                    }
                    if (side === "Left") {
                        var prevCell = this._row.cells()[this._cellIndex() - 1], borders = prevCell && prevCell.borders();
                        return (this._cellIndex() === 0) || (borders && borders !== "All" && borders.indexOf("Right") === -1);
                    }
                };
                TableCellSurface.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.controls);
                    this.resetObservableArray(this.controls);
                };
                TableCellSurface.prototype.selectColumn = function (selection) {
                    (this.parent.parent).selectColumn(selection, this);
                };
                TableCellSurface.prototype.checkParent = function (surfaceParent) {
                    return this.parent.parent === surfaceParent;
                };
                TableCellSurface.prototype.isThereIntersectionWithUsefulArea = function () {
                    return false;
                };
                TableCellSurface.prototype.isThereIntersectionWithCrossBandControls = function () {
                    return false;
                };
                TableCellSurface.prototype.isThereIntersectionWithNeighborsCollection = function () {
                    return false;
                };
                TableCellSurface.prototype.isThereIntersectionWithParentCollection = function () {
                    return false;
                };
                TableCellSurface.prototype.beforeRectUpdated = function (rect) {
                    var _rowSpan = this.rowSpan.peek();
                    for (var i = 1; i < _rowSpan; i++) {
                        var nextCell = this._getAdjacentCellByRowIndex(this._rowIndex() + i);
                        ;
                        nextCell && nextCell.surface.rect(rect);
                    }
                    return _super.prototype.beforeRectUpdated.call(this, rect);
                };
                TableCellSurface.prototype.canDrop = function () {
                    return _super.prototype.canDrop.call(this) && this.rowSpan() === 1;
                };
                TableCellSurface._unitProperties = {
                    _height: function (o) {
                        return o.height;
                    },
                    _width: function (o) {
                        return o.width;
                    },
                    _x: function (o) {
                        return o.left;
                    }
                };
                return TableCellSurface;
            })(TableComponentSurface);
            Report.TableCellSurface = TableCellSurface;
            var TableRowActions = (function (_super) {
                __extends(TableRowActions, _super);
                function TableRowActions(selection, onComponentAdded) {
                    var _this = this;
                    _super.call(this);
                    this.selection = selection;
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Insert Row Above",
                            displayText: function () { return Designer.getLocalization("Insert Row Above", "ASPxReportsStringId.ReportDesigner_TableActions_InsertRowAbove"); },
                            imageClassName: "dxrd-image-actions-insert_row_above",
                            imageTemplateName: "dxrd-svg-actions-insert_row_above",
                            clickAction: function () { _this.insertRowAbove(); },
                        }, {
                            text: "Insert Row Below",
                            displayText: function () { return Designer.getLocalization("Insert Row Below", "ASPxReportsStringId.ReportDesigner_TableActions_InsertRowBelow"); },
                            imageClassName: "dxrd-image-actions-insert_row_below",
                            imageTemplateName: "dxrd-svg-actions-insert_row_below",
                            clickAction: function () { _this.insertRowBelow(); },
                        }, {
                            text: "Delete Row",
                            displayText: function () { return Designer.getLocalization("Delete Row", "ASPxReportsStringId.ReportDesigner_TableActions_DeleteRow"); },
                            imageClassName: "dxrd-image-actions-delete_row",
                            imageTemplateName: "dxrd-svg-actions-delete_row",
                            clickAction: function () { _this.deleteRow(); },
                        }
                    ]);
                    this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                }
                Object.defineProperty(TableRowActions.prototype, "_row", {
                    get: function () {
                        return this.selection.focused().getControlModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TableRowActions.prototype, "_table", {
                    get: function () {
                        return this._row.parentModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                TableRowActions.prototype.insertRowAbove = function () {
                    this._table.insertRow(this._row, true, this.onComponentAdded);
                };
                TableRowActions.prototype.insertRowBelow = function () {
                    this._table.insertRow(this._row, false, this.onComponentAdded);
                };
                TableRowActions.prototype.deleteRow = function () {
                    Designer.deleteSelection(this.selection);
                };
                TableRowActions.prototype.condition = function (context) {
                    return context instanceof TableRowViewModel;
                };
                return TableRowActions;
            })(Designer.BaseActionsProvider);
            Report.TableRowActions = TableRowActions;
            var TableCellActions = (function (_super) {
                __extends(TableCellActions, _super);
                function TableCellActions(selection, onComponentAdded) {
                    var _this = this;
                    _super.call(this, selection);
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Insert Row Above",
                            displayText: function () { return Designer.getLocalization("Insert Row Above", "ASPxReportsStringId.ReportDesigner_TableActions_InsertRowAbove"); },
                            imageClassName: "dxrd-image-actions-insert_row_above",
                            imageTemplateName: "dxrd-svg-actions-insert_row_above",
                            clickAction: function () { _this.insertRowAbove(); },
                        }, {
                            text: "Insert Row Below",
                            displayText: function () { return Designer.getLocalization("Insert Row Below", "ASPxReportsStringId.ReportDesigner_TableActions_InsertRowBelow"); },
                            imageClassName: "dxrd-image-actions-insert_row_below",
                            imageTemplateName: "dxrd-svg-actions-insert_row_below",
                            clickAction: function () { _this.insertRowBelow(); },
                        }, {
                            text: "Delete Row",
                            displayText: function () { return Designer.getLocalization("Delete Row", "ASPxReportsStringId.ReportDesigner_TableActions_DeleteRow"); },
                            imageClassName: "dxrd-image-actions-delete_row",
                            imageTemplateName: "dxrd-svg-actions-delete_row",
                            clickAction: function () { _this.deleteRow(); },
                        }, {
                            text: "Insert Cell",
                            displayText: function () { return Designer.getLocalization("Insert Cell", "ASPxReportsStringId.ReportDesigner_TableActions_InsertCell"); },
                            imageClassName: "dxrd-image-actions-insert_cell",
                            imageTemplateName: "dxrd-svg-actions-insert_cell",
                            clickAction: function () { _this.insertCell(); },
                        }, {
                            text: "Delete Cell",
                            displayText: function () { return Designer.getLocalization("Delete Cell", "ASPxReportsStringId.ReportDesigner_TableActions_DeleteCell"); },
                            imageClassName: "dxrd-image-actions-delete_cell",
                            imageTemplateName: "dxrd-svg-actions-delete_cell",
                            clickAction: function () { _this.deleteCell(); },
                        }, {
                            text: "Insert Column To Left",
                            displayText: function () { return Designer.getLocalization("Insert Column To Left", "ASPxReportsStringId.ReportDesigner_TableActions_InsertColumnToLeft"); },
                            imageClassName: "dxrd-image-actions-insert_column_to_left",
                            imageTemplateName: "dxrd-svg-actions-insert_column_to_left",
                            clickAction: function () { _this.insertColumn(false); },
                        }, {
                            text: "Insert Column To Right",
                            displayText: function () { return Designer.getLocalization("Insert Column To Right", "ASPxReportsStringId.ReportDesigner_TableActions_InsertColumnToRight"); },
                            imageClassName: "dxrd-image-actions-insert_column_to_right",
                            imageTemplateName: "dxrd-svg-actions-insert_column_to_right",
                            clickAction: function () { _this.insertColumn(true); },
                        }, {
                            text: "Delete Column",
                            displayText: function () { return Designer.getLocalization("Delete Column", "ASPxReportsStringId.ReportDesigner_TableActions_DeleteColumn"); },
                            imageClassName: "dxrd-image-actions-delete_column",
                            imageTemplateName: "dxrd-svg-actions-delete_column",
                            clickAction: function () { _this.deleteColumn(); },
                        }
                    ]);
                    this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                }
                Object.defineProperty(TableCellActions.prototype, "_cell", {
                    get: function () {
                        return this.selection.focused().getControlModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TableCellActions.prototype, "_row", {
                    get: function () {
                        return this._cell.parentModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TableCellActions.prototype, "_table", {
                    get: function () {
                        return this._row.parentModel();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TableCellActions.prototype, "_cellSurface", {
                    get: function () {
                        var cell = this.selection.focused();
                        return cell instanceof TableCellSurface && cell || null;
                    },
                    enumerable: true,
                    configurable: true
                });
                TableCellActions.prototype.insertCell = function () {
                    this._row.insertCellCopy(this._cell, false, this.onComponentAdded);
                };
                TableCellActions.prototype.deleteCell = function () {
                    Designer.deleteSelection(this.selection);
                };
                TableCellActions.prototype.deleteRow = function () {
                    this.selection.initialize(this._cellSurface.parent);
                    Designer.deleteSelection(this.selection);
                };
                TableCellActions.prototype.insertColumn = function (isRight) {
                    this._table.insertColumn(this._cell, isRight, this.onComponentAdded);
                };
                TableCellActions.prototype.deleteColumn = function () {
                    this._cellSurface.selectColumn(this.selection);
                    Designer.deleteSelection(this.selection);
                };
                TableCellActions.prototype.condition = function (context) {
                    return context instanceof TableCellViewModel && !!this._cellSurface;
                };
                return TableCellActions;
            })(TableRowActions);
            Report.TableCellActions = TableCellActions;
            var TableCellGroupActions = (function (_super) {
                __extends(TableCellGroupActions, _super);
                function TableCellGroupActions(selectionProvider) {
                    var _this = this;
                    _super.call(this);
                    this._selectionProvider = selectionProvider;
                    this._distributeColumnsAction = {
                        text: "Distribute Columns Evenly",
                        displayText: function () { return Designer.getLocalization("Distribute Columns Evenly", "ReportStringId.Cmd_TableDistributeColumnsEvenly"); },
                        imageClassName: "dxrd-image-actions-distribute_columns_evenly",
                        imageTemplateName: "dxrd-svg-actions-distribute_columns_evenly",
                        clickAction: function () { _this._distributeColumns(); }
                    };
                    this._distributeRowsAction = {
                        text: "Distribute Rows Evenly",
                        displayText: function () { return Designer.getLocalization("Distribute Rows Evenly", "ReportStringId.Cmd_TableDistributeRowsEvenly"); },
                        imageClassName: "dxrd-image-actions-distribute_rows_evenly",
                        imageTemplateName: "dxrd-svg-actions-distribute_rows_evenly",
                        clickAction: function () { _this._distributeRows(); }
                    };
                    _super.prototype.initActions.call(this, [
                        this._distributeColumnsAction,
                        this._distributeRowsAction
                    ]);
                    this.setDisabled = function (context) {
                        var status = { rows: false, cols: false }, cells = _this._selectedCells();
                        if (cells.length) {
                            var row0 = cells[0].parentModel(), colIndex0 = row0.cells().indexOf(cells[0]);
                            for (var i = 1; i < cells.length; i++) {
                                var rowi = cells[i].parentModel();
                                if (!status.rows && rowi.name() !== row0.name())
                                    status.rows = true;
                                if (!status.cols && rowi.cells().indexOf(cells[i]) != colIndex0)
                                    status.cols = true;
                                if (status.rows && status.cols)
                                    break;
                            }
                        }
                        _this._distributeColumnsAction.disabled(!status.cols);
                        _this._distributeRowsAction.disabled(!status.rows);
                    };
                }
                TableCellGroupActions.prototype._distributeColumns = function () {
                    var cellsByRows = this._selectedCells()
                        .reduce(function (acc, x) {
                        var row = x.parentModel().name();
                        if (acc[row])
                            acc[row].push(x);
                        else
                            acc[row] = [x];
                        return acc;
                    }, {});
                    for (var row in cellsByRows) {
                        var cells = cellsByRows[row];
                        if (cells.length < 2)
                            continue;
                        var weight = cells.reduce(function (acc, x) { return acc + x.weight(); }, 0) / cells.length;
                        cells
                            .sort(function (x, y) { return x.left() - y.left(); })
                            .forEach(function (x) { x.weight(weight); });
                    }
                };
                TableCellGroupActions.prototype._distributeRows = function () {
                    var _this = this;
                    var rowModels = this._selectedCells()
                        .map(function (x) { return x.parentModel(); })
                        .reduce(function (acc, x) { return acc.indexOf(x) >= 0 ? acc : acc.concat(x); }, []), weight = rowModels.reduce(function (acc, x) { return acc + x.weight(); }, 0) / rowModels.length;
                    rowModels.forEach(function (x) { x.weight(weight); });
                    var minHeight = Math.max.apply(Math, (_a = []).concat.apply(_a, rowModels.map(function (x) { return x.cells(); }))
                        .map(function (x) {
                        var height = _this._calculateMinimalHeight(x), rowSpan = x["rowSpan"]();
                        if (rowSpan > 1) {
                            var row = x.parentModel(), table = row.parentModel(), rowIdx = table.rows.indexOf(row), divisor = 1;
                            for (var i = 1; i < rowSpan; i++) {
                                var nextRow = table.rows()[rowIdx + i];
                                if (!nextRow)
                                    break;
                                if (rowModels.indexOf(nextRow) >= 0)
                                    divisor++;
                                else
                                    height -= nextRow.size.height();
                            }
                            height /= divisor;
                        }
                        return height;
                    })), height = rowModels[0].height();
                    if (height < minHeight) {
                        var table = rowModels[0].parentModel();
                        table.size.height(table.size.height() + (minHeight - height) * rowModels.length);
                        weight *= minHeight / height;
                        rowModels.forEach(function (x) { x.weight(weight); });
                    }
                    var _a;
                };
                TableCellGroupActions.prototype._calculateMinimalHeight = function (cell) {
                    return Math.max.apply(Math, [this._calculateTextHeight(cell) + this._calculateBordersHeight(cell) + this._calculatePaddingsHeight(cell)].concat(cell.controls().map(function (control) { return control.location.y() + control.size.height(); })));
                };
                TableCellGroupActions.prototype._calculateTextHeight = function (cell) {
                    if (!(cell.text && cell.text()))
                        return 0;
                    var wordWrap = ko.unwrap(cell["wordWrap"]), width = wordWrap ? Math.max(1, cell.width() - this._calculatePaddingsWidth(cell)) + "px" : "auto", $div = $("<div>")
                        .css(jQuery.extend({
                        "height": "auto",
                        "width": width,
                        "overflow": "hidden"
                    }, cell.surface.cssCalculator.createFont(ko.unwrap(cell["font"])), cell.surface.cssCalculator.createWordWrap(wordWrap, cell.multiline())))
                        .html(cell.text())
                        .appendTo($("body"));
                    try {
                        return Designer.pixelToUnits(Math.ceil($div[0].getBoundingClientRect().height) + 2, cell.root.measureUnit(), 1);
                    }
                    finally {
                        $div.remove();
                    }
                };
                TableCellGroupActions.prototype._calculateBordersHeight = function (cell) {
                    var borders = cell.borders();
                    var toCount;
                    if (borders == "All")
                        toCount = [true, true];
                    else {
                        toCount = [false, false];
                        if (borders.indexOf("Top") >= 0)
                            toCount[0] = true;
                        if (borders.indexOf("Bottom") >= 0)
                            toCount[1] = true;
                    }
                    var row = cell.parentModel();
                    var rowIndex = row.parentModel().rows().indexOf(row);
                    if (rowIndex != 0)
                        toCount[0] = false;
                    return toCount.filter(function (x) { return x; }).length * ko.unwrap(cell["borderWidth"]);
                };
                TableCellGroupActions.prototype._isCellTextControl = function (cell) { return cell.surface.getChildrenCollection()().length === 0; };
                TableCellGroupActions.prototype._calculatePaddingsHeight = function (cell) { return this._isCellTextControl(cell) ? cell.paddingObj.top() + cell.paddingObj.bottom() : 0; };
                TableCellGroupActions.prototype._calculatePaddingsWidth = function (cell) { return this._isCellTextControl(cell) ? cell.paddingObj.left() + cell.paddingObj.right() : 0; };
                TableCellGroupActions.prototype._selectedCells = function () {
                    var result = [];
                    this._selectionProvider.selectedItems
                        .map(function (x) { return x.getControlModel(); })
                        .forEach(function (x) {
                        switch (x.controlType) {
                            case "XRTableCell":
                                result.push(x);
                                break;
                            case "XRTableRow":
                                result.push.apply(result, x.cells());
                                break;
                            case "XRTable":
                                x.rows().forEach(function (row) { return result.push.apply(result, row.cells()); });
                                break;
                        }
                    });
                    return result;
                };
                TableCellGroupActions.prototype.condition = function (context) {
                    return this._selectionProvider.selectedItems.length > 1
                        && this._selectionProvider.selectedItems.every(function (x) { return ["XRTableCell", "XRTableRow"].indexOf(x.getControlModel().controlType) >= 0; })
                        || this._selectionProvider.selectedItems.length == 1
                            && ["XRTable", "XRTableRow"].indexOf(this._selectionProvider.selectedItems[0].getControlModel().controlType) >= 0;
                };
                return TableCellGroupActions;
            })(Designer.BaseActionsProvider);
            Report.TableCellGroupActions = TableCellGroupActions;
            Report.weight = { propertyName: "weight", modelName: "@Weight", defaultVal: 0, from: Designer.floatFromModel };
            Report.rowSpan = { propertyName: "rowSpan", modelName: "@RowSpan", displayName: "Row Span", localizationId: "DevExpress.XtraReports.UI.XRTableCell.RowSpan", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.tableSerializationsInfo = [
                Report.font, Report.foreColor, Report.keepTogetherDefaultValueFalse, Report.anchorVertical, Report.anchorHorizontal, Report.commonScripts,
                { propertyName: "rows", modelName: "Rows", array: true },
                Report.dataBindings(["Bookmark", "Tag"]),
                Report.rtl,
                Report.textAlignment,
                Report.processHiddenCellMode,
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.bookmarkGroup);
            Report.tableCellSerializationsInfo = [
                Report.weight, Report.labelScripts, Report.rowSpan, Report.textTrimming,
                { propertyName: "width", displayName: "Width", localizationId: "DevExpress.XtraReports.UI.XRControl.Width" },
                { propertyName: "controls", modelName: "Controls", array: true },
                Report.dataBindings(["Text", "NavigateUrl", "Tag", "Bookmark"]),
                Report.textEditOptions
            ].concat(Report.createSinglePopularBindingInfos("Text"), Report.labelGroup);
            Report.tableRowSerializationsInfo = [
                Report.weight, Report.textAlignment, Report.keepTogether, Report.controlScripts,
                { propertyName: "height", displayName: "Height", localizationId: "DevExpress.XtraReports.UI.XRControl.Height" },
                { propertyName: "cells", modelName: "Cells", array: true },
            ].concat(Report.commonControlProperties, Report.fontGroup);
            Report.popularPropertiesTable = ["bookmark", "bookmarkParent"];
            Report.popularPropertiesTableCell = ["text", "textArea", "popularDataBinding", "popularExpression", "textFormatString", "Summary", "canGrow", "canShrink", "multiline", "wordWrap"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRLineSurface = (function (_super) {
                __extends(XRLineSurface, _super);
                function XRLineSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this["lineWidth"] = control["lineWidth"];
                    this["lineStyle"] = control["lineStyle"];
                    this["lineDirection"] = control["lineDirection"];
                    this.selectiontemplate = "dxrd-control-selection";
                    this.contenttemplate = "dxrd-line-content";
                    this._disposables.push(this.linePosition = ko.pureComputed(function () {
                        var result = {}, rect = _this.rect();
                        if (_this["lineDirection"]() === "Horizontal") {
                            result["x1"] = 0;
                            result["x2"] = rect.width;
                            result["y1"] = rect.height / 2;
                            result["y2"] = rect.height / 2;
                        }
                        if (_this["lineDirection"]() === "Vertical") {
                            result["x1"] = rect.width / 2;
                            result["x2"] = rect.width / 2;
                            result["y1"] = 0;
                            result["y2"] = rect.height;
                        }
                        if (_this["lineDirection"]() === "BackSlant") {
                            result["x1"] = 0;
                            result["x2"] = rect.width;
                            result["y1"] = 0;
                            result["y2"] = rect.height;
                        }
                        if (_this["lineDirection"]() === "Slant") {
                            result["x1"] = 0;
                            result["x2"] = rect.width;
                            result["y1"] = rect.height;
                            result["y2"] = 0;
                        }
                        return result;
                    }));
                    this._disposables.push(this.contentCss = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.stroke(), _this.cssCalculator.strokeDashArray(), _this.cssCalculator.strokeWidth());
                    }));
                }
                return XRLineSurface;
            })(Report.ControlSurface);
            Report.XRLineSurface = XRLineSurface;
            Report.lineDirection = {
                propertyName: "lineDirection",
                modelName: "@LineDirection",
                defaultVal: "Horizontal",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                displayName: "Line Direction", localizationId: "DevExpress.XtraReports.UI.XRLine.LineDirection",
                valuesArray: [
                    { value: "Horizontal", displayValue: "Horizontal", localizationId: "DevExpress.XtraReports.UI.LineDirection.Horizontal" },
                    { value: "Vertical", displayValue: "Vertical", localizationId: "DevExpress.XtraReports.UI.LineDirection.Vertical" },
                    { value: "Slant", displayValue: "Slant", localizationId: "DevExpress.XtraReports.UI.LineDirection.Slant" },
                    { value: "BackSlant", displayValue: "BackSlant", localizationId: "DevExpress.XtraReports.UI.LineDirection.BackSlant" }
                ]
            };
            Report.lineSerializationsInfo = [
                Report.foreColor, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal,
                Report.lineWidth, Report.lineDirection, Report.lineStyle, Report.controlScripts,
                Report.dataBindings(["Tag"])
            ].concat(Report.sizeLocation, Report.commonControlProperties);
            Report.popularPropertiesLine = ["lineDirection", "lineStyle", "lineWidth", "anchorVertical", "anchorHorizontal"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.shapes = {
                "Rectangle": "Rectangle",
                "Ellipse": "Ellipse",
                "Top Arrow": "Top Arrow",
                "Right Arrow": "Right Arrow",
                "Bottom Arrow": "Bottom Arrow",
                "Left Arrow": "Left Arrow",
                "Triangle": "Triangle",
                "Square": "Square",
                "Pentagon": "Pentagon",
                "Hexagon": "Hexagon",
                "Octagon": "Octagon",
                "3-Point Star": "3-Point Star",
                "4-Point Star": "4-Point Star",
                "5-Point Star": "5-Point Star",
                "6-Point Star": "6-Point Star",
                "8-Point Star": "8-Point Star",
                "Vertical Line": "Vertical Line",
                "Horizontal Line": "Horizontal Line",
                "Slant Line": "Slant Line",
                "Backslant Line": "Backslant Line",
                "Cross": "Cross",
                "Bracket": "Bracket",
                "Brace": "Brace"
            };
            var ShapeViewModel = (function (_super) {
                __extends(ShapeViewModel, _super);
                function ShapeViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.Shape(ShapeViewModel.createShape(this.Shape() || {}, serializer));
                    this.shapeFake = {
                        type: ko.pureComputed({
                            read: function () {
                                return _this.Shape()["shapeType"]();
                            },
                            write: function (val) {
                                var selectedShape = ShapeViewModel.shapes.filter(function (shape) { return shape["displayName"] === val; })[0];
                                var shape = ShapeViewModel.createShape($.extend({ "@ShapeName": selectedShape["type"] }, selectedShape["val"]), serializer);
                                if (selectedShape["angle"] !== void 0) {
                                    _this["angle"](selectedShape["angle"]);
                                }
                                if (ShapeViewModel.timeout === 0) {
                                    _this.Shape(shape);
                                }
                                else {
                                    setTimeout(function () {
                                        _this.Shape(shape);
                                    }, ShapeViewModel.timeout);
                                }
                            }
                        }),
                        content: this.Shape
                    };
                    this._disposables.push(this.shapeFake.type);
                }
                ShapeViewModel.createShape = function (model, serializer) {
                    if (serializer === void 0) { serializer = null; }
                    var type = model && model["@ShapeName"] || "Ellipse";
                    var shapeInfo = shapesMap[type];
                    var newShape = { "shapeType": ko.observable(type), "getInfo": function () { return shapeInfo; } };
                    (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(newShape, model);
                    return newShape;
                };
                ShapeViewModel.timeout = 1;
                ShapeViewModel.shapes = [
                    {
                        displayName: "Rectangle",
                        type: "Rectangle"
                    },
                    {
                        displayName: "Ellipse"
                    },
                    {
                        displayName: "Top Arrow",
                        angle: 0,
                        type: "Arrow"
                    },
                    {
                        displayName: "Right Arrow",
                        angle: 270,
                        type: "Arrow"
                    },
                    {
                        displayName: "Bottom Arrow",
                        angle: 180,
                        type: "Arrow"
                    },
                    {
                        displayName: "Left Arrow",
                        angle: 90,
                        type: "Arrow"
                    },
                    {
                        displayName: "Triangle",
                        type: "Polygon"
                    },
                    {
                        displayName: "Square",
                        val: {
                            "@NumberOfSides": 4
                        },
                        type: "Polygon"
                    },
                    {
                        displayName: "Pentagon",
                        val: {
                            "@NumberOfSides": 5
                        },
                        type: "Polygon"
                    },
                    {
                        displayName: "Hexagon",
                        val: {
                            "@NumberOfSides": 6
                        },
                        type: "Polygon"
                    },
                    {
                        displayName: "Octagon",
                        val: {
                            "@NumberOfSides": 8
                        },
                        type: "Polygon"
                    },
                    {
                        displayName: "3-Point Star",
                        type: "Star"
                    },
                    {
                        displayName: "4-Point Star",
                        val: {
                            "@StarPointCount": 4
                        },
                        type: "Star"
                    },
                    {
                        displayName: "5-Point Star",
                        val: {
                            "@StarPointCount": 5
                        },
                        type: "Star"
                    },
                    {
                        displayName: "6-Point Star",
                        val: {
                            "@StarPointCount": 6
                        },
                        type: "Star"
                    },
                    {
                        displayName: "8-Point Star",
                        val: {
                            "@StarPointCount": 8
                        },
                        type: "Star"
                    },
                    {
                        displayName: "Vertical Line",
                        type: "Line"
                    },
                    {
                        displayName: "Horizontal Line",
                        angle: 90,
                        type: "Line"
                    },
                    {
                        displayName: "Slant Line",
                        angle: 45,
                        type: "Line"
                    },
                    {
                        displayName: "Backslant Line",
                        angle: 315,
                        type: "Line"
                    },
                    {
                        displayName: "Cross",
                        type: "Cross"
                    },
                    {
                        displayName: "Bracket",
                        type: "Bracket"
                    },
                    {
                        displayName: "Brace",
                        type: "Brace"
                    }
                ];
                return ShapeViewModel;
            })(Report.ControlViewModel);
            Report.ShapeViewModel = ShapeViewModel;
            var ShapeControlSurface = (function (_super) {
                __extends(ShapeControlSurface, _super);
                function ShapeControlSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    var func = null;
                    this._disposables.push(this.imageSrc = ko.pureComputed(function () {
                        return Report.ReportRenderingService.getShapeImage(_this);
                    }));
                    this.template = "dxrd-shape";
                    this.contenttemplate = "dxrd-shape-content";
                }
                return ShapeControlSurface;
            })(Report.ControlSurface);
            Report.ShapeControlSurface = ShapeControlSurface;
            Report.shapeType = { propertyName: "shapeType", modelName: "@ShapeName", defaultVal: "Ellipse" };
            Report.stretch = { propertyName: "stretch", modelName: "@Stretch", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Stretch", localizationId: "DevExpress.XtraReports.UI.XRShape.Stretch" };
            Report.fillColor = { propertyName: "fillColor", modelName: "@FillColor", defaultVal: "transparent", editor: Designer.Widgets.editorTemplates.customColorEditor, from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Fill Color", localizationId: "DevExpress.XtraReports.UI.XRShape.FillColor" };
            Report.Shape = { propertyName: "Shape", modelName: "Shape" };
            Report.shapeFake = { propertyName: "shapeFake", editor: Report.editorTemplates.contentByType, displayName: "Shape", values: Report.shapes, localizationId: "DevExpress.XtraReports.UI.XRShape.Shape" };
            Report.shapeElementSerializationsInfo = [Report.shapeType];
            var fillet = { propertyName: "fillet", modelName: "@Fillet", defaultVal: 0, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Fillet", localizationId: "DevExpress.XtraPrinting.Shape.FilletShapeBase.Fillet" };
            var shapeRectangleSerializationsInfo = [Report.shapeType, fillet];
            var shapeStarSerializationsInfo = [
                Report.shapeType,
                { propertyName: "concavity", modelName: "@Concavity", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Concavity", localizationId: "DevExpress.XtraPrinting.Shape.ShapeStar.Concavity" },
                { propertyName: "starPointCount", modelName: "@StarPointCount", defaultVal: 3, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Count of Star Points", localizationId: "DevExpress.XtraPrinting.Shape.ShapeStar.StarPointCount" },
                fillet
            ];
            var shapeBraceSerializationsInfo = [
                Report.shapeType,
                { propertyName: "fillet", modelName: "@Fillet", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Fillet", localizationId: "DevExpress.XtraPrinting.Shape.ShapeBrace.Fillet" },
                { propertyName: "tailLength", modelName: "@TailLength", defaultVal: 20, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Tail\'s Length", localizationId: "DevExpress.XtraPrinting.Shape.ShapeBrace.TailLength" },
                { propertyName: "tipLength", modelName: "@TipLength", defaultVal: 20, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Tip\'s Length", localizationId: "DevExpress.XtraPrinting.Shape.ShapeBracket.TipLength" }
            ];
            var shapeBracketSerializationsInfo = [
                Report.shapeType,
                { propertyName: "tipLength", modelName: "@TipLength", defaultVal: 20, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Tip\'s Length", localizationId: "DevExpress.XtraPrinting.Shape.ShapeBracket.TipLength" }
            ];
            var shapePolygonSerializationsInfo = [
                Report.shapeType, fillet,
                { propertyName: "numberOfSides", modelName: "@NumberOfSides", defaultVal: 3, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Number of Sides", localizationId: "DevExpress.XtraPrinting.Shape.ShapePolygon.NumberOfSides" },
            ];
            var shapeArrowSerializationsInfo = [
                Report.shapeType,
                { propertyName: "arrowHeight", modelName: "@ArrowHeight", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Arrow Height", localizationId: "DevExpress.XtraPrinting.Shape.ShapeArrow.ArrowHeight" },
                { propertyName: "arrowWidth", modelName: "@ArrowWidth", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Arrow Width", localizationId: "DevExpress.XtraPrinting.Shape.ShapeArrow.ArrowWidth" },
                fillet
            ];
            var shapeCrossSerializationsInfo = [
                Report.shapeType, fillet,
                { propertyName: "horizontalLineWidth", modelName: "@HorizontalLineWidth", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Horizontal Line Width", localizationId: "DevExpress.XtraPrinting.Shape.ShapeCross.HorizontalLineWidth" },
                { propertyName: "verticalLineWidth", modelName: "@VerticalLineWidth", defaultVal: 50, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Vertical Line Width", localizationId: "DevExpress.XtraPrinting.Shape.ShapeCross.VerticalLineWidth" }
            ];
            var shapesMap = {
                "Rectangle": shapeRectangleSerializationsInfo,
                "Arrow": shapeArrowSerializationsInfo,
                "Ellipse": Report.shapeElementSerializationsInfo,
                "Polygon": shapePolygonSerializationsInfo,
                "Star": shapeStarSerializationsInfo,
                "Line": Report.shapeElementSerializationsInfo,
                "Bracket": shapeBracketSerializationsInfo,
                "Cross": shapeCrossSerializationsInfo,
                "Brace": shapeBraceSerializationsInfo
            };
            Report.shapeSerializationsInfo = [
                Report.lineWidth, Report.lineStyle, Report.foreColor, Report.Shape, Report.fillColor, Report.stretch, Report.angle, Report.anchorVertical, Report.anchorHorizontal, Report.controlScripts, Report.shapeFake,
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup);
            Report.popularPropertiesShape = ["stretch", "fillColor", "lineWidth", "angle", "bookmark", "bookmarkParent", "shapeFake"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRBarCodeViewModel = (function (_super) {
                __extends(XRBarCodeViewModel, _super);
                function XRBarCodeViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.symbology(this.createBarcode(this.symbology() || {}, serializer));
                    this.barcodeFake = {
                        type: ko.pureComputed({
                            read: function () {
                                return _this.symbology()["name"]();
                            },
                            write: function (val) {
                                _this.symbology(_this.createBarcode({ "@Name": val }, serializer));
                            }
                        }),
                        content: this.symbology
                    };
                    this._disposables.push(this.barcodeFake.type);
                }
                XRBarCodeViewModel.prototype.createBarcode = function (model, serializer) {
                    if (serializer === void 0) { serializer = null; }
                    var name = model && model["@Name"] || "Code1";
                    var barcodeInfo = barCodesMap[name];
                    var newBarcode = { "name": ko.observable(name), "getInfo": function () { return barcodeInfo; } };
                    (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(newBarcode, model);
                    return newBarcode;
                };
                XRBarCodeViewModel.unitProperties = ["module"];
                XRBarCodeViewModel.barCodesTypes = [
                    { value: "Codabar", displayValue: "Codabar" },
                    { value: "Code11", displayValue: "Code11" },
                    { value: "Code128", displayValue: "Code128" },
                    { value: "Code39", displayValue: "Code39" },
                    { value: "Code39Extended", displayValue: "Code39Extended" },
                    { value: "Code93", displayValue: "Code93" },
                    { value: "Code93Extended", displayValue: "Code93Extended" },
                    { value: "CodeMSI", displayValue: "CodeMSI" },
                    { value: "DataBar", displayValue: "DataBar" },
                    { value: "DataMatrix", displayValue: "DataMatrix" },
                    { value: "DataMatrixGS1", displayValue: "DataMatrixGS1" },
                    { value: "EAN128", displayValue: "EAN128" },
                    { value: "EAN13", displayValue: "EAN13" },
                    { value: "EAN8", displayValue: "EAN8" },
                    { value: "Industrial2of5", displayValue: "Industrial2of5" },
                    { value: "IntelligentMail", displayValue: "IntelligentMail" },
                    { value: "IntelligentMailPackage", displayValue: "IntelligentMailPackage" },
                    { value: "Interleaved2of5", displayValue: "Interleaved2of5" },
                    { value: "ITF14", displayValue: "ITF14" },
                    { value: "Matrix2of5", displayValue: "Matrix2of5" },
                    { value: "PDF417", displayValue: "PDF417" },
                    { value: "PostNet", displayValue: "PostNet" },
                    { value: "QRCode", displayValue: "QRCode" },
                    { value: "UPCA", displayValue: "UPCA" },
                    { value: "UPCE0", displayValue: "UPCE0" },
                    { value: "UPCE1", displayValue: "UPCE1" },
                    { value: "UPCSupplemental2", displayValue: "UPCSupplemental2" },
                    { value: "UPCSupplemental5", displayValue: "UPCSupplemental5" }
                ];
                return XRBarCodeViewModel;
            })(Report.ControlViewModel);
            Report.XRBarCodeViewModel = XRBarCodeViewModel;
            var XRBarcodeSurface = (function (_super) {
                __extends(XRBarcodeSurface, _super);
                function XRBarcodeSurface(control, context) {
                    _super.call(this, control, context);
                    this.contenttemplate = "dxrd-barcode-content";
                }
                return XRBarcodeSurface;
            })(Report.ControlSurface);
            Report.XRBarcodeSurface = XRBarcodeSurface;
            var defaultCodeSerializationInfo = { propertyName: "name", modelName: "@Name" };
            var calcCheckSum = { propertyName: "calcCheckSum", modelName: "@CalcCheckSum", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Calculate a Checksum", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeGeneratorBase.CalcCheckSum" };
            var code93SerializationInfo = [defaultCodeSerializationInfo, calcCheckSum];
            var wideNarrowRation = { propertyName: "wideNarrowRation", modelName: "@WideNarrowRatio", defaultVal: 2.5, from: Designer.floatFromModel, displayName: "Wide Narrow Ratio", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarGenerator.WideNarrowRatio", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            var codabarStartStopSymbolValues = [
                { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.None" },
                { value: "A", displayValue: "A", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.A" },
                { value: "B", displayValue: "B", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.B" },
                { value: "C", displayValue: "C", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.C" },
                { value: "D", displayValue: "D", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.D" },
            ];
            var codaBarStartSymbol = {
                propertyName: "startSymbol", modelName: "@StartSymbol", defaultVal: "A",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Start Symbol", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarGenerator.StartSymbol",
                valuesArray: codabarStartStopSymbolValues
            };
            var codaBarStopSymbol = {
                propertyName: "stopSymbol", modelName: "@StopSymbol", defaultVal: "A",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Stop Symbol", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarGenerator.StopSymbol",
                valuesArray: codabarStartStopSymbolValues
            };
            var codabarSerializationInfo = [
                defaultCodeSerializationInfo,
                codaBarStartSymbol,
                codaBarStopSymbol,
                wideNarrowRation
            ];
            var charset = {
                propertyName: "characterSet",
                modelName: "@CharacterSet", defaultVal: "CharsetA", displayName: "Character Set", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Generator.CharacterSet", editor: DevExpress.JS.Widgets.editorTemplates.combobox, valuesArray: [
                    { value: "CharsetAuto", displayValue: "CharsetAuto", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetAuto" },
                    { value: "CharsetA", displayValue: "CharsetA", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetA" },
                    { value: "CharsetB", displayValue: "CharsetB", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetB" },
                    { value: "CharsetC", displayValue: "CharsetC", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetC" }
                ]
            };
            var addLeadingZero = { propertyName: "addLeadingZero", displayName: "Add Leading Zero", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Generator.AddLeadingZero", modelName: "@AddLeadingZero", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            var code128SerializationInfo = [defaultCodeSerializationInfo, addLeadingZero, charset];
            var code39SerializationInfo = [wideNarrowRation].concat(code93SerializationInfo);
            var codeMSISerializationInfo = [
                defaultCodeSerializationInfo,
                {
                    propertyName: "msiCheckSum",
                    modelName: "@MSICheckSum", defaultVal: "Modulo10", displayName: "MSI Checksum", localizationId: "DevExpress.XtraPrinting.BarCode.CodeMSIGenerator.MSICheckSum", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    valuesArray: [
                        { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPrinting.BarCode.MSICheckSum.None" },
                        { value: "Modulo10", displayValue: "Modulo10", localizationId: "DevExpress.XtraPrinting.BarCode.MSICheckSum.Modulo10" },
                        { value: "DoubleModulo10", displayValue: "DoubleModulo10", localizationId: "DevExpress.XtraPrinting.BarCode.MSICheckSum.DoubleModulo10" }
                    ]
                }];
            var fnc1Substitute = { propertyName: "fNC1Substitute", modelName: "@FNC1Substitute", defaultVal: "#", editor: DevExpress.JS.Widgets.editorTemplates.text, displayName: "FNC1 Functional Character", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarGenerator.FNC1Substitute" };
            var dataBarSerializationInfo = [
                defaultCodeSerializationInfo,
                fnc1Substitute,
                { propertyName: "segmentsInRow", modelName: "@SegmentsInRow", defaultVal: 20, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Segments In Row", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarGenerator.SegmentsInRow" },
                {
                    propertyName: "type",
                    modelName: "@Type", defaultVal: "Omnidirectional", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    displayName: "Type", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarGenerator.Type", valuesArray: [
                        { value: "Omnidirectional", displayValue: "Omnidirectional", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Omnidirectional" },
                        { value: "Truncated", displayValue: "Truncated", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Truncated" },
                        { value: "Stacked", displayValue: "Stacked", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Stacked" },
                        { value: "StackedOmnidirectional", displayValue: "StackedOmnidirectional", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.StackedOmnidirectional" },
                        { value: "Limited", displayValue: "Limited", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Limited" },
                        { value: "Expanded", displayValue: "Expanded", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Expanded" },
                        { value: "ExpandedStacked", displayValue: "ExpandedStacked", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.ExpandedStacked" }
                    ]
                }];
            var matrixSize = {
                propertyName: "matrixSize",
                modelName: "@MatrixSize", defaultVal: "MatrixAuto", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                displayName: "Matrix Size", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixGenerator.MatrixSize", valuesArray: [
                    { value: "MatrixAuto", displayValue: "MatrixAuto", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.MatrixAuto" },
                    { value: "Matrix10x10", displayValue: "Matrix10x10", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix10x10" },
                    { value: "Matrix12x12", displayValue: "Matrix12x12", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix12x12" },
                    { value: "Matrix14x14", displayValue: "Matrix14x14", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix14x14" },
                    { value: "Matrix16x16", displayValue: "Matrix16x16", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix16x16" },
                    { value: "Matrix18x18", displayValue: "Matrix18x18", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix18x18" },
                    { value: "Matrix20x20", displayValue: "Matrix20x20", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix20x20" },
                    { value: "Matrix22x22", displayValue: "Matrix22x22", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix22x22" },
                    { value: "Matrix24x24", displayValue: "Matrix24x24", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix24x24" },
                    { value: "Matrix26x26", displayValue: "Matrix26x26", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix26x26" },
                    { value: "Matrix32x32", displayValue: "Matrix32x32", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix32x32" },
                    { value: "Matrix36x36", displayValue: "Matrix36x36", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix36x36" },
                    { value: "Matrix40x40", displayValue: "Matrix40x40", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix40x40" },
                    { value: "Matrix44x44", displayValue: "Matrix44x44", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix44x44" },
                    { value: "Matrix48x48", displayValue: "Matrix48x48", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix48x48" },
                    { value: "Matrix52x52", displayValue: "Matrix52x52", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix52x52" },
                    { value: "Matrix64x64", displayValue: "Matrix64x64", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix64x64" },
                    { value: "Matrix72x72", displayValue: "Matrix72x72", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix72x72" },
                    { value: "Matrix80x80", displayValue: "Matrix80x80", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix80x80" },
                    { value: "Matrix88x88", displayValue: "Matrix88x88", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix88x88" },
                    { value: "Matrix96x96", displayValue: "Matrix96x96", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix96x96" },
                    { value: "Matrix104x104", displayValue: "Matrix104x104", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix104x104" },
                    { value: "Matrix120x120", displayValue: "Matrix120x120", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix120x120" },
                    { value: "Matrix132x132", displayValue: "Matrix132x132", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix132x132" },
                    { value: "Matrix144x144", displayValue: "Matrix144x144", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix144x144" },
                    { value: "Matrix8x18", displayValue: "Matrix8x18", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix8x18" },
                    { value: "Matrix8x32", displayValue: "Matrix8x32", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix8x32" },
                    { value: "Matrix12x26", displayValue: "Matrix12x26", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix12x26" },
                    { value: "Matrix12x36", displayValue: "Matrix12x36", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix12x36" },
                    { value: "Matrix16x36", displayValue: "Matrix16x36", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix16x36" },
                    { value: "Matrix16x48", displayValue: "Matrix16x48", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix16x48" }
                ]
            };
            var dataMatrixSerializationInfo = [
                defaultCodeSerializationInfo,
                matrixSize,
                {
                    propertyName: "compactionMode",
                    modelName: "@CompactionMode", defaultVal: "ASCII", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                    displayName: "Compaction Mode", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixGenerator.CompactionMode", valuesArray: [
                        { value: "ASCII", displayValue: "ASCII", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.ASCII" },
                        { value: "C40", displayValue: "C40", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.C40" },
                        { value: "Text", displayValue: "Text", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.Text" },
                        { value: "X12", displayValue: "X12", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.X12" },
                        { value: "Edifact", displayValue: "Edifact", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.Edifact" },
                        { value: "Binary", displayValue: "Binary", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.Binary" }
                    ]
                }];
            var humanReadableText = { propertyName: "humanReadableText", modelName: "@HumanReadableText", defaultVal: true, from: Designer.parseBool, displayName: "Human-Readable Text", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixGS1Generator.HumanReadableText", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            var dataMatrixGS1SerializationInfo = [
                defaultCodeSerializationInfo,
                matrixSize,
                fnc1Substitute,
                humanReadableText
            ];
            var EAN128SerializationInfo = [
                defaultCodeSerializationInfo,
                charset,
                fnc1Substitute,
                humanReadableText
            ];
            var Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo = [defaultCodeSerializationInfo, calcCheckSum, wideNarrowRation];
            var PDF417SerializationInfo = [
                defaultCodeSerializationInfo,
                { propertyName: "columns", modelName: "@Columns", defaultVal: 1, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Columns", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.Columns" },
                {
                    propertyName: "compactionMode1",
                    modelName: "@CompactionMode", defaultVal: "Text", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Compaction Mode", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.CompactionMode",
                    valuesArray: [
                        { value: "Binary", displayValue: "Binary", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417CompactionMode.Binary" },
                        { value: "Text", displayValue: "Text", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417CompactionMode.Text" }
                    ]
                },
                {
                    propertyName: "errorCorrectionLevel",
                    modelName: "@ErrorCorrectionLevel", defaultVal: "Level2", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Error Correction Level", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.ErrorCorrectionLevel",
                    valuesArray: [
                        { value: "Level0", displayValue: "Level0", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level0" },
                        { value: "Level1", displayValue: "Level1", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level1" },
                        { value: "Level2", displayValue: "Level2", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level2" },
                        { value: "Level3", displayValue: "Level3", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level3" },
                        { value: "Level4", displayValue: "Level4", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level4" },
                        { value: "Level5", displayValue: "Level5", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level5" },
                        { value: "Level6", displayValue: "Level6", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level6" },
                        { value: "Level7", displayValue: "Level7", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level7" },
                        { value: "Level8", displayValue: "Level8", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level8" }
                    ]
                },
                { propertyName: "rows", modelName: "@Rows", defaultVal: 0, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Rows", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.Rows" },
                { propertyName: "yToXRatio", modelName: "@YToXRatio", defaultVal: 3, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Y to X Ratio", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.YToXRatio" },
                { propertyName: "truncateSymbol", modelName: "@TruncateSymbol", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Truncate Symbol", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.TruncateSymbol" }
            ];
            var QRCodeSerializationInfo = [
                defaultCodeSerializationInfo,
                {
                    propertyName: "compactionMode2",
                    modelName: "@CompactionMode", defaultVal: "AlphaNumeric", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Compaction Mode", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeGenerator.CompactionMode",
                    valuesArray: [
                        { value: "Numeric", displayValue: "Numeric", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeCompactionMode.Numeric" },
                        { value: "AlphaNumeric", displayValue: "AlphaNumeric", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeCompactionMode.AlphaNumeric" },
                        { value: "Byte", displayValue: "Byte", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeCompactionMode.Byte" }
                    ]
                },
                {
                    propertyName: "errorCorrectionLevel1",
                    modelName: "@ErrorCorrectionLevel", defaultVal: "L", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Error Correction Level", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeGenerator.ErrorCorrectionLevel",
                    valuesArray: [
                        { value: "M", displayValue: "M", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.M" },
                        { value: "L", displayValue: "L", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.L" },
                        { value: "H", displayValue: "H", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.H" },
                        { value: "Q", displayValue: "Q", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.Q" }
                    ]
                },
                {
                    propertyName: "version",
                    modelName: "@Version", defaultVal: "Version1", editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Version", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeGenerator.Version",
                    valuesArray: [
                        { value: "AutoVersion", displayValue: "AutoVersion", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.AutoVersion" },
                        { value: "Version1", displayValue: "Version1", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version1" },
                        { value: "Version2", displayValue: "Version2", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version2" },
                        { value: "Version3", displayValue: "Version3", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version3" },
                        { value: "Version4", displayValue: "Version4", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version4" },
                        { value: "Version5", displayValue: "Version5", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version5" },
                        { value: "Version6", displayValue: "Version6", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version6" },
                        { value: "Version7", displayValue: "Version7", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version7" },
                        { value: "Version8", displayValue: "Version8", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version8" },
                        { value: "Version9", displayValue: "Version9", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version9" },
                        { value: "Version10", displayValue: "Version10", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version10" },
                        { value: "Version11", displayValue: "Version11", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version11" },
                        { value: "Version12", displayValue: "Version12", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version12" },
                        { value: "Version13", displayValue: "Version13", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version13" },
                        { value: "Version14", displayValue: "Version14", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version14" },
                        { value: "Version15", displayValue: "Version15", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version15" },
                        { value: "Version16", displayValue: "Version16", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version16" },
                        { value: "Version17", displayValue: "Version17", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version17" },
                        { value: "Version18", displayValue: "Version18", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version18" },
                        { value: "Version19", displayValue: "Version19", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version19" },
                        { value: "Version20", displayValue: "Version20", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version20" },
                        { value: "Version21", displayValue: "Version21", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version21" },
                        { value: "Version22", displayValue: "Version22", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version22" },
                        { value: "Version23", displayValue: "Version23", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version23" },
                        { value: "Version24", displayValue: "Version24", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version24" },
                        { value: "Version25", displayValue: "Version25", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version25" },
                        { value: "Version26", displayValue: "Version26", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version26" },
                        { value: "Version27", displayValue: "Version27", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version27" },
                        { value: "Version28", displayValue: "Version28", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version28" },
                        { value: "Version29", displayValue: "Version29", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version29" },
                        { value: "Version30", displayValue: "Version30", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version30" },
                        { value: "Version31", displayValue: "Version31", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version31" },
                        { value: "Version32", displayValue: "Version32", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version32" },
                        { value: "Version33", displayValue: "Version33", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version33" },
                        { value: "Version34", displayValue: "Version34", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version34" },
                        { value: "Version35", displayValue: "Version35", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version35" },
                        { value: "Version36", displayValue: "Version36", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version36" },
                        { value: "Version37", displayValue: "Version37", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version37" },
                        { value: "Version38", displayValue: "Version38", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version38" },
                        { value: "Version39", displayValue: "Version39", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version39" },
                        { value: "Version40", displayValue: "Version40", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version40" },
                    ]
                }
            ];
            Report.autoModule = { propertyName: "autoModule", modelName: "@AutoModule", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Auto-Module", localizationId: "DevExpress.XtraReports.UI.XRBarCode.AutoModule" };
            Report.barCodeOrientation = {
                propertyName: "barCodeOrientation",
                modelName: "@BarCodeOrientation", defaultVal: "Normal",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                displayName: "Orientation", localizationId: "DevExpress.XtraReports.UI.XRBarCode.BarCodeOrientation", valuesArray: [
                    { value: "Normal", displayValue: "Normal", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeOrientation.Normal" },
                    { value: "UpsideDown", displayValue: "UpsideDown", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeOrientation.UpsideDown" },
                    { value: "RotateLeft", displayValue: "RotateLeft", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeOrientation.RotateLeft" },
                    { value: "RotateRight", displayValue: "RotateRight", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeOrientation.RotateRight" }
                ]
            };
            Report.moduleInfo = { propertyName: "module", modelName: "@Module", defaultVal: 2, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Module", localizationId: "DevExpress.XtraReports.UI.XRBarCode.Module" };
            Report.showText = { propertyName: "showText", modelName: "@ShowText", defaultVal: true, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, displayName: "Show Text", localizationId: "DevExpress.XtraReports.UI.XRBarCode.ShowText" };
            Report.symbology = { propertyName: "symbology", modelName: "Symbology" };
            Report.barcodeFake = { propertyName: "barcodeFake", valuesArray: XRBarCodeViewModel.barCodesTypes, editor: Report.editorTemplates.contentByType, displayName: "Symbology", localizationId: "DevExpress.XtraReports.UI.XRBarCode.Symbology" };
            Report.alignment = {
                propertyName: "alignment",
                modelName: "@Alignment", displayName: "Alignment", localizationId: "DevExpress.XtraReports.UI.XRBarCode.Alignment", defaultVal: "TopLeft",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: Report.textAlignmentValues
            };
            var barCodesMap = {
                "Codabar": codabarSerializationInfo,
                "Code11": [defaultCodeSerializationInfo],
                "Code128": code128SerializationInfo,
                "Code39": code39SerializationInfo,
                "Code39Extended": code39SerializationInfo,
                "Code93": code93SerializationInfo,
                "Code93Extended": code93SerializationInfo,
                "CodeMSI": codeMSISerializationInfo,
                "DataBar": dataBarSerializationInfo,
                "DataMatrix": dataMatrixSerializationInfo,
                "DataMatrixGS1": dataMatrixGS1SerializationInfo,
                "EAN128": EAN128SerializationInfo,
                "EAN13": [defaultCodeSerializationInfo],
                "EAN8": [defaultCodeSerializationInfo],
                "Industrial2of5": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                "IntelligentMail": [defaultCodeSerializationInfo],
                "IntelligentMailPackage": [defaultCodeSerializationInfo, fnc1Substitute],
                "Interleaved2of5": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                "ITF14": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                "Matrix2of5": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                "PDF417": PDF417SerializationInfo,
                "PostNet": [defaultCodeSerializationInfo],
                "QRCode": QRCodeSerializationInfo,
                "UPCA": [defaultCodeSerializationInfo],
                "UPCE0": [defaultCodeSerializationInfo],
                "UPCE1": [defaultCodeSerializationInfo],
                "UPCSupplemental2": [defaultCodeSerializationInfo],
                "UPCSupplemental5": [defaultCodeSerializationInfo]
            };
            Report.barcodeSerializationsInfo = [
                Report.alignment, Report.autoModule, Report.barCodeOrientation, Report.moduleInfo, Report.showText, Report.symbology, Report.text, Report.textFormatString, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal,
                $.extend({}, Report.textAlignment, { defaultVal: "BottomLeft" }),
                Report.textControlScripts, Report.barcodeFake,
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag", "Text"]),
            ].concat(Report.createSinglePopularBindingInfos("Text"), Report.sizeLocation, Report.commonControlProperties, Report.fontGroup, Report.navigationGroup, Report.processGroup);
            Report.popularPropertiesBarCode = ["barcodeFake", "module", "autoModule", "barCodeOrientation", "text", "popularDataBinding", "popularExpression", "textFormatString", "bookmark", "bookmarkParent", "showText"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ZipCodeSurface = (function (_super) {
                __extends(ZipCodeSurface, _super);
                function ZipCodeSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.displayText = function () {
                        var text = control.text();
                        text = text && text.replace(/[^\d]/g, "_") || "0".replace(/[^\d]/g, "_");
                        return text;
                    };
                    this.fontSize = ko.pureComputed(function () {
                        return Designer.unitsToPixel(control["size"]["height"](), context.measureUnit());
                    });
                    this.letterSpacing = ko.pureComputed(function () {
                        return Math.ceil(_this.fontSize() / 10);
                    });
                    this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.zipCodeFontCss(_this.fontSize()), _this.cssCalculator.backGroundCss(), _this.cssCalculator.zipCodeAlignment(), _this.cssCalculator.foreColorCss());
                    });
                    this.contentCss = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.zipCodeAlignment(), _this.cssCalculator.paddingsCss(), { 'letterSpacing': _this.letterSpacing() + "px" }, { 'lineHeight': 'inherit' });
                    });
                }
                return ZipCodeSurface;
            })(Report.ControlSurface);
            Report.ZipCodeSurface = ZipCodeSurface;
            Report.segmentWidth = { propertyName: "segmentWidth", modelName: "@SegmentWidth", defaultVal: 4, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Segment Width", localizationId: "DevExpress.XtraReports.UI.XRZipCode.SegmentWidth" };
            Report.zipCodeSerializationInfo = [
                Report.foreColor, Report.segmentWidth, Report.keepTogether, Report.anchorVertical, Report.anchorHorizontal, Report.textControlScripts,
                $.extend({}, Report.text, { defaultVal: "0" }, Report.textFormatString),
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag", "Text"])
            ].concat(Report.createSinglePopularBindingInfos("Text"), Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup);
            Report.popularPropertiesZipCode = ["text", "popularDataBinding", "popularExpression", "segmentWidth", "bookmark", "bookmarkParent"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRGaugeViewModel = (function (_super) {
                __extends(XRGaugeViewModel, _super);
                function XRGaugeViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this._disposables.push(this.viewType.subscribe(function (val) {
                        return _this.viewStyle(val === "Circular" ? Report.circularValues[0].value : Report.linearValues[0].value);
                    }));
                }
                XRGaugeViewModel.prototype.getInfo = function () {
                    var viewStyleProperty = Report.xrGaugeSerializationInfo.filter(function (info) { return info.propertyName === "viewStyle"; })[0];
                    viewStyleProperty.defaultVal = this.viewType && (this.viewType() === "Linear") ? "Horizontal" : "Half";
                    return Report.xrGaugeSerializationInfo;
                };
                XRGaugeViewModel.bindings = ["ActualValue", "Maximum", "Minimum", "TargetValue"];
                return XRGaugeViewModel;
            })(Report.ControlViewModel);
            Report.XRGaugeViewModel = XRGaugeViewModel;
            Report.circularValues = [
                { displayValue: "Half", value: "Half", localizationId: "GaugesPresetsStringId.ShapeHalf" },
                { displayValue: "Full", value: "Full", localizationId: "GaugesPresetsStringId.ShapeFull" },
                { displayValue: "QuarterLeft", value: "QuarterLeft", localizationId: "GaugesPresetsStringId.ShapeQuarterLeft" },
                { displayValue: "QuarterRight", value: "QuarterRight", localizationId: "GaugesPresetsStringId.ShapeQuarterRight" },
                { displayValue: "ThreeFourth", value: "ThreeFourth", localizationId: "GaugesPresetsStringId.ShapeThreeFourth" }
            ];
            Report.linearValues = [
                { displayValue: "Horizontal", value: "Horizontal", localizationId: "GaugesPresetsStringId.ShapeHorizontal" },
                { displayValue: "Vertical", value: "Vertical", localizationId: "GaugesPresetsStringId.ShapeVertical" }
            ];
            Report.actualValue = { propertyName: "actualValue", defaultVal: null, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Actual Value", localizationId: "DevExpress.XtraReports.UI.XRGauge.ActualValue", modelName: "@ActualValue" };
            Report.maximum = { propertyName: "maximum", defaultVal: null, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Maximum", localizationId: "DevExpress.XtraReports.UI.XRGauge.Maximum", modelName: "@Maximum" };
            Report.minimum = { propertyName: "minimum", modelName: "@Minimum", defaultVal: null, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Minimum", localizationId: "DevExpress.XtraReports.UI.XRGauge.Minimum" };
            Report.tickmarkCount = { propertyName: "tickmarkCount", modelName: "@TickmarkCount", defaultVal: 11, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Tickmark Count", localizationId: "DevExpress.XtraReports.UI.XRGauge.TickmarkCount" };
            Report.targetValue = { propertyName: "targetValue", modelName: "@TargetValue", defaultVal: null, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Target Value", localizationId: "DevExpress.XtraReports.UI.XRGauge.TargetValue" };
            Report.viewStyle = { propertyName: "viewStyle", modelName: "@ViewStyle", displayName: "View Style", localizationId: "DevExpress.XtraReports.UI.XRGauge.ViewStyle", editor: Report.editorTemplates.viewStyle };
            Report.viewTheme = {
                propertyName: "viewTheme", modelName: "@ViewTheme",
                defaultVal: "FlatLight", displayName: "View Theme", localizationId: "DevExpress.XtraReports.UI.XRGauge.ViewTheme", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "FlatLight", displayValue: "FlatLight", localizationId: "GaugesPresetsStringId.ThemeFlatLight" },
                    { value: "FlatDark", displayValue: "FlatDark", localizationId: "GaugesPresetsStringId.ThemeFlatDark" }
                ]
            };
            Report.viewType = {
                propertyName: "viewType", modelName: "@ViewType",
                defaultVal: "Circular", displayName: "View Type", localizationId: "DevExpress.XtraReports.UI.XRGauge.ViewType", editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: [
                    { value: "Circular", displayValue: "Circular", localizationId: "ASPxReportsStringId.ReportDesigner_GaugeViewType_Circular" },
                    { value: "Linear", displayValue: "Linear", localizationId: "ASPxReportsStringId.ReportDesigner_GaugeViewType_Linear" }
                ]
            };
            Report.xrGaugeSerializationInfo = [
                Report.viewStyle, Report.viewTheme, Report.viewType, Report.actualValue, Report.tickmarkCount, Report.maximum, Report.minimum, Report.targetValue, Report.anchorVertical, Report.anchorHorizontal, Report.controlScripts, Report.imageType,
                Report.dataBindings(["ActualValue", "Bookmark", "Maximum", "Minimum", "NavigateUrl", "Tag", "TargetValue"])
            ].concat(XRGaugeViewModel.bindings
                .map(function (name) {
                return Report.createPopularBindingInfos({ propertyName: name, localizationId: "DevExpress.XtraReports.UI.XRGauge." + name });
            })
                .reduce(function (a, b) { return a.concat(b); }))
                .concat(Report.sizeLocation, Report.commonControlProperties, Report.navigationGroup);
            Report.popularPropertiesGauge = ["viewType", "viewStyle", "viewTheme", "actualValue", "popularDataBindingActualValue", "popularExpressionActualValue", "targetValue", "popularDataBindingTargetValue", "popularExpressionTargetValue",
                "minimum", "popularDataBindingMinimum", "popularExpressionMinimum", "maximum", "popularDataBindingMaximum", "popularExpressionMaximum"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRPageInfoSurface = (function (_super) {
                __extends(XRPageInfoSurface, _super);
                function XRPageInfoSurface(control, context) {
                    _super.call(this, control, context);
                    this.displayText = function () {
                        var format = control["textFormatString"] && control.textFormatString();
                        if (format)
                            return format;
                        var value = control["pageInfo"](), info = pageInfoValuesMap.filter(function (item) { return item.value === value; })[0];
                        if (info)
                            return info.displayValue;
                        return value;
                    };
                }
                return XRPageInfoSurface;
            })(Report.ControlSurface);
            Report.XRPageInfoSurface = XRPageInfoSurface;
            var pageInfoValuesMap = [
                { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPrinting.PageInfo.None" },
                { value: "Number", displayValue: "Page Number", localizationId: "DevExpress.XtraPrinting.PageInfo.Number" },
                { value: "NumberOfTotal", displayValue: "'Current of Total' Page Numbers", localizationId: "DevExpress.XtraPrinting.PageInfo.NumberOfTotal" },
                { value: "RomLowNumber", displayValue: "Page Number (Roman, Lowercase)", localizationId: "DevExpress.XtraPrinting.PageInfo.RomLowNumber" },
                { value: "RomHiNumber", displayValue: "Page Number (Roman, Uppercase)", localizationId: "DevExpress.XtraPrinting.PageInfo.RomHiNumber" },
                { value: "DateTime", displayValue: "Current Date and Time", localizationId: "DevExpress.XtraPrinting.PageInfo.DateTime" },
                { value: "UserName", displayValue: "User Name", localizationId: "DevExpress.XtraPrinting.PageInfo.UserName" },
                { value: "Total", displayValue: "Page Count", localizationId: "DevExpress.XtraPrinting.PageInfo.Total" }
            ];
            var XRPageInfoViewModel = (function (_super) {
                __extends(XRPageInfoViewModel, _super);
                function XRPageInfoViewModel(model, parent, serializer) {
                    _super.call(this, model, parent, serializer);
                    var format = this["_model"]["@Format"];
                    if (format) {
                        if (!this.textFormatString()) {
                            this.textFormatString(format);
                        }
                        delete this["_model"]["@Format"];
                    }
                }
                return XRPageInfoViewModel;
            })(Report.ControlViewModel);
            Report.XRPageInfoViewModel = XRPageInfoViewModel;
            Report.pageInfo = {
                propertyName: "pageInfo",
                modelName: "@PageInfo", defaultVal: "NumberOfTotal", displayName: "Page Information", localizationId: "DevExpress.XtraReports.UI.XRPageInfo.PageInfo",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox,
                valuesArray: pageInfoValuesMap
            };
            Report.startPageNumber = {
                propertyName: "startPageNumber",
                modelName: "@StartPageNumber", displayName: "Start Page Number", localizationId: "DevExpress.XtraReports.UI.XRPageInfo.StartPageNumber", defaultVal: 1, from: Designer.floatFromModel, editor: DevExpress.JS.Widgets.editorTemplates.numeric
            };
            Report.runningBand = {
                propertyName: "runningBand", modelName: "@RunningBand", link: true, displayName: "Running Band", localizationId: "DevExpress.XtraReports.UI.XRPageInfo.RunningBand", editor: Report.editorTemplates.runningBand
            };
            Report.pageInfoSerializationsInfo = [
                Report.anchorVertical, Report.anchorHorizontal, Report.textAlignment, Report.wordWrap, Report.textFormatString, Report.pageInfo, Report.startPageNumber, Report.runningBand, Report.textControlScripts, Report.rtl,
                Report.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
            ].concat(Report.sizeLocation, Report.commonControlProperties, Report.fontGroup, Report.navigationGroup);
            Report.popularPropertiesPageInfo = ["pageInfo", "startPageNumber", "textFormatString", "runningBand", "anchorVertical"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRPageBreakSurface = (function (_super) {
                __extends(XRPageBreakSurface, _super);
                function XRPageBreakSurface(control, context) {
                    var _this = this;
                    this._width = ko.pureComputed({
                        read: function () {
                            return context.pageWidth() - context.margins.right() - context.margins.left();
                        },
                        write: function () { }
                    });
                    _super.call(this, control, context, XRPageBreakSurface._unitProperties);
                    this._disposables.push(this._width);
                    this.template = "dxrd-pagebreak";
                    this.contenttemplate = "dxrd-line-content";
                    this.selectiontemplate = "dxrd-pagebreak-selection";
                    this._disposables.push(this.linePosition = ko.pureComputed(function () {
                        var rect = _this.rect();
                        return {
                            "x1": 0,
                            "x2": rect.width,
                            "y1": rect.height / 2,
                            "y2": rect.height / 2
                        };
                    }));
                    this.contentCss = ko.observable({
                        'stroke': 'black',
                        'strokeWidth': 1,
                        'strokeDasharray': '4px, 4px'
                    });
                    this._disposables.push(this.lineHeight = ko.pureComputed(function () {
                        return _this["position"].lineHeight() / _this._context.zoom();
                    }));
                    this.css = ko.observable({});
                    this._disposables.push(this.isIntersect = ko.pureComputed(function () { return false; }));
                }
                Object.defineProperty(XRPageBreakSurface.prototype, "isIntersectionDeny", {
                    get: function () { return true; },
                    enumerable: true,
                    configurable: true
                });
                XRPageBreakSurface._unitProperties = {
                    _x: function (o) {
                        return ko.observable(0);
                    },
                    _y: function (o) {
                        return o.location.y;
                    },
                    _height: function (o) {
                        return ko.observable(2);
                    }
                };
                return XRPageBreakSurface;
            })(Report.ControlSurfaceBase);
            Report.XRPageBreakSurface = XRPageBreakSurface;
            Report.pageBreakSerializationsInfo = [Report.location, Report.formattingRuleLinks, Report.truncatedControlScripts].concat(Report.baseControlProperties);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            function findBandByPositionY(bandsHolder, position) {
                var result = null;
                bandsHolder.bands().forEach(function (band) {
                    if (band.absolutePosition.y.peek() <= position) {
                        if (band) {
                            result = findBandByPositionY(band.bandsHolder, position) || band;
                            return false;
                        }
                    }
                });
                return result;
            }
            var CrossBandControlViewModel = (function (_super) {
                __extends(CrossBandControlViewModel, _super);
                function CrossBandControlViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this.isCrossbandShow = ko.computed(function () {
                        return !!(_this.startBand() && _this.endBand());
                    });
                    var originalEndBand = this.endBand;
                    this._disposables.push(this.endPoint.x = ko.pureComputed({
                        read: function () {
                            return _this.startPoint.x();
                        },
                        write: function (val) {
                            if (Designer.checkModelReady(_this.root)) {
                                _this.startPoint.x(val);
                            }
                        }
                    }));
                    this._disposables.push(this.locationF.x = ko.pureComputed({
                        read: function () {
                            return _this.startPoint.x();
                        },
                        write: function (val) {
                            if (Designer.checkModelReady(_this.root)) {
                                _this.startPoint.x(val);
                            }
                        }
                    }));
                    this._disposables.push(this.locationF.y = ko.pureComputed({
                        read: function () {
                            return _this.startPoint.y();
                        },
                        write: function (val) {
                            if (Designer.checkModelReady(_this.root)) {
                                _this.startPoint.y(val);
                            }
                        }
                    }));
                    if (this.parentModel()) {
                        this._subscribeBands(this.parentModel());
                    }
                    else {
                        this._disposables.push(this.parentModel.subscribe(function (report) {
                            if (report)
                                _this._subscribeBands(report);
                        }));
                    }
                    this._disposables.push(this.isCrossbandShow);
                }
                CrossBandControlViewModel.prototype._subscribeBands = function (report) {
                    var _this = this;
                    this._disposables.push(report.bands.subscribe(function (changes) {
                        for (var i = 0; i < changes.length; i++) {
                            var change = changes[i];
                            if (change.status === "deleted") {
                                if (change.value === _this.startBand() && change.value === _this.endBand()) {
                                    report.crossBandControls.remove(_this);
                                }
                                else if (change.value === _this.endBand()) {
                                    _this.endBand(report.bands()[change.index - 1]);
                                    _this.endPoint.y(report.bands()[change.index - 1].height());
                                }
                                else if (change.value === _this.startBand()) {
                                    var saveEndBand = _this.endBand(), saveEndPointY = _this.endPoint.y();
                                    _this.startBand(report.bands()[change.index]);
                                    _this.startPoint.y(0);
                                    _this.endBand(saveEndBand);
                                    _this.endPoint.y(saveEndPointY);
                                }
                            }
                        }
                    }, null, "arrayChange"));
                };
                CrossBandControlViewModel.prototype.getNearestParent = function (target) {
                    var result = target;
                    while (result.parentModel()) {
                        result = result.parentModel();
                    }
                    return result;
                };
                CrossBandControlViewModel.prototype.isResettableProperty = function (propertyName) {
                    return _super.prototype.isResettableProperty.call(this, propertyName) && ["startPoint", "endPoint", "startBand", "endBand"].indexOf(propertyName) === -1;
                };
                CrossBandControlViewModel.prototype.isPropertyVisible = function (name) {
                    if (name === "size")
                        return false;
                    return _super.prototype.isPropertyVisible.call(this, name);
                };
                CrossBandControlViewModel.prototype.getControlContainerName = function () { return "crossBandControls"; };
                CrossBandControlViewModel.unitProperties = ["width"];
                return CrossBandControlViewModel;
            })(Report.ReportElementViewModel);
            Report.CrossBandControlViewModel = CrossBandControlViewModel;
            var CrossBandSurface = (function (_super) {
                __extends(CrossBandSurface, _super);
                function CrossBandSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, CrossBandSurface._unitProperties);
                    this.edgeUnderCursor = ko.observable({ isOver: false, x: 0, y: 0, isNotDropTarget: true });
                    this.underCursor = ko.observable({ isOver: false, x: 0, y: 0, isNotDropTarget: true });
                    this._disposables.push(this["_x"].subscribe(function (newVal) {
                        _this["_endX"](newVal);
                    }));
                    this.visible = control.isCrossbandShow;
                    var currentAbsoluteStartY = this["_startY"]();
                    var currentAbsoluteEndY = this["_endY"]();
                    this._disposables.push(ko.computed(function () {
                        if (control.startBand()) {
                            var startBandSurface = Designer.findSurface(control.startBand.peek());
                            currentAbsoluteStartY = _this._isBandCollapsed(startBandSurface) ? startBandSurface.absolutePosition.y() : _this["_startY"]() + startBandSurface.absolutePosition.y();
                        }
                        _this["_y"](currentAbsoluteStartY);
                    }));
                    this._disposables.push(ko.computed(function () {
                        if (control.endBand()) {
                            var endBandSurface = Designer.findSurface(control.endBand.peek());
                            currentAbsoluteEndY = _this._isBandCollapsed(endBandSurface) ? endBandSurface.absolutePosition.y() : _this["_endY"]() + endBandSurface.absolutePosition.y();
                        }
                        _this["_height"](currentAbsoluteEndY - currentAbsoluteStartY);
                    }));
                    this._disposables.push(ko.computed(function () {
                        var absoluteStartY = _this["_y"]();
                        if (absoluteStartY < 0) {
                            _this["_y"](0);
                            return;
                        }
                        if (absoluteStartY !== currentAbsoluteStartY) {
                            var startBandSurface = findBandByPositionY(_this.parent.bandsHolder, absoluteStartY);
                            control.startBand(startBandSurface.getControlModel());
                            currentAbsoluteStartY = absoluteStartY;
                            _this["_startY"](currentAbsoluteStartY - startBandSurface.absolutePosition.y());
                            _this._updateEndPoint(_this["_height"](), currentAbsoluteEndY, currentAbsoluteStartY);
                        }
                    }));
                    this._disposables.push(ko.computed(function () {
                        var height = _this["_height"]();
                        if (height !== currentAbsoluteEndY - currentAbsoluteStartY) {
                            _this._updateEndPoint(height, currentAbsoluteEndY, currentAbsoluteStartY);
                        }
                    }));
                    this.template = control.controlType === "XRCrossBandLine" ? "dxrd-crossband-line" : "dxrd-crossband";
                    if (this.getControlModel().controlType === "XRCrossBandLine") {
                        this._disposables.push(this.lineCss = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.stroke(), _this.cssCalculator.strokeWidthWithWidth(), _this.cssCalculator.strokeDashArrayWithWidth());
                        }));
                        this._disposables.push(this.lineWidthCss = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.strokeWidthWithWidth());
                        }));
                    }
                    else {
                        this._disposables.push(this.leftCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Left"); }));
                        this._disposables.push(this.rightCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Right"); }));
                        this._disposables.push(this.topCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Top"); }));
                        this._disposables.push(this.bottomCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Bottom"); }));
                    }
                    this._disposables.push(control.startBand.subscribe(function (newBand) {
                        if (newBand) {
                            var bandSurface = Designer.findSurface(newBand);
                            _this["_y"](bandSurface.absolutePosition.y());
                        }
                    }));
                    this._disposables.push(control.endBand.subscribe(function (newBand) {
                        if (newBand) {
                            var bandSurface = Designer.findSurface(newBand);
                            _this["_height"](bandSurface.absolutePosition.y() - _this["_y"]());
                        }
                    }));
                    this._disposables.push(this.borderWidth = ko.pureComputed(function () {
                        return control["borderWidth"] && Math.floor(control["borderWidth"]());
                    }));
                }
                CrossBandSurface.prototype._isBandCollapsed = function (bandSurface) {
                    return bandSurface && (bandSurface.collapsed() || bandSurface.isSomeParentCollapsed());
                };
                CrossBandSurface.prototype._updateEndPoint = function (height, currentAbsoluteEndY, currentAbsoluteStartY) {
                    currentAbsoluteEndY = currentAbsoluteStartY + height;
                    var endBandSurface = findBandByPositionY(this.parent.bandsHolder, currentAbsoluteEndY);
                    if (!endBandSurface) {
                        return;
                    }
                    if (endBandSurface.absolutePosition.y.peek() + endBandSurface.height.peek() < currentAbsoluteEndY) {
                        endBandSurface["_height"](currentAbsoluteEndY - endBandSurface.absolutePosition.y.peek());
                    }
                    this._control.endBand(endBandSurface.getControlModel());
                    this["_endY"](currentAbsoluteEndY - endBandSurface.absolutePosition.y());
                };
                CrossBandSurface.prototype._getAllBands = function (band) {
                    var _this = this;
                    var bands = band.bandsHolder.bands(), innerBands = [];
                    bands.forEach(function (band) {
                        innerBands = innerBands.concat(_this._getAllBands(band));
                    });
                    return [].concat(bands, innerBands);
                };
                CrossBandSurface.prototype._getIntersectionBands = function (currentRect, bands) {
                    var _this = this;
                    var bandSurfaces = bands.filter(function (band) { return _this.isThereIntersection(currentRect, band.absoluteRect()); }), intersectionBands = [].concat(bandSurfaces);
                    bandSurfaces.forEach(function (band) {
                        intersectionBands = intersectionBands.concat(_this._getAllBands(band));
                    });
                    intersectionBands = intersectionBands.filter(function (band) {
                        return band.controls && band.controls().length > 0;
                    });
                    return intersectionBands;
                };
                CrossBandSurface.prototype._getCrossBandBoxSides = function () {
                    var currentRect = this.rect(), borderWidth = this.getControlModel()["borderWidth"]();
                    return [{ top: currentRect.top, left: currentRect.left, height: borderWidth, width: currentRect.width },
                        { top: currentRect.bottom - borderWidth, left: currentRect.left, height: borderWidth, width: currentRect.width },
                        { top: currentRect.top, left: currentRect.left, height: currentRect.height, width: borderWidth },
                        { top: currentRect.top, left: currentRect.right - borderWidth, height: currentRect.height, width: borderWidth }];
                };
                CrossBandSurface.prototype.isThereIntersectionWithControls = function () {
                    var isThereIntersection = false, currentRect = this.rect(), intersectionBands = this._getIntersectionBands(currentRect, this.parent && this.parent.getChildrenCollection()()), rectangles = this.getControlModel().controlType === "XRCrossBandBox" ? this._getCrossBandBoxSides() : [currentRect];
                    for (var bandIndex = 0; bandIndex < intersectionBands.length; bandIndex++) {
                        for (var rectIndex = 0; rectIndex < rectangles.length; rectIndex++) {
                            if (this.isThereIntersectionWithNeighborsCollection(rectangles[rectIndex], intersectionBands[bandIndex].controls().filter(function (control) { return !control.isIntersectionDeny; }), "absoluteRect")) {
                                isThereIntersection = true;
                                break;
                            }
                        }
                        if (isThereIntersection)
                            break;
                    }
                    ;
                    return isThereIntersection;
                };
                CrossBandSurface.prototype.updateAbsolutePosition = function () {
                    this.absolutePosition.x(this["_endX"]());
                    this.absolutePosition.y(this["_y"]());
                    this.afterUpdateAbsolutePosition();
                };
                CrossBandSurface.prototype.isThereIntersectionWithCrossBandControls = function () {
                    if (this.getControlModel().controlType === "XRCrossBandBox") {
                        var isThereIntersection = false;
                        var rects = this._getCrossBandBoxSides() || [];
                        for (var rectIndex = 0; rectIndex < rects.length; rectIndex++) {
                            if (_super.prototype.isThereIntersectionWithCrossBandControls.call(this, rects[rectIndex])) {
                                isThereIntersection = true;
                                break;
                            }
                        }
                        return isThereIntersection;
                    }
                    else {
                        return _super.prototype.isThereIntersectionWithCrossBandControls.call(this, this.rect());
                    }
                };
                CrossBandSurface.prototype.container = function () {
                    if (this._control.isCrossbandShow()) {
                        return Designer.findSurface(this.getControlModel().startBand());
                    }
                    else {
                        return null;
                    }
                };
                CrossBandSurface.prototype._getChildrenHolderName = function () {
                    return null;
                };
                CrossBandSurface._unitProperties = {
                    _x: function (o) {
                        return o.startPoint.x;
                    },
                    _width: function (o) {
                        return o.width;
                    },
                    _startY: function (o) {
                        return o.startPoint.y;
                    },
                    _endX: function (o) {
                        return o.endPoint.x;
                    },
                    _endY: function (o) {
                        return o.endPoint.y;
                    }
                };
                return CrossBandSurface;
            })(Report.ControlSurfaceBase);
            Report.CrossBandSurface = CrossBandSurface;
            Report.crossBandLineWidth = { propertyName: "width", modelName: "@WidthF", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.text, displayName: "Width", localizationId: "DevExpress.XtraReports.UI.XRControl.Width" };
            Report.startPoint = { propertyName: "startPoint", modelName: "@StartPointFloat", from: Designer.Point.fromString, displayName: "Start Point", localizationId: "DevExpress.XtraReports.UI.XRCrossBandControl.StartPoint", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.endPoint = { propertyName: "endPoint", modelName: "@EndPointFloat", from: Designer.Point.fromString, displayName: "End Point", localizationId: "DevExpress.XtraReports.UI.XRCrossBandControl.EndPoint", editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.startBand = { propertyName: "startBand", modelName: "@StartBand", link: true, displayName: "Start Band", localizationId: "DevExpress.XtraReports.UI.XRCrossBandControl.StartBand", editor: Report.editorTemplates.bands };
            Report.endBand = { propertyName: "endBand", modelName: "@EndBand", link: true, displayName: "End Band", localizationId: "DevExpress.XtraReports.UI.XRCrossBandControl.EndBand", editor: Report.editorTemplates.bands };
            Report.borderDashStyleCrossband = {
                propertyName: "borderDashStyleCrossband", modelName: "@BorderDashStyle",
                editor: DevExpress.JS.Widgets.editorTemplates.combobox, displayName: "Border Dash Style", localizationId: "DevExpress.XtraReports.UI.XRControl.BorderDashStyle", valuesArray: Report.borderDashStyleValues
            };
            Report.width = { propertyName: "width", modelName: "@WidthF", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric, displayName: "Width", localizationId: "DevExpress.XtraReports.UI.XRControl.Width", from: Designer.floatFromModel };
            Report.crossBandBoxControlSerializationsInfo = [
                Report.startPoint, Report.startBand, Report.endPoint, Report.endBand, Report.width,
                Report.borderColor, Report.borderDashStyleCrossband, Report.canPublish,
                $.extend({}, Report.borders, { defaultVal: "All" }),
                $.extend({}, Report.borderWidth, { defaultVal: 2 }),
                { propertyName: "locationF", modelName: "@LocationFloat", from: Designer.Point.fromString },
            ].concat(Report.baseControlProperties);
            Report.crossBandLineControlSerializationsInfo = [
                Report.startPoint, Report.startBand, Report.endPoint, Report.endBand, Report.width,
                Report.foreColor, Report.lineStyle, Report.crossBandLineWidth, Report.canPublish,
                { propertyName: "locationF", modelName: "@LocationFloat", from: Designer.Point.fromString, }
            ].concat(Report.baseControlProperties);
            Report.popularPropertiesCrossLine = ["lineStyle"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRSparklineViewModel = (function (_super) {
                __extends(XRSparklineViewModel, _super);
                function XRSparklineViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.view(this.createView(this.view() || {}, serializer));
                    this.sparklineFake = {
                        type: ko.pureComputed({
                            read: function () {
                                return _this.view().type();
                            },
                            write: function (val) {
                                _this.view(_this.createView({ "@Type": val }, serializer));
                            }
                        }),
                        content: this.view
                    };
                    this._disposables.push(this.sparklineFake.type);
                }
                XRSparklineViewModel.prototype.createView = function (model, serializer) {
                    if (serializer === void 0) { serializer = null; }
                    var type = model && model["@Type"] || "Line";
                    var viewTypeSerialization = sparklineViewMap[type];
                    var newView = { "type": ko.observable(type), "getInfo": function () { return viewTypeSerialization; } };
                    (serializer || new DevExpress.JS.Utils.ModelSerializer()).deserialize(newView, model);
                    return newView;
                };
                XRSparklineViewModel.prototype.getPath = function (propertyName) {
                    if (propertyName === "dataMember") {
                        return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
                    }
                    else if (propertyName === "valueMember") {
                        return Designer.getFullPath(this.getPath("dataMember"), this.dataMember());
                    }
                    return _super.prototype.getPath.call(this, propertyName);
                };
                XRSparklineViewModel.spartlineTypes = [
                    { value: "Line", displayValue: "Line", localizationId: "DevExpress.Sparkline.SparklineViewType.Line" },
                    { value: "Bar", displayValue: "Bar", localizationId: "DevExpress.Sparkline.SparklineViewType.Bar" },
                    { value: "WinLoss", displayValue: "WinLoss", localizationId: "DevExpress.Sparkline.SparklineViewType.WinLoss" },
                    { value: "Area", displayValue: "Area", localizationId: "DevExpress.Sparkline.SparklineViewType.Area" }
                ];
                return XRSparklineViewModel;
            })(Report.ControlViewModel);
            Report.XRSparklineViewModel = XRSparklineViewModel;
            var SparkLineSurface = (function (_super) {
                __extends(SparkLineSurface, _super);
                function SparkLineSurface(control, context) {
                    _super.call(this, control, context);
                }
                return SparkLineSurface;
            })(Report.TodoControlSurface);
            Report.SparkLineSurface = SparkLineSurface;
            Report.valueMember = { propertyName: "valueMember", modelName: "@ValueMember", displayName: "Value Member", localizationId: "DevExpress.XtraReports.UI.XRSparkline.ValueMember", editor: Designer.Widgets.editorTemplates.field };
            var highlightMinPoint = { modelName: "@HighlightMinPoint", defaultVal: false, from: Designer.parseBool, propertyName: "highlightMinPoint", displayName: "Highlight Min Point", localizationId: "DevExpress.Sparkline.SparklineViewBase.HighlightMinPoint", editor: DevExpress.JS.Widgets.editorTemplates.bool }, highlightMaxPoint = { modelName: "@HighlightMaxPoint", defaultVal: false, from: Designer.parseBool, propertyName: "highlightMaxPoint", displayName: "Highlight Max Point", localizationId: "DevExpress.Sparkline.SparklineViewBase.HighlightMaxPoint", editor: DevExpress.JS.Widgets.editorTemplates.bool }, highlightStartPoint = { modelName: "@HighlightStartPoint", defaultVal: false, from: Designer.parseBool, propertyName: "highlightStartPoint", displayName: "Highlight Start Point", localizationId: "DevExpress.Sparkline.SparklineViewBase.HighlightStartPoint", editor: DevExpress.JS.Widgets.editorTemplates.bool }, highlightEndPoint = { modelName: "@HighlightEndPoint", defaultVal: false, from: Designer.parseBool, propertyName: "highlightEndPoint", displayName: "Highlight End Point", localizationId: "DevExpress.Sparkline.SparklineViewBase.HighlightEndPoint", editor: DevExpress.JS.Widgets.editorTemplates.bool }, highlightNegativePoints = { modelName: "@HighlightNegativePoints", defaultVal: false, from: Designer.parseBool, propertyName: "highlightNegativePoints", displayName: "Highlight Negative Points", localizationId: "DevExpress.Sparkline.LineSparklineView.HighlightNegativePoints", editor: DevExpress.JS.Widgets.editorTemplates.bool }, color = { modelName: "@Color", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "color", displayName: "Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.Color", editor: Designer.Widgets.editorTemplates.customColorEditor }, maxPointColor = { modelName: "@MaxPointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "maxPointColor", displayName: "Max Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.MaxPointColor", editor: Designer.Widgets.editorTemplates.customColorEditor }, minPointColor = { modelName: "@MinPointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "minPointColor", displayName: "Min Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.MinPointColor", editor: Designer.Widgets.editorTemplates.customColorEditor }, startPointColor = { modelName: "@StartPointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "startPointColor", displayName: "Start Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.StartPointColor", editor: Designer.Widgets.editorTemplates.customColorEditor }, negativePointColor = { modelName: "@NegativePointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "negativePointColor", displayName: "Negative Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.NegativePointColor", editor: Designer.Widgets.editorTemplates.customColorEditor }, endPointColor = { modelName: "@EndPointColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "endPointColor", displayName: "End Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.EndPointColor", editor: Designer.Widgets.editorTemplates.customColorEditor }, sparklineViewType = {
                modelName: "@Type", propertyName: "type"
            }, enableAntialiasing = { modelName: "@EnableAntialiasing", propertyName: "enableAntialiasing", displayName: "Enable Antialiasing", localizationId: "DevExpress.Sparkline.LineSparklineView.EnableAntialiasing", editor: DevExpress.JS.Widgets.editorTemplates.bool, from: Designer.parseBool, defaultVal: true }, maxPointMarkerSize = { modelName: "@MaxPointMarkerSize", defaultVal: 5, propertyName: "maxPointMarkerSize", displayName: "Max Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.MaxPointMarkerSize", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, minPointMarkerSize = { modelName: "@MinPointMarkerSize", defaultVal: 5, propertyName: "minPointMarkerSize", displayName: "Min Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.MinPointMarkerSize", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, startPointMarkerSize = { modelName: "@StartPointMarkerSize", defaultVal: 5, propertyName: "startPointMarkerSize", displayName: "Start Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.StartPointMarkerSize", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, negativePointMarkerSize = { modelName: "@NegativePointMarkerSize", defaultVal: 5, propertyName: "negativePointMarkerSize", displayName: "Negative Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.NegativePointMarkerSize", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, endPointMarkerSize = { modelName: "@EndPointMarkerSize", defaultVal: 5, propertyName: "endPointMarkerSize", displayName: "End Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.EndPointMarkerSize", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, markerSize = { modelName: "@MarkerSize", propertyName: "markerSize", defaultVal: 5, displayName: "Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.MarkerSize", editor: DevExpress.JS.Widgets.editorTemplates.numeric }, showMarkers = { modelName: "@ShowMarkers", propertyName: "showMarkers", displayName: "Show Markers", localizationId: "DevExpress.Sparkline.LineSparklineView.ShowMarkers", from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.bool, defaultVal: false }, markerColor = { modelName: "@MarkerColor", from: Designer.colorFromString, toJsonObject: Designer.colorToString, propertyName: "markerColor", displayName: "Marker Color", localizationId: "DevExpress.Sparkline.LineSparklineView.MarkerColor", editor: Designer.Widgets.editorTemplates.customColorEditor };
            var barDistance = { modelName: "@BarDistance", propertyName: "barDistance", defaultVal: 2, displayName: "Bar Distance", localizationId: "DevExpress.Sparkline.BarSparklineViewBase.BarDistance", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            var areaOpacity = { modelName: "@AreaOpacity", propertyName: "areaOpacity", defaultVal: 135, displayName: "Area Opacity", localizationId: "DevExpress.Sparkline.AreaSparklineView.AreaOpacity", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            var commonSparklineViewProperties = [highlightStartPoint, highlightEndPoint, highlightMaxPoint, highlightMinPoint, color, maxPointColor, minPointColor, startPointColor, endPointColor, negativePointColor, sparklineViewType];
            var viewLineSerializationsInfo = [].concat(commonSparklineViewProperties, [highlightNegativePoints, enableAntialiasing, negativePointMarkerSize, endPointMarkerSize, startPointMarkerSize, minPointMarkerSize, maxPointMarkerSize, markerSize, showMarkers, Report.lineWidth, markerColor]);
            var viewWinLoseSerializationsInfo = [].concat(commonSparklineViewProperties, [barDistance]);
            var viewBarSerializationsInfo = [].concat(commonSparklineViewProperties, [barDistance, highlightNegativePoints]);
            var viewAreaSerializationsInfo = [].concat(commonSparklineViewProperties, [enableAntialiasing, areaOpacity, negativePointMarkerSize, Report.lineWidth, highlightNegativePoints, showMarkers, markerSize, maxPointMarkerSize, markerColor, minPointMarkerSize, endPointMarkerSize, startPointMarkerSize]);
            var sparklineViewMap = {
                "Line": viewLineSerializationsInfo,
                "Bar": viewBarSerializationsInfo,
                "WinLoss": viewWinLoseSerializationsInfo,
                "Area": viewAreaSerializationsInfo
            };
            var limit1 = { propertyName: "limit1", modelName: "@Limit1", displayName: "Limit 1", localizationId: "DevExpress.Sparkline.SparklineRange.Limit1", defaultVal: 0, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, limit2 = { propertyName: "limit2", modelName: "@Limit2", displayName: "Limit 2", localizationId: "DevExpress.Sparkline.SparklineRange.Limit2", defaultVal: 1, editor: DevExpress.JS.Widgets.editorTemplates.numeric }, isAuto = { propertyName: "isAuto", modelName: "@IsAuto", displayName: "Is Auto", localizationId: "DevExpress.Sparkline.SparklineRange.IsAuto", defaultVal: true, editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.valueRange = { propertyName: "valueRange", modelName: "ValueRange", displayName: "Value Range", localizationId: "DevExpress.XtraReports.UI.XRSparkline.ValueRange", info: [limit1, limit2, isAuto], editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            var sparklineView = { propertyName: "view", modelName: "View" };
            Report.sparklineFake = { propertyName: "sparklineFake", editor: Report.editorTemplates.contentByType, valuesArray: XRSparklineViewModel.spartlineTypes, displayName: "View", localizationId: "DevExpress.XtraReports.UI.XRSparkline.View" };
            Report.sparklineSerializationsInfo = [
                Report.sparklineFake, sparklineView, Report.valueMember, Report.valueRange, Report.imageType, Report.anchorVertical, Report.anchorHorizontal, Report.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
                Report.dataAdapter, Report.dataMember, Report.dataSource, Report.controlScripts].concat(Report.commonControlProperties, Report.sizeLocation, Report.navigationGroup);
            Report.popularPropertiesSparkline = ["dataSource", "dataMember", "dataAdapter", "valueMemberEditable", "sparklineFake"];
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var SubreportViewModel = (function (_super) {
                __extends(SubreportViewModel, _super);
                function SubreportViewModel(model, serializer) {
                    _super.call(this, model, serializer);
                    this.isAllSufficient = false;
                }
                SubreportViewModel.prototype._initializeBands = function () {
                    if (this.bands().length === 0) {
                        this.createChild({ "@ControlType": "DetailBand", "@Name": "Detail1" });
                    }
                };
                SubreportViewModel.from = function (model, serializer) {
                    return model ? new SubreportViewModel(model, serializer) : null;
                };
                SubreportViewModel.toJson = function (value, serializer, refs) {
                    return serializer.serialize(value, Report.reportSerializationInfo, refs);
                };
                SubreportViewModel.prototype.getInfo = function () {
                    if (!this.isAllSufficient) {
                        var newSerializationInfo = $.extend(true, [], _super.prototype.getInfo.call(this));
                        var index = newSerializationInfo.indexOf(newSerializationInfo.filter(function (item) { return item.propertyName === "objectStorage"; })[0]);
                        newSerializationInfo.splice(index, 1);
                        return newSerializationInfo;
                    }
                    return _super.prototype.getInfo.call(this);
                };
                SubreportViewModel.prototype.serialize = function () {
                    this.isAllSufficient = true;
                    var result = _super.prototype.serialize.call(this);
                    this.isAllSufficient = false;
                    return result;
                };
                SubreportViewModel.defaultReport = {
                    "@ControlType": "DevExpress.XtraReports.UI.XtraReport",
                    "@PageWidth": "850",
                    "@PageHeight": "1100",
                    "@Version": "18.2",
                    "@Font": "Arial,9pt",
                    "@Dpi": "100",
                    "Bands": {
                        "Item1": {
                            "@ControlType": "TopMarginBand",
                            "@HeightF": "100"
                        },
                        "Item2": {
                            "@ControlType": "DetailBand",
                            "@HeightF": "100"
                        },
                        "Item3": {
                            "@ControlType": "BottomMarginBand",
                            "@HeightF": "100"
                        }
                    }
                };
                return SubreportViewModel;
            })(Report.ReportViewModel);
            Report.SubreportViewModel = SubreportViewModel;
            var ParameterBinding = (function (_super) {
                __extends(ParameterBinding, _super);
                function ParameterBinding(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, serializer);
                    this.visible = ko.observable(true);
                    this.subreportControl = ko.observable();
                    var _self = this;
                    this.fakeBinding = this;
                    this._disposables.push(this._reportDataSource = ko.computed(function () {
                        var control = _this.subreportControl();
                        return control && control.root["dataSource"] && control.root["dataSource"]() || null;
                    }));
                    var _dataSource = ko.observable(this.dataSource());
                    this._disposables.push(this.dataSource = ko.pureComputed({
                        read: function () {
                            return _dataSource() || _this._reportDataSource();
                        },
                        write: function (newValue) {
                            _dataSource(newValue);
                        }
                    }));
                    this._disposables.push(this.dataSource.subscribe(function (newValue) {
                        if (!newValue) {
                            _this.dataMember(null);
                        }
                    }));
                    var subscribe = this.subreportControl.subscribe(function (newValue) {
                        if (newValue) {
                            subscribe.dispose();
                            _self._disposables.push(ko.computed(function () {
                                if (newValue.root["parameters"]().filter(function (parameter) { return parameter === _self.parameter(); }).length === 0) {
                                    _self.parameter(null);
                                }
                            }));
                            _self._disposables.push(ko.computed(function () {
                                if (newValue.subreportParameters().filter(function (parameter) { return parameter.name === _self.parameterName(); }).length === 0) {
                                    _self.parameterName("");
                                }
                            }));
                        }
                    });
                    this._disposables.push(subscribe);
                    this.subreportControl(parent);
                }
                ParameterBinding.createNew = function () {
                    return new ParameterBinding({}, null);
                };
                ParameterBinding.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.subreportControl(null);
                };
                ParameterBinding.prototype.getInfo = function () {
                    if (this.subreportControl && this.subreportControl() && this.subreportControl().subreportParameters().length > 0) {
                        var serializationInfo = $.extend(true, [], Report.parameterBindingSerializationInfo);
                        var parameterNameInfo = serializationInfo.filter(function (info) { return info.propertyName === "parameterName"; })[0];
                        parameterNameInfo.valuesArray = this.subreportControl().subreportParameters().map(function (parameter) { return { value: parameter.name, displayValue: parameter.displayName }; });
                        var dataSourceInfo = serializationInfo.filter(function (info) { return info.propertyName === "dataSource"; })[0];
                        dataSourceInfo.defaultVal = this._reportDataSource();
                        return serializationInfo;
                    }
                    return Report.parameterBindingSerializationInfo;
                };
                ParameterBinding.prototype.updateParameter = function (pathRequest, dataSources) {
                    _super.prototype.updateParameter.call(this, pathRequest, dataSources);
                    this.dataMember(null);
                };
                return ParameterBinding;
            })(Report.DataBindingBase);
            Report.ParameterBinding = ParameterBinding;
            var XRSubreportViewModel = (function (_super) {
                __extends(XRSubreportViewModel, _super);
                function XRSubreportViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, XRSubreportViewModel._patchModel(model), parent, serializer);
                    this.subreportParameters = ko.observableArray();
                    var _self = this;
                    this._disposables.push(this.key = ko.pureComputed(function () {
                        var key = _this.parentModel() && _this.parentModel().root && _this.parentModel().root["key"];
                        return (key ? (key() + ".") : "") + _this.name();
                    }));
                    if (this.reportSource) {
                        this.reportSource.key = this.key;
                        if (parent) {
                            var objectStorage = parent.root["objectStorage"]().concat(this.reportSource.objectStorage());
                            parent.root["objectStorage"](objectStorage);
                            this.reportSource.objectStorage(objectStorage);
                        }
                        else {
                            var subscribe = this.parentModel.subscribe(function (newValue) {
                                if (newValue) {
                                    subscribe.dispose();
                                    _this.reportSource.objectStorage(newValue.root["objectStorage"]());
                                }
                            });
                            this._disposables.push(subscribe);
                        }
                    }
                    this.updateParameters();
                    this.parameterBindings = DevExpress.JS.Utils.deserializeArray(model.ParameterBindings, function (item) { return new ParameterBinding(item, _this, serializer); });
                    this._disposables.push(this.parameterBindings.subscribe(function (changes) {
                        for (var index = 0; index < changes.length; index++) {
                            if (changes[index].status === "added") {
                                changes[index].value.subreportControl(_self);
                            }
                        }
                        ;
                    }, null, "arrayChange"));
                    this._disposables.push(this.reportSourceUrl.subscribe(function (newVal) {
                        _this.reportSource.dispose();
                        if (!newVal)
                            _this.reportSource = new SubreportViewModel(SubreportViewModel.defaultReport, serializer);
                    }));
                    this.actions.push({ action: function () { _this.root["getSubreportUrls"](); }, title: Designer.getLocalization("Update", "PivotGridStringId.CustomizationFormUpdate"), visible: function (name) { return name === "reportSourceUrl"; } });
                }
                XRSubreportViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.parameterBindings);
                    this.reportSource && this.reportSource.dispose();
                    this.resetObservableArray(this.parameterBindings);
                };
                XRSubreportViewModel.prototype.getInfo = function () {
                    var serializationInfo = $.extend(true, [], _super.prototype.getInfo.call(this));
                    if (this.reportSourceUrl && this.reportSourceUrl()) {
                        var property = serializationInfo.filter(function (item) { return item.propertyName === "reportSource"; })[0];
                        serializationInfo.splice(serializationInfo.indexOf(property), 1);
                    }
                    return serializationInfo;
                };
                XRSubreportViewModel._patchModel = function (model) {
                    if (model["@ReportSourceUrl"]) {
                        delete model["ReportSource"];
                    }
                    return model;
                };
                XRSubreportViewModel.prototype.updateParameters = function () {
                    var _this = this;
                    if (this.reportSourceUrl()) {
                        Report.ReportStorageWeb.getData(this.reportSourceUrl()).done(function (result) {
                            var parametersJSON = JSON.parse(result.reportLayout).XtraReportsLayoutSerializer.Parameters;
                            var parameters = [];
                            if (parametersJSON) {
                                Object.keys(parametersJSON).forEach(function (propertyName) {
                                    parameters.push({
                                        name: parametersJSON[propertyName]["@Name"],
                                        displayName: parametersJSON[propertyName]["@Description"]
                                    });
                                });
                            }
                            _this.subreportParameters(parameters);
                        });
                    }
                    else if (this.reportSource) {
                        this.subreportParameters(this.reportSource.parameters().map(function (x) { return { name: x.name, displayName: x.displayName }; }));
                    }
                };
                return XRSubreportViewModel;
            })(Report.ControlViewModel);
            Report.XRSubreportViewModel = XRSubreportViewModel;
            var SubreportSurface = (function (_super) {
                __extends(SubreportSurface, _super);
                function SubreportSurface(control, context) {
                    _super.call(this, control, context);
                    this.template = "dxrd-subreport";
                    this.selectiontemplate = "dxrd-subreport-selection";
                    this.displayText = function () { return control.name(); };
                }
                SubreportSurface.prototype.getAdornTemplate = function () {
                    return this.isIntersect() ? "dxrd-intersect" : "";
                };
                return SubreportSurface;
            })(Report.ControlSurface);
            Report.SubreportSurface = SubreportSurface;
            Report.reportSourceUrl = { propertyName: "reportSourceUrl", modelName: "@ReportSourceUrl", defaultVal: "", editor: Report.editorTemplates.reportSourceUrl, displayName: "Report Source Url", localizationId: "DevExpress.XtraReports.UI.XRSubreport.ReportSourceUrl" };
            Report.reportSource = { propertyName: "reportSource", modelName: "ReportSource", from: SubreportViewModel.from, toJsonObject: SubreportViewModel.toJson };
            Report.parameterBindingSerializationInfo = Report.dataBindingBaseSerializationInfo.concat([
                { propertyName: "parameterName", modelName: "@ParameterName", displayName: "Parameter Name", localizationId: "DevExpress.XtraReports.UI.ParameterBinding.ParameterName", editor: DevExpress.JS.Widgets.editorTemplates.combobox },
                { propertyName: "fakeBinding", displayName: "Binding", localizationId: "DevExpress.XtraReports.Design.DataBinding.Binding", link: true, editor: { header: "dxrd-dataBinding", editorType: Designer.Widgets.FieldListEditor } }
            ]);
            Report.parameterBindings = { propertyName: "parameterBindings", modelName: "ParameterBindings", displayName: "Parameter Bindings", localizationId: "DevExpress.XtraReports.UI.XRSubreport.ParameterBindings", array: true, editor: DevExpress.JS.Widgets.editorTemplates.commonCollection, addHandler: DevExpress.Designer.Report.ParameterBinding.createNew, template: '#dxrd-commonCollectionItem' };
            Report.subreportSerializationsInfo = [
                Report.reportSource, Report.reportSourceUrl, Report.subreportScripts, Report.parameterBindings, Report.bookmarkParent, Report.canShrink
            ].concat(Report.sizeLocation, Report.baseControlProperties);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var TableOfContentsLevel = (function (_super) {
                __extends(TableOfContentsLevel, _super);
                function TableOfContentsLevel(model, parent, serializer, isTitle) {
                    var _this = this;
                    if (isTitle === void 0) { isTitle = false; }
                    this.isTitle = isTitle;
                    _super.call(this, $.extend({ "@ControlType": "TableOfContentsLevel" }, model), parent, serializer);
                    this.borderWidth = parent.borderWidth;
                    this.borderColor = parent.borderColor;
                    this.borders = parent.borders;
                    this.dpi = parent.dpi;
                    if (this.padding) {
                        this._createPaddingDependencies();
                    }
                    this.borderDashStyle = parent.borderDashStyle;
                    this.borderDefault = parent.borderDefault;
                    this._disposables.push(this._levelIndex = ko.pureComputed(function () { return parent.allLevels().indexOf(_this); }));
                    this._disposables.push(this._indentFactor = ko.pureComputed(function () { return Report.reculculateUnit(60, _this.parentModel().dpi()); }));
                    this.indent = this.indent || ko.observable(0);
                    this._disposables.push(this.left = ko.pureComputed({
                        read: function () {
                            if (!_this.indent)
                                return 0;
                            if (_this.indent() !== null && _this.indent() !== undefined)
                                return _this.indent();
                            return _this._levelIndex() === 0 ? 0 : (_this._levelIndex() - 1) * _this._indentFactor();
                        },
                        write: $.noop
                    }));
                    this._disposables.push(this.width = ko.pureComputed({
                        read: function () { return parent.size.width() - _this.left(); },
                        write: $.noop
                    }));
                    this._disposables.push(this.name = ko.pureComputed(function () {
                        if (_this.isTitle)
                            return null;
                        if (_this._levelIndex() == parent.allLevels().length - 1)
                            return "Level (Default)";
                        return "Level " + _this._levelIndex();
                    }));
                    this._disposables.push(this.top = ko.computed({
                        read: function () {
                            var previousLevel = parent.allLevels()[_this._levelIndex() - 1];
                            return previousLevel ? previousLevel.top() + previousLevel.height() : 0;
                        },
                        write: $.noop,
                        deferEvaluation: true
                    }));
                }
                TableOfContentsLevel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.parentModel(null);
                };
                TableOfContentsLevel.createNew = function (parent) {
                    return new TableOfContentsLevel({ "@Height": Report.reculculateUnit(levelDefaultHeight, parent.dpi()) }, parent);
                };
                TableOfContentsLevel.prototype._createPaddingDependencies = function () {
                    var _this = this;
                    this.paddingObj = new Designer.Widgets.PaddingModel();
                    this._disposables.push(this.paddingObj);
                    this.paddingObj.applyFromString(this["padding"]());
                    this.paddingObj.dpi = ko.computed(function () { return _this.dpi && _this.dpi(); });
                    var isUpdate = false;
                    var lock = function (action) {
                        if (!isUpdate) {
                            isUpdate = true;
                            action();
                            isUpdate = false;
                        }
                    };
                    this._disposables.push(this.padding.subscribe(function (newVal) { return lock(function () { return _this.paddingObj.applyFromString(newVal); }); }));
                    ["left", "right", "top", "bottom"].forEach(function (name) {
                        _this._disposables.push(_this.paddingObj[name].subscribe(function (newVal) {
                            if (_this.root["isModelReady"] && _this.root["isModelReady"]() || !_this.root["isModelReady"])
                                lock(function () { return _this.padding(_this.paddingObj.toString()); });
                        }));
                    });
                    this._disposables.push(this.paddingObj.dpi.subscribe(function (newVal) { return lock(function () {
                        if (_this.padding())
                            _this.padding(_this.paddingObj.toString());
                    }); }));
                    this.paddingObj["resetValue"] = function () {
                        lock(function () {
                            ["left", "right", "top", "bottom"].forEach(function (name) { return _this.paddingObj[name](null); });
                            _this.padding(_this.paddingObj.toString());
                            _this.paddingObj.applyFromString(_this.padding());
                        });
                    };
                };
                TableOfContentsLevel.prototype.getInfo = function () {
                    return this.isTitle ? Report.tocTitleSerializationsInfo : Report.tocLevelSerializationsInfo;
                };
                TableOfContentsLevel.prototype.isPropertyModified = function (name) {
                    return false;
                };
                TableOfContentsLevel.prototype.getControlFactory = function () {
                    return DevExpress.Designer.Report.controlsFactory;
                };
                TableOfContentsLevel.prototype.rtl = function () {
                    return this.parentModel() && this.parentModel().rtl();
                };
                TableOfContentsLevel.unitProperties = ["height", "indent"];
                return TableOfContentsLevel;
            })(Designer.ElementViewModel);
            Report.TableOfContentsLevel = TableOfContentsLevel;
            var TableOfContentsLevelSurface = (function (_super) {
                __extends(TableOfContentsLevelSurface, _super);
                function TableOfContentsLevelSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context, TableOfContentsLevelSurface._unitProperties);
                    this._leaderSymbolWidth = ko.pureComputed(function () {
                        if (!TableOfContentsLevelSurface._$leaderSymbol)
                            TableOfContentsLevelSurface._$leaderSymbol = $("<span />").hide().appendTo("body");
                        TableOfContentsLevelSurface._$leaderSymbol.html(_this.getControlModel().leaderSymbol()).css(_this.contentCss());
                        return TableOfContentsLevelSurface._$leaderSymbol.width();
                    });
                    this.leaderSymbols = ko.pureComputed(function () {
                        var elementWidth = _this.contentWidthWithoutZoom();
                        if (elementWidth <= 0)
                            return "";
                        var symbolsCount = elementWidth / _this._leaderSymbolWidth();
                        var symbol = _this.getControlModel().leaderSymbol();
                        var a = [];
                        while (a.length < symbolsCount) {
                            a.push(symbol);
                        }
                        return a.join('');
                    });
                    this._disposables.push(this.isIntersect = ko.computed(function () { return false; }));
                    this._disposables.push(this.leaderSymbols);
                    this.text = control.text;
                    this.template = "dxrd-table-of-contents-level";
                }
                TableOfContentsLevelSurface.prototype.resizable = function (resizeHandler, element) {
                    return $.extend({}, resizeHandler, {
                        handles: 's',
                        $selectedNodes: $(element),
                        minimumHeight: 10
                    });
                };
                TableOfContentsLevelSurface.prototype.rtlLayout = function () {
                    return this._control.rtl();
                };
                TableOfContentsLevelSurface._unitProperties = {
                    _height: function (o) {
                        return o.height;
                    },
                    _width: function (o) {
                        return o.width;
                    },
                    _x: function (o) {
                        return o.left;
                    },
                    _y: function (o) {
                        return o.top;
                    },
                };
                return TableOfContentsLevelSurface;
            })(Report.ControlSurfaceBase);
            Report.TableOfContentsLevelSurface = TableOfContentsLevelSurface;
            var TableOfContentsViewModel = (function (_super) {
                __extends(TableOfContentsViewModel, _super);
                function TableOfContentsViewModel(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    this.borderDefault = ko.pureComputed(function () { return "none"; });
                    this._disposables.push(this.levelTitle = new TableOfContentsLevel(control["LevelTitle"], this, serializer, true));
                    this.levelTitleText = this.levelTitle.text;
                    this._disposables.push(this.levelDefault = new TableOfContentsLevel(control["LevelDefault"], this, serializer));
                    this.levels = DevExpress.JS.Utils.deserializeArray(control["Levels"], function (item) { return new TableOfContentsLevel(item, _this, serializer); });
                    this._disposables.push(this.allLevels = ko.computed(function () {
                        var array = [_this.levelTitle];
                        Array.prototype.push.apply(array, _this.levels());
                        array.push(_this.levelDefault);
                        return array;
                    }));
                    this._disposables.push(this.size.height = ko.computed({
                        read: function () { return _this.levelDefault.top() + _this.levelDefault.height(); },
                        write: $.noop
                    }));
                    this._disposables.push(this.size.width = ko.computed({
                        read: function () { return (_this.parentModel() ? _this.parentModel().size.width() : 0); },
                        write: $.noop
                    }));
                    this._disposables.push(this.location.x = ko.computed({
                        read: function () { return 0; },
                        write: function () { }
                    }));
                    this._disposables.push(this.borderDefault);
                }
                TableOfContentsViewModel.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.levels);
                    this.resetObservableArray(this.levels);
                };
                Object.defineProperty(TableOfContentsViewModel.prototype, "textEditableProperty", {
                    get: function () { return this.levelTitleText; },
                    enumerable: true,
                    configurable: true
                });
                return TableOfContentsViewModel;
            })(Report.ControlViewModel);
            Report.TableOfContentsViewModel = TableOfContentsViewModel;
            var TableOfContentsSurface = (function (_super) {
                __extends(TableOfContentsSurface, _super);
                function TableOfContentsSurface(control, context) {
                    _super.call(this, control, context);
                    this.levels = ko.observableArray();
                    this._disposables.push(this.levelTitle = new TableOfContentsLevelSurface(control.levelTitle, context));
                    this._disposables.push(this.levelDefault = new TableOfContentsLevelSurface(control.levelDefault, context));
                    this._disposables.push(Designer.createObservableArrayMapCollection(control.levels, this.levels, function (item) { return new TableOfContentsLevelSurface(item, context); }));
                    this.template = "dxrd-table-of-contents";
                    this.selectiontemplate = "dxrd-table-of-contents-selected";
                }
                TableOfContentsSurface.prototype.isThereIntersectionWithChildCollection = function () {
                    return false;
                };
                TableOfContentsSurface.prototype.isThereIntersectionWithUsefulArea = function () {
                    return false;
                };
                TableOfContentsSurface.prototype.isThereIntersectionWithParentCollection = function () {
                    return false;
                };
                return TableOfContentsSurface;
            })(Report.ControlSurface);
            Report.TableOfContentsSurface = TableOfContentsSurface;
            function isHeaderOrFooterBandType(band) {
                return (band.controlType === "ReportHeaderBand" || band.controlType === "ReportFooterBand") && (band.parentModel() instanceof Report.ReportViewModel);
            }
            Report.isHeaderOrFooterBandType = isHeaderOrFooterBandType;
            function bandContainsToc(reportModel, bandType) {
                var band = (Designer.findFirstItemMatchesCondition(reportModel.bands(), function (item) { return item.controlType === bandType; }));
                return band && bandControlsSomeXRTableOfContents(band);
            }
            Report.bandContainsToc = bandContainsToc;
            function bandControlsSomeXRTableOfContents(band) {
                return band.controls().some(function (item) { return item.controlType === "XRTableOfContents"; });
            }
            Report.bandControlsSomeXRTableOfContents = bandControlsSomeXRTableOfContents;
            var font = { propertyName: "font", modelName: "@Font", defaultVal: "Times New Roman, 9.75pt", displayName: "Font", localizationId: "DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font", editor: DevExpress.JS.Widgets.editorTemplates.font };
            var backColor = { propertyName: "backColor", modelName: "@BackColor", defaultVal: "Transparent", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Background Color", localizationId: "DevExpress.XtraReports.UI.XRControl.BackColor", editor: Designer.Widgets.editorTemplates.customColorEditor };
            var foreColor = { propertyName: "foreColor", modelName: "@ForeColor", defaultVal: "Black", from: Designer.colorFromString, toJsonObject: Designer.colorToString, displayName: "Foreground Color", localizationId: "DevExpress.XtraReports.UI.XRControl.ForeColor", editor: Designer.Widgets.editorTemplates.customColorEditor };
            var size = { propertyName: "size", modelName: "@SizeF", from: Designer.Size.fromString };
            var formattingRuleLinks = {
                propertyName: "formattingRuleLinks", modelName: "FormattingRuleLinks"
            };
            var levelDefaultHeight = 23;
            var baseTocLevelSerializationsInfo = [
                backColor,
                font,
                foreColor,
                { propertyName: "height", modelName: "@Height", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: levelDefaultHeight, displayName: "Height", localizationId: "DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Height", from: Designer.floatFromModel, editorOptions: { min: 10 } }
            ].concat(Report.paddingGroup);
            Report.tocLevelSerializationsInfo = [
                { propertyName: "leaderSymbol", modelName: "@LeaderSymbol", editor: DevExpress.JS.Widgets.editorTemplates.text, defaultVal: ".", displayName: "Leader Symbol", localizationId: "DevExpress.XtraReports.UI.XRTableOfContentsLevel.LeaderSymbol", editorOptions: { maxLength: 1 } },
                { propertyName: "indent", modelName: "@Indent", editor: DevExpress.JS.Widgets.editorTemplates.numeric, defaultVal: null, displayName: "Indent", localizationId: "DevExpress.XtraReports.UI.XRTableOfContentsLevel.Indent", from: Designer.floatFromModel }
            ].concat(baseTocLevelSerializationsInfo);
            Report.tocTitleSerializationsInfo = [Report.text, $.extend({}, Report.textAlignment, { defaultVal: "TopLeft" })].concat(baseTocLevelSerializationsInfo);
            Report.tocTitle = { propertyName: "levelTitle", modelName: "LevelTitle", displayName: "Level Title", localizationId: "DevExpress.XtraReports.UI.XRTableOfContents.LevelTitle", info: Report.tocTitleSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.tocLevelDefault = { propertyName: "levelDefault", modelName: "LevelDefault", displayName: "Level Default", localizationId: "DevExpress.XtraReports.UI.XRTableOfContents.LevelDefault", info: Report.tocLevelSerializationsInfo, editor: DevExpress.JS.Widgets.editorTemplates.objecteditor };
            Report.maxNestingLevel = { propertyName: "maxNestingLevel", modelName: "@MaxNestingLevel", defaultVal: 0, displayName: "Max Nesting Level", localizationId: "DevExpress.XtraReports.UI.XRTableOfContents.MaxNestingLevel", editor: DevExpress.JS.Widgets.editorTemplates.numeric, editorOptions: { min: 0 } };
            Report.tocLevels = {
                propertyName: "levels",
                modelName: "Levels",
                displayName: "Levels", localizationId: "DevExpress.XtraReports.UI.XRTableOfContents.Levels",
                array: true,
                editor: Report.editorTemplates.toclevel,
                template: "#dxrd-collectionItemWithAccordion",
            };
            var tocProperties = Report.commonControlProperties.filter(function (item) { return item !== Report.canPublish; });
            Report.tocSerializationsInfo = [formattingRuleLinks, size, Report.location, Report.tocTitle, Report.tocLevels, Report.tocLevelDefault, Report.maxNestingLevel, Report.rtl].concat(tocProperties);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var XRCharacterComb = (function (_super) {
                __extends(XRCharacterComb, _super);
                function XRCharacterComb(control, parent, serializer) {
                    var _this = this;
                    _super.call(this, control, parent, serializer);
                    var _originalCellWidth = this.cellWidth;
                    var _originalCellHeight = this.cellHeight;
                    this._disposables.push(this.cellWidth = this._createCellSideFromOriginalSide(_originalCellWidth, false));
                    this._disposables.push(this.cellHeight = this._createCellSideFromOriginalSide(_originalCellHeight, true));
                    var fontModel = new DevExpress.JS.Widgets.FontModel(this.font);
                    var borderWidth = ko.computed(function () {
                        if (_this["borders"]() && _this["borders"]() !== "None") {
                            return _this["borderWidth"]();
                        }
                        else {
                            return 0;
                        }
                    });
                    this._disposables.push(borderWidth);
                    var textSizeHelper = new Report.TextElementSizeHelper();
                    this.autoCellSide = ko.observable(this.cellHeight());
                    this._disposables.push(ko.computed(function () {
                        if (_this.sizeMode() !== "Custom") {
                            var characterHeight = textSizeHelper.getTextContainerSize("a", {
                                "font-size": fontModel.size() + fontModel.unit(),
                                "font-family": fontModel.family(),
                                "height": "auto",
                                "width": "auto"
                            }, 0).height;
                            var side = characterHeight * 1.5 + 2 * borderWidth();
                            if (_this.parentModel()) {
                                side = Designer.pixelToUnits(side, _this.parentModel().root["measureUnit"](), 1);
                            }
                            _this.autoCellSide(side);
                        }
                    }));
                }
                XRCharacterComb.prototype.getInfo = function () {
                    return Report.characterCombSerializationsInfo;
                };
                XRCharacterComb.prototype.isPropertyDisabled = function (name) {
                    if (name === "cellWidth") {
                        return this.sizeMode() === "AutoSize" || this.sizeMode() === "AutoWidth";
                    }
                    if (name === "cellHeight") {
                        return this.sizeMode() === "AutoSize" || this.sizeMode() === "AutoHeight";
                    }
                    _super.prototype.isPropertyDisabled.call(this, name);
                };
                XRCharacterComb.prototype._createCellSideFromOriginalSide = function (originalCellSide, isHeight) {
                    var _this = this;
                    return ko.pureComputed({
                        read: function () {
                            switch (_this.sizeMode()) {
                                case "AutoSize":
                                    return null;
                                case "AutoWidth":
                                    return isHeight ? originalCellSide() : null;
                                    ;
                                case "AutoHeight":
                                    return !isHeight ? originalCellSide() : null;
                                case "Custom":
                                    return originalCellSide();
                            }
                        },
                        write: function (val) { originalCellSide(val); }
                    });
                };
                XRCharacterComb.prototype.roundSize = function () {
                    this.size.width(Math.ceil(this.size.width()));
                    this.size.height(Math.ceil(this.size.height()));
                };
                XRCharacterComb.unitProperties = ["cellWidth", "cellHeight", "verticalSpacing", "horizontalSpacing"];
                return XRCharacterComb;
            })(Report.ControlViewModel);
            Report.XRCharacterComb = XRCharacterComb;
            var XRCharacterCombSurface = (function (_super) {
                __extends(XRCharacterCombSurface, _super);
                function XRCharacterCombSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this.cells = ko.observableArray([]);
                    this._disposables.push(this.borderWidth = ko.computed(function () {
                        return control["borderWidth"]() === undefined ? 1 : control["borderWidth"]();
                    }));
                    this.rtl = function () { return control.rtl(); };
                    this.borders = control["borders"];
                    this.template = "dxrd-charactercomb";
                    this.contenttemplate = "dxrd-charactercomb-content";
                    this._disposables.push(control.textAlignment.subscribe(function (newVal) {
                        _this._updateCellsText(newVal);
                    }));
                    this._disposables.push(this.verticalSpacing = ko.computed(function () {
                        return Designer.unitsToPixel(control.verticalSpacing(), context.measureUnit(), 1);
                    }));
                    this._disposables.push(this.horizontalSpacing = ko.computed(function () {
                        return Designer.unitsToPixel(control.horizontalSpacing(), context.measureUnit(), 1);
                    }));
                    this.cellSize = {
                        width: ko.computed(function () {
                            return Designer.unitsToPixel(control.cellWidth() || control.autoCellSide(), context.measureUnit(), 1);
                        }),
                        height: ko.computed(function () {
                            return Designer.unitsToPixel(control.cellHeight() || control.autoCellSide(), context.measureUnit(), 1);
                        }),
                        isPropertyDisabled: function (name) { return false; }
                    };
                    this._disposables.push(this.cellSize.width);
                    this._disposables.push(this.cellSize.height);
                    this._disposables.push(this.fullCellHeight = ko.computed(function () {
                        var _verticalSpacing = _this.verticalSpacing();
                        var fullCellHeight = _this.cellSize.height();
                        if (!!_this.verticalSpacing()) {
                            fullCellHeight += _this.verticalSpacing();
                        }
                        return fullCellHeight - _this._getBorderWidthBySpacing(_verticalSpacing);
                    }));
                    this._disposables.push(this.fullCellWidth = ko.computed(function () {
                        var _horizontalSpacing = _this.horizontalSpacing.peek();
                        var fullCellWidth = _this.cellSize.width();
                        if (!!_this.horizontalSpacing()) {
                            fullCellWidth += _this.horizontalSpacing();
                        }
                        return fullCellWidth - _this._getBorderWidthBySpacing(_horizontalSpacing);
                    }));
                    this._disposables.push(this.vertical = ko.computed(function () {
                        var _borderWidth = _this._getBorderWidthBySpacing(_this.verticalSpacing()) * context.zoom();
                        var fullCellHeight = _this.fullCellHeight() * context.zoom();
                        var vertical = Math.floor(_this._roundingTwoDecimals((_this.rect().height - _borderWidth) / fullCellHeight));
                        if (_this._roundingTwoDecimals(_this.rect().height - (vertical * fullCellHeight + _borderWidth)) >= _this._roundingTwoDecimals(_this.cellSize.height() * context.zoom() - _borderWidth)) {
                            vertical += 1;
                        }
                        return vertical;
                    }));
                    this._disposables.push(this.horizontal = ko.computed(function () {
                        var _borderWidth = _this._getBorderWidthBySpacing(_this.horizontalSpacing()) * context.zoom();
                        var fullCellWidth = _this.fullCellWidth() * context.zoom();
                        var horizontal = Math.floor(_this._roundingTwoDecimals((_this.rect().width - _borderWidth) / fullCellWidth));
                        if (_this._roundingTwoDecimals(_this.rect().width - (horizontal * fullCellWidth + _borderWidth)) >= _this._roundingTwoDecimals(_this.cellSize.width() * context.zoom() - _borderWidth)) {
                            horizontal += 1;
                        }
                        return horizontal;
                    }));
                    this._disposables.push(this.topEmptySpace = ko.computed(function () {
                        var _verticalSpacing = _this.verticalSpacing();
                        var _borderWidth = _this._getBorderWidthBySpacing(_verticalSpacing);
                        var _emptySpace = _this.rect().height / context.zoom() - (_this.fullCellHeight() * _this.vertical() - _verticalSpacing + _borderWidth);
                        return Report.CharacterCombHelper.distributionEmptySpace(_emptySpace, true, _this.getControlModel().textAlignment());
                    }));
                    this._disposables.push(this.leftEmptySpace = ko.computed(function () {
                        var _horizontalSpacing = _this.horizontalSpacing();
                        var _borderWidth = _this._getBorderWidthBySpacing(_horizontalSpacing);
                        var _emptySpace = _this.rect().width / context.zoom() - (_this.fullCellWidth() * _this.horizontal() - _horizontalSpacing + _borderWidth);
                        return Report.CharacterCombHelper.distributionEmptySpace(_emptySpace, false, _this.getControlModel().textAlignment());
                    }));
                    this._disposables.push(this.css = ko.pureComputed(function () {
                        return $.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.foreColorCss(), _this.cssCalculator.backGroundCss());
                    }));
                    this._disposables.push(this.borderCss = ko.pureComputed(function () {
                        return _this.cssCalculator.borderCss();
                    }));
                    this._disposables.push(ko.computed(function () {
                        _this.updateArray(_this.vertical() * _this.horizontal());
                        _this._updateCellsText(control.textAlignment.peek());
                    }));
                    this._disposables.push(control.text.subscribe(function (newVal) {
                        _this._updateCellsText(control.textAlignment.peek());
                    }));
                }
                XRCharacterCombSurface.prototype._createCell = function (text, position) {
                    var _this = this;
                    return {
                        text: ko.observable(text),
                        left: ko.computed(function () {
                            var _horizontalSpacing = _this.horizontalSpacing();
                            var borderWidth = _this._getBorderWidthBySpacing(_horizontalSpacing);
                            var line = Math.floor((position) / _this.horizontal());
                            var column = position - (_this.horizontal() * line);
                            if (_this.rtl()) {
                                column = (_this.horizontal() * (line + 1)) - (position + 1);
                            }
                            return column * (_this.cellSize.width() + _horizontalSpacing - borderWidth) + _this.leftEmptySpace();
                        }),
                        top: ko.computed(function () {
                            var _verticalSpacing = _this.verticalSpacing();
                            var borderWidth = _this._getBorderWidthBySpacing(_verticalSpacing);
                            var line = Math.floor((position) / _this.horizontal());
                            return line * (_this.cellSize.height() + _verticalSpacing - borderWidth) + _this.topEmptySpace();
                        }),
                        size: this.cellSize,
                        isEmpty: false
                    };
                };
                XRCharacterCombSurface.prototype._updateCellsText = function (textAlignment) {
                    var _this = this;
                    var alignments = Report.CharacterCombHelper.getAlignments(textAlignment);
                    var texts = Report.CharacterCombHelper.getLines(this.displayText(), this.horizontal.peek(), this._control.multiline(), this._control["wordWrap"] && this._control["wordWrap"]());
                    Report.CharacterCombHelper.setText(texts, this.cells.peek(), function (texts, position) {
                        return Report.CharacterCombHelper.getTextOffset(texts, position, alignments.vertical, alignments.horizontal, _this.vertical.peek(), _this.horizontal.peek());
                    });
                };
                XRCharacterCombSurface.prototype._roundingTwoDecimals = function (val) {
                    return Math.round(val * 100) / 100;
                };
                XRCharacterCombSurface.prototype._getBorderWidthBySpacing = function (spacing) {
                    return (!spacing && this.borders() && this.borders() !== "None") ? this.borderWidth() : 0;
                };
                XRCharacterCombSurface.prototype._applyBounds = function (newRect, newHorizontal, newVertical, multiline, wordwrap) {
                    if (newVertical <= this.vertical()) {
                        var notEmptyCells = this.cells().filter(function (cell) { return !cell.isEmpty; });
                        var cellLefts = notEmptyCells.map(function (cell) { return cell.left(); });
                        newRect.top += notEmptyCells[0].top();
                        if (newHorizontal <= this.horizontal())
                            newRect.left += Math.min.apply(Math, cellLefts);
                    }
                    else if (newHorizontal <= this.horizontal()) {
                        var newCells = [];
                        this.updateArray(newVertical * newHorizontal, newCells);
                        var alignments = Report.CharacterCombHelper.getAlignments(this.getControlModel()["textAlignment"]());
                        var texts = Report.CharacterCombHelper.getLines(this.displayText(), newHorizontal, multiline, wordwrap);
                        Report.CharacterCombHelper.setText(texts, newCells, function (texts, position) {
                            return Report.CharacterCombHelper.getTextOffset(texts, position, alignments.vertical, alignments.horizontal, newVertical, newHorizontal);
                        });
                        var newCellsLefts = newCells.filter(function (cell) { return !cell.isEmpty; }).map(function (cell) { return cell.left(); });
                        newRect.left += Math.min.apply(Math, newCellsLefts);
                    }
                    newRect.height = (this.cellSize.height() + this.verticalSpacing()) * newVertical - this.verticalSpacing() - Designer.unitsToPixel(this._getBorderWidthBySpacing(this.verticalSpacing()) * (newVertical - 1), this._context.measureUnit(), 1);
                    newRect.width = (this.cellSize.width() + this.horizontalSpacing()) * newHorizontal - this.horizontalSpacing() - Designer.unitsToPixel(this._getBorderWidthBySpacing(this.horizontalSpacing()) * (newHorizontal - 1), this._context.measureUnit(), 1);
                };
                XRCharacterCombSurface.prototype.updateArray = function (cellsCount, array) {
                    var cells = array || this.cells.peek();
                    if (cells.length > cellsCount) {
                        cells.splice(cellsCount, cells.length - cellsCount);
                    }
                    else if (cells.length < cellsCount) {
                        for (var i = cells.length; i < cellsCount; i++) {
                            cells.push(this._createCell("", i));
                        }
                    }
                    if (!array)
                        this.cells.valueHasMutated();
                };
                XRCharacterCombSurface.prototype.fitBoundsToText = function () {
                    var _multiline = this._control["multiline"] && this._control["multiline"]();
                    var _wordwrap = this._control["wordWrap"] && this._control["wordWrap"]();
                    var zoom = this._context.zoom();
                    var oldRect = this.rect();
                    var newRect = {};
                    Object.keys(oldRect).forEach(function (propertyName) {
                        newRect[propertyName] = oldRect[propertyName] / zoom;
                    });
                    var newHorizVert = Report.CharacterCombHelper.getHorizontalVerticalByText(_multiline, _wordwrap, this.displayText(), this.horizontal() || 1, this.vertical() || 1);
                    this._applyBounds(newRect, newHorizVert.horizontal, newHorizVert.vertical, _multiline, _wordwrap);
                    if (newRect.top !== oldRect.top || newRect.height !== oldRect.height || newRect.left !== oldRect.left || newRect.width !== oldRect.width) {
                        this.rect({ top: Math.round(newRect.top * zoom), height: newRect.height * zoom, left: Math.round(newRect.left * zoom), width: newRect.width * zoom });
                        this.getControlModel().roundSize();
                    }
                };
                XRCharacterCombSurface.prototype.getText = function () {
                    return this.displayText();
                };
                return XRCharacterCombSurface;
            })(Report.ControlSurface);
            Report.XRCharacterCombSurface = XRCharacterCombSurface;
            Report.cellVerticalSpacing = { propertyName: "verticalSpacing", modelName: "@CellVerticalSpacing", defaultVal: 0, displayName: "Cell Vertical Spacing", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellVerticalSpacing", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.cellHorizontalSpacing = { propertyName: "horizontalSpacing", modelName: "@CellHorizontalSpacing", defaultVal: 0, displayName: "Cell Horizontal Spacing", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellHorizontalSpacing", editor: DevExpress.JS.Widgets.editorTemplates.numeric };
            Report.cellWidth = {
                propertyName: "cellWidth", modelName: "@CellWidth", defaultVal: 25, displayName: "Cell Width", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellWidth", editor: DevExpress.JS.Widgets.editorTemplates.numeric, editorOptions: { placeholder: function () { return DevExpress.Designer.getLocalization("(Auto)", "ASPxReportsStringId.ReportDesigner_PropertyGrid_AutoValueString"); } }
            };
            Report.cellHeight = {
                propertyName: "cellHeight", modelName: "@CellHeight", defaultVal: 25, displayName: "Cell Height", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellHeight", editor: DevExpress.JS.Widgets.editorTemplates.numeric, editorOptions: { placeholder: function () { return DevExpress.Designer.getLocalization("(Auto)", "ASPxReportsStringId.ReportDesigner_PropertyGrid_AutoValueString"); } }
            };
            Report.cellSizeMode = {
                propertyName: "sizeMode", modelName: "@CellSizeMode", displayName: "Cell Size Mode", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellSizeMode", defaultVal: "AutoSize", editor: Report.editorTemplates.comboboxUndo,
                valuesArray: [
                    { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.XtraPrinting.SizeMode.Custom" },
                    { value: "AutoWidth", displayValue: "Auto Width", localizationId: "DevExpress.XtraPrinting.SizeMode.AutoWidth" },
                    { value: "AutoHeight", displayValue: "Auto Height", localizationId: "DevExpress.XtraPrinting.SizeMode.AutoHeight" },
                    { value: "AutoSize", displayValue: "Auto Size", localizationId: "DevExpress.XtraPrinting.SizeMode.AutoSize" }
                ]
            };
            var wordWrap = { propertyName: "wordWrap", modelName: "@WordWrap", defaultVal: true, from: Designer.parseBool, displayName: "Word Wrap", localizationId: "DevExpress.XtraReports.UI.XRControl.WordWrap", editor: DevExpress.JS.Widgets.editorTemplates.bool };
            Report.characterCombFont = { propertyName: "font", modelName: "@Font", displayName: "Font", localizationId: "DevExpress.XtraReports.UI.XRControl.Font", editor: Report.editorTemplates.fontUndo };
            Report.characterCombBorders = { propertyName: "borders", modelName: "@Borders", displayName: "Borders", localizationId: "DevExpress.XtraReports.UI.XRControl.Borders", defaultVal: "All", editor: Designer.Widgets.editorTemplates.borders };
            Report.characterCombBorderDashStyle = $.extend({}, Report.borderDashStyle, { valuesArray: Report.borderDashStyleValues });
            Report.characterCombSerializationsInfo = [
                Report.styleName, Report.evenStyleName, Report.oddStyleName, Report.stylePriority, Report.canPublish, Report.backColor, Report.autoWidth,
                Report.formattingRuleLinks, Report.cellSizeMode, wordWrap, Report.cellWidth, Report.cellHeight, Report.cellVerticalSpacing, Report.cellHorizontalSpacing, Report.dataBindings(["Text"]),
                Report.textAlignment, Report.text, Report.textFormatString, Report.textArea, Report.nullValueText, Report.keepTogetherDefaultValueFalse, Report.summary, Report.multiline, wordWrap,
                Report.xlsxFormatString, Report.rtl, Report.characterCombBorders, Report.borderWidth, Report.characterCombBorderDashStyle, Report.borderColor, Report.characterCombFont, Report.foreColor, Report.editOptions, Report.interactiveSorting
            ].concat(Report.createSinglePopularBindingInfos("Text"), Report.baseControlProperties, Report.navigationGroup, Report.canGrowShrinkGroup, Report.processGroup, Report.sizeLocation);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var TextElementAction = (function (_super) {
                __extends(TextElementAction, _super);
                function TextElementAction(_selectionProvider) {
                    var _this = this;
                    _super.call(this);
                    this._selectionProvider = _selectionProvider;
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Fit Bounds To Text",
                            displayText: function () { return Designer.getLocalization("Fit Bounds To Text", 'ReportStringId.Cmd_FitBoundsToText'); },
                            imageClassName: "dxrd-image-actions-fit_bounds_to_text",
                            imageTemplateName: "dxrd-svg-actions-fit_bounds_to_text",
                            disabled: ko.computed(function () { return _this._inaccessibleAction(); }),
                            visible: ko.pureComputed(function () {
                                return _this._selectionProvider.selectedItems.every(function (item) { return item.getControlModel().controlType === "XRLabel" || item.getControlModel().controlType === "XRCharacterComb"; });
                            }),
                            clickAction: function () { _this._textControls.forEach(function (item) { return item.fitBoundsToText(); }); }
                        }, {
                            text: "Fit Text To Bounds",
                            displayText: function () { return Designer.getLocalization("Fit Text To Bounds", 'ReportStringId.Cmd_FitTextToBounds'); },
                            imageClassName: "dxrd-image-actions-fit_text_to_bounds",
                            imageTemplateName: "dxrd-svg-actions-fit_text_to_bounds",
                            disabled: ko.computed(function () { return _this._inaccessibleAction(); }),
                            visible: ko.pureComputed(function () {
                                return _this._selectionProvider.selectedItems.every(function (item) { return item.getControlModel().controlType === "XRLabel" || item.getControlModel().controlType === "XRTableCell"; });
                            }),
                            clickAction: function () { _this._textControls.forEach(function (item) { return item.fitTextToBounds(); }); }
                        },
                    ]);
                }
                Object.defineProperty(TextElementAction.prototype, "_textControls", {
                    get: function () {
                        return this._selectionProvider.selectedItems;
                    },
                    enumerable: true,
                    configurable: true
                });
                TextElementAction.prototype._inaccessibleAction = function () {
                    if (this._textControls && this._textControls.some(function (item) { return item.getText && item.getText() === ""; }))
                        return true;
                    return !!(this._textControls && this._textControls.every(function (item) { return item.hasDataBindingByName && item.hasDataBindingByName("Text"); }));
                };
                TextElementAction.prototype.condition = function (context) {
                    return context && (context.controlType === "XRLabel" || context.controlType === "XRTableCell" || context.controlType === "XRCharacterComb" || context.controlType === "multiselect");
                };
                return TextElementAction;
            })(Designer.BaseActionsProvider);
            Report.TextElementAction = TextElementAction;
            var ElementActions = (function (_super) {
                __extends(ElementActions, _super);
                function ElementActions(surfaceContext, selectionProvider) {
                    var _this = this;
                    _super.call(this);
                    this._selectionProvider = selectionProvider;
                    this._isMultiSelect = ko.observable(false);
                    var alignHandler = new AlignmentHandler(selectionProvider, surfaceContext);
                    var fitToContainerAction = new Report.FitToContainerAction(selectionProvider.focused);
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Align to Grid",
                            displayText: function () { return Designer.getLocalization("Align to Grid", 'ReportStringId.Cmd_AlignToGrid'); },
                            imageClassName: "dxrd-image-actions-align_to_grid",
                            imageTemplateName: "dxrd-svg-actions-align_to_grid",
                            clickAction: function () { alignHandler.alignToGrid(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled; }),
                        }, {
                            text: "Size to Grid",
                            displayText: function () { return Designer.getLocalization("Size to Grid", 'ReportStringId.UD_Capt_MakeSameSizeSizeToGrid'); },
                            imageClassName: "dxrd-image-actions-size_to_grid",
                            imageTemplateName: "dxrd-svg-actions-size_to_grid",
                            clickAction: function () { alignHandler.sizeToGrid(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled; }),
                        }, {
                            text: "Center Horizontally",
                            displayText: function () { return Designer.getLocalization("Center Horizontally", 'ReportStringId.RibbonXRDesign_CenterHorizontally_STipTitle'); },
                            imageClassName: "dxrd-image-actions-center_horizontally",
                            imageTemplateName: "dxrd-svg-actions-center_horizontally",
                            clickAction: function () { alignHandler.centerHorizontally(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled || selectionProvider.focused() instanceof Report.CrossBandSurface; }),
                        }, {
                            text: "Center Vertically",
                            displayText: function () { return Designer.getLocalization("Center Vertically", 'ReportStringId.RibbonXRDesign_CenterVertically_STipTitle'); },
                            imageClassName: "dxrd-image-actions-center_vertically",
                            imageTemplateName: "dxrd-svg-actions-center_vertically",
                            clickAction: function () { alignHandler.centerVertically(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled || selectionProvider.focused() instanceof Report.CrossBandSurface; }),
                        }, {
                            text: "Bring to Front",
                            displayText: function () { return Designer.getLocalization("Bring to Front", 'ReportStringId.Cmd_BringToFront'); },
                            imageClassName: "dxrd-image-actions-bring_to_front",
                            imageTemplateName: "dxrd-svg-actions-bring_to_front",
                            clickAction: function () { alignHandler.bringToFront(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled || !alignHandler.canChangeZOrder(); }),
                        }, {
                            text: "Send to Back",
                            displayText: function () { return Designer.getLocalization("Send to Back", 'ReportStringId.Cmd_SendToBack'); },
                            imageClassName: "dxrd-image-actions-send_to_back",
                            imageTemplateName: "dxrd-svg-actions-send_to_back",
                            clickAction: function () { alignHandler.sendToBack(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled || !alignHandler.canChangeZOrder(); }),
                        }, {
                            text: "Fit Bounds To Container",
                            displayText: function () { return Designer.getLocalization("Fit Bounds To Container", 'ReportStringId.Cmd_FitBoundsToContainer'); },
                            imageClassName: "dxrd-image-actions-fit_to_—Åontainer",
                            imageTemplateName: "dxrd-svg-actions-fit_to_—Åontainer",
                            clickAction: function () { fitToContainerAction.doAction(); },
                            disabled: ko.pureComputed(function () { return _this._generalDisabled || !fitToContainerAction.allowed(); }),
                            visible: ko.pureComputed(function () {
                                return !_this._isMultiSelect() && fitToContainerAction.visible();
                            })
                        }
                    ]);
                    this.setDisabled = function (context) {
                        _this._generalDisabled = _this._selectionProvider.selectedItems.some(function (item) { return item.locked; });
                    };
                }
                ElementActions.prototype.condition = function (context) {
                    this._isMultiSelect(context.controlType === "multiselect");
                    return !(context instanceof Report.TableCellViewModel || context instanceof Report.TableRowViewModel);
                };
                return ElementActions;
            })(Designer.BaseActionsProvider);
            Report.ElementActions = ElementActions;
            var ElementsGroupActions = (function (_super) {
                __extends(ElementsGroupActions, _super);
                function ElementsGroupActions(surfaceContext, selectionProvider) {
                    var _this = this;
                    _super.call(this);
                    this._selectionProvider = selectionProvider;
                    var alignHandler = new AlignmentHandler(selectionProvider, surfaceContext), spaceCommandHandler = new SpaceCommandHandler(selectionProvider, surfaceContext);
                    _super.prototype.initActions.call(this, [
                        {
                            text: "Align Lefts",
                            displayText: function () { return Designer.getLocalization("Align Lefts", 'ReportStringId.UD_TTip_AlignLeft'); },
                            imageClassName: "dxrd-image-actions-align_lefts",
                            imageTemplateName: "dxrd-svg-actions-align_lefts",
                            clickAction: function () { alignHandler.alignLeft(); },
                        }, {
                            text: "Align Centers",
                            displayText: function () { return Designer.getLocalization("Align Centers", 'ReportStringId.RibbonXRDesign_AlignVerticalCenters_STipTitle'); },
                            imageClassName: "dxrd-image-actions-align_centers",
                            imageTemplateName: "dxrd-svg-actions-align_centers",
                            clickAction: function () { alignHandler.alignVerticalCenters(); },
                        }, {
                            text: "Align Rights",
                            displayText: function () { return Designer.getLocalization("Align Rights", 'ReportStringId.RibbonXRDesign_AlignRight_Caption'); },
                            imageClassName: "dxrd-image-actions-align_rights",
                            imageTemplateName: "dxrd-svg-actions-align_rights",
                            clickAction: function () { alignHandler.alignRight(); },
                        }, {
                            text: "Align Tops",
                            displayText: function () { return Designer.getLocalization("Align Tops", 'ReportStringId.RibbonXRDesign_AlignTop_Caption'); },
                            imageClassName: "dxrd-image-actions-align_tops",
                            imageTemplateName: "dxrd-svg-actions-align_tops",
                            clickAction: function () { alignHandler.alignTop(); },
                        }, {
                            text: "Align Middles",
                            displayText: function () { return Designer.getLocalization("Align Middles", 'ReportStringId.RibbonXRDesign_AlignHorizontalCenters_Caption'); },
                            imageClassName: "dxrd-image-actions-align_middles",
                            imageTemplateName: "dxrd-svg-actions-align_middles",
                            clickAction: function () { alignHandler.alignHorizontalCenters(); },
                        }, {
                            text: "Align Bottoms",
                            displayText: function () { return Designer.getLocalization("Align Bottoms", 'ReportStringId.RibbonXRDesign_AlignBottom_Caption'); },
                            imageClassName: "dxrd-image-actions-align_bottoms",
                            imageTemplateName: "dxrd-svg-actions-align_bottoms",
                            clickAction: function () { alignHandler.alignBottom(); },
                        }, {
                            text: "Size to Control Width",
                            displayText: function () { return Designer.getLocalization("Size to Control Width", 'ASPxReportsStringId.ReportDesigner_ElementsAction_SizeToControlWidth'); },
                            imageClassName: "dxrd-image-actions-make_same_width",
                            imageTemplateName: "dxrd-svg-actions-make_same_width",
                            clickAction: function () { alignHandler.sizeToControlWidth(); },
                        }, {
                            text: "Size to Control Height",
                            displayText: function () { return Designer.getLocalization("Size to Control Height", 'ASPxReportsStringId.ReportDesigner_ElementsAction_SizeToControlHeight'); },
                            imageClassName: "dxrd-image-actions-make_same_height",
                            imageTemplateName: "dxrd-svg-actions-make_same_height",
                            clickAction: function () { alignHandler.sizeToControlHeight(); },
                        }, {
                            text: "Size to Control",
                            displayText: function () { return Designer.getLocalization("Size to Control", 'ASPxReportsStringId.ReportDesigner_ElementsAction_SizeToControl'); },
                            imageClassName: "dxrd-image-actions-make_same_sizes",
                            imageTemplateName: "dxrd-svg-actions-make_same_sizes",
                            clickAction: function () { alignHandler.sizeToControl(); },
                        }, {
                            text: "Make Horizontal Spacing Equal",
                            displayText: function () { return Designer.getLocalization("Make Horizontal Spacing Equal", 'ReportStringId.UD_TTip_HorizSpaceMakeEqual'); },
                            imageClassName: "dxrd-image-actions-make_horizontal_spacing_equal",
                            imageTemplateName: "dxrd-svg-actions-make_horizontal_spacing_equal",
                            clickAction: function () { spaceCommandHandler.horizSpaceMakeEqual(); },
                        }, {
                            text: "Increase Horizontal Spacing",
                            displayText: function () { return Designer.getLocalization("Increase Horizontal Spacing", 'ReportStringId.UD_TTip_HorizSpaceIncrease'); },
                            imageClassName: "dxrd-image-actions-increase_horizontal_spacing",
                            imageTemplateName: "dxrd-svg-actions-increase_horizontal_spacing",
                            clickAction: function () { spaceCommandHandler.horizSpaceIncrease(); },
                        }, {
                            text: "Decrease Horizontal Spacing",
                            displayText: function () { return Designer.getLocalization("Decrease Horizontal Spacing", 'ReportStringId.RibbonXRDesign_HorizSpaceDecrease_Caption'); },
                            imageClassName: "dxrd-image-actions-decrease_horizontal_spacing",
                            imageTemplateName: "dxrd-svg-actions-decrease_horizontal_spacing",
                            clickAction: function () { spaceCommandHandler.horizSpaceDecrease(); },
                        }, {
                            text: "Remove Horizontal Spacing",
                            displayText: function () { return Designer.getLocalization("Remove Horizontal Spacing", 'ReportStringId.RibbonXRDesign_HorizSpaceConcatenate_Caption'); },
                            imageClassName: "dxrd-image-actions-remove_horizontal_spacing",
                            imageTemplateName: "dxrd-svg-actions-remove_horizontal_spacing",
                            clickAction: function () { spaceCommandHandler.horizSpaceConcatenate(); },
                        }, {
                            text: "Make Vertical Spacing Equal",
                            displayText: function () { return Designer.getLocalization("Make Vertical Spacing Equal", 'ReportStringId.RibbonXRDesign_VertSpaceMakeEqual_Caption'); },
                            imageClassName: "dxrd-image-actions-make_vertical_spacing_equal",
                            imageTemplateName: "dxrd-svg-actions-make_vertical_spacing_equal",
                            clickAction: function () { spaceCommandHandler.vertSpaceMakeEqual(); },
                        }, {
                            text: "Increase Vertical Spacing",
                            displayText: function () { return Designer.getLocalization("Increase Vertical Spacing", 'ReportStringId.RibbonXRDesign_VertSpaceIncrease_STipTitle'); },
                            imageClassName: "dxrd-image-actions-increase_vertical_spacing",
                            imageTemplateName: "dxrd-svg-actions-increase_vertical_spacing",
                            clickAction: function () { spaceCommandHandler.vertSpaceIncrease(); },
                        }, {
                            text: "Decrease Vertical Spacing",
                            displayText: function () { return Designer.getLocalization("Decrease Vertical Spacing", 'ReportStringId.UD_TTip_VertSpaceDecrease'); },
                            imageClassName: "dxrd-image-actions-decrease_vertical_spacing",
                            imageTemplateName: "dxrd-svg-actions-decrease_vertical_spacing",
                            clickAction: function () { spaceCommandHandler.vertSpaceDecrease(); },
                        }, {
                            text: "Remove Vertical Spacing",
                            displayText: function () { return Designer.getLocalization("Remove Vertical Spacing", 'ReportStringId.UD_TTip_VertSpaceConcatenate'); },
                            imageClassName: "dxrd-image-actions-remove_vertical_spacing",
                            imageTemplateName: "dxrd-svg-actions-remove_vertical_spacing",
                            clickAction: function () { spaceCommandHandler.vertSpaceConcatenate(); },
                        }
                    ]);
                    this.setDisabled = function (context) {
                        var isDisabled = _this._selectionProvider.selectedItems.some(function (item) { return item.locked; });
                        _this.actions.forEach(function (action) {
                            action.disabled(isDisabled);
                        });
                    };
                }
                ElementsGroupActions.prototype.condition = function (context) {
                    return this._selectionProvider.selectedItems.length > 1;
                };
                return ElementsGroupActions;
            })(Designer.BaseActionsProvider);
            Report.ElementsGroupActions = ElementsGroupActions;
            var AlignmentHandler = (function () {
                function AlignmentHandler(selectionProvider, surfaceContext) {
                    this._selectionProvider = selectionProvider;
                    this._surfaceContext = surfaceContext;
                }
                AlignmentHandler.prototype._getFocusedItem = function () { return this._selectionProvider.focused(); };
                AlignmentHandler.prototype._getFocusedParent = function () { return this._selectionProvider.focused().parent; };
                AlignmentHandler.prototype._getPositionFromBand = function (surface) {
                    var rect = $.extend({}, surface.rect());
                    var parent = surface.parent;
                    if (!(surface instanceof Report.BandSurface)) {
                        while (!(parent instanceof Report.BandSurface)) {
                            rect.left += parent.rect().left;
                            rect.top += parent.rect().top;
                            parent = parent.parent;
                        }
                        rect.bottom = rect.top + rect.height;
                        rect.right = rect.left + rect.width;
                    }
                    else {
                        parent = surface;
                    }
                    rect.band = parent;
                    return rect;
                };
                AlignmentHandler.prototype._visitAllSelectedItemsInSameContainerWithFocused = function (iterator) {
                    var focused = this._selectionProvider.focused();
                    var rect = this._getPositionFromBand(focused);
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) {
                        return item !== focused;
                    }).forEach(function (item) {
                        iterator(item, rect);
                    });
                };
                AlignmentHandler.prototype._centerByBand = function (isHoriz, margins, rtl) {
                    if (rtl === void 0) { rtl = false; }
                    var axisProperty = isHoriz ? "left" : "top", lengthProperty = isHoriz ? "width" : "height", focusedParent = this._getFocusedParent(), parentLengthProperty = focusedParent.rect()[lengthProperty] - margins.right(), minAxis = this._getFocusedItem().rect()[axisProperty], maxSide = this._getFocusedItem().rect()[axisProperty] + this._getFocusedItem().rect()[lengthProperty], newOffset;
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.parent; }).forEach(function (item) {
                        var axis = item.rect()[axisProperty];
                        if (axis < minAxis) {
                            minAxis = axis;
                        }
                    });
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.parent; }).forEach(function (item) {
                        var side = item.rect()[axisProperty] + item.rect()[lengthProperty];
                        if (side > maxSide) {
                            maxSide = side;
                        }
                    });
                    newOffset = (parentLengthProperty - (maxSide - minAxis)) / 2 - minAxis + (rtl ? margins.right() : 0);
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.parent; }).forEach(function (item) {
                        var newVal = {};
                        newVal[axisProperty] = item.rect()[axisProperty] + newOffset;
                        item.rect(newVal);
                    });
                };
                AlignmentHandler.prototype._roundingValue = function (value, snapGridSize) {
                    return Math.round(value / snapGridSize) * snapGridSize;
                };
                AlignmentHandler.prototype.alignLeft = function () {
                    var _this = this;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                        if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        var parentRect = _this._getPositionFromBand(item.parent);
                        var left = rect.left - parentRect.left;
                        item.rect({ left: left });
                    });
                };
                AlignmentHandler.prototype.alignTop = function () {
                    var _this = this;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent;
                        }
                        var parentRect = _this._getPositionFromBand(item.parent);
                        if (parentRect["band"] === rect["band"]) {
                            var top = rect.top - parentRect.top;
                            item.rect({ top: top });
                        }
                    });
                };
                AlignmentHandler.prototype.alignRight = function () {
                    var _this = this;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                        if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        var parentRect = _this._getPositionFromBand(item.parent);
                        var right = rect.left - parentRect.left + rect.width;
                        var left = right - item.rect().width;
                        item.rect({ right: right, left: left });
                    });
                };
                AlignmentHandler.prototype.alignBottom = function () {
                    var _this = this;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent;
                        }
                        var parentRect = _this._getPositionFromBand(item.parent);
                        if (parentRect["band"] === rect["band"]) {
                            var bottom = rect.top - parentRect.top + rect.height;
                            var top = bottom - item.rect().height;
                            item.rect({ bottom: bottom, top: top });
                        }
                    });
                };
                AlignmentHandler.prototype.alignVerticalCenters = function () {
                    var focused = this._getFocusedItem();
                    var verticalCenter = focused.rect().left + focused.rect().width / 2;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent.parent;
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        if (focused.parent === item.parent) {
                            item.rect({ left: verticalCenter - item.rect().width / 2 });
                        }
                    });
                };
                AlignmentHandler.prototype.alignHorizontalCenters = function () {
                    var focused = this._getFocusedItem();
                    var horizontalCenter = focused.rect().top + focused.rect().height / 2;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent.parent;
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        if (focused.parent === item.parent) {
                            item.rect({ top: horizontalCenter - item.rect().height / 2 });
                        }
                    });
                };
                AlignmentHandler.prototype.sizeToControlWidth = function () {
                    var newWidth = this._getFocusedItem().rect().width;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableRowSurface) {
                            item = item.parent;
                        }
                        item.rect({ width: newWidth });
                    });
                };
                AlignmentHandler.prototype.sizeToControlHeight = function () {
                    var newHeight = this._getFocusedItem().rect().height;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item = item.parent;
                        }
                        item.rect({ height: newHeight });
                    });
                };
                AlignmentHandler.prototype.sizeToControl = function () {
                    var newWidth = this._getFocusedItem().rect().width, newHeight = this._getFocusedItem().rect().height;
                    this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item.rect({ width: newWidth });
                            item.parent.rect({ height: newHeight });
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item.rect({ height: newHeight });
                            item.parent.rect({ width: newWidth });
                        }
                        else {
                            item.rect({ width: newWidth, height: newHeight });
                        }
                    });
                };
                AlignmentHandler.prototype.centerHorizontally = function () {
                    this._centerByBand(true, this._surfaceContext().margins, this._surfaceContext().rtl());
                };
                AlignmentHandler.prototype.centerVertically = function () {
                    this._centerByBand(false, new Designer.Margins(0, 0, 0, 0));
                };
                AlignmentHandler.prototype.alignToGrid = function () {
                    var _this = this;
                    var snapGridSize = this._surfaceContext().snapGridSize();
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize)
                            });
                            item.parent.rect({
                                top: _this._roundingValue(item.rect().top, snapGridSize)
                            });
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item.rect({
                                top: _this._roundingValue(item.rect().top, snapGridSize)
                            });
                            item.parent.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize)
                            });
                        }
                        else {
                            item.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize),
                                top: _this._roundingValue(item.rect().top, snapGridSize)
                            });
                        }
                    });
                };
                AlignmentHandler.prototype.sizeToGrid = function () {
                    var _this = this;
                    var snapGridSize = this._surfaceContext().snapGridSize();
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
                        if (item instanceof Report.TableCellSurface) {
                            item.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize),
                                width: _this._roundingValue(item.rect().width, snapGridSize)
                            });
                            item.parent.rect({
                                top: _this._roundingValue(item.rect().top, snapGridSize),
                                height: _this._roundingValue(item.rect().height, snapGridSize)
                            });
                        }
                        else if (item instanceof Report.TableRowSurface) {
                            item.rect({
                                top: _this._roundingValue(item.rect().top, snapGridSize),
                                height: _this._roundingValue(item.rect().height, snapGridSize)
                            });
                            item.parent.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize),
                                width: _this._roundingValue(item.rect().width, snapGridSize)
                            });
                        }
                        else {
                            item.rect({
                                left: _this._roundingValue(item.rect().left, snapGridSize),
                                top: _this._roundingValue(item.rect().top, snapGridSize),
                                width: _this._roundingValue(item.rect().width, snapGridSize),
                                height: _this._roundingValue(item.rect().height, snapGridSize)
                            });
                        }
                    });
                };
                AlignmentHandler.prototype.sendToBack = function () {
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
                        if (!item.focused()) {
                            item.getControlModel()["sendToBack"]();
                        }
                    });
                    this._getFocusedItem().getControlModel()["sendToBack"]();
                };
                AlignmentHandler.prototype.bringToFront = function () {
                    var reverseSelectedItems = this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; });
                    reverseSelectedItems.reverse();
                    reverseSelectedItems.forEach(function (item) {
                        item.getControlModel()["bringToFront"]();
                    });
                };
                AlignmentHandler.prototype.canChangeZOrder = function () {
                    var focusedItem = this._getFocusedItem(), parent = focusedItem && focusedItem.parent;
                    if (!focusedItem || !parent)
                        return false;
                    var childrenCollection = parent.getChildrenCollection();
                    return (childrenCollection && childrenCollection.peek().length) > 1;
                };
                return AlignmentHandler;
            })();
            Report.AlignmentHandler = AlignmentHandler;
            var SpaceCommandHandler = (function () {
                function SpaceCommandHandler(selectionProvider, surfaceContext) {
                    this._selectionProvider = selectionProvider;
                    this._surfaceContext = surfaceContext;
                }
                SpaceCommandHandler.prototype._comparer = function (propertyName) {
                    return function (a, b) {
                        return a.rect()[propertyName] - b.rect()[propertyName];
                    };
                };
                SpaceCommandHandler.prototype._spaceIncrease = function (sign, isHoriz) {
                    var sortedSelectedItems = this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }), axisProperty = isHoriz ? "left" : "top", lengthProperty = isHoriz ? "width" : "height", margin = isHoriz ? this._surfaceContext().margins.left() : 0, snapGridSize = this._surfaceContext().snapGridSize(), focusedParent = this._selectionProvider.focused().getControlModel().parentModel(), focusedItem = this._selectionProvider.focused();
                    sortedSelectedItems.sort(this._comparer(axisProperty));
                    var focusedItemIndex = sortedSelectedItems.indexOf(this._selectionProvider.focused());
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return item !== focusedItem && item.getControlModel().parentModel() === focusedParent; }).forEach(function (item) {
                        var itemIndex = sortedSelectedItems.indexOf(item), spaceOffset = Math.abs(itemIndex - focusedItemIndex) * snapGridSize * sign, itemAxisProperty = item.rect()[axisProperty], itemLengthProperty = item.rect()[lengthProperty], parentLengthProperty = item.parent.rect()[lengthProperty] - margin, newValue;
                        if (itemIndex < focusedItemIndex) {
                            newValue = itemAxisProperty - spaceOffset;
                            if (newValue < 0) {
                                newValue = 0;
                            }
                        }
                        else {
                            newValue = itemAxisProperty + spaceOffset;
                            if ((newValue + itemLengthProperty) > parentLengthProperty) {
                                newValue = parentLengthProperty - itemLengthProperty;
                            }
                        }
                        var val = {};
                        val[axisProperty] = newValue;
                        item.rect(val);
                    });
                };
                SpaceCommandHandler.prototype._spaceMakeEqual = function (isHoriz) {
                    this._concatenateWithSpace(isHoriz, function (sortedSelectedItems, axisProperty, lengthProperty) {
                        var averageSpace = 0;
                        for (var i = 0; i < sortedSelectedItems.length - 1; i++) {
                            var currentValue = sortedSelectedItems[i + 1].rect()[axisProperty] - (sortedSelectedItems[i].rect()[axisProperty] + sortedSelectedItems[i].rect()[lengthProperty]);
                            averageSpace = (averageSpace * i + currentValue) / (i + 1);
                        }
                        return averageSpace;
                    });
                };
                SpaceCommandHandler.prototype._concatenateWithSpace = function (isHoriz, getSpaceSize) {
                    var sortedSelectedItems = this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }), axisProperty = isHoriz ? "left" : "top", lengthProperty = isHoriz ? "width" : "height", spaceSize = 0, focusedParent = this._selectionProvider.focused().getControlModel().parentModel();
                    sortedSelectedItems.sort(this._comparer(axisProperty));
                    spaceSize = getSpaceSize(sortedSelectedItems, axisProperty, lengthProperty);
                    this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.getControlModel().parentModel(); }).forEach(function (item) {
                        var itemIndex = sortedSelectedItems.indexOf(item);
                        if (itemIndex > 0) {
                            var prevControl = sortedSelectedItems[itemIndex - 1], val = {};
                            val[axisProperty] = prevControl.rect()[axisProperty] + prevControl.rect()[lengthProperty] + spaceSize;
                            item.rect(val);
                        }
                    });
                };
                SpaceCommandHandler.prototype.horizSpaceConcatenate = function () {
                    this._concatenateWithSpace(true, function () { return 0; });
                };
                SpaceCommandHandler.prototype.vertSpaceConcatenate = function () {
                    this._concatenateWithSpace(false, function () { return 0; });
                };
                SpaceCommandHandler.prototype.horizSpaceMakeEqual = function () {
                    this._spaceMakeEqual(true);
                };
                SpaceCommandHandler.prototype.vertSpaceMakeEqual = function () {
                    this._spaceMakeEqual(false);
                };
                SpaceCommandHandler.prototype.horizSpaceDecrease = function () {
                    this._spaceIncrease(-1, true);
                };
                SpaceCommandHandler.prototype.horizSpaceIncrease = function () {
                    this._spaceIncrease(1, true);
                };
                SpaceCommandHandler.prototype.vertSpaceDecrease = function () {
                    this._spaceIncrease(-1, false);
                };
                SpaceCommandHandler.prototype.vertSpaceIncrease = function () {
                    this._spaceIncrease(1, false);
                };
                return SpaceCommandHandler;
            })();
            Report.SpaceCommandHandler = SpaceCommandHandler;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ControlsFactory = (function (_super) {
                __extends(ControlsFactory, _super);
                function ControlsFactory(bindingMode, fieldListProvider) {
                    if (fieldListProvider === void 0) { fieldListProvider = ko.observable(null); }
                    _super.call(this);
                    this.fieldListProvider = fieldListProvider;
                    this._beforePrintPrintOnPage = ["BeforePrint", "PrintOnPage"];
                    this._beforePrint = ["BeforePrint"];
                    this._expressionWrapper = new Report.ExpressionWrapper(bindingMode, this.fieldListProvider);
                }
                ControlsFactory.prototype.dispose = function () {
                    var _this = this;
                    this._expressionWrapper.dispose();
                    this._expressionWrapper = null;
                    Object.keys(this.controlsMap).forEach(function (x) {
                        delete _this.controlsMap[x];
                    });
                    this.fieldListProvider = null;
                };
                ControlsFactory.prototype._registerCommonExpressions = function (controlType) {
                    this.setExpressionBinding(controlType, "Text", this._beforePrintPrintOnPage);
                    this.setExpressionBinding(controlType, "Visible", this._beforePrintPrintOnPage);
                    this.setExpressionBinding(controlType, "NavigateUrl", this._beforePrint);
                    this.setExpressionBinding(controlType, "Bookmark", this._beforePrint);
                    this.setExpressionBinding(controlType, "Tag", this._beforePrint);
                    this.setExpressionBinding(controlType, "LeftF", this._beforePrint, "Layout");
                    this.setExpressionBinding(controlType, "TopF", this._beforePrint, "Layout");
                    this.setExpressionBinding(controlType, "WidthF", this._beforePrint, "Layout");
                    this.setExpressionBinding(controlType, "HeightF", this._beforePrint, "Layout");
                    this.setExpressionBinding(controlType, "StyleName", this._beforePrint);
                    this.setExpressionBinding(controlType, "ForeColor", this._beforePrintPrintOnPage, "Appearance");
                    this.setExpressionBinding(controlType, "BackColor", this._beforePrintPrintOnPage, "Appearance");
                    this.setExpressionBinding(controlType, "BorderColor", this._beforePrintPrintOnPage, "Appearance");
                    this.setExpressionBinding(controlType, "Borders", this._beforePrintPrintOnPage, "Appearance");
                    this.setExpressionBinding(controlType, "BorderWidth", this._beforePrintPrintOnPage, "Appearance");
                    this.setExpressionBinding(controlType, "BorderDashStyle", this._beforePrintPrintOnPage, "Appearance");
                    this.setExpressionBinding(controlType, "TextAlignment", this._beforePrintPrintOnPage, "Appearance");
                    this.setExpressionBinding(controlType, "Font", this._beforePrintPrintOnPage, "Appearance", ["Name", "Size", "Italic", "Strikeout", "Bold", "Underline"]);
                    this.setExpressionBinding(controlType, "Padding", this._beforePrintPrintOnPage, "Appearance", ["Left", "Right", "Top", "Bottom"]);
                };
                ControlsFactory.prototype._registerExtensions = function (controlType, metadata) {
                    var parentType = metadata && metadata.parentType || controlType;
                    this._registerCommonExpressions(controlType);
                    switch (parentType) {
                        case "XRCheckBox":
                            this.setExpressionBinding(controlType, "CheckState", this._beforePrintPrintOnPage);
                            break;
                        case "XRPictureBox":
                            this.setExpressionBinding(controlType, "ImageSource", this._beforePrintPrintOnPage);
                            this.setExpressionBinding(controlType, "ImageUrl", this._beforePrintPrintOnPage);
                            this.hideExpressionBindings(controlType, "Font", "ForeColor", "Text", "TextAlignment");
                            break;
                        case "XRBarCode":
                            this.setExpressionBinding(controlType, "BinaryData", this._beforePrint);
                            break;
                        case "XRGauge":
                            this.hideExpressionBindings(controlType, "Text", "TextAlignment", "Font", "ForeColor");
                            this.setExpressionBinding(controlType, "TargetValue", this._beforePrint);
                            this.setExpressionBinding(controlType, "ActualValue", this._beforePrint);
                            this.setExpressionBinding(controlType, "Minimum", this._beforePrint);
                            this.setExpressionBinding(controlType, "Maximum", this._beforePrint);
                            break;
                        case "XRCharacterComb":
                            this.hideExpressionBindings(controlType, "Padding");
                            break;
                        case "TopMarginBand":
                        case "BottomMarginBand":
                        case "DetailReportBand":
                        case "DetailBand":
                        case "SubBand":
                        case "GroupHeaderBand":
                        case "GroupFooterBand":
                        case "PageHeaderBand":
                        case "ReportHeaderBand":
                        case "ReportFooterBand":
                            this.hideExpressionBindings(controlType, "Bookmark", "NavigateUrl", "Text", "WidthF", "LeftF", "TopF");
                            this.setExpressionBinding(controlType, "Visible", this._beforePrint);
                            break;
                        case "XRSubreport":
                            this.setExpressionBinding(controlType, "Visible", this._beforePrint);
                            this.hideExpressionBindings(controlType, "Bookmark", "NavigateUrl", "Padding", "StyleName");
                            this.hideExpressionBindings(controlType, "BackColor", "BorderColor", "BorderWidth", "BorderDashStyle", "Borders", "Font", "ForeColor", "TextAlignment", "Tag", "Text", "NavigateUrl");
                            break;
                        case "XRCrossBandBox":
                            this.hideExpressionBindings(controlType, "Bookmark", "NavigateUrl", "Text", "BackColor", "Font", "Padding", "TextAlignment");
                            this.hideExpressionBindings(controlType, "ForeColor", "Visible");
                            break;
                        case "XRCrossBandLine":
                            this.hideExpressionBindings(controlType, "Bookmark", "NavigateUrl", "Text", "BackColor", "Font", "Padding", "TextAlignment");
                            this.hideExpressionBindings(controlType, "BorderColor", "BorderDashStyle", "Borders", "BorderWidth", "Visible");
                            break;
                        case "XRChart":
                            this.hideExpressionBindings(controlType, "Text", "Font", "ForeColor", "TextAlignment");
                            break;
                        case "XRLine":
                            this.hideExpressionBindings(controlType, "Font", "Text", "TextAlignment", "NavigateUrl", "Bookmark");
                            break;
                        case "XRPivotGrid":
                            this.setExpressionBinding(controlType, "Visible", this._beforePrint);
                            this.hideExpressionBindings(controlType, "BackColor", "BorderColor", "Borders", "BorderDashStyle", "BorderWidth", "Font", "ForeColor", "Padding", "TextAlignment", "Text", "NavigateUrl", "StyleName");
                            break;
                        case "XRPageBreak":
                            this.setExpressionBinding(controlType, "Visible", this._beforePrint);
                            this.hideExpressionBindings(controlType, "BackColor", "BorderColor", "Borders", "BorderDashStyle", "BorderWidth", "Font", "ForeColor", "Padding", "TextAlignment", "Tag", "Text", "NavigateUrl", "LeftF", "WidthF", "HeightF", "Bookmark", "StyleName");
                            break;
                        case "XRPageInfo":
                            this.hideExpressionBindings(controlType, "Text");
                            break;
                        case "XRPanel":
                            this.hideExpressionBindings(controlType, "Font", "ForeColor", "Text", "TextAlignment");
                            break;
                        case "XRRichText":
                            this.hideExpressionBindings(controlType, "Text");
                            this.setExpressionBinding(controlType, "Rtf", this._beforePrint);
                            this.setExpressionBinding(controlType, "Html", this._beforePrint);
                            break;
                        case "XRShape":
                            this.hideExpressionBindings(controlType, "Font", "TextAlignment", "Text");
                            this.setExpressionBinding(controlType, "FillColor", this._beforePrint, "Appearance");
                            break;
                        case "XRSparkline":
                            this.hideExpressionBindings(controlType, "Text", "Font", "TextAlignment", "ForeColor");
                            break;
                        case "XRTableOfContents":
                            this.hideExpressionBindings(controlType, "NavigateUrl", "Text", "TextAlignment", "Bookmark", "Font", "LeftF", "WidthF");
                            break;
                        case "XRTableRow":
                            this.hideExpressionBindings(controlType, "LeftF", "TopF", "WidthF", "Text", "NavigateUrl", "Bookmark");
                            break;
                        case "XRTableCell":
                            this.hideExpressionBindings(controlType, "LeftF", "TopF", "HeightF");
                            break;
                        case "XRTable":
                            this.hideExpressionBindings(controlType, "Text", "NavigateUrl");
                            break;
                        case "XRZipCode":
                            this.hideExpressionBindings(controlType, "Font", "TextAlignment");
                            break;
                        case "DevExpress.XtraReports.UI.XtraReport":
                            this.hideExpressionBindings(controlType, "StyleName", "Text", "NavigateUrl");
                            this.setExpressionBinding(controlType, "Bookmark", this._beforePrint);
                            this.hideExpressionBindings(controlType, "LeftF", "TopF", "WidthF", "HeightF");
                            break;
                    }
                };
                ControlsFactory.prototype.registerControl = function (typeName, metadata) {
                    _super.prototype.registerControl.call(this, typeName, metadata);
                    this._registerExtensions(typeName, metadata);
                };
                ControlsFactory.prototype._createExpressionObject = function (typeName, expressions, path, summaryRunning) {
                    return this._expressionWrapper.createExpressionsObject(typeName, expressions, path, summaryRunning);
                };
                ControlsFactory.prototype.setExpressionBinding = function (controlType, propertyName, events, group, objectProperties) {
                    this._expressionWrapper.setPropertyDescription(controlType, propertyName, events, objectProperties, group);
                };
                ControlsFactory.prototype.setPropertyDescription = function (controlType, propertyName, events, group, objectProperties) {
                    return this.setExpressionBinding(controlType, propertyName, events, group, objectProperties);
                };
                ControlsFactory.prototype.setLocalizationIdForExpression = function (propertyName, localizationId) {
                    this._expressionWrapper.setLocalizationId(propertyName, localizationId);
                };
                ControlsFactory.prototype.hideExpressionBindings = function (type) {
                    var propertyNames = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        propertyNames[_i - 1] = arguments[_i];
                    }
                    (_a = this._expressionWrapper).hidePropertyDescriptions.apply(_a, [type].concat(propertyNames));
                    var _a;
                };
                ControlsFactory.prototype.hidePropertyDescriptions = function (type) {
                    var propertyNames = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        propertyNames[_i - 1] = arguments[_i];
                    }
                    return this.hideExpressionBindings.apply(this, [type].concat(propertyNames));
                };
                ControlsFactory.prototype.inheritControl = function (parentType, extendedOptions) {
                    var parentInfo = this.getControlInfo(parentType);
                    var copyParentSerializationsInfo = $.extend(true, [], parentInfo.info);
                    var newInfo = [].concat(copyParentSerializationsInfo, extendedOptions.info || []);
                    var newPopularProperties = [].concat(parentInfo.popularProperties, extendedOptions.popularProperties || []);
                    return $.extend({}, parentInfo, extendedOptions, {
                        parentType: parentType,
                        info: newInfo,
                        popularProperties: newPopularProperties
                    });
                };
                ControlsFactory.prototype.createPopularBindingInfo = function (options, isExpression) {
                    if (isExpression === void 0) { isExpression = true; }
                    return DevExpress.Designer.Report.createPopularBindingInfo(options, isExpression);
                };
                return ControlsFactory;
            })(Designer.ControlsFactory);
            Report.ControlsFactory = ControlsFactory;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            DevExpress.JS.Utils.getLocalization = DevExpress.Designer.getLocalization;
            Report.controlsFactory = null;
            Report.limitation = false;
            Report.HandlerUri = "DXXRD.axd";
            Report.ReportDesignerElements = $.extend({
                NavigationPanel: "dxrd-navigation-panel-template",
                ReportDialog: "dxrd-report-dialog-template",
                ChartDialog: "dxrd-chart-designer-popup",
                ReportConverterDialog: "dxrd-report-dialog-converter-template",
            }, Designer.DesignerBaseElements);
            Report.ReportDesignerAddOns = {
                Preview: "dxrd-report-preview",
                ReportWizard: "dxrd-wizard#report",
                DataSourceWizard: "dxrd-wizard#data-source",
                CompleteDataSourceWizard: "dxrd-wizard#complete-data-source",
                MasterDetailEditor: "dxrd-masterDetail-editor",
                ScriptEditor: "dxrd-scripts"
            };
            Report.reportStorageWebIsRegister = false;
            Report.ActionId = {
                NewReport: "dxrd-newreport",
                NewReportViaWizard: "dxrd-newreport-via-wizard",
                OpenReport: "dxrd-open-report",
                ReportWizard: "dxrd-run-wizard",
                Preview: "dxrd-preview",
                Scripts: "dxrd-scripts",
                AddDataSource: "dxrd-add-datasource",
                AddSqlDataSource: "dxrd-add-sql-datasource",
                AddMultiQuerySqlDataSource: "dxrd-add-multi-query-sql-datasource",
                ValidateBindings: "dxrd-validate-bindings",
                Save: "dxrd-save",
                SaveAs: "dxrd-save-as",
                Exit: "dxrd-exit",
            };
            Report.stylesInfo = [Report.evenStyleName, Report.oddStyleName, Report.styleName].concat(Report.pivotGridStyles);
            Report.groups = {
                "Styles": {
                    info: Report.stylesInfo,
                    displayName: function () { return Designer.getLocalization("Styles", "DevExpress.XtraReports.UI.XRPivotGrid.Styles"); }
                },
                "Appearance": {
                    info: [Designer.Chart.appearanceName, Report.pivotGridAppearances, Report.alignment, Report.backColor, Report.borderColor, Report.borderDashStyle, Report.borderDashStyleCrossband, Report.borderWidth, Report.borders,
                        Designer.Pivot.caption, Designer.Pivot.cellFormat, Designer.Pivot.columnValueLineCount, Designer.Pivot.displayFolder, Designer.Pivot.emptyCellText, Designer.Pivot.emptyValueText,
                        Report.fillColor, Report.font, Report.characterCombFont, Report.foreColor, Report.glyphAlignment, Designer.Pivot.grandTotalCellFormat, Designer.Pivot.grandTotalText,
                        Report.lineDirection, Report.lineStyle, Report.lineWidth, Report.padding, Report.pageColor, Designer.Chart.paletteName, Report.imageType,
                        Designer.Pivot.rowValueLineCount, Report.sparklineFake, Report.stylePriority, Report.textAlignment, Report.textTrimming, Designer.Pivot.totalCellFormat, Designer.Pivot.totalValueFormat,
                        Designer.Pivot.valueFormat, Report.viewStyle, Report.viewTheme, Report.viewType, Report.watermark, Report.formattingRuleLinks],
                    displayName: function () { return Designer.getLocalization("Appearance", "DevExpress.XtraReports.UI.XRPivotGrid.Appearance"); }
                },
                "Behavior": {
                    info: [
                        Designer.Pivot.allowedAreas, Report.anchorVertical, Report.anchorHorizontal, Report.angle, Designer.Pivot.area, Designer.Pivot.areaIndexEditable, Report.autoModule, Report.autoWidth,
                        Report.barCodeOrientation, Report.canGrow, Report.canPublish, Report.canShrink, Report.conditionObj, Report.drillDownControl, Report.drillDownDetailReportExpanded,
                        Designer.Pivot.groupInterval, Designer.Pivot.groupIntervalNumericRange, Designer.Pivot.totalsVisibility,
                        Report.displayName, Report.formatting, Report.groupFields, Report.groupUnion, Report.groupFooterUnion,
                        Report.keepTogether, Report.keepTogetherWithDetailReports, Report.level,
                        Report.moduleInfo, Report.multiline, Report.multiColumn,
                        Report.pageBreak, Report.pageInfo, Report.printAtBottom, Report.printOn, Report.processDuplicatesMode, Report.processDuplicatesTarget, Report.processNullValues,
                        Report.repeatEveryPage, Report.measureUnit, Designer.Chart.rotated, Report.runningBand, Report.requestParameters, Report.rowSpan,
                        Report.segmentWidth, Report.shapeFake, Report.sizing, Report.imageAlignment, Report.showPreviewMarginLines, Report.showText, Report.startPageNumber, Report.stretch, Report.barcodeFake,
                        Report.textFitMode, Report.verticalContentSplitting, Report.visible, Report.wordWrap, Report.scriptLanguage,
                        Report.reportExportOptionsSerializationInfo, Report.horizontalContentSplitting,
                        Report.scriptReferencesString, Report.allScripts, Report.sortingSummary,
                        Report.tocTitle, Report.tocLevelDefault, Report.tocLevels, Report.maxNestingLevel,
                        Report.editOptions, Report.textEditOptions, Report.chekEditOptions, Report.imageEditOptions, Report.interactiveSorting, Designer.Pivot.sortBySummary,
                        Report.processHiddenCellMode
                    ],
                    displayName: function () { return Designer.getLocalization("Behavior", "ReportStringId.CatBehavior"); }
                },
                "Data": {
                    info: [Report.actualValue, Designer.Chart.seriesDataMember,
                        Report.checkState, Report.checked, Designer.Chart.chartDataSource,
                        Report.dataSource, Report.dataMember, Report.dataAdapter, Designer.Pivot.expandedInFieldsGroup, Designer.Chart.pivotGridDataSourceOptions,
                        Designer.Pivot.fieldName, Report.filterStringEditable,
                        Report.imageSource, Report.imageUrl, Report.tickmarkCount, Report.maximum, Report.minimum, Report.nullValueText, Report.prefilter,
                        Designer.Pivot.runningTotal, Report.sortFields, Report.summary, Designer.Pivot.showNewValues, Designer.Pivot.sortMode, Designer.Pivot.sortOrder, Designer.Pivot.summaryDisplayType, Designer.Pivot.summaryType,
                        Report.targetValue, Report.tag, Report.text, Report.textArea, Report.rtf, Report.textRtf, Report.serializableRtfString, Designer.Pivot.topValueCount, Designer.Pivot.topValueShowOthers, Designer.Pivot.topValueType,
                        Designer.Pivot.unboundExpression, Designer.Pivot.unboundExpressionMode, Designer.Pivot.unboundFieldName, Designer.Pivot.unboundType, Designer.Pivot.useNativeFormat,
                        Report.xlsxFormatString,
                        Designer.Pivot.pivotGridFieldsSerializable,
                        Report.valueMember, Report.valueRange,
                        Report.reportSourceUrl, Report.calculatedFields, Report.parameterBindings, Report.parametersInfo,
                        Report.dataBindings([]), Report.textFormatString],
                    displayName: function () { return Designer.getLocalization("Data", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data"); }
                },
                "Design": {
                    info: [Report.name, Report.snapGridSize, Report.componentName, Report.drawWatermark],
                    displayName: function () { return Designer.getLocalization("Design", "ReportStringId.CatDesign"); }
                },
                "Layout": {
                    info: [Report.cellHeight, Report.cellHorizontalSpacing, Report.cellSizeMode, Report.cellVerticalSpacing, Report.cellWidth, Report.startBand, Report.startPoint, Report.endBand, Report.endPoint, Report.height, Report.location, Report.size, Designer.Pivot.minWidth, Report.width],
                    displayName: function () { return Designer.getLocalization("Layout", "DevExpress.XtraReports.UI.MultiColumn.Layout"); }
                },
                "Navigation": {
                    info: [Report.bookmark, Report.bookmarkParent, Report.bookmarkDuplicateSuppress, Report.target, Report.navigateUrl],
                    displayName: function () { return Designer.getLocalization("Navigation", "ASPxReportsStringId.DocumentViewer_RibbonNavigationGroupText"); }
                },
                "Page Settings": {
                    info: [Report.landscape, Report.rollPaper, Report.pageWidth, Report.pageHeight, Report.paperKind, Report.margins],
                    displayName: function () { return Designer.getLocalization("Page Settings", "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PageSettings"); }
                },
                "Printing": {
                    info: [Report.rtl, Report.rtlReport, Report.rtlLayout, Report.reportPrintOptions],
                    displayName: function () { return Designer.getLocalization("Printing", "ReportStringId.CatPrinting"); }
                },
                "Options": {
                    info: Report.pivotGridOptions.concat(Designer.Pivot.options),
                    displayName: function () { return Designer.getLocalization("Options", "DevExpress.XtraPivotGrid.PivotGridFieldBase.Options"); }
                },
                "KPI": {
                    info: [Designer.Pivot.KPIGraphic],
                    displayName: function () { return Designer.getLocalization("Appearance", "DevExpress.XtraReports.UI.XRPivotGrid.Appearance"); }
                },
            };
            Report.groupLocalizationIDs = {
                "Styles": "DevExpress.XtraReports.UI.XRPivotGrid.Styles",
                "Appearance": "DevExpress.XtraReports.UI.XRPivotGrid.Appearance",
                "Behavior": "ReportStringId.CatBehavior",
                "Data": "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data",
                "Design": "ReportStringId.CatDesign",
                "Layout": "DevExpress.XtraReports.UI.MultiColumn.Layout",
                "Navigation": "ASPxReportsStringId.DocumentViewer_RibbonNavigationGroupText",
                "Page Settings": "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PageSettings",
                "Printing": "ReportStringId.CatPrinting",
                "Options": "DevExpress.XtraPivotGrid.PivotGridFieldBase.Options"
            };
            Report.formatStringEditorCustomSet = {};
            Report.reportCopyPasteStrategy = function (componentAdded) { return ({
                createChild: function (pasteTarget, info) {
                    var control = null;
                    var parent = pasteTarget;
                    if (info["@ControlType"] === "XRCrossBandBox" || info["@ControlType"] === "XRCrossBandLine") {
                        parent = pasteTarget.root;
                        control = parent.createChild(info);
                    }
                    else {
                        control = Designer.copyPasteStrategy.createChild(parent, info);
                    }
                    componentAdded && componentAdded({ parent: parent, model: control });
                    return control;
                },
                calculateDelta: function (selection, pasteTargetSurface, minPoint) {
                    var result = Designer.copyPasteStrategy.calculateDelta(selection, pasteTargetSurface, minPoint);
                    if (selection.getControlModel().controlType === "XRCrossBandBox" || selection.getControlModel().controlType === "XRCrossBandLine") {
                        result.y += pasteTargetSurface["absolutePosition"].y();
                    }
                    return result;
                }
            }); };
            function correctModel(model) {
                if (Array.isArray(model)) {
                    for (var i = 0; i < model.length; i++) {
                        if (model[i]["@Ref"] !== undefined) {
                            model = model[i];
                            break;
                        }
                    }
                }
                else {
                    Object.keys(model).forEach(function (name) {
                        if (model[name] instanceof Object)
                            model[name] = correctModel(model[name]);
                    });
                }
                return model;
            }
            Report.correctModel = correctModel;
            function createObjectFromInfo(control, serializationsInfo) {
                var newObj = undefined;
                var newObjInfo = [];
                serializationsInfo.forEach(function (info) {
                    if (control[info.propertyName]) {
                        if (newObj === undefined)
                            newObj = {};
                        newObj[info.propertyName] = control[info.propertyName];
                        newObjInfo.push(info);
                    }
                });
                if (!!newObj) {
                    newObj["getInfo"] = function () { return newObjInfo; };
                }
                return newObj;
            }
            Report.createObjectFromInfo = createObjectFromInfo;
            function subreportControlCollector(target, subreportControls) {
                if (subreportControls === void 0) { subreportControls = []; }
                var visitor = function (target) {
                    if (target instanceof Report.XRSubreportViewModel) {
                        subreportControls.push(target);
                        subreportControlCollector(target["reportSource"], subreportControls);
                    }
                };
                visitor(target);
                DevExpress.Designer.collectionsVisitor(target, function (collection) {
                    collection().forEach(visitor);
                }, ["controls", "bands"]);
                return subreportControls;
            }
            Report.subreportControlCollector = subreportControlCollector;
            var DataSourceItemsExtender = (function () {
                function DataSourceItemsExtender(dataSources) {
                    this._dataSources = dataSources;
                }
                DataSourceItemsExtender.prototype.beforeItemsFilled = function (request, items) {
                    return false;
                };
                DataSourceItemsExtender.prototype.afterItemsFilled = function (request, items) {
                    if (!(this._dataSources && this._dataSources.peek()))
                        return;
                    if (!request.fullPath) {
                        this._dataSources.peek().forEach(function (dataSourceItem) {
                            var dataMember = Designer.getFirstItemByPropertyValue(items, "displayName", dataSourceItem.name);
                            if (!(dataMember && dataSourceItem.data))
                                return;
                            if (dataSourceItem.data.tableInfoCollection) {
                                dataMember["contenttemplate"] = "dxrd-datasource-item";
                                dataMember["tableInfoItems"] = dataSourceItem.data.tableInfoCollection;
                            }
                            else if (dataSourceItem.isSqlDataSource) {
                                dataMember["canAddSqlQuery"] = true;
                            }
                            dataMember["canRemove"] = true;
                        });
                    }
                    else if (request.fullPath === request.id || request.fullPath === request.ref) {
                        var dataSourcesInfo = this._dataSources.peek().filter(function (dataSourceItem) {
                            return !!dataSourceItem.id && dataSourceItem.id === request.id || !!dataSourceItem.ref && dataSourceItem.ref === request.ref;
                        })[0];
                        if (!dataSourcesInfo || !dataSourcesInfo.isSqlDataSource)
                            return;
                        items.forEach(function (dataMemberItem) { dataMemberItem["canEditQuery"] = dataMemberItem.isList; });
                    }
                };
                return DataSourceItemsExtender;
            })();
            Report.DataSourceItemsExtender = DataSourceItemsExtender;
            (function (GraphicsUnit) {
                GraphicsUnit[GraphicsUnit["World"] = 0] = "World";
                GraphicsUnit[GraphicsUnit["Display"] = 1] = "Display";
                GraphicsUnit[GraphicsUnit["Pixel"] = 2] = "Pixel";
                GraphicsUnit[GraphicsUnit["Point"] = 3] = "Point";
                GraphicsUnit[GraphicsUnit["Inch"] = 4] = "Inch";
                GraphicsUnit[GraphicsUnit["Document"] = 5] = "Document";
                GraphicsUnit[GraphicsUnit["Millimeter"] = 6] = "Millimeter";
            })(Report.GraphicsUnit || (Report.GraphicsUnit = {}));
            var GraphicsUnit = Report.GraphicsUnit;
            (function (PaperKind) {
                PaperKind[PaperKind["Custom"] = 0] = "Custom";
                PaperKind[PaperKind["Letter"] = 1] = "Letter";
                PaperKind[PaperKind["LetterSmall"] = 2] = "LetterSmall";
                PaperKind[PaperKind["Tabloid"] = 3] = "Tabloid";
                PaperKind[PaperKind["Ledger"] = 4] = "Ledger";
                PaperKind[PaperKind["Legal"] = 5] = "Legal";
                PaperKind[PaperKind["Statement"] = 6] = "Statement";
                PaperKind[PaperKind["Executive"] = 7] = "Executive";
                PaperKind[PaperKind["A3"] = 8] = "A3";
                PaperKind[PaperKind["A4"] = 9] = "A4";
                PaperKind[PaperKind["A4Small"] = 10] = "A4Small";
                PaperKind[PaperKind["A5"] = 11] = "A5";
                PaperKind[PaperKind["B4"] = 12] = "B4";
                PaperKind[PaperKind["B5"] = 13] = "B5";
                PaperKind[PaperKind["Folio"] = 14] = "Folio";
                PaperKind[PaperKind["Quarto"] = 15] = "Quarto";
                PaperKind[PaperKind["Standard10x14"] = 16] = "Standard10x14";
                PaperKind[PaperKind["Standard11x17"] = 17] = "Standard11x17";
                PaperKind[PaperKind["Note"] = 18] = "Note";
                PaperKind[PaperKind["Number9Envelope"] = 19] = "Number9Envelope";
                PaperKind[PaperKind["Number10Envelope"] = 20] = "Number10Envelope";
                PaperKind[PaperKind["Number11Envelope"] = 21] = "Number11Envelope";
                PaperKind[PaperKind["Number12Envelope"] = 22] = "Number12Envelope";
                PaperKind[PaperKind["Number14Envelope"] = 23] = "Number14Envelope";
                PaperKind[PaperKind["CSheet"] = 24] = "CSheet";
                PaperKind[PaperKind["DSheet"] = 25] = "DSheet";
                PaperKind[PaperKind["ESheet"] = 26] = "ESheet";
                PaperKind[PaperKind["DLEnvelope"] = 27] = "DLEnvelope";
                PaperKind[PaperKind["C5Envelope"] = 28] = "C5Envelope";
                PaperKind[PaperKind["C3Envelope"] = 29] = "C3Envelope";
                PaperKind[PaperKind["C4Envelope"] = 30] = "C4Envelope";
                PaperKind[PaperKind["C6Envelope"] = 31] = "C6Envelope";
                PaperKind[PaperKind["C65Envelope"] = 32] = "C65Envelope";
                PaperKind[PaperKind["B4Envelope"] = 33] = "B4Envelope";
                PaperKind[PaperKind["B5Envelope"] = 34] = "B5Envelope";
                PaperKind[PaperKind["B6Envelope"] = 35] = "B6Envelope";
                PaperKind[PaperKind["ItalyEnvelope"] = 36] = "ItalyEnvelope";
                PaperKind[PaperKind["MonarchEnvelope"] = 37] = "MonarchEnvelope";
                PaperKind[PaperKind["PersonalEnvelope"] = 38] = "PersonalEnvelope";
                PaperKind[PaperKind["USStandardFanfold"] = 39] = "USStandardFanfold";
                PaperKind[PaperKind["GermanStandardFanfold"] = 40] = "GermanStandardFanfold";
                PaperKind[PaperKind["GermanLegalFanfold"] = 41] = "GermanLegalFanfold";
                PaperKind[PaperKind["IsoB4"] = 42] = "IsoB4";
                PaperKind[PaperKind["JapanesePostcard"] = 43] = "JapanesePostcard";
                PaperKind[PaperKind["Standard9x11"] = 44] = "Standard9x11";
                PaperKind[PaperKind["Standard10x11"] = 45] = "Standard10x11";
                PaperKind[PaperKind["Standard15x11"] = 46] = "Standard15x11";
                PaperKind[PaperKind["InviteEnvelope"] = 47] = "InviteEnvelope";
                PaperKind[PaperKind["LetterExtra"] = 50] = "LetterExtra";
                PaperKind[PaperKind["LegalExtra"] = 51] = "LegalExtra";
                PaperKind[PaperKind["TabloidExtra"] = 52] = "TabloidExtra";
                PaperKind[PaperKind["A4Extra"] = 53] = "A4Extra";
                PaperKind[PaperKind["LetterTransverse"] = 54] = "LetterTransverse";
                PaperKind[PaperKind["A4Transverse"] = 55] = "A4Transverse";
                PaperKind[PaperKind["LetterExtraTransverse"] = 56] = "LetterExtraTransverse";
                PaperKind[PaperKind["APlus"] = 57] = "APlus";
                PaperKind[PaperKind["BPlus"] = 58] = "BPlus";
                PaperKind[PaperKind["LetterPlus"] = 59] = "LetterPlus";
                PaperKind[PaperKind["A4Plus"] = 60] = "A4Plus";
                PaperKind[PaperKind["A5Transverse"] = 61] = "A5Transverse";
                PaperKind[PaperKind["B5Transverse"] = 62] = "B5Transverse";
                PaperKind[PaperKind["A3Extra"] = 63] = "A3Extra";
                PaperKind[PaperKind["A5Extra"] = 64] = "A5Extra";
                PaperKind[PaperKind["B5Extra"] = 65] = "B5Extra";
                PaperKind[PaperKind["A2"] = 66] = "A2";
                PaperKind[PaperKind["A3Transverse"] = 67] = "A3Transverse";
                PaperKind[PaperKind["A3ExtraTransverse"] = 68] = "A3ExtraTransverse";
                PaperKind[PaperKind["JapaneseDoublePostcard"] = 69] = "JapaneseDoublePostcard";
                PaperKind[PaperKind["A6"] = 70] = "A6";
                PaperKind[PaperKind["JapaneseEnvelopeKakuNumber2"] = 71] = "JapaneseEnvelopeKakuNumber2";
                PaperKind[PaperKind["JapaneseEnvelopeKakuNumber3"] = 72] = "JapaneseEnvelopeKakuNumber3";
                PaperKind[PaperKind["JapaneseEnvelopeChouNumber3"] = 73] = "JapaneseEnvelopeChouNumber3";
                PaperKind[PaperKind["JapaneseEnvelopeChouNumber4"] = 74] = "JapaneseEnvelopeChouNumber4";
                PaperKind[PaperKind["LetterRotated"] = 75] = "LetterRotated";
                PaperKind[PaperKind["A3Rotated"] = 76] = "A3Rotated";
                PaperKind[PaperKind["A4Rotated"] = 77] = "A4Rotated";
                PaperKind[PaperKind["A5Rotated"] = 78] = "A5Rotated";
                PaperKind[PaperKind["B4JisRotated"] = 79] = "B4JisRotated";
                PaperKind[PaperKind["B5JisRotated"] = 80] = "B5JisRotated";
                PaperKind[PaperKind["JapanesePostcardRotated"] = 81] = "JapanesePostcardRotated";
                PaperKind[PaperKind["JapaneseDoublePostcardRotated"] = 82] = "JapaneseDoublePostcardRotated";
                PaperKind[PaperKind["A6Rotated"] = 83] = "A6Rotated";
                PaperKind[PaperKind["JapaneseEnvelopeKakuNumber2Rotated"] = 84] = "JapaneseEnvelopeKakuNumber2Rotated";
                PaperKind[PaperKind["JapaneseEnvelopeKakuNumber3Rotated"] = 85] = "JapaneseEnvelopeKakuNumber3Rotated";
                PaperKind[PaperKind["JapaneseEnvelopeChouNumber3Rotated"] = 86] = "JapaneseEnvelopeChouNumber3Rotated";
                PaperKind[PaperKind["JapaneseEnvelopeChouNumber4Rotated"] = 87] = "JapaneseEnvelopeChouNumber4Rotated";
                PaperKind[PaperKind["B6Jis"] = 88] = "B6Jis";
                PaperKind[PaperKind["B6JisRotated"] = 89] = "B6JisRotated";
                PaperKind[PaperKind["Standard12x11"] = 90] = "Standard12x11";
                PaperKind[PaperKind["JapaneseEnvelopeYouNumber4"] = 91] = "JapaneseEnvelopeYouNumber4";
                PaperKind[PaperKind["JapaneseEnvelopeYouNumber4Rotated"] = 92] = "JapaneseEnvelopeYouNumber4Rotated";
                PaperKind[PaperKind["Prc16K"] = 93] = "Prc16K";
                PaperKind[PaperKind["Prc32K"] = 94] = "Prc32K";
                PaperKind[PaperKind["Prc32KBig"] = 95] = "Prc32KBig";
                PaperKind[PaperKind["PrcEnvelopeNumber1"] = 96] = "PrcEnvelopeNumber1";
                PaperKind[PaperKind["PrcEnvelopeNumber2"] = 97] = "PrcEnvelopeNumber2";
                PaperKind[PaperKind["PrcEnvelopeNumber3"] = 98] = "PrcEnvelopeNumber3";
                PaperKind[PaperKind["PrcEnvelopeNumber4"] = 99] = "PrcEnvelopeNumber4";
                PaperKind[PaperKind["PrcEnvelopeNumber5"] = 100] = "PrcEnvelopeNumber5";
                PaperKind[PaperKind["PrcEnvelopeNumber6"] = 101] = "PrcEnvelopeNumber6";
                PaperKind[PaperKind["PrcEnvelopeNumber7"] = 102] = "PrcEnvelopeNumber7";
                PaperKind[PaperKind["PrcEnvelopeNumber8"] = 103] = "PrcEnvelopeNumber8";
                PaperKind[PaperKind["PrcEnvelopeNumber9"] = 104] = "PrcEnvelopeNumber9";
                PaperKind[PaperKind["PrcEnvelopeNumber10"] = 105] = "PrcEnvelopeNumber10";
                PaperKind[PaperKind["Prc16KRotated"] = 106] = "Prc16KRotated";
                PaperKind[PaperKind["Prc32KRotated"] = 107] = "Prc32KRotated";
                PaperKind[PaperKind["Prc32KBigRotated"] = 108] = "Prc32KBigRotated";
                PaperKind[PaperKind["PrcEnvelopeNumber1Rotated"] = 109] = "PrcEnvelopeNumber1Rotated";
                PaperKind[PaperKind["PrcEnvelopeNumber2Rotated"] = 110] = "PrcEnvelopeNumber2Rotated";
                PaperKind[PaperKind["PrcEnvelopeNumber3Rotated"] = 111] = "PrcEnvelopeNumber3Rotated";
                PaperKind[PaperKind["PrcEnvelopeNumber4Rotated"] = 112] = "PrcEnvelopeNumber4Rotated";
                PaperKind[PaperKind["PrcEnvelopeNumber5Rotated"] = 113] = "PrcEnvelopeNumber5Rotated";
                PaperKind[PaperKind["PrcEnvelopeNumber6Rotated"] = 114] = "PrcEnvelopeNumber6Rotated";
                PaperKind[PaperKind["PrcEnvelopeNumber7Rotated"] = 115] = "PrcEnvelopeNumber7Rotated";
                PaperKind[PaperKind["PrcEnvelopeNumber8Rotated"] = 116] = "PrcEnvelopeNumber8Rotated";
                PaperKind[PaperKind["PrcEnvelopeNumber9Rotated"] = 117] = "PrcEnvelopeNumber9Rotated";
                PaperKind[PaperKind["PrcEnvelopeNumber10Rotated"] = 118] = "PrcEnvelopeNumber10Rotated";
            })(Report.PaperKind || (Report.PaperKind = {}));
            var PaperKind = Report.PaperKind;
            var RequestReportModel = (function () {
                function RequestReportModel(reportWizardModel) {
                    if (reportWizardModel.reportType === DevExpress.Designer.Report.Wizard.ReportType.Label) {
                        this.CustomLabelInformation = {
                            Height: reportWizardModel.labelDetails.height,
                            HorizontalPitch: reportWizardModel.labelDetails.hPitch,
                            LeftMargin: reportWizardModel.labelDetails.leftMargin,
                            RightMargin: reportWizardModel.labelDetails.rightMargin,
                            PaperKindDataId: reportWizardModel.labelDetails.paperKindId,
                            TopMargin: reportWizardModel.labelDetails.topMargin,
                            BottomMargin: reportWizardModel.labelDetails.bottomMargin,
                            Unit: reportWizardModel.labelDetails.unit === GraphicsUnit.Inch ? DevExpress.Designer.Report.GraphicsUnit.Inch : DevExpress.Designer.Report.GraphicsUnit.Millimeter,
                            VerticalPitch: reportWizardModel.labelDetails.vPitch,
                            Width: reportWizardModel.labelDetails.width
                        };
                        this.LabelProductId = reportWizardModel.labelDetails.productId;
                        this.LabelProductDetailId = reportWizardModel.labelDetails.id;
                    }
                    else if (reportWizardModel.reportType === DevExpress.Designer.Report.Wizard.ReportType.Databound) {
                        this.AdjustFieldWidth = reportWizardModel.fitFieldsToPage;
                        if (reportWizardModel.fields().length) {
                            this.Columns = reportWizardModel.fields().map(function (value) { return value.name; });
                            this.ColumnInfo = reportWizardModel.fields().map(function (value) {
                                return {
                                    Name: value.name,
                                    DisplayName: value.displayName,
                                    TypeSpecifics: 0
                                };
                            });
                        }
                        else {
                            this.Columns = null;
                            this.ColumnInfo = null;
                        }
                        if (reportWizardModel.dataMember() !== null || reportWizardModel.dataMemberPath() !== null) {
                            this.DataMemberName = {
                                DisplayName: reportWizardModel.dataMember().displayName,
                                Name: reportWizardModel.dataMember().name,
                                DataMemberType: 0
                            };
                            if (reportWizardModel.dataMember().name) {
                                var index = reportWizardModel.dataMemberPath().indexOf('.');
                                this.DataMemberName.Name = index > 0 ? reportWizardModel.dataMemberPath().substr(index + 1) : reportWizardModel.dataMemberPath();
                            }
                        }
                        else {
                            this.DataMemberName = null;
                        }
                        this.DataSourceName = null;
                        this.GroupingLevels = reportWizardModel.groups;
                        this.IgnoreNullValuesForSummary = reportWizardModel.ignoreNullValuesForSummary;
                        this.Layout = reportWizardModel.layout;
                        this.Portrait = reportWizardModel.portrait;
                        this.ReportStyleId = reportWizardModel.style;
                        this.ReportTitle = reportWizardModel.reportTitle;
                        this.SummaryOptions = (reportWizardModel.summaryOptions || []).map(function (item) {
                            return {
                                ColumnName: item.columnName,
                                Flags: item.flags
                            };
                        });
                        if (reportWizardModel.pageSetup) {
                            this.PaperKind = PaperKind[reportWizardModel.pageSetup.paperKind];
                            this.PaperSize = {
                                width: reportWizardModel.pageSetup.width,
                                height: reportWizardModel.pageSetup.height
                            };
                            this.Margins = {
                                Left: reportWizardModel.pageSetup.marginLeft,
                                Right: reportWizardModel.pageSetup.marginRight,
                                Top: reportWizardModel.pageSetup.marginTop,
                                Bottom: reportWizardModel.pageSetup.marginBottom
                            };
                            this.Unit = reportWizardModel.pageSetup.unit;
                        }
                    }
                    this.ReportType = reportWizardModel.reportType;
                    this.UseMasterDetailBuilder = reportWizardModel.useMasterDetailBuilder;
                }
                return RequestReportModel;
            })();
            Report.RequestReportModel = RequestReportModel;
            var RequestXtraReportModel = (function (_super) {
                __extends(RequestXtraReportModel, _super);
                function RequestXtraReportModel(reportWizardModel) {
                    var _this = this;
                    _super.call(this, reportWizardModel);
                    this._masterRelationMap = function (query, path) {
                        var newInfo = {
                            Name: query.name,
                            DisplayName: query.displayName,
                            CheckedState: query.checked,
                            Fields: query.fields.map(function (field) {
                                return {
                                    Name: field.name,
                                    DisplayName: field.displayName,
                                    Checked: field.checked,
                                };
                            }),
                            Relations: query.relations.map(function (relation) { return _this._masterRelationMap(relation, relation.path); })
                        };
                        _this._collectionByPath[path] = newInfo;
                        return newInfo;
                    };
                    this._collectionByPath = {};
                    this.DataSourceName = reportWizardModel.dataSource && reportWizardModel.dataSource.name;
                    this.MasterDetailInfo = reportWizardModel.masterDetailInfoCollection().map(function (info) {
                        return _this._masterRelationMap(info, info.path);
                    });
                    this.MasterDetailGroupsInfo = $.map(reportWizardModel.masterDetailGroups, function (array, key) { return ({
                        "Key": _this._collectionByPath[key],
                        "Value": (array || []).map(function (item) { return ((item || [])); })
                    }); });
                    this.MasterDetailSummariesInfo = $.map(reportWizardModel.masterDetailSummariesInfo, function (value, key) { return ({
                        "Key": _this._collectionByPath[key],
                        "Value": (value || []).map(function (item) {
                            return {
                                Column: {
                                    Name: item.column.name,
                                    DisplayName: item.column.displayName
                                },
                                SummaryFunctions: item.summaryFunctions
                            };
                        })
                    }); });
                }
                return RequestXtraReportModel;
            })(RequestReportModel);
            Report.RequestXtraReportModel = RequestXtraReportModel;
            function createReportWizard(dsHelper, data, navigation, fieldLists, isReportLoading, isReportDirty, state, callBacks, connectionStrings, model) {
                var dataSources = ko.pureComputed(function () { return data.isReportServer ? dsHelper().availableDataSources : dsHelper().mergedDataSources(); });
                var fieldsCallback = function (request, dataSource) {
                    Report.patchRequest(request, [dataSource], state());
                    return fieldLists(request);
                };
                var reportWizardCallbacks = $.extend({}, callBacks, {
                    fieldListsCallback: fieldsCallback,
                    createSqlDataSourceInfo: Report.SqlDataSourceEditor.createSqlDataSourceInfo,
                    finishCallback: function (reportWizardModel) {
                        isReportLoading(true);
                        var deferred = $.Deferred();
                        return Report.ReportWizardService.generateReportFromWizardModel(reportWizardModel, state())
                            .done(function (result) {
                            navigation.currentTab().undoEngine.start();
                            isReportDirty(true);
                            var newReport = createReportViewModel(result, navigation.currentTab().context().report);
                            navigation.currentTab().changeContext(newReport, "");
                            navigation.currentTab.notifySubscribers();
                            navigation.currentTab().undoEngine.end();
                            isReportLoading(false);
                            deferred.resolve(true);
                        })
                            .fail(function () { deferred.reject(); });
                    }
                });
                return new Report.Wizard.ReportWizard(dataSources, reportWizardCallbacks, connectionStrings, data.isReportServer, data.disableCustomSql, data.useMasterDetailWizard, model);
            }
            Report.createReportWizard = createReportWizard;
            function createReportViewModel(newReportInfo, oldReport) {
                var reportModel = JSON.parse(newReportInfo.reportModel);
                var report = new Report.ReportViewModel(reportModel);
                if (oldReport) {
                    var nextRef = Math.max.apply(Math, report.objectStorage().map(function (data) { return parseInt(data["_model"]["@Ref"]); })) + 1;
                    oldReport.dsHelperProvider().usedDataSources()
                        .filter(function (dsInfo) { return !!dsInfo.data && !newReportInfo.dataSourceRefs.some(function (ref) { return ref.name === dsInfo.name; }); })
                        .forEach(function (dsInfo) {
                        dsInfo.data["_model"]["@Ref"] = nextRef.toString();
                        newReportInfo.dataSourceRefs.push({
                            name: dsInfo.name, ref: nextRef.toString(), isSqlDataSource: dsInfo.isSqlDataSource, dataSerializer: dsInfo.dataSerializer
                        });
                        report.objectStorage.push(dsInfo.data);
                        nextRef++;
                    });
                }
                report.dataSourceRefs = newReportInfo.dataSourceRefs;
                return report;
            }
            Report.createReportViewModel = createReportViewModel;
            var orig_optionValuesEqual = DevExpress.ui.dxSelectBox.prototype["_optionValuesEqual"];
            DevExpress.ui.dxSelectBox["redefine"]({
                _optionValuesEqual: function (optionName, oldValue, newValue) {
                    if (optionName === "value" && (oldValue instanceof Designer.ElementViewModel) && (newValue instanceof Designer.ElementViewModel)) {
                        return oldValue === newValue;
                    }
                    return orig_optionValuesEqual.apply(this, arguments);
                }
            });
            var ReportElementActions = (function (_super) {
                __extends(ReportElementActions, _super);
                function ReportElementActions(surfaceContext, selection) {
                    _super.call(this, surfaceContext, selection);
                }
                ReportElementActions.prototype.getActions = function (context) {
                    if (context && !(context instanceof Report.ReportViewModel || context instanceof Report.BandViewModel) && (context instanceof Report.ReportElementViewModel || context.controlType === "multiselect")) {
                        return _super.prototype.getActions.call(this, context);
                    }
                    return [];
                };
                return ReportElementActions;
            })(Report.ElementActions);
            Report.ReportElementActions = ReportElementActions;
            function createReportDesigner(element, data, callbacks, localization, knownEnums, designerHandlerUri, previewHandlerUri, rtl, applyBindings) {
                if (applyBindings === void 0) { applyBindings = true; }
                var selection = new Designer.SurfaceSelection();
                var initializer = new Report.ReportDesignerInitializer({
                    allowMDI: data.allowMDI,
                    reportStorageWebIsRegister: data.reportStorageWebIsRegister,
                    callbacks: callbacks,
                    rtl: rtl,
                    selection: selection,
                    availableDataSources: data.availableDataSources,
                    knownEnums: knownEnums,
                    reportUrl: data.reportUrl,
                    state: data.state
                });
                return initializer
                    .applyUri({ reportDesignerUri: designerHandlerUri, previewUri: previewHandlerUri })
                    .initBindingMode(data.dataBindingMode, data.convertBindingsToExpressions)
                    .addLocalization(localization)
                    .runCustomizeLocalizationEvent()
                    .subscribeIncomeReport(data.report, data.reportUrl, data.dataSourceRefs)
                    .addFlagsAndInitProperties()
                    .addReportUrls(data.subreports)
                    .addPreview({
                    callbacks: callbacks.preview,
                    element: element,
                    handlerUri: previewHandlerUri,
                    localization: localization,
                    parametersInfo: { knownEnums: knownEnums },
                    rtl: rtl
                })
                    .initializeCalculatedFieldsSource()
                    .initializeFieldListItemsExtenders()
                    .initializeParameters()
                    .initializeFieldListProvider()
                    .initializeReportItemsProvider()
                    .initializeDataBindingsProvider()
                    .initializeDisplayNameProvider()
                    .initializeExpressionDisplayNameProvider()
                    .initializeDataSourceHelper()
                    .registerControls(data.dataBindingMode, initializer.buildingModel.reportItemsProvider)
                    .runCustomizeToolboxEvent()
                    .addSelection()
                    .addToolboxItems(function () { return Designer.getToolboxItems(Report.controlsFactory.controlsMap); })
                    .addControlProperties(Object.keys(Report.groups).reduce(function (editors, groupName) {
                    if (groupName !== "Styles")
                        editors = editors.concat(Report.groups[groupName].info);
                    else
                        editors.push(Report.stylesObj);
                    return editors;
                }, []), Report.groups)
                    .addContextActions()
                    .addPopularProperties(Report.controlsFactory)
                    .addControlsHelper()
                    .addProcessErrorCallback()
                    .initCultureInfo(data.cultureInfoList)
                    .updateFont(data.cultureInfoList && data.cultureInfoList.fontSet)
                    .initFormatStringPatterns(data.formatStringData)
                    .onContextChanged(data.subreports)
                    .addMenu(function (settings) {
                    settings.appMenuVisible = ko.observable(false);
                    settings.toggleAppMenu = function () {
                        settings.appMenuVisible(!settings.appMenuVisible());
                    };
                    settings.getMenuPopupContainer = function (el) { return $(el).closest(".dxrd-menu-button").prev(".dxrd-menu-container"); };
                    settings.getMenuPopupTarget = function (el) { return $(el).closest(".dxrd-menu-button").find(".dxrd-menu-place"); };
                })
                    .addInlineTextEdit()
                    .addReportDialogs(function (settings) {
                    var reportUrls = initializer.buildingModel.reportUrls;
                    settings.createOpenReportDialog(reportUrls, initializer.buildingModel.navigateByReports);
                    settings.createSaveReportDialog(reportUrls);
                    settings.createSaveReportDialogLight();
                })
                    .addWizards(ko.observableArray(data.connectionStrings), function (settings) {
                    var model = initializer.buildingModel;
                    settings.createMultipleQueriesWizardCallbacks(initializer.buildingModel.dataBindingsProvider);
                    settings.createSQLDataSourceWizard(data.disableCustomSql, initializer.buildingModel.dataBindingsProvider);
                    settings.createSqlDataSourceEditor({
                        dataSourceHelper: model.dataSourceHelper,
                        fieldListProvider: model.fieldListProvider,
                        model: model.model,
                        sqlDataSourceWizard: settings.sqlDataSourceWizard,
                        undoEngine: model.undoEngine
                    });
                    settings.createMultiQueryDataSourceWizard(data.disableCustomSql);
                    settings.createReportWizard({
                        data: data,
                        dataSourceHelper: model.dataSourceHelper,
                        fieldListProvider: model.fieldListProvider,
                        isDirty: model.isDirty,
                        isLoading: model.isLoading,
                        model: model.model,
                        multipleQueriesWizardCallbacks: settings.multipleQueriesWizardCallbacks,
                        navigation: model.navigateByReports,
                        sqlDataSourceWizard: settings.sqlDataSourceWizard,
                        state: function () { return initializer.reportContext() && initializer.reportContext().state() || initializer.buildingModel.state; },
                        undoEngine: model.undoEngine
                    });
                })
                    .initializeFieldListActionProviders()
                    .addTabPanel()
                    .addDefaultAddons()
                    .tryAddSqlDataSourceEditorAddon()
                    .tryAddScriptEditorAddon(data.isScriptsDisabled)
                    .addActionLists()
                    .addStylesProjection()
                    .addFormattingRulesProjection()
                    .addReportExplorerProvider()
                    .addControlsProjection()
                    .addBandsProjection()
                    .addParts()
                    .addStaticContext()
                    .tryApplyBindings(applyBindings, element)
                    .initializeUIEffects(applyBindings, element)
                    .addOpenReportMethod()
                    .getModel();
            }
            Report.createReportDesigner = createReportDesigner;
            function createReportDesignerFromModel(model, element, callbacks, applyBindings) {
                if (!model)
                    return;
                Report.limitation = !!model.limitation;
                Designer.Chart["limitation"] = Report.limitation;
                if (model.dataSources && model.dataSourcesData) {
                    for (var i = 0; i < model.dataSources.length; i++) {
                        var dataSource = model.dataSources[i];
                        dataSource.data = model.dataSourcesData[i];
                    }
                }
                if (!model.reportModel) {
                    model.reportModel = Report.SubreportViewModel.defaultReport;
                }
                var getRootKeyName = function (obj) {
                    for (var prop in obj) {
                        if (obj.hasOwnProperty(prop)) {
                            return prop;
                        }
                    }
                    return null;
                };
                DevExpress.Designer.initGlobalize(model);
                model.reportModelRootName = getRootKeyName(model.reportModel);
                var dataReport = {};
                dataReport[model.reportModelRootName] = {
                    "@ControlType": model.reportModel[model.reportModelRootName]["@ControlType"]
                };
                var formatStringData = { customPatterns: {}, standardPatterns: {} };
                if (model.formatStringData) {
                    model.formatStringData.customPatterns.forEach(function (item) {
                        formatStringData.customPatterns[item.Key] = item.Value;
                    });
                    model.formatStringData.standardPatterns.forEach(function (item) {
                        formatStringData.standardPatterns[item.Key] = item.Value;
                    });
                }
                var data = {
                    report: ko.observable(dataReport),
                    reportUrl: ko.observable(model.reportUrl),
                    availableDataSources: model.dataSources,
                    allowMDI: model.allowMDI,
                    dataSourceRefs: model.dataSourceRefs,
                    dataBindingMode: model.dataBindingMode || Report.DataBindingMode.Expressions,
                    convertBindingsToExpressions: model.convertBindingsToExpressions || Report.PromptBoolean.Prompt,
                    subreports: model.subreports,
                    cultureInfoList: model.cultureInfoList,
                    formatStringData: formatStringData,
                    state: {
                        reportExtensions: model.reportExtensions
                    },
                    isReportServer: model.internalSettings && model.internalSettings.isReportServer,
                    connectionStrings: model.wizardConnections,
                    disableCustomSql: model.disableCustomSql,
                    useMasterDetailWizard: model.wizardSettings && model.wizardSettings.useMasterDetailWizard,
                    isScriptsDisabled: !model.scriptsEnabled,
                    reportStorageWebIsRegister: model.reportStorageWebIsRegister
                };
                if (model.queryBuilderHandlerUri)
                    DevExpress.Designer.QueryBuilder.HandlerUri = model.queryBuilderHandlerUri;
                var designerModel = createReportDesigner(element, data, callbacks || {}, model.localization, model.knownEnums, model.handlerUri, model.viewerHandlerUri, model.rtl, applyBindings);
                setTimeout(function () {
                    data.report(model.reportModel);
                    designerModel.isLoading(false);
                }, 1);
                return designerModel;
            }
            Report.createReportDesignerFromModel = createReportDesignerFromModel;
            function registerControls(dataBindingMode, fieldListProvider) {
                if (dataBindingMode === void 0) { dataBindingMode = Report.DataBindingMode.Expressions; }
                Report.controlsFactory = new Report.ControlsFactory(dataBindingMode, fieldListProvider);
                Report.controlsFactory.registerControl("Unknown", {
                    info: Report.unknownSerializationsInfo,
                    type: Report.ControlViewModel,
                    defaultVal: {
                        "@SizeF": "100,23"
                    },
                    nonToolboxItem: true,
                    surfaceType: Report.ControlSurface
                });
                Report.controlsFactory.registerControl("XRLabel", {
                    info: Report.labelSerializationsInfo,
                    toolboxIndex: 0,
                    defaultVal: {
                        "@Padding": "2,2,0,0,100",
                        "@Multiline": "true",
                        "@SizeF": "100,23"
                    },
                    defaultBindingName: "Text",
                    surfaceType: Report.TextControlSurfaceBase,
                    type: Report.ControlViewModel,
                    popularProperties: Report.popularPropertiesLabel,
                    displayName: Designer.getLocalization("Label", "DevExpress.XtraReports.UI.XRLabel")
                });
                Report.controlsFactory.registerControl("XRCheckBox", {
                    info: Report.checkboxSerializationsInfo,
                    toolboxIndex: 1,
                    type: Report.CheckBoxViewModel,
                    surfaceType: Report.XRCheckboxSurface,
                    defaultVal: {
                        "@SizeF": "100,23",
                        "@Padding": "2,2,0,0,100"
                    },
                    defaultBindingName: "CheckState",
                    popularProperties: Report.popularPropertiesCheckBox,
                    displayName: Designer.getLocalization("Check Box", "DevExpress.XtraReports.UI.XRCheckBox")
                });
                if (!Report.limitation) {
                    Report.controlsFactory.registerControl("XRRichText", {
                        info: Report.richTextSerializationsInfo,
                        toolboxIndex: 2,
                        defaultVal: {
                            "@SizeF": "100,23",
                            "@Padding": "2,2,0,0,100"
                        },
                        surfaceType: Report.XRRichSurface,
                        type: Report.XRRichViewModel,
                        defaultBindingName: "Rtf",
                        popularProperties: Report.popularPropertiesRichText,
                        displayName: Designer.getLocalization("Rich Text", "DevExpress.XtraReports.UI.XRRichText")
                    });
                }
                Report.controlsFactory.registerControl("XRPictureBox", {
                    info: Report.pictureBoxSerializationsInfo,
                    toolboxIndex: 3,
                    defaultVal: {
                        "@SizeF": "100,100",
                    },
                    type: Report.XRPictureBoxViewModel,
                    surfaceType: Report.PictureBoxSurface,
                    defaultBindingName: "ImageSource",
                    popularProperties: Report.popularPropertiesPicture,
                    displayName: Designer.getLocalization("Picture Box", "DevExpress.XtraReports.UI.XRPictureBox")
                });
                Report.controlsFactory.registerControl("XRPanel", {
                    info: Report.panelSerializationsInfo,
                    toolboxIndex: 4,
                    defaultVal: {
                        "@SizeF": "300,75"
                    },
                    surfaceType: Report.ControlSurface,
                    type: Report.ControlViewModel,
                    isContainer: true,
                    displayName: Designer.getLocalization("Panel", "DevExpress.XtraReports.UI.XRPanel")
                });
                Report.controlsFactory.registerControl("XRTable", {
                    info: Report.tableSerializationsInfo,
                    type: Report.TableControlViewModel,
                    toolboxIndex: 5,
                    defaultVal: {
                        "@SizeF": "300,25",
                        "Rows": {
                            "Item1": {
                                "@ControlType": "XRTableRow",
                                "@Weight": "1",
                                "Cells": {
                                    "Item1": {
                                        "@ControlType": "XRTableCell",
                                        "@Weight": "1",
                                        "@Multiline": "true",
                                        "@Padding": "2,2,0,0,100"
                                    },
                                    "Item2": {
                                        "@ControlType": "XRTableCell",
                                        "@Weight": "1",
                                        "@Multiline": "true",
                                        "@Padding": "2,2,0,0,100"
                                    },
                                    "Item3": {
                                        "@ControlType": "XRTableCell",
                                        "@Weight": "1",
                                        "@Multiline": "true",
                                        "@Padding": "2,2,0,0,100"
                                    }
                                }
                            }
                        }
                    },
                    surfaceType: Report.TableSurface,
                    popularProperties: Report.popularPropertiesTable,
                    isContainer: true,
                    isPasteDeny: true,
                    canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType !== "XRTableRow"; },
                    displayName: Designer.getLocalization("Table", "DevExpress.XtraReports.UI.XRTable")
                });
                Report.controlsFactory.registerControl("XRCharacterComb", {
                    info: Report.characterCombSerializationsInfo,
                    toolboxIndex: 6,
                    defaultVal: {
                        "@SizeF": "200,80",
                        "@Multiline": "true"
                    },
                    defaultBindingName: "Text",
                    surfaceType: Report.XRCharacterCombSurface,
                    type: Report.XRCharacterComb,
                    popularProperties: Report.popularPropertiesLabel,
                    displayName: Designer.getLocalization("Character Comb", "DevExpress.XtraReports.UI.XRCharacterComb")
                });
                Report.controlsFactory.registerControl("XRLine", {
                    info: Report.lineSerializationsInfo,
                    toolboxIndex: 7,
                    type: Report.ControlViewModel,
                    surfaceType: Report.XRLineSurface,
                    defaultVal: {
                        "@SizeF": "100,23",
                    },
                    popularProperties: Report.popularPropertiesLine,
                    displayName: Designer.getLocalization("Line", "DevExpress.XtraReports.UI.XRLine")
                });
                Report.controlsFactory.registerControl("XRShape", {
                    info: Report.shapeSerializationsInfo,
                    toolboxIndex: 8,
                    defaultVal: {
                        "@SizeF": "100,23"
                    },
                    defaultBindingName: "Tag",
                    type: Report.ShapeViewModel,
                    surfaceType: Report.ShapeControlSurface,
                    popularProperties: Report.popularPropertiesShape,
                    displayName: Designer.getLocalization("Shape", "DevExpress.XtraReports.UI.XRShape")
                });
                Report.controlsFactory.registerControl("XRBarCode", {
                    info: Report.barcodeSerializationsInfo,
                    toolboxIndex: 9,
                    defaultVal: {
                        "@SizeF": "200,75",
                        "@Padding": "10,10,0,0,100",
                        "Symbology": {
                            "@Name": "Code128"
                        },
                        "@Text": ""
                    },
                    defaultBindingName: "Text",
                    surfaceType: Report.XRBarcodeSurface,
                    type: Report.XRBarCodeViewModel,
                    popularProperties: Report.popularPropertiesBarCode,
                    displayName: Designer.getLocalization("Bar Code", "DevExpress.XtraReports.UI.XRBarCode")
                });
                Report.controlsFactory.registerControl("XRZipCode", {
                    info: Report.zipCodeSerializationInfo,
                    type: Report.ControlViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.ZipCodeSurface,
                    toolboxIndex: 10,
                    defaultVal: {
                        "@SizeF": "100,23"
                    },
                    popularProperties: Report.popularPropertiesZipCode,
                    displayName: Designer.getLocalization("Zip Code", "DevExpress.XtraReports.UI.XRZipCode")
                });
                Report.controlsFactory.registerControl("XRChart", {
                    info: Report.xrChartSerializationInfo,
                    toolboxIndex: 11,
                    defaultVal: {
                        "@SizeF": "400,300",
                        "Chart": {
                            "Diagram": {
                                "@TypeNameSerializable": "XYDiagram",
                                "AxisY": {
                                    "@VisibleInPanesSerializable": "-1"
                                },
                                "AxisX": {
                                    "@VisibleInPanesSerializable": "-1"
                                }
                            },
                            "DataContainer": {}
                        }
                    },
                    defaultBindingName: "Tag",
                    type: Report.XRChartViewModel,
                    surfaceType: Report.ChartSurface,
                    popularProperties: ["name"],
                    displayName: Designer.getLocalization("Chart", "DevExpress.XtraReports.UI.XRChart")
                });
                Report.controlsFactory.registerControl("XRGauge", {
                    info: Report.xrGaugeSerializationInfo,
                    surfaceType: Report.TodoControlSurface,
                    type: Report.XRGaugeViewModel,
                    toolboxIndex: 12,
                    defaultVal: {
                        "@SizeF": "220,120"
                    },
                    defaultBindingName: "Tag",
                    popularProperties: Report.popularPropertiesGauge,
                    displayName: Designer.getLocalization("Gauge", "DevExpress.XtraReports.UI.XRGauge")
                });
                Report.controlsFactory.registerControl("XRSparkline", {
                    info: Report.sparklineSerializationsInfo,
                    toolboxIndex: 13,
                    defaultVal: {
                        "@SizeF": "150,80",
                        "View": {
                            "@Type": "Line"
                        },
                    },
                    surfaceType: Report.SparkLineSurface,
                    defaultBindingName: "Tag",
                    type: Report.XRSparklineViewModel,
                    popularProperties: Report.popularPropertiesSparkline,
                    displayName: Designer.getLocalization("Sparkline", "DevExpress.XtraReports.UI.XRSparkline")
                });
                Report.controlsFactory.registerControl("XRPivotGrid", {
                    info: Report.pivotGridSerializationsInfo,
                    toolboxIndex: 14,
                    defaultVal: {
                        "@ControlType": "XRPivotGrid",
                        "@SizeF": "250,120",
                        "OptionsChartDataSource": {},
                        "Prefilter": {},
                        "OptionsPrint": {
                            "@FilterSeparatorBarPadding": "3",
                            "@UsePrintAppearance": "true",
                            "@PrintFilterHeaders": "False"
                        },
                        "OptionsView": {}
                    },
                    defaultBindingName: "Tag",
                    type: Report.XRPivotGridViewModel,
                    surfaceType: Report.PivotGridSurface,
                    popularProperties: ["dataSource", "dataMember"],
                    displayName: Designer.getLocalization("Pivot Grid", "DevExpress.XtraReports.UI.XRPivotGrid")
                });
                Report.controlsFactory.registerControl("XRSubreport", {
                    info: Report.subreportSerializationsInfo,
                    toolboxIndex: 15,
                    defaultVal: {
                        "@SizeF": "100,23",
                        "ReportSource": Report.SubreportViewModel.defaultReport
                    },
                    surfaceType: Report.SubreportSurface,
                    type: Report.XRSubreportViewModel,
                    popularProperties: ["name", "reportSourceUrl"],
                    displayName: Designer.getLocalization("Sub-Report", "DevExpress.XtraReports.UI.XRSubreport")
                });
                Report.controlsFactory.registerControl("XRTableOfContents", {
                    toolboxIndex: 16,
                    info: Report.tocSerializationsInfo,
                    surfaceType: Report.TableOfContentsSurface,
                    type: Report.TableOfContentsViewModel,
                    defaultVal: {
                        "@ControlType": "XRTableOfContents",
                        "LevelTitle": {
                            "@Text": "Title",
                            "@Height": "23",
                            "@Padding": "0,0,0,0,100"
                        },
                        "LevelDefault": {
                            "@Height": "23",
                            "@Padding": "0,0,0,0,100"
                        }
                    },
                    canDrop: function (dropTarget, dragFrom) {
                        var bandModel = Report.ControlViewModel.getNearestBand(dropTarget.getControlModel());
                        if (!bandModel)
                            return false;
                        if (dragFrom) {
                            if (Report.isHeaderOrFooterBandType(bandModel)) {
                                var bandToc = Designer.findFirstItemMatchesCondition(bandModel.controls(), function (item) { return item.controlType === "XRTableOfContents"; });
                                if (!bandToc || bandToc === dragFrom)
                                    return true;
                            }
                            return false;
                        }
                        var reportModel = bandModel.parentModel();
                        return !Report.bandContainsToc(reportModel, "ReportHeaderBand") || !Report.bandContainsToc(reportModel, "ReportFooterBand");
                    },
                    displayName: Designer.getLocalization("Table Of Contents", "DevExpress.XtraReports.UI.XRTableOfContents")
                });
                Report.controlsFactory.registerControl("XRPageInfo", {
                    info: Report.pageInfoSerializationsInfo,
                    type: Report.XRPageInfoViewModel,
                    surfaceType: Report.XRPageInfoSurface,
                    toolboxIndex: 17,
                    defaultVal: {
                        "@SizeF": "100,23",
                        "@Padding": "2,2,0,0,100"
                    },
                    popularProperties: Report.popularPropertiesPageInfo,
                    displayName: Designer.getLocalization("Page Info", "DevExpress.XtraReports.UI.XRPageInfo")
                });
                Report.controlsFactory.registerControl("XRPageBreak", {
                    info: Report.pageBreakSerializationsInfo,
                    type: Report.ControlViewModel,
                    surfaceType: Report.XRPageBreakSurface,
                    toolboxIndex: 18,
                    defaultVal: {
                        "@SizeF": "30,2"
                    },
                    displayName: Designer.getLocalization("Page Break", "DevExpress.XtraReports.UI.XRPageBreak")
                });
                Report.controlsFactory.registerControl("XRCrossBandLine", {
                    info: Report.crossBandLineControlSerializationsInfo,
                    type: Report.CrossBandControlViewModel,
                    toolboxIndex: 19,
                    defaultVal: {
                        "@WidthF": "9.38",
                        "@StartPointFloat": "0,0",
                        "@EndPointFloat": "0,50"
                    },
                    size: "9.38, 50",
                    surfaceType: Report.CrossBandSurface,
                    popularProperties: Report.popularPropertiesCrossLine,
                    displayName: Designer.getLocalization("Cross-band Line", "DevExpress.XtraReports.UI.XRCrossBandLine")
                });
                Report.controlsFactory.registerControl("XRCrossBandBox", {
                    info: Report.crossBandBoxControlSerializationsInfo,
                    type: Report.CrossBandControlViewModel,
                    toolboxIndex: 20,
                    defaultVal: {
                        "@WidthF": "50",
                        "@StartPointFloat": "0,0",
                        "@EndPointFloat": "0,50"
                    },
                    size: "50,50",
                    surfaceType: Report.CrossBandSurface,
                    displayName: Designer.getLocalization("Cross-band Box", "DevExpress.XtraReports.UI.XRCrossBandBox")
                });
                Report.controlsFactory.registerControl("DevExpress.XtraReports.UI.XtraReport", {
                    info: Report.reportSerializationInfo,
                    nonToolboxItem: true,
                    surfaceType: Report.ReportSurface,
                    popularProperties: Report.popularPropertiesReport,
                    isCopyDeny: true,
                    isDeleteDeny: true,
                    displayName: Designer.getLocalization("Report", "DevExpress.XtraReports.UI.XtraReport")
                });
                Report.controlsFactory.registerControl("TopMarginBand", {
                    info: Report.bandSerializationInfo.concat(Report.commonBandScripts),
                    type: Report.TopMarginBand,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    isContainer: true,
                    isCopyDeny: true,
                    isDeleteDeny: true,
                    displayName: Designer.getLocalization("Top Margin", "DevExpress.XtraReports.UI.TopMarginBand")
                });
                Report.controlsFactory.registerControl("BottomMarginBand", {
                    info: Report.bandSerializationInfo.concat(Report.commonBandScripts),
                    type: Report.BottomMarginBand,
                    nonToolboxItem: true,
                    surfaceType: Report.BottomMarginSurface,
                    isContainer: true,
                    isCopyDeny: true,
                    isDeleteDeny: true,
                    displayName: Designer.getLocalization("Bottom Margin", "DevExpress.XtraReports.UI.BottomMarginBand")
                });
                Report.controlsFactory.registerControl("DetailReportBand", {
                    info: Report.detailReportBandSerializationInfo,
                    type: Report.DetailReportBand,
                    nonToolboxItem: true,
                    surfaceType: Report.DetailReportBandSurface,
                    popularProperties: Report.popularPropertiesDetailReport,
                    isContainer: true,
                    isCopyDeny: true,
                    canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType === "DetailReportBand"; },
                    displayName: Designer.getLocalization("Detail Report", "DevExpress.XtraReports.UI.DetailReportBand")
                });
                Report.controlsFactory.registerControl("DetailBand", {
                    info: Report.detailBandSerializationInfo.concat(Report.multiColumn),
                    type: Report.DetailBand,
                    nonToolboxItem: true,
                    surfaceType: Report.DetailBandSurface,
                    popularProperties: Report.popularPropertiesDetail.concat("multiColumn"),
                    isContainer: true,
                    isCopyDeny: true,
                    isDeleteDeny: true,
                    displayName: Designer.getLocalization("Detail", "DevExpress.XtraReports.UI.DetailBand")
                });
                Report.controlsFactory.registerControl("SubBand", {
                    info: Report.detailBandSerializationInfo,
                    type: Report.SubBandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.SubBandSurface,
                    popularProperties: Report.popularPropertiesDetail,
                    isContainer: true,
                    isCopyDeny: true,
                    canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType === "SubBand"; },
                    displayName: Designer.getLocalization("Sub-Band", "DevExpress.XtraReports.UI.SubBand")
                });
                Report.controlsFactory.registerControl("GroupHeaderBand", {
                    info: Report.groupHeaderBandSerializationInfo,
                    type: Report.GroupHeaderBand,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesGroupHeader,
                    isContainer: true,
                    isCopyDeny: true,
                    canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType === "GroupHeaderBand"; },
                    displayName: Designer.getLocalization("Group Header", "DevExpress.XtraReports.UI.GroupHeaderBand")
                });
                Report.controlsFactory.registerControl("GroupFooterBand", {
                    info: Report.groupFooterBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesGroupFooter,
                    isContainer: true,
                    isCopyDeny: true,
                    canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType === "GroupFooterBand"; },
                    displayName: Designer.getLocalization("Group Footer", "DevExpress.XtraReports.UI.GroupFooterBand")
                });
                Report.controlsFactory.registerControl("PageHeaderBand", {
                    info: Report.pageBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesPageHeader,
                    isContainer: true,
                    isCopyDeny: true,
                    displayName: Designer.getLocalization("Page Header", "DevExpress.XtraReports.UI.PageHeaderBand")
                });
                Report.controlsFactory.registerControl("PageFooterBand", {
                    info: Report.pageBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.PageFooterSurface,
                    popularProperties: Report.popularPropertiesPageFooter,
                    isContainer: true,
                    isCopyDeny: true,
                    displayName: Designer.getLocalization("Page Footer", "DevExpress.XtraReports.UI.PageFooterBand")
                });
                Report.controlsFactory.registerControl("ReportHeaderBand", {
                    info: Report.reportHeaderBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    surfaceType: Report.BandSurface,
                    popularProperties: Report.popularPropertiesReportHeader,
                    isContainer: true,
                    isCopyDeny: true,
                    displayName: Designer.getLocalization("Report Header", "DevExpress.XtraReports.UI.ReportHeaderBand")
                });
                Report.controlsFactory.registerControl("ReportFooterBand", {
                    info: Report.reportFooterBandSerializationInfo,
                    type: Report.BandViewModel,
                    nonToolboxItem: true,
                    popularProperties: Report.popularPropertiesReportFooter,
                    surfaceType: Report.BandSurface,
                    isContainer: true,
                    isCopyDeny: true,
                    displayName: Designer.getLocalization("Report Footer", "DevExpress.XtraReports.UI.ReportFooterBand")
                });
                Report.controlsFactory.registerControl("VerticalHeaderBand", {
                    info: Report.verticalHeaderBandSerializationInfo,
                    type: Report.VerticalBandViewModel,
                    nonToolboxItem: true,
                    popularProperties: Report.popularPropertiesVerticalHeaderBand,
                    surfaceType: Report.VerticalBandSurface,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("VerticalDetailBand", {
                    info: Report.verticalDetailBandSerializationInfo,
                    type: Report.VerticalBandViewModel,
                    nonToolboxItem: true,
                    popularProperties: Report.popularPropertiesVerticalDetailBand,
                    surfaceType: Report.VerticalBandSurface,
                    isContainer: true,
                    isCopyDeny: true,
                    isDeleteDeny: true
                });
                Report.controlsFactory.registerControl("VerticalTotalBand", {
                    info: Report.verticalTotalBandSerializationInfo,
                    type: Report.VerticalBandViewModel,
                    nonToolboxItem: true,
                    popularProperties: Report.popularPropertiesVerticalTotalBand,
                    surfaceType: Report.VerticalBandSurface,
                    isContainer: true,
                    isCopyDeny: true
                });
                Report.controlsFactory.registerControl("PivotGridField", {
                    info: Designer.Pivot.pivotGridFieldSerializationsInfo,
                    type: Designer.Pivot.PivotGridFieldViewModel,
                    surfaceType: Designer.Pivot.PivotGridFieldSurface,
                    nonToolboxItem: true,
                    popularProperties: Designer.Pivot.popularPropertiesPivotGridField,
                    displayName: "PivotGridField"
                });
                Report.controlsFactory.registerControl("XRTableRow", {
                    info: Report.tableRowSerializationsInfo,
                    type: Report.TableRowViewModel,
                    defaultVal: {
                        "@HeightF": "25",
                        "@Weight": "20"
                    },
                    nonToolboxItem: true,
                    surfaceType: Report.TableRowSurface,
                    isContainer: true,
                    isCopyDeny: true,
                    isPasteDeny: true,
                    canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType === "XRTable"; },
                    displayName: Designer.getLocalization("Table Row", "DevExpress.XtraReports.UI.XRTableRow")
                });
                Report.controlsFactory.registerControl("XRTableCell", {
                    info: Report.tableCellSerializationsInfo,
                    type: Report.TableCellViewModel,
                    defaultVal: {
                        "@Weight": "1",
                        "@WidthF": "100",
                        "@Multiline": "true",
                        "@Padding": "2,2,0,0,100"
                    },
                    nonToolboxItem: true,
                    surfaceType: Report.TableCellSurface,
                    popularProperties: Report.popularPropertiesTableCell,
                    isContainer: true,
                    defaultBindingName: "Text",
                    isCopyDeny: true,
                    canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType === "XRTableRow"; },
                    displayName: Designer.getLocalization("Table Cell", "DevExpress.XtraReports.UI.XRTableCell")
                });
            }
            Report.registerControls = registerControls;
            function isControl(control) {
                return !(control instanceof Report.StyleModel || control instanceof Report.FormattingRule || control instanceof Report.ComponentsModel);
            }
            Report.isControl = isControl;
            var JSReportDesigner = (function () {
                function JSReportDesigner(_designerModel) {
                    this._designerModel = _designerModel;
                }
                Object.defineProperty(JSReportDesigner.prototype, "designerModel", {
                    get: function () {
                        return this._designerModel();
                    },
                    set: function (newVal) {
                        this._designerModel(newVal);
                    },
                    enumerable: true,
                    configurable: true
                });
                JSReportDesigner.prototype.UpdateLocalization = function (localization) {
                    DevExpress.Designer.updateLocalization(localization);
                };
                JSReportDesigner.prototype.GetDesignerModel = function () {
                    return this.designerModel;
                };
                JSReportDesigner.prototype.GetPreviewModel = function () {
                    return this.designerModel.reportPreviewModel;
                };
                JSReportDesigner.prototype.GetPropertyInfo = function (controlType, path) {
                    return DevExpress.Designer.Report.controlsFactory.getPropertyInfo(controlType, path);
                };
                JSReportDesigner.prototype.GetButtonStorage = function () {
                    return this.designerModel.actionStorage;
                };
                JSReportDesigner.prototype.GetJsonReportModel = function () {
                    return this.designerModel.model().serialize();
                };
                JSReportDesigner.prototype.IsModified = function () {
                    return this.designerModel && this.designerModel.isDirty();
                };
                JSReportDesigner.prototype.ResetIsModified = function () {
                    if (this.designerModel) {
                        this.designerModel.isDirty(false);
                        this.designerModel.undoEngine && this.designerModel.undoEngine().clearHistory();
                    }
                };
                JSReportDesigner.prototype.AddToPropertyGrid = function (groupName, property) {
                    var group = DevExpress.Designer.Report.groups[groupName];
                    if (group) {
                        group.info.push(property);
                    }
                    else {
                        DevExpress.Designer.Report.groups[groupName] = { info: [property] };
                    }
                };
                JSReportDesigner.prototype.AddParameterType = function (parameterInfo, editorInfo) {
                    DevExpress.Designer.Report.Parameter.typeValues.push(parameterInfo);
                    DevExpress.Designer.editorTypeMapper[parameterInfo.value] = editorInfo;
                };
                JSReportDesigner.prototype.RemoveParameterType = function (parameterType) {
                    var position = DevExpress.Designer.Report.Parameter.typeValues.indexOf(this.GetParameterInfo(parameterType));
                    if (position !== -1) {
                        DevExpress.Designer.Report.Parameter.typeValues.splice(position, 1);
                    }
                };
                JSReportDesigner.prototype.GetParameterInfo = function (parameterType) {
                    return DevExpress.Designer.Report.Parameter.typeValues.filter(function (val) { return val.value === parameterType; })[0];
                };
                JSReportDesigner.prototype.GetParameterEditor = function (valueType) {
                    return DevExpress.Designer.editorTypeMapper[valueType];
                };
                JSReportDesigner.prototype.ReportStorageGetData = function (url) {
                    return DevExpress.Designer.Report.ReportStorageWeb.getData(url);
                };
                JSReportDesigner.prototype.ReportStorageSetData = function (reportLayout, url) {
                    return DevExpress.Designer.Report.ReportStorageWeb.setData(reportLayout, url);
                };
                JSReportDesigner.prototype.ReportStorageSetNewData = function (reportLayout, url) {
                    return DevExpress.Designer.Report.ReportStorageWeb.setNewData(reportLayout, url);
                };
                JSReportDesigner.prototype.SaveReport = function () {
                    var navigateByReports = this.designerModel.navigateByReports;
                    return this.ReportStorageSetData(navigateByReports.currentTab().context().report.serialize(), navigateByReports.currentTab().context().url());
                };
                JSReportDesigner.prototype.GetTabs = function () {
                    return this.designerModel.getTabs();
                };
                JSReportDesigner.prototype.GetCurrentTab = function () {
                    return this.designerModel.navigateByReports.currentTab();
                };
                JSReportDesigner.prototype.CloseTab = function (tab, force) {
                    if (force === void 0) { force = false; }
                    this.designerModel.closeTab(tab, force);
                };
                JSReportDesigner.prototype.CloseCurrentTab = function () {
                    this.designerModel.navigateByReports.removeTab(this.designerModel.navigateByReports.currentTab());
                };
                JSReportDesigner.prototype.AdjustControlCore = function () {
                    this.designerModel && this.designerModel.updateSurfaceSize();
                };
                JSReportDesigner.prototype.SaveNewReport = function (reportName) {
                    var navigateByReports = this.designerModel.navigateByReports;
                    return this.ReportStorageSetNewData(navigateByReports.currentTab().context().report.serialize(), reportName);
                };
                JSReportDesigner.prototype.ReportStorageGetUrls = function () {
                    return DevExpress.Designer.Report.ReportStorageWeb.getUrls();
                };
                JSReportDesigner.prototype.OpenReport = function (url) {
                    this.designerModel.openReport(url);
                };
                JSReportDesigner.prototype.ShowPreview = function () {
                    var _this = this;
                    var reportPreview = this.designerModel.reportPreviewModel.reportPreview;
                    reportPreview.previewVisible(true);
                    setTimeout(function () {
                        reportPreview.initialize(DevExpress.Designer.Report.ReportPreviewService.initializePreview(_this.designerModel.model()));
                    }, 1);
                };
                return JSReportDesigner;
            })();
            Report.JSReportDesigner = JSReportDesigner;
            var JSReportDesignerBinding = (function (_super) {
                __extends(JSReportDesignerBinding, _super);
                function JSReportDesignerBinding(_options, customEventRaiser) {
                    _super.call(this, _options, customEventRaiser);
                    this._model = null;
                    Report.limitation = _options.limitation;
                    Designer.Chart["limitation"] = Report.limitation;
                    _options.designerModel = ko.isWriteableObservable(_options.designerModel) ? _options.designerModel : ko.observable(null);
                    this.sender = new JSReportDesigner(_options.designerModel);
                    this._initializationData = ko.isObservable(_options.initializationData)
                        ? _options.initializationData
                        : ko.observable(_options.initializationData);
                }
                JSReportDesignerBinding.prototype._applyBindings = function (model, $element) {
                    this.sender.designerModel = model;
                    var childTemplate = !model ? $("<div>") : this._templateHtml;
                    $element.children().remove();
                    var child = $element.append(childTemplate).children()[0];
                    if (!child)
                        return;
                    ko.cleanNode(child);
                    this._callbacks && this._callbacks.designer.beforeRender && this._callbacks.designer.beforeRender(model);
                    ko.applyBindings(model, child);
                    this._fireEvent("Init");
                    setTimeout(function () {
                        model && model.updateSurfaceSize();
                    }, 1);
                };
                JSReportDesignerBinding.prototype._initializeCallbacks = function () {
                    var _this = this;
                    if (this._options.callbacks) {
                        return {
                            preview: this._getAvailableEvents(DevExpress.Report.EventGenerator.generatePreviewEvents(function (eventName, args) {
                                _this._fireEvent(eventName, args);
                            }, "Preview"), "preview"),
                            designer: this._getAvailableEvents(DevExpress.Report.EventGenerator.generateDesignerEvents(function (eventName, args) {
                                _this._fireEvent(eventName, args);
                            }), "designer")
                        };
                    }
                };
                JSReportDesignerBinding.prototype._createModel = function (initData, element) {
                    this._callbacks = this._initializeCallbacks();
                    return createReportDesignerFromModel(initData, element, this._callbacks, false);
                };
                JSReportDesignerBinding.prototype._getDesignerModelRequest = function (reportUrl) {
                    var self = this;
                    var requestOptions = this._options.requestOptions;
                    self._callbacks = this._initializeCallbacks();
                    var getDesignerModelActionUrl = this._getServerActionUrl(requestOptions.host, requestOptions.getDesignerModelAction);
                    var onError = function (data, textStatus, jqXHR, getRequestDetails) {
                        if (!self._callbacks || !self._callbacks.designer || !self._callbacks.designer.onServerError)
                            return;
                        self._callbacks.designer.onServerError({ jqXHR: jqXHR, textStatus: textStatus, data: data, getRequestDetails: getRequestDetails });
                    };
                    DevExpress.Analytics.Utils.ajaxSetup.sendRequest({
                        url: getDesignerModelActionUrl,
                        type: "POST",
                        data: {
                            reportUrl: reportUrl
                        }
                    }).done(function (result, textStatus, jqXHR) {
                        if (result.error) {
                            return onError(result, textStatus, jqXHR, function () { return ({ url: getDesignerModelActionUrl, data: { reportUrl: reportUrl } }); });
                        }
                        result.handlerUri = self._getServerActionUrl(requestOptions.host, result.handlerUri);
                        result.viewerHandlerUri = self._getServerActionUrl(requestOptions.host, result.viewerHandlerUri);
                        result.queryBuilderHandlerUri = self._getServerActionUrl(requestOptions.host, result.queryBuilderHandlerUri);
                        self._initializationData(result);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        onError({ error: errorThrown }, textStatus, jqXHR, function () { return ({ url: getDesignerModelActionUrl, data: { reportUrl: reportUrl } }); });
                        if (errorThrown)
                            throw errorThrown;
                    });
                };
                JSReportDesignerBinding.prototype._createDisposeFunction = function (subscriptions, element) {
                    var _this = this;
                    var dispose = function () {
                        _this._model && _this._model.dispose();
                        _this._model = null;
                        subscriptions.forEach(function (x) { return x && x.dispose(); });
                        subscriptions = [];
                    };
                };
                JSReportDesignerBinding.prototype.applyBindings = function (element) {
                    var _this = this;
                    var self = this;
                    var _$element = $(element);
                    _$element.addClass("dx-designer");
                    var subscriptions = [];
                    this._createDisposeFunction(subscriptions, element);
                    if (self._options.undoEngine) {
                        self._applyBindings(self._options, _$element);
                        return;
                    }
                    var applyBindingsFunc = function (newData) {
                        _this._model && _this._model.dispose();
                        _this._model = self._createModel(newData, element);
                        self._applyBindings(_this._model, _$element);
                    };
                    subscriptions.push(self._initializationData.subscribe(function (newVal) {
                        applyBindingsFunc(newVal);
                    }));
                    if (self._options.requestOptions) {
                        self._getLocalizationRequest().done(function (localization) {
                            localization && DevExpress.JS.Localization.addCultureInfo(localization);
                        }).always(function () {
                            if (self._options.requestOptions.getDesignerModelAction) {
                                if (ko.isSubscribable(self._options.reportUrl)) {
                                    subscriptions.push(self._options.reportUrl.subscribe(function (newVal) {
                                        self._getDesignerModelRequest(newVal);
                                    }));
                                }
                                self._getDesignerModelRequest(ko.unwrap(self._options.reportUrl));
                            }
                            else {
                                applyBindingsFunc(self._initializationData());
                            }
                        });
                    }
                    else {
                        applyBindingsFunc(self._initializationData());
                    }
                };
                return JSReportDesignerBinding;
            })(DevExpress.Report.JSDesignerBindingCommon);
            Report.JSReportDesignerBinding = JSReportDesignerBinding;
            ko.bindingHandlers['dxReportDesigner'] = {
                init: function (element, valueAccessor) {
                    new JSReportDesignerBinding(ko.unwrap(valueAccessor()) || {}).applyBindings(element);
                    return { controlsDescendantBindings: true };
                }
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportCompleter = (function () {
                function ReportCompleter(report, editorInstance, guid) {
                    this.completions = [];
                    this.report = report;
                    this.editorInstance = editorInstance;
                    this.guid = guid;
                    this.oldPrefix = null;
                }
                ReportCompleter.prototype.__getCompletions = function (editor, session, pos, prefix, callback) {
                    var self = this;
                    Report.ReportScriptService.getCompletions(editor, session, pos, prefix, callback, this.report(), this.editorInstance, this.guid())
                        .done(function (result) {
                        if (result) {
                            if (result.State === 1) {
                                Report.ReportScriptService.setCodeDom(self.guid(), JSON.stringify({
                                    "XtraReportsLayoutSerializer": ScriptsEditor._createReportDummy(self.report().serialize())
                                })).done(function (result) {
                                    self.guid(result.Guid);
                                    self.__getCompletions(editor, session, pos, prefix, callback);
                                });
                            }
                            else {
                                var errors = [];
                                if (result.Errors.length > 0) {
                                    var linesCount = editor.getSession().getLength();
                                    result.Errors.forEach(function (error) {
                                        if (error.Line < linesCount && error.Line >= 0) {
                                            errors.push({
                                                row: error.Line + 1,
                                                column: error.Column,
                                                text: error.ErrorNumber + " - " + error.ErrorText,
                                                type: error.IsWarning ? "warning" : "error"
                                            });
                                        }
                                    });
                                    editor.getSession().setAnnotations(errors);
                                }
                                self.completions = result.Completions;
                                callback(null, result.Completions);
                            }
                        }
                    });
                };
                ReportCompleter.prototype.getCompletions = function (editor, session, pos, prefix, callback) {
                    if (!this.oldPrefix || prefix[0] !== this.oldPrefix) {
                        this.oldPrefix = prefix[0];
                        this.__getCompletions(editor, session, pos, prefix, callback);
                    }
                    else if (this.oldPrefix == prefix[0] && this.completions.length > 0) {
                        callback(null, this.completions);
                    }
                };
                return ReportCompleter;
            })();
            Report.ReportCompleter = ReportCompleter;
            var ScriptsEditor = (function (_super) {
                __extends(ScriptsEditor, _super);
                function ScriptsEditor(report, allControls) {
                    var _this = this;
                    _super.call(this);
                    this._selectionNotEmpty = ko.observable(false);
                    this._canUndo = ko.observable(false);
                    this._canRedo = ko.observable(false);
                    this._cursorPosition = ko.observable().extend({ throttle: 100 });
                    this.guid = ko.observable(null);
                    this.editorContainer = ko.observable();
                    this.editorVisible = ko.observable(false);
                    this.toolbarItems = [];
                    this.controls = ko.observableArray([]);
                    this.selectedControl = ko.observable();
                    this.events = ko.observable([]);
                    this.selectedEvent = ko.observable();
                    this.validateDisabled = ko.observable(false);
                    this.aceOptions = {
                        enableBasicAutocompletion: true,
                        enableSnippets: true,
                        enableLiveAutocompletion: true,
                        showPrintMargin: false
                    };
                    var self = this;
                    var cursorPositionChanging = false;
                    this.languageHelper = new LanguageHelper(report);
                    this._updateEditorState = function () {
                        if (_this.editorContainer() && _this.editorContainer().getSession()) {
                            _this._canUndo(_this.editorContainer().getSession().getUndoManager().hasUndo());
                            _this._canRedo(_this.editorContainer().getSession().getUndoManager().hasRedo());
                        }
                    };
                    this.selectionChanged = function (editor) {
                        _this._selectionNotEmpty(!editor.getSelection().isEmpty());
                        _this._updateEditorState();
                        editor.focus();
                    };
                    this.report = report;
                    this.scriptsText = ko.pureComputed({
                        read: function () { return _this.report() && _this.report().scriptsSource(); },
                        write: function (newText) { _this.report() && _this.report().scriptsSource(newText); }
                    });
                    this._initializeToolbar();
                    this.editorContainer.subscribe(function (editor) {
                        if (editor.getSession()) {
                            editor.getSession().getSelection().on("changeSelection", function () {
                                _this.selectionChanged(editor);
                            });
                            editor.getSession().getSelection().on("changeCursor", function () {
                                self._cursorPosition(editor.getCursorPosition());
                            });
                        }
                    });
                    this._cursorPosition.subscribe(function (currentCursorPosition) {
                        var currentFunctionName = _this._getFunctionName(currentCursorPosition.row), control, event;
                        _this.controls().some(function (ctrl) {
                            control = ctrl;
                            event = _this._getEventByFunction(ctrl, currentFunctionName);
                            return !!event;
                        });
                        if (control && event) {
                            try {
                                cursorPositionChanging = true;
                                _this.selectedControl(control);
                                _this.selectedEvent(event);
                            }
                            finally {
                                cursorPositionChanging = false;
                            }
                        }
                    });
                    this._disposables.push(ko.computed(function () {
                        _this.controls(allControls().filter(function (control) { return !!control.scripts && !control.lockedInUserDesigner(); }));
                    }));
                    this.selectedControl.subscribe(function (newSelectedControl) {
                        var eventsList = [];
                        if (newSelectedControl) {
                            var info = newSelectedControl.getInfo();
                            var scripts = info.filter(function (x) { return x.propertyName === "scripts"; })[0];
                            eventsList = scripts && scripts.info.filter(function (x) { return ko.unwrap(x.visible) !== false && !ko.unwrap(x.disabled); }).map(function (item) {
                                return item.propertyName.indexOf("on") === 0 ? item.propertyName.substring(2) : item.propertyName;
                            });
                        }
                        _this.selectedEvent("");
                        _this.events(eventsList);
                    });
                    this._ensureFunction = function (functionName, eventArgsType) {
                        var editorContainer = _this.editorContainer();
                        if (editorContainer) {
                            var editorContent = editorContainer.getValue();
                            if (editorContent.indexOf(functionName) === -1) {
                                var newEventHandler = _this.languageHelper.createNewHandler(functionName, eventArgsType);
                                var resultScripts = editorContent.concat(newEventHandler);
                                _this.report().scriptsSource(resultScripts);
                                editorContainer.setValue(resultScripts);
                            }
                        }
                    };
                    this.ensureEvent = function (eventName, functionName, model) {
                        var selectedControl = model;
                        if (!selectedControl) {
                            selectedControl = _this.selectedControl();
                        }
                        functionName = ScriptsEditor.generateFunctionName(selectedControl, eventName, functionName, _this.allFunctionNames);
                        var eventArgsType = ScriptsEditor.getEventArgsType(eventName);
                        _this._ensureFunction(functionName, eventArgsType);
                        _this._changeSelection(functionName);
                        selectedControl.scripts["on" + eventName](functionName);
                        _this.selectedControl(selectedControl);
                        if (_this.controls.indexOf(selectedControl) === -1) {
                            _this.controls.push($.extend({ displayExpr: selectedControl.name }, selectedControl));
                        }
                        _this.selectedEvent(eventName);
                    };
                    this.selectedEvent.subscribe(function (newEvent) {
                        if (!cursorPositionChanging && newEvent) {
                            var selectedControl = _this.selectedControl();
                            var selectedControlNewEvent = selectedControl && selectedControl.scripts["on" + newEvent];
                            var newEventFunction = selectedControlNewEvent && selectedControlNewEvent();
                            if (!newEventFunction || _this.allFunctionNames.indexOf(newEventFunction) === -1) {
                                _this.ensureEvent(newEvent);
                            }
                            else {
                                _this._changeSelection(newEventFunction);
                            }
                        }
                    });
                }
                ScriptsEditor.prototype._changeSelection = function (textToSelect) {
                    var editorContainer = this.editorContainer();
                    if (editorContainer) {
                        editorContainer.find(textToSelect, {
                            backwards: false,
                            wrap: false,
                            caseSensitive: false,
                            wholeWord: true,
                            regExp: false
                        }, true);
                        editorContainer.findNext();
                        editorContainer.findPrevious();
                    }
                };
                ScriptsEditor.prototype._initializeToolbar = function () {
                    var _this = this;
                    var self = this, copyText = ko.observable("");
                    this.toolbarItems.push({
                        text: "Cut",
                        displayText: function () { return Designer.getLocalization("Cut", "ReportStringId.UD_TTip_EditCut"); },
                        imageClassName: "dxrd-image-cut",
                        imageTemplateName: "dxrd-svg-toolbar-cut",
                        disabled: ko.pureComputed(function () { return !self.report() || !self._selectionNotEmpty(); }),
                        visible: true,
                        clickAction: function () {
                            copyText(self.editorContainer().getCopyText());
                            self.editorContainer().execCommand("cut");
                        },
                        hotKey: { ctrlKey: true, keyCode: "X".charCodeAt(0) }
                    });
                    this.toolbarItems.push({
                        text: "Copy",
                        displayText: function () { return Designer.getLocalization("Copy", "ReportStringId.Cmd_Copy"); },
                        imageClassName: "dxrd-image-copy",
                        imageTemplateName: "dxrd-svg-toolbar-copy",
                        disabled: ko.pureComputed(function () { return !self.report() || !self._selectionNotEmpty(); }),
                        visible: true,
                        clickAction: function () {
                            copyText(self.editorContainer().getCopyText());
                        },
                        hotKey: { ctrlKey: true, keyCode: "C".charCodeAt(0) }
                    });
                    this.toolbarItems.push({
                        text: "Paste",
                        displayText: function () { return Designer.getLocalization("Paste", "ReportStringId.Cmd_Paste"); },
                        imageClassName: "dxrd-image-paste",
                        imageTemplateName: "dxrd-svg-toolbar-paste",
                        disabled: ko.pureComputed(function () { return !self.report() || !copyText(); }),
                        visible: true,
                        clickAction: function () {
                            self.editorContainer().onPaste(copyText());
                        },
                        hotKey: { ctrlKey: true, keyCode: "V".charCodeAt(0) }
                    });
                    this.toolbarItems.push({
                        text: "Delete",
                        displayText: function () { return Designer.getLocalization("Delete", "ReportStringId.Cmd_Delete"); },
                        imageClassName: "dxrd-image-delete",
                        imageTemplateName: "dxrd-svg-toolbar-delete",
                        disabled: ko.pureComputed(function () { return !self.report() || !self._selectionNotEmpty(); }),
                        visible: true,
                        clickAction: function () {
                            self.editorContainer().execCommand("del");
                        }
                    });
                    this.toolbarItems.push({
                        text: "Undo",
                        displayText: function () { return Designer.getLocalization("Undo", "ReportStringId.UD_Capt_Undo"); },
                        imageClassName: "dxrd-image-undo",
                        imageTemplateName: "dxrd-svg-toolbar-undo",
                        disabled: ko.pureComputed(function () { return !self.report() || !self._canUndo(); }),
                        visible: true,
                        clickAction: function () {
                            self.editorContainer().undo(false);
                            self._updateEditorState();
                        },
                        hotKey: { ctrlKey: true, keyCode: "Z".charCodeAt(0) },
                        hasSeparator: true
                    });
                    this.toolbarItems.push({
                        text: "Redo",
                        displayText: function () { return Designer.getLocalization("Redo", "ReportStringId.UD_Capt_Redo"); },
                        imageClassName: "dxrd-image-redo",
                        imageTemplateName: "dxrd-svg-toolbar-redo",
                        disabled: ko.pureComputed(function () { return !self.report() || !self._canRedo(); }),
                        visible: true,
                        clickAction: function () {
                            self.editorContainer().redo(false);
                            self._updateEditorState();
                        },
                        hotKey: { ctrlKey: true, keyCode: "Y".charCodeAt(0) },
                    });
                    this.toolbarItems.push({
                        text: "Controls",
                        disabled: ko.pureComputed(function () { return !_this.report(); }),
                        visible: this.editorVisible,
                        clickAction: $.noop,
                        control: self.selectedControl,
                        controls: self.controls,
                        displayExpr: function (value) { return DevExpress.Designer.getControlFullName(value); },
                        templateName: "dxrd-scripting-controlchooser",
                        hasSeparator: true
                    });
                    this.toolbarItems.push({
                        text: "Events",
                        disabled: ko.pureComputed(function () { return !_this.report(); }),
                        visible: this.editorVisible,
                        clickAction: $.noop,
                        events: self.events,
                        event: self.selectedEvent,
                        templateName: "dxrd-scripting-eventchooser"
                    });
                    this.toolbarItems.push({
                        text: "Validate",
                        displayText: function () { return Designer.getLocalization("Validate", "ReportStringId.ScriptEditor_Validate"); },
                        imageClassName: "dxrd-image-validate",
                        imageTemplateName: "dxrd-svg-toolbar-validate",
                        disabled: ko.pureComputed(function () {
                            return !self.report() || self.validateDisabled() || !self.editorContainer();
                        }),
                        visible: this.editorVisible,
                        hotKey: { ctrlKey: true, keyCode: "L".charCodeAt(0) },
                        clickAction: function () {
                            self.validateDisabled(true);
                            self._setScriptsText();
                            Report.ReportScriptService.validateScripts(self.report()).done(function (result) {
                                if (!self.editorContainer())
                                    return;
                                var errors = [];
                                result.forEach(function (error) {
                                    var linesCount = self.editorContainer().getSession().getLength();
                                    errors.push({
                                        row: self._getValidIndex(error.Line, linesCount),
                                        column: self._getValidIndex(error.Column, linesCount),
                                        text: error.ErrorNumber + " - " + error.ErrorText,
                                        type: error.IsWarning ? "warning" : "error"
                                    });
                                });
                                self.editorContainer().getSession().setAnnotations(errors);
                                self.validateDisabled(false);
                                if (errors.length > 0) {
                                    Designer.ShowMessage(Designer.getLocalization("The script contains error(s).", "ASPxReportsStringId.ReportDesigner_ScriptValidation_Message_ContainsErrors"));
                                }
                                else {
                                    Designer.ShowMessage(Designer.getLocalization("The script is valid.", "ASPxReportsStringId.ReportDesigner_ScriptValidation_Message_ValidScript"), "success");
                                }
                            })
                                .fail(function (result) {
                                Designer.ShowMessage(Designer.getLocalization("Impossible to validate the script.", "ASPxReportsStringId.ReportDesigner_ScriptValidation_Error"));
                                self.validateDisabled(false);
                            });
                        },
                        hasSeparator: true
                    });
                    this.toolbarItems.push({
                        text: "Design",
                        displayText: function () { return Designer.getLocalization("Design", "ReportStringId.RepTabCtl_Designer"); },
                        imageClassName: "dxrd-image-design",
                        imageTemplateName: "dxrd-svg-preview-report_designer",
                        disabled: ko.pureComputed(function () { return !_this.report(); }),
                        visible: this.editorVisible,
                        hotKey: { ctrlKey: true, keyCode: "P".charCodeAt(0) },
                        clickAction: function () {
                            self._setScriptsText();
                            self.editorVisible(false);
                        },
                        hasSeparator: true
                    });
                };
                ScriptsEditor.prototype._getValidIndex = function (errorPosition, linesCount) {
                    var position = errorPosition <= linesCount ? Math.max(1, errorPosition) : 1;
                    return Math.max(0, position - 1);
                };
                ScriptsEditor.prototype._setScriptsText = function () {
                    var editorContainer = this.editorContainer();
                    if (editorContainer) {
                        this.scriptsText(editorContainer.getValue());
                    }
                };
                ScriptsEditor.prototype._getFunctionName = function (row) {
                    var name = '', allLines = this.editorContainer().getSession().getDocument().getAllLines();
                    for (var rowIndex = row; rowIndex >= 0; rowIndex--) {
                        if (name) {
                            break;
                        }
                        for (var index = 0; index < this.allFunctionNames.length; index++) {
                            if (allLines[rowIndex].indexOf(this.allFunctionNames[index]) !== -1) {
                                name = this.allFunctionNames[index];
                                break;
                            }
                        }
                        ;
                    }
                    return name;
                };
                ScriptsEditor.prototype._getEventByFunction = function (control, currentFunctionName) {
                    var result = "";
                    for (var propertyName in control.scripts) {
                        if (result) {
                            break;
                        }
                        var eventName = propertyName;
                        if (ko.unwrap(control.scripts[eventName]) === currentFunctionName && eventName.indexOf("on") === 0) {
                            result = eventName.substring(2);
                        }
                    }
                    return result;
                };
                ScriptsEditor.generateFunctionName = function (control, eventName, functionName, allFunctionNames) {
                    if (allFunctionNames === void 0) { allFunctionNames = []; }
                    if (functionName || ko.unwrap(control.name)) {
                        return Designer.replaceInvalidSymbols(functionName || (ko.unwrap(control.name) + "_" + eventName));
                    }
                    else {
                        return Designer.getUniqueName(allFunctionNames, eventName);
                    }
                };
                ScriptsEditor.getEventArgsType = function (eventName) {
                    return Report.eventArgsTypes[eventName] || "System.EventArgs";
                };
                ScriptsEditor._createReportDummy = function (report) {
                    Object.keys(report).forEach(function (propertyName) {
                        if ($.isPlainObject(report[propertyName])) {
                            ScriptsEditor._createReportDummy(report[propertyName]);
                            if ($.isEmptyObject(report[propertyName]) || (Object.keys(report[propertyName]).length === 1 && report[propertyName]["@Ref"]))
                                delete report[propertyName];
                        }
                        else if (propertyName !== "@Ref" &&
                            propertyName.indexOf("Item") !== 0 &&
                            propertyName !== "@Name" &&
                            propertyName !== "Name" &&
                            propertyName !== "@ControlType" &&
                            propertyName !== "@ObjectType" &&
                            propertyName !== "@Content" &&
                            propertyName !== "@Type" &&
                            report[propertyName].toString().indexOf("#Ref-") !== 0) {
                            delete report[propertyName];
                        }
                    });
                    return report;
                };
                ScriptsEditor.prototype.initialize = function () {
                    var _this = this;
                    var self = this;
                    Report.ReportScriptService.setCodeDom("", JSON.stringify({
                        "XtraReportsLayoutSerializer": ScriptsEditor._createReportDummy(this.report().serialize())
                    })).done(function (result) {
                        _this.guid(result.Guid);
                    });
                };
                Object.defineProperty(ScriptsEditor.prototype, "allFunctionNames", {
                    get: function () {
                        return this.scriptsText() ? this.languageHelper.getFunctionNamesFromScript(this.scriptsText()) : [];
                    },
                    enumerable: true,
                    configurable: true
                });
                return ScriptsEditor;
            })(Designer.Disposable);
            Report.ScriptsEditor = ScriptsEditor;
            var LanguageHelper = (function () {
                function LanguageHelper(report) {
                    this._report = report;
                }
                LanguageHelper.prototype.getLanguageMode = function () {
                    if (this._report()) {
                        var scriptLanguage = this._report().scriptLanguage();
                        switch (scriptLanguage) {
                            case "CSharp":
                                return "ace/mode/csharp";
                            case "VisualBasic":
                                return "ace/mode/vbscript";
                            default:
                                return "ace/mode/text";
                        }
                    }
                };
                LanguageHelper.prototype.createNewHandler = function (eventName, eventArgsType) {
                    if (this._report()) {
                        var scriptLanguage = this._report().scriptLanguage();
                        switch (scriptLanguage) {
                            case "CSharp":
                                return "\r\nprivate void " + eventName + "(object sender, " + eventArgsType + " e) {\r\n\r\n}\r\n";
                            case "VisualBasic":
                                return "\r\nPrivate Sub " + eventName + "(ByVal sender As Object, ByVal e As " + eventArgsType + ")\r\n\r\nEnd Sub\r\n";
                            case "JScript":
                                return "\r\nprivate final function " + eventName + "(sender : System.Object, e : " + eventArgsType + ") {\r\n\r\n}\r\n";
                        }
                    }
                };
                LanguageHelper.prototype.getFunctionNamesFromScript = function (scripts) {
                    if (this._report()) {
                        var keyWords = { 'CSharp': 'void ', 'VisualBasic': 'Sub ', 'JScript': 'function ' };
                        var scriptLanguage = this._report().scriptLanguage();
                        var events = [];
                        if (scripts) {
                            var lines = scripts.match(new RegExp(keyWords[scriptLanguage] + '(([A-Z])|[a-z])\\w+\\(', 'g'));
                            lines && lines.forEach(function (line) {
                                events.push(line.substring(keyWords[scriptLanguage].length, line.length - 1));
                            });
                        }
                        return events;
                    }
                };
                LanguageHelper.prototype.createCompleters = function (editor, bindingContext, viewModel) {
                    return [new ReportCompleter(bindingContext.$root.model, editor, viewModel.guid)];
                };
                return LanguageHelper;
            })();
            Report.LanguageHelper = LanguageHelper;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var EDITOR_CLASS = "dx-eventdropdowneditor dx-selectbox", EDITOR_ELLIPSIS_BUTTON_CLASS = "dx-button-normal dx-dropdowneditor-button dxrd-ellipsis-button", EDITOR_ELLIPSIS_BUTTON_ICON_CLASS = "dx-dropdowneditor-icon dxrd-ellipsis-image", EDITOR_ELLIPSIS_BUTTON_ICON_TEMPLATE = "dxrd-svg-ellipsis";
            var dxEventDropDownEditor = (function (_super) {
                __extends(dxEventDropDownEditor, _super);
                function dxEventDropDownEditor() {
                    _super.apply(this, arguments);
                }
                dxEventDropDownEditor.prototype._getDefaultOptions = function () {
                    return $.extend(_super.prototype._getDefaultOptions.call(this), {
                        openOnFieldClick: false,
                        secondAction: null
                    });
                };
                dxEventDropDownEditor.prototype._init = function () {
                    _super.prototype._init.call(this);
                    this._initSecondAction();
                    this._koContext = ko.contextFor(this["element"]()[0]);
                };
                dxEventDropDownEditor.prototype._initSecondAction = function () {
                    this._secondAction = this["_createAction"](this.option("secondAction"));
                };
                dxEventDropDownEditor.prototype._render = function () {
                    this["element"]().addClass(EDITOR_CLASS);
                    _super.prototype._render.call(this);
                };
                dxEventDropDownEditor.prototype._renderDropDownButton = function () {
                    if (this._$ellipsisButton) {
                        this._$ellipsisButton.remove();
                        this._$ellipsisButton = null;
                    }
                    _super.prototype._renderDropDownButton.call(this);
                    this._$ellipsisButton = this._createEllipsisButton();
                    this._$ellipsisButton.prependTo(this["_buttonsContainer"]());
                    this._attachEllipsisButtonClickHandler();
                };
                dxEventDropDownEditor.prototype._createEllipsisButton = function () {
                    var $buttonIcon = $("<div>").addClass(EDITOR_ELLIPSIS_BUTTON_ICON_CLASS).append(ko.utils.parseHtmlFragment(DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.templates[EDITOR_ELLIPSIS_BUTTON_ICON_TEMPLATE]));
                    ko.applyBindingsToDescendants(this._koContext, $buttonIcon[0]);
                    var $button = $("<div>").dxButton({
                        focusStateEnabled: false,
                        disabled: this.option("readOnly")
                    }).removeClass("dx-button");
                    $button.addClass(EDITOR_ELLIPSIS_BUTTON_CLASS);
                    $button.append($buttonIcon);
                    $button.find(".dx-button-content").remove();
                    return $button;
                };
                dxEventDropDownEditor.prototype._attachEllipsisButtonClickHandler = function () {
                    if (this._$ellipsisButton) {
                        this._$ellipsisButton.dxButton("option", "onClick", this._secondAction.bind(this));
                    }
                };
                dxEventDropDownEditor.prototype._optionChanged = function (args) {
                    switch (args.name) {
                        case "secondAction":
                            this._initSecondAction();
                            this._attachEllipsisButtonClickHandler();
                            break;
                        default:
                            _super.prototype._optionChanged.call(this, args);
                    }
                };
                return dxEventDropDownEditor;
            })(DevExpress.ui.dxSelectBox);
            Report.dxEventDropDownEditor = dxEventDropDownEditor;
            DevExpress.registerComponent("dxEventDropDownEditor", dxEventDropDownEditor);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var MasterDetailInfoBase = (function () {
                    function MasterDetailInfoBase(name, specifics, displayName) {
                        this.name = name;
                        this.specifics = specifics;
                        this.displayName = displayName;
                        if (!this.displayName)
                            this.displayName = this.name;
                    }
                    return MasterDetailInfoBase;
                })();
                Wizard.MasterDetailInfoBase = MasterDetailInfoBase;
                var MasterDetailFieldInfo = (function (_super) {
                    __extends(MasterDetailFieldInfo, _super);
                    function MasterDetailFieldInfo(field) {
                        _super.call(this, field.name, field.specifics, field.displayName);
                        this.checked = !field.unChecked();
                    }
                    return MasterDetailFieldInfo;
                })(MasterDetailInfoBase);
                Wizard.MasterDetailFieldInfo = MasterDetailFieldInfo;
                var MasterDetailQueryInfo = (function (_super) {
                    __extends(MasterDetailQueryInfo, _super);
                    function MasterDetailQueryInfo(dataMember) {
                        var _this = this;
                        _super.call(this, dataMember.name, dataMember.specifics, dataMember.displayName);
                        this._complexFields = [];
                        this._complexRelations = [];
                        this.fields = [];
                        this.relations = [];
                        this.path = dataMember.path;
                        this.checked = dataMember.checked();
                        dataMember.children().forEach(function (item) {
                            if (!item.isList || item.isComplex) {
                                if (item.isComplex && item instanceof Wizard.DataMemberTreeNode) {
                                    _this._expandComplexFieds(item);
                                }
                                else {
                                    _this.fields.push(new MasterDetailFieldInfo(item));
                                }
                            }
                            else {
                                _this.relations.push(new MasterDetailQueryInfo(item));
                            }
                        });
                        this.fields = this.fields.concat(this._complexFields);
                        this.relations = this.relations.concat(this._complexRelations);
                    }
                    MasterDetailQueryInfo.prototype._expandComplexFieds = function (complexField) {
                        var _this = this;
                        complexField.children().forEach(function (child) {
                            child.name = complexField.name + "." + child.name;
                            if (child instanceof Wizard.FieldTreeNode) {
                                _this._complexFields.push(new MasterDetailFieldInfo(child));
                            }
                            if (!child.isComplex && child instanceof Wizard.DataMemberTreeNode) {
                                _this._complexRelations.push(new MasterDetailQueryInfo(child));
                            }
                            if (child.isComplex && child instanceof Wizard.DataMemberTreeNode) {
                                _this._expandComplexFieds(child);
                            }
                        });
                    };
                    return MasterDetailQueryInfo;
                })(MasterDetailInfoBase);
                Wizard.MasterDetailQueryInfo = MasterDetailQueryInfo;
                var ReportWizard = (function (_super) {
                    __extends(ReportWizard, _super);
                    function ReportWizard(dataSources, callbacks, connectionStrings, hideDataMemberSubItems, disableCustomSql, useMasterDetailWizard, reportModel) {
                        var _this = this;
                        if (hideDataMemberSubItems === void 0) { hideDataMemberSubItems = false; }
                        _super.call(this);
                        this._labelWizardData = null;
                        this.title = Designer.getLocalization("Report Wizard", "ASPxReportsStringId.ReportDesigner_Wizard_Header");
                        this.labelWizardData = function () {
                            if (!_this._labelWizardData) {
                                var $def = $.Deferred();
                                Report.ReportWizardService.getLabelReportWizardData().done(function (data) { return $def.resolve(JSON.parse(data)); });
                                _this._labelWizardData = $def.promise();
                            }
                            return _this._labelWizardData;
                        };
                        this.container = DevExpress.Analytics.Utils.getParentContainer;
                        if (disableCustomSql !== false)
                            disableCustomSql = true;
                        if (useMasterDetailWizard !== false)
                            this.isMasterDetailWizard = true;
                        this.finishCallback = callbacks.finishCallback;
                        this._dataSources = dataSources;
                        this._selectDataSourcePage = new Wizard.SelectDataSourcePage(this, ko.observable([]), ko.pureComputed(function () { return connectionStrings().length > 0; }));
                        this._reportModel = reportModel;
                        if (this.isMasterDetailWizard) {
                            this.height(ReportWizard._masterDetailWizardHeight);
                            this.width(ReportWizard._masterDetailWizardWidth);
                            this.extendCssClass = "dxrd-master-detail-report-wizard";
                        }
                        var reportWizardSteps = this.isMasterDetailWizard ?
                            [
                                new Report.Wizard.MasterDetailSelectReportDataPage(this, callbacks.fieldListsCallback, callbacks.createSqlDataSourceInfo, hideDataMemberSubItems),
                                new Report.Wizard.MasterDetailAddGroupingLevel(this),
                                new Report.Wizard.MasterDetailChooseSummaryOptions(this),
                                new Wizard.PageSetupPage(this),
                                new Wizard.ColorSchemePage(this)
                            ]
                            :
                                [
                                    new Report.Wizard.SelectDataMemberPage(this, callbacks.fieldListsCallback, callbacks.createSqlDataSourceInfo, hideDataMemberSubItems),
                                    new Report.Wizard.SelectColumnsPage(this, callbacks.fieldListsCallback),
                                    new Report.Wizard.AddGroupingLevelPage(this),
                                    new Report.Wizard.ChooseSummaryOptionsPage(this),
                                    new Report.Wizard.ChooseReportLayoutPage(this),
                                    new Report.Wizard.ChooseReportStylePage(this)
                                ];
                        this.steps = [
                            new Report.Wizard.ChooseReportTypePage(this),
                            new Report.Wizard.SelectPredefinedLabelsPage(this),
                            new Report.Wizard.CustomizeLabelPage(this),
                            this._selectDataSourcePage,
                            new Report.Wizard.ReportWizardSelectConnectionString(this, connectionStrings),
                            new Report.Wizard.ReportWizardAddQueriesPage(this, callbacks, disableCustomSql, false),
                            new Report.Wizard.ReportWizardConfigureParametersPage(this),
                            new Report.Wizard.ReportWizardMasterDetailRelationsPage(this, callbacks.sqlDataSourceResultSchema)
                        ].concat(reportWizardSteps, [
                            new Report.Wizard.SetReportTitlePage(this)
                        ]);
                    }
                    ReportWizard.prototype.start = function (data, finishCallback, reportModel) {
                        if (reportModel === void 0) { reportModel = null; }
                        this.startWithCustomDataSources(this._dataSources(), data, finishCallback, reportModel);
                    };
                    ReportWizard.prototype.startWithCustomDataSources = function (dataSources, data, finishCallback, reportModel) {
                        this._selectDataSourcePage.availableDataSources(ReportWizard._cloneDataSources(dataSources));
                        if (data && reportModel)
                            data.initPageSetup(reportModel);
                        _super.prototype.start.call(this, data || new ReportWizardModel(this.isMasterDetailWizard, Report.QBRequestWrapper, reportModel), Wizard.WizardViewModel.chainCallbacks(finishCallback, this.finishCallback));
                    };
                    ReportWizard._masterDetailWizardHeight = "600";
                    ReportWizard._masterDetailWizardWidth = "840";
                    ReportWizard._masterDetailScrollViewHeight = "390";
                    ReportWizard._cloneDataSources = function (dataSources) {
                        return dataSources.map(function (item) {
                            var newDS = $.extend({}, item);
                            newDS.data = item.data.clone();
                            return newDS;
                        });
                    };
                    return ReportWizard;
                })(Wizard.WizardViewModel);
                Wizard.ReportWizard = ReportWizard;
                var DataSourceWizard = (function (_super) {
                    __extends(DataSourceWizard, _super);
                    function DataSourceWizard(dataSources, fieldListsCallback) {
                        _super.call(this);
                        this.title = Designer.getLocalization("Report Wizard", "ASPxReportsStringId.ReportDesigner_Wizard_Header");
                        var columnsPage = new Report.Wizard.SelectColumnsPage(this, fieldListsCallback);
                        columnsPage.actionNext.isDisabled = ko.pureComputed(function () {
                            return true;
                        });
                        this.steps = [
                            new Report.Wizard.SelectDataSourcePage(this, dataSources, ko.observable(false)),
                            new Report.Wizard.SelectDataMemberPage(this, fieldListsCallback, Report.SqlDataSourceEditor.createSqlDataSourceInfo, true),
                            columnsPage
                        ];
                    }
                    DataSourceWizard.prototype.start = function () {
                        _super.prototype.start.call(this, new ReportWizardModel(undefined, Report.QBRequestWrapper));
                    };
                    return DataSourceWizard;
                })(Wizard.WizardViewModel);
                Wizard.DataSourceWizard = DataSourceWizard;
                function isQueryChecked(query) {
                    return query.checked !== false;
                }
                var ReportWizardModel = (function (_super) {
                    __extends(ReportWizardModel, _super);
                    function ReportWizardModel(useMasterDetailBuilder, requestWrapper, reportModel) {
                        var _this = this;
                        if (useMasterDetailBuilder === void 0) { useMasterDetailBuilder = false; }
                        _super.call(this, requestWrapper);
                        this.useMasterDetailBuilder = useMasterDetailBuilder;
                        this._dataSource = null;
                        this._groups = [];
                        this._reportTree = [];
                        this.reportType = Wizard.ReportType.Databound;
                        this.dataMemberPath = ko.observable(null);
                        this.dataMember = ko.observable(null);
                        this.fields = ko.observableArray([]);
                        this.masterDetailInfoCollection = ko.observableArray([]);
                        this.getOnlyCheckedQueries = function (queries) {
                            if (queries === void 0) { queries = _this.masterDetailInfoCollection(); }
                            return queries.filter(function (query) { return isQueryChecked(query); });
                        };
                        this.initPageSetup = function (model) {
                            var unit;
                            var _pageSetupProps = [
                                model.pageWidth(),
                                model.pageHeight(),
                                model.margins.left(),
                                model.margins.right(),
                                model.margins.top(),
                                model.margins.bottom()
                            ];
                            switch (model.measureUnit()) {
                                case "HundredthsOfAnInch":
                                    _pageSetupProps = _pageSetupProps.map(function (x) { return x / 100; });
                                    unit = Report.GraphicsUnit.Inch;
                                    break;
                                case "TenthsOfAMillimeter":
                                    _pageSetupProps = _pageSetupProps.map(function (x) { return x / 10; });
                                    unit = Report.GraphicsUnit.Millimeter;
                                    break;
                                case "Pixels":
                                    unit = Report.GraphicsUnit.Pixel;
                                    break;
                            }
                            _this.portrait = !model.landscape();
                            _this.pageSetup = {
                                paperKind: model.paperKind(),
                                unit: unit,
                                width: _pageSetupProps[0],
                                height: _pageSetupProps[1],
                                marginLeft: _pageSetupProps[2],
                                marginRight: _pageSetupProps[3],
                                marginTop: _pageSetupProps[4],
                                marginBottom: _pageSetupProps[5]
                            };
                        };
                        this.reportTree = function () {
                            return _this._reportTree;
                        };
                        this.masterDetailGroups = {};
                        this.summaryOptionsColumns = ko.observableArray([]);
                        this.masterDetailSummaryOptionsColumns = {};
                        this.masterDetailSummariesInfo = {};
                        this.ignoreNullValuesForSummary = false;
                        this.fitFieldsToPage = true;
                        this.layout = Wizard.ReportLayout.columnar;
                        this.portrait = true;
                        this.style = Wizard.ReportStyle.Bold;
                        this.reportTitle = "";
                        this.dataMemberPath.subscribe(function () {
                            _this.fields([]);
                        });
                        this.fields.subscribe(function (changes) {
                            var isFieldsChanged = changes.some(function (change, index, array) {
                                return !change["moved"] && change["moved"] !== 0;
                            });
                            if (isFieldsChanged) {
                                _this.groups = [];
                                _this.summaryOptionsColumns([]);
                            }
                        }, null, "arrayChange");
                        this.summaryOptionsColumns.subscribe(function (changes) {
                            _this.summaryOptions = [];
                        });
                        this.masterDetailInfoCollection.subscribe(function (changes) {
                            var isFieldsChanged = changes.some(function (change, index, array) {
                                return !change["moved"] && change["moved"] !== 0;
                            });
                            if (isFieldsChanged) {
                                _this._reportTree = [];
                                _this._fillTreeQueries(_this.getOnlyCheckedQueries(), 0);
                                _this.masterDetailGroups = {};
                                _this.masterDetailSummaryOptionsColumns = {};
                                _this.masterDetailSummariesInfo = {};
                            }
                        }, null, "arrayChange");
                        if (reportModel) {
                            this.initPageSetup(reportModel);
                        }
                    }
                    ReportWizardModel.prototype._fillTreeQueries = function (queries, level) {
                        var _this = this;
                        var lvl = level;
                        queries.forEach(function (query) {
                            if (isQueryChecked(query)) {
                                var fields = query.fields.filter(function (field) { return field.checked; }).map((function (value) { return { name: value.name, displayName: value.displayName, specifics: value.specifics }; }));
                                _this._reportTree.push({ name: query.displayName || query.name, path: query.path, fields: fields, level: level });
                                if (query.relations.length > 0) {
                                    var newLvl = lvl + 1;
                                    _this._fillTreeQueries(query.relations, newLvl);
                                }
                            }
                        });
                    };
                    Object.defineProperty(ReportWizardModel.prototype, "dataSource", {
                        get: function () {
                            return this._dataSource;
                        },
                        set: function (value) {
                            if (this._dataSource != value) {
                                this.dataMember(null);
                                this.dataMemberPath(null);
                                this._dataSource = value;
                                this.masterDetailInfoCollection([]);
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ReportWizardModel.prototype, "groups", {
                        get: function () {
                            return this._groups;
                        },
                        set: function (value) {
                            if (this._groups.length != value.length && (this._groups.length === 0 || value.length === 0)) {
                                this.layout = value.length > 0 ? Wizard.ReportLayout.stepped : Wizard.ReportLayout.columnar;
                            }
                            this._groups = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return ReportWizardModel;
                })(Wizard.MultiQueryDataSourceWizardModel);
                Wizard.ReportWizardModel = ReportWizardModel;
                var ListViewModel = (function () {
                    function ListViewModel(caption) {
                        var _this = this;
                        this.caption = caption;
                        this._items = ko.observableArray([]);
                        this._refreshActiveItem = function (previousActivItemIndex) {
                            if (previousActivItemIndex === void 0) { previousActivItemIndex = -1; }
                            if (_this.isEmpty) {
                                _this.activeItemArray.removeAll();
                            }
                            else if (previousActivItemIndex < 0) {
                                _this.activeItemArray.splice(0, 1, _this._items()[0]);
                            }
                            else {
                                if (previousActivItemIndex >= _this._items().length) {
                                    previousActivItemIndex = _this._items().length - 1;
                                }
                                _this.activeItemArray.splice(0, 1, _this._items()[previousActivItemIndex]);
                            }
                        };
                        this.activeItemArray = ko.observableArray([]);
                    }
                    Object.defineProperty(ListViewModel.prototype, "items", {
                        get: function () {
                            return this._items();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ListViewModel.prototype, "activeItem", {
                        get: function () {
                            return this.activeItemArray().length === 1 ? this.activeItemArray()[0] : null;
                        },
                        set: function (value) {
                            if (this._items().indexOf(value) > -1) {
                                this.activeItemArray.splice(0, 1, value);
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ListViewModel.prototype.add = function (item) {
                        this._items.push(item);
                        this.activeItemArray.splice(0, 1, item);
                    };
                    ListViewModel.prototype.addRange = function (items) {
                        this.setItems(this._items().concat(items));
                    };
                    ListViewModel.prototype.removeActiveItem = function () {
                        var index = this._items.indexOf(this.activeItemArray()[0]);
                        this._items.remove(this.activeItemArray()[0]);
                        this._refreshActiveItem(index);
                    };
                    ListViewModel.prototype.removeAll = function () {
                        this._items.removeAll();
                        this.activeItemArray.removeAll();
                    };
                    ListViewModel.prototype.setItems = function (items) {
                        this._items(items);
                        this.activeItemArray([this._items()[0]]);
                        this._refreshActiveItem();
                    };
                    ListViewModel.prototype.moveUp = function () {
                        if (this.isMoveUpEnabled()) {
                            var index = this._items.indexOf(this.activeItem);
                            this.activeItemArray.removeAll();
                            this._items.splice(index - 1, 2, this._items()[index], this._items()[index - 1]);
                            this.activeItemArray.splice(0, 1, this._items()[index - 1]);
                        }
                    };
                    ListViewModel.prototype.moveDown = function () {
                        if (this.isMoveDownEnabled()) {
                            var index = this._items.indexOf(this.activeItem);
                            this.activeItemArray.removeAll();
                            this._items.splice(index, 2, this._items()[index + 1], this._items()[index]);
                            this.activeItemArray.splice(0, 1, this._items()[index + 1]);
                        }
                    };
                    Object.defineProperty(ListViewModel.prototype, "isEmpty", {
                        get: function () {
                            return this._items().length === 0;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ListViewModel.prototype.isMoveUpEnabled = function () {
                        return this._items.indexOf(this.activeItemArray()[0]) > 0;
                    };
                    ListViewModel.prototype.isMoveDownEnabled = function () {
                        var index = this._items.indexOf(this.activeItemArray()[0]);
                        return index > -1 && index < this._items().length - 1;
                    };
                    return ListViewModel;
                })();
                Wizard.ListViewModel = ListViewModel;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var DataMemberPageTreeListController = (function (_super) {
                    __extends(DataMemberPageTreeListController, _super);
                    function DataMemberPageTreeListController() {
                        _super.apply(this, arguments);
                    }
                    DataMemberPageTreeListController.prototype.canSelect = function (value) {
                        return (value.hasItems && !!value.path) || value.data.specifics === "none";
                    };
                    return DataMemberPageTreeListController;
                })(Designer.DataMemberTreeListController);
                var SelectDataMemberPage = (function (_super) {
                    __extends(SelectDataMemberPage, _super);
                    function SelectDataMemberPage(wizard, fieldListItemsCallback, createSqlDataSourceInfo, hideDataMemberSubItems) {
                        var _this = this;
                        if (hideDataMemberSubItems === void 0) { hideDataMemberSubItems = false; }
                        _super.call(this, wizard);
                        this._rootItems = ko.observableArray([]);
                        this._selectedPath = ko.observable(null);
                        this.template = "dxrd-page-dataMember";
                        this.description = Designer.getLocalization("The table or view you choose determines wich columns will be available in your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataMember");
                        this.actionNext.isDisabled = this.actionFinish.isDisabled = ko.pureComputed(function () {
                            return _this._selectedPath() === null || _this._selectedPath() === undefined;
                        });
                        this._fieldListCallBack = fieldListItemsCallback;
                        this._createSqlDataSourceInfo = createSqlDataSourceInfo;
                        this._hideDataMemberSubItems = hideDataMemberSubItems;
                        this.scrollViewHeight = wizard instanceof Wizard.ReportWizard && wizard.isMasterDetailWizard ? Wizard.ReportWizard._masterDetailScrollViewHeight : Wizard.WizardViewModel.WIZARD_DEFAULT_SCROLLVIEW_HEIGHT;
                        this.fieldListModel = {
                            itemsProvider: new Designer.FieldListProvider(this._wrapFieldListCallback(fieldListItemsCallback), this._rootItems),
                            selectedPath: this._selectedPath,
                            treeListController: new DataMemberPageTreeListController()
                        };
                    }
                    SelectDataMemberPage.prototype._getSelectedDataMember = function () {
                        if (this.isVisible) {
                            return this.fieldListModel.treeListController.selectedItem && this.fieldListModel.treeListController.selectedItem.data;
                        }
                        if (this._dataSource) {
                            return {
                                name: this._selectedPath() ? this.dataSourcePath : "",
                                displayName: this._dataSource.name,
                                isList: true,
                                specifics: this._dataSource.specifics || "ListSource"
                            };
                        }
                    };
                    SelectDataMemberPage.prototype._wrapFieldListCallback = function (itemsCallback) {
                        var _this = this;
                        return function (pathRequest) {
                            if (_this._hideDataMemberSubItems) {
                                var deferred = $.Deferred();
                                deferred.resolve([]);
                                return deferred.promise();
                            }
                            else {
                                return itemsCallback(new DevExpress.JS.Widgets.PathRequest(_this.dataSourcePath + '.' + pathRequest.fullPath), _this._dataSource);
                            }
                        };
                    };
                    Object.defineProperty(SelectDataMemberPage.prototype, "dataSourcePath", {
                        get: function () {
                            return (this._dataSource.id || this._dataSource.ref);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SelectDataMemberPage.prototype._beginInternal = function (data) {
                        var _this = this;
                        this._dataSource = data.dataSource;
                        if (data.dataMemberPath() === null) {
                            return this._fieldListCallBack(new DevExpress.JS.Widgets.PathRequest(this.dataSourcePath), this._dataSource).done(function (fields) {
                                _this._selectedPath(null);
                                _this.isVisible = fields.length > 0 && !fields.some(function (item) {
                                    return (item.specifics !== "List" && item.specifics !== "ListSource" && item.isList !== true);
                                });
                                _this._rootItems(fields.map(function (value) {
                                    return {
                                        name: value.displayName,
                                        id: value.name,
                                        specifics: "List",
                                        dataSerializer: null,
                                        data: {}
                                    };
                                }));
                            });
                        }
                        else if (this.isVisible) {
                            this._selectedPath(data.dataMemberPath().replace(this.dataSourcePath + ".", ""));
                        }
                    };
                    SelectDataMemberPage.prototype.beginAsync = function (data) {
                        var _this = this;
                        if (!data.dataSource) {
                            var deferred = $.Deferred();
                            this._createSqlDataSourceInfo(data.sqlDataSourceWizardModel.sqlDataSource)
                                .done(function (result) {
                                result.data = Report.ObjectItem.createNew(result.data);
                                data.dataSource = result;
                                _this._beginInternal(data)
                                    .done(deferred.resolve)
                                    .fail(deferred.reject);
                            }).fail(deferred.reject);
                            return deferred.promise();
                        }
                        else {
                            return this._beginInternal(data);
                        }
                    };
                    SelectDataMemberPage.prototype.commit = function (data) {
                        data.dataMemberPath(Designer.getFullPath(this.dataSourcePath, this._selectedPath()));
                        data.dataMember(this._getSelectedDataMember());
                    };
                    return SelectDataMemberPage;
                })(Wizard.WizardPage);
                Wizard.SelectDataMemberPage = SelectDataMemberPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                (function (ReportType) {
                    ReportType[ReportType["Empty"] = 3] = "Empty";
                    ReportType[ReportType["Databound"] = 0] = "Databound";
                    ReportType[ReportType["Label"] = 2] = "Label";
                })(Wizard.ReportType || (Wizard.ReportType = {}));
                var ReportType = Wizard.ReportType;
                var ReportTypeItem = (function () {
                    function ReportTypeItem(textDefault, textID, imageClassName, reportType) {
                        this.imageClassName = imageClassName;
                        this.reportType = reportType;
                        this.text = Designer.getLocalization(textDefault, textID);
                    }
                    return ReportTypeItem;
                })();
                Wizard.ReportTypeItem = ReportTypeItem;
                var ChooseReportTypePage = (function (_super) {
                    __extends(ChooseReportTypePage, _super);
                    function ChooseReportTypePage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-page-reportType";
                        this.description = Designer.getLocalization("Select the report type you wish to create.", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_Message");
                        this.selectedItem = ko.observable();
                        this.itemClick = function (item) {
                            _this.selectedItem(item);
                        };
                        this.IsSelected = function (item) {
                            return _this.selectedItem() === item;
                        };
                        this.actionNext.isDisabled = ko.pureComputed(function () {
                            return _this.selectedItem() === null || _this.selectedItem().reportType === ReportType.Empty;
                        });
                        this.actionFinish.isDisabled = ko.pureComputed(function () {
                            return _this.selectedItem() === null || _this.selectedItem().reportType !== ReportType.Empty;
                        });
                        this.reportTypeItems = [
                            new ReportTypeItem("Empty Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_EmptyReport", "emptyReport", ReportType.Empty),
                            new ReportTypeItem("Data-bound Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_DataBoundReport", "databoundReport", ReportType.Databound),
                            new ReportTypeItem("Label Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_LabelReport", "labelReport", ReportType.Label)
                        ];
                        this.actionPrevious.isVisible(false);
                    }
                    ChooseReportTypePage.prototype._begin = function (data) {
                        var reportType = data.reportType || ReportType.Databound;
                        this.selectedItem(Designer.findFirstItemMatchesCondition(this.reportTypeItems, function (item) { return item.reportType === reportType; }));
                    };
                    ChooseReportTypePage.prototype.commit = function (data) {
                        data.reportType = this.selectedItem().reportType;
                    };
                    return ChooseReportTypePage;
                })(Wizard.WizardPage);
                Wizard.ChooseReportTypePage = ChooseReportTypePage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SelectDataSourcePage = (function (_super) {
                    __extends(SelectDataSourcePage, _super);
                    function SelectDataSourcePage(wizard, availableDataSources, isDataSourceCreationAvailable) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-page-dataSource";
                        this.description = Designer.getLocalization("Choose a Data Source to use in your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataSource");
                        this.selectedDataSource = ko.observableArray([]);
                        this.dataSourceOperations = [
                            { text: Designer.getLocalization("Yes, let me choose an existing data source from the list", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataSourceFromList"), createNewDataSource: false },
                            { text: Designer.getLocalization("No, I'd like to create a new SQL data source", "ASPxReportsStringId.ReportDesigner_Wizard_CreateNewDataSource"), createNewDataSource: true }
                        ];
                        this.selectedDataSourceOperation = ko.observable(this.dataSourceOperations[0]);
                        this.createNewDataSource = ko.pureComputed(function () { return _this.selectedDataSourceOperation().createNewDataSource; });
                        this.availableDataSources = availableDataSources;
                        this.actionNext.isDisabled = ko.pureComputed(function () {
                            return _this.selectedDataSource().length === 0 && !_this.selectedDataSourceOperation().createNewDataSource;
                        });
                        this.actionFinish.isDisabled(true);
                        this.isDataSourceCreationAvailable = isDataSourceCreationAvailable;
                        var isMasterDetailWizard = wizard instanceof Wizard.ReportWizard && wizard.isMasterDetailWizard;
                        this.dataSourcesListHeight = ko.pureComputed(function () {
                            if (_this.isDataSourceCreationAvailable())
                                return isMasterDetailWizard ? 282 : 221;
                            else
                                return isMasterDetailWizard ? parseInt(Wizard.ReportWizard._masterDetailScrollViewHeight) : parseInt(Wizard.WizardViewModel.WIZARD_DEFAULT_SCROLLVIEW_HEIGHT);
                        });
                    }
                    SelectDataSourcePage.prototype._begin = function (data) {
                        if (this.isDataSourceCreationAvailable()) {
                            this.isVisible = this.availableDataSources().length > 0;
                            if (!this.isVisible) {
                                this.selectedDataSourceOperation(this.dataSourceOperations[1]);
                            }
                            this.description = Designer.getLocalization("Do you want to use an existing data source?", "ASPxReportsStringId.ReportDesigner_Wizard_UseExisting_DataSource");
                        }
                        else {
                            this.isVisible = this.availableDataSources().length !== 1;
                            this.description = Designer.getLocalization("Choose a Data Source to use in your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataSource_Description");
                        }
                        if (data.dataSource) {
                            this.selectedDataSource([data.dataSource]);
                        }
                        else {
                            this.selectedDataSource(this.availableDataSources().length > 0 ? [this.availableDataSources()[0]] : []);
                        }
                    };
                    SelectDataSourcePage.prototype.commit = function (data) {
                        if (this.selectedDataSourceOperation().createNewDataSource) {
                            data.dataSource = null;
                            data.sqlDataSourceWizardModel = data.sqlDataSourceWizardModel || new Wizard.MultiQueryDataSourceWizardModel(Report.QBRequestWrapper);
                        }
                        else {
                            data.dataSource = this.selectedDataSource()[0];
                            data.sqlDataSourceWizardModel = null;
                        }
                    };
                    SelectDataSourcePage.prototype.reset = function () {
                        this.selectedDataSourceOperation(this.dataSourceOperations[0]);
                    };
                    return SelectDataSourcePage;
                })(Wizard.WizardPage);
                Wizard.SelectDataSourcePage = SelectDataSourcePage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SelectColumnsPage = (function (_super) {
                    __extends(SelectColumnsPage, _super);
                    function SelectColumnsPage(wizard, getFieldListItems) {
                        var _this = this;
                        _super.call(this, wizard);
                        this._selectedPath = null;
                        this._fields = [];
                        this.template = "dxrd-page-columns";
                        this.description = Designer.getLocalization("Select the columns you want to display within your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseColumns");
                        this.availableFields = new Wizard.ListViewModel(Designer.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields"));
                        this.selectedFields = new Wizard.ListViewModel(Designer.getLocalization("Selected fields", "ASPxReportsStringId.ReportDesigner_Wizard_SelectedFields"));
                        this.isSelectEnable = ko.pureComputed(function () {
                            return !!_this.availableFields.activeItem;
                        });
                        this.isUnselectEnable = ko.pureComputed(function () {
                            return !!_this.selectedFields.activeItem;
                        });
                        this.select = function () {
                            _this.selectedFields.add(_this.availableFields.activeItem);
                            _this.availableFields.removeActiveItem();
                        };
                        this.selectAll = function () {
                            _this.selectedFields.setItems(_this._fields.slice(0));
                            _this.availableFields.removeAll();
                        };
                        this.unselect = function () {
                            _this.availableFields.add(_this.selectedFields.activeItem);
                            _this.selectedFields.removeActiveItem();
                        };
                        this.unselectAll = function () {
                            _this.availableFields.setItems(_this._fields.slice(0));
                            _this.selectedFields.removeAll();
                        };
                        this.availableFieldDblClick = function (field) {
                            _this.availableFields.activeItem = field;
                            _this.select();
                        };
                        this.availableFieldClick = function (e) {
                            _this.availableFields.activeItem = e.itemData;
                        };
                        this.selectedFieldDblClick = function (field) {
                            _this.selectedFields.activeItem = field;
                            _this.unselect();
                        };
                        this.selectedFieldClick = function (e) {
                            _this.selectedFields.activeItem = e.itemData;
                        };
                        this.actionNext.isDisabled = ko.pureComputed(function () {
                            return _this.selectedFields.isEmpty;
                        });
                        this._fieldListsCallback = getFieldListItems;
                        this.actionFinish.isDisabled(false);
                    }
                    SelectColumnsPage.prototype.beginAsync = function (data) {
                        var _this = this;
                        this.selectedFields.setItems(data.fields().slice(0));
                        if (this._selectedPath != data.dataMemberPath()) {
                            return this._fieldListsCallback(new DevExpress.JS.Widgets.PathRequest(data.dataMemberPath()), data.dataSource)
                                .done(function (fields) {
                                _this._fields = fields.filter(function (item) {
                                    return (item.specifics !== "List" && item.specifics !== "ListSource" && item.isList !== true);
                                });
                                _this._selectedPath = data.dataMemberPath();
                                _this.availableFields.setItems(_this._fields.filter(function (value) {
                                    return _this.selectedFields.items.indexOf(value) === -1;
                                }));
                            });
                        }
                        else {
                            this.availableFields.setItems(this._fields.filter(function (value) {
                                return _this.selectedFields.items.indexOf(value) === -1;
                            }));
                        }
                    };
                    SelectColumnsPage.prototype.commit = function (data) {
                        data.fields(this.selectedFields.items);
                    };
                    SelectColumnsPage.prototype.selectedPath = function () {
                        return this._selectedPath;
                    };
                    SelectColumnsPage.prototype.reset = function () {
                        this._selectedPath = null;
                    };
                    return SelectColumnsPage;
                })(Wizard.WizardPage);
                Wizard.SelectColumnsPage = SelectColumnsPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var AddGroupingLevelPage = (function (_super) {
                    __extends(AddGroupingLevelPage, _super);
                    function AddGroupingLevelPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-page-groups";
                        this.description = Designer.getLocalization("Create multiple groups, each with a single field value, or define several fields in the same group.", "ASPxReportsStringId.ReportDesigner_Wizard_CreateGroups");
                        this.fields = new Wizard.ListViewModel(Designer.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields"));
                        this.groups = new Wizard.ListViewModel(Designer.getLocalization("Groups", "ASPxReportsStringId.ReportDesigner_Groups"));
                        this.addNewGroup = function () {
                            if (_this.isCreateGroupEnabled()) {
                                _this.groups.add({ fields: ko.observableArray([_this.fields.activeItem]) });
                                _this.fields.removeActiveItem();
                            }
                        };
                        this.appendFieldsToGroup = function () {
                            if (_this.isAppendToGroupEnabled()) {
                                _this.groups.activeItem.fields.push(_this.fields.activeItem);
                                _this.fields.removeActiveItem();
                            }
                        };
                        this.removeGroup = function () {
                            if (_this.isRemoveGroupEnabled()) {
                                _this.fields.addRange(_this.groups.activeItem.fields());
                                _this.groups.removeActiveItem();
                            }
                        };
                        this.isCreateGroupEnabled = ko.pureComputed(function () {
                            return !!_this.fields.activeItem;
                        });
                        this.isAppendToGroupEnabled = ko.pureComputed(function () {
                            return _this.fields.activeItem && _this.groups.activeItem && _this.groups.activeItem.fields().length > 0;
                        });
                        this.isRemoveGroupEnabled = ko.pureComputed(function () {
                            return _this.groups.activeItem && _this.groups.activeItem.fields().length > 0;
                        });
                        this.moveUp = function () {
                            _this.groups.moveUp();
                        };
                        this.moveDown = function () {
                            _this.groups.moveDown();
                        };
                        this.isMoveUpEnabled = ko.pureComputed(function () {
                            return _this.groups.isMoveUpEnabled();
                        });
                        this.isMoveDownEnabled = ko.pureComputed(function () {
                            return _this.groups.isMoveDownEnabled();
                        });
                        this.fieldDblClick = function (field) {
                            _this.fields.activeItem = field;
                            _this.addNewGroup();
                        };
                        this.fieldClick = function (e) {
                            _this.fields.activeItem = e.itemData;
                        };
                        this.groupDblClick = function (group) {
                            _this.groups.activeItem = group;
                            _this.removeGroup();
                        };
                        this.groupClick = function (e) {
                            _this.groups.activeItem = e.itemData;
                        };
                    }
                    AddGroupingLevelPage.prototype._begin = function (data) {
                        var fields = ko.observableArray(data.fields().map(function (value, index, array) { return value.displayName; }));
                        this.groups.setItems(data.groups.map(function (value) {
                            fields.removeAll(value);
                            return { fields: ko.observableArray(value) };
                        }));
                        this.fields.setItems(fields());
                    };
                    AddGroupingLevelPage.prototype.commit = function (data) {
                        data.groups = this.groups.items.map(function (item) {
                            return item.fields();
                        });
                        var summaryColumns = [];
                        if (!this.groups.isEmpty) {
                            this.fields.items.forEach(function (fieldName) {
                                var field = Designer.getFirstItemByPropertyValue(data.fields(), "displayName", fieldName);
                                if (field.specifics && ["integer", "float", "date"].indexOf(field.specifics.toLowerCase()) > -1) {
                                    summaryColumns.push(field);
                                }
                            });
                            summaryColumns.sort(function (a, b) { return a.name.localeCompare(b.name); });
                        }
                        data.summaryOptionsColumns(summaryColumns);
                    };
                    return AddGroupingLevelPage;
                })(Wizard.WizardPage);
                Wizard.AddGroupingLevelPage = AddGroupingLevelPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SummaryOptionsWrapper = (function () {
                    function SummaryOptionsWrapper(name, displayName) {
                        this.avg = ko.observable(false);
                        this.count = ko.observable(false);
                        this.max = ko.observable(false);
                        this.min = ko.observable(false);
                        this.sum = ko.observable(false);
                        this._name = name;
                        this.columnName = displayName;
                    }
                    SummaryOptionsWrapper._getNumber = function (value) {
                        return value ? 1 : 0;
                    };
                    SummaryOptionsWrapper.prototype.getOptions = function () {
                        return {
                            columnName: this._name,
                            flags: SummaryOptionsWrapper._getNumber(this.sum()) << 0 |
                                SummaryOptionsWrapper._getNumber(this.avg()) << 1 |
                                SummaryOptionsWrapper._getNumber(this.min()) << 2 |
                                SummaryOptionsWrapper._getNumber(this.max()) << 3 |
                                SummaryOptionsWrapper._getNumber(this.count()) << 4
                        };
                    };
                    return SummaryOptionsWrapper;
                })();
                Wizard.SummaryOptionsWrapper = SummaryOptionsWrapper;
                var ChooseSummaryOptionsPage = (function (_super) {
                    __extends(ChooseSummaryOptionsPage, _super);
                    function ChooseSummaryOptionsPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this._columns = [];
                        this.template = "dxrd-page-summaryOptions";
                        this.description = Designer.getLocalization("What summary function would you like to calculate?", "ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions");
                        this.summaryOptions = ko.observableArray([]);
                        this.ignoreNullValues = ko.observable(false);
                        this.toggleIgnoreNullValues = function () {
                            _this.ignoreNullValues(!_this.ignoreNullValues());
                        };
                    }
                    ChooseSummaryOptionsPage.prototype._begin = function (data) {
                        var _this = this;
                        this.isVisible = data.summaryOptionsColumns().length > 0;
                        if (!this.isVisible)
                            return;
                        this.ignoreNullValues(data.ignoreNullValuesForSummary);
                        var changes = ko.utils.compareArrays(data.summaryOptionsColumns(), this._columns);
                        var isColumnsChanged = changes.some(function (change, index, array) { return change.status != "retained"; });
                        if (isColumnsChanged) {
                            this._columns = data.summaryOptionsColumns();
                            this.summaryOptions.removeAll();
                            this._columns.forEach(function (column) {
                                _this.summaryOptions.push(new SummaryOptionsWrapper(column.name, column.displayName));
                            });
                        }
                        this.summaryOptions.notifySubscribers();
                    };
                    ChooseSummaryOptionsPage.prototype.commit = function (data) {
                        data.ignoreNullValuesForSummary = this.ignoreNullValues();
                        data.summaryOptions = this.summaryOptions().map(function (value) { return value.getOptions(); });
                    };
                    return ChooseSummaryOptionsPage;
                })(Wizard.WizardPage);
                Wizard.ChooseSummaryOptionsPage = ChooseSummaryOptionsPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                (function (ReportLayout) {
                    ReportLayout[ReportLayout["stepped"] = 0] = "stepped";
                    ReportLayout[ReportLayout["block"] = 1] = "block";
                    ReportLayout[ReportLayout["outline1"] = 2] = "outline1";
                    ReportLayout[ReportLayout["outline2"] = 3] = "outline2";
                    ReportLayout[ReportLayout["alignLeft1"] = 4] = "alignLeft1";
                    ReportLayout[ReportLayout["alignLeft2"] = 5] = "alignLeft2";
                    ReportLayout[ReportLayout["columnar"] = 6] = "columnar";
                    ReportLayout[ReportLayout["tabular"] = 7] = "tabular";
                    ReportLayout[ReportLayout["justified"] = 8] = "justified";
                })(Wizard.ReportLayout || (Wizard.ReportLayout = {}));
                var ReportLayout = Wizard.ReportLayout;
                var LyaoutTypeItem = (function () {
                    function LyaoutTypeItem(textValue, textID, layoutType, margin) {
                        this.layoutType = layoutType;
                        this.margin = margin;
                        this.text = Designer.getLocalization(textValue, textID);
                    }
                    Object.defineProperty(LyaoutTypeItem.prototype, "imageClassName", {
                        get: function () {
                            return "dxrd-report-layout-type-image-" + ReportLayout[this.layoutType].toLowerCase();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return LyaoutTypeItem;
                })();
                Wizard.LyaoutTypeItem = LyaoutTypeItem;
                (function (PageOrientation) {
                    PageOrientation[PageOrientation["Portrait"] = 0] = "Portrait";
                    PageOrientation[PageOrientation["Landscape"] = 1] = "Landscape";
                })(Wizard.PageOrientation || (Wizard.PageOrientation = {}));
                var PageOrientation = Wizard.PageOrientation;
                var PageOrientationItem = (function () {
                    function PageOrientationItem(textValue, textID, orientation) {
                        this.orientation = orientation;
                        this.text = Designer.getLocalization(textValue, textID);
                    }
                    return PageOrientationItem;
                })();
                Wizard.PageOrientationItem = PageOrientationItem;
                var ChooseReportLayoutPage = (function (_super) {
                    __extends(ChooseReportLayoutPage, _super);
                    function ChooseReportLayoutPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this._isGroupedReport = ko.observable(false);
                        this._reportLayoutTypes = [
                            new LyaoutTypeItem("Columnar", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Columnar", ReportLayout.columnar, 18),
                            new LyaoutTypeItem("Tabular", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Tabular", ReportLayout.tabular, 18),
                            new LyaoutTypeItem("Justified", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Justified", ReportLayout.justified, 18)
                        ];
                        this._groupedRreportLayoutsTypes = [
                            new LyaoutTypeItem("Stepped", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Stepped", ReportLayout.stepped, 1),
                            new LyaoutTypeItem("Outline 1", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline1", ReportLayout.outline1, 1),
                            new LyaoutTypeItem("Outline 2", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline2", ReportLayout.outline2, 1),
                            new LyaoutTypeItem("Align Left 1", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft1", ReportLayout.alignLeft1, 1),
                            new LyaoutTypeItem("Align Left 2", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft2", ReportLayout.alignLeft2, 1)
                        ];
                        this._pageOriantation = PageOrientation.Portrait;
                        this.template = "dxrd-page-reportLayoutType";
                        this.description = Designer.getLocalization("The report layout specifies the manner in which selected data fields are arranged on individual pages.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout");
                        this.toggleFitFieldsToPage = function () {
                            _this.fitFieldsToPage(!_this.fitFieldsToPage());
                        };
                        this.selectedLayoutType = ko.observable(null);
                        this.fitFieldsToPage = ko.observable(true);
                        this.pageOrientationItems = [
                            new PageOrientationItem("Portrait", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait", PageOrientation.Portrait),
                            new PageOrientationItem("Landscape", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape", PageOrientation.Landscape)
                        ];
                        this.selectedPageOrientation = ko.observable(this.pageOrientationItems[0]);
                        this.layoutTypeItems = ko.pureComputed(function () {
                            var items = _this._isGroupedReport() ? _this._groupedRreportLayoutsTypes : _this._reportLayoutTypes;
                            _this.selectedLayoutType(items[0]);
                            return items;
                        });
                        this.layoutTypeItemClick = function (item) {
                            _this.selectedLayoutType(item);
                        };
                        this.isSelected = function (item) {
                            return _this.selectedLayoutType() === item;
                        };
                    }
                    ChooseReportLayoutPage.prototype._begin = function (data) {
                        this._isGroupedReport(data.groups.length > 0);
                        this.selectedLayoutType(Designer.getFirstItemByPropertyValue(this.layoutTypeItems(), "layoutType", data.layout));
                        this.fitFieldsToPage(data.fitFieldsToPage);
                        this.selectedPageOrientation(data.portrait ? this.pageOrientationItems[0] : this.pageOrientationItems[1]);
                    };
                    ChooseReportLayoutPage.prototype.commit = function (data) {
                        data.layout = this.selectedLayoutType().layoutType;
                        data.fitFieldsToPage = this.fitFieldsToPage();
                        data.portrait = this.selectedPageOrientation().orientation === PageOrientation.Portrait;
                    };
                    return ChooseReportLayoutPage;
                })(Wizard.WizardPage);
                Wizard.ChooseReportLayoutPage = ChooseReportLayoutPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                (function (ReportStyle) {
                    ReportStyle[ReportStyle["Bold"] = 0] = "Bold";
                    ReportStyle[ReportStyle["Casual"] = 1] = "Casual";
                    ReportStyle[ReportStyle["Compact"] = 2] = "Compact";
                    ReportStyle[ReportStyle["Corporate"] = 3] = "Corporate";
                    ReportStyle[ReportStyle["Formal"] = 4] = "Formal";
                })(Wizard.ReportStyle || (Wizard.ReportStyle = {}));
                var ReportStyle = Wizard.ReportStyle;
                var ReportStyleItem = (function () {
                    function ReportStyleItem(textDefault, textID, reportStyle) {
                        this.reportStyle = reportStyle;
                        this.text = Designer.getLocalization(textDefault, textID);
                    }
                    Object.defineProperty(ReportStyleItem.prototype, "className", {
                        get: function () {
                            return 'dxrd-wizard-report-style-image ' + ReportStyle[this.reportStyle].toLowerCase();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return ReportStyleItem;
                })();
                Wizard.ReportStyleItem = ReportStyleItem;
                var ChooseReportStylePage = (function (_super) {
                    __extends(ChooseReportStylePage, _super);
                    function ChooseReportStylePage(wizard) {
                        _super.call(this, wizard);
                        this.template = "dxrd-page-reportStyle";
                        this.description = Designer.getLocalization("The report style specifies the appearance of your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle");
                        this.reportStyleItems = [
                            new ReportStyleItem("Bold", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Bold", ReportStyle.Bold),
                            new ReportStyleItem("Casual", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Casual", ReportStyle.Casual),
                            new ReportStyleItem("Corporate", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Corporate", ReportStyle.Corporate),
                            new ReportStyleItem("Compact", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Compact", ReportStyle.Compact),
                            new ReportStyleItem("Formal", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Formal", ReportStyle.Formal)
                        ];
                        this.selectedReportStyle = ko.observable(this.reportStyleItems[0]);
                    }
                    ChooseReportStylePage.prototype._begin = function (data) {
                        this.selectedReportStyle(Designer.getFirstItemByPropertyValue(this.reportStyleItems, "reportStyle", data.style));
                    };
                    ChooseReportStylePage.prototype.commit = function (data) {
                        data.style = this.selectedReportStyle().reportStyle;
                    };
                    return ChooseReportStylePage;
                })(Wizard.WizardPage);
                Wizard.ChooseReportStylePage = ChooseReportStylePage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SetReportTitlePage = (function (_super) {
                    __extends(SetReportTitlePage, _super);
                    function SetReportTitlePage(wizard) {
                        _super.call(this, wizard);
                        this.template = "dxrd-page-reportTitle";
                        this.description = Designer.getLocalization("We have all the information needed to process the report.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportComplete_Description");
                        this.reportTitle = ko.observable("");
                        this.actionNext.isDisabled(true);
                    }
                    SetReportTitlePage.prototype._begin = function (data) {
                        this.reportTitle(data.reportTitle ? data.reportTitle : "");
                    };
                    SetReportTitlePage.prototype.commit = function (data) {
                        data.reportTitle = this.reportTitle();
                    };
                    return SetReportTitlePage;
                })(Wizard.WizardPage);
                Wizard.SetReportTitlePage = SetReportTitlePage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
/// <reference path="sources/coordinategrid.ts" />
/// <reference path="sources/ruler.ts" />
/// <reference path="sources/widgets/editOptionsEditor.ts" />
/// <reference path="sources/widgets/styleseditor.ts" />
/// <reference path="sources/databindings.ts" />
/// <reference path="sources/dragdrop.ts" />
/// <reference path="sources/widgets/widgets.ts" />
/// <reference path="sources/miscobjects/formattingrules.ts" />
/// <reference path="sources/metadata.ts" />
/// <reference path="sources/miscobjects/components.ts" />
/// <reference path="sources/miscobjects/anchoring.ts" />
/// <reference path="sources/reportelement.ts" />
/// <reference path="sources/control.ts" />
/// <reference path="sources/miscobjects/calculatedfield.ts" />
/// <reference path="sources/miscobjects/datasourcehelper.ts" />
/// <reference path="sources/miscobjects/extension.ts" />
/// <reference path="sources/miscobjects/groupfield.ts" />
/// <reference path="sources/miscobjects/parameter.ts" />
/// <reference path="sources/miscobjects/objectstorage.ts" />
/// <reference path="sources/miscobjects/style.ts" />
/// <reference path="sources/miscobjects/expression.ts" />
/// <reference path="sources/report.ts" />
/// <reference path="sources/bands/band.ts" />
/// <reference path="sources/bands/subband.ts" />
/// <reference path="sources/bands/detailBand.ts" />
/// <reference path="sources/bands/detailReportBand.ts" />
/// <reference path="sources/bands/groupHeaderBand.ts" />
/// <reference path="sources/bands/marginsBand.ts" />
/// <reference path="sources/bands/pageFooter.ts" />
/// <reference path="sources/bands/verticalBand.ts" />
/// <reference path="sources/checkbox.ts" />
/// <reference path="sources/chart.ts" />
/// <reference path="sources/pivot/sortBySummaryInfo.ts" />
/// <reference path="sources/pivot/pivot.ts" />
/// <reference path="sources/pivotgrid.ts" />
/// <reference path="sources/picturebox.ts" />
/// <reference path="sources/table.ts" />
/// <reference path="sources/line.ts" />
/// <reference path="sources/shape.ts" />
/// <reference path="sources/barcode.ts" />
/// <reference path="sources/zipcode.ts" />
/// <reference path="sources/gauge.ts" />
/// <reference path="sources/pageinfo.ts" />
/// <reference path="sources/pagebreak.ts" />
/// <reference path="sources/crossband.ts" />
/// <reference path="sources/sparkline.ts" />
/// <reference path="sources/subreport.ts" />
/// <reference path="sources/tableOfContents.ts" />
/// <reference path="sources/charactercomb.ts" />
/// <reference path="sources/actions.ts" />
/// <reference path="sources/controlsfactory.ts" />
/// <reference path="sources/initializer.ts" />
/// <reference path="sources/scripting/scripts-editor.ts" />
/// <reference path="sources/scripting/eventdropdowneditor.ts" />
/// <reference path="sources/wizard/wizardModel.ts" />
/// <reference path="sources/wizard/selectDataMemberPage.ts" />
/// <reference path="sources/wizard/chooseReportTypePage.ts" />
/// <reference path="sources/wizard/selectDataSourcePage.ts" />
/// <reference path="sources/wizard/selectColumnsPage.ts" />
/// <reference path="sources/wizard/addGroupingLevelPage.ts" />
/// <reference path="sources/wizard/chooseSummaryOptionsPage.ts" />
/// <reference path="sources/wizard/chooseReportLayoutPage.ts" />
/// <reference path="sources/wizard/chooseReportStylePage.ts" />
/// <reference path="sources/wizard/setReportTitlePage.ts" />
/// <reference path="../Scripts/dx-designer/dx-query-builder-core.d.ts" />
/// <reference path="../Scripts/dx-designer/dx-diagram-designer.d.ts" />
/// <reference path="../Scripts/dx-designer/dx-designer-core.d.ts"/>
/// <reference path="../Scripts/dx-designer/dx-ko-widgets.d.ts"/>
/// <reference path="../Scripts/dx-designer/dx-ko-propertygrid.d.ts"/>
/// <reference path="../Scripts/dx-designer/dx-ko-undoengine.d.ts"/>
/// <reference path="../Scripts/dx-designer/dx-ko-serializer.d.ts"/> 
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var SqlDataSourceEditor = (function () {
                function SqlDataSourceEditor(dsHelper, sqlDataSourceWizard, reportViewModel, undoEngine, itemsProvider) {
                    var _this = this;
                    this.relationsEditor = ko.observable();
                    this.addAction = {
                        clickAction: function (item) {
                            _this.addSqlQuery(item.data.name);
                        },
                        imageClassName: "dxrd-image-add-query",
                        imageTemplateName: "dxrd-svg-operations-add_query",
                        text: Designer.getLocalization("Add query", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_AddQuery")
                    };
                    this.editAction = {
                        clickAction: function (item) {
                            _this.editSqlQuery(new DevExpress.JS.Widgets.PathRequest(item.path).id, item.name);
                        },
                        position: 0,
                        imageClassName: "dx-image-edit",
                        imageTemplateName: "dxrd-svg-operations-edit",
                        text: Designer.getLocalization("Edit query", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_EditQuery")
                    };
                    this.removeAction = {
                        clickAction: function (item) {
                            _this.removeSqlQuery(new DevExpress.JS.Widgets.PathRequest(item.path).id, item.name);
                        },
                        position: 50,
                        imageClassName: "dxrd-image-recycle-bin",
                        imageTemplateName: "dxrd-svg-operations-recycle_bin",
                        text: Designer.getLocalization("Remove query", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_RemoveQuery")
                    };
                    this.removeDataSourceAction = {
                        clickAction: function (item) {
                            _this.removeDataSource(item.data.name);
                        },
                        position: 50,
                        imageClassName: "dxrd-image-recycle-bin",
                        imageTemplateName: "dxrd-svg-operations-recycle_bin",
                        text: Designer.getLocalization("Remove Data Source", "ASPxReportsStringId.ReportDesigner_FieldListActions_RemoveDataSource")
                    };
                    this.editRelationsAction = {
                        clickAction: function (item) {
                            _this.editMasterDetailRelations(item.data.name);
                        },
                        position: 0,
                        imageClassName: "dx-image-edit",
                        imageTemplateName: "dxrd-svg-operations-edit",
                        text: Designer.getLocalization("Edit Master-Detail Relations", "ASPxReportsStringId.ReportDesigner_FieldListActions_EditMasterDetailRelations")
                    };
                    this._dsHelper = dsHelper;
                    this._wizard = sqlDataSourceWizard;
                    this._reportViewModel = reportViewModel;
                    this._undoEngine = undoEngine;
                    this._itemsProvider = itemsProvider;
                }
                SqlDataSourceEditor.prototype._applyWizardChanges = function (dataSource, wizardModel, queryName, relationsEditing) {
                    return this._applyDataSourceChange(wizardModel.sqlDataSource, dataSource, queryName, relationsEditing);
                };
                SqlDataSourceEditor.prototype._createOrEditSqlDataSource = function (requestJson, dataSource, requestName) {
                    var _this = this;
                    return Designer.ajax(Report.HandlerUri, requestName, encodeURIComponent(requestJson)).done(function (result) {
                        result.dataSource.data = JSON.parse(result.dataSource.data);
                        result.dataSource.isSqlDataSource = true;
                        if (dataSource) {
                            dataSource.data["base64"](result.dataSource.data["@Base64"]);
                        }
                        else {
                            Report.addDataSourceToReport(_this._dsHelper(), _this._reportViewModel(), _this._undoEngine(), _this._itemsProvider(), result.dataSource);
                        }
                    })
                        .fail(function (result) {
                        if (Designer.getErrorMessage(result))
                            Designer.ShowMessage(Designer.getErrorMessage(result));
                    });
                };
                SqlDataSourceEditor.prototype._applyDataSourceChange = function (source, dest, queryName, relationsEditing) {
                    var _this = this;
                    return SqlDataSourceEditor.createSqlDataSourceInfo(source, queryName, relationsEditing)
                        .done(function (result) {
                        if (dest) {
                            dest.data["base64"](result.base64());
                        }
                        else {
                            Report.addDataSourceToReport(_this._dsHelper(), _this._reportViewModel(), _this._undoEngine(), _this._itemsProvider(), result);
                        }
                    });
                };
                SqlDataSourceEditor.prototype._findDataSource = function (dataSourceID) {
                    return this._dsHelper().usedDataSources().filter(function (item) {
                        return item.id === dataSourceID || item.ref === dataSourceID;
                    })[0];
                };
                SqlDataSourceEditor._onFail = function (result, deferred) {
                    if (Designer.getErrorMessage(result))
                        Designer.ShowMessage(Designer.getErrorMessage(result));
                    deferred.reject(result);
                };
                SqlDataSourceEditor.prototype.editSqlQuery = function (dataSourceID, queryName) {
                    var _this = this;
                    var dataSourceInfo = this._findDataSource(dataSourceID);
                    Report.ReportDataSourceService.sqlDataSourceFromBase64(dataSourceInfo.data["base64"]()).done(function (result) {
                        var sqlDataSource = new DevExpress.Data.SqlDataSource(JSON.parse(result.sqlDataSourceJSON), undefined, Report.QBRequestWrapper);
                        sqlDataSource.name(dataSourceInfo.name);
                        _this._wizard.start(new Report.Wizard.SqlDataSourceWizardModel(sqlDataSource, queryName));
                    });
                };
                SqlDataSourceEditor.prototype.addSqlQuery = function (dataSourceID) {
                    this.editSqlQuery(dataSourceID, null);
                };
                SqlDataSourceEditor.prototype.removeSqlQuery = function (dataSourceID, queryName) {
                    var _this = this;
                    var dataSourceInfo = this._findDataSource(dataSourceID);
                    Report.ReportDataSourceService.sqlDataSourceFromBase64(dataSourceInfo.data["base64"]()).done(function (result) {
                        var sqlDataSource = new DevExpress.Data.SqlDataSource(JSON.parse(result.sqlDataSourceJSON));
                        sqlDataSource.queries.remove(function (x) { return x.name() === queryName; });
                        _this._applyWizardChanges(dataSourceInfo, { sqlDataSource: sqlDataSource }, queryName);
                    });
                };
                SqlDataSourceEditor.prototype.removeDataSource = function (dataSourceID) {
                    var dsInfo = this._findDataSource(dataSourceID);
                    if (!dsInfo)
                        return;
                    Report.removeDataSourceFromReport(this._dsHelper(), this._reportViewModel().dataSource, this._undoEngine, dsInfo);
                };
                SqlDataSourceEditor.prototype.editMasterDetailRelations = function (dataSourceID) {
                    var _this = this;
                    var dataSourceInfo = this._findDataSource(dataSourceID);
                    Report.ReportDataSourceService.sqlDataSourceFromBase64(dataSourceInfo.data["base64"]()).done(function (result) {
                        var sqlDataSource = new DevExpress.Data.SqlDataSource(JSON.parse(result.sqlDataSourceJSON));
                        if (sqlDataSource.queries().length < 2) {
                            Designer.ShowMessage(Designer.getLocalization("At least two queries are required to create a master-detail relation.", "DataAccessUIStringId.MessageLessThanTwoQueries"), "warning", 10000);
                            return;
                        }
                        _this.relationsEditor(new DevExpress.Data.MasterDetailEditor(sqlDataSource.relations, sqlDataSource.resultSet, function () {
                            return _this._applyWizardChanges(dataSourceInfo, { sqlDataSource: sqlDataSource }, "", true);
                        }));
                        _this.relationsEditor().popupVisible(true);
                    });
                };
                SqlDataSourceEditor.prototype.applySqlDataSourceWizardChanges = function (dataSourceWizardModel) {
                    var dataSource = dataSourceWizardModel.sqlDataSource && this._dsHelper().findDataSourceInfoByName(dataSourceWizardModel.sqlDataSource.name());
                    var queryIndex = dataSourceWizardModel["getQueryIndex"] && dataSourceWizardModel["getQueryIndex"]();
                    return this._applyWizardChanges(dataSource, dataSourceWizardModel, $.isNumeric(queryIndex) ? dataSourceWizardModel.sqlDataSource.queries()[queryIndex].name() : null);
                };
                SqlDataSourceEditor.createSqlDataSourceInfo = function (source, queryName, relationsEditing) {
                    var deferred = $.Deferred();
                    Report.QBRequestWrapper.rebuildResultSchema(source, queryName, relationsEditing)
                        .done(function (result) {
                        var model = JSON.parse(result.resultSchemaJSON);
                        source.resultSet = !!model ? new DevExpress.Data.ResultSet(model) : null;
                        if (!!result.connectionParameters) {
                            source.connection.parameteres((function (x) { try {
                                return JSON.parse(x)["Parameters"] || x;
                            }
                            catch (_) {
                                return x;
                            } })(result.connectionParameters));
                            source.connection.fromAppConfig(false);
                        }
                        Report.ReportDataSourceService.getSqlDataSourceBase64(source)
                            .done(function (result) {
                            deferred.resolve({
                                name: "sqlDataSource",
                                id: Report.Utils.guid().replace(/-/g, ""),
                                data: {
                                    "@ObjectType": "DevExpress.DataAccess.Sql.SqlDataSource",
                                    "@Base64": result
                                },
                                isSqlDataSource: true,
                                base64: function () { return result; }
                            });
                        })
                            .fail(function (result) { SqlDataSourceEditor._onFail(result, deferred); });
                    })
                        .fail(function (result) { SqlDataSourceEditor._onFail(result, deferred); });
                    return deferred.promise();
                };
                SqlDataSourceEditor.prototype.getActions = function (context) {
                    var result = [];
                    if (!context.data)
                        return result;
                    if (context.data["canAddSqlQuery"] === true) {
                        result.push(this.addAction);
                        result.push(this.editRelationsAction);
                    }
                    if (context.data["canRemove"] === true) {
                        result.push(this.removeDataSourceAction);
                    }
                    if (context.data["canEditQuery"] === true) {
                        result.push(this.editAction);
                        result.push(this.removeAction);
                    }
                    return result;
                };
                return SqlDataSourceEditor;
            })();
            Report.SqlDataSourceEditor = SqlDataSourceEditor;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var BandsHolder = (function (_super) {
                __extends(BandsHolder, _super);
                function BandsHolder(_container) {
                    _super.call(this);
                    this._container = _container;
                    this.bands = ko.observableArray();
                    if (_container instanceof Report.ReportSurface || _container instanceof Report.DetailReportBandSurface)
                        this._disposables.push(this.verticalBandsContainer = new Report.VerticalBandsContainerSurface(_container));
                }
                BandsHolder.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.disposeObservableArray(this.bands);
                    this.resetObservableArray(this.bands);
                };
                BandsHolder.prototype._createBandsMapCollection = function (elementModels, callbacks) {
                    var position = 0;
                    elementModels.peek().forEach(function (item) { return callbacks.addItem(callbacks.createItem(item), position++); });
                    callbacks.callMutated();
                    return elementModels.subscribe(function (args) {
                        args.forEach(function (changeSet) {
                            if (changeSet.status === "deleted") {
                                callbacks.removeItem(changeSet.value.surface);
                            }
                        });
                        args.forEach(function (changeSet) {
                            if (changeSet.status === "added") {
                                callbacks.addItem(callbacks.createItem(changeSet.value), changeSet.index);
                            }
                        });
                        callbacks.callMutated();
                    }, null, "arrayChange");
                };
                BandsHolder.prototype._addHorizontalBand = function (item, index) {
                    var verticalBandsPosition = this.verticalBandsContainer && this.verticalBandsContainer.bandPosition();
                    if (index === undefined)
                        return this.bands().push(item);
                    if (verticalBandsPosition > 0 && index > verticalBandsPosition) {
                        index -= this.verticalBandsContainer.verticalBands().length;
                    }
                    this.bands().splice(index, 0, item);
                };
                BandsHolder.prototype._addVerticalBand = function (item, index) {
                    this.verticalBandsContainer.verticalBands().splice(index > 0 ? index : 0, 0, item);
                };
                BandsHolder.prototype.initialize = function (bands) {
                    var _this = this;
                    var isVerticalChanged = false;
                    var isHorizontalChanged = false;
                    this._disposables.push(this._createBandsMapCollection(bands, {
                        addItem: function (item, index) {
                            if (item instanceof Report.VerticalBandSurface) {
                                _this._addVerticalBand(item, index - _this.verticalBandsContainer.bandPosition());
                                isVerticalChanged = true;
                            }
                            else {
                                isHorizontalChanged = true;
                                _this._addHorizontalBand(item, index);
                            }
                        },
                        callMutated: function () {
                            isHorizontalChanged && _this.bands.valueHasMutated();
                            isVerticalChanged && _this.verticalBandsContainer && _this.verticalBandsContainer.verticalBands.valueHasMutated();
                            isHorizontalChanged = false;
                            isVerticalChanged = false;
                        },
                        createItem: function (item) { return _this._container._createSurface(item); },
                        removeItem: function (item) {
                            if (item instanceof Report.VerticalBandSurface) {
                                _this.verticalBandsContainer.verticalBands().splice(_this.verticalBandsContainer.verticalBands().indexOf(item), 1);
                                isVerticalChanged = true;
                            }
                            else {
                                _this.bands().splice(_this.bands().indexOf(item), 1);
                                isHorizontalChanged = true;
                            }
                        }
                    }));
                };
                BandsHolder.prototype.getHeight = function () {
                    var minHeight = (this.verticalBandsContainer && this.verticalBandsContainer.height()) || 0;
                    this.bands().forEach(function (band) { minHeight += band.height(); });
                    return minHeight;
                };
                BandsHolder.prototype.getTotalHeight = function () {
                    var height = this.verticalBandsContainer && this.verticalBandsContainer._height() || 0;
                    return height + (this.bands() || []).reduce(function (acc, x) { return acc + x._totalHeight(); }, 0);
                };
                BandsHolder.prototype.getBandAbsolutePositionY = function (band) {
                    var newY = 0;
                    var bandIndex;
                    var parentBands = ko.unwrap(this.bands);
                    if (parentBands && parentBands.length !== 0) {
                        bandIndex = parentBands.indexOf(band);
                        if (bandIndex === -1)
                            return newY;
                        if (bandIndex > 0 && parentBands[bandIndex - 1]) {
                            newY = parentBands[bandIndex - 1].absolutePosition.y() + parentBands[bandIndex - 1].height();
                        }
                        else if (bandIndex === 0 && this._container["absolutePosition"]) {
                            newY = this._container["absolutePosition"].y();
                        }
                        if (this.verticalBandsContainer) {
                            if (bandIndex === this.verticalBandsContainer.getBandPosition()) {
                                newY = this.verticalBandsContainer.topOffset() + this.verticalBandsContainer.height();
                            }
                        }
                    }
                    return newY;
                };
                BandsHolder.prototype.checkUnderCursor = function () {
                    var isOver = false;
                    [this.bands(), this.verticalBandsContainer.verticalBands()].forEach(function (collection) {
                        for (var i = 0; i < collection.length; i++) {
                            isOver = collection[i].underCursor().isOver;
                            if (isOver)
                                return isOver;
                        }
                        ;
                    });
                    return isOver;
                };
                return BandsHolder;
            })(Designer.Disposable);
            Report.BandsHolder = BandsHolder;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ItemsInRangeEnumerator = (function () {
                function ItemsInRangeEnumerator(start, end) {
                    this._start = start;
                    this._end = end;
                }
                ItemsInRangeEnumerator.prototype._findCommonParent = function (current, last) {
                    return current === last ? current :
                        this._findCommonParent(current.parent || current, last.parent || last);
                };
                ItemsInRangeEnumerator.prototype._selectItemsBetweenShiftSelection = function (parent) {
                    var items = parent.items();
                    for (var i = 0; i < items.length; i++) {
                        if (this._isSelectedRangeEnded)
                            return;
                        var item = items[i];
                        this._addToSelectedItems(item);
                        if (item === this._start || item === this._end) {
                            this._isSelectedRangeEnded = this._isInSelectedRage;
                            this._isInSelectedRage = !this._isInSelectedRage;
                            this._addToSelectedItems(item);
                        }
                        if (!this._isSelectedRangeEnded && !item.collapsed()) {
                            this._selectItemsBetweenShiftSelection(item);
                        }
                    }
                };
                ItemsInRangeEnumerator.prototype._addToSelectedItems = function (item) {
                    if (this._isInSelectedRage) {
                        this._callBack(item);
                    }
                };
                ItemsInRangeEnumerator.prototype.enumerate = function (callBack) {
                    this._isInSelectedRage = false;
                    this._isSelectedRangeEnded = false;
                    this._callBack = callBack;
                    this._selectItemsBetweenShiftSelection(this._findCommonParent(this._start.parent, this._end.parent));
                };
                return ItemsInRangeEnumerator;
            })();
            var FieldListController = (function () {
                function FieldListController(actionProviders, fieldListActionWrapper, dragDropHandler, customizeFieldListActions) {
                    if (actionProviders === void 0) { actionProviders = []; }
                    if (customizeFieldListActions === void 0) { customizeFieldListActions = null; }
                    this._selectedItems = ko.observableArray([]);
                    this.hasItems = FieldListController.isList;
                    this._actionProviders = actionProviders;
                    this._fieldListActionWrapper = fieldListActionWrapper;
                    this.dragDropHandler = dragDropHandler;
                    this._customizeFieldListActions = customizeFieldListActions;
                }
                FieldListController.prototype.dispose = function () {
                    this._actionProviders.splice(0);
                    this._selectedItems.splice(0);
                };
                FieldListController.prototype.itemsFilter = function (item) {
                    return item["isCalculated"] === true || item.specifics !== "none";
                };
                FieldListController.isList = function (item) {
                    if (!item)
                        return false;
                    return item["isCalculated"] ? false : item.specifics === "List" || item.specifics === "ListSource" || item.isList === true;
                };
                FieldListController.prototype.select = function (item) {
                    this.selectedItem && this.selectedItem.isSelected(false);
                    this.selectedItem = item;
                    item.isSelected(true);
                };
                FieldListController.prototype.canSelect = function (item) {
                    return true;
                };
                FieldListController.prototype.getActions = function (item) {
                    var _this = this;
                    var result = [];
                    (this._actionProviders || []).forEach(function (actionsProvider) {
                        var actions = actionsProvider.getActions(item);
                        if (_this._fieldListActionWrapper) {
                            _this._fieldListActionWrapper(actions);
                        }
                        result.push.apply(result, actions);
                    });
                    var getActionPosition = function (action) {
                        return action.position === undefined ? 1 : action.position;
                    };
                    result = $.extend(true, [], result.sort(function (x, y) { return getActionPosition(x) - getActionPosition(y); }));
                    this._customizeFieldListActions && this._customizeFieldListActions(item.data, result);
                    return result;
                };
                FieldListController.prototype.canMultiSelect = function (item) {
                    var path = new DevExpress.JS.Widgets.PathRequest(item.path).path;
                    var isSelectedItemCanMultiSelect = !this.selectedItem || this.selectedItem === item || this.canMultiSelect(this.selectedItem);
                    return path.length !== 0 && isSelectedItemCanMultiSelect;
                };
                FieldListController.prototype.multiSelect = function (item, isShiftPressed, isCtrlPressed) {
                    var _this = this;
                    if (isShiftPressed === void 0) { isShiftPressed = false; }
                    if (isCtrlPressed === void 0) { isCtrlPressed = false; }
                    if (this.selectedItem) {
                        this.selectedItem.isSelected(false);
                        this.selectedItem.isMultiSelected(true);
                    }
                    if (isShiftPressed) {
                        var lastSelectedItem = this.selectedItem;
                        if (!isCtrlPressed) {
                            this._selectedItems.peek().forEach(function (element) { return element.isMultiSelected(false); });
                            this._selectedItems([]);
                        }
                        new ItemsInRangeEnumerator(item, lastSelectedItem).enumerate(function (element) {
                            if (!element.isMultiSelected()) {
                                _this._selectedItems.push(element);
                                element.isMultiSelected(true);
                            }
                        });
                        if (this._selectedItems.peek()[0] === lastSelectedItem) {
                            this._selectedItems.reverse();
                        }
                    }
                    else if (this._selectedItems.peek().indexOf(item) > -1) {
                        this._selectedItems.remove(item);
                        item.isMultiSelected(false);
                    }
                    else {
                        this._selectedItems.push(item);
                        item.isMultiSelected(true);
                    }
                };
                FieldListController.prototype.isDraggable = function (item) {
                    return true;
                };
                Object.defineProperty(FieldListController.prototype, "selectedItem", {
                    get: function () {
                        return this._selectedItems()[this._selectedItems().length - 1];
                    },
                    set: function (value) {
                        this._selectedItems().forEach(function (item) { return item.isMultiSelected(false); });
                        this._selectedItems.splice(0);
                        this._selectedItems.push(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                FieldListController.prototype.selectedItems = function () {
                    return this._selectedItems();
                };
                return FieldListController;
            })();
            Report.FieldListController = FieldListController;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var CharacterCombHelper = (function () {
                function CharacterCombHelper() {
                }
                CharacterCombHelper.getAlignments = function (textAlignment) {
                    var vertical = "";
                    var horizontal = "";
                    for (var i = 0; i < textAlignment.length; i++) {
                        if (textAlignment[i] === textAlignment[i].toLocaleUpperCase()) {
                            if (vertical === "") {
                                vertical += textAlignment[i];
                            }
                            else if (vertical !== "") {
                                horizontal += textAlignment[i];
                            }
                        }
                        else {
                            if (horizontal !== "") {
                                horizontal += textAlignment[i];
                            }
                            else {
                                vertical += textAlignment[i];
                            }
                        }
                    }
                    return {
                        vertical: vertical,
                        horizontal: horizontal
                    };
                };
                CharacterCombHelper.getLines = function (text, horizontal, multiline, wordwrap) {
                    var texts = multiline ? text.split("\n") : [text];
                    var result = [];
                    if (horizontal === 0) {
                        return result;
                    }
                    for (var i = 0; i < texts.length; i++) {
                        var lines = 1;
                        if (texts[i].length > horizontal && wordwrap) {
                            var lines = Math.round(texts[i].length / horizontal);
                            if (lines < texts[i].length / horizontal) {
                                lines++;
                            }
                        }
                        for (var j = 0; j < lines; j++) {
                            result.push(texts[i].slice(j * (horizontal), (j + 1) * horizontal));
                        }
                    }
                    return result;
                };
                CharacterCombHelper.getTextOffset = function (texts, position, verticalAlign, horizontalAlign, vertical, horizontal) {
                    var offset = 0;
                    if (verticalAlign === "Top") {
                        offset += horizontal * position;
                    }
                    else if (verticalAlign === "Middle") {
                        offset += ((Math.floor((vertical - texts.length) / 2)) * horizontal);
                        offset += horizontal * position;
                    }
                    else if (verticalAlign === "Bottom") {
                        offset += ((vertical - texts.length) * horizontal);
                        offset += horizontal * position;
                    }
                    if (horizontalAlign === "Center") {
                        if (texts[position].length < horizontal) {
                            offset += Math.floor((horizontal - Math.max(texts[position].length, 1)) / 2);
                        }
                    }
                    else if (horizontalAlign === "Right") {
                        if (texts[position].length < horizontal) {
                            offset += (horizontal - Math.max(texts[position].length, 1));
                        }
                    }
                    return offset;
                };
                CharacterCombHelper.setText = function (texts, cells, getTextOffset) {
                    for (var i = 0; i < cells.length; i++) {
                        cells[i].text("");
                        cells[i].isEmpty = true;
                    }
                    for (var i = 0; i < texts.length; i++) {
                        var offset = getTextOffset(texts, i);
                        if (texts[i] === "" && offset < cells.length && offset >= 0) {
                            cells[offset].isEmpty = false;
                        }
                        for (var j = offset; j < offset + texts[i].length; j++) {
                            if ((j - offset) < texts[i].length && j < cells.length && j >= 0) {
                                cells[j].text(texts[i][j - offset]);
                                cells[j].isEmpty = false;
                            }
                        }
                    }
                };
                CharacterCombHelper.distributionEmptySpace = function (emptySpace, vertical, textAlignment) {
                    if (vertical && textAlignment.indexOf("Top") !== -1 || !vertical && textAlignment.indexOf("Left") !== -1)
                        return 0;
                    if (vertical && textAlignment.indexOf("Middle") !== -1 || !vertical && textAlignment.indexOf("Center") !== -1)
                        return emptySpace / 2;
                    return emptySpace;
                };
                CharacterCombHelper.getHorizontalVerticalByText = function (multiline, wordwrap, text, horizontal, vertical) {
                    var stringLengths = text.split("\n").map(function (str) { return str.length; });
                    var _maxLength = Math.max.apply(Math, stringLengths);
                    var _horizontal = Math.min(text.length, horizontal);
                    var _vertical = vertical;
                    if (!multiline && !wordwrap) {
                        _vertical = 1;
                        _horizontal = text.length;
                    }
                    else if (!multiline && wordwrap) {
                        _vertical = Math.ceil(text.length / _horizontal);
                    }
                    else if (multiline && wordwrap) {
                        _horizontal = Math.min(_horizontal, _maxLength);
                        _vertical = 0;
                        stringLengths.forEach(function (length) { return _vertical += (length ? Math.ceil(length / _horizontal) : 1); });
                    }
                    else if (multiline && !wordwrap) {
                        _vertical = stringLengths.length;
                        _horizontal = _maxLength;
                    }
                    return { horizontal: _horizontal, vertical: _vertical };
                };
                return CharacterCombHelper;
            })();
            Report.CharacterCombHelper = CharacterCombHelper;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var DesignControlsHelper = (function (_super) {
                __extends(DesignControlsHelper, _super);
                function DesignControlsHelper(target, selection) {
                    _super.call(this, target, [{
                            added: function (control) { },
                            deleted: function (control) { control.surface === selection.focused() && selection.focused(Designer.findNextSelection(control.surface)); }
                        }], ["controls", "bands", "crossBandControls", "rows", "cells", "fields", "styles", "formattingRuleSheet", "components"]);
                }
                DesignControlsHelper.prototype._setName = function (value) {
                    if (value !== this.target) {
                        _super.prototype._setName.call(this, value);
                    }
                };
                return DesignControlsHelper;
            })(DevExpress.Designer.DesignControlsHelper);
            Report.DesignControlsHelper = DesignControlsHelper;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            function patchRequest(request, dataSources, state) {
                request.state = state;
                var dataSource = Designer.findFirstItemMatchesCondition(dataSources, function (ds) { return (request.id && ds.id === request.id) || (request.ref && ds.ref === request.ref); });
                if (dataSource && dataSource.data) {
                    request.dataSource = JSON.stringify(new DevExpress.JS.Utils.ModelSerializer().serialize(dataSource.data));
                }
            }
            Report.patchRequest = patchRequest;
            var FieldListDataSourcesHelper = (function () {
                function FieldListDataSourcesHelper() {
                    var _this = this;
                    this._fieldListCache = {};
                    this._dataSourceSubscriptions = [];
                    this._usedDataSourceSubscription = null;
                    this._cacheIsClearNotificicator = ko.observable();
                    this.dataSourceHelper = ko.observable();
                    this.fieldListDataSources = ko.observableArray([]);
                    this._renameDataSourceStrategy = new Report.RenameDataSourceStrategy(this.dataSourceHelper, function () { return _this.fieldListDataSources.valueHasMutated(); });
                }
                FieldListDataSourcesHelper.prototype.dispose = function () {
                    this._usedDataSourceSubscription && this._usedDataSourceSubscription.dispose();
                    this._usedDataSourceSubscription = null;
                    this._clearDataSourceCache();
                    this.fieldListDataSources(null);
                    this.dataSourceHelper(null);
                };
                FieldListDataSourcesHelper.prototype._clearDataSourceCache = function (dataSourceRef) {
                    for (var prop in this._fieldListCache) {
                        if (dataSourceRef === undefined || prop.split('.')[0] === dataSourceRef)
                            delete this._fieldListCache[prop];
                    }
                    dataSourceRef !== undefined && this._cacheIsClearNotificicator.notifySubscribers();
                };
                FieldListDataSourcesHelper.prototype._subscribeDataSource = function (dataSource) {
                    var _this = this;
                    if (dataSource.data && dataSource.data.base64) {
                        this._dataSourceSubscriptions.push(dataSource.data.base64.subscribe(function (newVal) {
                            _this._clearDataSourceCache(dataSource.ref || dataSource.id);
                            _this.fieldListDataSources.notifySubscribers(_this.fieldListDataSources());
                            _this.dataSourceHelper().usedDataSources.notifySubscribers(_this.dataSourceHelper().usedDataSources());
                        }));
                    }
                };
                FieldListDataSourcesHelper.prototype._updateFieldListDataSources = function (usedDataSources, parameters) {
                    var _this = this;
                    if (!usedDataSources) {
                        this.fieldListDataSources(null);
                        return;
                    }
                    this._dataSourceSubscriptions.forEach(function (x) { return x.dispose(); });
                    this._dataSourceSubscriptions = [];
                    for (var prop in this._fieldListCache) {
                        if (this._fieldListCache.hasOwnProperty(prop))
                            delete this._fieldListCache[prop];
                    }
                    var dataSourcesArray = [].concat(usedDataSources);
                    if (parameters) {
                        dataSourcesArray.splice(-1, 0, { ref: "Parameters", name: "Parameters", specifics: "parameters", data: parameters, dataSerializer: null });
                    }
                    dataSourcesArray.forEach(function (item) { return _this._subscribeDataSource(item); });
                    this.fieldListDataSources(dataSourcesArray);
                };
                FieldListDataSourcesHelper.prototype.wrapFieldsCallback = function (fieldsCallback, state) {
                    var _this = this;
                    var cache = this._fieldListCache;
                    var dataSources = this.fieldListDataSources;
                    return function (request) {
                        if (cache) {
                            _this._cacheIsClearNotificicator();
                            if (cache[request.fullPath])
                                return cache[request.fullPath];
                            patchRequest(request, dataSources.peek(), state());
                            if (!!request.dataSource)
                                return cache[request.fullPath] = fieldsCallback(request);
                            cache[request.fullPath] = undefined;
                            return $.Deferred().reject().promise();
                        }
                        else {
                            patchRequest(request, dataSources.peek(), state());
                            return !!request.dataSource ? fieldsCallback(request) : $.Deferred().reject().promise();
                        }
                    };
                };
                FieldListDataSourcesHelper.prototype._subscribeDataSources = function (usedDataSources, model) {
                    var _this = this;
                    this._usedDataSourceSubscription = usedDataSources.subscribe(function (args) {
                        var changeSet = args[0];
                        var dataSource = changeSet.value;
                        if (changeSet.status === "added") {
                            _this._subscribeDataSource(dataSource);
                            model.components.push(new Report.ComponentsModel(dataSource, _this._renameDataSourceStrategy));
                            _this.fieldListDataSources.splice(changeSet.index, 0, dataSource);
                        }
                        else {
                            if (dataSource.data && dataSource.data.base64) {
                                _this._dataSourceSubscriptions[changeSet.index].dispose();
                                _this._dataSourceSubscriptions.splice(changeSet.index, 1);
                            }
                            model.components.splice(changeSet.index, 1);
                            _this.fieldListDataSources.splice(changeSet.index, 1);
                            _this._clearDataSourceCache(dataSource.ref || dataSource.id);
                        }
                    }, null, "arrayChange");
                };
                FieldListDataSourcesHelper.prototype.updateDataSources = function (dsHelper, model, parameters) {
                    var _this = this;
                    this._subscribeDataSources(dsHelper.usedDataSources, model);
                    this._updateFieldListDataSources(dsHelper.usedDataSources(), parameters);
                    this.dataSourceHelper(dsHelper);
                    model.components([]);
                    model.components(dsHelper.usedDataSources()
                        .filter(function (item) { return item.specifics !== "none"; })
                        .map(function (item) { return new Report.ComponentsModel(item, _this._renameDataSourceStrategy); }));
                };
                return FieldListDataSourcesHelper;
            })();
            Report.FieldListDataSourcesHelper = FieldListDataSourcesHelper;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var FitBoundsToTextAction = (function () {
                function FitBoundsToTextAction(_control, textElementHelper) {
                    if (textElementHelper === void 0) { textElementHelper = new Report.TextElementSizeHelper(); }
                    this._control = _control;
                    this.textElementHelper = textElementHelper;
                }
                FitBoundsToTextAction.prototype._getNewRectForVetical = function (textHeight, alignment) {
                    var contentSize = this._control.getContentSize();
                    var controlRect = this._control.rect();
                    var difference = contentSize.height - textHeight;
                    if (alignment === "Middle") {
                        return { top: controlRect.top + difference / 2, height: controlRect.height - difference };
                    }
                    else if (alignment === "Bottom") {
                        return { top: controlRect.top + difference, height: controlRect.height - difference };
                    }
                    else {
                        return { height: controlRect.height - difference };
                    }
                };
                FitBoundsToTextAction.prototype._findWidth = function (text, currentWidth) {
                    var _this = this;
                    var content = this._control.getCssContent();
                    if (!this._control.getWordWrap()) {
                        return this.textElementHelper.getTextContainerSize(text, content).width;
                    }
                    var horOffset = 0;
                    ["Left", "Right"].forEach(function (propertyName) {
                        horOffset += (parseFloat(content["padding" + propertyName]) * _this._control._context.zoom());
                        delete content["padding" + propertyName];
                    });
                    var words = text.split(' ');
                    var wordsWidths = words.map(function (line) { return _this.textElementHelper.getTextContainerSize(line, content).width; });
                    if (wordsWidths.some(function (width) { return width + horOffset > currentWidth; })) {
                        return currentWidth;
                    }
                    var spaceWidth = this.textElementHelper.getTextContainerSize("&nbsp", content).width;
                    return wordsWidths.reduce(function (accumulator, currentVal, index) {
                        if (index === 0)
                            return accumulator;
                        var newVal = spaceWidth + currentVal;
                        accumulator.lineWidth += newVal;
                        if (accumulator.lineWidth + horOffset > currentWidth) {
                            accumulator.lineWidth = currentVal;
                        }
                        if (accumulator.max < accumulator.lineWidth) {
                            accumulator.max = accumulator.lineWidth;
                        }
                        return accumulator;
                    }, { lineWidth: wordsWidths[0], max: wordsWidths[0] }).max + horOffset;
                };
                FitBoundsToTextAction.prototype._getNewRectForHorizontal = function (textWidth, alignment) {
                    var contentSize = this._control.getContentSize();
                    var controlRect = this._control.rect();
                    var difference = contentSize.width - textWidth;
                    if (alignment === "Center") {
                        return { left: controlRect.left + difference / 2, width: controlRect.width - difference };
                    }
                    else if (alignment === "Right") {
                        return { left: controlRect.left + difference, width: controlRect.width - difference };
                    }
                    else {
                        return { width: controlRect.width - difference };
                    }
                };
                FitBoundsToTextAction.prototype._getTextContainerSize = function (content) {
                    return this.textElementHelper.getTextContainerSize(this._control.getText(), this._control.getCssContent(content));
                };
                FitBoundsToTextAction.prototype._getTextHeight = function () {
                    var content = { width: this._control.getContentSize().width / this._control._context.zoom() };
                    return this._getTextContainerSize(content).height;
                };
                FitBoundsToTextAction.prototype.fitWidth = function () {
                    var width = this._findWidth(this._control.getText(), this._control.getContentSize().width);
                    var horizontalAlignment = this._control.getAlignments().horizontal;
                    this._control.rect(this._getNewRectForHorizontal(width, horizontalAlignment));
                };
                FitBoundsToTextAction.prototype.fitHeight = function () {
                    var height = this._getTextHeight();
                    var verticalAlignment = this._control.getAlignments().vertical;
                    this._control.rect(this._getNewRectForVetical(height, verticalAlignment));
                };
                FitBoundsToTextAction.prototype.fitBounds = function () {
                    var size = {
                        width: this._findWidth(this._control.getText(), this._control.getContentSize().width),
                        height: this._getTextHeight()
                    };
                    var alignment = this._control.getAlignments();
                    this._control.rect(DevExpress.JS.Utils.extend({}, this._getNewRectForHorizontal(size.width, alignment.horizontal), this._getNewRectForVetical(size.height, alignment.vertical)));
                };
                return FitBoundsToTextAction;
            })();
            Report.FitBoundsToTextAction = FitBoundsToTextAction;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var FitTextToBoundsAction = (function () {
                function FitTextToBoundsAction(_control, textElementHelper) {
                    if (textElementHelper === void 0) { textElementHelper = new Report.TextElementSizeHelper(); }
                    this._control = _control;
                    this.textElementHelper = textElementHelper;
                }
                FitTextToBoundsAction.prototype._getTextSide = function ($div, fontProperties, controlSize, getSide) {
                    var currentSide = getSide($div);
                    var sizeFounded = false;
                    var inc = controlSize / currentSide;
                    var currentFontSize = Math.ceil(fontProperties.size * inc);
                    while (!sizeFounded) {
                        $div.css({ "font-size": currentFontSize + fontProperties.unit });
                        if (getSide($div) > controlSize) {
                            currentFontSize -= 1;
                        }
                        else {
                            sizeFounded = true;
                        }
                    }
                    return currentFontSize;
                };
                FitTextToBoundsAction.prototype._calculateFont = function ($div, fontProperties, maxHeight) {
                    var sizeFounded = false;
                    var font = fontProperties.size;
                    var height = $div[0].getBoundingClientRect().height;
                    if (height === maxHeight)
                        return font;
                    var inc = height > maxHeight ? -1 : 1;
                    while (!sizeFounded) {
                        font += inc;
                        $div.css({ "font-size": font + fontProperties.unit });
                        var height = $div[0].getBoundingClientRect().height;
                        if (height < maxHeight && inc === -1) {
                            sizeFounded = true;
                        }
                        else if (inc === 1 && height > maxHeight) {
                            font -= inc;
                            sizeFounded = true;
                        }
                    }
                    return font;
                };
                FitTextToBoundsAction.prototype._getAvailableFont = function () {
                    var fontModel = this._control.getFontModel();
                    var containerSize = this._control.getContentSize();
                    var zoom = this._control._context.zoom();
                    var font = fontModel.size();
                    if (!this._control.getWordWrap()) {
                        var $div = this.textElementHelper.$createTextElement(this._control.getText(), this._control.getCssContent());
                        var fontByHeight = this._getTextSide($div, { size: font, unit: fontModel.unit() }, containerSize.height, function ($div) { return $div[0].getBoundingClientRect().height; });
                        var fontByWidth = this._getTextSide($div, { size: fontByHeight, unit: fontModel.unit() }, containerSize.width, function ($div) { return $div[0].getBoundingClientRect().width; });
                        $div.remove();
                        font = Math.min(fontByHeight, fontByWidth);
                    }
                    else {
                        var $div = this.textElementHelper.$createTextElement(this._control.getText(), this._control.getCssContent({ width: containerSize.width / zoom }));
                        font = this._calculateFont($div, { size: font, unit: fontModel.unit() }, containerSize.height - 2 * zoom);
                        $div.remove();
                    }
                    return font;
                };
                FitTextToBoundsAction.prototype.fit = function () {
                    this._control.setFontSize(this._getAvailableFont());
                };
                return FitTextToBoundsAction;
            })();
            Report.FitTextToBoundsAction = FitTextToBoundsAction;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var FitToContainerAction = (function () {
                function FitToContainerAction(_control) {
                    var _this = this;
                    this._control = _control;
                    this._container = ko.pureComputed(function () { return _this._control() && _this._control().parent; });
                }
                FitToContainerAction.prototype.doAction = function () {
                    this._control().rect(this._container().getUsefulRect());
                };
                FitToContainerAction.prototype.allowed = function () {
                    var container = this._container();
                    if (!container || container.getChildrenCollection()().length > 1)
                        return false;
                    return (container instanceof Report.TableCellSurface || container instanceof Report.ControlSurface || container instanceof Report.BandSurface);
                };
                FitToContainerAction.prototype.visible = function () {
                    return !(this._control() instanceof Report.CrossBandSurface || this._control() instanceof Report.XRPageBreakSurface || this._control() instanceof Report.TableOfContentsSurface);
                };
                return FitToContainerAction;
            })();
            Report.FitToContainerAction = FitToContainerAction;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var RenameDataSourceStrategy = (function () {
                function RenameDataSourceStrategy(dsHelper, _afterRenameCallBack) {
                    var _this = this;
                    this.dsHelper = dsHelper;
                    this._afterRenameCallBack = _afterRenameCallBack;
                    this._rename = function (dataSourceInfo, name) {
                        dataSourceInfo.name = name;
                        if (dataSourceInfo.data.name) {
                            dataSourceInfo.data.name(name);
                        }
                        _this._afterRenameCallBack && _this._afterRenameCallBack();
                    };
                }
                RenameDataSourceStrategy.prototype.validateName = function (nameCandidate) {
                    return nameCandidate && !nameCandidate.match(/(?!\_)[\W]+/);
                };
                RenameDataSourceStrategy.prototype.validateUnique = function (nameCandidate, currentName) {
                    return nameCandidate && (nameCandidate === currentName || this.dsHelper().usedDataSources().map(function (dataSource) { return dataSource.name; }).indexOf(nameCandidate) === -1);
                };
                RenameDataSourceStrategy.prototype.tryRename = function (nameCandidate, currentItemData) {
                    var currentDs = this.dsHelper && this.dsHelper().findDataSourceInfo(currentItemData);
                    if (!currentDs)
                        return false;
                    this._rename(currentDs, nameCandidate);
                    return true;
                };
                return RenameDataSourceStrategy;
            })();
            Report.RenameDataSourceStrategy = RenameDataSourceStrategy;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportDesignerControlsHelper = (function (_super) {
                __extends(ReportDesignerControlsHelper, _super);
                function ReportDesignerControlsHelper(helper) {
                    _super.call(this);
                    this.getControls = function (context) { return helper() && helper().getControls(context); };
                    this._disposables.push(this.allControls = ko.computed(function () { return helper() && helper().allControls() || []; }));
                }
                return ReportDesignerControlsHelper;
            })(Designer.Disposable);
            Report.ReportDesignerControlsHelper = ReportDesignerControlsHelper;
            var ReportDesignerContext = (function (_super) {
                __extends(ReportDesignerContext, _super);
                function ReportDesignerContext(options) {
                    var _this = this;
                    _super.call(this);
                    this.report = options.report || new Report.ReportViewModel(options.data);
                    this.url = ko.isObservable(options.url) ? options.url : ko.observable(options.url);
                    if (options.dataSourceRefs)
                        this.report.dataSourceRefs = options.dataSourceRefs;
                    this.report.parameterHelper.initialize(options.knownEnums, options.designerCallbacks);
                    var selection = options.selection;
                    var data = options.initializeOptions;
                    var designerCallbacks = options.designerCallbacks;
                    this.surface = new Report.ReportSurface(this.report);
                    this.parameters = new Report.ParametersViewModel(this.report);
                    this.dataSourceHelper = new Report.DataSourceHelper(this.report.objectStorage, this.report.dataSourceRefs, data.availableDataSources);
                    this.report.dataSourceHelper(this.dataSourceHelper);
                    this.fieldListDataSourceHelper = new Report.FieldListDataSourcesHelper();
                    this.fieldListDataSourceHelper.updateDataSources(this.dataSourceHelper, this.report, this.parameters.parameters);
                    this.calcFieldsSource = new Report.CalculatedFieldsSource(this.report.calculatedFields, this.report.dataSource, this.dataSourceHelper);
                    var chartValueBindingAvailableSources = ko.observableArray(this._getChartAvailableSources(this.dataSourceHelper, this.report.dataSource(), this.parameters));
                    var subscription = this.report.dataSource.subscribe(function (newVal) {
                        chartValueBindingAvailableSources(_this._getChartAvailableSources(_this.dataSourceHelper, newVal, _this.parameters));
                    });
                    this._disposables.push({
                        dispose: function () {
                            chartValueBindingAvailableSources([]);
                            subscription.dispose();
                        }
                    });
                    var dataSourceItemsExtender = new Report.DataSourceItemsExtender(this.dataSourceHelper.usedDataSources);
                    var chartFieldListExtender = new Report.ChartFieldListExtender();
                    this.state = function () {
                        var extensions = _this.report.extensions.peek() || [];
                        if (extensions.length > 0) {
                            return {
                                reportExtensions: _this.report.extensions().map(function (item) {
                                    return {
                                        "Key": item.key(),
                                        "Value": item.value()
                                    };
                                })
                            };
                        }
                        return data.state;
                    };
                    this.fieldListItemsExtenders = [
                        this.parameters,
                        dataSourceItemsExtender,
                        this.calcFieldsSource,
                        chartFieldListExtender
                    ];
                    this.controlsHelper = new Report.DesignControlsHelper(this.report, selection);
                    var wrappedCallback = this.fieldListDataSourceHelper.wrapFieldsCallback(designerCallbacks.fieldLists, this.state);
                    this.fieldListProvider = new Designer.FieldListProvider(wrappedCallback, this.fieldListDataSourceHelper.fieldListDataSources, this.fieldListItemsExtenders);
                    this.reportItemsProvider = new Report.ReportItemsProvider(this.controlsHelper.allControls, this.fieldListProvider);
                    this.dataBindingsProvider = new Designer.FieldListProvider(wrappedCallback, this.fieldListDataSourceHelper.fieldListDataSources, [this.parameters, this.calcFieldsSource, chartFieldListExtender]);
                    this.chartValueBindingProvider = new Designer.FieldListProvider(wrappedCallback, chartValueBindingAvailableSources, [this.parameters, this.calcFieldsSource]);
                    this.displayNameProvider = new Report.DisplayNameProvider(this.fieldListProvider, this.fieldListDataSourceHelper.dataSourceHelper(), this.report.dataSource);
                    this.expressionDisplayNameProvider = new Report.DisplayNameProvider(this.reportItemsProvider, this.fieldListDataSourceHelper.dataSourceHelper(), this.report.dataSource);
                    this._disposables.push(this.report);
                    this._disposables.push(this.surface);
                    this._disposables.push(this.displayNameProvider);
                    this._disposables.push(this.expressionDisplayNameProvider);
                    this._disposables.push(this.dataSourceHelper);
                    this._disposables.push(this.fieldListDataSourceHelper);
                    this._disposables.push(this.calcFieldsSource);
                    this._disposables.push(this.parameters);
                    this._disposables.push(this.controlsHelper);
                    this._disposables.push(this.reportItemsProvider);
                }
                ReportDesignerContext.prototype._getChartAvailableSources = function (dsHelper, dataSource, parameters) {
                    return [
                        dataSource && dsHelper.findDataSourceInfo(dataSource),
                        { ref: "Parameters", name: "Parameters", specifics: "parameters", data: parameters },
                        { ref: "none", name: "none", specifics: "none", data: null }
                    ].filter(function (x) { return x; });
                };
                ReportDesignerContext.prototype.getInfo = function () {
                    return [{ propertyName: "report", modelName: "@Report" }];
                };
                ReportDesignerContext.prototype.isModelReady = function () {
                    return this.report && this.report.isModelReady();
                };
                ReportDesignerContext.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.report = null;
                    this.url = null;
                    this.surface = null;
                    this.parameters = null;
                    this.dataSourceHelper = null;
                    this.fieldListDataSourceHelper = null;
                    this.calcFieldsSource = null;
                    this.fieldListItemsExtenders = [];
                    this.controlsHelper = null;
                    this.fieldListProvider = null;
                    this.reportItemsProvider = null;
                    this.dataBindingsProvider = null;
                    this.chartValueBindingProvider = null;
                    this.displayNameProvider = null;
                    this.expressionDisplayNameProvider = null;
                };
                return ReportDesignerContext;
            })(DevExpress.Analytics.Utils.Disposable);
            Report.ReportDesignerContext = ReportDesignerContext;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.QBRequestWrapper = new DevExpress.QueryBuilder.Utils.RequestWrapper();
            var CustomMergingEngine = (function () {
                function CustomMergingEngine() {
                }
                CustomMergingEngine.prototype._customMergeForFormatString = function (propertyName, controls, undoEngine) {
                    if (propertyName === "formatString") {
                        var result = ko.observable(controls.every(function (control) { return controls[0][propertyName].peek() === control[propertyName].peek(); }) ? controls[0][propertyName].peek() : null);
                        return {
                            result: result,
                            subscriptions: [
                                result.subscribe(function (newVal) {
                                    undoEngine && undoEngine().start();
                                    controls.forEach(function (control) {
                                        if (!control.disabled()) {
                                            control[propertyName](newVal);
                                        }
                                    });
                                    undoEngine && undoEngine().end();
                                })]
                        };
                    }
                };
                CustomMergingEngine.prototype.customMerge = function (propertyName, controls, undoEngine) {
                    var _this = this;
                    if (propertyName === "dataBindings") {
                        var result = ko.observableArray();
                        var subscriptions = [];
                        var allBindings = [].concat.apply([], controls.map(function (x) { return x[propertyName](); }));
                        controls[0][propertyName]().map(function (x) { return x.propertyName(); }).forEach(function (name) {
                            var availableBindings = allBindings.filter(function (binding) {
                                return binding.propertyName() === name;
                            });
                            if (availableBindings.length === controls.length) {
                                var combinedObj = Designer.CombinedObject._merge(availableBindings, undoEngine, _this._customMergeForFormatString);
                                var binding = combinedObj.result;
                                binding["isEmpty"] = function () {
                                    return !(binding["dataMember"]() || binding["dataSource"]() || binding["parameter"]());
                                };
                                binding["visible"] = ko.observable(false);
                                binding["disabled"] = ko.computed(function () {
                                    return availableBindings.every(function (x) { return x.disabled(); });
                                });
                                combinedObj.subscriptions.push(binding["disabled"]);
                                result.push(binding);
                                subscriptions = [].concat.apply(subscriptions, combinedObj.subscriptions);
                            }
                        });
                        return { result: result, subscriptions: subscriptions };
                    }
                };
                return CustomMergingEngine;
            })();
            Report.CustomMergingEngine = CustomMergingEngine;
            var AddonsSettings = (function () {
                function AddonsSettings() {
                }
                return AddonsSettings;
            })();
            Report.AddonsSettings = AddonsSettings;
            var WizardsInitializerSettings = (function () {
                function WizardsInitializerSettings(connectionStrings, callbacks, rtl) {
                    this.connectionStrings = connectionStrings;
                    this.callbacks = callbacks;
                    this.rtl = rtl;
                }
                WizardsInitializerSettings.prototype.createSQLDataSourceWizard = function (disableCustomSql, itemsProvider) {
                    var _this = this;
                    this.sqlDataSourceWizard = new Report.Wizard.SqlDataSourceWizard(this.connectionStrings, {
                        selectStatement: function (connection, queryJSON) { return Report.QBRequestWrapper.getSelectStatement(connection, queryJSON); },
                        finishCallback: function (data) { return _this.sqlDataSourceEditor.applySqlDataSourceWizardChanges(data); },
                        customizeQBInitData: function (data) {
                            data.data.parametersItemsProvider = itemsProvider;
                            data.data.requestWrapper = Report.QBRequestWrapper;
                            return data;
                        }
                    }, disableCustomSql, this.rtl);
                    return this.sqlDataSourceWizard;
                };
                WizardsInitializerSettings.prototype.createSqlDataSourceEditor = function (settings) {
                    this.sqlDataSourceEditor = new Report.SqlDataSourceEditor(settings.dataSourceHelper, settings.sqlDataSourceWizard, settings.model, settings.undoEngine, settings.fieldListProvider);
                };
                WizardsInitializerSettings.prototype.createMultipleQueriesWizardCallbacks = function (itemsProvider) {
                    var _this = this;
                    this.multipleQueriesWizardCallbacks = {
                        selectStatement: function (connection, queryJSON) { return Report.QBRequestWrapper.getSelectStatement(connection, queryJSON); },
                        sqlDataSourceResultSchema: function (dataSource) { return Report.QBRequestWrapper.rebuildResultSchema(dataSource); },
                        finishCallback: function (data) { return _this.sqlDataSourceEditor.applySqlDataSourceWizardChanges(data); },
                        customQueriesPreset: Report.ReportDataSourceService.getCustomQueriesPreset,
                        customizeQBInitData: function (data) {
                            data.data.parametersItemsProvider = itemsProvider;
                            data.data.requestWrapper = Report.QBRequestWrapper;
                            return data;
                        }
                    };
                };
                WizardsInitializerSettings.prototype.createMultiQueryDataSourceWizard = function (disableCustomSql, multipleQueriesWizardCallbacks) {
                    if (multipleQueriesWizardCallbacks === void 0) { multipleQueriesWizardCallbacks = this.multipleQueriesWizardCallbacks; }
                    this.multiQueryDataSourceWizard = new Report.Wizard.MultiQueryDataSourceWizard(this.connectionStrings, multipleQueriesWizardCallbacks, disableCustomSql, this.rtl);
                };
                WizardsInitializerSettings.prototype.createReportWizard = function (settings) {
                    this.reportWizard = Report.createReportWizard(settings.dataSourceHelper, settings.data, settings.navigation, this.callbacks.fieldLists, settings.isLoading, settings.isDirty, settings.state, settings.multipleQueriesWizardCallbacks, this.connectionStrings, settings.model);
                };
                return WizardsInitializerSettings;
            })();
            Report.WizardsInitializerSettings = WizardsInitializerSettings;
            var ReportDialogSettings = (function () {
                function ReportDialogSettings(_designerCallbacks) {
                    this._designerCallbacks = _designerCallbacks;
                }
                ReportDialogSettings.prototype.createSaveReportDialog = function (reportUrls) {
                    this.saveReportDialog = new Report.SaveReportDialog(reportUrls, this._designerCallbacks);
                    this._designerCallbacks.customizeSaveAsDialog && this._designerCallbacks.customizeSaveAsDialog(this.saveReportDialog);
                };
                ReportDialogSettings.prototype.createSaveReportDialogLight = function (saveReportDialog) {
                    if (saveReportDialog === void 0) { saveReportDialog = this.saveReportDialog; }
                    this.saveReportDialogLight = new Report.SaveReportDialogLight(saveReportDialog, this._designerCallbacks);
                    this._designerCallbacks.customizeSaveDialog && this._designerCallbacks.customizeSaveDialog(this.saveReportDialogLight);
                };
                ReportDialogSettings.prototype.createOpenReportDialog = function (reportUrls, navigation) {
                    this.openReportDialog = new Report.OpenReportDialog(reportUrls, navigation, this._designerCallbacks);
                    this._designerCallbacks.customizeOpenDialog && this._designerCallbacks.customizeOpenDialog(this.openReportDialog);
                };
                return ReportDialogSettings;
            })();
            Report.ReportDialogSettings = ReportDialogSettings;
            var ReportDesignerInitializer = (function (_super) {
                __extends(ReportDesignerInitializer, _super);
                function ReportDesignerInitializer(options) {
                    var _this = this;
                    _super.call(this);
                    this.options = options;
                    this._customMergeEngine = new CustomMergingEngine();
                    this._updateCallback = null;
                    this._selection = options.selection || new Designer.SurfaceSelection;
                    this.configurateRtl(options.rtl)
                        .configureReportStorageRegistration(options.reportStorageWebIsRegister, options.allowMDI)
                        .addCallbacks(options.callbacks)
                        .addElement("state", function () { return options.state; })
                        .addElement("availableDataSources", function () {
                        return (options.availableDataSources || []).map(function (object) {
                            return $.extend({}, object, { data: new Report.ObjectStorageItem(object.data) });
                        });
                    });
                    var navigation = new Report.NavigateByReports({
                        allowMDI: this._allowMDI,
                        callbacks: this._designerCallbacks,
                        knownEnums: options.knownEnums,
                        reportUrl: options.reportUrl,
                        initOptions: {
                            availableDataSources: options.availableDataSources,
                            state: options.state
                        },
                        selection: this._selection
                    });
                    var context = ko.computed({
                        read: function () {
                            return navigation.currentTab() && navigation.currentTab().context();
                        },
                        write: function (newVal) {
                            navigation.currentTab() && navigation.currentTab().context(newVal);
                        }
                    });
                    var model = ko.computed({
                        read: function () {
                            return context() && context().report;
                        },
                        write: function (newVal) {
                            if (!_this.isDisposing)
                                navigation.changeContext(newVal);
                        }
                    });
                    var surface = ko.computed(function () { return context() && context().surface; });
                    var undoEngine = ko.computed(function () { return navigation.currentTab() && navigation.currentTab().undoEngine; });
                    this._addDisposable(context);
                    this._addDisposable(model);
                    this._addDisposable(surface);
                    this._addDisposable(undoEngine);
                    this.initializeContext({ model: model, surface: surface, undoEngine: undoEngine });
                    this.mapOnContext();
                    this.addElement("navigateByReports", function () { return navigation; });
                    this.addElement("getTabs", function () { return function () { return navigation.tabs(); }; });
                    this.addElement("closeTab", function () { return function (tab, force) {
                        if (force === void 0) { force = false; }
                        return navigation.removeTab(tab, force);
                    }; });
                    this._reportcontext = context;
                    this._addDisposable(context.subscribe(function (newVal) {
                        if (_this.buildingModel.propertyGrid) {
                            _this.buildingModel.propertyGrid.cleanEditors();
                            _this.buildingModel.propertyGrid.editorsRendered(!_this.buildingModel.propertyGrid.isSortingByGroups());
                        }
                        _this.buildingModel.popularProperties && _this.buildingModel.popularProperties.cleanEditors();
                    }));
                    this._selection.focused(surface());
                    this._addDisposable(surface.subscribe(function (newValue) {
                        if (!newValue)
                            _this._selection.reset();
                        else
                            _this._selection.focused(newValue);
                    }));
                }
                Object.defineProperty(ReportDesignerInitializer.prototype, "reportContext", {
                    get: function () {
                        return this._reportcontext;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ReportDesignerInitializer.prototype, "buildingModel", {
                    get: function () {
                        return _super.prototype.getModel.call(this);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ReportDesignerInitializer.prototype, "_designerCallbacks", {
                    get: function () {
                        return this._callbacks && this._callbacks.designer;
                    },
                    enumerable: true,
                    configurable: true
                });
                ReportDesignerInitializer.prototype.subscribeIncomeReport = function (report, reportUrl, dataSourceRefs) {
                    var _this = this;
                    this._addDisposable(report.subscribe(function (newValue) {
                        var newModel = new Report.ReportViewModel(newValue);
                        var getDataSourceRefs = function (key, dataSourceRefs) {
                            var dataSourceRefs = (dataSourceRefs || []).filter(function (ds) { return ds.Key === key; })[0];
                            return dataSourceRefs && dataSourceRefs.Value || [];
                        };
                        newModel.dataSourceRefs = getDataSourceRefs(newModel.key(), dataSourceRefs);
                        var subreportControls = Report.subreportControlCollector(newModel);
                        subreportControls.forEach(function (subreport) {
                            if (subreport.reportSource) {
                                subreport.reportSource.dataSourceRefs = getDataSourceRefs(subreport.key(), dataSourceRefs);
                            }
                        });
                        if (_this.buildingModel.navigateByReports.tabs().length === 0) {
                            if ((function (args) { return void (_this._designerCallbacks.reportOpening && _this._designerCallbacks.reportOpening(args)) || args; })({ url: reportUrl && reportUrl() || "", cancel: false }).cancel) {
                                newModel.dispose();
                            }
                            else {
                                _this.buildingModel.navigateByReports.addTab(newModel, reportUrl);
                            }
                        }
                        else {
                            _this.buildingModel.model(newModel);
                        }
                    }));
                    return this;
                };
                ReportDesignerInitializer.prototype._addDisposable = function (object) {
                    this._disposables.push(object);
                };
                ReportDesignerInitializer.prototype._getSubreportUrls = function (reportUrls, subreports) {
                    Report.ReportStorageWeb.getUrls(subreports).done(function (result) {
                        reportUrls(result);
                    });
                };
                ReportDesignerInitializer.prototype._tryAddScriptEditor = function (isScriptsDisabled) {
                    var _this = this;
                    isScriptsDisabled = isScriptsDisabled || !DevExpress.JS.Widgets.aceAvailable;
                    if (!isScriptsDisabled) {
                        var scriptsEditor = new Report.ScriptsEditor(this.buildingModel.model, this.buildingModel.controlsHelper.allControls);
                        this._addDisposable(scriptsEditor.editorVisible.subscribe(function (newValue) {
                            if (newValue) {
                                var focusedControl = _this.buildingModel.selection.focused();
                                if (focusedControl && focusedControl.getControlModel) {
                                    var controlModel = focusedControl.getControlModel();
                                    scriptsEditor.selectedControl(!!controlModel.scripts ? controlModel : controlModel.parentModel());
                                }
                                var resizeFunction = function () { return setTimeout(function () {
                                    scriptsEditor.editorContainer().resize();
                                }, 1); };
                                if (!scriptsEditor.editorContainer())
                                    var innerSubscription = scriptsEditor.editorContainer.subscribe(function (newVal) {
                                        innerSubscription.dispose();
                                        resizeFunction();
                                    });
                                else
                                    resizeFunction();
                            }
                            _this.buildingModel.designMode(!newValue);
                        }));
                        this.addElement("scriptsEditor", function () { return scriptsEditor; });
                        this.addElement("events", function () { return ko.pureComputed(function () { return _this.buildingModel.scriptsEditor.allFunctionNames; }); });
                        this.addElement("gotoEvent", function () { return function (functionName, eventName, model) {
                            scriptsEditor.editorVisible(true);
                            scriptsEditor.ensureEvent(eventName.substring(2), functionName, model);
                        }; });
                        return true;
                    }
                    else {
                        var controlTypes = Object.keys(Report.controlsFactory.controlsMap);
                        for (var index = 0; index < controlTypes.length; index++) {
                            ["Scripts", "Script References", "Script Language"].forEach(function (propertyDisplayName) {
                                var propertyInfo = Report.controlsFactory.getPropertyInfo(controlTypes[index], propertyDisplayName);
                                propertyInfo && (propertyInfo.visible = false);
                            });
                        }
                        Report.calculatedFieldScripts.visible = false;
                    }
                    return false;
                };
                ReportDesignerInitializer.prototype._getControls = function (controls, filter, isNoneItemAdded) {
                    if (isNoneItemAdded === void 0) { isNoneItemAdded = true; }
                    return ko.pureComputed(function () {
                        var result = controls();
                        if (filter) {
                            result = result.filter(filter);
                        }
                        var allControls = result.map(function (item) {
                            return { displayName: item.name(), value: item };
                        });
                        if (isNoneItemAdded)
                            allControls.splice(0, 0, { displayName: Designer.localizeNoneString("(none)"), value: null });
                        return allControls;
                    }).extend({ throttle: 1 });
                };
                ReportDesignerInitializer.prototype.addReportDialogs = function (func) {
                    var _this = this;
                    var settings = new ReportDialogSettings(this._designerCallbacks);
                    func(settings);
                    settings.saveReportDialog && this.addElement("saveReportDialog", function () { return settings.saveReportDialog; });
                    if (settings.saveReportDialogLight) {
                        this.addElement("saveReportDialogLight", function () { return settings.saveReportDialogLight; });
                        this.buildingModel.navigateByReports.save = function (tab) {
                            _this.buildingModel.saveReportDialogLight.show(tab);
                        };
                    }
                    settings.openReportDialog && this.addElement("openReportDialog", function () { return settings.openReportDialog; });
                    return this;
                };
                ReportDesignerInitializer.prototype.addFlagsAndInitProperties = function () {
                    var _this = this;
                    this.addElement("validationMode", function () { return ko.computed({
                        read: function () {
                            return _this.buildingModel.surface() && _this.buildingModel.surface().validationMode();
                        }, write: function (newVal) {
                            _this.buildingModel.surface().validationMode(newVal);
                        }
                    }); });
                    this.addElement("isDirty", function () { return ko.computed({
                        read: function () {
                            return _this.buildingModel.navigateByReports.currentTab() && _this.buildingModel.navigateByReports.currentTab().isDirty();
                        },
                        write: function (newVal) {
                            _this.buildingModel.navigateByReports.currentTab() && _this.buildingModel.navigateByReports.currentTab().isDirty(newVal);
                        }
                    }); });
                    this.addElement("designMode", function () { return ko.observable(true); });
                    this.addIsLoading(function () {
                        var isLoading = ko.observable(true);
                        _this.buildingModel.navigateByReports.init(isLoading);
                        return isLoading;
                    });
                    this.addElement("rootStyle", function () { return "dxrd-designer dxd-back-primary"; });
                    this.addElement("selectedPath", function () { return ko.observable(null); });
                    this.addElement("actionsGroupTitle", function () { return function () { return DevExpress.Analytics.getLocalization('Actions', 'ASPxReportsStringId.ReportDesigner_Actions'); }; });
                    this.addElement("updateFont", function () { return function (values) {
                        DevExpress.Analytics.Widgets.availableFonts($.extend(DevExpress.Analytics.Widgets.availableFonts(), values));
                    }; });
                    this.addElement("sortFont", function () { return function () {
                        var sortedObj = {};
                        var fonts = DevExpress.Analytics.Widgets.availableFonts.peek();
                        Object.keys(fonts).sort(function (a, b) { return a.localeCompare(b); }).forEach(function (key) { return sortedObj[key] = fonts[key]; });
                        DevExpress.Analytics.Widgets.availableFonts(sortedObj);
                    }; });
                    this.addElement("zoomStep", function () { return ko.observable(0.05); });
                    this.addElement("surfaceSize", function () { return ko.observable(0); });
                    return this;
                };
                ReportDesignerInitializer.prototype.addPreview = function (options) {
                    var _this = this;
                    this.addElement("reportPreviewModel", function () {
                        var reportPreviewModel = DevExpress.Report.Preview.createPreview(options.element, options.callbacks, options.localization, options.parametersInfo, options.handlerUri, false, options.rtl);
                        _this._addDisposable(reportPreviewModel.reportPreview.previewVisible.subscribe(function (newValue) {
                            _this.buildingModel.designMode(!newValue);
                        }));
                        return reportPreviewModel;
                    });
                    return this;
                };
                ReportDesignerInitializer.prototype.addReportUrls = function (subreports) {
                    var _this = this;
                    this.addElement("reportUrls", function () {
                        var result = ko.observableArray([]);
                        _this._getSubreportUrls(result, subreports);
                        return result;
                    });
                    return this;
                };
                ReportDesignerInitializer.prototype._wrapActionProvider = function (actionsProvider) {
                    return {
                        getActions: function (context) {
                            return actionsProvider() && actionsProvider().getActions(context) || [];
                        }
                    };
                };
                ReportDesignerInitializer.prototype.initializeFieldListActionProviders = function (func) {
                    var _this = this;
                    if (func === void 0) { func = function () {
                        var providers = [];
                        if (_this._calculatedFieldsSource)
                            providers.push(_this._wrapActionProvider(_this._calculatedFieldsSource));
                        if (_this._parameters)
                            providers.push(_this._wrapActionProvider(_this._parameters));
                        if (_this._sqlDataSourceEditor)
                            providers.push(_this._sqlDataSourceEditor);
                        return providers;
                    }; }
                    this.addElement("fieldListActionProviders", func);
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeCalculatedFieldsSource = function () {
                    var _this = this;
                    var calculatedFieldsSource = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().calcFieldsSource; });
                    this.addElement("calculatedFieldsSource", function () { return calculatedFieldsSource; });
                    this._calculatedFieldsSource = calculatedFieldsSource;
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeFieldListItemsExtenders = function () {
                    var _this = this;
                    var fieldListItemsExtenders = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().fieldListItemsExtenders; });
                    this.addElement("fieldListItemsExtenders", function () { return fieldListItemsExtenders; });
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeParameters = function () {
                    var _this = this;
                    var parameters = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().parameters; });
                    this.addElement("parameters", function () { return parameters; });
                    this._parameters = parameters;
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeFieldListProvider = function () {
                    var _this = this;
                    var fieldListProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().fieldListProvider; });
                    this.addElement("fieldListProvider", function () { return fieldListProvider; });
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeReportItemsProvider = function () {
                    var _this = this;
                    var reportItemsProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().reportItemsProvider; });
                    this.addElement("reportItemsProvider", function () { return reportItemsProvider; });
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeDataBindingsProvider = function () {
                    var _this = this;
                    var dataBindingsProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().dataBindingsProvider; });
                    this.addElement("dataBindingsProvider", function () { return dataBindingsProvider; });
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeDisplayNameProvider = function () {
                    var _this = this;
                    var displayNameProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().displayNameProvider; });
                    this.addElement("displayNameProvider", function () { return displayNameProvider; });
                    this.addElement("getDisplayNameByPath", function () { return function (path, value) { return displayNameProvider().getDisplayNameByPath(path, value); }; });
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeExpressionDisplayNameProvider = function () {
                    var _this = this;
                    var expressionDisplayNameProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().expressionDisplayNameProvider; });
                    this.addElement("expressionDisplayNameProvider", function () { return expressionDisplayNameProvider; });
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeDataSourceHelper = function () {
                    var _this = this;
                    var dataSourceHelper = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().dataSourceHelper; });
                    this.addElement("dataSourceHelper", function () { return dataSourceHelper; });
                    var fieldListDataSourceHelper = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().fieldListDataSourceHelper; });
                    this.addElement("fieldListDataSources", function () { return ko.computed(function () { return fieldListDataSourceHelper() && fieldListDataSourceHelper().fieldListDataSources(); }); });
                    this._addDisposable(fieldListDataSourceHelper);
                    return this;
                };
                ;
                ReportDesignerInitializer.prototype.addSelection = function (func) {
                    var _this = this;
                    if (func === void 0) { func = function (settings) {
                        settings.selection = _this._selection;
                        var rtl = ko.computed(function () { return _this.buildingModel.surface() && _this.buildingModel.surface().rtl(); });
                        var snapLinesCollector = new Report.ReportSnapLinesCollector(rtl);
                        _this._addDisposable(rtl);
                        settings.snapHelper = new DevExpress.Analytics.Internal.SnapLinesHelper(_this.buildingModel.surface, DevExpress.Analytics.Internal.SnapLinesHelper.snapTolerance, snapLinesCollector);
                        settings.editableObject = DevExpress.Analytics.Internal.CombinedObject.getEditableObject(settings.selection, _this.buildingModel.undoEngine, _this._customMergeEngine.customMerge).extend({ throttle: 1 });
                        settings.addDragDrop(function (dragDropSettings) {
                            dragDropSettings.dragHelperContent = new DevExpress.Analytics.Internal.DragHelperContent(settings.selection);
                            dragDropSettings.dragDropStarted = DevExpress.Analytics.Internal.DragDropHandler.started;
                            dragDropSettings.addDragDropHandler("dragHandler", new DevExpress.Analytics.Internal.SelectionDragDropHandler(_this.buildingModel.surface, settings.selection, _this.buildingModel.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent));
                            dragDropSettings.addDragDropHandler("toolboxDragHandler", new Report.ReportToolboxDragDropHandler(_this.buildingModel.surface, _this._selection, _this.buildingModel.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent, Report.controlsFactory, _this._designerCallbacks.componentAdded));
                            dragDropSettings.addDragDropHandler("fieldDragHandler", new Report.FieldListDragDropHandler(_this.buildingModel.surface, _this._selection, _this.buildingModel.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent, _this.buildingModel.fieldListDataSources, _this._designerCallbacks.componentAdded));
                        });
                        settings.addResize(function (resizeSettings) {
                            resizeSettings.handler = {
                                starting: function () {
                                    _this._selection.expectClick = true;
                                    _this.buildingModel.undoEngine().start();
                                },
                                stopped: function () {
                                    _this.buildingModel.undoEngine().end();
                                    setTimeout(function () { _this._selection.expectClick = false; }, 100);
                                },
                                disabled: DevExpress.Analytics.Internal.DragDropHandler.started,
                                snapHelper: settings.snapHelper
                            };
                        });
                    }; }
                    _super.prototype.addSelection.call(this, func);
                    return this;
                };
                ReportDesignerInitializer.prototype.addToolboxItems = function (items) {
                    _super.prototype.addToolboxItems.call(this, items);
                    return this;
                };
                ReportDesignerInitializer.prototype.addControlProperties = function (editors, groups) {
                    _super.prototype.addControlProperties.apply(this, arguments);
                    return this;
                };
                ReportDesignerInitializer.prototype.addMenu = function (func) {
                    _super.prototype.addMenu.apply(this, arguments);
                    return this;
                };
                ReportDesignerInitializer.prototype.addControlsHelper = function (func) {
                    var _this = this;
                    if (func === void 0) { func = function (settings) {
                        var helper = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().controlsHelper; });
                        _this._addDisposable(helper);
                        var controlHelper = new Report.ReportDesignerControlsHelper(helper);
                        settings
                            .addControlsHelper(controlHelper)
                            .addControlsStore();
                    }; }
                    _super.prototype.addControlsHelper.call(this, func);
                    return this;
                };
                ReportDesignerInitializer.prototype._createPropertiesTab = function () {
                    var _this = this;
                    return new Designer.TabInfo({
                        text: "Properties",
                        template: "dxrd-propertiestab",
                        model: this.buildingModel.propertyGrid,
                        localizationId: 'ReportStringId.Cmd_Properties',
                        visible: ko.pureComputed(function () { return !!_this.buildingModel.model(); }),
                        disabled: ko.pureComputed(function () { return _this.buildingModel.propertyGrid.focusedItem() instanceof Array; }).extend({ throttle: 100 })
                    });
                };
                ReportDesignerInitializer.prototype._createExpressionsTab = function (context) {
                    var _this = this;
                    var expressionGridModel = ko.computed(function () {
                        return _this.buildingModel.editableObject() && _this.buildingModel.editableObject().expressionObj;
                    });
                    var expressionGrid = null;
                    this._addDisposable(context.subscribe(function (newVal) {
                        expressionGrid.cleanEditors();
                    }));
                    expressionGrid = new DevExpress.JS.Widgets.ObjectProperties(expressionGridModel);
                    this._addDisposable(expressionGrid);
                    this._addDisposable(expressionGridModel);
                    var expressionTab = new Designer.TabInfo({
                        text: "Expressions",
                        template: "dxrd-expressions-tab",
                        model: expressionGrid,
                        localizationId: "DevExpress.XtraReports.UI.XRControl.Expressions",
                        imageClassName: "expressions",
                        imageTemplateName: "dxrd-svg-tabs-expressions",
                        visible: ko.pureComputed(function () { return _this.buildingModel.model() && _this.buildingModel.model()._dataBindingMode() !== Report.DataBindingMode.Bindings; }),
                        disabled: ko.pureComputed(function () {
                            return _this.buildingModel.editableObject() && ((_this.buildingModel.editableObject() instanceof Array) || !Report.isControl(_this.buildingModel.editableObject()));
                        }).extend({ throttle: 100 })
                    });
                    this._addDisposable(expressionTab.active.subscribe(function (newVal) {
                        if (newVal && expressionTab.visible()) {
                            _this.buildingModel.controlsStore.setFilter(DevExpress.Designer.Report.isControl);
                        }
                        else {
                            _this.buildingModel.controlsStore.resetFilter();
                        }
                    }));
                    return expressionTab;
                };
                ReportDesignerInitializer.prototype._createReportExplorerTab = function () {
                    var _this = this;
                    var reportExplorer = new Report.ReportExplorerModel(this.buildingModel.model, this.buildingModel.editableObject, function () {
                        _this.buildingModel.tabPanel.selectTab({ model: _this.buildingModel.tabPanel.tabs[0] });
                    }, new Report.ReportExplorerDragDropHandler(this.buildingModel.surface, this.buildingModel.selection, this.buildingModel.undoEngine, this.buildingModel.dragHelperContent), this.buildingModel.selection);
                    this._addDisposable(reportExplorer);
                    return new Designer.TabInfo({
                        text: "Report Explorer",
                        template: "dxrd-reportexplorerwrapper",
                        model: reportExplorer,
                        localizationId: 'ReportStringId.UD_Title_ReportExplorer',
                        imageClassName: "reportexplorer",
                        imageTemplateName: "dxrd-svg-tabs-reportexplorer",
                        visible: ko.pureComputed(function () { return !!_this.buildingModel.model(); })
                    });
                };
                ReportDesignerInitializer.prototype._createFieldListTab = function (designerCallbacks) {
                    var _this = this;
                    var treeListOptions = {
                        itemsProvider: this.buildingModel.fieldListProvider,
                        selectedPath: this.buildingModel.selectedPath,
                        treeListController: new Report.FieldListController(this.buildingModel.fieldListActionProviders, Designer.createActionWrappingFunction("WrapForFieldList", function (model, handler) {
                            _this.buildingModel.undoEngine().start();
                            var result = handler(model);
                            _this.buildingModel.undoEngine().end();
                            if (result && result.name) {
                                _this.buildingModel.selectedPath(model.path + "." + ko.unwrap(result.name));
                            }
                        }), this.buildingModel.fieldDragHandler, designerCallbacks.customizeFieldListActions)
                    }, popoverVisible = ko.observable(false), fieldListModel = {
                        treeListOptions: treeListOptions,
                        popoverVisible: popoverVisible,
                        addDataSourceBtnVisible: ko.pureComputed(function () {
                            var dsHelper = ko.unwrap(_this.buildingModel.dataSourceHelper);
                            return dsHelper && dsHelper.availableDataSources && dsHelper.availableDataSources.length > 0;
                        }),
                        showPopover: function () {
                            popoverVisible(true);
                        },
                        dataSourceListItems: function () {
                            var dsHelper = ko.unwrap(_this.buildingModel.dataSourceHelper);
                            return dsHelper && dsHelper.availableDataSources;
                        },
                        itemClickAction: function (e) {
                            popoverVisible(false);
                            var data = e.itemData;
                            data.id = Report.Utils.guid().replace(/-/g, "");
                            Report.addDataSourceToReport(ko.unwrap(_this.buildingModel.dataSourceHelper), _this.buildingModel.model(), _this.buildingModel.undoEngine(), _this.buildingModel.fieldListProvider(), data, true);
                        }
                    };
                    return new Designer.TabInfo({
                        text: "Fields",
                        template: "dxrd-fieldlistwrapper",
                        model: fieldListModel,
                        localizationId: 'ReportStringId.UD_Title_FieldList',
                        imageClassName: "fieldlist",
                        imageTemplateName: "dxrd-svg-tabs-fieldlist",
                        visible: ko.pureComputed(function () { return !!_this.buildingModel.model(); })
                    });
                };
                ReportDesignerInitializer.prototype.addTabPanel = function (panel, addTabInfo) {
                    var _this = this;
                    if (addTabInfo === void 0) { addTabInfo = function () {
                        return [
                            _this._createPropertiesTab(),
                            _this._createExpressionsTab(_this._reportcontext),
                            _this._createFieldListTab(_this._designerCallbacks),
                            _this._createReportExplorerTab()
                        ];
                    }; }
                    _super.prototype.addTabPanel.call(this, panel, addTabInfo);
                    var contextSubscription = this._reportcontext.subscribe(function (newVal) {
                        if (!!newVal) {
                            contextSubscription.dispose();
                            _this.buildingModel.tabPanel.collapsed(false);
                        }
                    });
                    this._addDisposable(contextSubscription);
                    return this;
                };
                ReportDesignerInitializer.prototype._createActionsStorage = function (actions) {
                    var object = {};
                    for (var i = actions.length - 1; i > -1; i--) {
                        object[actions[i].id] = actions[i].clickAction;
                    }
                    return object;
                };
                ReportDesignerInitializer.prototype.addOpenReportMethod = function () {
                    var _this = this;
                    this.addElement("openReport", function () { return function (url) {
                        if ((function (args) { return (_this._designerCallbacks.reportOpening && _this._designerCallbacks.reportOpening(args)) || args; })({ url: url, cancel: false }).cancel)
                            return;
                        Report.ReportStorageWeb.getReportByUrl(url).done(function (result) {
                            _this.buildingModel.navigateByReports.addTab(result, ko.observable(url));
                        });
                    }; });
                    return this;
                };
                ReportDesignerInitializer.prototype.initializeUIEffects = function (applyBindings, element) {
                    this._addDisposable(this.buildingModel.editableObject.subscribe(function () {
                        var $scrollView = $(".dxrd-designer .dxrd-properties-wrapper").find(".dx-scrollview");
                        var scrollViewInstance = $scrollView.data("dxScrollView") && $scrollView.dxScrollView("instance");
                        scrollViewInstance && scrollViewInstance["scrollTo"] && scrollViewInstance["scrollTo"](0);
                    }));
                    var updateSurfaceContentSize_ = Designer.updateSurfaceContentSize(this.buildingModel.surfaceSize, element, this.rtl);
                    var updateContentSizeTimeout = null;
                    var updateSurfaceContentSize_async = function () {
                        updateContentSizeTimeout && clearTimeout(updateContentSizeTimeout);
                        updateContentSizeTimeout = setTimeout(function () {
                            updateSurfaceContentSize_();
                        }, 1);
                    };
                    this._updateCallback = function () {
                        updateSurfaceContentSize_();
                    };
                    $(window).bind("resize", this._updateCallback);
                    this.buildingModel.onViewPortScroll = function (viewPort) {
                        var $viewPort = $(viewPort), $surface = $viewPort.closest(".dxrd-surface");
                        $surface.find(".dxrd-bands-panel-wrapper").scrollTop($viewPort.scrollTop());
                        $surface.find(".dxrd-hruler-wrapper").scrollLeft($viewPort.scrollLeft());
                    };
                    this._addDisposable(this.buildingModel.tabPanel.width.subscribe(function () {
                        updateSurfaceContentSize_async();
                    }));
                    this.buildingModel.updateSurfaceSize = function () {
                        updateSurfaceContentSize_();
                    };
                    this._addDisposable(this.buildingModel.navigateByReports.height.subscribe(function () {
                        updateSurfaceContentSize_async();
                    }));
                    if (applyBindings) {
                        this.buildingModel.updateSurfaceSize();
                    }
                    return this;
                };
                ReportDesignerInitializer.prototype._customizeDesignerActions = function (designerModel, nextCustomizer, exitDesigner, state, callbacks) {
                    var report = designerModel.model, reportPreview = designerModel.reportPreviewModel.reportPreview, reportWizard = designerModel.wizard, sqlDataSourceWizard = designerModel.sqlDataSourceWizard, completeSqlDataSourceWizard = designerModel.completeSqlDataSourceWizard, scriptsEditor = designerModel.scriptsEditor;
                    return (function (actions) {
                        $.extend(Designer.findFirstItemMatchesCondition(actions, function (item) { return item.id === Designer.ActionId.Copy; }), { textId: Report.StringId.Copy });
                        if (Report.reportStorageWebIsRegister) {
                            actions.push({
                                id: Report.ActionId.NewReport,
                                container: "menu",
                                text: "New",
                                displayText: function () { return Designer.getLocalization("New", 'ReportStringId.UD_Capt_NewReport'); },
                                imageClassName: "dxrd-image-newreport",
                                imageTemplateName: "dxrd-svg-menu-newreport",
                                disabled: ko.observable(false),
                                visible: true,
                                hotKey: { ctrlKey: true, keyCode: "N".charCodeAt(0) },
                                clickAction: function () {
                                    designerModel.navigateByReports.addTab(new Report.ReportViewModel(Report.SubreportViewModel.defaultReport), ko.observable(""));
                                    designerModel.isDirty(true);
                                }
                            });
                            actions.push({
                                id: Report.ActionId.NewReportViaWizard,
                                container: "menu",
                                text: "New via Wizard",
                                displayText: function () { return Designer.getLocalization("New via Wizard", Report.StringId.NewViaWizard); },
                                imageClassName: "dxrd-image-new-via-wizard",
                                imageTemplateName: "dxrd-svg-menu-new_via_wizard",
                                disabled: ko.observable(false),
                                visible: true,
                                hotKey: { ctrlKey: true, keyCode: "W".charCodeAt(0) },
                                clickAction: function () {
                                    reportWizard.startWithCustomDataSources(designerModel.dataSourceHelper() && designerModel.dataSourceHelper().availableDataSources || designerModel.availableDataSources, null, function (reportWizardModel) {
                                        designerModel.isLoading(true);
                                        var deferred = $.Deferred();
                                        Report.ReportWizardService.generateReportFromWizardModel(reportWizardModel, state())
                                            .done(function (result) {
                                            var newReport = new Report.ReportViewModel(JSON.parse(result.reportModel));
                                            newReport.dataSourceRefs = result.dataSourceRefs;
                                            designerModel.navigateByReports.addTab(newReport, ko.observable(""));
                                            designerModel.isDirty(true);
                                            designerModel.isLoading(false);
                                            deferred.resolve(true);
                                        })
                                            .fail(function () { deferred.reject(); });
                                        return deferred.promise();
                                    });
                                }
                            });
                            actions.push({
                                id: Report.ActionId.OpenReport,
                                container: "menu",
                                text: "Open",
                                displayText: function () { return Designer.getLocalization("Open", Report.StringId.Open); },
                                imageClassName: "dxrd-image-open",
                                imageTemplateName: "dxrd-svg-menu-open",
                                disabled: ko.observable(false),
                                visible: true,
                                hotKey: { ctrlKey: true, keyCode: "O".charCodeAt(0) },
                                clickAction: function () {
                                    designerModel.openReportDialog.show(designerModel.navigateByReports.currentTab());
                                }
                            });
                        }
                        if (reportWizard) {
                            actions.push({
                                id: Report.ActionId.ReportWizard,
                                container: "menu",
                                text: "Design in Report Wizard...",
                                displayText: function () { return Designer.getLocalization("Design in Report Wizard...", "ReportStringId.Verb_ReportWizard"); },
                                imageClassName: "dxrd-image-run-wizard",
                                imageTemplateName: "dxrd-svg-menu-run_wizard",
                                disabled: ko.pureComputed(function () { return !report(); }),
                                visible: true,
                                clickAction: function () {
                                    reportWizard.start(null, function (reportWizardModel) {
                                        designerModel.isLoading(true);
                                        var deferred = $.Deferred();
                                        Report.ReportWizardService.generateReportFromWizardModel(reportWizardModel, state(), JSON.stringify({ "XtraReportsLayoutSerializer": designerModel.model().serialize() }))
                                            .done(function (result) {
                                            designerModel.navigateByReports.currentTab().undoEngine.start();
                                            designerModel.isDirty(true);
                                            var newReport = Report.createReportViewModel(result, designerModel.model());
                                            designerModel.model(newReport);
                                            designerModel.navigateByReports.currentTab().undoEngine.end();
                                            designerModel.isLoading(false);
                                            deferred.resolve(true);
                                        })
                                            .fail(function () { deferred.reject(); });
                                        return deferred.promise();
                                    }, designerModel.model());
                                }
                            });
                        }
                        actions.push({
                            id: Report.ActionId.ValidateBindings,
                            text: "Validate Bindings",
                            displayText: function () { return Designer.getLocalization("Validate Bindings", "ASPxReportsStringId.ReportDesigner_ToolBarItemText_ValidateBindings"); },
                            imageClassName: "dxrd-image-validateBindingMode",
                            imageTemplateName: "dxrd-svg-toolbar-validateBindingMode",
                            disabled: ko.pureComputed(function () { return !report(); }),
                            selected: designerModel.validationMode,
                            visible: true,
                            hasSeparator: true,
                            clickAction: function () {
                                designerModel.validationMode(!designerModel.validationMode());
                            },
                        });
                        if (scriptsEditor) {
                            actions.push({
                                id: Report.ActionId.Scripts,
                                text: "Scripts",
                                displayText: function () { return Designer.getLocalization('Scripts', 'ReportStringId.RepTabCtl_Scripts'); },
                                imageClassName: "dxrd-image-scripts",
                                imageTemplateName: "dxrd-svg-toolbar-scripts",
                                disabled: ko.pureComputed(function () { return !report(); }),
                                visible: ko.pureComputed(function () { return !scriptsEditor.editorVisible(); }),
                                hotKey: { ctrlKey: true, keyCode: "R".charCodeAt(0) },
                                clickAction: function () {
                                    scriptsEditor.initialize();
                                    scriptsEditor.editorVisible(true);
                                },
                                hasSeparator: true
                            });
                        }
                        if (reportPreview) {
                            actions.push({
                                id: Report.ActionId.Preview,
                                text: "Preview",
                                displayText: function () { return Designer.getLocalization("Preview", 'ReportStringId.RepTabCtl_Preview'); },
                                imageClassName: "dxrd-image-preview",
                                imageTemplateName: "dxrd-svg-preview-print_preview",
                                disabled: ko.pureComputed(function () { return !report(); }),
                                visible: ko.pureComputed(function () { return !reportPreview.previewVisible(); }),
                                hotKey: { ctrlKey: true, keyCode: "P".charCodeAt(0) },
                                clickAction: function () {
                                    reportPreview.previewVisible(true);
                                    reportPreview.initialize(Report.ReportPreviewService.initializePreview(report()));
                                },
                                hasSeparator: true
                            });
                        }
                        if (sqlDataSourceWizard) {
                            actions.push({
                                id: Report.ActionId.AddSqlDataSource,
                                container: "menu",
                                text: "Add SQL Data Source...",
                                displayText: function () { return Designer.getLocalization("Add SQL Data Source...", "ASPxReportsStringId.ReportDesigner_MenuItem_AddSqlDataSource"); },
                                imageClassName: "dxrd-image-add-datasource",
                                imageTemplateName: "dxrd-svg-menu-add_datasource",
                                disabled: ko.pureComputed(function () { return !report(); }),
                                visible: false,
                                clickAction: function () {
                                    var model = new DevExpress.Analytics.Wizard.SqlDataSourceWizardModel(new DevExpress.Analytics.Data.SqlDataSource({}, undefined, Report.QBRequestWrapper));
                                    sqlDataSourceWizard.start(model);
                                }
                            });
                        }
                        if (completeSqlDataSourceWizard) {
                            actions.push({
                                id: Report.ActionId.AddMultiQuerySqlDataSource,
                                container: "menu",
                                text: "Add SQL Data Source...",
                                displayText: function () { return Designer.getLocalization("Add SQL Data Source...", "ASPxReportsStringId.ReportDesigner_MenuItem_AddSqlDataSource"); },
                                imageClassName: "dxrd-image-add-datasource",
                                imageTemplateName: "dxrd-svg-menu-add_datasource",
                                disabled: ko.pureComputed(function () { return !report(); }),
                                visible: ko.pureComputed(function () { return completeSqlDataSourceWizard.connectionStrings().length > 0; }),
                                clickAction: function () {
                                    var model = new DevExpress.Analytics.Wizard.MultiQueryDataSourceWizardModel(Report.QBRequestWrapper);
                                    completeSqlDataSourceWizard.start(model);
                                }
                            });
                        }
                        actions.push({
                            id: Report.ActionId.Save,
                            container: "menu",
                            text: "Save",
                            displayText: function () { return Designer.getLocalization("Save", Report.StringId.Save); },
                            imageClassName: "dxrd-image-save",
                            imageTemplateName: "dxrd-svg-menu-save",
                            disabled: ko.pureComputed(function () { return !report(); }),
                            visible: true,
                            hotKey: { ctrlKey: true, keyCode: "S".charCodeAt(0) },
                            clickAction: function () {
                                if (Report.reportStorageWebIsRegister) {
                                    var currentTab = designerModel.navigateByReports.currentTab();
                                    if (!currentTab.isDirty()) {
                                        return;
                                    }
                                    if (!currentTab.context().url()) {
                                        designerModel.saveReportDialog.show(currentTab);
                                    }
                                    else {
                                        var args = { report: currentTab.context().report, url: currentTab.context().url(), cancel: false };
                                        callbacks.reportSaving && callbacks.reportSaving(args);
                                        if (args.cancel)
                                            return;
                                        Report.ReportStorageWeb.setData(currentTab.context().report.serialize(), currentTab.context().url())
                                            .done(function (result) {
                                            currentTab.isDirty(false);
                                            callbacks.reportSaved && callbacks.reportSaved({ report: currentTab.context().report, url: currentTab.context().url() });
                                            DevExpress.Analytics.Utils.ShowMessage(DevExpress.Analytics.getLocalization("The report has been successfully saved.", "ASPxReportsStringId.ReportDesigner_SaveReport_Message_OK"), Designer.NotifyType.success);
                                        }).fail(function () {
                                            callbacks.onServerError && callbacks.onServerError({ state: "save", model: { report: currentTab.context().report, url: currentTab.context().url() } });
                                        });
                                    }
                                }
                                else {
                                    report().save();
                                }
                            }
                        });
                        if (Report.reportStorageWebIsRegister) {
                            actions.push({
                                id: Report.ActionId.SaveAs,
                                container: "menu",
                                text: "Save As",
                                displayText: function () { return Designer.getLocalization("Save As", Report.StringId.SaveAs); },
                                imageClassName: "dxrd-image-save",
                                imageTemplateName: "dxrd-svg-menu-save",
                                disabled: ko.pureComputed(function () { return !report(); }),
                                visible: true,
                                clickAction: function () {
                                    designerModel.saveReportDialog.show(designerModel.navigateByReports.currentTab());
                                }
                            });
                        }
                        actions.push({
                            id: Report.ActionId.Exit,
                            container: "menu",
                            text: "Exit",
                            displayText: function () { return Designer.getLocalization("Exit", 'ReportStringId.UD_Capt_Exit'); },
                            imageClassName: "dxrd-image-exit",
                            imageTemplateName: "dxrd-svg-menu-exit",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () {
                                designerModel.navigateByReports.closeAll().done(function () {
                                    exitDesigner && exitDesigner();
                                });
                            }
                        });
                        nextCustomizer && nextCustomizer(actions);
                    });
                };
                ReportDesignerInitializer.prototype.addContextActions = function (func) {
                    var _this = this;
                    if (func === void 0) { func = function (settings) {
                        settings.actionProviders = [new Report.ReportElementActions(_this.buildingModel.surface, _this.buildingModel.selection),
                            new Report.ElementsGroupActions(_this.buildingModel.surface, _this.buildingModel.selection),
                            new Report.ReportActions(_this._designerCallbacks.componentAdded),
                            new Report.TableRowActions(_this.buildingModel.selection, _this._designerCallbacks.componentAdded),
                            new Report.TableCellActions(_this.buildingModel.selection, _this._designerCallbacks.componentAdded),
                            new Report.TextElementAction(_this.buildingModel.selection),
                            new Report.TableCellGroupActions(_this.buildingModel.selection),
                            new Report.PivotGridActions()];
                        settings.createDefaultActions(_this.buildingModel.editableObject, _this.buildingModel.undoEngine);
                    }; }
                    _super.prototype.addContextActions.call(this, func);
                    return this;
                };
                ReportDesignerInitializer.prototype.addActionLists = function (actionListsFunc) {
                    var _this = this;
                    if (actionListsFunc === void 0) { actionListsFunc = function () {
                        var designerShortcutsEnabled = ko.computed(function () {
                            var isDesignMode = _this.buildingModel.designMode();
                            var isWizardVisible = _this.buildingModel.wizard && _this.buildingModel.wizard.isVisible();
                            var isSqlDataSourceVisible = _this.buildingModel.sqlDataSourceWizard && _this.buildingModel.sqlDataSourceWizard.isVisible();
                            var isCompleteSqlDataSourceVisible = _this.buildingModel.completeSqlDataSourceWizard && _this.buildingModel.completeSqlDataSourceWizard.isVisible();
                            return isDesignMode && !isWizardVisible && !isSqlDataSourceVisible && !isCompleteSqlDataSourceVisible;
                        });
                        _this._addDisposable(designerShortcutsEnabled);
                        var actions = new Designer.ActionLists(_this.buildingModel.surface, _this.buildingModel.selection, _this.buildingModel.undoEngine, _this._customizeDesignerActions(_this.buildingModel, _this._designerCallbacks.customizeActions, _this._designerCallbacks.exitDesigner, function () { return _this._reportcontext() && _this._reportcontext().state() || _this.buildingModel.state; }, _this._designerCallbacks), designerShortcutsEnabled, Report.reportCopyPasteStrategy(_this._designerCallbacks.componentAdded), _this.buildingModel.zoomStep);
                        _this.addElement("actionStorage", function () { return $.extend({}, _this._createActionsStorage(actions.menuItems), _this._createActionsStorage(actions.toolbarItems)); });
                        return actions;
                    }; }
                    _super.prototype.addActionList.call(this, actionListsFunc);
                    return this;
                };
                ReportDesignerInitializer.prototype._createChartDesignerPart = function (context) {
                    var _this = this;
                    var chartValueBindingProvider = ko.computed(function () { return context() && context().chartValueBindingProvider; });
                    this._addDisposable(chartValueBindingProvider);
                    var chartDesignerOptions = Report.createChartDesignerOptions(this.buildingModel, this.buildingModel.dataSourceHelper, this.buildingModel.model, this.buildingModel.parameters, chartValueBindingProvider);
                    this.addElement("runChartDesigner", function () { return function (chart) {
                        chartDesignerOptions.run(chart);
                    }; });
                    this.addElement("chartDataSources", function () { return ko.computed(function () {
                        var pivotGrids = _this.buildingModel.controlsHelper.allControls().filter(function (item) { return item instanceof Report.XRPivotGridViewModel; }).map(function (item) { return { displayName: item.name, value: item }; });
                        var usedDataSources = _this.buildingModel.dataSourceHelper() && _this.buildingModel.dataSourceHelper().usedDataSources() && _this.buildingModel.dataSourceHelper().usedDataSources().map(function (item) { return { displayName: item.name, value: item.data }; }), result = [].concat(pivotGrids, usedDataSources);
                        return result;
                    }); });
                    this._addDisposable(this.buildingModel.controlsHelper.allControls.subscribe(function (newArr) {
                        newArr.filter(function (item) { return item instanceof Report.XRChartViewModel; }).forEach(function (chart) {
                            if (chart.isPivotGridDataSource() && newArr.indexOf(chart.dataSource()) === -1)
                                chart.dataSource(null);
                        });
                    }));
                    this._addDisposable(chartDesignerOptions);
                    return { id: null, templateName: Report.ReportDesignerElements.ChartDialog, model: chartDesignerOptions };
                };
                ReportDesignerInitializer.prototype.addParts = function (func) {
                    var _this = this;
                    if (func === void 0) { func = function (parts) {
                        var reportConverter = new Report.ReportConverter(_this.buildingModel.controlsHelper, _this.buildingModel.undoEngine, _this._dataBiningMode);
                        _this._addDisposable(_this._reportcontext.subscribe(function (newVal) {
                            if (newVal)
                                reportConverter.convert(newVal.report, _this._convertBindingsToExpressions);
                        }));
                        parts.push({ id: Report.ReportDesignerElements.NavigationPanel, templateName: Report.ReportDesignerElements.NavigationPanel, model: _this.buildingModel.navigateByReports }, { id: null, templateName: Report.ReportDesignerElements.ReportDialog, model: _this.buildingModel.saveReportDialog }, { id: null, templateName: Report.ReportDesignerElements.ReportDialog, model: _this.buildingModel.saveReportDialogLight }, { id: null, templateName: Report.ReportDesignerElements.ReportDialog, model: _this.buildingModel.openReportDialog }, _this._createChartDesignerPart(_this._reportcontext), { id: null, templateName: Report.ReportDesignerElements.ReportConverterDialog, model: reportConverter });
                        return parts;
                    }; }
                    _super.prototype.addParts.call(this, func);
                    this._designerCallbacks.customizeParts && this._designerCallbacks.customizeParts(this.buildingModel.parts);
                    return this;
                };
                ReportDesignerInitializer.prototype.addDefaultAddons = function (addons) {
                    if (addons === void 0) { addons = [
                        { id: Report.ReportDesignerAddOns.Preview, templateName: Report.ReportDesignerAddOns.Preview, model: this.buildingModel.reportPreviewModel },
                        { id: Report.ReportDesignerAddOns.ReportWizard, templateName: Report.ReportDesignerAddOns.ReportWizard.split("#")[0], model: this.buildingModel.wizard },
                        { id: Report.ReportDesignerAddOns.DataSourceWizard, templateName: Report.ReportDesignerAddOns.DataSourceWizard.split("#")[0], model: this.buildingModel.sqlDataSourceWizard },
                        { id: Report.ReportDesignerAddOns.CompleteDataSourceWizard, templateName: Report.ReportDesignerAddOns.CompleteDataSourceWizard.split("#")[0], model: this.buildingModel.completeSqlDataSourceWizard }
                    ]; }
                    this.addElement("addOns", function () { return ko.observableArray(addons); });
                    return this;
                };
                ReportDesignerInitializer.prototype.tryAddSqlDataSourceEditorAddon = function (relationsEditor) {
                    if (relationsEditor === void 0) { relationsEditor = this._sqlDataSourceEditor.relationsEditor; }
                    if (relationsEditor)
                        this.buildingModel.addOns.push({ id: Report.ReportDesignerAddOns.MasterDetailEditor, templateName: Report.ReportDesignerAddOns.MasterDetailEditor, model: relationsEditor });
                    return this;
                };
                ReportDesignerInitializer.prototype.tryAddScriptEditorAddon = function (isScriptsDisabled) {
                    if (this._tryAddScriptEditor(isScriptsDisabled))
                        this.buildingModel.addOns.push({ id: Report.ReportDesignerAddOns.ScriptEditor, templateName: Report.ReportDesignerAddOns.ScriptEditor, model: this.buildingModel.scriptsEditor });
                    return this;
                };
                ReportDesignerInitializer.prototype.onContextChanged = function (subreports, func) {
                    var _this = this;
                    if (func === void 0) { func = function (context) {
                        if (context) {
                            context.report.getSubreportUrls = function () { return _this._getSubreportUrls(_this.buildingModel.reportUrls, subreports); };
                            _this.buildingModel.selectedPath(null);
                            if (_this.buildingModel.toolboxItems) {
                                _this.buildingModel.toolboxItems.forEach(function (item) { item.disabled(false); });
                            }
                        }
                        else {
                            if (_this.buildingModel.selection) {
                                _this.buildingModel.selection.clear();
                                _this.buildingModel.selection.focused(_this.buildingModel.surface());
                            }
                            _this.buildingModel.editableObject && _this.buildingModel.editableObject(null);
                            _this.buildingModel.toolboxItems && _this.buildingModel.toolboxItems.forEach(function (item) { item.disabled(true); });
                            _this.buildingModel.popularProperties && _this.buildingModel.popularProperties.cleanEditors();
                        }
                    }; }
                    func(this._reportcontext());
                    this._addDisposable(this._reportcontext.subscribe(function (newVal) { return func(newVal); }));
                    return this;
                };
                ReportDesignerInitializer.prototype.configurateRtl = function (rtl) {
                    this.rtl = !!rtl;
                    DevExpress["config"]({ rtlEnabled: this.rtl });
                    return this;
                };
                ReportDesignerInitializer.prototype.configureReportStorageRegistration = function (reportStorageWebIsRegister, allowMDI) {
                    Report.reportStorageWebIsRegister = reportStorageWebIsRegister === undefined ? Report.reportStorageWebIsRegister : reportStorageWebIsRegister;
                    this._allowMDI = reportStorageWebIsRegister ? allowMDI : false;
                    return this;
                };
                ReportDesignerInitializer.prototype.applyUri = function (uriSettings) {
                    Report.HandlerUri = uriSettings.reportDesignerUri || Report.HandlerUri;
                    Designer.Chart.HandlerUri = uriSettings.reportDesignerUri;
                    this._previewUri = uriSettings.previewUri;
                    return this;
                };
                ReportDesignerInitializer.prototype.initBindingMode = function (dataBiningMode, convertBindingsToExpressions) {
                    this._dataBiningMode = dataBiningMode;
                    this._convertBindingsToExpressions = convertBindingsToExpressions;
                    return this;
                };
                ReportDesignerInitializer.prototype.registerControls = function (dataBindingMode, reportItemsProvider) {
                    Report.registerControls(dataBindingMode, reportItemsProvider);
                    return this;
                };
                ReportDesignerInitializer.prototype.addCallbacks = function (callbacks) {
                    this._callbacks = callbacks;
                    if (!this._callbacks.designer)
                        this._callbacks.designer = {};
                    if (!this._callbacks.preview)
                        this._callbacks.preview = {};
                    this._callbacks.designer.fieldLists = this._callbacks.designer.fieldLists || Report.ReportDataSourceService.fieldListCallback;
                    return this;
                };
                ReportDesignerInitializer.prototype.addProcessErrorCallback = function (processError) {
                    if (processError === void 0) { processError = this._designerCallbacks && this._designerCallbacks.onServerError; }
                    DevExpress.Designer.processErrorEvent(processError);
                    return this;
                };
                ReportDesignerInitializer.prototype.runCustomizeToolboxEvent = function (customizeToolbox) {
                    if (customizeToolbox === void 0) { customizeToolbox = this._designerCallbacks && this._designerCallbacks.customizeToolbox; }
                    customizeToolbox && customizeToolbox(Report.controlsFactory);
                    return this;
                };
                ReportDesignerInitializer.prototype.addLocalization = function (localization) {
                    if (localization) {
                        DevExpress.JS.Localization.addCultureInfo({
                            messages: localization
                        });
                    }
                    return this;
                };
                ReportDesignerInitializer.prototype.runCustomizeLocalizationEvent = function (customizeLocalization) {
                    if (customizeLocalization === void 0) { customizeLocalization = this._designerCallbacks && this._designerCallbacks.customizeLocalization; }
                    customizeLocalization && customizeLocalization();
                    return this;
                };
                ReportDesignerInitializer.prototype.initCultureInfo = function (cultureInfoList) {
                    $.extend(true, DevExpress.Report.Preview.cultureInfo, cultureInfoList);
                    return this;
                };
                ReportDesignerInitializer.prototype.updateFont = function (fontSet) {
                    if (fontSet) {
                        var fonts = {};
                        fontSet.forEach(function (fontName) { return fonts[fontName] = fontName; });
                        this.buildingModel.updateFont(fonts);
                        this.buildingModel.sortFont();
                    }
                    return this;
                };
                ReportDesignerInitializer.prototype.initFormatStringPatterns = function (formatStringData) {
                    if (formatStringData) {
                        formatStringData.standardPatterns && Object.keys(formatStringData.standardPatterns).forEach(function (propName) {
                            if (!DevExpress.JS.Widgets.formatStringStandardPatterns[propName])
                                DevExpress.JS.Widgets.formatStringStandardPatterns[propName] = formatStringData.standardPatterns[propName];
                            else
                                DevExpress.JS.Widgets.formatStringStandardPatterns[propName].patterns = formatStringData.standardPatterns[propName].patterns;
                        });
                        formatStringData.customPatterns && Object.keys(formatStringData.customPatterns).forEach(function (propName) {
                            Report.formatStringEditorCustomSet[propName] = formatStringData.customPatterns[propName];
                        });
                    }
                    return this;
                };
                ReportDesignerInitializer.prototype.addPopularProperties = function (controlsFactory) {
                    var _this = this;
                    _super.prototype.addPopularProperties.call(this, controlsFactory);
                    this.addElement("popularVisible", function () { return ko.pureComputed(function () {
                        return _this.buildingModel.popularProperties._editors().some(function (x) { return x.visible(); }) ||
                            _this.buildingModel.contextActions().length > 0;
                    }); });
                    return this;
                };
                ReportDesignerInitializer.prototype.addInlineTextEdit = function (func) {
                    var _this = this;
                    if (func === void 0) { func = function () { return new DevExpress.Analytics.Internal.InlineTextEdit(_this._selection); }; }
                    this.addElement("inlineTextEdit", func);
                    return this;
                };
                ReportDesignerInitializer.prototype.addStylesProjection = function (styles) {
                    var _this = this;
                    if (styles === void 0) { styles = ko.pureComputed(function () { return _this.buildingModel.model() && _this.buildingModel.model().styles; }); }
                    this.addElement("styles", function () { return styles; });
                    return this;
                };
                ReportDesignerInitializer.prototype.addFormattingRulesProjection = function (rules) {
                    var _this = this;
                    if (rules === void 0) { rules = ko.pureComputed(function () { return _this.buildingModel.model() && _this.buildingModel.model().formattingRuleSheet; }); }
                    this.addElement("formattingRuleSheet", function () { return rules; });
                    return this;
                };
                ReportDesignerInitializer.prototype.addReportExplorerProvider = function (reportExplorerProvider) {
                    if (reportExplorerProvider === void 0) { reportExplorerProvider = new Designer.ObjectExplorerProvider([{ model: this.buildingModel.model, name: "Report", className: "master_report" }], ["bands", "controls", "rows", "cells"], ko.observable(null)); }
                    this.addElement("reportExplorerProvider", function () { return reportExplorerProvider; });
                    return this;
                };
                ReportDesignerInitializer.prototype.addControlsProjection = function (controlsHelper) {
                    var _this = this;
                    if (controlsHelper === void 0) { controlsHelper = this.buildingModel.controlsHelper; }
                    this.addElement("getControls", function () { return function (target) {
                        return ko.pureComputed(function () {
                            return _this._getControls(controlsHelper.getControls(ko.unwrap(target)), function (item) {
                                return !(item instanceof Report.BandViewModel || item instanceof Report.ReportViewModel);
                            });
                        });
                    }; });
                    this.addElement("controls", function () { return _this._getControls(controlsHelper.allControls, function (item) { return !(item instanceof Report.BandViewModel || item instanceof Report.ReportViewModel); }); });
                    return this;
                };
                ReportDesignerInitializer.prototype.addBandsProjection = function (controlsHelper) {
                    var _this = this;
                    if (controlsHelper === void 0) { controlsHelper = this.buildingModel.controlsHelper; }
                    this.addElement("bands", function () { return function (filter, IsNoneNeaded) {
                        return _this._getControls(controlsHelper.allControls, function (item) {
                            return item instanceof Report.BandViewModel && (filter ? filter(item) : true);
                        }, IsNoneNeaded);
                    }; });
                    return this;
                };
                ReportDesignerInitializer.prototype.addWizards = function (connectionStrings, func) {
                    var initializer = new WizardsInitializerSettings(connectionStrings, this._designerCallbacks, this.rtl);
                    func(initializer);
                    initializer.reportWizard && this.addElement("wizard", function () { return initializer.reportWizard; });
                    initializer.sqlDataSourceWizard && this.addElement("sqlDataSourceWizard", function () { return initializer.sqlDataSourceWizard; });
                    initializer.multiQueryDataSourceWizard && this.addElement("completeSqlDataSourceWizard", function () { return initializer.multiQueryDataSourceWizard; });
                    this._sqlDataSourceEditor = initializer.sqlDataSourceEditor;
                    return this;
                };
                ReportDesignerInitializer.prototype.addStaticContext = function () {
                    DevExpress.Designer.appendStaticContextToRootViewModel(this.buildingModel);
                    return this;
                };
                ReportDesignerInitializer.prototype.tryApplyBindings = function (applyBindings, element) {
                    var _this = this;
                    if (applyBindings) {
                        this._designerCallbacks.beforeRender && this._designerCallbacks.beforeRender(this);
                        $(element).children().remove();
                        ko.applyBindings(this.buildingModel, element);
                        var dispose = function () {
                            _this.buildingModel.dispose();
                        };
                        ko.utils.domNodeDisposal.addDisposeCallback(element, dispose);
                    }
                    return this;
                };
                ReportDesignerInitializer.prototype.dispose = function () {
                    $(window).unbind("resize", this._updateCallback);
                    $(window).unbind("resize", this.buildingModel.reportPreviewModel.resizeCallback);
                    _super.prototype.dispose.call(this);
                    Report.controlsFactory.dispose();
                    this.removeProperties();
                };
                return ReportDesignerInitializer;
            })(DevExpress.Analytics.Utils.CommonDesignerGenerator);
            Report.ReportDesignerInitializer = ReportDesignerInitializer;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var TextElementSizeHelper = (function () {
                function TextElementSizeHelper() {
                    this._spaceSymbol = "&nbsp";
                }
                TextElementSizeHelper.prototype._$createElement = function (options, processElement) {
                    return processElement($("<div>").css(options)).appendTo($("body"));
                };
                TextElementSizeHelper.prototype.$createTextElement = function (text, options) {
                    return this._$createElement(options, function ($element) { return $element.text(text); });
                };
                TextElementSizeHelper.prototype.$createSpaceElement = function (options) {
                    var _this = this;
                    return this._$createElement(options, function ($element) { return $element.html(_this._spaceSymbol); });
                };
                TextElementSizeHelper.prototype.getTextContainerSize = function (text, options, increaseHeight) {
                    if (increaseHeight === void 0) { increaseHeight = 2; }
                    var $div = text !== this._spaceSymbol ? this.$createTextElement(text, options) : this.$createSpaceElement(options);
                    $div.height($div.height() + increaseHeight);
                    var rect = $div[0].getBoundingClientRect();
                    var height = Math.ceil(rect.height);
                    var width = Math.ceil(rect.width);
                    $div.remove();
                    return { width: width, height: height };
                };
                return TextElementSizeHelper;
            })();
            Report.TextElementSizeHelper = TextElementSizeHelper;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var DisplayNameProvider = (function () {
                function DisplayNameProvider(_fieldsProvider, _dataSourceHelper, _rootDS) {
                    this._fieldsProvider = _fieldsProvider;
                    this._dataSourceHelper = _dataSourceHelper;
                    this._rootDS = _rootDS;
                    this._requests = {};
                    this._fieldsProvider = _fieldsProvider;
                    this._dataSourceHelper = _dataSourceHelper;
                    this._rootDS = _rootDS;
                }
                DisplayNameProvider.prototype._getRequest = function (path) {
                    var _this = this;
                    if (!this._requests[path]) {
                        var pathRequest = new DevExpress.JS.Widgets.PathRequest(path);
                        this._requests[path] = ko.pureComputed(function () { return _this._fieldsProvider.getItems(pathRequest); });
                    }
                    return this._requests[path];
                };
                DisplayNameProvider.prototype._getDisplayNameRequest = function (path, fieldName) {
                    var _this = this;
                    var def = $.Deferred();
                    this._getRequest(path)().done(function (data) {
                        var displayName = _this._getFieldDisplayName(data, fieldName);
                        if (!displayName)
                            def.reject();
                        else
                            def.resolve(displayName);
                    }).fail(function () {
                        def.reject();
                    });
                    return def.promise();
                };
                DisplayNameProvider.prototype._createRequestInfo = function (dataSource, path, dataMember, dataMemberOffset, includeDataSourceName) {
                    if (!dataMember)
                        return null;
                    var dataSourceName = null;
                    if (!path) {
                        var ds = (dataSource || this._rootDS());
                        var dsInfo = ds && this._dataSourceHelper.findDataSourceInfo(ds);
                        if (!dsInfo)
                            return null;
                        path = (dsInfo.ref || dsInfo.id);
                        if (includeDataSourceName)
                            dataSourceName = dsInfo.name;
                    }
                    var offset = Designer.getFullPath(path, dataMemberOffset);
                    return {
                        fullPath: offset + "." + dataMember,
                        offset: offset,
                        dataMember: dataMember,
                        dataMemberParts: dataMember.split('.'),
                        dataSourceName: dataSourceName
                    };
                };
                DisplayNameProvider.prototype._getFieldDisplayName = function (fields, fieldName) {
                    if (!fields)
                        return null;
                    var field = Designer.findFirstItemMatchesCondition(fields, function (field) { return field.name === fieldName; });
                    return field ? field.displayName : null;
                };
                DisplayNameProvider.prototype._getDisplayName = function (request) {
                    var def = $.Deferred();
                    if (!request) {
                        def.reject();
                        return def;
                    }
                    var fieldsRequests = [];
                    for (var i = -1, path = request.offset; i < request.dataMemberParts.length - 1;) {
                        fieldsRequests.push(this._getDisplayNameRequest(path, request.dataMemberParts[i + 1]));
                        path += "." + request.dataMemberParts[++i];
                    }
                    $.when.apply($, fieldsRequests).done(function () {
                        var result = request.dataSourceName ? (request.dataSourceName + " - ") : "";
                        for (var i = 0; i < arguments.length; i++) {
                            result += arguments[i];
                            if (i < arguments.length - 1)
                                result += ".";
                        }
                        def.resolve(result);
                    }).fail(function () { return def.reject(); });
                    return def.promise();
                };
                DisplayNameProvider.prototype._getRealName = function (request) {
                    if (!request)
                        return $.Deferred().reject().promise();
                    return this._getRealNameRequest(request.offset, request.dataMember);
                };
                DisplayNameProvider.prototype._getRealNameRequest = function (path, dataMember) {
                    var _this = this;
                    var def = $.Deferred();
                    this._getRequest(path)()
                        .done(function (items) {
                        var targetItem = items.filter(function (item) { return dataMember.indexOf(item.displayName + '.') === 0 || dataMember === item.displayName; })[0];
                        if (targetItem) {
                            dataMember === targetItem.displayName ? def.resolve(targetItem.name) :
                                _this._getRealNameRequest(path + "." + targetItem.name, dataMember.substring(targetItem.displayName.length + 1))
                                    .done(function (data) {
                                    def.resolve(targetItem.name + "." + data);
                                })
                                    .fail(function () {
                                    def.reject();
                                });
                        }
                        else {
                            def.reject();
                        }
                    })
                        .fail(function () {
                        def.reject();
                    });
                    return def.promise();
                };
                DisplayNameProvider.prototype.getDisplayName = function (dataSource, dataMember, dataMemberOffset, includeDataSourceName) {
                    if (dataMemberOffset === void 0) { dataMemberOffset = ""; }
                    if (includeDataSourceName === void 0) { includeDataSourceName = true; }
                    var request = this._createRequestInfo(dataSource, null, dataMember, dataMemberOffset, includeDataSourceName);
                    return this._getDisplayName(request);
                };
                DisplayNameProvider.prototype.getDisplayNameByPath = function (path, dataMember) {
                    var _this = this;
                    return this._getByPath(path, dataMember, function (x) { return _this._getDisplayName(x); });
                };
                DisplayNameProvider.prototype.getRealName = function (path, dataMember) {
                    var _this = this;
                    return this._getByPath(path, dataMember, function (x) { return _this._getRealName(x); });
                };
                DisplayNameProvider.prototype._getByPath = function (path, dataMember, getNameFunc) {
                    var _this = this;
                    path = path || "";
                    var request = this._createRequestInfo(null, path, dataMember, "", false);
                    var pathParts = path.split('.');
                    if (pathParts.length === 1) {
                        return getNameFunc(request);
                    }
                    else {
                        var result = $.Deferred();
                        getNameFunc(request).done(function (x) {
                            result.resolve(x);
                        }).fail(function (x) {
                            request = _this._createRequestInfo(null, pathParts[0], dataMember, "", false);
                            getNameFunc(request).done(function (x) {
                                result.resolve(x);
                            }).fail(function (x) { return result.reject(); });
                        });
                        return result.promise();
                    }
                };
                DisplayNameProvider.prototype.dispose = function () {
                    for (var key in this._requests) {
                        this._requests[key].dispose();
                        delete this._requests[key];
                    }
                };
                return DisplayNameProvider;
            })();
            Report.DisplayNameProvider = DisplayNameProvider;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.reportFunctionDisplay = (function (addins) { return DevExpress.Analytics.Widgets.Internal.insertInFunctionDisplay(addins); })({
                "String": {
                    "NewLine": [{ paramCount: 0, text: "NewLine()", descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_NewLine" }],
                    "FormatString": [{ paramCount: 1, text: "FormatString('')", descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_FormatString" }],
                    "Rgb": [{ paramCount: 3, text: "Rgb(, , )", descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_Rgb" }],
                    "Argb": [{ paramCount: 4, text: "Argb(, , , )", descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_Argb" }]
                }
            });
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.editOptionsSerializationInfo = [
                { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", localizationId: "DevExpress.XtraReports.UI.EditOptions.Enabled", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.boolSelect },
                { propertyName: "id", modelName: "@ID", displayName: "ID", localizationId: "DevExpress.XtraReports.UI.EditOptions.ID", editor: DevExpress.JS.Widgets.editorTemplates.text },
                { propertyName: "readOnly", modelName: "@ReadOnly", displayName: "Read Only", localizationId: "DevExpress.XtraReports.UI.EditOptions.ReadOnly", defaultVal: false, from: Designer.parseBool, editor: DevExpress.JS.Widgets.editorTemplates.boolSelect }
            ];
            var EditOptions = (function () {
                function EditOptions(model, serializer) {
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model || {});
                }
                EditOptions.prototype.getInfo = function () {
                    return Report.editOptionsSerializationInfo;
                };
                EditOptions.prototype.isEmpty = function () {
                    return !this.enabled();
                };
                EditOptions.prototype.isPropertyDisabled = function (name) {
                    return name !== "enabled" && !this.enabled();
                };
                return EditOptions;
            })();
            Report.EditOptions = EditOptions;
            var CheckEditOptions = (function (_super) {
                __extends(CheckEditOptions, _super);
                function CheckEditOptions(model, serializer) {
                    _super.call(this, model || {}, serializer);
                }
                CheckEditOptions.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([
                        { propertyName: "groupId", modelName: "@GroupID", displayName: "Group ID", localizationId: "DevExpress.XtraReports.UI.CheckEditOptions.GroupID", defaultVal: "", editor: DevExpress.JS.Widgets.editorTemplates.text }
                    ]);
                };
                return CheckEditOptions;
            })(EditOptions);
            Report.CheckEditOptions = CheckEditOptions;
            var ImageEditOptions = (function (_super) {
                __extends(ImageEditOptions, _super);
                function ImageEditOptions(model, serializer) {
                    _super.call(this, model || {}, serializer);
                }
                ImageEditOptions.prototype.getInfo = function () {
                    return _super.prototype.getInfo.call(this).concat([
                        {
                            propertyName: "editorName", modelName: "@EditorName", displayName: "Editor Name", localizationId: "DevExpress.XtraReports.UI.ImageEditOptions.EditorName", defaultVal: "",
                            editor: { header: "dxrd-editOptionsEditorName", editorType: Report.EditOptionsEditorNameEditorModel },
                            editorOptions: { categories: [DevExpress.Report.Categories.Image()] }
                        }
                    ]);
                };
                return ImageEditOptions;
            })(EditOptions);
            Report.ImageEditOptions = ImageEditOptions;
            var TextEditOptions = (function (_super) {
                __extends(TextEditOptions, _super);
                function TextEditOptions(model, serializer) {
                    _super.call(this, model || {}, serializer);
                }
                TextEditOptions.prototype.getInfo = function () {
                    var categories = DevExpress.Report.Categories;
                    return _super.prototype.getInfo.call(this).concat([
                        {
                            propertyName: "editorName", modelName: "@EditorName", displayName: "Editor Name", localizationId: "DevExpress.XtraReports.UI.TextEditOptions.EditorName", defaultVal: "",
                            editor: { header: "dxrd-editOptionsEditorName", editorType: Report.EditOptionsEditorNameEditorModel },
                            editorOptions: { excludeCategories: [categories.Image()] }
                        }
                    ]);
                };
                return TextEditOptions;
            })(EditOptions);
            Report.TextEditOptions = TextEditOptions;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            function getDataSourceDataMember(control) {
                var dataSource = null, dataMember = null;
                while (!dataSource && control) {
                    dataSource = dataSource || control["dataSource"] && control["dataSource"]();
                    dataMember = dataMember || control["dataMember"] && control["dataMember"]();
                    control = control.parentModel();
                }
                return { dataSource: dataSource, dataMember: dataMember };
            }
            Report.getDataSourceDataMember = getDataSourceDataMember;
            var ReportConverter = (function () {
                function ReportConverter(_controlsHelper, _undoEngine, _dataBindingMode) {
                    var _this = this;
                    if (_dataBindingMode === void 0) { _dataBindingMode = Report.DataBindingMode.Expressions; }
                    this._controlsHelper = _controlsHelper;
                    this._undoEngine = _undoEngine;
                    this._dataBindingMode = _dataBindingMode;
                    this.convertChoiceEnum = {
                        "Convert": "Convert",
                        "Cancel": "Cancel"
                    };
                    this._formattingMapper = {
                        "@BackColor": "@BackColor",
                        "@Sides": "@Borders",
                        "@BorderColor": "@BorderColor",
                        "@BorderDashStyle": "@BorderDashStyle",
                        "@BorderWidthSerializable": "@BorderWidth",
                        "@ForeColor": "@ForeColor",
                        "@Font": "@Font",
                        "@Padding": "@Padding",
                        "@TextAlignment": "@TextAlignment",
                        "@Visible": "@Visible"
                    };
                    this._expressionsToControlMap = {};
                    this._model = null;
                    this._lastChoice = null;
                    this._defaultFormatting = {};
                    this._notShowAgain = ko.observable(false);
                    this.popupOptions = {
                        visible: ko.observable(false),
                        title: Designer.getLocalization("Convert", "ReportStringId.UD_Msg_ConvertBindingsCaption"),
                        confirmMessage: DevExpress.JS.Utils.formatUnicorn(Designer.getLocalization("The {0} contains bindings. Do you want to convert them to expressions?", "ReportStringId.UD_Msg_ConvertBindings"), Designer.getLocalization("Report", "DevExpress.XtraReports.UI.XtraReport")),
                        container: function (element) { return DevExpress.Analytics.Utils.getParentContainer(element); },
                        buttons: [
                            {
                                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                    text: Designer.getLocalization('Yes', 'ASPxReportsStringId.ParametersPanel_True'), onClick: function () {
                                        _this._applyChanges();
                                    }
                                }
                            },
                            {
                                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                    text: Designer.getLocalization('No', 'ASPxReportsStringId.ParametersPanel_No'), onClick: function () {
                                        _this._cancel();
                                    }
                                }
                            },
                            { toolbar: 'bottom', location: 'before', widget: 'dxCheckBox', options: { value: this._notShowAgain, text: Designer.getLocalization("Remember my choice and don't ask me again.", "ReportStringId.UD_Msg_ConvertBindings_RememberMyChoice") } }
                        ]
                    };
                    this._mapFontObj(this._defaultFormatting, new DevExpress.JS.Widgets.FontModel(ko.observable("")));
                    this._mapPaddingObj(this._defaultFormatting, Designer.Widgets.PaddingModel.from("0,0,0,0"));
                }
                ReportConverter.prototype._mapRulesProperties = function (formatting) {
                    var newFormatting = {};
                    for (var name in formatting) {
                        if (this._formattingMapper[name]) {
                            newFormatting[this._formattingMapper[name]] = formatting[name];
                        }
                    }
                    return newFormatting;
                };
                ReportConverter.prototype._hasBindings = function () {
                    var allcontrols = this._controlsHelper.allControls();
                    return allcontrols.map(function (x) { return ko.unwrap(x["dataBindings"]); }).filter(function (x) { return !!x; }).some(function (x) { return x.some(function (db) { return !!db.dataMember() || !!db.parameter(); }); });
                };
                ReportConverter.prototype._hasFormattingRules = function () {
                    return this._model.formattingRuleSheet().length > 0;
                };
                ReportConverter.prototype.convert = function (model, convertBindingsToExpressions) {
                    if (convertBindingsToExpressions === void 0) { convertBindingsToExpressions = Report.PromptBoolean.Prompt; }
                    if (!model.dataBindingMode) {
                        this._model = model;
                        model._dataBindingMode(this._dataBindingMode);
                        if (this._dataBindingMode !== Report.DataBindingMode.Bindings && this._controlsHelper) {
                            var needConvert = this._hasBindings() || this._hasFormattingRules();
                            if (convertBindingsToExpressions === Report.PromptBoolean.False)
                                return this._cancel(needConvert ? Report.DataBindingMode.Bindings : this._dataBindingMode);
                            var canConvert = needConvert ? this._canConvertReport() : true;
                            if (!canConvert)
                                return this._cancel();
                            if (convertBindingsToExpressions === Report.PromptBoolean.True || this._notShowAgain()) {
                                if (needConvert && this._lastChoice !== this.convertChoiceEnum.Cancel)
                                    this._applyChanges();
                            }
                            else {
                                if (!needConvert) {
                                    this._model = null;
                                    this._expressionsToControlMap = {};
                                }
                                this.popupOptions.visible(needConvert);
                            }
                        }
                    }
                };
                ReportConverter.prototype._generateStyleName = function (ruleName) {
                    return ruleName;
                };
                ReportConverter.prototype._createBindingExpression = function (dataBinding, sumformat, condition) {
                    if (dataBinding.propertyName() === "Text" && sumformat) {
                        condition = DevExpress.JS.Utils.formatUnicorn(sumformat, condition);
                    }
                    if (dataBinding.propertyName() !== "Text" && dataBinding.formatString()) {
                        condition = DevExpress.JS.Utils.formatUnicorn("FormatString('{0}', {1})", dataBinding.formatString(), condition);
                    }
                    return Report.ExpressionWrapper.createExpression(dataBinding.propertyName(), "BeforePrint", condition);
                };
                ReportConverter.prototype._tryToGenerateBindingExpressions = function (control, expressions, controlDataInfo) {
                    var _this = this;
                    var dataBindings = ko.unwrap(control["dataBindings"]), canConvertDataBindings = true;
                    var sumformat = null;
                    if (control["Summary"] && ko.unwrap(control["Summary"]["Running"]) !== "None") {
                        var summaryFunc = ko.unwrap(control["Summary"]["Func"]);
                        if (summaryFunc === "Custom")
                            return false;
                        sumformat = "sum" + summaryFunc + "({0})";
                    }
                    if (!!dataBindings) {
                        canConvertDataBindings = dataBindings.every(function (dataBinding) {
                            var condition = "";
                            if (dataBinding.dataSource() && controlDataInfo.dataSource !== dataBinding.dataSource()) {
                                return false;
                            }
                            else if (dataBinding.parameter()) {
                                condition = "[Parameters." + dataBinding.parameter().name + "]";
                            }
                            else if (dataBinding.dataMember()) {
                                var condition = dataBinding.dataMember();
                                if (controlDataInfo.dataMember) {
                                    var prefix = controlDataInfo.dataMember + ".";
                                    if (dataBinding.dataMember().indexOf(prefix) === 0) {
                                        condition = dataBinding.dataMember().substring(prefix.length);
                                    }
                                }
                                condition = '[' + condition + ']';
                            }
                            if (condition) {
                                expressions.push(_this._createBindingExpression(dataBinding, sumformat, condition));
                            }
                            return true;
                        });
                    }
                    return canConvertDataBindings;
                };
                ReportConverter.prototype._resetDataBindings = function (control) {
                    var dataBindings = ko.unwrap(control["dataBindings"]);
                    if (!!dataBindings) {
                        dataBindings.forEach(function (dataBinding) {
                            var formatString = null;
                            if (dataBinding.propertyName() === "Text") {
                                formatString = control["textFormatString"] && control["textFormatString"]();
                            }
                            dataBinding.resetValue();
                            formatString && control["textFormatString"](formatString);
                        });
                    }
                };
                ReportConverter.prototype._mapPaddingObj = function (obj, padding) {
                    obj["@Padding.Left"] = padding.left();
                    obj["@Padding.Right"] = padding.right();
                    obj["@Padding.Top"] = padding.top();
                    obj["@Padding.Bottom"] = padding.bottom();
                };
                ReportConverter.prototype._mapFontObj = function (obj, font) {
                    obj["@Font.Name"] = font.family();
                    obj["@Font.Size"] = font.size();
                    obj["@Font.Italic"] = font.modificators.italic();
                    obj["@Font.Strikeout"] = font.modificators.strikeout();
                    obj["@Font.Bold"] = font.modificators.bold();
                    obj["@Font.Underline"] = font.modificators.underline();
                };
                ReportConverter.prototype._splitFontPropertyValue = function (formatting) {
                    if (formatting["@Font"]) {
                        var font = new DevExpress.JS.Widgets.FontModel(ko.observable(formatting["@Font"]));
                        this._mapFontObj(formatting, font);
                        delete formatting["@Font"];
                    }
                };
                ReportConverter.prototype._splitPaddingPropertyValue = function (formatting) {
                    if (formatting["@Padding"]) {
                        var padding = Designer.Widgets.PaddingModel.from(formatting["@Padding"]);
                        this._mapPaddingObj(formatting, padding);
                        delete formatting["@Padding"];
                    }
                };
                ReportConverter.prototype._patchRuleCondition = function (condition, dataMember, controlDataMember) {
                    if (!condition)
                        return condition;
                    var expression = DevExpress.JS.Data.CriteriaOperator.parse(condition);
                    var processNames = [];
                    DevExpress.JS.Data.criteriaForEach(expression, function (operator, path) {
                        if (operator instanceof DevExpress.JS.Data.OperandProperty && path === dataMember) {
                            processNames.push(function () {
                                var propertyName = [dataMember, operator.propertyName].join('.');
                                if (propertyName.indexOf(controlDataMember) === 0 && (propertyName.length === controlDataMember.length || propertyName[controlDataMember.length] === '.')) {
                                    propertyName = propertyName.substr(controlDataMember.length + 1, propertyName.length);
                                }
                                operator.propertyName = propertyName;
                            });
                        }
                    }, dataMember);
                    processNames.forEach(function (x) { return x(); });
                    return new DevExpress.JS.Widgets.FilterEditorSerializer().serialize(expression);
                };
                ReportConverter.prototype._tryToGenerateFormattingRulesExpressions = function (control, expressions, rules, controlDataInfo) {
                    var _this = this;
                    var conditions = {};
                    var currentRules = $.extend(true, [], control.formattingRuleLinks().map(function (x) { return rules[x.value().name()]; }));
                    var changedPropertiesWithDot = [];
                    var canConvertFormattingRules = currentRules.every(function (rule) {
                        if (controlDataInfo.dataSource !== rule.dataSource) {
                            return false;
                        }
                        Object.keys(rule.formatting).forEach(function (name) {
                            if (name.indexOf('.') !== -1 && _this._defaultFormatting[name] !== rule.formatting[name]) {
                                changedPropertiesWithDot.push(name);
                            }
                        });
                        return true;
                    });
                    if (!canConvertFormattingRules) {
                        return false;
                    }
                    currentRules.forEach(function (rule) {
                        if (rule.dataMember !== controlDataInfo.dataMember) {
                            rule.condition = _this._patchRuleCondition(rule.condition, rule.dataMember, controlDataInfo.dataMember);
                        }
                        for (var propertyName in rule.formatting) {
                            var hasPoint = propertyName.indexOf(".") !== -1;
                            if (!hasPoint || (hasPoint && changedPropertiesWithDot.indexOf(propertyName) !== -1)) {
                                if (!conditions[propertyName]) {
                                    conditions[propertyName] = [];
                                }
                                conditions[propertyName].unshift(rule.condition, "'" + rule.formatting[propertyName] + "'");
                            }
                        }
                        return true;
                    });
                    for (var propertyName in conditions) {
                        expressions.push(this._createRuleExpression(conditions[propertyName], "?", propertyName.substring(1)));
                    }
                    return true;
                };
                ReportConverter.prototype._getControlDataSourceDataMember = function (control) {
                    var dataSource = null, dataMember = null;
                    while (!dataSource && control) {
                        dataSource = dataSource || control["dataSource"] && control["dataSource"]();
                        dataMember = dataMember || control["dataMember"] && control["dataMember"]();
                        control = control.parentModel();
                    }
                    return { dataSource: dataSource, dataMember: dataMember };
                };
                ReportConverter.prototype._generateFormattingRulesDictionary = function () {
                    var _this = this;
                    var rules = {};
                    this._model.formattingRuleSheet().forEach(function (rule) {
                        var newRule = {
                            condition: rule.condition(),
                            formatting: _this._mapRulesProperties(new DevExpress.JS.Utils.ModelSerializer().serialize(rule["formatting"])),
                            dataSource: rule.dataSource() || _this._model.dataSource(),
                            dataMember: rule.dataMember() || _this._model.dataMember()
                        };
                        _this._splitFontPropertyValue(newRule.formatting);
                        _this._splitPaddingPropertyValue(newRule.formatting);
                        rules[rule.name()] = newRule;
                    });
                    return rules;
                };
                ReportConverter.prototype._createRuleExpression = function (collection, defaultVal, propertyName) {
                    collection.push(defaultVal);
                    return Report.ExpressionWrapper.createExpression(propertyName, "BeforePrint", "iif(" + collection.join(',') + ")");
                };
                ReportConverter.prototype._canConvertReport = function () {
                    var _this = this;
                    var controls = this._controlsHelper.allControls()
                        .filter(Report.isControl);
                    var rules = this._generateFormattingRulesDictionary();
                    this._expressionsToControlMap = {};
                    return controls.every(function (control) {
                        var controlName = ko.unwrap(control.name);
                        _this._expressionsToControlMap[controlName] = [];
                        var controlDataInfo = _this._getControlDataSourceDataMember(control.parentModel && control.parentModel() || control);
                        return _this._tryToGenerateBindingExpressions(control, _this._expressionsToControlMap[controlName], controlDataInfo) &&
                            _this._tryToGenerateFormattingRulesExpressions(control, _this._expressionsToControlMap[controlName], rules, controlDataInfo);
                    });
                };
                ReportConverter.prototype._applyChanges = function () {
                    var _this = this;
                    this._lastChoice = this.convertChoiceEnum.Convert;
                    var controls = this._controlsHelper.allControls()
                        .filter(Report.isControl);
                    this._model.formattingRuleSheet.removeAll();
                    controls.forEach(function (control) {
                        control.formattingRuleLinks.removeAll();
                        var controlName = ko.unwrap(control.name);
                        _this._resetDataBindings(control);
                        var expressions = _this._expressionsToControlMap[controlName];
                        if (expressions.length > 0) {
                            control.expressionBindings(expressions);
                        }
                    });
                    this.popupOptions.visible(false);
                    this._undoEngine().clearHistory();
                    this._undoEngine().isDirty(true);
                    this._expressionsToControlMap = null;
                    this._model = null;
                };
                ReportConverter.prototype._cancel = function (mode) {
                    if (mode === void 0) { mode = Report.DataBindingMode.Bindings; }
                    this._lastChoice = this.convertChoiceEnum.Cancel;
                    this._model._dataBindingMode(mode);
                    this._model = null;
                    this._expressionsToControlMap = {};
                    this.popupOptions.visible(false);
                };
                return ReportConverter;
            })();
            Report.ReportConverter = ReportConverter;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var SortingOptions = (function (_super) {
                __extends(SortingOptions, _super);
                function SortingOptions(model, report, serializer) {
                    var _this = this;
                    _super.call(this);
                    this._info = $.extend(true, [], Report.sortingOptionsSerializationsInfo);
                    this._fieldNameInfo = this._info.filter(function (info) { return info.propertyName == "fieldName"; })[0];
                    serializer = serializer || new DevExpress.JS.Utils.ModelSerializer();
                    serializer.deserialize(this, model || {});
                    Object.defineProperty(this._fieldNameInfo, "valuesArray", {
                        get: function () {
                            var items = [];
                            var currentBand = _this.targetBand && _this.targetBand();
                            if (currentBand) {
                                items = _this._getFieldNames(currentBand).map(function (fieldName) { return { value: fieldName, displayValue: fieldName }; });
                            }
                            return items;
                        }
                    });
                    var _fieldName = this.fieldName;
                    this._disposables.push(this.fieldName = ko.computed({
                        read: function () {
                            var value = _fieldName();
                            return _this._getFieldNames(_this.targetBand()).indexOf(value) === -1 ? "" : value;
                        },
                        write: function (newValue) {
                            _fieldName(newValue);
                        }
                    }));
                }
                SortingOptions.prototype._getFieldNames = function (targetBand) {
                    var fieldArray = targetBand && (targetBand["sortFields"] || targetBand["groupFields"]);
                    return fieldArray ? fieldArray().map(function (item) { return item.fieldName(); }).filter(function (name) { return !!name; }) : [];
                };
                SortingOptions.prototype.getInfo = function () {
                    return this._info;
                };
                SortingOptions.prototype.isPropertyDisabled = function (name) {
                    return name == "fieldName" && !this.targetBand();
                };
                SortingOptions.prototype.resetValue = function () {
                    this.targetBand(null);
                    this.fieldName("");
                };
                SortingOptions.prototype.getPath = function (propertyName) {
                    return this.targetBand() && this.targetBand().getPath("groupFields") || "";
                };
                return SortingOptions;
            })(DevExpress.JS.Utils.Disposable);
            Report.SortingOptions = SortingOptions;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var NavigateTab = (function (_super) {
                __extends(NavigateTab, _super);
                function NavigateTab(options) {
                    var _this = this;
                    _super.call(this);
                    this._isReportLoading = options.isReportLoading;
                    this._callbacks = options.callbacks;
                    this.context = ko.observable(this._callbacks.createContext(options.report, options.url));
                    this._disposables.push(this.displayName = ko.computed(function () { return _this._generateDisplayName(_this.context().report); }));
                    this.undoEngine = new DevExpress.JS.Utils.UndoEngine(this.context, ["surface", "reportSource"], "getInfo");
                    this.isDirty = this.undoEngine.isDirty;
                    this.isModified = this.undoEngine.isDirty;
                    this._disposables.push(this.report = this._createReport());
                    this._disposables.push(this.url = this._createReportUrl());
                    this._callbacks.afterInititalize(this);
                }
                NavigateTab.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.undoEngine["_callDisposeFunction"](this.context());
                    this.context().dispose();
                };
                NavigateTab.prototype._generateDisplayName = function (model) {
                    var name = model && (model["displayNameObject"]() || model.name());
                    return name;
                };
                NavigateTab.prototype._createReport = function () {
                    var _this = this;
                    return ko.computed({
                        read: function () { return _this.context().report; },
                        write: function (newVal) { return _this.changeContext(newVal, _this.context().url()); }
                    });
                };
                NavigateTab.prototype._createReportUrl = function () {
                    var _this = this;
                    return ko.computed({
                        read: function () { return _this.context().url(); },
                        write: function (newVal) { return _this.context().url(newVal); }
                    });
                };
                NavigateTab.prototype.changeContext = function (report, reportUrl) {
                    this.context(this._callbacks.createContext(report, reportUrl));
                    this._isReportLoading(false);
                };
                NavigateTab.prototype.resetIsModified = function () {
                    this.undoEngine.isDirty(false);
                    this.undoEngine.clearHistory();
                };
                NavigateTab.prototype.refresh = function () {
                    var _this = this;
                    this._isReportLoading(true);
                    Report.ReportStorageWeb.getReportByUrl((this.context().url())).done(function (result) {
                        _this.report(result);
                    });
                };
                NavigateTab.prototype.refreshSubreports = function () {
                    this.context().controlsHelper && this.context().controlsHelper.allControls()
                        .filter(function (x) { return x instanceof Report.XRSubreportViewModel; })
                        .forEach(function (x) { return x.updateParameters(); });
                };
                return NavigateTab;
            })(Designer.Disposable);
            Report.NavigateTab = NavigateTab;
            var NavigateByReports = (function (_super) {
                __extends(NavigateByReports, _super);
                function NavigateByReports(options) {
                    var _this = this;
                    _super.call(this);
                    this._isReportLoading = ko.observable(false);
                    this.save = function (tab) { return void 0; };
                    this.height = ko.observable(0);
                    this.tabs = ko.observableArray([]);
                    this._selectedIndex = ko.observable(-1);
                    this.selectedIndex = ko.computed({
                        read: function () { return _this._selectedIndex(); },
                        write: function (value) { if (value != -1)
                            _this._selectedIndex(value); }
                    });
                    this.allowMDI = options.allowMDI != undefined ? options.allowMDI : true;
                    this.knownEnums = options.knownEnums;
                    this._callbacks = options.callbacks || {};
                    this._selection = options.selection;
                    this._initializeOptions = options.initOptions;
                    var currentTab = null;
                    this._disposables.push(this.currentTab = ko.pureComputed(function () {
                        if (_this.selectedIndex() !== -1) {
                            var oldValue = currentTab;
                            currentTab = _this.tabs.peek()[_this.selectedIndex()];
                            if (currentTab !== oldValue)
                                _this._isReportLoading(true);
                            return currentTab;
                        }
                        else {
                            return null;
                        }
                    }));
                    if (options.report)
                        this.addTab(options.report, options.reportUrl || ko.observable(null));
                    this._disposables.push(this.currentTab.subscribe(function (newVal) {
                        setTimeout(function () {
                            _this._isReportLoading(false);
                            _this.height.notifySubscribers();
                            _this.checkHeight();
                            _this.currentTab() && _this.currentTab().refreshSubreports();
                            _this._callbacks.tabChanged && _this._callbacks.tabChanged(newVal);
                        }, 1);
                    }));
                }
                NavigateByReports.prototype._removeTab = function (tab) {
                    var _this = this;
                    var removingDeferred = $.Deferred();
                    if (!this._callbacks.reportTabClosing || !this._callbacks.reportTabClosing(tab, removingDeferred)) {
                        removingDeferred.resolve();
                    }
                    removingDeferred.done(function () {
                        var currentIndex = _this._selectedIndex(), closingIndex = _this.tabs().indexOf(tab), newIndex = (currentIndex < closingIndex || currentIndex === closingIndex && currentIndex < _this.tabs().length - 1)
                            ? currentIndex
                            : currentIndex - 1;
                        _this.tabs.remove(tab);
                        _this._selectedIndex(newIndex);
                        if (newIndex === currentIndex)
                            _this.selectedIndex.notifySubscribers();
                        _this._callbacks.reportTabClosed && _this._callbacks.reportTabClosed(tab);
                        tab.dispose();
                    });
                    return removingDeferred.promise();
                };
                NavigateByReports.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this._selectedIndex(-1);
                    this.disposeObservableArray(this.tabs);
                    this.resetObservableArray(this.tabs);
                };
                NavigateByReports.prototype._closeTab = function (deletedTab) {
                    var closingDeferred = $.Deferred();
                    deletedTab.close = closingDeferred;
                    if (deletedTab.isDirty()) {
                        this.save(deletedTab);
                    }
                    else {
                        closingDeferred.resolve();
                    }
                    return closingDeferred.promise();
                };
                NavigateByReports.prototype._closeAll = function (deferred) {
                    var _this = this;
                    if (this.tabs().length === 0) {
                        deferred.resolve();
                        return;
                    }
                    var tab = this.tabs()[this.tabs().length - 1];
                    this._closeTab(tab).done(function () {
                        _this._removeTab(tab)
                            .done(function () { return _this._closeAll(deferred); })
                            .fail(function () { return deferred.reject(); });
                    });
                };
                NavigateByReports.prototype._getTabByControl = function (report, reportUrl) {
                    return this.tabs().filter(function (tab) { return reportUrl ? tab.context().url() === reportUrl : tab.context().report === report; })[0];
                };
                NavigateByReports.prototype._addTab = function (report, url) {
                    var _this = this;
                    var newTab = new NavigateTab({
                        report: report,
                        url: url,
                        isReportLoading: this._isReportLoading,
                        callbacks: {
                            afterInititalize: function (tab) {
                                tab._disposables.push(tab.displayName.subscribe(function () { return _this.checkHeight(); }));
                                tab.icon = !_this.allowMDI && _this.tabs().length === 0 ? undefined : "dx-icon-close";
                                if (!tab.displayName()) {
                                    tab.context().report.name(Designer.getUniqueName(_this.tabs().map(function (t) { return t.displayName(); }), "Report"));
                                    tab.undoEngine.clearHistory();
                                }
                                tab._disposables.push(tab.context.subscribe(function (newVal) { return _this.height.notifySubscribers(); }));
                            },
                            createContext: function (report, url) {
                                return new Report.ReportDesignerContext({
                                    report: report,
                                    selection: _this._selection,
                                    designerCallbacks: _this._callbacks,
                                    knownEnums: _this.knownEnums,
                                    initializeOptions: _this._initializeOptions,
                                    url: url
                                });
                            }
                        }
                    });
                    this.tabs.push(newTab);
                    this.switch(newTab);
                    newTab.undoEngine.clearHistory();
                };
                NavigateByReports.prototype.changeContext = function (report, reportUrl, tab) {
                    if (reportUrl === void 0) { reportUrl = ko.observable(null); }
                    if (!this.currentTab())
                        this.addTab(report, reportUrl);
                    else {
                        this.currentTab().changeContext(report, reportUrl());
                    }
                };
                NavigateByReports.prototype.init = function (isLoading) {
                    this._isReportLoading = isLoading;
                };
                NavigateByReports.prototype.removeTab = function (tab, force) {
                    var _this = this;
                    if (force === void 0) { force = false; }
                    if (force)
                        return this._removeTab(tab);
                    this._closeTab(tab).done(function () {
                        _this._removeTab(tab);
                    });
                };
                NavigateByReports.prototype.closeAll = function () {
                    var deferred = $.Deferred();
                    this._closeAll(deferred);
                    return deferred.promise();
                };
                NavigateByReports.prototype.switch = function (tab) {
                    this._selectedIndex(this.tabs().indexOf(tab));
                };
                NavigateByReports.prototype.goToSubreport = function (subreportSurface) {
                    var _this = this;
                    if (Report.reportStorageWebIsRegister) {
                        var subreportControl = subreportSurface.getControlModel();
                        var url = ko.unwrap(subreportControl.reportSourceUrl);
                        if ((function (args) { return void (_this._callbacks.reportOpening && _this._callbacks.reportOpening(args)) || args; })({ url: url, cancel: false }).cancel)
                            return;
                        var self = this;
                        if (url) {
                            Report.ReportStorageWeb.getReportByUrl(url).done(function (result) {
                                _this.addTab(result, subreportControl.reportSourceUrl);
                            });
                        }
                        else {
                            var report = new Report.ReportViewModel(subreportControl.reportSource.save());
                            this.addTab(report, subreportControl.reportSourceUrl);
                        }
                    }
                };
                NavigateByReports.prototype.addTab = function (report, url) {
                    if (url === void 0) { url = ko.observable(""); }
                    var tab = this._getTabByControl(report, url());
                    if (!tab) {
                        this._addTab(report, url);
                        var onOpened = this._callbacks.reportOpened;
                        onOpened && setTimeout(function () {
                            onOpened({ report: report, url: ko.unwrap(url) });
                        }, 10);
                    }
                    else {
                        this.switch(tab);
                    }
                };
                NavigateByReports.prototype.checkHeight = function () {
                    var currentHeight = $(".dxrd-navigation-panel-wrapper").outerHeight();
                    if (this.height() !== currentHeight) {
                        this.height(currentHeight);
                    }
                };
                return NavigateByReports;
            })(Designer.Disposable);
            Report.NavigateByReports = NavigateByReports;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportExplorerDragDropHandler = (function (_super) {
                __extends(ReportExplorerDragDropHandler, _super);
                function ReportExplorerDragDropHandler(surface, selection, undoEngine, dragHelperContent) {
                    var _this = this;
                    _super.call(this, surface, selection, undoEngine, null, dragHelperContent);
                    this.undoEngine = undoEngine;
                    this._lastList = null;
                    this._timeout = null;
                    this._isStyle = function (item) { return item.data && item.data.specifics === "stylemodel"; };
                    this._isFormatingRule = function (item) { return item.data && item.data.specifics === "formattingrule"; };
                    this._isReportControl = function (item) { return !_this._isStyle(item) && !_this._isFormatingRule(item); };
                    this.reportControlsDragDropHelper = null;
                    this.cursor = 'arrow';
                    this.alwaysAlt = true;
                    this.containment = '.dxrd-designer';
                    this["cursorAt"] = {
                        top: 0,
                        left: 0
                    };
                    this.helper = function (draggable, event) {
                        var item = draggable;
                        Report.selectTreeListItem(item, event);
                        if (_this._isReportControl(item)) {
                            var target = $(event.target).closest(".ui-draggable");
                            var rect = new Designer.Rectangle(6, 6, null, target.height());
                            rect.className = "dxrd-image-ghost-report";
                            dragHelperContent.setContent(rect, {
                                template: "dxrd-drag-helper-source-reportexplorer",
                                data: {
                                    imageClassName: item.imageClassName,
                                    imageTemplateName: item.imageTemplateName,
                                    text: item.text
                                }
                            });
                        }
                        else {
                            var rect = new Designer.Rectangle(12, 12, 12, 12);
                            var templateId = "";
                            if (_this._isStyle(item)) {
                                rect.className = "dxrd-image-ghost-stylemodel";
                                templateId = "dxrd-svg-reportexplorer-style";
                            }
                            else if (_this._isFormatingRule(item)) {
                                rect.className = "dxrd-image-ghost-formattingrule";
                                templateId = "dxrd-svg-reportexplorer-formatting_rule";
                            }
                            dragHelperContent.setContent(rect, (templateId ? { template: templateId } : null));
                            _this._size.width(12);
                            _this._size.height(12);
                        }
                    };
                }
                ReportExplorerDragDropHandler.prototype.startDrag = function (draggable) {
                    if (this._isReportControl(draggable)) {
                        this.reportControlsDragDropHelper = new ReportControlsDragDropHelper(draggable, this.undoEngine());
                    }
                    else {
                        this.reportControlsDragDropHelper = null;
                    }
                    _super.prototype.startDrag.call(this, draggable);
                };
                ReportExplorerDragDropHandler.prototype.drag = function (event, ui) {
                    var _this = this;
                    if (this.reportControlsDragDropHelper) {
                        var target = event["toElement"] || event.relatedTarget || (event.originalEvent && event.originalEvent.target) || null;
                        if (target) {
                            this.reportControlsDragDropHelper.setNewDropTarget(ko.dataFor(target), target);
                        }
                        var _target = this.reportControlsDragDropHelper["_target"];
                        if (_target.hasItems && (_target.collapsed && _target.collapsed())) {
                            if (this._lastList !== _target) {
                                this._timeout && clearTimeout(this._timeout);
                                this._lastList = _target;
                                this._timeout = setTimeout(function () {
                                    _this._lastList.toggleCollapsed();
                                }, 500);
                            }
                        }
                        else {
                            this._lastList = null;
                            this._timeout && clearTimeout(this._timeout);
                        }
                    }
                    this.selection.dropTarget && this.dragHelperContent.isLocked(this.selection.dropTarget.locked);
                };
                ReportExplorerDragDropHandler.prototype.doStopDrag = function (ui, draggable, event) {
                    if (this.selection.dropTarget && !this.selection.dropTarget.locked) {
                        var position = this._getAbsoluteSurfacePosition(ui);
                        this.selection.dropTarget.underCursor().x = position.left - this.selection.dropTarget["absolutePosition"].x();
                        this.selection.dropTarget.underCursor().y = position.top - this.selection.dropTarget["absolutePosition"].y();
                        if (draggable.data && draggable.data.specifics === "stylemodel") {
                            this.selection.dropTarget.getControlModel()["styleName"] && this.selection.dropTarget.getControlModel()["styleName"](draggable.data.displayName);
                        }
                        else if (draggable.data && draggable.data.specifics === "formattingrule") {
                            this.selection.dropTarget.getControlModel()["formattingRuleLinks"] && this.selection.dropTarget.getControlModel()["formattingRuleLinks"].push(Report.FormattingRuleLink.createNew(draggable.data.data));
                        }
                        ;
                    }
                    else if (this.reportControlsDragDropHelper) {
                        this.selection.initialize(this.reportControlsDragDropHelper.doStopDrag());
                    }
                };
                return ReportExplorerDragDropHandler;
            })(Designer.DragDropHandler);
            Report.ReportExplorerDragDropHandler = ReportExplorerDragDropHandler;
            var ReportControlsDragDropHelper = (function () {
                function ReportControlsDragDropHelper(draggable, _undoEngine) {
                    this._undoEngine = _undoEngine;
                    this._draggable = draggable;
                    this._draggableModel = this._getElementViewModel(draggable);
                    this._draggableParent = this._draggableModel.parentModel();
                    this._serializer = new DevExpress.JS.Utils.ModelSerializer();
                }
                ReportControlsDragDropHelper.prototype._getElementViewModel = function (item) {
                    return item && item.data && item.data["data"];
                };
                ReportControlsDragDropHelper.prototype._canReorder = function (currentTarget, draggableData) {
                    var currentModel = this._getElementViewModel(currentTarget);
                    return currentTarget.data.specifics === draggableData.specifics ||
                        (this._draggableModel.getMetaData().canDrop(currentModel.surface, this._draggableModel) &&
                            !currentModel.getMetaData().isContainer && !(currentModel instanceof Report.ReportViewModel));
                };
                ReportControlsDragDropHelper.prototype._shiftChildrenCount = function (currentTarget) {
                    var _this = this;
                    return Designer.find(this._draggable.parent.items(), function (item) { return item === _this._draggable || item === currentTarget; }) === this._draggable ? 1 : 0;
                };
                ReportControlsDragDropHelper.prototype._targetIsClosestOfDraggable = function (target, draggable) {
                    return target === draggable || (target.parent && this._targetIsClosestOfDraggable(target.parent, draggable));
                };
                ReportControlsDragDropHelper.prototype._canDrop = function (target, targetModel) {
                    var isReportExplorerTreeListItem = target instanceof DevExpress.Analytics.Widgets.TreeListItemViewModel && target.data && target.data.data instanceof Designer.ElementViewModel;
                    if (!isReportExplorerTreeListItem) {
                        return false;
                    }
                    if (["XRTable", "XRTableCell", "XRTableRow"].indexOf(this._draggableModel.controlType) < 0 && ["XRTable", "XRTableRow"].indexOf(targetModel.controlType) > -1)
                        return false;
                    return (this._draggableParent !== targetModel && !this._targetIsClosestOfDraggable(target, this._draggable)) &&
                        (this._canReorder(target, this._draggable.data) ||
                            (targetModel.getMetaData().isContainer
                                && targetModel.surface && targetModel.surface.canDrop()
                                && this._draggableModel.getMetaData().canDrop(targetModel.surface, this._draggableModel)));
                };
                ReportControlsDragDropHelper.prototype._removeClass = function (target) {
                    $(target).removeClass("dxrd-treelist-droppable dxrd-drop-approve drop-before drop-after");
                };
                ReportControlsDragDropHelper.prototype._insertTableChilds = function (parent, selectedEl, position, weightsCells) {
                    if (weightsCells === void 0) { weightsCells = null; }
                    var newChild, selectedRowHeight = 0;
                    if (selectedEl["@ControlType"] === "XRTableRow") {
                        newChild = new Report.TableRowViewModel(selectedEl, parent);
                        selectedRowHeight = newChild.height.peek();
                    }
                    else if (selectedEl["@ControlType"] === "XRTableCell") {
                        newChild = new Report.TableCellViewModel(selectedEl, parent);
                    }
                    parent.addChild(newChild, position);
                    if (weightsCells) {
                        weightsCells.splice(position, 0, parseFloat(selectedEl["@Weight"]));
                        weightsCells.forEach(function (weight, index) {
                            parent.cells()[index].weight(weight);
                        });
                    }
                    if (selectedRowHeight) {
                        parent.size.height(parent.size.height() + selectedRowHeight);
                    }
                    return newChild.surface;
                };
                ReportControlsDragDropHelper.prototype.setNewDropTarget = function (elementModel, element) {
                    if (this._target === elementModel)
                        return;
                    this._removeClass(this._targetElement);
                    var $targetElement;
                    this._target = elementModel;
                    $targetElement = $(element).closest(".dx-treelist-item");
                    this._targetElement = $targetElement.get(0);
                    if ($targetElement && $targetElement.length) {
                        var classToAdd = "dxrd-treelist-droppable";
                        var targetModel = this._getElementViewModel(this._target);
                        if (this._canDrop(this._target, targetModel)) {
                            classToAdd = classToAdd + " dxrd-drop-approve";
                            if (this._canReorder(this._target, this._draggable.data)) {
                                classToAdd = classToAdd + " " + (this._shiftChildrenCount(this._target) ? "drop-after" : "drop-before");
                            }
                        }
                        $targetElement.addClass(classToAdd);
                    }
                };
                ReportControlsDragDropHelper.prototype.doStopDrag = function () {
                    var _this = this;
                    this._removeClass(this._targetElement);
                    var targetModel = this._getElementViewModel(this._target);
                    if (!this._target || !targetModel || !this._canDrop(this._target, targetModel)) {
                        return this._draggableModel.surface;
                    }
                    var draggablePathName = this._draggable.data.name.split(".")[0], siblings = targetModel.parentModel()[draggablePathName], clonedSiblings = siblings && siblings().slice(0);
                    if (Report.BandViewModel.isReorderingBand(this._draggableModel)) {
                        this._undoEngine && this._undoEngine.start();
                        this._draggableModel["level"](targetModel["level"]());
                        this._undoEngine && this._undoEngine.end();
                    }
                    else {
                        var draggableInfoClone = this._serializer.serialize(this._draggableModel);
                        var weightsCells = null;
                        if (draggableInfoClone["@ControlType"] === "XRTableCell" && targetModel.parentModel() === this._draggableParent) {
                            weightsCells = clonedSiblings.filter(function (cell) {
                                return cell.name.peek() !== _this._draggableModel.name.peek();
                            }).map(function (cell) { return cell.weight.peek(); });
                        }
                        var shiftChildrenCount = this._shiftChildrenCount(this._target);
                        var draggableData = this._draggable.data;
                        this._draggableParent.removeChild(this._draggableModel);
                        if (this._canReorder(this._target, draggableData)) {
                            if (targetModel.parentModel() instanceof Report.TableControlViewModel || targetModel.parentModel() instanceof Report.TableRowViewModel) {
                                return this._insertTableChilds(targetModel.parentModel(), draggableInfoClone, siblings.indexOf(targetModel) + shiftChildrenCount, weightsCells);
                            }
                            else {
                                siblings && siblings.splice(siblings.indexOf(targetModel) + shiftChildrenCount, 0, this._draggableModel);
                            }
                        }
                        else {
                            if (targetModel instanceof Report.TableControlViewModel || targetModel instanceof Report.TableRowViewModel) {
                                return this._insertTableChilds(targetModel, draggableInfoClone, 0);
                            }
                            else {
                                var targetRect = targetModel.surface.rect();
                                var draggableRect = this._draggableModel.surface.rect();
                                var rect = {};
                                if (targetRect.width < draggableRect.left + draggableRect.width) {
                                    rect["left"] = targetRect.width - draggableRect.width;
                                    rect["left"] = rect["left"] > 0 ? rect["left"] : 0;
                                }
                                if (targetRect.height < draggableRect.top + draggableRect.height) {
                                    rect["top"] = targetRect.height - draggableRect.height;
                                    rect["top"] = rect["top"] > 0 ? rect["top"] : 0;
                                }
                                this._draggableModel.surface.rect(rect);
                                targetModel.addChild(this._draggableModel);
                            }
                        }
                    }
                    return this._draggableModel.surface;
                };
                return ReportControlsDragDropHelper;
            })();
            Report.ReportControlsDragDropHelper = ReportControlsDragDropHelper;
            ko.bindingHandlers["dxAutoScrolling"] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element);
                    var rect = null;
                    var values = valueAccessor();
                    var scrollView = $element.data("dxScrollView") && $element.dxScrollView("instance");
                    if (scrollView) {
                        var timeout = null, interval = null, clearTimings = function () {
                            timeout && clearTimeout(timeout);
                            interval && clearInterval(interval);
                            timeout = null;
                            interval = null;
                        }, scrolling = function (inc) {
                            timeout = setTimeout(function () {
                                interval = setInterval(function () {
                                    var newPosition = scrollView.scrollTop() + inc;
                                    if (newPosition < 0) {
                                        newPosition = 0;
                                    }
                                    scrollView["scrollTo"](newPosition);
                                }, 50);
                            }, 500);
                        }, move = function (event) {
                            if (values.active()) {
                                if (!rect) {
                                    rect = element.getBoundingClientRect();
                                }
                                if (event.clientY <= rect.top + 30) {
                                    !timeout && scrolling(-30);
                                }
                                else if (event.clientY >= rect.bottom - 30) {
                                    !timeout && scrolling(30);
                                }
                                else {
                                    clearTimings();
                                }
                            }
                        }, subscription = values.active.subscribe(function (newVal) {
                            rect = null;
                            clearTimings();
                        });
                        element.addEventListener("mousemove", move);
                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            element.removeEventListener("mousemove", move);
                            subscription.dispose();
                        });
                    }
                }
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportStorageWeb = (function () {
                function ReportStorageWeb() {
                }
                ReportStorageWeb.getErrorMessageHandler = function (defaultErrorMessage) {
                    return function (messageFromDefaultHandler, jqXHR, textStatus) {
                        var error = DevExpress.Analytics.Utils.getErrorMessage(jqXHR);
                        DevExpress.Analytics.Utils.NotifyAboutWarning(error || defaultErrorMessage || "Internal Server Error", true);
                    };
                };
                ReportStorageWeb.getReportByUrl = function (url) {
                    var $deferred = $.Deferred();
                    ReportStorageWeb.getData(url).done(function (result) {
                        if (result) {
                            var model = new Report.ReportViewModel(JSON.parse(result.reportLayout));
                            model.dataSourceRefs = result.dataSourceRefInfo;
                            $deferred.resolve(model);
                        }
                        else {
                            $deferred.reject();
                        }
                    }).fail(function () { return $deferred.reject(); });
                    return $deferred.promise();
                };
                ReportStorageWeb.getData = function (url) {
                    if (Report.reportStorageWebIsRegister) {
                        return Designer.ajax(Report.HandlerUri, 'getData', encodeURIComponent(JSON.stringify({
                            reportUrl: url
                        })), ReportStorageWeb.getErrorMessageHandler());
                    }
                    else {
                        return $.Deferred().promise();
                    }
                };
                ReportStorageWeb.setData = function (layout, url) {
                    if (Report.reportStorageWebIsRegister) {
                        return Designer.ajax(Report.HandlerUri, 'setData', encodeURIComponent(JSON.stringify({
                            reportLayout: JSON.stringify({
                                "XtraReportsLayoutSerializer": layout
                            }),
                            reportUrl: url
                        })), ReportStorageWeb.getErrorMessageHandler(DevExpress.Analytics.getLocalization("Cannot save the report.", "ASPxReportsStringId.ReportDesigner_SaveReport_Error")));
                    }
                    else {
                        return $.Deferred().promise();
                    }
                };
                ReportStorageWeb.setNewData = function (layout, url) {
                    if (Report.reportStorageWebIsRegister) {
                        return Designer.ajax(Report.HandlerUri, 'setNewData', encodeURIComponent(JSON.stringify({
                            reportLayout: JSON.stringify({
                                "XtraReportsLayoutSerializer": layout
                            }),
                            reportUrl: url
                        })), ReportStorageWeb.getErrorMessageHandler(DevExpress.Analytics.getLocalization("Cannot save the report.", "ASPxReportsStringId.ReportDesigner_SaveReport_Error")));
                    }
                    else {
                        return $.Deferred().promise();
                    }
                };
                ReportStorageWeb.getUrls = function (subreports) {
                    if (Report.reportStorageWebIsRegister) {
                        return Designer.ajax(Report.HandlerUri, "getUrls", encodeURIComponent('true'));
                    }
                    else {
                        return $.Deferred().resolve(subreports).promise();
                    }
                };
                return ReportStorageWeb;
            })();
            Report.ReportStorageWeb = ReportStorageWeb;
            var ReportPreviewService = (function () {
                function ReportPreviewService() {
                }
                ReportPreviewService.initializePreview = function (report) {
                    return Designer.ajax(Report.HandlerUri, "initializePreview", encodeURIComponent(JSON.stringify({ "XtraReportsLayoutSerializer": report.serialize() })), DevExpress.Report.Preview.PreviewRequestWrapper.processError);
                };
                return ReportPreviewService;
            })();
            Report.ReportPreviewService = ReportPreviewService;
            var ReportRenderingService = (function () {
                function ReportRenderingService() {
                }
                ReportRenderingService.getChartImage = function (surface) {
                    return Designer.Chart.ChartRequests.getChartImage(Report.HandlerUri, new DevExpress.JS.Utils.ModelSerializer().serialize(surface._control["chart"], Designer.Chart.chartSerializationsInfo), surface["position"].width(), surface["position"].height());
                };
                ReportRenderingService.getShapeImage = function (surface) {
                    var _usefulRect = surface.getUsefulRect();
                    var params = {
                        shapeType: surface._control["Shape"]()["shapeType"] && surface._control["Shape"]()["shapeType"]() || "Ellipse",
                        width: _usefulRect.width,
                        lineWidth: surface._control["lineWidth"](),
                        fillColor: Designer.colorToString(surface._control["fillColor"]()),
                        lineStyle: surface._control["lineStyle"] && surface._control["lineStyle"]() || "Solid",
                        height: _usefulRect.height,
                        fillet: surface._control["Shape"]()["fillet"] && surface._control["Shape"]()["fillet"]() || 0,
                        numberOfSides: surface._control["Shape"]()["numberOfSides"] && surface._control["Shape"]()["numberOfSides"]() || 3,
                        angle: surface._control["angle"] && surface._control["angle"]() || 0,
                        arrowHeight: surface._control["Shape"]()["arrowHeight"] && surface._control["Shape"]()["arrowHeight"]() || 20,
                        arrowWidth: surface._control["Shape"]()["arrowWidth"] && surface._control["Shape"]()["arrowWidth"]() || 20,
                        concavity: surface._control["Shape"]()["concavity"] && surface._control["Shape"]()["concavity"]() || 5,
                        starPointCount: surface._control["Shape"]()["starPointCount"] && surface._control["Shape"]()["starPointCount"]() || 3,
                        horizontalLineWidth: surface._control["Shape"]()["horizontalLineWidth"] && surface._control["Shape"]()["horizontalLineWidth"]() || 10,
                        verticalLineWidth: surface._control["Shape"]()["verticalLineWidth"] && surface._control["Shape"]()["verticalLineWidth"]() || 10,
                        tipLength: surface._control["Shape"]()["tipLength"] && surface._control["Shape"]()["tipLength"]() || 30,
                        tailLength: surface._control["Shape"]()["tailLength"] && surface._control["Shape"]()["tailLength"]() || 30,
                        foreColor: Designer.colorToString(surface._control["foreColor"] && surface._control["foreColor"]() || "black"),
                        stretch: surface._control["stretch"] && surface._control["stretch"]() || false,
                        padding: surface._control["padding"] && surface._control["padding"]() || DevExpress.Analytics.PaddingModel.defaultVal,
                        dpi: surface._control["dpi"] && surface._control["dpi"]() || 100
                    };
                    return DevExpress.Designer.Report.HandlerUri + "?actionKey=shapeGlyph&arg=" + encodeURIComponent(JSON.stringify(params));
                };
                ReportRenderingService.getRichImage = function (surface, propertyName) {
                    return Designer.ajax(Report.HandlerUri, 'renderRich', encodeURIComponent(JSON.stringify({
                        layout: JSON.stringify(new DevExpress.JS.Utils.ModelSerializer().serialize(surface._control)),
                        scale: surface._context.zoom(),
                        text: surface._control["textRtf"]().replace(/\n/g, "\r\n"),
                        rtf: surface._control["_rtf"]().replace(/\n/g, "\r\n"),
                        format: surface._control["format"](),
                        base64rtf: surface._control["_serializableRtfString"](),
                        propertyName: propertyName
                    })));
                };
                return ReportRenderingService;
            })();
            Report.ReportRenderingService = ReportRenderingService;
            var FormatStringService = (function () {
                function FormatStringService() {
                }
                FormatStringService.saveCustomPattern = function (typeString, format) {
                    return Designer.ajax(Report.HandlerUri, "formatString", encodeURIComponent(JSON.stringify({ action: "save", typeString: typeString, customFormatString: format })));
                };
                FormatStringService.removeCustomPattern = function (typeString, format) {
                    return Designer.ajax(Report.HandlerUri, "formatString", encodeURIComponent(JSON.stringify({ action: "remove", typeString: typeString, customFormatString: format })));
                };
                FormatStringService.updatePreview = function (value, typeString, format) {
                    return Designer.ajax(Report.HandlerUri, "formatStringPreview", encodeURIComponent(JSON.stringify({ value: value, typeString: typeString, formatString: format })));
                };
                FormatStringService.actions = { updatePreview: FormatStringService.updatePreview, removeCustomPattern: FormatStringService.removeCustomPattern, saveCustomPattern: FormatStringService.saveCustomPattern };
                return FormatStringService;
            })();
            Report.FormatStringService = FormatStringService;
            var ReportScriptService = (function () {
                function ReportScriptService() {
                }
                ReportScriptService.validateScripts = function (report) {
                    return Designer.ajax(Report.HandlerUri, 'validateScripts', encodeURIComponent(JSON.stringify({
                        report: JSON.stringify({
                            "XtraReportsLayoutSerializer": report.serialize()
                        })
                    })));
                };
                ReportScriptService.getCompletions = function (editor, session, pos, prefix, callback, report, editorInstance, guid) {
                    if (guid) {
                        return Designer.ajax(Report.HandlerUri, "getCompletions", encodeURIComponent(JSON.stringify({
                            Line: pos.row,
                            Column: pos.column,
                            Guid: guid,
                            Script: editorInstance.getValue()
                        })));
                    }
                    else {
                        return $.Deferred().resolve().promise();
                    }
                };
                ReportScriptService.setCodeDom = function (key, reportLayout) {
                    return Designer.ajax(Report.HandlerUri, "setReportLayout", encodeURIComponent(JSON.stringify({
                        ReportLayout: reportLayout,
                        Key: key
                    })));
                };
                return ReportScriptService;
            })();
            Report.ReportScriptService = ReportScriptService;
            var ReportWizardService = (function () {
                function ReportWizardService() {
                }
                ReportWizardService.createWizardRequest = function (reportWizardModel, state, oldReportJSON) {
                    var dataSourceJSON = null;
                    if (reportWizardModel.dataSource) {
                        var dataSourceData = new DevExpress.JS.Utils.ModelSerializer().serialize(reportWizardModel.dataSource.data);
                        dataSourceJSON = JSON.stringify(dataSourceData);
                    }
                    var requestJson = JSON.stringify({
                        reportModel: reportWizardModel.useMasterDetailBuilder ? new Report.RequestXtraReportModel(reportWizardModel) : new Report.RequestReportModel(reportWizardModel),
                        dataSource: dataSourceJSON,
                        oldReport: oldReportJSON,
                        state: state,
                        colorScheme: reportWizardModel.colorScheme && (reportWizardModel.colorScheme.name === 'Custom' ? reportWizardModel.colorScheme.baseColor : reportWizardModel.colorScheme.name)
                    });
                    return encodeURIComponent(requestJson);
                };
                ReportWizardService.generateReportFromWizardModel = function (reportWizardModel, state, oldReportJSON) {
                    return Designer.ajax(Report.HandlerUri, 'generateReportFromWizardModel', this.createWizardRequest(reportWizardModel, state, oldReportJSON));
                };
                ReportWizardService.createDataSource = function (reportWizardModel, state) {
                    return Designer.ajax(Report.HandlerUri, 'createDataSource', this.createWizardRequest(reportWizardModel, state));
                };
                ReportWizardService.getLabelReportWizardData = function () {
                    return Designer.ajax(Report.HandlerUri, 'labelReportWizardData', "");
                };
                return ReportWizardService;
            })();
            Report.ReportWizardService = ReportWizardService;
            var ReportDataSourceService = (function () {
                function ReportDataSourceService() {
                }
                ReportDataSourceService.fieldListCallback = function (request) {
                    var requestJson = JSON.stringify(request);
                    var encodedJson = encodeURIComponent(requestJson);
                    return Designer.ajax(Report.HandlerUri, 'fieldList', encodedJson);
                };
                ReportDataSourceService.getCustomQueriesPreset = function (dataSource) {
                    return $.Deferred().resolve([]).promise();
                };
                ReportDataSourceService.sqlDataSourceFromBase64 = function (base64) {
                    return Designer.ajax(Report.HandlerUri, "dataSourceFromBase64", encodeURIComponent(base64));
                };
                ReportDataSourceService.getSqlDataSourceBase64 = function (dataSource) {
                    return Designer.ajax(Report.HandlerUri, "getDataSourceBase64", encodeURIComponent(JSON.stringify({ sqlDataSourceJSON: JSON.stringify({ SqlDataSource: new DevExpress.JS.Utils.ModelSerializer().serialize(dataSource) }) })));
                };
                return ReportDataSourceService;
            })();
            Report.ReportDataSourceService = ReportDataSourceService;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            (function (XRRichTextStreamType) {
                XRRichTextStreamType[XRRichTextStreamType["RtfText"] = 0] = "RtfText";
                XRRichTextStreamType[XRRichTextStreamType["PlainText"] = 1] = "PlainText";
                XRRichTextStreamType[XRRichTextStreamType["HtmlText"] = 2] = "HtmlText";
                XRRichTextStreamType[XRRichTextStreamType["XmlText"] = 3] = "XmlText";
            })(Report.XRRichTextStreamType || (Report.XRRichTextStreamType = {}));
            var XRRichTextStreamType = Report.XRRichTextStreamType;
            var XRRichViewModel = (function (_super) {
                __extends(XRRichViewModel, _super);
                function XRRichViewModel(model, parent, serializer) {
                    var _this = this;
                    _super.call(this, model, parent, serializer);
                    this.format = ko.observable(XRRichTextStreamType.RtfText);
                    this.textRtf = ko.observable("");
                    this._rtf = ko.observable("");
                    var nameSubscribe = ko.computed(function () {
                        var newVal = _this.name();
                        if (!_this.textRtf() && newVal) {
                            _this.textRtf(newVal);
                            nameSubscribe && nameSubscribe.dispose();
                        }
                    }).extend({ rateLimit: { method: "notifyWhenChangesStop", timeout: 1 } });
                    this._disposables.push(nameSubscribe);
                }
                Object.defineProperty(XRRichViewModel.prototype, "textEditableProperty", {
                    get: function () { return this.textRtf; },
                    enumerable: true,
                    configurable: true
                });
                return XRRichViewModel;
            })(Report.ControlViewModel);
            Report.XRRichViewModel = XRRichViewModel;
            var XRRichSurface = (function (_super) {
                __extends(XRRichSurface, _super);
                function XRRichSurface(control, context) {
                    var _this = this;
                    _super.call(this, control, context);
                    this._lastRequest = ko.observable(null);
                    this._innerUpdate = ko.observable(false);
                    this.imageSrc = ko.observable("");
                    this.template = "dxrd-shape";
                    this.contenttemplate = "dxrd-shape-content";
                    this._sendCallback();
                    this._disposables.push(control.textRtf.subscribe(function (newVal) { _this._sendCallback("textRtf"); }));
                    this._disposables.push(control._rtf.subscribe(function () { _this._sendCallback("rtf"); }));
                    this._disposables.push(control.font.subscribe(function () { _this._sendCallback("font"); }));
                    this._disposables.push(control.foreColor.subscribe(function () { _this._sendCallback("foreColor"); }));
                    this._disposables.push(this["position"]["width"].subscribe(function (newValue) { _this._sendCallback("width"); }));
                    this._disposables.push(this["position"]["height"].subscribe(function (newValue) { _this._sendCallback("height"); }));
                    this._disposables.push(control._serializableRtfString.subscribe(function () { _this._sendCallback("base64rtf"); }));
                }
                XRRichSurface.prototype._sendCallback = function (propertyName) {
                    if (propertyName === void 0) { propertyName = null; }
                    if (!this._innerUpdate()) {
                        this._lastRequest(propertyName);
                        var self = this;
                        var selfControl = this._control;
                        Report.ReportRenderingService.getRichImage(this, propertyName).done(function (result) {
                            if (propertyName === self._lastRequest()) {
                                selfControl.root && selfControl.root["_update"] && selfControl.root["_update"](true);
                                if (propertyName !== "height" && propertyName !== "width") {
                                    self._innerUpdate(true);
                                    if (propertyName !== "textRtf") {
                                        selfControl.textRtf(result.Text);
                                    }
                                    selfControl._rtf(result.Rtf);
                                    selfControl._serializableRtfString(result.SerializableRtfString);
                                    self._innerUpdate(false);
                                }
                                self.imageSrc("data:image/x;base64," + result.Img);
                                selfControl.root && selfControl.root["_update"] && selfControl.root["_update"](false);
                            }
                        }).fail(function (jqXHR) {
                            Designer.NotifyAboutWarning("It is impossible to get richText");
                        });
                    }
                };
                return XRRichSurface;
            })(Report.ControlSurface);
            Report.XRRichSurface = XRRichSurface;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportDialogBase = (function (_super) {
                __extends(ReportDialogBase, _super);
                function ReportDialogBase() {
                    var _this = this;
                    _super.call(this);
                    this.width = ko.observable(690);
                    this.height = ko.observable(420);
                    this.template = ko.observable("");
                    this.model = ko.observable(null);
                    this.tab = ko.observable(null);
                    this.visible = ko.observable(false);
                    this.container = function (element) { return DevExpress.Analytics.Utils.getParentContainer(element); };
                    this._disposables.push(this.visible.subscribe(function (newVal) {
                        if (!newVal) {
                            _this.tab(null);
                        }
                    }));
                }
                ReportDialogBase.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.tab(null);
                };
                ReportDialogBase.prototype.show = function (tab) {
                    if (tab) {
                        this.tab(tab);
                        this.model().setUrl(tab.context().url());
                        this.model().onShow(tab);
                    }
                    this.visible(true);
                };
                ReportDialogBase.prototype.customize = function (template, model) {
                    this.template(template);
                    this.model(model);
                    this.buttons = model.popupButtons;
                };
                ReportDialogBase.prototype.cancel = function () {
                    this.visible(false);
                };
                return ReportDialogBase;
            })(Designer.Disposable);
            Report.ReportDialogBase = ReportDialogBase;
            var OpenReportDialogModelBase = (function () {
                function OpenReportDialogModelBase(popup, urls) {
                    var _this = this;
                    this.urls = urls;
                    this.searchValue = ko.observable("");
                    this.searchPlaceholder = function () { return Designer.getLocalization("Enter text to search...", "ASPxReportsStringId.ReportDesigner_QueryBuilder_SearchBox_EmptyText"); };
                    this.reportUrl = ko.observable("");
                    this.noDataText = DevExpress.Analytics.Localization.noDataText();
                    var self = this;
                    this.popupButtons = [
                        {
                            toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                text: Designer.getLocalization('Open', 'ASPxReportsStringId.SidePanel_Open'), onClick: function () {
                                    popup.open(self.reportUrl());
                                }
                            }, disabled: ko.pureComputed(function () { return !_this.reportUrl(); })
                        },
                        {
                            toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                text: Designer.getLocalization("Cancel", 'ASPxReportsStringId.SearchDialog_Cancel'), onClick: function () {
                                    popup.cancel();
                                }
                            }
                        }];
                }
                OpenReportDialogModelBase.prototype.onShow = function (tab) {
                    var self = this;
                    this.searchValue("");
                    Report.ReportStorageWeb.getUrls().done(function (result) { self.urls(result); });
                };
                OpenReportDialogModelBase.prototype.getUrl = function () {
                    return this.reportUrl();
                };
                OpenReportDialogModelBase.prototype.setUrl = function (url) {
                    this.reportUrl(url);
                };
                return OpenReportDialogModelBase;
            })();
            Report.OpenReportDialogModelBase = OpenReportDialogModelBase;
            var SaveReportDialogModelBase = (function () {
                function SaveReportDialogModelBase(popup) {
                    this.reportUrl = ko.observable("");
                    this.saveText = ko.observable("");
                    var self = this;
                    this.popupButtons = [
                        {
                            toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                text: Designer.getLocalization('Yes', 'ASPxReportsStringId.ParametersPanel_True'), onClick: function () {
                                    popup.save(self.reportUrl());
                                }
                            }
                        },
                        {
                            toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                text: Designer.getLocalization("No", "ASPxReportsStringId.ParametersPanel_False"), onClick: function () {
                                    popup.notSave();
                                }
                            }
                        },
                        { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: Designer.getLocalization('Cancel', 'ASPxReportsStringId.SearchDialog_Cancel'), onClick: function () { popup.cancel(); } } }
                    ];
                }
                SaveReportDialogModelBase.prototype.onShow = function (tab) {
                    this.saveText(Designer.getLocalization('"{0}" has been changed. Do you want to save changes ?', 'ReportStringId.UD_Msg_MdiReportChanged').replace("{0}", tab.displayName()));
                };
                SaveReportDialogModelBase.prototype.getUrl = function () {
                    return this.reportUrl();
                };
                SaveReportDialogModelBase.prototype.setUrl = function (url) {
                    this.reportUrl(url);
                };
                return SaveReportDialogModelBase;
            })();
            Report.SaveReportDialogModelBase = SaveReportDialogModelBase;
            var SaveAsReportDialogModelBase = (function () {
                function SaveAsReportDialogModelBase(popup, urls) {
                    this.noDataText = DevExpress.Analytics.Localization.noDataText();
                    this.reportNamePlaceholder = function () { return Designer.getLocalization("Enter a report name to save...", "ASPxReportsStringId.ReportDesigner_SaveAs_NamePlaceholder"); };
                    this.urls = urls;
                    this.reportUrl = ko.observable("");
                    this.reportName = ko.observable("");
                    var self = this;
                    this.popupButtons = [
                        {
                            toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                text: Designer.getLocalization('Save', 'ASPxReportsStringId.ReportDesigner_MenuButtons_Save'), disabled: ko.computed(function () { return !self.reportName(); }), onClick: function () {
                                    popup.save(self.reportName());
                                }
                            }
                        },
                        { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: Designer.getLocalization('Cancel', 'ASPxReportsStringId.SearchDialog_Cancel'), onClick: function () { popup.cancel(); } } }
                    ];
                }
                SaveAsReportDialogModelBase.prototype.onShow = function (tab) {
                    var _this = this;
                    var self = this;
                    Report.ReportStorageWeb.getUrls().done(function (result) { self.urls(result); });
                    var displayName = this.urls().filter(function (item) { return item["Key"] === _this.reportUrl(); })[0];
                    this.reportName(displayName && displayName["Value"] || tab.displayName());
                };
                SaveAsReportDialogModelBase.prototype.getUrl = function () {
                    return this.reportUrl();
                };
                SaveAsReportDialogModelBase.prototype.setUrl = function (url) {
                    this.reportUrl(url);
                };
                return SaveAsReportDialogModelBase;
            })();
            Report.SaveAsReportDialogModelBase = SaveAsReportDialogModelBase;
            var OpenReportDialog = (function (_super) {
                __extends(OpenReportDialog, _super);
                function OpenReportDialog(subreports, navigateByReports, callbacks) {
                    _super.call(this);
                    this.title = "Open Report";
                    this.onOpening = function (e) { callbacks.reportOpening && callbacks.reportOpening(e); };
                    this.onOpened = function (e) { callbacks.reportOpened && callbacks.reportOpened(e); };
                    this.navigateByReports = navigateByReports;
                    this.customize("dxrd-openreport-dialog-content", new OpenReportDialogModelBase(this, subreports));
                    this.title = Designer.getLocalization("Open Report", 'ReportStringId.RibbonXRDesign_OpenFile_STipTitle');
                }
                OpenReportDialog.prototype.open = function (url) {
                    var self = this;
                    var args = { url: url, cancel: false };
                    self.onOpening(args);
                    if (args.cancel)
                        return;
                    Report.ReportStorageWeb.getReportByUrl(url).done(function (result) {
                        self.navigateByReports.addTab(result, ko.observable(url));
                        self.visible(false);
                    });
                };
                return OpenReportDialog;
            })(ReportDialogBase);
            Report.OpenReportDialog = OpenReportDialog;
            var SaveReportDialogLight = (function (_super) {
                __extends(SaveReportDialogLight, _super);
                function SaveReportDialogLight(saveReportDialog, callbacks) {
                    _super.call(this);
                    this.title = "Save Report";
                    this.saveReportDialog = saveReportDialog;
                    this.onSaving = function (e) { callbacks.reportSaving && callbacks.reportSaving(e); };
                    this.onSaved = function (e) { callbacks.reportSaved && callbacks.reportSaved(e); };
                    this.width('auto');
                    this.height(260);
                    this.customize("dxrd-savereport-dialog-content-light", new SaveReportDialogModelBase(this));
                    this.title = Designer.getLocalization("Save Report", 'ReportStringId.RibbonXRDesign_SaveFile_STipTitle');
                }
                SaveReportDialogLight.prototype.save = function (url) {
                    var self = this;
                    if (Report.reportStorageWebIsRegister) {
                        if (url) {
                            var args = { report: self.tab().context().report, url: url, cancel: false };
                            self.onSaving(args);
                            if (args.cancel) {
                                self.tab().close && self.tab().close.reject();
                                return;
                            }
                            Report.ReportStorageWeb.setData(self.tab().context().report.serialize(), url)
                                .done(function (jsonResult) {
                                self.onSaved({ report: self.tab().context().report, url: url });
                                self.tab().undoEngine.clearHistory();
                                self.tab().close.resolve();
                                self.visible(false);
                            });
                        }
                        else {
                            self.saveReportDialog.show(self.tab());
                            self.saveReportDialog.closeAfterSave(true);
                            self.visible(false);
                        }
                    }
                    else {
                        self.tab().context().report.save();
                        self.tab().close && self.tab().close.resolve();
                    }
                };
                SaveReportDialogLight.prototype.notSave = function () {
                    this.tab().close.resolve();
                    this.visible(false);
                };
                SaveReportDialogLight.prototype.cancel = function () {
                    this.tab().close && this.tab().close.reject();
                    _super.prototype.cancel.call(this);
                };
                return SaveReportDialogLight;
            })(ReportDialogBase);
            Report.SaveReportDialogLight = SaveReportDialogLight;
            var SaveReportDialog = (function (_super) {
                __extends(SaveReportDialog, _super);
                function SaveReportDialog(subreports, callbacks) {
                    _super.call(this);
                    this.closeAfterSave = ko.observable(false);
                    this.title = "Save Report";
                    this.onSaving = function (e) { callbacks.reportSaving && callbacks.reportSaving(e); };
                    this.onSaved = function (e) { callbacks.reportSaved && callbacks.reportSaved(e); };
                    this.template("dxrd-savereport-dialog-content");
                    this.customize("dxrd-savereport-dialog-content", new SaveAsReportDialogModelBase(this, subreports));
                    this.title = Designer.getLocalization("Save Report", 'ReportStringId.RibbonXRDesign_SaveFile_STipTitle');
                }
                SaveReportDialog.prototype.show = function (tab) {
                    this.closeAfterSave(false);
                    _super.prototype.show.call(this, tab);
                };
                SaveReportDialog.prototype.save = function (url) {
                    var self = this;
                    if (Report.reportStorageWebIsRegister) {
                        var data = self.tab().context().report.serialize();
                        var args = { report: self.tab().context().report, url: url, cancel: false };
                        self.onSaving(args);
                        if (args.cancel) {
                            self.tab().close && self.tab().close.reject();
                            this.visible(false);
                            return;
                        }
                        Report.ReportStorageWeb.setNewData(data, url)
                            .done(function (result) {
                            self.onSaved({ report: self.tab().context().report, url: result });
                            var url = result;
                            self.tab().context().url(result);
                            self.tab().isDirty(false);
                            DevExpress.Analytics.Utils.ShowMessage(DevExpress.Analytics.getLocalization("The report has been successfully saved.", "ASPxReportsStringId.ReportDesigner_SaveReport_Message_OK"), Designer.NotifyType.success);
                            if (self.closeAfterSave()) {
                                self.tab().close.resolve();
                            }
                            Report.ReportStorageWeb.getUrls().done(function (result) { self.model()["urls"] && self.model()["urls"](result); });
                        }).always(function () { self.visible(false); });
                    }
                    else {
                        self.tab().context().report.save();
                        if (self.closeAfterSave()) {
                            self.tab().close.resolve();
                        }
                        else {
                            self.tab().close && self.tab().close.reject();
                        }
                        this.visible(false);
                    }
                };
                return SaveReportDialog;
            })(ReportDialogBase);
            Report.SaveReportDialog = SaveReportDialog;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            Report.eventArgsTypes = {
                "EvaluateBinding": "DevExpress.XtraReports.UI.BindingEventArgs",
                "AfterPrint": "System.EventArgs",
                "BeforePrint": "System.Drawing.Printing.PrintEventArgs",
                "PrintOnPage": "DevExpress.XtraReports.UI.PrintOnPageEventArgs",
                "Draw": "DevExpress.XtraReports.UI.DrawEventArgs",
                "HtmlItemCreated": "DevExpress.XtraReports.UI.HtmlEventArgs",
                "LocationChanged": "DevExpress.XtraReports.UI.ChangeEventArgs",
                "ParentChanged": "DevExpress.XtraReports.UI.ChangeEventArgs",
                "PreviewClick": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "PreviewDoubleClick": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "PreviewMouseDown": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "PreviewMouseMove": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "PreviewMouseUp": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                "SizeChanged": "DevExpress.XtraReports.UI.ChangeEventArgs",
                "TextChanged": "System.EventArgs",
                "SummaryCalculated": "DevExpress.XtraReports.UI.TextFormatEventArgs",
                "SummaryGetResult": "DevExpress.XtraReports.UI.SummaryGetResultEventArgs",
                "SummaryReset": "System.EventArgs",
                "SummaryRowChanged": "System.EventArgs",
                "BandLevelChanged": "System.EventArgs",
                "SortingSummaryGetResult": "DevExpress.XtraReports.UI.GroupSortingSummaryGetResultEventArgs",
                "SortingSummaryReset": "System.EventArgs",
                "SortingSummaryRowChanged": "DevExpress.XtraReports.UI.GroupSortingSummaryRowChangedEventArgs",
                "DataSourceDemanded": "System.EventArgs",
                "BandHeightChanged": "DevExpress.XtraReports.UI.BandEventArgs",
                "DataSourceRowChanged": "DevExpress.XtraReports.UI.DataSourceRowEventArgs",
                "FillEmptySpace": "DevExpress.XtraReports.UI.BandEventArgs",
                "PrintProgress": "DevExpress.XtraPrinting.PrintProgressEventArgs",
                "ParametersRequestBeforeShow": "DevExpress.XtraReports.Parameters.ParametersRequestEventArgs",
                "ParametersRequestValueChanged": "DevExpress.XtraReports.Parameters.ParametersRequestValueChangedEventArgs",
                "ParametersRequestSubmit": "DevExpress.XtraReports.Parameters.ParametersRequestEventArgs",
                "GetValue": "DevExpress.XtraReports.UI.GetValueEventArgs",
                "FieldValueDisplayText": "DevExpress.XtraReports.UI.PivotGrid.PivotFieldDisplayTextEventArgs",
                "PrintCell": "DevExpress.XtraReports.UI.PivotGrid.CustomExportCellEventArgs",
                "PrintFieldValue": "DevExpress.XtraReports.UI.PivotGrid.CustomExportFieldValueEventArgs",
                "PrintHeader": "DevExpress.XtraReports.UI.PivotGrid.CustomExportHeaderEventArgs",
                "CustomSummary": "DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomSummaryEventArgs",
                "CustomGroupInterval": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomGroupIntervalEventArgs",
                "CustomChartDataSourceData": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomChartDataSourceDataEventArgs",
                "CustomChartDataSourceRows": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomChartDataSourceRowsEventArgs",
                "CustomCellDisplayText": "DevExpress.XtraReports.UI.PivotGrid.PivotCellDisplayTextEventArgs",
                "CustomCellValue": "DevExpress.XtraReports.UI.PivotGrid.PivotCellValueEventArgs",
                "CustomColumnWidth": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomColumnWidthEventArgs",
                "CustomFieldSort": "DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomFieldSortEventArgs",
                "CustomServerModeSort": "DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomServerModeSortEventArgs",
                "CustomFieldValueCells": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomFieldValueCellsEventArgs",
                "CustomRowHeight": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomRowHeightEventArgs",
                "CustomUnboundFieldData": "DevExpress.XtraReports.UI.PivotGrid.CustomFieldDataEventArgs",
                "PrefilterCriteriaChanged": "System.EventArgs",
                "CustomDrawSeries": "DevExpress.XtraCharts.CustomDrawSeriesEventArgs",
                "CustomDrawSeriesPoint": "DevExpress.XtraCharts.CustomDrawSeriesPointEventArgs",
                "CustomDrawCrosshair": "DevExpress.XtraCharts.CustomDrawCrosshairEventArgs",
                "CustomDrawAxisLabel": "DevExpress.XtraCharts.CustomDrawAxisLabelEventArgs",
                "CustomPaint": "DevExpress.XtraCharts.CustomPaintEventArgs",
                "BoundDataChanged": "System.EventArgs",
                "PieSeriesPointExploded": "DevExpress.XtraCharts.PieSeriesPointExplodedEventArgs",
                "AxisScaleChanged": "DevExpress.XtraCharts.AxisScaleChangedEventArgs",
                "AxisWholeRangeChanged": "DevExpress.XtraCharts.AxisRangeChangedEventArgs",
                "AxisVisualRangeChanged": "DevExpress.XtraCharts.AxisRangeChangedEventArgs",
                "SmallChartTextShowing": "System.EventArgs"
            };
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Utils;
            (function (Utils) {
                function guid() {
                    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                        return v.toString(16);
                    });
                }
                Utils.guid = guid;
                function findFirstParentWithPropertyName(control, propertyName) {
                    var parent = control.parentModel && control.parentModel();
                    if (parent)
                        return parent[propertyName] ? parent : findFirstParentWithPropertyName(parent, propertyName);
                    else
                        return control.root;
                }
                Utils.findFirstParentWithPropertyName = findFirstParentWithPropertyName;
                function addVariablesToExpressionEditor(categories, customizeItems) {
                    if (customizeItems === void 0) { customizeItems = function (items) { return items; }; }
                    var items = customizeItems([
                        { text: "DataSource.CurrentRowIndex", val: "[DataSource.CurrentRowIndex]", descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_CurrentRowIndex_Description' },
                        { text: "DataSource.RowCount", val: "[DataSource.RowCount]", descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_RowCount_Description' }
                    ]);
                    categories.push(DevExpress.Analytics.Widgets.createExpressionEditorCollectionToolOptions(items, "Variables", "ReportStringId.ExpressionEditor_ItemInfo_Variables"));
                }
                Utils.addVariablesToExpressionEditor = addVariablesToExpressionEditor;
                function createIDataMemberInfoByName(name, specifics) {
                    if (specifics === void 0) { specifics = "list"; }
                    return {
                        displayName: name,
                        name: name,
                        specifics: specifics,
                        isList: specifics === "list" ? true : false
                    };
                }
                Utils.createIDataMemberInfoByName = createIDataMemberInfoByName;
            })(Utils = Report.Utils || (Report.Utils = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var dxImageSourceEditor = (function (_super) {
                __extends(dxImageSourceEditor, _super);
                function dxImageSourceEditor(element, options) {
                    _super.call(this, element, options);
                }
                dxImageSourceEditor.prototype._handleFiles = function (filesHolder) {
                    var _this = this;
                    var files = filesHolder.files;
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];
                        if (this.option("type") === "img") {
                            var imageType = /image.*/;
                            if (!file.type.match(imageType)) {
                                continue;
                            }
                        }
                        var fr = new FileReader();
                        fr.onload = function (args) {
                            var format = _this._filesinput[0].files[0].name.split('.').pop();
                            var encodedContent = fr.result.replace(/^data:[^,]+,/, '');
                            _this.option("value", new DevExpress.Report.ImageSource(format.toLowerCase() === 'svg' ? 'svg' : 'img', encodedContent));
                            _this._filesinput.val("");
                        };
                        fr.readAsDataURL(file);
                    }
                };
                return dxImageSourceEditor;
            })(DevExpress.Analytics.Widgets.dxFileImagePicker);
            Report.dxImageSourceEditor = dxImageSourceEditor;
            DevExpress.registerComponent('dxImageSourceEditor', dxImageSourceEditor);
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var ReportExplorerModel = (function (_super) {
                __extends(ReportExplorerModel, _super);
                function ReportExplorerModel(reportModel, editableObject, clickHandler, dragDropHandler, selection) {
                    var _this = this;
                    _super.call(this);
                    this._disposables.push(this.itemsProvider = new Designer.ObjectExplorerProvider([{ model: reportModel, name: "Report", displayName: Designer.getLocalization("Report", 'ASPxReportsStringId.DocumentViewer_RibbonReportGroupText'), className: "master_report", data: reportModel },
                        { model: ko.pureComputed(function () { return reportModel() && reportModel().styles(); }), name: "Styles", displayName: Designer.getLocalization("Styles", 'DevExpress.XtraReports.UI.XRPivotGrid.Styles'), className: "styles" },
                        { model: ko.pureComputed(function () { return reportModel() && reportModel().formattingRuleSheet(); }), name: "Formatting Rules", displayName: Designer.getLocalization("Formatting Rules", 'DevExpress.XtraReports.UI.XRControl.FormattingRules'), className: "formattingrules" },
                        { model: ko.pureComputed(function () { return reportModel() && reportModel().crossBandControls(); }), name: "Crossband Controls", displayName: Designer.getLocalization("Cross-Band Controls", 'ASPxReportsStringId.ReportDesigner_CrossBandControls'), className: "xrcrossbandbox" },
                        { model: ko.pureComputed(function () { return reportModel() && reportModel().components(); }), name: "Components", displayName: Designer.getLocalization("Components", 'ReportStringId.UD_Title_ReportExplorer_Components'), className: "components" }
                    ], ["bands", "controls", "rows", "cells"], editableObject, function (model) {
                        var path = ReportExplorerModel.getPathByMember(model);
                        if (!path) {
                            if (model === (reportModel() && reportModel().styles())) {
                                path = "Styles";
                            }
                            else if (model === (reportModel() && reportModel().formattingRuleSheet())) {
                                path = "Formatting Rules";
                            }
                            else if (model === (reportModel() && reportModel().components())) {
                                path = "Components";
                            }
                            else if (model instanceof Report.StyleModel) {
                                path = _this._getPathNonControl(model, "Styles", "styles", editableObject, reportModel);
                            }
                            else if (model instanceof Report.FormattingRule) {
                                path = _this._getPathNonControl(model, "Formatting Rules", "formattingRuleSheet", editableObject, reportModel);
                            }
                            else if (model instanceof Report.ComponentsModel) {
                                path = _this._getPathNonControl(model, "Components", "components", editableObject, reportModel);
                            }
                            else if (model === (reportModel() && reportModel().crossBandControls())) {
                                path = "Crossband Controls";
                            }
                        }
                        return path;
                    }));
                    var exprPropertyNames = ["bands", "controls", "rows", "cells", "Report", "Styles", "Crossband Controls", "Components"];
                    var bindingPropertyNames = [].concat(exprPropertyNames, "Formatting Rules");
                    this._disposables.push(this.treeListController = new Designer.ObjectStructureTreeListController(exprPropertyNames));
                    this.treeListController.itemsFilter = function (item) {
                        var realPropertyName = item.name.split('.')[0];
                        var propertyNames = reportModel() && reportModel()._dataBindingMode() !== Report.DataBindingMode.Bindings ? exprPropertyNames : bindingPropertyNames;
                        return propertyNames ? propertyNames.indexOf(realPropertyName) !== -1 || $.isNumeric(realPropertyName) : true;
                    };
                    this.treeListController.getActions = function (item) {
                        if (item.data && item.data.name !== "Crossband Controls" && item.data.name !== "Components") {
                            if (item.data.name !== "Styles" && item.data.name !== "Formatting Rules") {
                                return _this._createActionsForOneElement(clickHandler, selection, editableObject, reportModel, item);
                            }
                            else {
                                return _this._createActionsForArray(item, reportModel);
                            }
                        }
                    };
                    this.treeListController.dragDropHandler = dragDropHandler;
                }
                ReportExplorerModel.getPathByMember = function (model) {
                    if (model.parentModel && model.parentModel()) {
                        if (model instanceof Report.BandViewModel) {
                            return ReportExplorerModel.getPathByMember(model.parentModel()) + ".bands." + model.parentModel().bands().indexOf(model);
                        }
                        else if (model instanceof Report.CrossBandControlViewModel) {
                            return "Crossband Controls.Crossband Controls." + model.parentModel().crossBandControls().indexOf(model);
                        }
                        else if (model instanceof Report.TableCellViewModel) {
                            return ReportExplorerModel.getPathByMember(model.parentModel()) + ".cells." + model.parentModel().cells().indexOf(model);
                        }
                        else if (model instanceof Report.TableRowViewModel) {
                            return ReportExplorerModel.getPathByMember(model.parentModel()) + ".rows." + model.parentModel().rows().indexOf(model);
                        }
                        else if (model instanceof Report.ReportElementViewModel) {
                            return ReportExplorerModel.getPathByMember(model.parentModel()) + ".controls." + model.parentModel().controls().indexOf(model);
                        }
                    }
                    else if (model instanceof Report.ReportViewModel) {
                        return "Report";
                    }
                    return null;
                };
                ReportExplorerModel.prototype._createActionsForOneElement = function (clickHandler, selection, editableObject, reportModel, item) {
                    var actions = [{
                            text: "Properties",
                            displayText: function () { return Designer.getLocalization("Properties", "ReportStringId.Cmd_Properties"); },
                            imageClassName: "dx-image-edit",
                            imageTemplateName: "dxrd-svg-operations-edit",
                            clickAction: function () {
                                clickHandler();
                            }
                        }];
                    var element = item.data && item.data.data;
                    var isDeleteDeny = element && ((element.getMetaData && element.getMetaData().isDeleteDeny) || false);
                    var isLocked = element && ((element.lockedInUserDesigner && element.lockedInUserDesigner()) || false);
                    if (!isDeleteDeny && !isLocked) {
                        actions.push({
                            text: "Delete",
                            displayText: function () { return Designer.getLocalization("Delete", "ReportStringId.Cmd_Delete"); },
                            imageClassName: "dxrd-image-recycle-bin",
                            imageTemplateName: "dxrd-svg-operations-recycle_bin",
                            clickAction: function () {
                                var selectedObject = ko.unwrap(editableObject);
                                if (selectedObject instanceof Report.StyleModel) {
                                    reportModel().styles.remove(selectedObject);
                                }
                                else if (selectedObject instanceof Report.FormattingRule) {
                                    reportModel().formattingRuleSheet.remove(selectedObject);
                                }
                                else if (selectedObject instanceof Report.ComponentsModel) {
                                    var dsHelper = reportModel().dsHelperProvider();
                                    var removedDs = dsHelper.findDataSourceInfo(selectedObject.data);
                                    removedDs && dsHelper.removeDataSource(removedDs);
                                }
                                else {
                                    Designer.deleteSelection(selection);
                                }
                            }
                        });
                    }
                    return actions;
                };
                ReportExplorerModel.prototype._createActionsForArray = function (item, reportModel) {
                    if (item.data.name === "Styles" || item.data.name === "Formatting Rules") {
                        return [{
                                text: "Add New " + (item.data.name === "Styles" ? "Style" : "Formatting Rule"),
                                imageClassName: "dx-image-add",
                                imageTemplateName: "dxrd-svg-operations-add",
                                clickAction: function () {
                                    if (item.data.name === "Styles") {
                                        var newStyleName = Designer.getUniqueNameForNamedObjectsArray(reportModel().styles(), "xrControlStyle");
                                        reportModel().styles.push(new Report.StyleModel({ "@Name": newStyleName }));
                                    }
                                    else {
                                        reportModel().formattingRuleSheet.push(Report.FormattingRule.createNew(reportModel()));
                                    }
                                }
                            }];
                    }
                    return [];
                };
                ReportExplorerModel.prototype._getPathNonControl = function (model, rootName, arrayName, editableObject, reportModel) {
                    var array = reportModel() && reportModel()[arrayName]();
                    var index = array && array.indexOf(model) || 0;
                    if (index < 0) {
                        editableObject(array[0] || reportModel());
                        return array.length > 0 ? [rootName, rootName, 0].join(".") : "Report";
                    }
                    return [rootName, rootName, index].join(".");
                };
                return ReportExplorerModel;
            })(DevExpress.Analytics.Utils.Disposable);
            Report.ReportExplorerModel = ReportExplorerModel;
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var ColorScheme = (function () {
                    function ColorScheme(name, localizationId, baseColor) {
                        this.name = name;
                        this.localizationId = localizationId;
                        this.baseColor = baseColor;
                        this.color = DevExpress.Analytics.Utils.colorFromString(baseColor)();
                        this.displayName = DevExpress.Analytics.getLocalization(this.name, this.localizationId);
                        this.selected = ko.observable(false);
                    }
                    return ColorScheme;
                })();
                Wizard.ColorScheme = ColorScheme;
                var CustomColorScheme = (function (_super) {
                    __extends(CustomColorScheme, _super);
                    function CustomColorScheme(name, localizationId, baseColor) {
                        _super.call(this, name, localizationId, baseColor);
                        this.color = DevExpress.Analytics.Utils.colorFromString(baseColor);
                        this.editorColor = ko.observable(this.color());
                        this.popoverVisible = ko.observable(false);
                    }
                    CustomColorScheme.prototype.applyColor = function () {
                        this.color(this.editorColor());
                        this.baseColor = DevExpress.Analytics.Utils.colorToString(this.editorColor());
                        this.popoverVisible(false);
                    };
                    CustomColorScheme.prototype.resetColor = function () {
                        this.editorColor(this.color());
                        this.popoverVisible(false);
                    };
                    return CustomColorScheme;
                })(ColorScheme);
                Wizard.CustomColorScheme = CustomColorScheme;
                var ColorSchemePage = (function (_super) {
                    __extends(ColorSchemePage, _super);
                    function ColorSchemePage(wizard) {
                        _super.call(this, wizard);
                        this.template = "dxrd-page-colorScheme";
                        this.description = DevExpress.Analytics.getLocalization("Choose a report color scheme.", "ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme_Description");
                        this.customColorScheme = new CustomColorScheme("Custom", "ReportStringId.Wizard_ReportColorScheme_Custom", "255, 183, 227, 228");
                        this.lookupData = {
                            scheme: [
                                new ColorScheme("Grey", "ReportStringId.Wizard_ReportColorScheme_Grey", "255, 75,75,75"),
                                new ColorScheme("ColdGrey", "ReportStringId.Wizard_ReportColorScheme_ColdGrey", "255, 93,98,110"),
                                new ColorScheme("Cream", "ReportStringId.Wizard_ReportColorScheme_Cream", "255, 227,202,166"),
                                new ColorScheme("JeansBlue", "ReportStringId.Wizard_ReportColorScheme_JeansBlue", "255, 69,94,178"),
                                new ColorScheme("Blue", "ReportStringId.Wizard_ReportColorScheme_Blue", "255, 23,104,196"),
                                new ColorScheme("Yellow", "ReportStringId.Wizard_ReportColorScheme_Yellow", "255, 255,209,107"),
                                new ColorScheme("LightGreen", "ReportStringId.Wizard_ReportColorScheme_LightGreen", "255, 181,211,142"),
                                new ColorScheme("Mint", "ReportStringId.Wizard_ReportColorScheme_Mint", "255, 46,148,130"),
                                new ColorScheme("LightBlue", "ReportStringId.Wizard_ReportColorScheme_LightBlue", "255, 153,212,246"),
                                new ColorScheme("Azure", "ReportStringId.Wizard_ReportColorScheme_Azure", "255, 57,159,228"),
                                new ColorScheme("Coral", "ReportStringId.Wizard_ReportColorScheme_Coral", "255, 250,128,114"),
                                new ColorScheme("Red", "ReportStringId.Wizard_ReportColorScheme_Red", "255, 196,66,79"),
                                new ColorScheme("Raspberry", "ReportStringId.Wizard_ReportColorScheme_Raspberry", "255, 152,51,91"),
                                new ColorScheme("Violet", "ReportStringId.Wizard_ReportColorScheme_Violet", "255, 113,69,168"),
                                this.customColorScheme
                            ]
                        };
                        this.scheme = ko.observable(null);
                    }
                    ColorSchemePage.prototype.applyScheme = function (data) {
                        this.scheme() && this.scheme().selected(false);
                        data.selected(true);
                        this.scheme(data);
                    };
                    ColorSchemePage.prototype._begin = function (data) {
                        this.scheme(data.colorScheme);
                    };
                    ColorSchemePage.prototype.commit = function (data) {
                        data.colorScheme = this.scheme();
                    };
                    return ColorSchemePage;
                })(Wizard.WizardPage);
                Wizard.ColorSchemePage = ColorSchemePage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var CustomizeLabelPage = (function (_super) {
                    __extends(CustomizeLabelPage, _super);
                    function CustomizeLabelPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.wizard = wizard;
                        this._id = ko.observable(0);
                        this._labelWidth = ko.observable(0);
                        this._labelHeight = ko.observable(0);
                        this._horizontalPitch = ko.observable(0);
                        this._verticalPitch = ko.observable(0);
                        this._topMargin = ko.observable(0);
                        this._leftMargin = ko.observable(0);
                        this._rightMargin = ko.observable(0);
                        this._bottomMargin = ko.observable(0);
                        this._rowsCount = ko.pureComputed(function () {
                            return _this._getLabelsCount(_this._pageHeight(), _this._verticalPitch(), _this._labelHeight(), _this._topMargin() + _this._bottomMargin());
                        });
                        this._columnsCount = ko.pureComputed(function () {
                            return _this._getLabelsCount(_this._pageWidth(), _this._horizontalPitch(), _this._labelWidth(), _this._leftMargin() + _this._rightMargin());
                        });
                        this._pageHeight = ko.pureComputed(function () {
                            if (_this.selectedPaperSize().unit === _this.unit())
                                return _this.selectedPaperSize().height;
                            if (_this.selectedPaperSize().unit === Report.GraphicsUnit.Millimeter)
                                return _this.selectedPaperSize().height * CustomizeLabelPage.CONVERSION_COEEFICIENT;
                            return _this.selectedPaperSize().height / CustomizeLabelPage.CONVERSION_COEEFICIENT;
                        });
                        this._pageWidth = ko.pureComputed(function () {
                            if (_this.selectedPaperSize().unit === _this.unit())
                                return _this.selectedPaperSize().width;
                            if (_this.selectedPaperSize().unit === Report.GraphicsUnit.Millimeter)
                                return _this.selectedPaperSize().width * CustomizeLabelPage.CONVERSION_COEEFICIENT;
                            return _this.selectedPaperSize().width / CustomizeLabelPage.CONVERSION_COEEFICIENT;
                        });
                        this.template = "dxrd-page-customizeLabel";
                        this.description = Designer.getLocalization("You can adjust the label's parameters here if required.", "ReportBoxDesignerStringId.Wizard_LabelOptions_Description");
                        this.paperKinds = function () { return (_this.labelData.paperKinds); };
                        this.selectedPaperSize = ko.observable({ "id": 1, "enumId": 9, "name": "A4", "width": 210.0, "height": 297.0, "unit": 6, "isRollPaper": false });
                        this.unit = ko.observable();
                        this.stepUnit = ko.pureComputed(function () { return _this.unit() === Report.GraphicsUnit.Inch ? 0.01 : 0.1; });
                        this.labelWidth = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._labelWidth())); },
                            write: function (value) { return _this._labelWidth(value); }
                        });
                        this.labelHeight = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._labelHeight())); },
                            write: function (value) { return _this._labelHeight(value); }
                        });
                        this.horizontalPitch = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._horizontalPitch())); },
                            write: function (value) { return _this._horizontalPitch(value); }
                        });
                        this.verticalPitch = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._verticalPitch())); },
                            write: function (value) { return _this._verticalPitch(value); }
                        });
                        this.topMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._topMargin())); },
                            write: function (value) { return _this._topMargin(value); }
                        });
                        this.leftMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._leftMargin())); },
                            write: function (value) { return _this._leftMargin(value); }
                        });
                        this.rightMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._rightMargin())); },
                            write: function (value) { return _this._rightMargin(value); }
                        });
                        this.bottomMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._bottomMargin())); },
                            write: function (value) { return _this._bottomMargin(value); }
                        });
                        this.labelsCountText = ko.pureComputed(function () {
                            return _this._rowsCount() * _this._columnsCount() + " " + Designer.getLocalization("labels on the page", "ASPxReportsStringId.ReportDesigner_Wizard_CustomizeLabelPage_LabelCountText") + ", " + _this._columnsCount() + " x " + _this._rowsCount();
                        });
                        this.pageSizeText = ko.pureComputed(function () {
                            return CustomizeLabelPage.getPageSizeText(_this._pageWidth(), _this._pageHeight(), _this.unit());
                        });
                        this.units = [
                            { text: Designer.getLocalization("Inch", "ASPxReportsStringId.ReportDesigner_Wizard_Inch"), value: Report.GraphicsUnit.Inch },
                            { text: Designer.getLocalization("Millimeter", "ASPxReportsStringId.ReportDesigner_Wizard_Millimeter"), value: Report.GraphicsUnit.Millimeter }
                        ];
                        this.actionNext.isDisabled(true);
                        this.unit.subscribe(function (newUnit) {
                            if (newUnit === Report.GraphicsUnit.Inch) {
                                _this._labelWidth(_this._labelWidth() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._labelHeight(_this._labelHeight() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._horizontalPitch(_this._horizontalPitch() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._verticalPitch(_this._verticalPitch() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._topMargin(_this._topMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._leftMargin(_this._leftMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._rightMargin(_this._rightMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._bottomMargin(_this._bottomMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                            }
                            else if (newUnit === Report.GraphicsUnit.Millimeter) {
                                _this._labelWidth(_this._labelWidth() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._labelHeight(_this._labelHeight() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._horizontalPitch(_this._horizontalPitch() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._verticalPitch(_this._verticalPitch() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._topMargin(_this._topMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._leftMargin(_this._leftMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._rightMargin(_this._rightMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                _this._bottomMargin(_this._bottomMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                            }
                        });
                    }
                    CustomizeLabelPage.prototype._getFormattedValueInUnits = function (value) {
                        return getFormattedValueInUnits(value, this.unit());
                    };
                    CustomizeLabelPage.prototype._getOtherMarginValue = function (paperDimentionInLabelUnit, labelPitch, labelWidth, margin, labelsCount) {
                        return this._getFormattedValueInUnits(paperDimentionInLabelUnit - (labelsCount * labelPitch) - margin + labelPitch - labelWidth);
                    };
                    CustomizeLabelPage.prototype._getLabelsCount = function (paperDimentionInLabelUnit, labelPitch, labelWidth, margin) {
                        return Math.floor((paperDimentionInLabelUnit - margin + (labelPitch - labelWidth)) / labelPitch);
                    };
                    CustomizeLabelPage.getPageSizeText = function (width, height, unit) {
                        return getFormattedValueInUnits(width, unit) + " x " + getFormattedValueInUnits(height, unit) + (unit === Report.GraphicsUnit.Inch ? " in" : " mm");
                    };
                    CustomizeLabelPage.prototype._begin = function (data) {
                        var _this = this;
                        this.isVisible = data.reportType === Wizard.ReportType.Label;
                        if (!this.isVisible)
                            return null;
                        return this.wizard.labelWizardData().done(function (labelData) {
                            _this.labelData = labelData;
                            _this._id(data.labelDetails.id);
                            _this.unit(data.labelDetails.unit);
                            _this.selectedPaperSize(Designer.findFirstItemMatchesCondition(_this.paperKinds(), function (item) { return item.id === data.labelDetails.paperKindId; }));
                            _this._labelWidth(data.labelDetails.width);
                            _this._labelHeight(data.labelDetails.height);
                            _this._horizontalPitch(data.labelDetails.hPitch);
                            _this._verticalPitch(data.labelDetails.vPitch);
                            _this._topMargin(data.labelDetails.topMargin);
                            _this._leftMargin(data.labelDetails.leftMargin);
                            _this._rightMargin(data.labelDetails.rightMargin);
                            _this._bottomMargin(data.labelDetails.bottomMargin);
                        });
                    };
                    CustomizeLabelPage.prototype.commit = function (data) {
                        if (!data.labelDetails)
                            return;
                        data.labelDetails.width = this._labelWidth();
                        data.labelDetails.height = this._labelHeight();
                        data.labelDetails.hPitch = this._horizontalPitch();
                        data.labelDetails.vPitch = this._verticalPitch();
                        data.labelDetails.topMargin = this._topMargin();
                        data.labelDetails.leftMargin = this._leftMargin();
                        data.labelDetails.rightMargin = this._rightMargin();
                        data.labelDetails.bottomMargin = this._bottomMargin();
                        data.labelDetails.unit = this.unit();
                        data.labelDetails.paperKindId = this.selectedPaperSize().id;
                    };
                    CustomizeLabelPage.CONVERSION_COEEFICIENT = 0.0393701;
                    return CustomizeLabelPage;
                })(Wizard.WizardPage);
                Wizard.CustomizeLabelPage = CustomizeLabelPage;
                function getFormattedValueInUnits(value, unit) {
                    var format = unit === Report.GraphicsUnit.Inch ? 2 : 1;
                    return value.toFixed(format);
                }
                Wizard.getFormattedValueInUnits = getFormattedValueInUnits;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var MasterDetailAddGroupingLevel = (function (_super) {
                    __extends(MasterDetailAddGroupingLevel, _super);
                    function MasterDetailAddGroupingLevel(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this._availableColumns = {};
                        this._groupingLevels = {};
                        this._masterDetailGroups = {};
                        this.template = "dxrd-page-masterdetail-groups";
                        this.description = Designer.getLocalization("Group data in the selected reports. You can specify one or more fields for each group.", "ReportBoxDesignerStringId.Wizard_MasterDetailAddGroupingLevel_Description");
                        this.addNewGroup = function () {
                            if (_this.isCreateGroupEnabled()) {
                                _this.currentGroups().add({ fields: ko.observableArray([_this.currentFields().activeItem]) });
                                _this.currentFields().removeActiveItem();
                                _this._isModelChanged = true;
                            }
                        };
                        this.appendFieldsToGroup = function () {
                            if (_this.isAppendToGroupEnabled()) {
                                _this.currentGroups().activeItem.fields.push(_this.currentFields().activeItem);
                                _this.currentFields().removeActiveItem();
                                _this._isModelChanged = true;
                            }
                        };
                        this.removeGroup = function () {
                            if (_this.isRemoveGroupEnabled()) {
                                _this.currentFields().addRange(_this.currentGroups().activeItem.fields());
                                _this.currentGroups().removeActiveItem();
                                _this._isModelChanged = true;
                            }
                        };
                        this.isCreateGroupEnabled = ko.pureComputed(function () {
                            return !!_this.currentFields().activeItem;
                        });
                        this.isAppendToGroupEnabled = ko.pureComputed(function () {
                            return _this.currentFields().activeItem && _this.currentGroups().activeItem && _this.currentGroups().activeItem.fields().length > 0;
                        });
                        this.isRemoveGroupEnabled = ko.pureComputed(function () {
                            return _this.currentGroups().activeItem && _this.currentGroups().activeItem.fields().length > 0;
                        });
                        this.moveUp = function () {
                            _this.currentGroups().moveUp();
                            _this._isModelChanged = true;
                        };
                        this.moveDown = function () {
                            _this.currentGroups().moveDown();
                            _this._isModelChanged = true;
                        };
                        this.isMoveUpEnabled = ko.pureComputed(function () {
                            return _this.currentGroups().isMoveUpEnabled();
                        });
                        this.isMoveDownEnabled = ko.pureComputed(function () {
                            return _this.currentGroups().isMoveDownEnabled();
                        });
                        this.fieldDblClick = function (field) {
                            _this.currentFields().activeItem = field;
                            _this.addNewGroup();
                        };
                        this.fieldClick = function (e) {
                            _this.currentFields().activeItem = e.itemData;
                        };
                        this.groupDblClick = function (group) {
                            _this.currentGroups().activeItem = group;
                            _this.removeGroup();
                        };
                        this.groupClick = function (e) {
                            _this.currentGroups().activeItem = e.itemData;
                        };
                        this.currentPath = ko.observable("");
                        this.currentFields = ko.observable(null);
                        this.currentGroups = ko.observable(null);
                        this.fieldCaption = Designer.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields");
                        this.groupCaption = Designer.getLocalization("Groups", "ASPxReportsStringId.ReportDesigner_Groups");
                        this.reportTree = ko.observableArray([]);
                        this.currentPath.subscribe(function (newPath) {
                            _this.currentGroups(_this._groupingLevels[newPath]);
                            _this.currentFields(_this._availableColumns[newPath]);
                        });
                    }
                    MasterDetailAddGroupingLevel.prototype._setData = function (queries) {
                        var _this = this;
                        queries.forEach(function (query) {
                            if (!_this._groupingLevels[query.path] || !_this._availableColumns[query.path]) {
                                _this._isModelChanged = true;
                                _this._availableColumns[query.path] = new Wizard.ListViewModel();
                                _this._groupingLevels[query.path] = new Wizard.ListViewModel();
                            }
                            if (!_this._masterDetailGroups[query.path]) {
                                _this._isModelChanged = true;
                                _this._masterDetailGroups[query.path] = [];
                            }
                            var fields = ko.observableArray(query.fields.map(function (value) { return value.displayName; }));
                            _this._groupingLevels[query.path].setItems(_this._masterDetailGroups[query.path].map(function (value) {
                                fields.removeAll(value);
                                return { fields: ko.observableArray(value) };
                            }));
                            _this._availableColumns[query.path].setItems(fields());
                        });
                    };
                    MasterDetailAddGroupingLevel.prototype._begin = function (data) {
                        this._isModelChanged = false;
                        this.reportTree(data.reportTree().map(function (item) { return $.extend(true, {}, item); }));
                        this._masterDetailGroups = $.extend(true, {}, data.masterDetailGroups);
                        var firstPath = this.reportTree()[0] && this.reportTree()[0].path;
                        if (firstPath) {
                            this.isVisible = true;
                            this._setData(this.reportTree());
                            this.currentPath(firstPath);
                            if (firstPath === this.currentPath.peek())
                                this.currentPath.notifySubscribers(firstPath);
                        }
                        else {
                            this.isVisible = false;
                        }
                    };
                    MasterDetailAddGroupingLevel.prototype.commit = function (data) {
                        var _this = this;
                        if (this.isVisible) {
                            if (this._isModelChanged) {
                                data.masterDetailGroups = {};
                                data.masterDetailSummaryOptionsColumns = {};
                                data.masterDetailSummariesInfo = {};
                                this.reportTree().forEach(function (query) {
                                    if (_this._groupingLevels[query.path].items.length > 0) {
                                        data.masterDetailGroups[query.path] = _this._groupingLevels[query.path].items.map(function (item) {
                                            return item.fields().map(function (displayName) { return Designer.getFirstItemByPropertyValue(query.fields, "displayName", displayName).name; });
                                        });
                                    }
                                    if (_this._availableColumns[query.path]) {
                                        var summaryColumns = [];
                                        data.masterDetailSummaryOptionsColumns[query.path] = ko.observableArray([]);
                                        _this._availableColumns[query.path].items.forEach(function (fieldName) {
                                            var field = Designer.getFirstItemByPropertyValue(query.fields, "displayName", fieldName);
                                            if (field.specifics && ["integer", "float", "date"].indexOf(field.specifics.toLowerCase()) > -1) {
                                                summaryColumns.push(field);
                                            }
                                        });
                                        summaryColumns.sort(function (a, b) { return a.name.localeCompare(b.name); });
                                        if (summaryColumns.length === 0)
                                            delete data.masterDetailSummaryOptionsColumns[query.path];
                                        else
                                            data.masterDetailSummaryOptionsColumns[query.path](summaryColumns);
                                    }
                                });
                            }
                        }
                    };
                    return MasterDetailAddGroupingLevel;
                })(Wizard.WizardPage);
                Wizard.MasterDetailAddGroupingLevel = MasterDetailAddGroupingLevel;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SummaryInfo = (function () {
                    function SummaryInfo() {
                        this.field = ko.observable(null);
                        this.selectedItems = ko.observableArray([]);
                        this.functionNames = ko.observableArray([]);
                        this.visible = ko.observable(true);
                        this.value = { value: this.functionNames, dataSource: DevExpress.Designer.Report.summaryFunctionValues, showDropDownButton: true, selectedItems: this.selectedItems };
                    }
                    SummaryInfo.prototype.getOptions = function (options) { return options; };
                    return SummaryInfo;
                })();
                Wizard.SummaryInfo = SummaryInfo;
                var MasterDetailChooseSummaryOptions = (function (_super) {
                    __extends(MasterDetailChooseSummaryOptions, _super);
                    function MasterDetailChooseSummaryOptions(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this._allColumns = {};
                        this._masterDetailColumns = {};
                        this.toggleIgnoreNullValues = function () {
                            _this.ignoreNullValues(!_this.ignoreNullValues());
                        };
                        this.summaryOptions = ko.observableArray([]);
                        this.ignoreNullValues = ko.observable(false);
                        this.template = "dxrd-page-masterdetail-summary";
                        this.description = Designer.getLocalization("Choose summary functions to calculate in reports.", "ReportBoxDesignerStringId.Wizard_MasterDetailChooseSummaryOptions_Description");
                        this.reportTree = ko.observableArray([]);
                        this.currentPath = ko.observable("");
                        this.availableFields = ko.observableArray([]);
                        this.summaryInfos = ko.observableArray([]);
                        this.selectFieldToSummaryCaption = Designer.getLocalization('Select fields and assign summary functions to them', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SelectFieldsAndSummaries');
                        this.fieldsCaprion = Designer.getLocalization('Fields', 'DevExpress.XtraReports.UI.XRPivotGrid.Fields');
                        this.summaryFunctionCaption = Designer.getLocalization('Summary functions', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SummaryFunctions');
                        this.ignoreNullValuesCaption = Designer.getLocalization('Ignore null values', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues');
                        this.currentPath.subscribe(function (newPath) {
                            _this._changeQuery(newPath);
                        });
                    }
                    MasterDetailChooseSummaryOptions.prototype._createSummaryInfo = function () {
                        var _this = this;
                        var newItem = new SummaryInfo();
                        newItem.field.subscribe(function (newValue) {
                            _this._createNewItemIfNeed();
                        });
                        return newItem;
                    };
                    MasterDetailChooseSummaryOptions.prototype._createNewItemIfNeed = function () {
                        var _summaryInfos = this.summaryInfos.peek();
                        if (_summaryInfos.filter(function (item) { return !item.field(); }).length === 0 && _summaryInfos.length < this.availableFields.peek().length)
                            this.summaryInfos.push(this._createSummaryInfo());
                        var fieldNames = this.summaryInfos.peek().filter(function (item) { return !!item.field(); }).map(function (item) { return item.field().name; });
                        this.displayedFields[this.currentPath()] && this.displayedFields[this.currentPath()]().forEach(function (item) { return item.visible(fieldNames.indexOf(item.name) === -1); });
                    };
                    MasterDetailChooseSummaryOptions.prototype._changeQuery = function (path) {
                        this.currentPath(path);
                        this.summaryInfoMapByDataMember[this._currentDataMember] = this.summaryInfos();
                        this._currentDataMember = path;
                        this.availableFields(this._masterDetailColumns[path] && this._masterDetailColumns[path]() || []);
                        this.summaryInfos(this.summaryInfoMapByDataMember[path] || []);
                        this._createNewItemIfNeed();
                    };
                    MasterDetailChooseSummaryOptions.prototype.removeSummaryInfo = function (info) {
                        var index = this.summaryInfos.indexOf(info);
                        if (index === -1)
                            return;
                        this.summaryInfos.splice(index, 1);
                        this._createNewItemIfNeed();
                    };
                    MasterDetailChooseSummaryOptions.prototype._begin = function (data) {
                        var _this = this;
                        this.isVisible = !$.isEmptyObject(data.masterDetailSummaryOptionsColumns);
                        if (!this.isVisible)
                            return;
                        this._masterDetailColumns = $.extend(true, {}, data.masterDetailSummaryOptionsColumns);
                        this.ignoreNullValues(data.ignoreNullValuesForSummary);
                        this.reportTree(data.reportTree().map(function (item) { return $.extend(true, {}, item); }));
                        this._currentDataMember = this.reportTree()[0].path;
                        var allColumnsTest = {};
                        this.reportTree().forEach(function (query) {
                            allColumnsTest[query.path] = data.masterDetailSummaryOptionsColumns[query.path] && data.masterDetailSummaryOptionsColumns[query.path]().map(function (field) { return field.name; });
                        });
                        var changes = [];
                        $.each(allColumnsTest, function (key, value) {
                            changes = changes.concat(ko.utils.compareArrays(_this._allColumns[key], value));
                        });
                        var isColumnsChanged = changes.some(function (change, index, array) { return change.status != "retained"; });
                        if (isColumnsChanged) {
                            this._allColumns = allColumnsTest;
                            this.summaryInfos([]);
                            data.masterDetailSummariesInfo = {};
                            this.summaryInfoMapByDataMember = {};
                            this.displayedFields = {};
                            $.each(this._masterDetailColumns, function (key, value) {
                                _this.displayedFields[key] = ko.observableArray([]);
                                _this.displayedFields[key](value().map(function (item) {
                                    return { name: item.name, displayName: item.displayName, visible: ko.observable(true) };
                                }));
                            });
                        }
                        else {
                            this.summaryInfos(this.summaryInfoMapByDataMember[this._currentDataMember]);
                        }
                        this._changeQuery(this._currentDataMember);
                    };
                    MasterDetailChooseSummaryOptions.prototype.commit = function (data) {
                        if (!this.isVisible)
                            return;
                        this.summaryInfoMapByDataMember[this._currentDataMember] = this.summaryInfos();
                        data.masterDetailSummaryOptionsColumns = this._masterDetailColumns;
                        data.masterDetailSummariesInfo = {};
                        $.each(this.summaryInfoMapByDataMember, function (key, value) {
                            data.masterDetailSummariesInfo[key] = value.filter(function (item) { return !!item.field(); }).map(function (summaryOption) { return ({ column: summaryOption.field(), summaryFunctions: summaryOption.value.value().map(function (item) { return summaryOption.value.dataSource.map(function (option) { return option.value; }).indexOf(item); }) }); });
                        });
                        data.ignoreNullValuesForSummary = this.ignoreNullValues();
                    };
                    return MasterDetailChooseSummaryOptions;
                })(Wizard.WizardPage);
                Wizard.MasterDetailChooseSummaryOptions = MasterDetailChooseSummaryOptions;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var FieldTreeNode = (function (_super) {
                    __extends(FieldTreeNode, _super);
                    function FieldTreeNode(name, displayName, specifics, isChecked, path, afterCheckToggled) {
                        _super.call(this, name, displayName, specifics, isChecked, afterCheckToggled);
                        this.visible = ko.observable(true);
                        this.path = path;
                        this.isComplex = specifics === Report.DataSourceHelper.defaultObjectDataSourceItemSpecifics;
                    }
                    return FieldTreeNode;
                })(Wizard.TreeNodeBase);
                Wizard.FieldTreeNode = FieldTreeNode;
                var DataMemberTreeNode = (function (_super) {
                    __extends(DataMemberTreeNode, _super);
                    function DataMemberTreeNode(name, displayName, specifics, isChecked, path, afterCheckToggled) {
                        var _this = this;
                        _super.call(this, name, displayName, specifics, isChecked, afterCheckToggled);
                        this.visible = ko.observable(true);
                        this.path = path;
                        this.isComplex = this.isList && specifics === Report.DataSourceHelper.defaultObjectDataSourceItemSpecifics;
                        this.checked = ko.pureComputed({
                            read: function () {
                                if (!_this.initialized()) {
                                    return _this._checked();
                                }
                                else {
                                    var selectedItems = 0;
                                    var partiallySelectedItems = 0;
                                    var visibleChildren = _this.children().filter(function (item) { return item.visible(); });
                                    visibleChildren.forEach(function (item) {
                                        if (item.checked() === true) {
                                            selectedItems++;
                                        }
                                        else if (item.checked() !== false) {
                                            partiallySelectedItems++;
                                        }
                                    });
                                    if (selectedItems === 0 && partiallySelectedItems === 0) {
                                        return false;
                                    }
                                    if (selectedItems === visibleChildren.length) {
                                        return true;
                                    }
                                    return undefined;
                                }
                            }
                        });
                    }
                    DataMemberTreeNode.prototype.setChecked = function (value) {
                        _super.prototype.setChecked.call(this, this.visible() ? value : false);
                    };
                    return DataMemberTreeNode;
                })(Wizard.TreeNode);
                Wizard.DataMemberTreeNode = DataMemberTreeNode;
                var DataMemberCustomCheckedTreeNode = (function (_super) {
                    __extends(DataMemberCustomCheckedTreeNode, _super);
                    function DataMemberCustomCheckedTreeNode(name, displayName, specifics, isChecked, path, afterCheckToggled) {
                        var _this = this;
                        _super.call(this, name, displayName, specifics, isChecked, path, afterCheckToggled);
                        this.checked = ko.pureComputed({
                            read: function () {
                                var lists = _this.children().filter(function (item) { return Report.isList(item); });
                                if (lists.length === 0) {
                                    return _this._checked();
                                }
                                else {
                                    var checkedChildren = 0;
                                    var partiallySelectedItems = 0;
                                    lists.forEach(function (item) {
                                        if (item.checked() === true) {
                                            checkedChildren++;
                                        }
                                        else if (item.checked() !== false) {
                                            partiallySelectedItems++;
                                        }
                                    });
                                    if (checkedChildren > 0)
                                        _this._checked(true);
                                    if (checkedChildren === lists.length) {
                                        return true;
                                    }
                                    else {
                                        return _this._checked() || partiallySelectedItems > 0 ? undefined : false;
                                    }
                                }
                            }
                        });
                        this.checked.subscribe(function (item) {
                            afterCheckToggled && afterCheckToggled(_this);
                        });
                    }
                    DataMemberCustomCheckedTreeNode.prototype.setChecked = function (value) {
                        if (!value || (!this.unChecked() && value)) {
                            this.children().forEach(function (item) { return Report.isList(item) && item.setChecked(false); });
                            this._checked(false);
                        }
                        else
                            this._checked(value);
                    };
                    return DataMemberCustomCheckedTreeNode;
                })(DataMemberTreeNode);
                Wizard.DataMemberCustomCheckedTreeNode = DataMemberCustomCheckedTreeNode;
                var MasterDetailTreeListController = (function (_super) {
                    __extends(MasterDetailTreeListController, _super);
                    function MasterDetailTreeListController() {
                        _super.apply(this, arguments);
                    }
                    MasterDetailTreeListController.prototype.canSelect = function (value) {
                        return (value.hasItems && !!value.path) || value.data.specifics === "none";
                    };
                    return MasterDetailTreeListController;
                })(Designer.DataMemberTreeListController);
                var AvailableFieldsTreeListController = (function (_super) {
                    __extends(AvailableFieldsTreeListController, _super);
                    function AvailableFieldsTreeListController(rootItems) {
                        _super.call(this, null);
                        this.rootItems = rootItems;
                    }
                    AvailableFieldsTreeListController.prototype.itemsFilter = function (item) {
                        var visible = false;
                        if (!!item.path && Report.isList(item)) {
                            visible = this.rootItems().map(function (item) { return item["path"]; }).indexOf(item.path) > -1;
                        }
                        else if (item.path) {
                            var stringEndIndex = item.path.lastIndexOf(item.name);
                            var pathParts = item.path.substring(0, stringEndIndex != -1 ? stringEndIndex : undefined).split('.');
                            if (pathParts.length > 0 && !pathParts[pathParts.length - 1])
                                pathParts.splice(pathParts.length - 1, 1);
                            visible = this.rootItems().map(function (item) { return item["path"]; }).indexOf(pathParts.join('.')) > -1;
                        }
                        if (!visible && !item.unChecked()) {
                            item.setChecked(false);
                        }
                        item.visible(visible);
                        return visible;
                    };
                    AvailableFieldsTreeListController.prototype.isDraggable = function (item) {
                        return false;
                    };
                    return AvailableFieldsTreeListController;
                })(Report.FieldListController);
                Wizard.AvailableFieldsTreeListController = AvailableFieldsTreeListController;
                var MasterDetailSelectReportDataPage = (function (_super) {
                    __extends(MasterDetailSelectReportDataPage, _super);
                    function MasterDetailSelectReportDataPage(wizard, fieldListItemsCallback, createSqlDataSourceInfo, hideDataMemberSubItems) {
                        var _this = this;
                        if (hideDataMemberSubItems === void 0) { hideDataMemberSubItems = false; }
                        _super.call(this, wizard);
                        this._rootItems = ko.observableArray([]);
                        this._dataMemberSelectedPath = ko.observable(null);
                        this._fieldSelectedPath = ko.observable(null);
                        this._checkedDataMembers = ko.observableArray([]);
                        this._showDataSource = false;
                        this._resetDataAfterCheck = function () {
                            _this._data.masterDetailGroups = {};
                            _this._data.masterDetailInfoCollection([]);
                            _this._data.masterDetailSummaryOptionsColumns = {};
                            _this._data.masterDetailSummariesInfo = {};
                        };
                        this._afterCheckToggled = function (node) {
                            _this._resetDataAfterCheck();
                            if (!Report.isList(node))
                                return;
                            if (!node.unChecked()) {
                                if (_this._checkedDataMembers.indexOf(node) === -1) {
                                    _this._checkedDataMembers.push(node);
                                    _this._fieldSelectedPath(node.path);
                                }
                            }
                            else
                                _this._checkedDataMembers.remove(node);
                        };
                        this._createMasterDetailTreeNode = function (item, isChecked, path) {
                            return new DataMemberTreeNode(item.name, item.displayName, item.specifics, isChecked, path, _this._resetDataAfterCheck);
                        };
                        this._createMasterDetailFirstTabTreeNode = function (item, isChecked, path) {
                            return new DataMemberCustomCheckedTreeNode(item.name, item.displayName, item.specifics, isChecked, path, _this._afterCheckToggled);
                        };
                        this._createMasterDetailLeafTreeNode = function (item, isChecked, path) {
                            return new FieldTreeNode(item.name, item.displayName, item.specifics, isChecked, path, _this._resetDataAfterCheck);
                        };
                        this.template = "dxrd-page-masterdetail-select-reportdata";
                        this.description = Designer.getLocalization("Select data members to assign to the report and its detail reports and fields to display in these reports.", "ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_Description");
                        this.selectDataMembersCaption = Designer.getLocalization('Select data members', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_SelectDataMembers');
                        this.selectDataFieldsCaption = Designer.getLocalization('Select data fields', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_SelectDataFields');
                        this.actionNext.isDisabled = ko.pureComputed(function () {
                            return !_this._fieldMemberItemsProvider.hasCheckedItems();
                        });
                        this._fieldListCallBack = fieldListItemsCallback;
                        this._createSqlDataSourceInfo = createSqlDataSourceInfo;
                        this._hideDataMemberSubItems = hideDataMemberSubItems;
                        var fieldListProvider = new Designer.FieldListProvider(this._wrapFieldListCallback(fieldListItemsCallback), ko.observableArray([]));
                        this._dataMemberItemsProvider = new TreeNodeItemsProvider(fieldListProvider, this._rootItems, this._createMasterDetailFirstTabTreeNode, this._createMasterDetailLeafTreeNode);
                        this._fieldMemberItemsProvider = new TreeNodeItemsProvider(fieldListProvider, this._rootItems, this._createMasterDetailTreeNode, this._createMasterDetailLeafTreeNode);
                        this._availableFieldsController = new AvailableFieldsTreeListController(this._checkedDataMembers);
                        ko.computed(function () {
                            var item = _this._availableFieldsController.selectedItem;
                            item && item.collapsed.peek() && item.toggleCollapsed();
                        });
                        this.dataMemberFieldListModel = {
                            itemsProvider: this._dataMemberItemsProvider,
                            selectedPath: this._dataMemberSelectedPath,
                            treeListController: new MasterDetailTreeListController(),
                            templateName: "dxrd-treelist-with-checkbox"
                        };
                        this.fieldMemberFieldListModel = {
                            itemsProvider: this._fieldMemberItemsProvider,
                            selectedPath: this._fieldSelectedPath,
                            treeListController: this._availableFieldsController,
                            templateName: "dxrd-treelist-with-checkbox"
                        };
                    }
                    MasterDetailSelectReportDataPage.prototype._wrapFieldListCallback = function (itemsCallback) {
                        var _this = this;
                        return function (pathRequest) {
                            if (_this._hideDataMemberSubItems) {
                                var deferred = $.Deferred();
                                deferred.resolve([]);
                                return deferred.promise();
                            }
                            else {
                                return itemsCallback(new DevExpress.JS.Widgets.PathRequest(_this._showDataSource ? pathRequest.fullPath : _this.dataSourcePath + '.' + pathRequest.fullPath), _this._dataSource);
                            }
                        };
                    };
                    Object.defineProperty(MasterDetailSelectReportDataPage.prototype, "dataSourcePath", {
                        get: function () {
                            return (this._dataSource.id || this._dataSource.ref);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    MasterDetailSelectReportDataPage.prototype._beginInternal = function (data) {
                        var _this = this;
                        this._dataSource = data.dataSource;
                        if (data.masterDetailInfoCollection().length === 0) {
                            return this._fieldListCallBack(new DevExpress.JS.Widgets.PathRequest(this.dataSourcePath), this._dataSource).done(function (fields) {
                                _this._dataMemberSelectedPath(null);
                                _this._fieldSelectedPath(null);
                                _this._checkedDataMembers([]);
                                _this._showDataSource = false;
                                if (Report.includeNonListItem(fields)) {
                                    _this._showDataSource = true;
                                    _this._rootItems([{
                                            name: _this.dataSourcePath,
                                            displayName: _this._dataSource.name,
                                            specifics: "List"
                                        }]);
                                }
                                else {
                                    _this._rootItems(fields.map(function (value) {
                                        return {
                                            name: value.name,
                                            displayName: value.displayName || value.name,
                                            specifics: "List"
                                        };
                                    }));
                                }
                            });
                        }
                        else if (this.isVisible) {
                            var deferred = $.Deferred();
                            deferred.resolve();
                            return deferred.promise();
                        }
                    };
                    MasterDetailSelectReportDataPage.prototype.beginAsync = function (data) {
                        var _this = this;
                        this._data = data;
                        if (!data.dataSource) {
                            var deferred = $.Deferred();
                            this._createSqlDataSourceInfo(data.sqlDataSourceWizardModel.sqlDataSource)
                                .done(function (result) {
                                result.data = Report.ObjectItem.createNew(result.data);
                                data.dataSource = result;
                                _this._beginInternal(data)
                                    .done(deferred.resolve)
                                    .fail(deferred.reject);
                            }).fail(deferred.reject);
                            return deferred.promise();
                        }
                        else {
                            return this._beginInternal(data);
                        }
                    };
                    MasterDetailSelectReportDataPage.prototype.commit = function (data) {
                        var _this = this;
                        if (data.masterDetailInfoCollection().length === 0) {
                            data.masterDetailInfoCollection(this._fieldMemberItemsProvider.getRootItems().filter(function (item) { return item.isList && !item.isComplex; }).map(function (item) {
                                if (_this._showDataSource)
                                    item = $.extend({}, item, { name: "" });
                                return new Wizard.MasterDetailQueryInfo(item);
                            }));
                        }
                    };
                    return MasterDetailSelectReportDataPage;
                })(Wizard.WizardPage);
                Wizard.MasterDetailSelectReportDataPage = MasterDetailSelectReportDataPage;
                var TreeNodeItemsProvider = (function () {
                    function TreeNodeItemsProvider(fieldListProvider, rootItems, generateTreeNode, generateTreeLeafNode) {
                        var _this = this;
                        this._rootItems = ko.observableArray([]);
                        this._checkedRootNodesCount = ko.computed(function () {
                            if (!_this._rootItems || _this._rootItems().length === 0)
                                return 0;
                            var count = 0;
                            for (var i = 0; i < _this._rootItems().length && count < 1; i++) {
                                count += _this._rootItems()[i].unChecked() ? 0 : 1;
                            }
                            return count;
                        });
                        this.hasCheckedItems = ko.computed(function () {
                            return !(_this._checkedRootNodesCount() === 0);
                        });
                        this.getRootItems = function () { return _this._rootItems(); };
                        this.getItems = function (pathRequest) {
                            var result = $.Deferred();
                            if (!pathRequest.fullPath) {
                                result.resolve(_this._rootItems());
                            }
                            else {
                                fieldListProvider.getItems(pathRequest).done(function (value) {
                                    var currentParentNode = _this._getParentNode(pathRequest);
                                    if (currentParentNode.children().length === 0) {
                                        var array = [];
                                        value.forEach(function (item) {
                                            if (Report.isList(item)) {
                                                if (pathRequest.pathParts.length <= 5) {
                                                    array.push(generateTreeNode(item, false, [pathRequest.fullPath, item.name].join(".")));
                                                }
                                            }
                                            else {
                                                array.push(generateTreeLeafNode(item, currentParentNode.checked(), [pathRequest.fullPath, item.name].join(".")));
                                            }
                                        });
                                        currentParentNode.initializeChildren(array);
                                        result.resolve(array);
                                    }
                                    else {
                                        result.resolve(currentParentNode.children());
                                    }
                                });
                            }
                            return result.promise();
                        };
                        rootItems.subscribe(function (newValue) {
                            _this._rootItems(newValue.map(function (item) {
                                return generateTreeNode(item, false, item.name);
                            }));
                        });
                    }
                    TreeNodeItemsProvider.prototype._getParentNode = function (pathRequest) {
                        var parentNode = this._rootItems().filter(function (item) { return item.path === (pathRequest.id || pathRequest.ref); })[0];
                        var childPath = parentNode.path;
                        for (var index = 1; index < pathRequest.pathParts.length; index++) {
                            childPath += "." + pathRequest.pathParts[index];
                            parentNode = parentNode.children().filter(function (item) { return Report.isList(item) && item.path == childPath; })[0];
                        }
                        return parentNode;
                    };
                    return TreeNodeItemsProvider;
                })();
                Wizard.TreeNodeItemsProvider = TreeNodeItemsProvider;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var PageSetupPage = (function (_super) {
                    __extends(PageSetupPage, _super);
                    function PageSetupPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.template = "dxrd-page-pageSetup";
                        this.description = DevExpress.Analytics.getLocalization("Specify report page settings.", "ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Description");
                        this.lookupData = {
                            paperKind: Report.paperKind.valuesArray
                                .map(function (x) { return { value: x.value, displayName: DevExpress.Analytics.getLocalization(x.displayValue, x.localizationId) }; })
                                .sort(function (a, b) { return a.value === 'Custom' ? 1 : b.value === 'Custom' ? -1 : a.displayName.localeCompare(b.displayName); }),
                            unit: [
                                { value: Report.GraphicsUnit.Inch, displayName: Designer.getLocalization("Inch", "ASPxReportsStringId.ReportDesigner_Wizard_Inch") },
                                { value: Report.GraphicsUnit.Millimeter, displayName: Designer.getLocalization("Millimeter", "ASPxReportsStringId.ReportDesigner_Wizard_Millimeter") },
                                { value: Report.GraphicsUnit.Pixel, displayName: Designer.getLocalization("Pixel", "ASPxReportsStringId.ReportDesigner_Wizard_Pixel") }
                            ]
                        };
                        this.paperKind = ko.observable(Report.paperKind.defaultVal);
                        this.landscape = ko.observable(false);
                        this.width = ko.observable(Designer.papperKindMapper[Report.paperKind.defaultVal].width / 100);
                        this.height = ko.observable(Designer.papperKindMapper[Report.paperKind.defaultVal].height / 100);
                        this.fixedSize = ko.computed(function () { return _this.paperKind() !== 'Custom'; });
                        this.marginTop = ko.observable(1);
                        this.marginRight = ko.observable(1);
                        this.marginBottom = ko.observable(1);
                        this.marginLeft = ko.observable(1);
                        this._unit = ko.observable(Report.GraphicsUnit.Inch);
                        this.unit = ko.computed({
                            read: function () { return _this._unit(); },
                            write: function (newVal) {
                                var converter = PageSetupPage.getConverter(_this._unit(), newVal);
                                [_this.width, _this.height, _this.marginTop, _this.marginRight, _this.marginBottom, _this.marginLeft].forEach(function (x) { x(converter(x())); });
                                _this._unit(newVal);
                            }
                        });
                        this.paperKind.subscribe(function (newVal) {
                            if (newVal !== 'Custom') {
                                var convert = PageSetupPage.getConverter(Report.GraphicsUnit.Inch, _this._unit());
                                var width = convert(Designer.papperKindMapper[newVal].width / 100);
                                var height = convert(Designer.papperKindMapper[newVal].height / 100);
                                if (_this.landscape())
                                    _a = [height, width], width = _a[0], height = _a[1];
                                _this.width(width);
                                _this.height(height);
                            }
                            var _a;
                        });
                        this.landscape.subscribe(function (newVal) {
                            var width = _this.height();
                            var height = _this.width();
                            _this.width(width);
                            _this.height(height);
                            var t = _this.marginTop(), r = _this.marginRight(), b = _this.marginBottom(), l = _this.marginLeft();
                            _a = newVal
                                ? [l, t, r, b]
                                : [r, b, l, t], t = _a[0], r = _a[1], b = _a[2], l = _a[3];
                            _this.marginTop(t);
                            _this.marginRight(r);
                            _this.marginBottom(b);
                            _this.marginLeft(l);
                            var _a;
                        });
                        this.previewAreaWidth = ko.observable(200);
                        this.previewAreaHeight = ko.observable(292);
                        var previewRatio = ko.pureComputed(function () { return Math.min(_this.previewAreaWidth() / _this.width(), _this.previewAreaHeight() / _this.height()); });
                        this.previewPageHeight = ko.pureComputed(function () { return _this.height() * previewRatio(); });
                        this.previewPageWidth = ko.pureComputed(function () { return Math.round(_this.width() * previewRatio()); });
                        this.previewPageTop = ko.pureComputed(function () { return Math.round((_this.previewAreaHeight() - _this.previewPageHeight()) / 2); });
                        this.previewPageLeft = ko.pureComputed(function () { return Math.round((_this.previewAreaWidth() - _this.previewPageWidth()) / 2); });
                        this.previewTopMargin = ko.pureComputed(function () { return Math.round(_this.marginTop() * previewRatio()); });
                        this.previewRightMargin = ko.pureComputed(function () { return Math.round(_this.marginRight() * previewRatio()); });
                        this.previewBottomMargin = ko.pureComputed(function () { return Math.round(_this.marginBottom() * previewRatio()); });
                        this.previewLeftMargin = ko.pureComputed(function () { return Math.round(_this.marginLeft() * previewRatio()); });
                        this.valueFormat = ko.pureComputed(function () {
                            switch (_this._unit()) {
                                case Report.GraphicsUnit.Inch:
                                    return '#.00 "';
                                case Report.GraphicsUnit.Millimeter:
                                    return '#.0 mm';
                                case Report.GraphicsUnit.Pixel:
                                    return '# px';
                            }
                        });
                    }
                    PageSetupPage.mm2px = function (val) { return DevExpress.Analytics.Utils.unitsToPixel(10 * val, "TenthsOfAMillimeter"); };
                    PageSetupPage.in2px = function (val) { return DevExpress.Analytics.Utils.unitsToPixel(100 * val, "HundredthsOfAnInch"); };
                    PageSetupPage.px2mm = function (val) { return DevExpress.Analytics.Utils.pixelToUnits(val, "TenthsOfAMillimeter", 1) / 10; };
                    PageSetupPage.px2in = function (val) { return DevExpress.Analytics.Utils.pixelToUnits(val, "HundredthsOfAnInch", 1) / 100; };
                    PageSetupPage.mm2in = function (val) { return val * Wizard.CustomizeLabelPage.CONVERSION_COEEFICIENT; };
                    PageSetupPage.in2mm = function (val) { return val / Wizard.CustomizeLabelPage.CONVERSION_COEEFICIENT; };
                    PageSetupPage.getConverter = function (from, to) {
                        if (from === to)
                            return function (x) { return x; };
                        var unitCode = function (unit) {
                            switch (unit) {
                                case Report.GraphicsUnit.Inch:
                                    return "in";
                                case Report.GraphicsUnit.Millimeter:
                                    return "mm";
                                case Report.GraphicsUnit.Pixel:
                                    return "px";
                            }
                        };
                        var fnName = unitCode(from) + "2" + unitCode(to);
                        return PageSetupPage[fnName];
                    };
                    PageSetupPage.prototype._begin = function (data) {
                        if (data.pageSetup) {
                            this.paperKind(data.pageSetup.paperKind);
                            this.landscape(!data.portrait);
                            this.unit(data.pageSetup.unit);
                            this.width(data.pageSetup.width);
                            this.height(data.pageSetup.height);
                            this.marginLeft(data.pageSetup.marginLeft);
                            this.marginRight(data.pageSetup.marginRight);
                            this.marginTop(data.pageSetup.marginTop);
                            this.marginBottom(data.pageSetup.marginBottom);
                        }
                    };
                    PageSetupPage.prototype.commit = function (data) {
                        data.pageSetup = {
                            paperKind: this.paperKind(),
                            unit: this.unit(),
                            width: this.width(),
                            height: this.height(),
                            marginLeft: this.marginLeft(),
                            marginRight: this.marginRight(),
                            marginTop: this.marginTop(),
                            marginBottom: this.marginBottom()
                        };
                        data.portrait = !this.landscape();
                    };
                    return PageSetupPage;
                })(Wizard.WizardPage);
                Wizard.PageSetupPage = PageSetupPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var parametersViewModelConverter = {
                    createParameterViewModel: function (parameter) { return new DataSourceParameterWrapper(parameter); },
                    getParameterFromViewModel: function (parameterViewModel) { return parameterViewModel.parameter; }
                };
                var DataSourceParameterWrapper = (function () {
                    function DataSourceParameterWrapper(parameter) {
                        this.parameter = parameter;
                        this.name = parameter.name;
                        this.value = parameter.value;
                        this.type = parameter.type;
                        this.isValid = parameter["isValid"];
                    }
                    Object.defineProperty(DataSourceParameterWrapper.prototype, "specifics", {
                        get: function () {
                            return this.parameter.specifics;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    DataSourceParameterWrapper.prototype.getInfo = function () {
                        var infoClone = $.extend(true, [], this.parameter.getInfo());
                        var valueInfo = Designer.find(infoClone, function (property) { return property.propertyName === "value"; });
                        if (valueInfo.editor.header === DevExpress.Designer.Widgets.editorTemplates.expressionEditor.header) {
                            valueInfo.editor.extendedOptions = $.extend({}, valueInfo.editor.extendedOptions, { fieldListProvider: DataSourceParameterWrapper._itemsProvider });
                        }
                        return infoClone;
                    };
                    DataSourceParameterWrapper._itemsProvider = {
                        getItems: function () { return $.Deferred().resolve([]).promise(); }
                    };
                    return DataSourceParameterWrapper;
                })();
                Wizard.DataSourceParameterWrapper = DataSourceParameterWrapper;
                var ReportWizardConfigureParametersPage = (function (_super) {
                    __extends(ReportWizardConfigureParametersPage, _super);
                    function ReportWizardConfigureParametersPage(wizard) {
                        _super.call(this, wizard, parametersViewModelConverter);
                        this.description = Designer.getLocalization("Manage parameters that are used in queries and/or stored procedures.", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_PageConfigureParameters");
                        this.actionFinish.isDisabled(true);
                        if (wizard instanceof Wizard.ReportWizard && wizard.isMasterDetailWizard)
                            this.scrollViewHeight = Wizard.ReportWizard._masterDetailScrollViewHeight;
                    }
                    ReportWizardConfigureParametersPage.prototype.beginAsync = function (data) {
                        if (data.sqlDataSourceWizardModel) {
                            this.isVisible = true;
                            var result = _super.prototype.beginAsync.call(this, data.sqlDataSourceWizardModel);
                            this.actionNext.isDisabled(false);
                            return result;
                        }
                        else {
                            this.isVisible = false;
                        }
                    };
                    ReportWizardConfigureParametersPage.prototype.commit = function (data) {
                        if (data.sqlDataSourceWizardModel) {
                            return _super.prototype.commit.call(this, data.sqlDataSourceWizardModel);
                        }
                    };
                    return ReportWizardConfigureParametersPage;
                })(Wizard.MultiQueryConfigureParametersPage);
                Wizard.ReportWizardConfigureParametersPage = ReportWizardConfigureParametersPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var SelectPredefinedLabelsPage = (function (_super) {
                    __extends(SelectPredefinedLabelsPage, _super);
                    function SelectPredefinedLabelsPage(wizard) {
                        var _this = this;
                        _super.call(this, wizard);
                        this.wizard = wizard;
                        this.template = "dxrd-page-selectPredefinedLabels";
                        this.description = Designer.getLocalization("Select one of the predefined labels by specifying the Product and its ID.", "ReportBoxDesignerStringId.Wizard_LabelInformation_Description");
                        this.selectedLabelProduct = ko.observable();
                        this.selectedLabelDetails = ko.observable();
                        this.labelDetails = ko.observable();
                        this.selectedPaperSize = ko.computed({
                            read: function () {
                                return Designer.findFirstItemMatchesCondition(_this.labelData.paperKinds, function (item) { return item.id === _this.selectedLabelDetails().paperKindId; });
                            },
                            deferEvaluation: true
                        });
                        this.width = ko.pureComputed(function () { return Wizard.getFormattedValueInUnits(_this.selectedLabelDetails().width, _this.selectedPaperSize().unit) + (_this.selectedPaperSize().unit === Report.GraphicsUnit.Inch ? " in" : " mm"); });
                        this.height = ko.pureComputed(function () { return Wizard.getFormattedValueInUnits(_this.selectedLabelDetails().height, _this.selectedPaperSize().unit) + (_this.selectedPaperSize().unit === Report.GraphicsUnit.Inch ? " in" : " mm"); });
                        this.paperType = ko.pureComputed(function () { return _this.selectedPaperSize().name; });
                        this.pageSizeText = ko.pureComputed(function () { return Wizard.getFormattedValueInUnits(_this.selectedPaperSize().width, _this.selectedPaperSize().unit) + " x " + Wizard.getFormattedValueInUnits(_this.selectedPaperSize().height, _this.selectedPaperSize().unit) + (_this.selectedPaperSize().unit === Report.GraphicsUnit.Inch ? " in" : " mm"); });
                        this.selectedLabelProduct.subscribe(function (newProductsType) {
                            var labelDetails = _this.labelData.labelDetails.filter(function (item) { return item.productId === newProductsType.id; });
                            _this.selectedLabelDetails(labelDetails[0]);
                            _this.labelDetails({
                                store: labelDetails,
                                paginate: labelDetails.length > 200,
                                pageSize: 100
                            });
                        });
                    }
                    SelectPredefinedLabelsPage.prototype.beginAsync = function (data) {
                        var _this = this;
                        this.isVisible = data.reportType === Wizard.ReportType.Label;
                        if (!this.isVisible)
                            return null;
                        return this.wizard.labelWizardData().done(function (labelData) {
                            _this.labelData = labelData;
                            if (data.labelDetails) {
                                if (!_this.selectedLabelProduct() || _this.selectedLabelProduct().id !== data.labelDetails.productId) {
                                    _this.selectedLabelProduct(Designer.findFirstItemMatchesCondition(_this.labelData.labelProducts, function (item) { return item.id === data.labelDetails.productId; }));
                                }
                                _this.selectedLabelDetails(Designer.findFirstItemMatchesCondition(_this.labelData.labelDetails, function (item) { return item.id === data.labelDetails.id; }));
                            }
                            else {
                                _this.selectedLabelProduct(_this.labelData.labelProducts[0]);
                            }
                        });
                    };
                    SelectPredefinedLabelsPage.prototype.commit = function (data) {
                        if (this.selectedLabelDetails() && (!data.labelDetails || data.labelDetails.id !== this.selectedLabelDetails().id)) {
                            data.labelDetails = $.extend({}, this.selectedLabelDetails());
                        }
                    };
                    return SelectPredefinedLabelsPage;
                })(Wizard.WizardPage);
                Wizard.SelectPredefinedLabelsPage = SelectPredefinedLabelsPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Designer;
    (function (Designer) {
        var Report;
        (function (Report) {
            var Wizard;
            (function (Wizard) {
                var ReportWizardSelectConnectionString = (function (_super) {
                    __extends(ReportWizardSelectConnectionString, _super);
                    function ReportWizardSelectConnectionString(wizard, connectionStrings) {
                        _super.call(this, wizard, connectionStrings);
                        this.description = Designer.getLocalization("Select one of the available data connections.", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_PageChooseConnection");
                        this.actionPrevious.isVisible(true);
                    }
                    ReportWizardSelectConnectionString.prototype.beginAsync = function (data) {
                        if (data.sqlDataSourceWizardModel) {
                            this.isVisible = true;
                            return _super.prototype.beginAsync.call(this, data.sqlDataSourceWizardModel);
                        }
                        else {
                            this.isVisible = false;
                        }
                    };
                    ReportWizardSelectConnectionString.prototype.commit = function (data) {
                        if (data.sqlDataSourceWizardModel) {
                            return _super.prototype.commit.call(this, data.sqlDataSourceWizardModel);
                        }
                    };
                    return ReportWizardSelectConnectionString;
                })(Wizard.SelectConnectionString);
                Wizard.ReportWizardSelectConnectionString = ReportWizardSelectConnectionString;
                var ReportWizardAddQueriesPage = (function (_super) {
                    __extends(ReportWizardAddQueriesPage, _super);
                    function ReportWizardAddQueriesPage(wizard, callbacks, disableCustomSql, rtl) {
                        var _this = this;
                        _super.call(this, wizard, callbacks, disableCustomSql, rtl);
                        this.actionNext.isDisabled = this.actionFinish.isDisabled;
                        this.actionFinish.isDisabled = ko.computed(function () { return true; });
                        this.customResetOptions = function () {
                            _this._reportData.dataSource = null;
                            _this._reportData.masterDetailInfoCollection([]);
                        };
                        if (wizard instanceof Wizard.ReportWizard && wizard.isMasterDetailWizard) {
                            this.scrollViewHeight = Wizard.ReportWizard._masterDetailScrollViewHeight;
                        }
                    }
                    ReportWizardAddQueriesPage.prototype.beginAsync = function (data) {
                        this._reportData = data;
                        if (data.sqlDataSourceWizardModel) {
                            this.isVisible = true;
                            return _super.prototype.beginAsync.call(this, data.sqlDataSourceWizardModel);
                        }
                        else {
                            this.isVisible = false;
                        }
                    };
                    ReportWizardAddQueriesPage.prototype.commit = function (data) {
                        if (data.sqlDataSourceWizardModel) {
                            return _super.prototype.commit.call(this, data.sqlDataSourceWizardModel);
                        }
                    };
                    return ReportWizardAddQueriesPage;
                })(Wizard.MultiQueryConfigurePage);
                Wizard.ReportWizardAddQueriesPage = ReportWizardAddQueriesPage;
                var ReportWizardMasterDetailRelationsPage = (function (_super) {
                    __extends(ReportWizardMasterDetailRelationsPage, _super);
                    function ReportWizardMasterDetailRelationsPage(wizard, sqlDataSourceResultSchema) {
                        var _this = this;
                        _super.call(this, wizard, sqlDataSourceResultSchema);
                        this.description = Designer.getLocalization("Specify master-detail relationships between required queries.", "ASPxReportsStringId.ReportDesigner_SqlDSWizard_PageConfigureMasterDetailRelations");
                        this.actionNext.isVisible(true);
                        this.actionNext.isDisabled(false);
                        this.actionFinish.isDisabled(true);
                        this.customResetOptions = function () {
                            _this._reportData.dataSource = null;
                            _this._reportData.masterDetailInfoCollection([]);
                        };
                    }
                    ReportWizardMasterDetailRelationsPage.prototype.beginAsync = function (data) {
                        if (data.sqlDataSourceWizardModel) {
                            this._reportData = data;
                            this.isVisible = data.sqlDataSourceWizardModel.sqlDataSource.queries().length > 1;
                            return _super.prototype.beginAsync.call(this, data.sqlDataSourceWizardModel);
                        }
                        else {
                            this.isVisible = false;
                        }
                    };
                    ReportWizardMasterDetailRelationsPage.prototype.commit = function (data) {
                        if (data.sqlDataSourceWizardModel) {
                            return _super.prototype.commit.call(this, data.sqlDataSourceWizardModel);
                        }
                    };
                    return ReportWizardMasterDetailRelationsPage;
                })(Wizard.MasterDetailRelationsPage);
                Wizard.ReportWizardMasterDetailRelationsPage = ReportWizardMasterDetailRelationsPage;
            })(Wizard = Report.Wizard || (Report.Wizard = {}));
        })(Report = Designer.Report || (Designer.Report = {}));
    })(Designer = DevExpress.Designer || (DevExpress.Designer = {}));
})(DevExpress || (DevExpress = {}));
var DevExpress;
(function (DevExpress) {
    var Reporting;
    (function (Reporting) {
        var Templates;
        (function (Templates) {
            DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.addTemplates({
                'dx-chart-leftPanel': '<div class="dx-chart-left-panel dxd-border-primary dxd-properties-panel-group-header-back-color">        <div class="dxrd-right-panel dxd-border-primary dxd-properties-panel-group-header-back-color" data-bind="css: tabPanel.cssClasses()">            <div class="dxrd-right-panel-header dxd-text-primary">                <span data-bind="text: rightPanelHeader()"></span>            </div>            <!-- ko if: chartStructure -->            <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }">                <div class="dxcd-chart-structure dxd-back-primary" data-bind="treelist: chartStructure"></div>            </div>            <!-- /ko -->        </div>    </div>',
                'dxcd-toolbar': '<div class="dxrd-toolbar-wrapper">        <div class="dxrd-toolbar" data-bind="template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.toolbarItems }"></div>    </div>',
                'dx-chart-middlePart': '<!-- ko ifnot: isLoading -->    <!-- ko with: surface -->    <div class="dxrd-surface-wrapper" style="top: 0" data-bind="template: templateName">    </div>    <!-- /ko -->    <!-- /ko -->    <!-- ko if: isLoading -->    <div class="dxrd-surface-wrapper">        <div style="text-align: center; padding-top: 49%;">            <div data-bind="dxLoadIndicator: { visible: isLoading() }"></div>        </div>    </div>    <!-- /ko -->',
                'dx-chart-surface': '<div class="dxrd-surface" data-bind="styleunit: { \'width\': Math.min(width(), $root.surfaceSize()) }, click: function(_, e) { e.stopPropagation(); }">        <div class="dxrd-viewport" data-bind="styleunit: { minWidth: Math.min(width() + 60, $root.surfaceSize()), maxWidth: width() + 60,  maxHeight: height() + 60 }">            <div class="dxrd-control" style="border:none; background: none;">                <div data-bind="zoom: zoom, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }">                    <img data-bind="attr: {src: imageSrc }, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }" />                </div>            </div>        </div>    </div>',
                'dxcd-collection-lookup-header': '<div data-bind="dxSelectBox: { items: array, displayExpr: \'name\', value: selectedItem, disabled: disabled,  placeholder: $root.dx.Analytics.Localization.selectPlaceholder(), noDataText: $root.dx.Analytics.Localization.noDataText() }"></div>',
                'dxcd-collection-item': '<!-- ko if: selectedItem -->    <div data-bind="dxPropertyGrid: { target: selectedItem, editorsInfo: { editors: editors }, level: 1 }"></div>    <!--/ko -->',
                'dxcd-field': '<div data-bind="dxFieldListPicker: { path: path, value: value, itemsProvider: $root.dataBindingsProvider(), treeListController: treeListController, disabled: disabled }"></div>',
                'dxrd-propertygridtab': '<div class="dxrd-right-panel-header dxd-text-primary">        <span data-bind="text: text"></span>    </div>    <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\' }">        <!-- ko template: { name: \'dx-propertieseditor\', data: model }-->        <!-- /ko -->    </div>',
                'dxcd-panes-editor': '<div data-bind="dxSelectBox: { dataSource: $root.panes, value: value, disabled: disabled }"></div>',
                'dxcd-legends-editor': '<div data-bind="dxSelectBox: { dataSource: $root.legends, value: value, disabled: disabled }"></div>',
                'dxcd-axisX-editor': '<div data-bind="dxSelectBox: { dataSource: $root.axisX, value: value, disabled: disabled }"></div>',
                'dxcd-axisY-editor': '<div data-bind="dxSelectBox: { dataSource: $root.axisY, value: value, disabled: disabled }"></div>',
                'dxcd-datasource': '<!-- ko with: generateOptions($root.chartDataSources) -->    <div data-bind="dxSelectBox: $data"></div>    <!-- /ko -->',
                'dxcd-viewHeader': '<div data-bind="dxSelectBox: { dataSource: values, itemTemplate: \'stateItem\', valueExpr: \'value\', value: generateHeaderValue($root.undoEngine), displayExpr: \'displayValue\', disabled: disabled }">        <div class="lookupItem" data-options="dxTemplate:{ name:\'stateItem\' }">            <div style="display:inline-block; width: 24px; height: 24px;" data-bind="css: $parent.generateViewClassName(value), template: {name: $parent.generateViewClassName(value, true), if: !!$parent.generateViewClassName(value, true)}"></div>            <div style="display:inline-block; vertical-align: super;" data-bind="text: displayValue"></div>        </div>    </div>',
                'dxcd-viewContent': '<div data-bind="dxPropertyGrid: { target: contentValue, level: level + 1, parentDisabled: disabled }"></div>',
                'dxcd-summaryfunction': '<div class="dx-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: options">        </div>    </div>',
                'dxcd-summaryFunction-content': '<div class="dxcd-summary-function-content">        <!-- ko with: value -->        <div class="dx-field dxd-back-primary">            <div class="dx-field-label dxd-text-primary" data-bind="styleunit: $parent.memberPadding">                <div class="propertygrid-editor-displayName" data-bind="text: $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\'), attr: { \'title\': $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\') }"></div>            </div>            <div class="dx-field-value">                <div data-bind="dxSelectBox: { value: functionName, dataSource: $parent.availableItems() ,acceptCustomValue: true, disabled: $parent.disabled(), placeholder: $root.dx.Analytics.Localization.selectPlaceholder() }"></div>            </div>        </div>        <!-- ko foreach: args -->        <div class="dx-field dxd-back-primary" data-bind="css: $parents[1].actionsAreAvailable() ? \'dxcd-summaryfunction-arg\' : \'\'">            <div class="dx-field-label dxd-text-primary" data-bind="styleunit: $parents[1].memberPadding">                <!-- ko if: $parent.args().length === 1-->                <div class="propertygrid-editor-displayName" data-bind="text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\'), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') }"></div>                <!-- /ko -->                <!-- ko if: $parent.args().length > 1-->                <div class="propertygrid-editor-displayName" data-bind="text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1) }"></div>                <!-- /ko -->            </div>            <div class="dx-field-value">                <!-- ko if: $parents[1].actionsAreAvailable() -->                <div class="dxcd-summaryFunction-remove" data-bind="click: function(){ $parents[1].remove($index()) }">                    <div class="dxcd-summaryFunction-remove-icon dx-icon-dxrd-image-recycle-bin"><!-- ko template: \'dx-icon-dxrd-image-recycle-bin\'--><!-- /ko --></div>                </div>                <!-- /ko -->                <!-- ko template: { name: $parents[1].argumentTemplateName, data: { value: $data.value, path: $parents[1].path, treeListController: $parents[1].treeListController, disabled: $parents[1].disabled } } -->                <!-- /ko -->            </div>        </div>        <!-- /ko -->        <!-- ko if: $parent.actionsAreAvailable() -->        <div class="dx-field dxd-back-primary">            <div class="dx-field-label dxd-text-primary" style="width:auto" data-bind="styleunit: $parent.memberPadding">                <div class="propertygrid-editor-displayName dxrcd-summaryfunction-addnew dxd-hyperlink-color dxd-border-accented dxd-text-accented" data-bind="text: $parent.getLocalization(\'Add Argument\', \'ASPxReportsStringId.ReportDesigner_AddArgument\'), attr: { \'title\': $parent.getLocalization(\'Add New Item\', \'ASPxReportsStringId.ReportDesigner_AddNewItem\') }, click: function() { $parent.add(); }"></div>            </div>        </div>        <!-- /ko -->        <!-- /ko -->    </div>',
                'dxcd-pointscollection': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: {                 values: value,                 displayName: displayName,                 level: level,                 info: info,                 addHandler: function() { return addPoint(_model()[\'owner\'] || _model()); }              }">            <div data-bind="dxPropertyGrid: { target: value, level: editor.level + 1 }"></div>        </div>    </div>',
                'dxcd-maxSize': '<div data-bind="dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'min\', \'minSize\'), dxValidator: { validationRules: validationRules || [] }"></div>',
                'dxcd-minSize': '<div data-bind="dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'max\', \'maxSize\'), dxValidator: { validationRules: validationRules || [] }"></div>',
                'dxcd-group': '<div data-bind="dxSelectBox: { dataSource: $root.groups, value: value, acceptCustomValue:true, onFocusOut: function() { $root.applyGroup($data.value()); }, disabled: disabled }"></div>',
                'dxcd-color-undo': '<div data-bind="dxColorBox: { value: generateValue($root.undoEngine), editAlphaChannel: true, popupPosition: { collision: \'flipfit flipfit\' }, disabled: disabled }"></div>',
                'dx-selectbox-undo': '<div data-bind="dxLocalizedSelectBox: { dataSource: values, value: generateValue($root.undoEngine), valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled }, dxValidator: { validationRules: $data.validationRules || [] }"></div>',
                'dxrd-band-coordinate-grid-selection': '<!-- ko with: surface --><div data-bind="styleunit: { \'height\': height, \'width\': $parent.width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor" style="position:absolute"></div><!-- ko ifnot: collapsed --><!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width } } } }--><!-- /ko --><!-- /ko --><!-- /ko -->',
                'dxrd-band-coordinate-grid': '<!-- ko with: surface -->    <!-- ko ifnot: collapsed -->    <div class="dxrd-band-content dxd-selectable" data-bind="styleunit: { \'height\': height(), top: absolutePosition.y }">        <!-- ko if: $data._context.drawWatermark() -->        <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: true, band: $data, reportSurface: $data._context } } -->        <!-- /ko -->        <!-- /ko -->        <div class="dxrd-band-subbands-wrapper" data-bind="styleunit: { \'top\': heightWithoutSubBands } ">            <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width, \'snapGridSize\': $parent.snapGridSize }; } } }-->            <!-- /ko -->        </div>    </div>    <!-- /ko -->    <!-- ko if: collapsed -->    <div data-bind="styleunit: { \'height\': height, top: absolutePosition.y }" class="dxrd-band-collapsed">        <div data-bind="css: { \'dxrd-band-content-selected\': selected() }" style="position:absolute; height: 100%; width: 100%"></div>    </div>    <!-- /ko -->    <!-- /ko -->',
                'dxrd-detail-report-band-coordinate-grid': '<!-- ko with: surface -->    <!-- ko ifnot: collapsed -->    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width, \'snapGridSize\': $parent.snapGridSize }; } } }-->    <!-- /ko -->    <!-- /ko -->    <!-- ko if: collapsed -->    <div data-bind="styleunit: { \'height\': height, top: absolutePosition.y }" class="dxrd-band-collapsed">        <div data-bind="css: { \'dxrd-band-content-selected\': selected() }" style="position:absolute; height: 100%; width: 100%"></div>    </div>    <!-- /ko -->    <!-- /ko -->',
                'dxrd-sub-band-coordinate-grid': '<!-- ko with: surface -->    <!-- ko ifnot: collapsed -->    <div class="dxrd-band-content dxd-selectable" data-bind="styleunit: { \'height\': height(), top: $data.absolutePosition.y() - $data.parent.heightWithoutSubBands() - $data.parent.absolutePosition.y() }">        <!-- ko if: $data._context.drawWatermark() -->        <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: true, band: $data, reportSurface: $data._context } } -->        <!-- /ko -->        <!-- /ko -->    </div>    <!-- /ko -->    <!-- ko if: collapsed -->    <div data-bind="styleunit: { \'height\': height, top: absolutePosition.y }" class="dxrd-band-collapsed">        <div data-bind="css: { \'dxrd-band-content-selected\': selected() }" style="position:absolute; height: 100%; width: 100%"></div>    </div>    <!-- /ko -->    <!-- /ko -->',
                'dxrd-band-selection': '<div data-bind="styleunit: { \'height\': height, \'width\': rect().width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor" style="position:absolute">        <!-- ko if: contentSelectionTemplate -->        <!-- ko template: contentSelectionTemplate-->        <!-- /ko -->        <!-- /ko -->    </div>    <!-- ko ifnot: collapsed -->    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->    <!-- /ko -->    <!-- /ko -->',
                'dxrd-detailreportband-selection': '<!-- ko ifnot: collapsed -->    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->    <!-- /ko -->    <!-- /ko -->',
                'dxrd-bandselection-content': '<!-- ko ifnot: collapsed -->    <!-- ko foreach: controls -->    <!-- ko template: { name: $data.selectiontemplate } -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->',
                'dxrd-band-vruler': '<!-- ko with: surface --><div class="dxrd-band-marker-wrapper" data-bind="attr: { title: name }, styleunit: { \'width\': $data.markerWidth() + 20, \'top\': absolutePosition.y, \'height\': height }" style="position:absolute">    <!--  ko if: hasOwnRuler -->    <div class="dxrd-band-vruler" data-bind="styleunit: { \'height\': rulerHeight, top: $data.bandOffset || 0 },    resizable: { starting: function() {        $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); $root.selection.expectClick = false;    }, stopped: function() {        $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;    }, handles: \'s\', disabled: !canResize(), forceResize: resizeTheBand, zoom: $root.surface().zoom, minimumHeight: $data.heightFromControls && $data.heightFromControls() || 1 }">        <div data-bind="ruler: { \'zoom\': zoom, \'length\': height, \'units\': $parent.measureUnit, \'direction\': \'vertical\', flip: $root.dx[\'config\']()[\'rtlEnabled\'] }"></div>    </div>    <!-- /ko -->    <!-- ko if: showMarker -->    <div class="dxrd-band-marker" data-bind="css: markerClass, styleunit: { \'height\': height(), \'width\': markerWidth }, click: function(_, e) { markerClick($root.selection); e.stopPropagation(); }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: collapsed() || !hasOwnRuler() || locked, forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }">        <div style="width: 1px; height: 1px; margin-left: 9px;"></div>        <div class="dxrd-band-marker-rotation">            <div class="dxrd-band-marker-rotation-text" data-bind="text: collapsed() ? \'\' : name"></div>        </div>    </div>    <!-- /ko --></div><!-- ko ifnot: collapsed --><!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $parent.measureUnit }; } } }--><!-- /ko --><!-- /ko --><!-- /ko -->',
                'dxrd-band': '<!-- ko ifnot: collapsed -->    <div class="dxrd-band-content dxd-selectable" data-bind="styleunit: { \'height\': heightWithoutSubBands, \'width\': _width(), \'top\': absolutePosition.y }" style="position:absolute;">        <!-- ko if: $data._context.drawWatermark() -->        <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: false, band: $data, reportSurface: $data._context } } -->        <!-- /ko -->        <!-- /ko -->        <div data-bind="styleunit: { \'left\': coordinateGridOptions.left }, coordinateGrid: coordinateGridOptions" class="dxrd-band-content-grid"></div>        <!-- ko if: $data.columnWidth -->        <div data-bind="styleunit: { \'left\': !$root.surface().rtl() ? columnWidth : _width() - columnWidth() - columnSpacing(),\'width\': columnSpacing  }" class="dxrd-band-content-spasing"></div>        <div data-bind="styleunit: { \'left\': !$root.surface().rtl() ? columnWidth() + columnSpacing() : 0,\'width\': grayAreaWidth }" class="dxrd-band-content-greyarea">            <p data-bind="styleunit: {\'padding-top\': (height() / 2) - 23}">                <span data-bind="text: $root.getLocalization(\'Space for repeating columns.\', \'ReportStringId.MultiColumnDesignMsg1\')"></span><br>                <span data-bind="text: $root.getLocalization(\'Controls placed here will be printed incorrectly.\', \'ReportStringId.MultiColumnDesignMsg2\')"></span>            </p>        </div>        <!-- /ko -->        <!-- ko foreach: controls -->        <!-- ko template: { name: $data.template } -->        <!-- /ko -->        <!-- /ko -->    </div>    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->    <!-- /ko -->    <!-- /ko -->    <!-- ko if: collapsed -->    <!-- ko template: \'dxrd-band-collapsed\' -->    <!-- /ko -->    <!-- /ko -->',
                'dxrd-detailreportband': '<!-- ko ifnot: collapsed -->    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->    <!-- /ko -->    <!-- /ko -->    <!-- ko if: collapsed -->    <!-- ko template: \'dxrd-band-collapsed\' -->    <!-- /ko -->    <!-- /ko -->',
                'dxrd-band-collapsed': '<!-- ko if: collapsed -->    <div class="dxrd-band-collapsed dxd-selectable" data-bind="styleunit: { \'height\': height, \'line-height\': height, \'top\': absolutePosition.y, width: rect().width }" style="position:absolute">        <!-- ko if: $root.surface().rtl() -->        <div style="position: absolute" data-bind="text: (name() || \'\').toUpperCase(), styleunit: { \'right\': leftMargin }"></div>        <!-- /ko -->        <!-- ko if: !$root.surface().rtl() -->        <div style="position: absolute" data-bind="text: (name() || \'\').toUpperCase(), styleunit: { \'left\': leftMargin }"></div>        <!-- /ko -->    </div>    <!-- /ko -->',
                'dxrd-band-holder': '<!-- ko foreach: holder.bands -->    <!-- ko template: { name: $data[$parent.templateName], data: $parent.getData($data) } -->    <!-- /ko -->    <!-- /ko -->    <!-- ko with: holder.verticalBandsContainer -->    <!-- ko if: visible && !!$data[$parent.templateName] -->    <!-- ko template: { name: $data[$parent.templateName], data: $parent.getData($data) } -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->',
                'dxrd-vertical-band-selection': '<div data-bind="styleunit: { \'height\': height, \'width\': _width, left: absolutePosition.x }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: resizeHandles(), disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumWidth: minimumWidth(), minimumHeight: minimumHeight() },  css: { \'dxrd-band-content-selected\': selected() }, trackCursor: underCursor" style="position:absolute">        <div class="dxrd-vertical-band-marker" data-bind="css: { \'dxrd-vertical-band-marker-focused\': focused }">            <div class="dxrd-banding-marker-text" data-bind="text: name"></div>        </div>        <div style="height: calc(100% - 29px); width: 100%; position: absolute">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->            <!-- /ko -->        </div>    </div>',
                'dxrd-vertical-band': '<div class="dxrd-band-content dxrd-vertical-band" data-bind="styleunit: { \'width\': _width(), \'left\': absolutePosition.x() }">        <!-- ko if: $data._context.drawWatermark() -->        <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: false, band: $data, reportSurface: $data._context } } -->        <!-- /ko -->        <!-- /ko -->        <div data-bind="coordinateGrid: coordinateGridOptions" class="dxrd-band-content-grid"></div>        <!-- ko foreach: controls -->        <!-- ko template: { name: $data.template } -->        <!-- /ko -->        <!-- /ko -->    </div>',
                'dxrd-vertical-bands-container': '<!-- ko ifnot: collapsed -->    <div class="dxrd-band-content dxrd-vertical-bands-container" data-bind="styleunit: { \'height\': height, left: leftOffset, \'width\': width, top: topOffset },        resizable: { starting: function() {            $root.resizeHandler.started = true; $root.resizeHandler.starting();        }, stopped: function() {            $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;        }, handles: \'s\', forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }">        <div data-bind="styleunit: { \'width\': width }" style="height: 100%; overflow:hidden;position: absolute;">            <div data-bind="style: { transform: \'translateX(-\' + $data.scrollOffset() + \'px)\' }">                <!-- ko foreach: verticalBands -->                <!-- ko template: { name: templateName } -->                <!-- /ko -->                <!-- /ko -->                <div data-bind="styleunit: { width: grayAreaWidth, height: height, left: !$root.surface().rtl() ? grayAreaLeft : 0  }" class="dxrd-band-content-greyarea"></div>            </div>        </div>    </div>    <!-- /ko -->    <!-- ko if: collapsed -->    <div class="dxrd-band-collapsed" data-bind="styleunit: { \'height\': height, \'line-height\': height, \'top\': topOffset, width: width }" style="position:absolute">        <div style="position: absolute" data-bind="text: (name || \'\').toUpperCase(), styleunit: { \'right\': $root.surface().rtl() ? leftMargin : \'auto\', \'left\': !$root.surface().rtl() ? leftMargin: \'auto\' }"></div>    </div>    <!-- /ko -->',
                'dxrd-vertical-bands-container-selection': '<!-- ko ifnot: collapsed -->    <div data-bind="styleunit: { \'width\': width, top: topOffset, left: leftOffset, height: height() }" style="overflow:hidden;position: absolute;">        <div data-bind="dxScrollView: $data.createScrollViewOptions($data, $root.selection)">            <!-- ko foreach: verticalBands -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>    </div>    <!-- /ko -->',
                'dxrd-vertical-bands-container-vruler': '<!-- ko with: surface -->    <div class="dxrd-band-marker-wrapper" data-bind="styleunit: { \'width\': markerWidth() + 20, \'top\': topOffset, \'height\': height }" style="position:absolute">        <div class="dxrd-band-vruler" data-bind="styleunit: { \'height\': height, top: $data.bandOffset },    resizable: { starting: function() {        $root.resizeHandler.started = true; $root.resizeHandler.starting();    }, stopped: function() {        $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;    }, handles: \'s\', forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }">            <div data-bind="ruler: { \'zoom\': zoom, \'length\': height, \'units\': $parent.measureUnit, \'direction\': \'vertical\', flip: $root.dx[\'config\']()[\'rtlEnabled\'] }"></div>        </div>        <div class="dxrd-band-marker dxrd-band-marker-body" data-bind="             css: {                 \'dxrd-band-marker-body\' : !$data.focused(),                \'dxrd-band-marker-body-focused\' : $data.focused()              },              styleunit: {                \'height\': height(),                 \'width\': markerWidth              },              click: function(_, e) { $data.markerClick($root.selection); e.stopPropagation(); },             resizable: {                 starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); },                 stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; },                handles: \'s\',                 disabled: collapsed,                 forceResize: resize,                 zoom: $root.surface().zoom,                 minimumHeight: minHeight()              }">            <div style="width: 1px; height: 1px; margin-left: 9px;"></div>            <div class="dxrd-band-marker-rotation">                <div class="dxrd-band-marker-rotation-text" data-bind="text: collapsed() ? \'\' : name"></div>            </div>        </div>    </div>    <!-- /ko -->',
                'dxrd-vertical-bands-leftMargin-selection': '<!-- ko with: surface -->    <div data-bind="styleunit: { \'height\': height, \'width\': $parent.width, top: topOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }" style="position:absolute">    </div>    <!-- /ko -->',
                'dxrd-vertical-bands-leftMargin': '<!-- ko with: surface -->    <div data-bind="css: { \'dxrd-band-content\': !$data.collapsed(), \'dxrd-band-collapsed\': $data.collapsed() }, styleunit: { \'height\': height, top: topOffset }">    </div>    <!-- /ko -->',
                'dxrd-barcode-content': '<div style="margin:auto; width: 150px; height: 37px;" class="dxrd-image-surface-barcode"></div><div data-bind="styleunit: { \'lineHeight\': (contentSizes().height - 37) / _context.zoom() }">    <div class="dxrd-control-content" data-bind="text: displayName, style: contentCss"></div></div>',
                'dxrd-calculatedfield-content': '<div data-bind="with: propertyGrid">    <!-- ko foreach: getEditors() -->    <!-- ko template: editorTemplate -->    <!-- /ko -->    <!-- /ko --></div>',
                'dxrd-charactercomb-content': '<!-- ko foreach: cells --><div class="dxrd-charactercomb-cell" style="position:absolute" data-bind="styleunit: { width: size.width, height: size.height, top: top, left: left }">    <div style="position:absolute">        <div data-bind="style: $parent.css, text: text, styleunit: { lineHeight: size.height(), width: size.width, height: size.height }" style="position:absolute; letter-spacing:1px;"></div>        <div data-bind="style: $parent.borderCss, styleunit: { width: size.width, height: size.height }" style="position:absolute; box-sizing:border-box"></div>    </div></div><!-- /ko -->',
                'dxrd-charactercomb': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate">    <div class="dxrd-control-content-main" style="border: 1px solid silver;left:0; top: 0;" data-bind="styleunit: { lineHeight: rect().height, height: rect().height, width: rect().width }">        <div style="position:relative; overflow:hidden; margin-top:-1px; margin-left:-1px;" data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { height: rect().height / _context.zoom(), width: rect().width / _context.zoom() }">        </div>    </div></div>',
                'dxrd-chart-designer-popup': '<div class="dxrd-chartdesigner-popup" data-bind="dxPopup: {            showTitle: true,            width: \'95%\',            height: \'95%\',            title: $root.getLocalization(\'Chart Designer\', \'ChartDesignerStringIDs.ChartDesignerWindowTitle\'),            visible: visible,            toolbarItems: buttons,            showCloseButton: true,            container: container($element),            position: { of: container($element) }}">    <div class="dxrd-chartdesigner-popup-content">        <div style="width:100%; height:100%" data-bind="visible: visible, dxChartDesigner: options"></div>    </div></div>',
                'dxrd-chart-selection': '<div class="dxrd-control" data-bind="visible: selected() || focused(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">    <div class="dxd-border-accented dxrd-control-border-box"></div>    <div class="dxrd-chart-panel">        <div class="dxrd-chart-panel-text" data-bind="dxAction: function() { $root.runChartDesigner($data); }, text: runDesignerButtonText(), attr: { title: runDesignerButtonText() }"></div>    </div></div><div class="dxrd-control" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}"></div>',
                'dxrd-checkbox-content': '<div data-bind="style: { cssFloat: isGlyphAlignmentNear() ? \'left\': \'right\', width: checkStateWidth() }, styleunit: { lineHeight: contentHeightWithoutZoom }" style="text-align:center ">    <div class="dxrd-checkbox-checkstate" data-bind="css: checkStateClass"></div></div><div style="display: inline-block; box-sizing: border-box; letter-spacing: normal; padding-left:3px" data-bind="styleunit: { width: textWidth, lineHeight: contentHeightWithoutZoom }, visible: visibleText, style: { cssFloat: isGlyphAlignmentNear() ? \'right\': \'left\' }">    <span class="dxrd-control-content dxrd-control-content-multiline" data-bind="controlDisplayName: $data, style: contentCss, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }"></span></div>',
                'dxrd-control-content': '<div style="box-sizing: border-box; letter-spacing: normal; width:100%" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }">    <div class="dxrd-control-content" data-bind="controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }"></div></div>',
                'dxrd-control-selection': '<div class="dxrd-control" data-bind="event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: selected() || focused(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">    <div class="dxd-border-accented dxrd-control-border-box"></div>    <!-- ko if: $root.inlineTextEdit.visible() && selected() -->    <!-- ko with: $root.inlineTextEdit-->    <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div>    <!-- /ko -->    <!-- /ko -->    <!-- ko if: $data.controls-->    <!-- ko foreach: controls -->    <!-- ko template: { name: $data.selectiontemplate } -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko --></div><div class="dxrd-control" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}">    <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}">        <!-- ko if: $data.controls-->        <!-- ko foreach: controls -->        <!-- ko template: { name: $data.selectiontemplate } -->        <!-- /ko -->        <!-- /ko -->        <!-- /ko -->    </div></div>',
                'dxrd-control': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate">    <div class="dxrd-control-content-main" data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left, lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width }, style: css">        <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }">        </div>        <!-- ko if: $data.controls -->        <!-- ko foreach: controls -->        <!-- ko template: { name: $data.template } -->        <!-- /ko -->        <!-- /ko -->        <!-- /ko -->    </div>    <div data-bind="style: borderCss" style="width:100%; height: 100%; position:absolute; box-sizing:border-box"></div></div>',
                'dxrd-coordinategrid': '<svg data-bind="style: { \'height\': height() + \'px\',  \'width\': width() + \'px\' }, attr: { viewBox: \'0 0 \' + width() + \' \' + height() }">    <g transform="translate(0, 0)">        <!-- ko foreach: verticalGridLines -->        <line y1="0" y2="100%" class="minor-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }, visible: visible"></line>        <!-- /ko -->    </g>    <g transform="translate(0, 0)">        <!-- ko foreach: horizontalGridLines -->        <line x1="0" x2="100%" class="minor-graduation" data-bind="attr: { y1: coordVal, y2: coordVal }, visible: visible"></line>        <!-- /ko -->    </g>    <g transform="translate(0, 0)">        <!-- ko foreach: majorVerticalGridLines -->        <line y1="0" y2="100%" class="major-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }, visible: visible"></line>        <!-- /ko -->    </g>    <g transform="translate(0, 0)">        <!-- ko foreach: majorHorizontalGridLines -->        <line x1="0" x2="100%" class="major-graduation" data-bind="attr: { y1: coordVal, y2: coordVal }, visible: visible"></line>        <!-- /ko -->    </g></svg>',
                'dxrd-crossband-line': '<svg class="dxrd-cross-band dxrd-control dxd-selectable" data-bind="styleunit: position" >    <line data-bind="attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'} , style: lineCss" />    <!-- ko if: isIntersect -->    <line class="dxrd-cross-band-intersect" data-bind="attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'}, style: lineWidthCss  " />    <!-- /ko --></svg>',
                'dxrd-crossband': '<div class="dxrd-cross-band" data-bind="styleunit: position, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }">    <div class="dxrd-control dxd-selectable" style="width: 100%; height: 5px; position: absolute;top:0" data-bind="trackCursor: edgeUnderCursor"></div>    <div class="dxrd-control dxd-selectable" style="width: 5px; height: 100%; position: absolute;left:0" data-bind="trackCursor: edgeUnderCursor"></div>    <div class="dxrd-control dxd-selectable" style="width: 5px; height: 100%; position: absolute;right:0" data-bind="trackCursor: edgeUnderCursor"></div>    <div class="dxrd-control dxd-selectable" style="width: 100%; height: 5px; position: absolute;bottom:0" data-bind="trackCursor: edgeUnderCursor"></div>    <svg width="100%" height="100%">        <line data-bind="attr: { x1: borderWidth()/2, x2: borderWidth()/2, y1: 0, y2: \'100%\' }, style: rightCss" />        <line data-bind="attr: { x1: 0, x2: \'100%\', y1: borderWidth()/2, y2: borderWidth()/2 }, style: topCss" />        <line data-bind="attr: { x1: rect().width-borderWidth()/2, x2: rect().width-borderWidth()/2, y1: 0, y2: \'100%\' }, style: leftCss" />        <line data-bind="attr: { x1: 0, x2: \'100%\', y1: rect().height-borderWidth()/2, y2: rect().height-borderWidth()/2 }, style: bottomCss" />    </svg></div>',
                'dxrd-datasource-item': '<div class="dx-fieldset">    <div data-bind="dxCollectionEditor: { values: ko.observable(tableInfoItems), displayName: $root.getLocalization(\'Filter Criteria\', \'ASPxReportsStringId.ReportDesigner_DataSource_FilterCriteriaTitle\'), hideButtons: true }">        <div class="dx-field dxd-back-primary">            <!-- ko with: value -->            <div class="dx-field-label dxd-text-primary" data-bind="text: tableName"></div>            <!-- ko if: $data.filterString() !== null -->            <div class="dx-field-value" style="margin-right:5px" data-bind="dxFilterEditor: { options: filterString, fieldListProvider: $root.dataBindingsProvider, getDisplayNameByPath: $root.getDisplayNameByPath }"></div>            <!-- /ko -->            <!-- /ko -->        </div>    </div></div>',
                'dxrd-expressions-tab': '<div class="dxrd-properties-wrapper dxrd-expressions-tab" data-bind="visible: active() && visible()">        <div style="height:100%">            <div class="dxrd-right-panel-header dxd-text-primary">                <span data-bind="text: text"></span>            </div>            <!-- ko with: model -->            <!-- ko if: $root.controlsStore.visible() -->            <div class="dx-property-grid-header">                <div class="dx-property-grid-header-content">                    <div class="dx-property-grid-selected-component">                        <div class="dxrd-properties-focused-item" style="margin:0" data-bind="dxSelectBox: {                        dataSource: $root.controlsStore.dataSource,                        value: $root.editableObject,                        displayExpr: function(value) {                             var showValue = value || $root.editableObject();                             return $root.dx.Designer.getControlFullName(showValue)                               }                }">                        </div>                    </div>                </div>            </div>            <!-- /ko -->            <div class="dxrd-properties-grid dxd-border-primary" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }" style="top: 80px">                <!-- ko template: \'dx-propertieseditor\' -->                <!-- /ko -->            </div>            <!-- /ko -->        </div>    </div>',
                'dxrd-fieldlistwrapper': '<div class="dxrd-fieldslist-wrapper" data-bind="visible: active() && visible()" style="height: 100%; overflow:hidden">    <!-- ko with: model -->    <div class="dxrd-right-panel-header dxd-text-primary">        <div class="dxrd-fieldslist-wrapper-header" data-bind="text: $root.getLocalization(\'Field List\', \'ReportStringId.UD_Title_FieldList\')"></div>        <div id="btn-add-dataSouce" class="dxrd-collectioneditor-action" style="line-height: 20px; margin-top: 8px" data-bind="dxButtonWithTemplate: { onClick: showPopover, icon: \'dxrd-svg-operations-add_datasource\', iconClass: \'dxrd-image-add-datasource\', visible: addDataSourceBtnVisible }, attr: { title: $root.getLocalization(\'Add Data Source\', \'ReportStringId.UD_Title_FieldList_AddNewDataSourceText\') }">        </div>        <div class="dxrd-add-dataSource-popup-content" data-bind="dxPopover:{ width: 200, visible: popoverVisible, target: \'#btn-add-dataSouce\', container: $root.getPopupContainer($element), title:$root.getLocalization(\'Add Data Source\', \'ReportStringId.UD_Title_FieldList_AddNewDataSourceText\') + \':\' }">            <div data-bind="dxList: { dataSource: dataSourceListItems(), onItemClick: itemClickAction }">                <div data-options="dxTemplate : { name: \'item\' }">                    <div class="dxrd-list-item-ellipsis-text" data-bind="text: name, attr: { title: name }"></div>                </div>            </div>        </div>    </div>    <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }">        <div class="dx-editors">            <div id="tree" data-bind="treelist: treeListOptions" style="width:100%; height: 100%;"></div>        </div>    </div>    <!-- /ko --></div>',
                'dxrd-line-content': '<svg style="position:absolute; left:0; width:100%; height: 100%">    <line data-bind="attr: { x1: linePosition().x1 / _context.zoom(), x2: linePosition().x2 / _context.zoom(), y1: linePosition().y1 / _context.zoom(), y2: linePosition().y2 / _context.zoom() }, style: contentCss" /></svg>',
                'dxrd-navigation-panel-template': '<!-- ko ifnot: $root.isLoading() && tabs().length === 1-->    <!-- ko if: allowMDI -->    <!-- ko if: tabs().length > 0 -->    <!-- ko template: \'dxrd-navigation-panel-template-content\' -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->    <!-- ko ifnot: allowMDI -->    <!-- ko if: tabs().length > 1 -->    <!-- ko template: \'dxrd-navigation-panel-template-content\' -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->',
                'dxrd-navigation-panel-template-content': '<div class="dxrd-navigation-panel-wrapper" data-bind="style: { width: $root.surfaceSize() ? $root.surfaceSize() + \'px\' : \'auto\' }">        <div data-bind="dxTabs: { dataSource: tabs, selectedIndex: selectedIndex, showNavButtons: false }">            <div data-options="dxTemplate: { name: \'item\' }">                <!-- ko if: icon -->                <div class="dx-icon" data-bind="css: icon, event: { mousedown: function(e) { $parent.removeTab(e); } }"></div>                <!-- /ko -->                <div class="dx-tab-title-wrapper">                    <div class="dx-tab-title" data-bind="text: isDirty() ? displayName() + \'*\' : displayName(), title: displayName, style: { \'font-weight\': isDirty() ? \'bold\' : \'normal\' }"></div>                </div>            </div>        </div>    </div>',
                'dxrd-pagebreak-selection': '<div class="dxrd-control dxrd-pagebreak" data-bind="visible: isSelected(), trackCursor: underCursor, css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }">    <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control dxrd-pagebreak" data-bind="visible: !isSelected(), trackCursor: underCursor, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }"></div>',
                'dxrd-pagebreak': '<div class="dxrd-control dxd-selectable" style="border:none; background: none;" data-bind="styleunit: position">    <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': lineHeight, \'height\': lineHeight, \'width\': position.width() / _context.zoom() }">    </div></div>',
                'dxrd-picturebox-selection': '<div class="dxrd-control" data-bind="visible: selected() || focused(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizeOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">    <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}">    <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}">    </div></div>',
                'dxrd-pivotgrid-field-selection': '<div class="dxrd-pivot-field" data-bind="styleunit: { \'width\': Math.max(positionWidthWithoutZoom(), minWidth()), \'height\': position.height() / _context.zoom() }, trackCursor: underCursor"></div>',
                'dxrd-pivotgrid-field': '<div class="dxrd-pivot-field" data-bind="css: {\'dxrd-pivot-field-selected\': selected }, zoom: 1/_context.zoom(), styleunit: { \'width\': Math.max(position.width(), minWidth() * _context.zoom()), \'height\': position.height }">    <div class="dxrd-pivot-field-content" data-bind="text: displayName, zoom: _context.zoom"></div></div>',
                'dxrd-pivotGridFields': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, addHandler: $root.dx.Designer.Pivot.PivotGridFieldViewModel.createNew(_model), displayName: $root.getLocalization(displayName), level: level, info: info }">        </div>    </div>',
                'dxrd-pivot-sortBySummaryInfo-conditions': '<div class="dx-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: {                 values: value,                 displayName: displayName,                 level: level,                 info: info,                 addHandler: function(){ return $root.dx.Designer.Pivot.SortBySummaryInfoCondition.createNew($parents[1].value()) }             }">        </div>    </div>',
                'dxrd-pivotgrid-content': '<div style="box-sizing: border-box; letter-spacing: normal; width:100%; height:100%" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }">    <div class="dxrd-control-content" data-bind="style: contentCss" style="width: 100%; height: 100%">        <div class="dxrd-pivot-content" data-bind="css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }">            <div class="dxrd-pivot-filter-area">                <!-- ko if: filterFields().length !== 0 -->                <div class="dxrd-pivot-fields-wrapper">                    <!-- ko foreach: filterFields -->                    <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }">                        <!-- ko template: { name: $data.template } -->                        <!-- /ko -->                    </div>                    <!-- /ko -->                </div>                <!-- /ko -->                <!-- ko if: filterFields().length === 0 -->                <div class="dxrd-pivot-text-wrapper">                    <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Filter Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields\')"></div>                </div>                <!-- /ko -->            </div>            <div class="dxrd-pivot-grid-area">                <div class="dxrd-pivot-grid-area-left">                    <div class="dxrd-pivot-rows-area">                        <div class="dxrd-pivot-rows-header" data-bind="styleunit: { width: totalsRowFieldWidth, height: rowHeaderHeight }">                            <!-- ko if: rowFields().length !== 0 -->                            <div class="dxrd-pivot-fields-wrapper">                                <!-- ko foreach: rowFields -->                                <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }">                                    <!-- ko template: { name: $data.template } -->                                    <!-- /ko -->                                </div>                                <!-- /ko -->                            </div>                            <!-- /ko -->                            <!-- ko if: rowFields().length === 0 -->                            <div class="dxrd-pivot-text-wrapper">                                <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Row Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields\')"></div>                            </div>                            <!-- /ko -->                        </div>                        <div class="dxrd-pivot-total" data-bind="text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div>                    </div>                </div>                <div class="dxrd-pivot-grid-area-right">                    <div class="dxrd-pivot-columns-header">                        <!-- ko if: columnFields().length !== 0 -->                        <div class="dxrd-pivot-fields-wrapper">                            <!-- ko foreach: columnFields -->                            <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }">                                <!-- ko template: { name: $data.template } -->                                <!-- /ko -->                            </div>                            <!-- /ko -->                        </div>                        <!-- /ko -->                        <!-- ko if: columnFields().length === 0 -->                        <div class="dxrd-pivot-text-wrapper">                            <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Column Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields\')"></div>                        </div>                        <!-- /ko -->                    </div>                    <div class="dxrd-pivot-data-header" data-bind="styleunit: { width: totalsDataFieldWidth }">                        <div class="dxrd-pivot-total-wrapper">                            <div class="dxrd-pivot-total" data-bind="styleunit: { height: totalsHeight }, text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div>                        </div>                        <div class="dxrd-pivot-data-area">                            <!-- ko if: dataFields().length !== 0 -->                            <!-- ko foreach: dataFields -->                            <div class="dxrd-pivot-data-field" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }">                                <div class="dxrd-pivot-field-wrapper">                                    <!-- ko template: { name: $data.template } -->                                    <!-- /ko -->                                </div>                                <div class="dxrd-pivot-field-empty"></div>                            </div>                            <!-- /ko -->                            <!-- /ko -->                            <!-- ko if: dataFields().length === 0 -->                            <div class="dxrd-pivot-field-empty">                                <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Data Items Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems\')"></div>                            </div>                            <!-- /ko -->                        </div>                    </div>                </div>            </div>        </div>    </div></div>',
                'dxrd-pivotgrid-selection-context': '<div class="dxrd-control-content" style="width: 100%; height: 100%; line-height:normal; overflow:hidden">        <div class="dxrd-pivot-content" style="width:100%; height:100%; overflow:hidden;" data-bind="zoom: _context.zoom(), css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }">            <div class="dxrd-pivot-filter-area">                <!-- ko if: filterFields().length !== 0 -->                <div class="dxrd-pivot-fields-wrapper">                    <!-- ko foreach: filterFields -->                    <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }">                        <!-- ko template: { name: $data.selectiontemplate } -->                        <!-- /ko -->                    </div>                    <!-- /ko -->                </div>                <!-- /ko -->                <!-- ko if: filterFields().length === 0 -->                <div class="dxrd-pivot-text-wrapper">                    <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Filter Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields\')"></div>                </div>                <!-- /ko -->            </div>            <div class="dxrd-pivot-grid-area">                <div class="dxrd-pivot-grid-area-left">                    <div class="dxrd-pivot-rows-area">                        <div class="dxrd-pivot-rows-header" data-bind="styleunit: { width: totalsRowFieldWidth, height: rowHeaderHeight }">                            <!-- ko if: rowFields().length !== 0 -->                            <div class="dxrd-pivot-fields-wrapper">                                <!-- ko foreach: rowFields -->                                <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }">                                    <!-- ko template: { name: $data.selectiontemplate } -->                                    <!-- /ko -->                                </div>                                <!-- /ko -->                            </div>                            <!-- /ko -->                            <!-- ko if: rowFields().length === 0 -->                            <div class="dxrd-pivot-text-wrapper">                                <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Row Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields\')"></div>                            </div>                            <!-- /ko -->                        </div>                        <div class="dxrd-pivot-total" data-bind="text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div>                    </div>                </div>                <div class="dxrd-pivot-grid-area-right">                    <div class="dxrd-pivot-columns-header">                        <!-- ko if: columnFields().length !== 0 -->                        <div class="dxrd-pivot-fields-wrapper">                            <!-- ko foreach: columnFields -->                            <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }">                                <!-- ko template: { name: $data.selectiontemplate } -->                                <!-- /ko -->                            </div>                            <!-- /ko -->                        </div>                        <!-- /ko -->                        <!-- ko if: columnFields().length === 0 -->                        <div class="dxrd-pivot-text-wrapper">                            <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Column Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields\')"></div>                        </div>                        <!-- /ko -->                    </div>                    <div class="dxrd-pivot-data-header" data-bind="styleunit: { width: totalsDataFieldWidth }">                        <div class="dxrd-pivot-total-wrapper">                            <div class="dxrd-pivot-total" data-bind="styleunit: { height: totalsHeight }, text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div>                        </div>                        <div class="dxrd-pivot-data-area">                            <!-- ko if: dataFields().length !== 0 -->                            <!-- ko foreach: dataFields -->                            <div class="dxrd-pivot-data-field" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }">                                <div class="dxrd-pivot-field-wrapper">                                    <!-- ko template: { name: $data.selectiontemplate } -->                                    <!-- /ko -->                                </div>                                <div class="dxrd-pivot-field-empty"></div>                            </div>                            <!-- /ko -->                            <!-- /ko -->                            <!-- ko if: dataFields().length === 0 -->                            <div class="dxrd-pivot-field-empty">                                <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Data Items Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems\')"></div>                            </div>                            <!-- /ko -->                        </div>                    </div>                </div>            </div>        </div>    </div>',
                'dxrd-pivotgrid-selection': '<div class="dxrd-control" data-bind=" visible: !($data.selected() || $data.focused()), css: { \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, styleunit: position, trackCursor: underCursor">        <!-- ko template: \'dxrd-pivotgrid-selection-context\' -->        <!-- /ko -->    </div>    <div class="dxrd-control" data-bind="visible: $data.selected() || $data.focused(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">        <div class="dxd-border-accented dxrd-control-border-box"></div>        <!-- ko template: \'dxrd-pivotgrid-selection-context\' -->        <!-- /ko -->    </div>',
                'dxrd-report-dialog-template': '<div class="dxrd-reportdialog dx-editors dx-widget" data-bind="dxPopup: {            showTitle: true,            width: width,            height: height,            title: $root.getLocalization(title),            visible: visible,            toolbarItems: buttons,            showCloseButton: true,            container: container($element),            position: { of: container($element) }}">        <!-- ko template: { name: template, data: model } -->        <!-- /ko -->    </div>',
                'dxrd-report-dialog-converter-template': '<div class="dxrd-reportdialog dx-editors dx-widget" data-bind="dxPopup: {            showTitle: true,            minWidth: 460,            height: 260,            width: \'auto\',            title: popupOptions.title,            visible: popupOptions.visible,            toolbarItems: popupOptions.buttons,            showCloseButton: true,            container: popupOptions.container($element),            position: { of: popupOptions.container($element) }}">        <div class="dxrd-reportdialog-converter-content" data-bind="text: popupOptions.confirmMessage"></div>    </div>',
                'dxrd-savereport-dialog-content': '<div class="dxrd-reportdialog-content">        <div class="dx-fieldset">            <div class="dx-field dxd-back-primary">                <div data-bind="dxTextBox: { value: $data.reportName, height: 36, placeholder: reportNamePlaceholder(), valueChangeEvent: \'keyup\' }"></div>            </div>        </div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-reportdialog-urls" data-bind="dxList: { dataSource: urls, selectedItems: [], editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportName(e.itemData.Value); }, activeStateEnabled: false, noDataText: $data.noDataText, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\') }">                <div data-options="dxTemplate : { name: \'item\' }">                    <div data-bind="text: $data.Value"></div>                </div>            </div>        </div>    </div>',
                'dxrd-savereport-dialog-content-light': '<div class="dxrd-reportdialog-easy-content" data-bind="text: saveText"></div>',
                'dxrd-openreport-dialog-content': '<div class="dxrd-reportdialog-content">        <div class="dx-fieldset">            <div class="dx-field dxd-back-primary">                <div class="dx-property-grid-search-box" data-bind="dxTextBox: { mode: \'search\', height: 36, value: searchValue, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true }"></div>            </div>        </div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-reportdialog-urls" data-bind="dxList: { dataSource: urls, selectedItems: [], searchExpr: [\'Value\'], searchValue: searchValue, editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportUrl(e.itemData.Key); }, activeStateEnabled: false, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\'), noDataText: $data.noDataText }">                <div data-options="dxTemplate : { name: \'item\' }">                    <div data-bind="text: $data.Value"></div>                </div>            </div>        </div>    </div>',
                'dxrd-report': '<div class="dxrd-surface" data-bind="styleunit: { \'width\': Math.min(pageWidth() + maxMarkerWidth(), $root.surfaceSize()) }, css: { \'dxrd-surface-rtl\': rtl() }, click: function(surface, e) { $root.selection.clickHandler($root.selection.dropTarget ? null : surface, e); e.stopPropagation(); }, keyDownActions: $root.actionLists">    <div class="dxrd-content-panel-wrapper" data-bind="styleunit: $root.dx[\'config\']()[\'rtlEnabled\'] ?  { right: maxMarkerWidth() } : { left: maxMarkerWidth() }">        <div class="dxrd-content-panel">            <div class="dxrd-hruler-wrapper">                <div class="dxrd-hruler" data-bind="styleunit: { left: leftMarginOffset,\'width\': margins.left }">                    <div data-bind="ruler: { \'zoom\': zoom, \'length\': margins.left, \'units\': measureUnit, flip: ko.computed(function(){ return !rtl(); }) }"></div>                    <div class="dxrd-ruler-shadow" data-bind="styleunit: { left: 0, \'width\': margins.left }"></div>                </div>                <div class="dxrd-hruler" data-bind="styleunit: { \'width\': (pageWidth() - margins.left()), left: ghostContainerOffset }">                    <div class="dxrd-margin-resizable" data-bind="styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizable: leftMarginResizeOptions($root.undoEngine, $element)"></div>                    <div data-bind="ruler: { \'zoom\': zoom, \'length\': function() { return pageWidth() - margins.left();}, \'units\': measureUnit, flip: rtl }"></div>                    <div class="dxrd-ruler-shadow" data-bind="styleunit: { left: rightMarginOffset, width: margins.right }, resizable: rightMarginResizeOptions($root.undoEngine, $element)"></div>                </div>                <div class="dxrd-vscroller-space" data-bind="styleunit: { \'left\': pageWidth() }"></div>            </div>            <div class="dxrd-viewport" data-bind="styleunit: { minWidth: Math.min(pageWidth(), $root.surfaceSize()) - maxMarkerWidth(), maxWidth: pageWidth(),  maxHeight: effectiveHeight }, event: { scroll: function() { $root.onViewPortScroll($element) } }">                <div data-bind="selectable: { selection: $root.selection, zoom: zoom }">                    <div class="dxrd-leftMargin" data-bind="styleunit: { left: leftMarginOffset, width: margins.left() }">                        <div class="dxrd-selection" style="position:absolute">                            <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left }; } } }-->                            <!-- /ko -->                        </div>                        <div class="dxrd-flip">                            <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left, snapGridSize: $data.snapGridSize  }; } } }-->                            <!-- /ko -->                        </div>                    </div>                    <div class="dxrd-ghost-containment" data-bind="styleunit: { left: ghostContainerOffset }">                        <div class="dxrd-ghost-container" data-bind="styleunit: { \'width\': pageWidthWithoutMargins, \'height\': minHeight }, trackCursor: underCursor ">                            <div class="dxrd-bands-content dxrd-main">                                <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->                                <!-- /ko -->                                <!-- ko foreach: crossBandControls -->                                <!-- ko if: visible -->                                <!-- ko template: { name: template } -->                                <!-- /ko -->                                <!-- /ko -->                                <!-- /ko -->                                <svg style="height: 100%; position: absolute; top: 0; width: 1px; z-index:-1" data-bind="styleunit: { left: leftMarginOffset() }">                                    <line data-bind="attr: { x1: 0, x2: 0 }" y1="0" y2="100%" style="stroke: rgb(128, 128, 128); stroke-width: 0.5px; stroke-dasharray:5px,5px" />                                </svg>                                <svg class="dxrd-rightMargin-border" data-bind="styleunit: { left: rtl() ? margins.right() : rightMarginOffset() }, visible: margins.right() > 0">                                    <line data-bind="attr: { x1: 0, x2: 0 }" y1="0" y2="100%" style="stroke: rgb(220, 220, 220); stroke-width: 3px; stroke-dasharray:5px,5px" />                                </svg>                                <!-- ko template: { name: \'dxd-snap-lines-holder\', data: $root.snapHelper } -->                                <!-- /ko -->                                <div class="dxrd-drag-helper-source" data-bind="styleunit: { top: $root.dragHelperContent.top, left: $root.dragHelperContent.left, width: $root.dragHelperContent.width, height: $root.dragHelperContent.height }, css: { \'dxrd-locked\': $root.dragHelperContent.isLocked }">                                    <!-- ko foreach: $root.dragHelperContent.controls -->                                    <div class="dxrd-drag-helper-control" data-bind="styleunit: { left: $data.left, top: $data.top, width: $data.width, height: $data.height }, css: $data.className">                                        <!-- ko with: $root.dragHelperContent.customData() -->                                        <div data-bind="template: { name: $data.template, data: $data.data }"></div>                                        <!-- /ko -->                                    </div>                                    <!-- /ko -->                                </div>                            </div>                            <div class="dxrd-bands-content dxrd-selection" data-bind="styleunit: { \'width\': pageWidthWithoutMargins }">                                <div class="dxrd-bands-content-offset">                                    <div class="dxrd-leftMargin-resizable" data-bind="styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizable: leftMarginResizeOptions($root.undoEngine, $element)"></div>                                    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->                                    <!-- /ko -->                                    <!-- ko foreach: crossBandControls -->                                    <!-- ko if: visible -->                                    <div class="dxrd-cross-band dxd-border-accented" data-bind="visible: isSelected() && !$root.dx.Designer.DragDropHandler.started(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">                                    </div>                                    <!-- /ko -->                                    <!-- /ko -->                                    <div class="dxrd-rightMargin-resizable" data-bind="styleunit: { left: rightMarginResizableOffset }, resizable: rightMarginResizeOptions($root.undoEngine, $element)"></div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div>    <div class="dxrd-bands-panel-wrapper" data-bind="styleunit: { width: maxMarkerWidth() }">        <div class="dxrd-bands-panel">            <div class="dxrd-band-headers">                <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $data.measureUnit }; } } }-->                <!-- /ko -->            </div>        </div>        <div class="dxrd-hscroller-space"></div>    </div></div>',
                'dxrd-reportexplorerwrapper': '<div class="dxrd-fieldslist-wrapper" data-bind="visible: active() && visible()" style="height: 100%; overflow:hidden">        <div class="dxrd-right-panel-header dxd-text-primary">            <div class="dxrd-fieldslist-wrapper-header" data-bind="text: $root.getLocalization(\'Report Explorer\', \'ReportStringId.UD_Title_ReportExplorer\')"></div>        </div>        <!-- ko with: model-->        <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }, dxAutoScrolling: { active: $root.dx.Designer.DragDropHandler.started }">            <div id="tree" data-bind="treelist: { selectedPath: itemsProvider.selectedPath, itemsProvider: itemsProvider, treeListController: treeListController }" style="width:100%; height: 100%;"></div>        </div>        <!-- /ko -->    </div>',
                'dxrd-ruler': '<svg data-bind="attr: { \'width\': width() + \'px\', \'height\': height() + \'px\' }">    <rect width="100%" height="100%" stroke-width="1px" stroke="gray" class="ruler"></rect>    <!-- ko if: disable -->    <rect data-bind="attr: { x: disable.start, width: disable.width }" height="100%" fill="grey" fill-opacity="0.5"></rect>    <!-- /ko -->    <!-- ko foreach: gridLines -->    <line y1="80%" y2="100%" class="ruler-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }"></line>    <!-- /ko -->    <!-- ko foreach: majorGridLines -->    <line y1="70%" y2="100%" class="ruler-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }"></line>    <!-- /ko -->    <g transform="translate(-3, 0)">        <!-- ko foreach: majorGridLines -->        <text class="ruler-mark" data-bind="text: text, attr: {x: coordVal, y: 12 }"></text>        <!-- /ko -->    </g>    <!--<text class="ruler-mark" transform="translate(4, 14)">0</text>--></svg>',
                'dxrd-rulervertical': '<svg data-bind="attr: { \'width\': width() + \'px\', \'height\': height() + \'px\' }">    <rect width="100%" height="100%" stroke-width="1px" stroke="gray" class="ruler"></rect>    <!-- ko foreach: gridLines -->    <line class="ruler-graduation" data-bind="attr: { x1: $parent.defaultGridLinesCoordinate().x1, x2: $parent.defaultGridLinesCoordinate().x2, y1: coordVal, y2: coordVal }"></line>    <!-- /ko -->    <!-- ko foreach: majorGridLines -->    <line class="ruler-graduation" data-bind="attr: {x1: $parent.defaultGridLinesCoordinate().majorX1, x2: $parent.defaultGridLinesCoordinate().majorX2, y1: coordVal, y2: coordVal }"></line>    <!-- /ko -->    <g transform="translate(0, 3)">        <!-- ko foreach: majorGridLines -->        <text class="ruler-mark" data-bind="text: text, attr: {x: $parent.defaultGridLinesCoordinate().x, y: coordVal }"></text>        <!-- /ko -->    </g>    <!--<text class="ruler-mark" transform="translate(4, 14)">0</text>--></svg>',
                'dxrd-scripts-addon': '<!-- ko if: editorVisible -->     <div class="dxrd-designer-wrapper dx-editors dxd-surface-back-color dxd-back-primary" data-bind="css: { \'dx-rtl\' : $root.rtl, \'dx-ltr\': !$root.rtl }">        <div class="dxrd-toolbar-wrapper">            <div class="dxrd-toolbar" data-bind="template: { name: \'dxrd-toolbar-tmplt\', data: toolbarItems }"></div>        </div>        <div class="dxrd-scripts-wrapper">            <div class="dxrd-scripts-editor dxd-back-primary2" data-bind="dxAceEditor: { value: scriptsText, editorContainer: editorContainer, options: aceOptions }">            </div>        </div>    </div>    <!-- /ko -->',
                'dxrd-scripting-controlchooser': '<div class="dxrd-toolbar-item dxrd-toolbar-selectbox">        <div data-bind="dxSelectBox: { dataSource: controls, value: control, displayExpr: displayExpr, placeholder: $root.getLocalization(\'Select control...\', \'ASPxReportsStringId.ReportDesigner_ScriptEditor_Toolbar_SelectControl\'), width: \'300px\' }"></div>        <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div>    </div>',
                'dxrd-scripting-eventchooser': '<div class="dxrd-toolbar-item dxrd-toolbar-selectbox">        <div data-bind="dxSelectBox: { items: events, value: event, placeholder: $root.getLocalization(\'Select event...\', \'ASPxReportsStringId.ReportDesigner_ScriptEditor_Toolbar_SelectEvent\'), width: \'200px\' }"></div>        <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div>    </div>',
                'dxrd-scripts': '<div class="dxrd-scripts" data-bind="visible: editorVisible, template: \'dxrd-scripts-addon\'"></div>',
                'dxrd-shape-content': '<img data-bind="attr: {src: imageSrc }, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }" />',
                'dxrd-shape': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate">    <div class="dxrd-control-content-main" data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left, lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width }, style: css">        <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': contentHeightWithoutZoom }" style="position:absolute;">        </div>    </div>    <div data-bind="style: borderCss" style="width:100%; height: 100%; position:absolute; box-sizing:border-box"></div></div>',
                'dxrd-subreport-selection': '<div class="dxrd-control" data-bind="event: { dblclick:  function (control, e) { $root.navigateByReports.goToSubreport(control); } }, visible: isSelected, css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">    <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control" data-bind="visible: !isSelected(), styleunit: position, trackCursor: underCursor"></div>',
                'dxrd-subreport': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate">    <div data-bind="style: borderCss" style="width:100%; height: 100%; position:absolute; box-sizing:border-box"></div>    <div class="dxrd-control-content" data-bind="text: displayName, style: contentCss"></div></div>',
                'dxrd-table-selection': '<div class="dxrd-table-control" data-bind="visible: !isSelected(), styleunit: position">    <!-- ko if: rows().length > 0 -->    <!-- ko foreach: rows -->    <div class="dxrd-table-row-control" data-bind="styleunit: { \'top\': position.top, \'height\': position.height }">        <!-- ko foreach: cells -->        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style:{ overflow: isSelected() ? \'visible\' : \'hidden\', \'z-index\': offsetZIndex() }">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->    </div>    <!-- /ko -->    <!-- /ko --></div><div class="dxrd-table-control" data-bind="visible: selected() || focused(), css: { \'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position">    <div class="dxd-border-accented dxrd-control-border-box"></div>    <!-- ko if: rows().length > 0 -->    <!-- ko foreach: rows()[0].cells -->    <div class="dxrd-table-column-selection dxrd-table-column-selection-top" data-bind="click: function(_, e) { selectColumn($root.selection); e.stopPropagation(); }, visible: !$root.dx.Designer.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }"></div>    <!-- /ko -->    <!-- ko foreach: rows -->    <div class="dxrd-table-row-control" data-bind="styleunit: { \'top\': position.top, \'height\': position.height }">        <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="trackCursor: underCursor, visible: !$root.dx.Designer.DragDropHandler.started()"></div>        <!-- ko foreach: cells -->        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style: { \'z-index\': offsetZIndex() }">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->        <div class="dxrd-table-row-selection dxrd-table-row-selection-right" style="visibility: visible" data-bind="trackCursor: underCursor, visible: !$root.dx.Designer.DragDropHandler.started()"></div>    </div>    <!-- /ko -->    <!-- ko foreach: rows()[rows().length-1].cells -->    <div class="dxrd-table-column-selection dxrd-table-column-selection-bottom" data-bind="click: function(_, e) { selectColumn($root.selection); e.stopPropagation(); },visible: !$root.dx.Designer.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }"></div>    <!-- /ko -->    <!-- /ko --></div><div class="dxrd-table-control" data-bind="visible: isSelected() && !(selected() || focused()), styleunit: position">    <!-- ko if: rows().length > 0 -->    <!-- ko foreach: rows()[0].cells -->    <div class="dxrd-table-column-selection dxrd-table-column-selection-top" data-bind="click: function(_, e) { selectColumn($root.selection); e.stopPropagation(); }, visible: !$root.dx.Designer.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }"></div>    <!-- /ko -->    <!-- ko foreach: rows -->    <div class="dxrd-table-row-control" data-bind="visible: isSelected(), css: { \'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'n,s\', disabled: !(selected() || focused()), zoom: $root.surface().zoom }, styleunit: { \'top\': position.top, \'height\': position.height }">        <div class="dxd-border-accented dxrd-control-border-box"></div>        <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="visible: !$root.dx.Designer.DragDropHandler.started(), trackCursor: underCursor"></div>        <!-- ko foreach: cells -->        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: { \'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-table-cell-over-rowSpan\': rowSpan() === 0  }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'e,w\', disabled: !(selected() || focused()), zoom: $root.surface().zoom, snapHelper: $root.resizeHandler.snapHelper }, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, style : { \'z-index\': offsetZIndex() }">            <div class="dxd-border-accented dxrd-control-border-box"></div>            <!-- ko if: $root.inlineTextEdit.visible() && selected() -->            <!-- ko with: $root.inlineTextEdit-->            <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div>            <!-- /ko -->            <!-- /ko -->            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, visible: !isSelected(), styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->        <div class="dxrd-table-row-selection dxrd-table-row-selection-right" data-bind="visible: !$root.dx.Designer.DragDropHandler.started(), trackCursor: underCursor"></div>    </div>    <div class="dxrd-table-row-control" data-bind="visible: !isSelected(), styleunit: { \'top\': position.top, \'height\': position.height }">        <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="visible: !$root.dx.Designer.DragDropHandler.started(),trackCursor: underCursor"></div>        <!-- ko foreach: cells -->        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->        <div class="dxrd-table-row-selection dxrd-table-row-selection-right" data-bind="visible: !$root.dx.Designer.DragDropHandler.started(),trackCursor: underCursor"></div>    </div>    <!-- /ko -->    <!-- ko foreach: rows()[rows().length-1].cells -->    <div class="dxrd-table-column-selection dxrd-table-column-selection-bottom" data-bind="visible: !$root.dx.Designer.DragDropHandler.started(),click: function(_, e) { selectColumn($root.selection); e.stopPropagation(); }, styleunit: { \'left\': position.left, \'width\': position.width }"></div>    <!-- /ko -->    <!-- /ko --></div>',
                'dxrd-table': '<div class="dxrd-table-control dxrd-control dxd-selectable" data-bind="styleunit: position, trackCursor: underCursor, css: adorntemplate">    <div data-bind="style: css" style="width: 100%; height: 100%;">        <!-- ko foreach: rows -->        <div class="dxrd-table-row-control" data-bind="styleunit: { \'top\': position.top, \'height\': position.height}, style: css, css: adorntemplate">            <!-- ko foreach: cells -->            <div class="dxrd-table-cell-control dxrd-control" data-bind="styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, trackCursor: underCursor, css: adorntemplate">                <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': position.lineHeight() / _context.zoom(), \'width\': contentWidthWithoutZoom, \'height\': contentHeightWithoutZoom }, style: css">                </div>                <!-- ko foreach: controls -->                <!-- ko template: { name: $data.template } -->                <!-- /ko -->                <!-- /ko -->            </div>            <!-- /ko -->        </div>        <!-- /ko -->    </div></div>',
                'dxrd-table-of-contents': '<div class="dxrd-control dxd-selectable dxrd-control-table-of-content" data-bind="styleunit: position, trackCursor: underCursor, css: adorntemplate">        <div data-bind="style: css" style="width: 100%; height: 100%;">            <!-- ko template: { name: levelTitle.template, data: levelTitle } -->            <!-- /ko -->            <div class="dxrd-control-table-of-content-levelsElements">                <!-- ko foreach: $data.levels() -->                <!-- ko template: { name: $data.template } -->                <!-- /ko -->                <!-- /ko -->                <!-- ko template: { name: levelDefault.template, data: levelDefault, isDefault: true } -->                <!-- /ko -->            </div>        </div>    </div>',
                'dxrd-table-of-contents-level': '<div class="dxrd-control" data-bind="styleunit: { height: position.height, top: position.top, lineHeight: position.lineHeight}, css: adorntemplate" style="left: 0; width: 100%">        <div class="dxrd-tocLevel-border" data-bind="styleunit: { \'height\': _context.zoom()}"></div>        <!-- ko if: getControlModel().rtl() -->        <div data-bind="style: borderCss, styleunit: { left: position.left, width: contentSizes().width + (contentSizes().left + contentSizes().right)} " style="height: 100%; position:absolute; box-sizing:border-box"></div>        <!-- /ko -->        <!-- ko if: !getControlModel().rtl() -->        <div data-bind="style: borderCss, styleunit: { left: position.left} " style="height: 100%; right: 0; position:absolute; box-sizing:border-box"></div>        <!-- /ko -->        <div class="dxrd-control-content-main" style="overflow:hidden" data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left + position.left(), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}, style: css">            <div class="dxrd-tocLevel-zoomer" data-bind="zoom: _context.zoom, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }">                <div style="box-sizing: border-box; letter-spacing: normal; width:100%;height:100%;" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }">                    <!-- ko if: getControlModel().isTitle -->                    <div class="dxrd-control-content dxrd-control-content-multiline" data-bind="controlDisplayName: $data, style: contentCss"></div>                    <!-- /ko -->                    <!-- ko ifnot: getControlModel().isTitle -->                    <div class="dxrd-control-content" data-bind="style: contentCss" style="width: 100%; height: 100%; line-height:inherit;">                        <div class="dxrd-control-content-level-text">                            <table border="0" cellspacing="0" cellpadding="0">                                <tr>                                    <td>                                        <div class="dxrd-control-content-line-text"><span data-bind="text: $data.getControlModel().name"></span></div>                                    </td>                                    <td class="middle">                                        <table border="0" cellspacing="0" cellpadding="0" style="table-layout: fixed; width: 100%">                                            <tr>                                                <td data-bind="text: leaderSymbols" style="word-wrap: break-word"></td>                                            </tr>                                        </table>                                    </td>                                    <td>                                        <div class="dxrd-control-content-number">&nbsp;&nbsp;#&nbsp;&nbsp;</div>                                    </td>                                </tr>                            </table>                        </div>                    </div>                    <!-- /ko -->                </div>            </div>        </div>    </div>',
                'dxrd-table-of-contents-selected': '<div class="dxrd-control dxrd-table-of-contents-selected" data-bind="event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">            <!-- ko with: levelTitle -->        <div class="dxrd-control dxrd-control-line-ui-resizeble" data-bind="styleunit: position, resizable: resizable($root.resizeHandler, $element)">            <!-- ko with: $root.inlineTextEdit-->            <!-- ko if: visible -->            <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div>            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->        <!-- ko foreach: $data.levels() -->        <div class="dxrd-control dxrd-control-line-ui-resizeble" data-bind="styleunit: {            height: position.height,            top: position.top,            lineHeight: position.lineHeight        },        resizable: resizable($root.resizeHandler, $element)" style="left:0; width:100%"></div>        <!-- /ko -->        <!-- ko with: levelDefault -->        <div class="dxrd-control" data-bind="styleunit: {            height: position.height,            top: position.top,            lineHeight: position.lineHeight        },        resizable: resizable($root.resizeHandler, $element)" style="left:0; width:100%"></div>        <!-- /ko -->    </div>    <div class="dxrd-control" data-bind="visible: !isSelected(), styleunit: position, trackCursor: underCursor">    </div>',
                'dxrd-reportRtlProperty': '<!-- ko if: !!$root.surface() -->    <!-- ko template: { name: $root.dx.Analytics.Widgets.editorTemplates.combobox.header, data: $root.surface().wrapRtlProperty($data, $root.undoEngine, $element) } -->    <!-- /ko -->    <!-- /ko -->',
                'dxrd-drag-helper-source-reportexplorer': '<div class="dxrd-drag-helper-source-reportexplorer dxd-back-primary dxd-text-primary dxd-ghost-border-color dxd-border-accented">        <div class="dxrd-drag-helper-treelist-image" data-bind="css: imageClassName, template: imageTemplateName"></div>        <div class="dxrd-drag-helper-treelist-text-wrapper">            <div class="dxrd-drag-helper-treelist-text" data-bind="text: text, attr: { title: text }"></div>        </div>    </div>',
                'dxrd-wizard-report-tree': '<div class="dxrd-wizard-report-tree">        <div class="dxrd-wizard-report-tree-title" data-bind="text: $root.getLocalization(\'Select the report\', \'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectReport\')"></div>        <div class="dxrd-wizard-report-tree-selectbox" data-bind="dxSelectBox: { dataSource: $data.items, itemTemplate: \'stateItem\', valueExpr: \'path\', displayExpr: \'name\', value: $data.value  }">            <div data-options="dxTemplate:{ name:\'stateItem\' }" style="text-align: left;">                <div data-bind="text: name, styleunit: {marginLeft: 30 * level}"></div>            </div>        </div>    </div>',
                'dxrd-textcontrol-content': '<div style="box-sizing: border-box; letter-spacing: normal; width:100%" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }">    <div class="dxrd-control-content" data-bind="controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } } "></div></div>',
                'dxrd-todocontrol': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, trackCursor: underCursor, style: css, css: adorntemplate">    <div data-bind="style: borderCss" class="dxrd-control-border-box"></div>    <div data-bind="css: controlTypeClass, template: controlTypeIconTemplate" style="position: absolute; width: 24px; height: 24px; right: 5px; top: 5px;"></div>    <span class="dxrd-control-content" data-bind="text: displayName, style: contentCss"></span></div>',
                'dxrd-watermark': '<!-- ko if: $data.reportSurface.watermark.image() --><div data-bind="css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: \'data:image/png;base64,\' + reportSurface.watermark.image(), transparency: reportSurface.watermark.imageTransparency(), viewMode: reportSurface.watermark.imageViewMode(), align: reportSurface.watermark.imageAlign(), tiling: reportSurface.watermark.imageTiling() }" style="position: absolute"></div><!-- /ko --><!-- ko if: $data.reportSurface.watermark.text() --><div data-bind="css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: reportSurface._watermarkTextRenderingResult(), transparency: reportSurface.watermark.textTransparency(), viewMode: \'Stretch\', align: \'MiddleCenter\', tiling: false }" style="position: absolute"></div><!-- /ko -->',
                'dxrd-viewStyle': '<div data-bind="dxLocalizedSelectBox: { items: viewmodel.items, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled }"></div>',
                'dxrd-reportSourceUrl': '<div data-bind="dxSelectBox: { items: $root.reportUrls, value: value, disabled: disabled, valueExpr: \'Key\', displayExpr: \'Value\' }"></div>',
                'dxrd-content-type': '<!-- ko if: value -->    <!-- ko with: value -->    <div data-bind="dxLocalizedSelectBox: { items: $parent.values, value: type, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: $parent.disabled }"></div>    <!-- /ko -->    <!-- /ko -->',
                'dxrd-datasource': '<div data-bind="dxSelectBox: { items: $root.dataSourceHelper() && $root.dataSourceHelper().usedDataSources, value: $root.dataSourceHelper() && $root.dataSourceHelper().dataSourceValue(value, $root.undoEngine), valueExpr: \'name\', displayExpr: $root.dataSourceHelper() && $root.dataSourceHelper().dataSourceDisplayExpr, displayCustomValue: true, disabled: disabled }"></div>',
                'dxrd-bands': '<div data-bind="dxSelectBox: { items: generateValue($root.bands), value: value, displayExpr: \'displayName\', valueExpr: \'value\', displayCustomValue: true, disabled: disabled, placeholder: $root.getLocalization(\'(none)\', \'ChartStringId.WizNoBackImage\') }"></div>',
                'dxrd-formattingRuleCollection': '<div class="dxrd-editor dxrd-formatting-rule-collection-editor" data-bind="visible: visible, styleunit: { \'marginLeft\' : padding }">        <div data-bind="dxCollectionEditor: options">            <div data-bind="dxdAccordion: { collapsed: collapsed }">                <div class="dxrd-group-header dx-accordion-header dxd-text-primary">                    <div class="dxrd-formatting-rule-checkbox" data-bind="dxCheckBox: { value: value().selected, disabled: editor.disabled }, dxAction: function(args) { args.event.stopPropagation(); }"></div>                    <div class="dxrd-formatting-rule-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }"></div>                    <div class="dxrd-formatting-rule-displayName">                        <div class="propertygrid-editor-displayName" data-bind="text: value().name, attr: { title: value().name }"></div>                    </div>                </div>                <div class="dx-accordion-content dxd-back-primary">                    <div data-bind="dxPropertyGrid: { target: value, editorsInfo: { editors: $root.dx.Designer.Report.formattingRuleSerializationsInfo }, level: editor.level + 1, parentDisabled: editor.disabled }"></div>                </div>            </div>        </div>    </div>',
                'dxrd-fields-combobox': '<div data-bind="dxSelectBox: { dataSource: wrapValues($root.displayNameProvider), value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled }, dxValidator: { validationRules: $data.validationRules || [] }"></div>',
                'dxrd-style': '<div data-bind="dxSelectBox: new $root.dx.Designer.Report.StylesEditorHeaderModel(value, $root.styles(), disabled)"></div>',
                'dxrd-styleContent': '<!-- ko if: value-->    <div data-bind="dxStylesEditor: { styleName: value, styles: $root.styles() }"></div>    <!--/ko -->',
                'dxrd-dataBindings': ' ',
                'dxrd-dataBinding': '<!-- ko with: value -->    <!-- ko if: visible -->    <!-- ko displayNameExtender: { dataSource: dataSource, dataMember: displayExpr } -->    <div data-bind="dxFieldListPicker: {    displayValue: $displayName,    itemsProvider: $root.dataBindingsProvider(),    treeListController: $parent.treeListController,    value: $data.generateValue($root.undoEngine(), $root.dataSourceHelper(), $root.fieldListDataSources()),    disabled: $parent.disabled }"></div>    <!--/ko -->    <!--/ko -->    <!--/ko -->',
                'dxrd-chartValueBinding': '<div data-bind="dxFieldListPicker: {    displayValue: generateDisplayValue($root.reportDataSource),    itemsProvider: $root.reportDataBindingsProvider,    treeListController: treeListController,    value: generateValue($root.undoEngine(), $root.reportParameters, $root.reportDataSource),    disabled: disabled }"></div>',
                'dxrd-reportexplorer-editor': '<div data-bind="dxFieldListPicker: { value: itemsProvider.selectedPath, displayValue: displayExpr, itemsProvider: itemsProvider, path: itemsProvider.path, disabled: disabled, treeListController: treeListController }"></div>',
                'dxrd-dataBindingsContent': '<div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div>',
                'dxrd-dataBindingContent': '<div class="dx-field dxd-back-primary">        <div class="dx-field-label dx-accordion-header dxd-text-primary" data-bind="styleunit: padding">            <div class="propertygrid-editor-displayName" data-bind="text: $root.getLocalization(\'Format String\', \'DevExpress.XtraReports.UI.XRBinding.FormatString\')"></div>        </div>        <div class="dx-field-value">            <!-- ko if: value() -->            <!-- ko with: value() -->            <!-- ko template: { name: \'dxrd-formatstring\', data: { value: $data.formatString, disabled: $data.disabled } } -->            <!-- /ko -->            <!-- /ko -->            <!-- /ko -->        </div>    </div>',
                'dxrd-scriptsbox': '<div data-bind="dxEventDropDownEditor: { items: $root.events, value: value, editEnabled: true, disabled: disabled, secondAction: function() { $root.gotoEvent && $root.gotoEvent($data.value(), name, $parents[1]._model && $parents[1]._model()); }, placeholder: $root.dx.Analytics.Localization.selectPlaceholder(), noDataText: $root.dx.Analytics.Localization.noDataText() }"></div>',
                'dxrd-collection-item-group': '<div class="dx-field dxd-back-primary" data-bind="styleunit: { \'marginLeft\' : $parents[1].padding }">        <div class="dx-field-label dxd-text-primary">            <div class="propertygrid-editor-displayName" data-bind="text: $parents[1].options.info().getChildCaption(index()) + \':\'"></div>        </div>        <div class="dx-field-value">            <div class="dxrd-collectioneditor-action" data-bind="dxButtonWithTemplate: { onClick: value().changeSortOrder, icon: value().sortOrderClass().template, iconClass: value().sortOrderClass().class, disabled: editor.disabled }"></div>            <!-- ko displayNameExtender: { path: function() { return $data.editor._model() && $data.editor._model().getPath(\'groupFields\') || \'\' }, dataMember: value().fieldName } -->            <div class="dxrd-collectioneditor-picker" data-bind="dxFieldListPicker: {    displayValue: $displayName,    value: value().fieldName,    path: editor._model() && editor._model().getPath(\'groupFields\') || \'\',    itemsProvider: $root.dataBindingsProvider(),    treeListController: new $root.dx.Analytics.Widgets.TreeListController(),    disabled: editor.disabled}"></div>            <!--/ko -->        </div>    </div>',
                'dxrd-lookUpValues': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, addHandler: $root.dx.Designer.Report.LookUpValue.createNew, undoEngine: $root.undoEngine, level: level, displayName: $root.getLocalization(displayName), info: info }">            <div data-bind="dxPropertyGrid: { target: $data.value, level: editor.level + 1 }"></div>        </div>    </div>',
                'dxrd-parameterContent': '<div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div>',
                'dxrd-calculatedFields': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.calculatedFieldsSource().createCalculatedField(\'\'); } }">        </div>    </div>',
                'dxrd-parameters': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function() { return $root.parameters().createParameter(); } }">        </div>    </div>',
                'dxrd-levelCollection': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.dx.Designer.Report.TableOfContentsLevel.createNew(_model()); } }">        </div>    </div>',
                'dxrd-collectionItemWithAccordion': '<div class="dxrd-accordion-collection-item" data-bind="dxdAccordion: { collapsed: collapsed }">        <div class="dxrd-group-header dx-accordion-header dxd-text-primary">            <div data-bind="styleunit: {\'paddingLeft\': $parents[1].padding + $root.dx.Analytics.Widgets.propertiesGridEditorsPaddingLeft }">                <div class="propertygrid-editor-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }"></div>                <div class="dx-group-header-font dxd-text-primary" data-bind="text: $root.getLocalization($parent.name), attr: { title: $root.getLocalization($parent.name) }"></div>            </div>        </div>        <div class="dx-accordion-content dxd-back-primary">            <div data-bind="dxPropertyGrid: { target: value, level: editor.level + 2, parentDisabled: editor.disabled }"></div>        </div>    </div>',
                'dx-numeric-undo': '<div data-bind="dxNumberBox: getOptions({ value:generateValue($root.undoEngine), showSpinButtons:true, disabled:disabled }), dxValidator: { validationRules: validationRules || [] }"></div>',
                'dx-objectEditorContentUndo': '<!-- ko if: visible -->    <div data-bind="template: { name: \'dx-propertieseditor\', data: generateValue($root.undoEngine) }"></div>    <!-- /ko -->',
                'dxrd-editOptionsEditorName': '<div data-bind="dxFieldListPicker: $data"></div>',
                'dxrd-editingField-editor-treelist-item': '<div class="dx-treelist-item dxd-list-item-back-color dxd-back-highlighted" data-bind="styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected }">        <div class="dx-treelist-caption">            <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected">                <div class="dx-treelist-image" data-bind="css: imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }"></div>                <div class="dx-treelist-text-wrapper">                    <div class="dx-treelist-text" data-bind="text: text, attr: { title: data.title }"></div>                </div>            </div>        </div>    </div>',
                'dxrd-name': '<div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled }), dxValidator: { validationRules: generateRules($root.controlsHelper.allControls) || [] }"></div>',
                'dxrd-component-name': '<div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled }), dxValidator: { validationRules: generateRules(value) || [] }"></div>',
                'dxrd-reportexpression': '<!-- ko if: visible -->    <!-- ko if: $data.patchOptions($root.reportExplorerProvider) -->    <div data-bind="dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.reportItemsProvider, displayNameProvider: $root.expressionDisplayNameProvider && $root.expressionDisplayNameProvider() })"></div>    <!-- /ko -->    <!-- /ko -->',
                'dxrd-pivotcriteria': '<!-- ko with: $data.wrapModel($root.fieldListProvider) -->    <div data-bind="dxFilterEditor: { options: value, fieldListProvider: itemsProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: displayNameProvider }"></div>    <!-- /ko -->',
                'dxrd-richtext-loadfile': '<div data-bind="dxFileImagePicker: { value: value, format: format, useFormat: true, placeHolder: \'File\', disabled: disabled }"></div>',
                'dxrd-image-loadfile': '<div data-bind="dxImageSourceEditor: { value: value, placeHolder: \'Image\', accept: \'image/*\', type: \'img\', disabled: disabled }"></div>',
                'dxrd-page-colorScheme': '<div class="dxrd-wizard-page dxrd-page-color-scheme">    <!-- ko foreach: lookupData.scheme -->    <div class="dxrd-page-color-scheme-tile" data-bind="click: function () { $parent.applyScheme($data); }, style: { backgroundColor: color }">        <div class="dxrd-page-color-scheme-tile-content">            <!-- ko ifnot: $data.name === \'Custom\' -->            <div class="dxrd-page-color-scheme-tile-content-title" data-bind="text: displayName"></div>            <!-- /ko -->            <!-- ko if: $data.name === \'Custom\' -->            <div class="dxrd-page-color-scheme-tile-content-custom">                <div class="dxrd-page-color-scheme-tile-content-title" data-bind="text: displayName"></div>                <div class="dxrd-page-color-scheme-tile-content-edit" data-bind="css: { \'dxrd-page-color-scheme-tile-content-edit-active\': $data.popoverVisible() }, click: function() { $data.popoverVisible(!$data.popoverVisible()) }">                    <div class="dxrd-page-color-scheme-tile-content-edit-icon" data-bind="template:\'dxrd-svg-color_gear\'"></div>                </div>            </div>            <div class="dxrd-page-color-scheme-colorpicker" data-bind="dxPopover: {             visible: $data.popoverVisible,             width: \'auto\',             height: \'auto\',             target: \'.dxrd-page-color-scheme-tile-content-edit-icon\',             position: { my: \'left center\', at: \'right center\' }             }">                <div class="dxrd-page-color-scheme-colorpicker-editor-container dxd-border-secondary">                    <div data-bind="dxColorView: { value: editorColor, editAlphaChannel: true }"></div>                </div>                <div class="dxrd-page-color-scheme-colorpicker-buttons">                    <div class="dxrd-page-color-scheme-colorpicker-button" data-bind="dxButton: { text: \'Cancel\', onClick: function() { $data.resetColor() }}"></div>                    <div class="dxrd-page-color-scheme-colorpicker-button" data-bind="dxButton: { text: \'Ok\', onClick: function() { $data.applyColor() }}"></div>                </div>            </div>            <!-- /ko -->            <div class="dxrd-page-color-scheme-tile-selected dxd-border-accented" data-bind="visible: $data.selected()"></div>        </div>    </div>    <!-- /ko --></div>',
                'dxrd-page-columns': '<div class="dxrd-wizard-page dxrd-wizard-columns-page">    <div class="dxrd-wizard-left-panel">        <div class="dxrd-wizard-list-title" data-bind="text: availableFields.caption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { items: availableFields.items, selectedItems: availableFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: availableFieldClick }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.availableFieldDblClick }">                    <div data-bind="text: displayName"></div>                </div>            </div>        </div>    </div>    <div class="dxrd-wizard-splitter">        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: select, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }" style="margin-top: 40px"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: selectAll, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveleft_all\', iconClass: \'dxrd-image-moveright-all\' }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: unselect, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }" style="margin-top: 44px"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: unselectAll, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft_all\', iconClass: \'dxrd-image-moveleft-all\' }"></div>    </div>    <div class="dxrd-wizard-right-panel">        <div class="dxrd-wizard-list-title" data-bind="text: selectedFields.caption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { items: selectedFields.items, selectedItems: selectedFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: selectedFieldClick }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.selectedFieldDblClick }">                    <div data-bind="text: displayName"></div>                </div>            </div>        </div>    </div></div>',
                'dxrd-page-customizeLabel': '<div class="dxrd-wizard-page">    <div class="dxrd-wizard-customizelabel-page">        <div class="dxrd-wizard-customizelabel-list">            <div class="dxrd-wizard-customizelabel-head-props">                <div class="dxrd-wizard-customizelabel-select-papersize">                    <span data-bind="text: $root.getLocalization(\'Page Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSize\')"></span>                    <div data-bind="dxSelectBox: { items: labelData.paperKinds, displayExpr: \'name\', value: selectedPaperSize, itemTemplate: \'PaperSizeText\',                            onOpened: function (e) {                                e.component._popup.option(\'width\', 300);                        }}, attr: { title: selectedPaperSize().name + \' - \' + $root.dx.Designer.Report.Wizard.CustomizeLabelPage.getPageSizeText(selectedPaperSize().width, selectedPaperSize().height, selectedPaperSize().unit)}">                        <div data-options="dxTemplate: { name: \'PaperSizeText\' }" class="dxrd-wizard-customizelabel-select-customtemplate">                            <p class="dxrd-wizard-customizelabel-select-template">                                <span data-bind="text: name"></span>                                <span data-bind="text: $root.dx.Designer.Report.Wizard.CustomizeLabelPage.getPageSizeText(width, height, unit)"></span>                            </p>                        </div>                    </div>                </div>                <div class="dxrd-wizard-customizelabel-radiounit">                    <div data-bind=\'dxRadioGroup:{items: units, valueExpr: "value", value: unit, layout: "horizontal" }\'></div>                </div>                <div class="dxrd-wizard-customizelabel-pagesizetext"><span data-bind="text: pageSizeText"></span></div>            </div>            <div class="dxrd-wizard-customizelabel-props-container">                <div class="dxrd-wizard-customizelabel-props">                    <div>                        <span data-bind="text: $root.getLocalization(\'Label Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth\')"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: stepUnit, value: labelWidth }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Label Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight\')"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: stepUnit, value: labelHeight }"></div>                    </div>                    <div class="dxrd-wizard-customizelabel-prop-whis-top-margin">                        <span data-bind="text: $root.getLocalization(\'Horizontal Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch\')"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: stepUnit, value: horizontalPitch }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Vertical Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch\')"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: stepUnit, value: verticalPitch }"></div>                    </div>                    <div class="dxrd-wizard-customizelabel-prop-whis-top-margin">                        <span data-bind="text: $root.getLocalization(\'Top Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin\')"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: stepUnit, value: topMargin }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Left Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin\')"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: stepUnit, value: leftMargin }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Right Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin\')"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: stepUnit, value: rightMargin }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Bottom Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin\')"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: stepUnit, value: bottomMargin }"></div>                    </div>                </div>                <div class="dxrd-wizard-customizelabel-pic dxd-border-secondary">                    <div class="dxrd-wizard-customizelabel-pic-element"></div>                </div>                <div class="dxrd-wizard-customizelabel-labelscounttext"><span data-bind="text: labelsCountText"></span></div>            </div>        </div>    </div></div>',
                'dxrd-page-dataMember': '<div class="dxrd-wizard-page">    <div class="dxrd-wizard-dataMember dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: scrollViewHeight }">        <div data-bind="treelist: fieldListModel" style="width:100%; height: 100%;"></div>    </div></div>',
                'dxrd-page-dataSource': '<div class="dxrd-wizard-page">    <!-- ko if: isDataSourceCreationAvailable -->    <div style="margin-bottom: 15px" data-bind="dxRadioGroup: { value: selectedDataSourceOperation, items: dataSourceOperations, layout: \'vertical\' }">        <div data-options="dxTemplate : { name: \'text\' }">            <div data-bind="text: $data"></div>        </div>    </div>    <!-- /ko -->    <div class="dx-default-border-style dxd-border-secondary">        <div class="dxrd-wizard-list" data-bind="dxList: { dataSource: availableDataSources, selectedItems: selectedDataSource, focusStateEnabled:false, editEnabled: true, height: dataSourcesListHeight, editConfig: { selectionEnabled: false }, selectionMode: \'single\', activeStateEnabled: false, disabled: createNewDataSource, noDataText: $root.dx.Analytics.Localization.noDataText() }">            <div data-options="dxTemplate : { name: \'item\' }">                <div data-bind="text: name"></div>            </div>        </div>    </div></div>',
                'dxrd-page-groups': '<div class="dxrd-wizard-page dxrd-wizard-groups-page">    <div class="dxrd-wizard-left-panel">        <div class="dxrd-wizard-list-title" data-bind="text: fields.caption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { dataSource: fields.items, selectedItems: fields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: fieldClick, noDataText: $root.dx.Analytics.Localization.noDataText() }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.fieldDblClick }">                    <div data-bind="text: $data"></div>                </div>            </div>        </div>    </div>    <div class="dxrd-wizard-splitter">        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: addNewGroup, disabled: !isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\'  }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: appendFieldsToGroup, disabled: !isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: removeGroup, disabled: !isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }"></div>        <div class="dxrd-wizard-splitter-action" style="margin-top: 95px;" data-bind="dxButtonWithTemplate: { onClick: moveUp, disabled: !isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: moveDown, disabled: !isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }"></div>    </div>    <div class="dxrd-wizard-right-panel">        <div class="dxrd-wizard-list-title" data-bind="text: groups.caption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { items: groups.items, height: 257, selectionMode: \'single\', selectedItems: groups.activeItemArray, activeStateEnabled: false, onItemClick: groupClick, noDataText: $root.dx.Analytics.Localization.noDataText() }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.groupDblClick }">                    <div data-bind="text: fields().join(\', \')"></div>                </div>            </div>        </div>    </div></div>',
                'dxrd-page-masterdetail-groups': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-groups-page">    <!-- ko template: { name: \'dxrd-wizard-report-tree\', data: { items: $data.reportTree, value: $data.currentPath } }-->    <!-- /ko -->    <div class="dxrd-wizard-left-panel">        <div class="dxrd-wizard-list-title" data-bind="text: fieldCaption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { items: currentFields().items, selectedItems: currentFields().activeItemArray, height: 288, selectionMode: \'single\', activeStateEnabled: false, onItemClick: fieldClick, noDataText: $root.dx.Analytics.Localization.noDataText() }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.fieldDblClick }">                    <div data-bind="text: $data"></div>                </div>            </div>        </div>    </div>    <div class="dxrd-wizard-splitter">        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: addNewGroup, disabled: !isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: appendFieldsToGroup, disabled: !isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: removeGroup, disabled: !isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }"></div>        <div class="dxrd-wizard-splitter-action" style="margin-top: 83px;" data-bind="dxButtonWithTemplate: { onClick: moveUp, disabled: !isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: moveDown, disabled: !isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }"></div>    </div>    <div class="dxrd-wizard-right-panel">        <div class="dxrd-wizard-list-title" data-bind="text: groupCaption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { items: currentGroups().items, height: 288, selectionMode: \'single\', selectedItems: currentGroups().activeItemArray, activeStateEnabled: false, onItemClick: groupClick, noDataText: $root.dx.Analytics.Localization.noDataText() }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.groupDblClick }">                    <div data-bind="text: fields().join(\', \')"></div>                </div>            </div>        </div>    </div></div>',
                'dxrd-page-masterdetail-select-reportdata': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-select-reportdata-page">    <div class="dxrd-wizard-reportdata-title dx-first-column" data-bind="text: selectDataMembersCaption"></div>    <div class="dxrd-wizard-reportdata-title" data-bind="text: selectDataFieldsCaption"></div>    <div class="dxrd-wizard-add-queries-page dxrd-wizard-masterdetail-dataMember dx-first-column dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: 361 }">        <div data-bind="treelist: dataMemberFieldListModel" style="width:100%; height: 100%;"></div>    </div>    <div class="dxrd-wizard-add-queries-page dxrd-wizard-masterdetail-fields dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: 361 }">        <div data-bind="treelist: fieldMemberFieldListModel" style="width:100%; height: 100%;"></div>    </div></div>',
                'dxrd-page-masterdetail-summary': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-summary-options-page">    <!-- ko template: { name: \'dxrd-wizard-report-tree\', data: { items: $data.reportTree, value: $data.currentPath  } }-->    <!-- /ko -->    <div class="dxrd-wizard-list-title" data-bind="text: selectFieldToSummaryCaption"></div>    <div class="dxrd-wizard-list dx-default-border-style dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: 254 }">        <div class="dxrd-wizard-summary-infos dxrd-wizard-summary-infos-paragraf dxd-border-secondary">            <div class="dxrd-wizard-summary-infos-container dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: fieldsCaprion"></div>            <div class="dxrd-wizard-summary-infos-container dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: summaryFunctionCaption"></div>            <div class="dxrd-wizard-summary-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary"></div>        </div>        <div data-bind="foreach: summaryInfos">            <div class="dxrd-wizard-summary-infos dxd-border-secondary">                <div class="dxrd-wizard-summary-infos-container dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary">                    <div data-bind="dxSelectBox: { dataSource: $parent.displayedFields[$parent.currentPath()], itemTemplate: \'visibleItems\', displayExpr: \'displayName\', value: field, placeholder: $root.dx.Analytics.Localization.selectPlaceholder() }">                        <div data-options="dxTemplate:{ name:\'visibleItems\' }" style="text-align: left;">                            <!-- ko if: visible-->                            <div data-bind="text: name"></div>                            <!--/ko-->                        </div>                    </div>                </div>                <div class="dxrd-wizard-summary-infos-container dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary">                    <!-- ko template: { name: "dxrd-multivalue", data: $data } -->                    <!--/ko-->                </div>                <div class="dxrd-wizard-summary-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary">                     <div data-bind="dxButton: { icon: \'close\', onClick: function () { return $parent.removeSummaryInfo($data);  }}"></div>                </div>            </div>        </div>    </div>    <div class="dxrd-wizard-ignore-null-values" data-bind="dxCheckBox: { value: ignoreNullValues, text: ignoreNullValuesCaption }"></div></div>',
                'dxrd-page-pageSetup': '<div class="dxrd-wizard-page dxrd-page-setup-page">    <div class="dxrd-wizard-preview dxd-back-secondary">        <div class="dxrd-wizard-preview-page" data-bind="styleunit: { width: previewPageWidth, height: previewPageHeight }">            <div class="dxrd-wizard-preview-margin-top" data-bind="styleunit: { top: $data.previewTopMargin() }"></div>            <div class="dxrd-wizard-preview-margin-right" data-bind="styleunit: { right: $data.previewRightMargin() }"></div>            <div class="dxrd-wizard-preview-margin-bottom" data-bind="styleunit: { bottom: $data.previewBottomMargin() }"></div>            <div class="dxrd-wizard-preview-margin-left" data-bind="styleunit: { left: $data.previewLeftMargin() }"></div>        </div>    </div>    <div class="dxrd-page-setup-content">        <div class="dxrd-page-setup-group">            <div class="dxrd-page-setup-group-caption dxd-back-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Paper\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Paper\')"></div>            <div class="dx-fieldset dxrd-page-setup-long-group">                <div class="dx-field">                    <div class="dx-field-label dxd-text-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size\')"></div>                    <div class="dx-field-value" data-bind="dxSelectBox: { items: lookupData.paperKind, valueExpr: \'value\', displayExpr: \'displayName\', value: paperKind }"></div>                </div>            </div>            <div class="dxrd-page-setup-setting">                <div class="dx-fieldset dxrd-group-fieldset">                    <div class="dx-field">                        <div class="dx-field-label dxd-text-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Unit:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit\')"></div>                        <div class="dx-field-value" data-bind="dxSelectBox: { items: lookupData.unit, valueExpr: \'value\', displayExpr: \'displayName\', value: unit }"></div>                    </div>                    <div class="dx-field">                        <div class="dx-field-label dxd-text-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\')"></div>                        <div class="dx-field-value" data-bind="dxNumberBox: { value: width, disabled: fixedSize, format: valueFormat }"></div>                    </div>                    <div class="dx-field">                        <div class="dx-field-label dxd-text-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\')"></div>                        <div class="dx-field-value" data-bind="dxNumberBox: { value: height, disabled: fixedSize, format: valueFormat }"></div>                    </div>                </div>                <div class="dxrd-group-fieldset dxrd-page-setup-pagemode">                    <div class="dxrd-page-setup-landscape-item dxd-back-primary dxd-state-normal dxd-back-highlighted" style="margin-left: 0px" data-bind="css: { \'dxd-state-no-hover dxd-state-active\': !$data.landscape() }, click: function() { $data.landscape(false); }">                        <div class="dxrd-page-setup-landscape-item-icon" data-bind="template:\'dxrd-svg-portrait\'"></div>                    </div>                    <div class="dxrd-page-setup-landscape-item dxd-back-primary dxd-state-normal dxd-back-highlighted" data-bind="css: { \'dxd-state-no-hover dxd-state-active\': $data.landscape() }, click: function() { $data.landscape(true); }">                        <div class="dxrd-page-setup-landscape-item-icon" data-bind="template:\'dxrd-svg-landscape\'"></div>                    </div>                </div>            </div>        </div>        <div class="dxrd-page-setup-group" style="margin-top: 16px;">            <div class="dxrd-page-setup-group-caption dxd-back-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Page Margins\', \'ReportDesigner_Wizard_PageSetup_PageMargins\')"></div>            <div class="dxrd-page-setup-setting">                <div class="dx-fieldset dxrd-group-fieldset">                    <div class="dx-field">                        <div class="dx-field-label dxd-text-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Left:\', \'ReportDesigner_Wizard_PageSetup_LeftMargin\')"></div>                        <div class="dx-field-value" data-bind="dxNumberBox: { value: marginLeft, format: valueFormat }"></div>                    </div>                    <div class="dx-field">                        <div class="dx-field-label dxd-text-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Top:\', \'ReportDesigner_Wizard_PageSetup_TopMargin\')"></div>                        <div class="dx-field-value" data-bind="dxNumberBox: { value: marginTop, format: valueFormat }"></div>                    </div>                </div>                <div class="dx-fieldset dxrd-group-fieldset" style="float:right">                    <div class="dx-field">                        <div class="dx-field-label dxd-text-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Right:\', \'ReportDesigner_Wizard_PageSetup_RightMargin\')"></div>                        <div class="dx-field-value" data-bind="dxNumberBox: { value: marginRight, format: valueFormat }"></div>                    </div>                    <div class="dx-field">                        <div class="dx-field-label dxd-text-primary" data-bind="text: DevExpress.Analytics.getLocalization(\'Bottom:\', \'ReportDesigner_Wizard_PageSetup_BottomMargin\')"></div>                        <div class="dx-field-value" data-bind="dxNumberBox: { value: marginBottom, format: valueFormat }"></div>                    </div>                </div>            </div>        </div>    </div></div>',
                'dxrd-page-reportLayoutType': '<div class="dxrd-wizard-page dxrd-report-layout-type-page">    <div style="text-align: center">        <div class="dxrd-report-layout-type-items" data-bind="css: { \'dxrd-report-layout-type-five-items\': layoutTypeItems()[0].margin == 1 }">            <div>                <div data-bind="dxRadioGroup: { value: selectedPageOrientation, items: pageOrientationItems, layout: \'horizontal\' }">                    <div data-options="dxTemplate : { name: \'text\' }">                        <div data-bind="text: $data"></div>                    </div>                </div>            </div>            <!-- ko foreach: layoutTypeItems -->            <div class="dx-background-inheritor dxd-back-highlighted dxd-state-selected">                <div class="dxrd-report-layout-type-item dx-fontsize-reestablished dxd-list-item-back-color" data-bind="event: { click: $parent.layoutTypeItemClick }, css: { \'dxd-state-selected dxd-border-secondary dxd-back-secondary\': $parent.isSelected($data) }, style: { margin: \'0 \' + margin + \'px\' }">                    <div data-bind="attr: { class: imageClassName }"></div>                    <div data-bind="text: text" class="dxrd-report-layout-type-text"></div>                </div>            </div>            <!-- /ko -->            <div style="clear:both"></div>            <div data-bind="dxCheckBox: { value: fitFieldsToPage, text: $root.getLocalization(\'Adjust the field width so all fields fit onto a page\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AdjustFieldWidth\') }"></div>        </div>    </div></div>',
                'dxrd-page-reportStyle': '<div class="dxrd-wizard-page dxrd-wizard-report-style-page">    <div class="dxrd-wizard-report-style-image-container">        <div data-bind="attr: { class: selectedReportStyle().className }">            <div class="title" style="margin-bottom: 18px;" data-bind="text: $root.getLocalization(\'Title\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title\')"></div>            <div class="caption" style="margin-bottom: 4px;" data-bind="text: $root.getLocalization(\'Caption\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Caption\')"></div>            <div class="data" data-bind="text: $root.getLocalization(\'Data\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data\')"></div>        </div>    </div>    <div class="dxrd-wizard-report-style-items" data-bind="dxRadioGroup: { value: selectedReportStyle, items: reportStyleItems }">        <div data-options="dxTemplate : { name: \'item\' }">            <div data-bind="text: text"></div>        </div>    </div></div>',
                'dxrd-page-reportTitle': '<div style="width: 272px; position: relative; top: 38%; margin: 0 auto;">    <div style="margin-bottom: 5px;" data-bind="text: $root.getLocalization(\'Specify the report\\\'s title\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportComplete_SpecifyTitle\')"></div>    <div data-bind="dxTextBox: { value: reportTitle, width: 270 }"></div></div>',
                'dxrd-page-reportType': '<div class="dxrd-report-type-page">    <!-- ko foreach: reportTypeItems -->    <div class="dx-background-inheritor dxd-back-highlighted dxd-state-selected">        <div class="dxrd-report-type-item dx-fontsize-reestablished dxrd-report-type-item-border-color dxd-list-item-back-color" data-bind="event: { click: $parent.itemClick }, css: { \'dxd-state-selected dxd-border-secondary dxd-back-secondary\': $parent.IsSelected($data) }">            <div data-bind="css: imageClassName" class="dxrd-report-type-image"></div>            <div data-bind="text: text, attr: { title: text }" class="dxrd-report-type-text"></div>        </div>    </div>    <!-- /ko --></div>',
                'dxrd-page-selectPredefinedLabels': '<div class="dxrd-wizard-page">    <div class="dxrd-wizard-selectlabelproduct-page">        <div class="dxrd-wizard-selectlabelproduct-list">            <div class="dxrd-wizard-selectlabelproduct-list-label" data-bind="text: $root.getLocalization(\'Label Product:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelProduct\')"></div>            <div data-bind="dxSelectBox: { items: labelData.labelProducts, displayExpr: \'name\', value: selectedLabelProduct }"></div>            <div class="dxrd-wizard-selectlabelproduct-list-label" data-bind="text: $root.getLocalization(\'Product Number:\', \'ASPxReportsStringId.ReportDesigner_Wizard_ProductNumber\')"></div>            <div data-bind="dxSelectBox: { dataSource: labelDetails, displayExpr: \'name\', value: selectedLabelDetails }"></div>        </div>        <div class="dxrd-wizard-selectproduct-props">            <div>                <span data-bind="text: $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\')"></span>                <span data-bind="text: width"></span>            </div>            <div>                <span data-bind="text: $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\')"></span>                <span data-bind="text: height"></span>            </div>            <div>                <span data-bind="text: $root.getLocalization(\'Paper Type:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperType\')"></span>                <span data-bind="text: paperType"></span>            </div>            <div>                <span data-bind="text: $root.getLocalization(\'Paper Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperSize\')"></span>                <span data-bind="text: pageSizeText"></span>            </div>        </div>    </div></div>',
                'dxrd-page-summaryOptions': '<div class="dxrd-wizard-summary-options-page">    <div class="dxrd-wizard-summary-options-titles dxrd-wizard-dataMember dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary">        <div data-bind="text: $root.getLocalization(\'Average\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average\')"></div>        <div data-bind="text: $root.getLocalization(\'Count\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count\')"></div>        <div data-bind="text: $root.getLocalization(\'Max\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Max\')"></div>        <div data-bind="text: $root.getLocalization(\'Min\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Min\')"></div>        <div data-bind="text: $root.getLocalization(\'Sum\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum\')"></div>    </div>    <div class="dxrd-wizard-summary-content dxrd-wizard-dataMember dxd-border-secondary" data-bind="dxScrollView: { }">        <div class="dxrd-wizard-summary-columns dxd-border-secondary">            <!-- ko foreach: summaryOptions -->            <div class="dxrd-wizard-summary-column-name" data-bind="text: columnName, attr: { title: columnName }"></div>            <!-- /ko -->        </div>        <div class="dxrd-wizard-summary-options">            <!-- ko foreach: summaryOptions -->            <div class="dxrd-wizard-summary-options-values">                <div data-bind="dxCheckBox: { value: avg }"></div>                <div data-bind="dxCheckBox: { value: count }"></div>                <div data-bind="dxCheckBox: { value: max }"></div>                <div data-bind="dxCheckBox: { value: min }"></div>                <div data-bind="dxCheckBox: { value: sum }"></div>            </div>            <!-- /ko -->        </div>    </div>    <div class="dxrd-wizard-ignore-null-values" data-bind="dxCheckBox: { value: ignoreNullValues, text: $root.getLocalization(\'Ignore null values\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues\') }"></div></div>',
            });
        })(Templates = Reporting.Templates || (Reporting.Templates = {}));
    })(Reporting = DevExpress.Reporting || (DevExpress.Reporting = {}));
})(DevExpress || (DevExpress = {}));
//# sourceMappingURL=dx-reportdesigner.js.map