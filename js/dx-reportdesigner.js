/**
* DevExpress HTML/JS Reporting (dx-reportdesigner.js)
* Version: 19.1.8
* Build date: 2019-11-19
* Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/NetComponents.xml
*/

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.addTemplates({
    'dxrd-svg-actions-add_field_to_column_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h4v14H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h2v2H6zM6 4h2v2H6zM6 8h2v2H6zM6 12h2v2H6zM10 0h2v2h-2zM10 4h2v2h-2zM10 8h2v2h-2zM14 0h2v2h-2zM14 4h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 12h-4V8h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
    'dxrd-svg-actions-add_field_to_data_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 14v-4h-4v4h-4v4h4v4h4v-4h4v-4z"/><ellipse class="dxd-icon-fill dxd-opacity-80" cx="6" cy="2" rx="6" ry="2"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 4c0 1.1-2.7 2-6 2s-6-.9-6-2v12c0 1.1 2.7 2 6 2 .7 0 1.4 0 2-.1V12h4V4z"/></svg>',
    'dxrd-svg-actions-add_field_to_filter_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 14v-4h-4v4h-4v4h4v4h4v-4h4v-4zM7 0C3.1 0 0 1.3 0 3v1l6 6v7c0 .5.4 1 1 1 .5 0 1-.4 1-1v-7l6-6V3c0-1.7-3.1-3-7-3zm0 4c-2.8 0-5-.4-5-1s2.2-1 5-1 5 .4 5 1-2.2 1-5 1z"/></svg>',
    'dxrd-svg-actions-add_field_to_row_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 0h14v4H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M14 6h2v2h-2zM10 6h2v2h-2zM6 6h2v2H6zM2 6h2v2H2zM10 10h2v2h-2zM6 10h2v2H6zM2 10h2v2H2zM6 14h2v2H6zM2 14h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
    'dxrd-svg-actions-align_bottoms': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 20h22v2H0zM2 0h8v18H2zM12 8h8v10h-8z"/></svg>',
    'dxrd-svg-actions-align_centers': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 12H12v-2h6V4h-6V0h-2v4H4v6h6v2H0v6h10v4h2v-4h10z"/></svg>',
    'dxrd-svg-actions-align_lefts': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h2v22H0zM4 12h18v8H4zM4 2h10v8H4z"/></svg>',
    'dxrd-svg-actions-align_middles': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M12 0v10h-2V4H4v6H0v2h4v6h6v-6h2v10h6V12h4v-2h-4V0z"/></svg>',
    'dxrd-svg-actions-align_rights': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 0h2v22h-2zM0 12h18v8H0zM8 2h10v8H8z"/></svg>',
    'dxrd-svg-actions-align_to_grid': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M24 6V4h-4V0h-2v4H6V0H4v4H0v2h4v12H0v2h4v4h2v-4h12v4h2v-4h4v-2h-4V6h4zm-6 12H6v-4h8V6h4v12z"/><path class="dxd-icon-fill dxd-opacity-80" d="M14 0h-4l2 2zM2 12l-2-2v4z"/></svg>',
    'dxrd-svg-actions-align_tops': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h22v2H0zM2 4h8v18H2zM12 4h8v10h-8z"/></svg>',
    'dxrd-svg-actions-bottom_margin': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 20h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM18 0h2v2h-2zM2 4h2v14H2zM6 4h10v14H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 20h2v2h-2zM2 20h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 4h2v14h-2zM2 0h2v2H2z"/></svg>',
    'dxrd-svg-actions-bring_to_front': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 6h12v12H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M4 4h4V0H0v8h4zM20 20v-4h4v8h-8v-4z"/></svg>',
    'dxrd-svg-actions-center_horizontally': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M8 6h6v10H8z"/><path class="dxd-icon-fill dxd-opacity-60" d="M0 0v22h22V0H0zm20 10h-4v2h4v8H2v-8h4v-2H2V2h18v8z"/></svg>',
    'dxrd-svg-actions-center_vertically': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 8h10v6H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M22 0H0v22h22V0zM12 20v-4h-2v4H2V2h8v4h2V2h8v18h-8z"/></svg>',
    'dxrd-svg-actions-decrease_horizontal_spacing': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 2v4h-4V0H8v6H4V4H0v6h4V8h4v6h6V8h4v4h4V2zM4 20H0v2h4v2l4-3-4-3zM18 18l-4 3 4 3v-2h4v-2h-4z"/></svg>',
    'dxrd-svg-actions-decrease_vertical_spacing': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 18h4v-4H0V8h6V4H4V0h6v4H8v4h6v6H8v4h4v4H2zM20 4V0h2v4h2l-3 4-3-4zM18 18l3-4 3 4h-2v4h-2v-4z"/></svg>',
    'dxrd-svg-actions-delete_cell': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 12l-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3 2-2-3-3z"/><path class="dxd-icon-fill dxd-opacity-60" d="M10 2h2v2h-2zM10 6h2v2h-2zM6 14h2v2H6zM14 2h2v2h-2zM14 6h2v2h-2zM6 2h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 6h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 10h2v2H6zM2 2h2v2H2zM2 6h2v2H2zM2 10h2v2H2zM2 14h2v2H2z"/></svg>',
    'dxrd-svg-actions-delete_column': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 12l-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3 2-2-3-3z"/><path class="dxd-icon-fill dxd-opacity-60" d="M12 2h2v2h-2zM12 6h2v2h-2zM8 14h2v2H8zM16 2h2v2h-2zM16 6h2v2h-2zM8 2h2v2H8zM8 6h2v2H8zM8 10h2v2H8z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 2h4v14H2z"/></svg>',
    'dxrd-svg-actions-delete_row': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 14l-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3 2-2-3-3z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 8h2v2H2zM6 12h2v2H6zM2 12h2v2H2zM6 16h2v2H6zM2 16h2v2H2zM14 8h2v2h-2zM10 8h2v2h-2zM6 8h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 2h14v4H2z"/></svg>',
    'dxrd-svg-actions-detail': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 0v22h18V0H2zm14 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6V8h10v2zm0-4H6V4h10v2z"/></svg>',
    'dxrd-svg-actions-detail_report': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M16 2h-2V0H8v2H6v2h10z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 2v4H4V2H2v22h18V2h-2zm-2 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6v-2h10v2z"/></svg>',
    'dxrd-svg-actions-distribute_columns_evenly': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 2v10h-2V8h-8v4h-2V8H2v4H0V2h2v4h8V2h2v4h8V2h2zM0 22h10v-8H0v8zm12 0h10v-8H12v8z"/></svg>',
    'dxrd-svg-actions-distribute_rows_evenly': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 4v6h4v2h-4v6h4v2H14v-2h4v-6h-4v-2h4V4h-4V2h10v2h-4zM2 10h10V2H2v8zm0 10h10v-8H2v8z"/></svg>',
    'dxrd-svg-actions-fit_bounds_to_text': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M16 24H8l4-4 4 4zm8-8V8l-4 4 4 4zM12 4l4-4H8l4 4zM0 8v8l4-4-4-4zm13.7-2h-3.4L6 18h3l1-3h4l1 3h3L13.7 6zm-3.1 7l1.2-3.8c.1-.3.2-.6.2-1.1 0 .4.1.8.2 1.1l1.2 3.8h-2.8z"/></svg>',
    'dxrd-svg-actions-fit_text_to_bounds': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M16 4H8l4-4 4 4zM4 16V8l-4 4 4 4zm8 8l4-4H8l4 4zm8-16v8l4-4-4-4zm-6.3-2h-3.4L6 18h3l1-3h4l1 3h3L13.7 6zm-3.1 7l1.2-3.8c.1-.3.2-.6.2-1.1 0 .4.1.8.2 1.1l1.2 3.8h-2.8z"/></svg>',
    'dxrd-svg-actions-fit_to_—Åontainer': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M23 0H1C.5 0 0 .5 0 1v22c0 .5.5 1 1 1h22c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 22H2V2h20v20zm-6-6H8V8h8v8zM10 6l2-2 2 2s-3.9-.1-4 0zm-4 8l-2-2s2-2.1 2-2v4zm4 4h4l-2 2s-2.1-2-2-2zm10-6l-2 2v-4c0-.1 2 2 2 2z"/></svg>',
    'dxrd-svg-actions-group_footer': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 0h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M0 16h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 8h14v2H8zM8 12h14v2H8z"/></svg>',
    'dxrd-svg-actions-group_header': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 16h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 12h14v2H8zM8 8h14v2H8z"/></svg>',
    'dxrd-svg-actions-increase_horizontal_spacing': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 2v4h-4V0H8v6H4V4H0v6h4V8h4v6h6V8h4v4h4V2zM18 20h-4v2h4v2l4-3-4-3zM4 18l-4 3 4 3v-2h4v-2H4z"/></svg>',
    'dxrd-svg-actions-increase_vertical_spacing': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 18h4v-4H0V8h6V4H4V0h6v4H8v4h6v6H8v4h4v4H2zM20 18v-4h2v4h2l-3 4-3-4zM18 4l3-4 3 4h-2v4h-2V4z"/></svg>',
    'dxrd-svg-actions-insert_cell': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 2h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 6h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 10h2v2H6zM6 14h2v2H6zM2 2h2v2H2zM2 6h2v2H2zM2 10h2v2H2zM2 14h2v2H2zM10 2h2v2h-2zM10 6h2v2h-2zM10 10h2v2h-2zM14 2h2v2h-2zM14 6h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
    'dxrd-svg-actions-insert_column_to_left': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h4v14H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h2v2H6zM6 4h2v2H6zM6 8h2v2H6zM6 12h2v2H6zM10 0h2v2h-2zM10 4h2v2h-2zM10 8h2v2h-2zM14 0h2v2h-2zM14 4h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 12h-4V8h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
    'dxrd-svg-actions-insert_column_to_right': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M14 2h4v6h-4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M10 2h2v2h-2zM10 6h2v2h-2zM10 10h2v2h-2zM6 14h2v2H6zM6 2h2v2H6zM6 6h2v2H6zM6 10h2v2H6zM2 2h2v2H2zM2 6h2v2H2zM2 10h2v2H2zM2 14h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
    'dxrd-svg-actions-insert_row_above': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 0h14v4H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M14 6h2v2h-2zM10 6h2v2h-2zM6 6h2v2H6zM2 6h2v2H2zM10 10h2v2h-2zM6 10h2v2H6zM2 10h2v2H2zM6 14h2v2H6zM2 14h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
    'dxrd-svg-actions-insert_row_below': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 14h6v4H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 10h2v2H2zM6 10h2v2H6zM10 10h2v2h-2zM6 6h2v2H6zM2 6h2v2H2zM10 6h2v2h-2zM14 6h2v2h-2zM10 2h2v2h-2zM14 2h2v2h-2zM2 2h2v2H2zM6 2h2v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M22 14h-4v-4h-4v4h-4v4h4v4h4v-4h4z"/></svg>',
    'dxrd-svg-actions-make_horizontal_spacing_equal': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 4v6h-4V2H8v8H4V6H0v10h4v-4h4v8h6v-8h4v6h4V4z"/></svg>',
    'dxrd-svg-actions-make_same_height': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 16h-2v2h-2l3 4 3-4h-2zM18 6h2V4h2l-3-4-3 4h2zM0 0h6v22H0zM16 8h6v6h-6zM8 0h2v2H8zM12 0h2v2h-2zM8 20h2v2H8zM12 20h2v2h-2z"/></svg>',
    'dxrd-svg-actions-make_same_sizes': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M12 18v-2h-2v2H8l3 4 3-4zM10 4v2h2V4h2l-3-4-3 4zM4 12h2v-2H4V8l-4 3 4 3zM18 10h-2v2h2v2l4-3-4-3zM8 8h6v6H8zM2 2h6V0H0v8h2zM20 0h-6v2h6v6h2V0zM20 20h-6v2h8v-8h-2zM2 14H0v8h8v-2H2z"/></svg>',
    'dxrd-svg-actions-make_same_width': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 20v-2H4v-2l-4 3 4 3v-2zM16 18v2h2v2l4-3-4-3v2zM0 0h22v6H0zM8 16h6v6H8zM20 8h2v2h-2zM20 12h2v2h-2zM0 8h2v2H0zM0 12h2v2H0z"/></svg>',
    'dxrd-svg-actions-make_vertical_spacing_equal': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 18h-6v-4h8V8h-8V4h4V0H6v4h4v4H2v6h8v4H4v4h14z"/></svg>',
    'dxrd-svg-actions-master_report': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M12 2h-2V0H6v2H4v2h8zM14 14h10v4H14zM14 20h10v4H14z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 12h4V2h-2v4H2V2H0v20h12z"/></svg>',
    'dxrd-svg-actions-none': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M4 0v22h16V0H4zm14 14l-2 2-4-4-4 4-2-2 4-4-4-4 2-2 4 4 4-4 2 2-4 4 4 4z"/></svg>',
    'dxrd-svg-actions-page_footer': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM6 4h10v8H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 14h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 0h2v2h-2zM6 20h10v2H6zM2 20h2v2H2zM2 4h2v14H2zM18 20h2v2h-2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
    'dxrd-svg-actions-page_header': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 10h10v8H6zM6 20h10v2H6zM18 0h2v2h-2zM2 4h2v14H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 4h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM18 20h2v2h-2zM2 20h2v2H2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
    'dxrd-svg-actions-remove_horizontal_spacing': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M4 18H0v2h4v2l4-3-4-3zM18 16l-4 3 4 3v-2h4v-2h-4zM4 8V4H0v6h4zM14 8V0H8v14h6zM18 2v10h4V2z"/></svg>',
    'dxrd-svg-actions-remove_vertical_spacing': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 4h-2V0h-2v4h-2l3 4zM16 18h2v4h2v-4h2l-3-4zM4 0h6v4H4zM0 8h14v6H0zM2 18h10v4H2z"/></svg>',
    'dxrd-svg-actions-report_footer': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 16h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 2h2v2h-2zM6 6h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
    'dxrd-svg-actions-report_header': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 6h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 2h2v2h-2zM6 12h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
    'dxrd-svg-actions-send_to_back': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 0h8v8H0zM16 16h8v8h-8z"/><path class="dxd-icon-fill dxd-opacity-80" d="M14 14h4V6h-8v4H6v8h8z"/></svg>',
    'dxrd-svg-actions-size_to_grid': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 4V0h-2v4H6V0H4v4H0v2h4v12H0v2h4v4h2v-4h12v4h2v-4h4v-2h-4V6h4V4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M14 0h-4l2 2zM0 10v4l2-2zM10 24h4l-2-2zM24 14v-4l-2 2z"/></svg>',
    'dxrd-svg-actions-subband': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M2 4h14v6H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 14h14v6H8z"/></svg>',
    'dxrd-svg-actions-top_margin': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 20h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 0h10v2H6zM18 0h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 4h2v14H2zM6 4h10v14H6zM18 20h2v2h-2zM2 20h2v2H2zM18 4h2v14h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 0h2v2H2z"/></svg>',
    'dxrd-svg-actions-vertical_detail': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><g><path class="dxd-icon-fill dxd-opacity-80" d="M10 6h4v10h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6h-4v10h4V6zM8 6H4v10h4V6zm12-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-actions-vertical_header': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><g><path class="dxd-icon-fill dxd-opacity-80" d="M4 6h4v10H4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6H10v10h10V6zm0-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-actions-vertical_total': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><g><path class="dxd-icon-fill dxd-opacity-80" d="M16 6h4v10h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM14 6H4v10h10V6zm6-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-bands-bottom_margin': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M6 20h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM18 0h2v2h-2zM2 4h2v14H2zM6 4h10v14H6z"/><path class="dxd-icon-fill" d="M18 20h2v2h-2zM2 20h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 4h2v14h-2zM2 0h2v2H2z"/></svg>',
    'dxrd-svg-bands-detail': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v22h18V0H2zm14 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6V8h10v2zm0-4H6V4h10v2z"/></svg>',
    'dxrd-svg-bands-detail_report': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 2h-2V0H8v2H6v2h10z"/><path class="dxd-icon-fill" d="M18 2v4H4V2H2v22h18V2h-2zm-2 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6v-2h10v2z"/></svg>',
    'dxrd-svg-bands-group_footer': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 0h12v6H0z"/><path class="dxd-icon-fill" d="M0 16h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 8h14v2H8zM8 12h14v2H8z"/></svg>',
    'dxrd-svg-bands-group_header': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 16h12v6H0z"/><path class="dxd-icon-fill" d="M0 0h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 12h14v2H8zM8 8h14v2H8z"/></svg>',
    'dxrd-svg-bands-master_report': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 2h-2V0H6v2H4v2h8zM14 14h10v4H14zM14 20h10v4H14z"/><path class="dxd-icon-fill" d="M12 12h4V2h-2v4H2V2H0v20h12z"/></svg>',
    'dxrd-svg-bands-page_footer': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM6 4h10v8H6z"/><path class="dxd-icon-fill" d="M6 14h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 0h2v2h-2zM6 20h10v2H6zM2 20h2v2H2zM2 4h2v14H2zM18 20h2v2h-2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
    'dxrd-svg-bands-page_header': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 10h10v8H6zM6 20h10v2H6zM18 0h2v2h-2zM2 4h2v14H2z"/><path class="dxd-icon-fill" d="M6 4h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 0h10v2H6zM18 20h2v2h-2zM2 20h2v2H2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
    'dxrd-svg-bands-report_footer': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill" d="M6 16h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 2h2v2h-2zM6 6h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
    'dxrd-svg-bands-report_header': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill" d="M6 6h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 2h2v2h-2zM6 12h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
    'dxrd-svg-bands-sub_band': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M2 4h14v6H2z"/><path class="dxd-icon-fill" d="M8 14h14v6H8z"/></svg>',
    'dxrd-svg-bands-top_margin': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M6 20h10v2H6z"/><path class="dxd-icon-fill" d="M6 0h10v2H6zM18 0h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 4h2v14H2zM6 4h10v14H6zM18 20h2v2h-2zM2 20h2v2H2zM18 4h2v14h-2z"/><path class="dxd-icon-fill" d="M2 0h2v2H2z"/></svg>',
    'dxrd-svg-bands-vertical_detail': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><g><path class="dxd-icon-fill" d="M10 6h4v10h-4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6h-4v10h4V6zM8 6H4v10h4V6zm12-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-bands-vertical_header': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><g><path class="dxd-icon-fill" d="M4 6h4v10H4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6H10v10h10V6zm0-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-bands-vertical_total': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><g><path class="dxd-icon-fill" d="M16 6h4v10h-4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM14 6H4v10h10V6zm6-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-chartstructure-axes': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M24 6V4h-2V2h-2V0h-2v2h-4V0h-2v2H8V0H6v4h14v14h4v-2h-2v-4h2v-2h-2V6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M10 14V6H6v2h2v4H6v2h2v2h2v2h2v-2h4v2h2v-4z"/></svg>',
    'dxrd-svg-chartstructure-axisx': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22 17l-6-5v4h-4v-2h-2v2H6v-2H4v2H0v2h4v2h2v-2h4v2h2v-2h4v4zM4 8h2V6h4v4l6-5-6-5v4H6V2H4v2H0v2h4z"/></svg>',
    'dxrd-svg-chartstructure-axisy': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M17 0l-5 6h4v4h-2v2h2v4h-2v2h2v4h2v-4h2v-2h-2v-4h2v-2h-2V6h4zM8 18v-2H6v-4h4L5 6l-5 6h4v4H2v2h2v4h2v-4z"/></svg>',
    'dxrd-svg-chartstructure-chart': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M10 22V12H0c.5 5 5 9.5 10 10zM12 12v10c5-.5 9.5-5 10-10H12z"/><path class="dxd-icon-fill" d="M0 6h4v4H0zM6 4h4v6H6zM12 2h4v8h-4z"/><g><path class="dxd-icon-fill" d="M18 0h4v10h-4z"/></g></svg>',
    'dxrd-svg-chartstructure-constantline': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 6h-6V0h-2v6H0v2h16v16h2V8h6z"/></svg>',
    'dxrd-svg-chartstructure-constantlines': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M24 6V4h-4V0h-2v4h-4V0h-2v4H6v2h6v4H6v2h6v6h2v-6h4v6h2v-6h4v-2h-4V6h4zm-10 4V6h4v4h-4z"/></svg>',
    'dxrd-svg-chartstructure-defaultpane': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h10v22H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M12 0v10h10V0H12zm8 8h-6V2h6v6zM12 22h10V12H12v10zm2-8h6v6h-6v-6z"/></svg>',
    'dxrd-svg-chartstructure-diagram': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M0 16h4v6H0zM12 10h4v12h-4z"/><path class="dxd-icon-fill" d="M18 2h4v20h-4zM6 6h4v16H6z"/></svg>',
    'dxrd-svg-chartstructure-legend': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h10v10H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M0 12h10v10H0z"/><path class="dxd-icon-fill" d="M12 2h10v2H12zM12 6h10v2H12zM12 14h10v2H12zM12 18h10v2H12z"/></svg>',
    'dxrd-svg-chartstructure-panes': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h10v22H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 0v10h10V0H12z"/><path class="dxd-icon-fill dxd-opacity-60" d="M12 22h10V12H12v10z"/></svg>',
    'dxrd-svg-chartstructure-series': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 22h22V10l-4-4-8 8-4-4-6 6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M18 0l-8 8-4-4-6 6v4l6-6 4 4 8-8 4 4V4z"/></svg>',
    'dxrd-svg-chartstructure-seriescollection': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M15 7l-9 9v2h18v-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M15 4l9 9V4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M6 13l9-9-9-4z"/></svg>',
    'dxrd-svg-chartstructure-title': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M4 8v14h14V8H4zm12 8h-2v-2h2v2zm-6 0v-2h2v2h-2zm2 2v2h-2v-2h2zm-4-2H6v-2h2v2zm8-6v2h-2v-2h2zm-4 2h-2v-2h2v2zm-4-2v2H6v-2h2zm-2 8h2v2H6v-2zm8 2v-2h2v2h-2z"/><path class="dxd-icon-fill" d="M8 0h6v6H8z"/></svg>',
    'dxrd-svg-chartstructure-titles': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2h4v4H2zM10 2h4v4h-4zM10 18h4v4h-4zM18 2h4v4h-4zM2 18h4v4H2zM2 10h4v4H2zM18 17.9h4v4h-4zM18 10h4v4h-4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M8 8v8h8V8H8zm6 6h-4v-4h4v4z"/></svg>',
    'dxrd-svg-checkboxglyphs-Heart_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Red" d="M16 5.5C16 3 14 1 11.5 1c-1.4 0-2.7.7-3.5 1.7C7.2 1.7 5.9 1 4.5 1 2 1 0 3 0 5.5c0 1.2.5 2.4 1.3 3.2L8 15.4l6.7-6.7c.8-.8 1.3-2 1.3-3.2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Heart_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Black" d="M11.5 1c-1.4 0-2.7.7-3.5 1.7C7.2 1.7 5.9 1 4.5 1 2 1 0 3 0 5.5c0 1.2.5 2.4 1.3 3.2L8 15.4l6.7-6.7c.8-.8 1.3-2 1.3-3.2C16 3 14 1 11.5 1zm1.8 6.3L8 12.5 2.7 7.3C2.3 6.8 2 6.2 2 5.5 2 4.1 3.1 3 4.5 3c.7 0 1.5.3 1.9 1L8 6l1.6-2c.5-.6 1.2-1 1.9-1C12.9 3 14 4.1 14 5.5c0 .7-.3 1.3-.7 1.8z"/></svg>',
    'dxrd-svg-checkboxglyphs-RadioButton_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Black" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zm4-6c0 2.2-1.8 4-4 4s-4-1.8-4-4 1.8-4 4-4 4 1.8 4 4z"/></svg>',
    'dxrd-svg-checkboxglyphs-RadioButton_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Black" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z"/></svg>',
    'dxrd-svg-checkboxglyphs-Smiley_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Green" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zM7 5.5C7 6.3 6.3 7 5.5 7S4 6.3 4 5.5 4.7 4 5.5 4 7 4.7 7 5.5zm5 0c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5 9.7 4 10.5 4s1.5.7 1.5 1.5zM10.9 8c.7 0 1.2.6.9 1.3-.5 1.6-2 2.7-3.8 2.7-1.8 0-3.3-1.1-3.8-2.7-.2-.7.3-1.3.9-1.3.4 0 .8.2 1 .6.3.8 1 1.4 1.9 1.4.9 0 1.6-.6 1.9-1.4.1-.4.5-.6 1-.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-Smiley_Indeterminate': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Black" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zM7 5.5C7 6.3 6.3 7 5.5 7S4 6.3 4 5.5 4.7 4 5.5 4 7 4.7 7 5.5zm5 0c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5 9.7 4 10.5 4s1.5.7 1.5 1.5zM11 11H5c-.6 0-1-.4-1-1s.4-1 1-1h6c.6 0 1 .4 1 1s-.4 1-1 1z"/></svg>',
    'dxrd-svg-checkboxglyphs-Smiley_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Red" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zM7 5.5C7 6.3 6.3 7 5.5 7S4 6.3 4 5.5 4.7 4 5.5 4 7 4.7 7 5.5zm5 0c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5 9.7 4 10.5 4s1.5.7 1.5 1.5zM10.9 12c-.4 0-.8-.2-1-.6-.3-.8-1-1.4-1.9-1.4-.9 0-1.6.6-1.9 1.4-.1.4-.5.6-1 .6-.7 0-1.2-.6-.9-1.3C4.7 9.1 6.2 8 8 8c1.8 0 3.3 1.1 3.8 2.7.2.7-.3 1.3-.9 1.3z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox1_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 12 12"><style>.st0{fill:rgb(61,61,61);}</style><path class="st0" d="M0 0v12h12V0H0zm11 11H1V1h10v10z"/><path class="st0" d="M10 4V2L4 8 2 6v2l2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox1_Indeterminate': '<svg data-bind="svgAttrs" viewBox="0 0 12 12"><style>.st0{fill:rgb(61,61,61);}</style><path class="st0" d="M0 0v12h12V0H0zm11 11H1V1h10v10z"/><path class="st0" d="M4 4h4v4H4z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox1_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 12 12"><style>.st0{fill:rgb(61,61,61);}</style><path class="st0" d="M12 12H0V0h12v12zM1 11h10V1H1v10z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox2_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Black" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/><path class="Black" d="M11.6 4.6L13 6l-6 6-4-4 1.4-1.4L7 9.2l4.6-4.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox2_Indeterminate': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Black" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.6 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/><path class="Black" d="M4 4h8v8H4z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox2_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Black" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.6 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/></svg>',
    'dxrd-svg-checkboxglyphs-Star_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Yellow" d="M8 .6l2.5 4.9 5.5.7-4 3.9.9 5.3L8 12.9l-4.9 2.5.9-5.3-4-3.9 5.5-.7z"/></svg>',
    'dxrd-svg-checkboxglyphs-Star_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Black" d="M16 6.2l-5.5-.7L8 .6 5.5 5.5 0 6.2l4 3.9-.9 5.3L8 12.9l4.9 2.5-.9-5.3 4-3.9zm-5.7 5.6L8 10.7l-2.3 1.2.4-2.4-1.7-1.8 2.4-.3L8 5l1.2 2.3 2.4.3-1.7 1.8.4 2.4z"/></svg>',
    'dxrd-svg-checkboxglyphs-Thumb_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Green" d="M0 6h2c.6 0 1 .4 1 1v6c0 .6-.4 1-1 1H0V6zm6 9h5.7c.8 0 1.5-.5 1.8-1.2l2.3-5.4c.1-.3.2-.5.2-.8V6c0-.6-.4-1-1-1H9l1.1-3.7c.1-.4 0-.8-.2-1-.3-.3-.8-.3-1.1 0L4.6 4.4c-.4.4-.6.9-.6 1.4V13c0 1.1.9 2 2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Thumb_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Red" d="M16 10h-2c-.6 0-1-.4-1-1V3c0-.6.4-1 1-1h2v8zm-6-9H4.3c-.8 0-1.5.5-1.8 1.2L.2 7.6c-.1.3-.2.5-.2.8V10c0 .6.4 1 1 1h6l-1.1 3.7c-.1.4 0 .8.2 1 .3.3.8.3 1.1 0l4.2-4.2c.4-.4.6-.9.6-1.4V3c0-1.1-.9-2-2-2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Toggle_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Green" d="M12 4H4C1.8 4 0 5.8 0 8s1.8 4 4 4h8c2.2 0 4-1.8 4-4s-1.8-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Toggle_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Red" d="M12 4H4C1.8 4 0 5.8 0 8s1.8 4 4 4h8c2.2 0 4-1.8 4-4s-1.8-4-4-4zm-8 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoBox_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Green" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/><path class="Green" d="M11.6 4.6L13 6l-6 6-4-4 1.4-1.4L7 9.2l4.6-4.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoBox_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Red" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 14H2V2h12v12z"/><path class="Red" d="M13 4.4L11.6 3 8 6.6 4.4 3 3 4.4 6.6 8 3 11.6 4.4 13 8 9.4l3.6 3.6 1.4-1.4L9.4 8z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoSolidBox_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Green" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zM6.9 12L3 8.1l1.4-1.4 2.5 2.5 5.7-5.7L14 4.9 6.9 12z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoSolidBox_Indeterminate': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Yellow" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zM9 13H7v-2h2v2zm0-4H7V3h2v6z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoSolidBox_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Red" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-2 11.6L11.6 13 8 9.4 4.4 13 3 11.6 6.6 8 3 4.4 4.4 3 8 6.6 11.6 3 13 4.4 9.4 8l3.6 3.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNo_Checked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Green" d="M0 8l2-2 4 4 8-8 2 2L6 14z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNo_Unchecked': '<svg data-bind="svgAttrs" viewBox="0 0 16 16"><style>.White{fill:#FFFFFF;} .Red{fill:#D11C1C;} .Black{fill:#727272;} .Blue{fill:#1177D7;} .Yellow{fill:#FFB115;} .Green{fill:#039C23;}</style><path class="Red" d="M14 4l-2-2-4 4-4-4-2 2 4 4-4 4 2 2 4-4 4 4 2-2-4-4z"/></svg>',
    'dxrd-svg-color_gear': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.White{fill:#FFFFFF;}</style><path class="White" d="M30 18v-4l-4.4-.7c-.2-.8-.5-1.5-.9-2.1l2.6-3.6-2.8-2.8-3.6 2.6c-.7-.4-1.4-.7-2.1-.9L18 2h-4l-.7 4.4c-.8.2-1.5.5-2.1.9L7.5 4.7 4.7 7.5l2.6 3.6c-.4.7-.7 1.4-.9 2.1L2 14v4l4.4.7c.2.8.5 1.5.9 2.1l-2.6 3.6 2.8 2.8 3.6-2.6c.7.4 1.4.7 2.1.9L14 30h4l.7-4.4c.8-.2 1.5-.5 2.1-.9l3.6 2.6 2.8-2.8-2.6-3.6c.4-.7.7-1.4.9-2.1L30 18zm-14 2c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/></svg>',
    'dxrd-svg-fieldlist-calcboolean': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm18 8L8 18l-4-4v-4l4 4L18 4v4z"/></svg>',
    'dxrd-svg-fieldlist-calcdate': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm11 18c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z"/><path class="dxd-icon-fill dxd-opacity-80" d="M15 10h-3V7c0-.5-.4-1-1-1-.5 0-1 .4-1 1v4c0 .5.4 1 1 1h4c.5 0 1-.4 1-1s-.4-1-1-1z"/></svg>',
    'dxrd-svg-fieldlist-calcdefault': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm17.6 5.8c-.2.1-.4.2-.7.2-.3 0-.5-.1-.7-.2-.2-.1-.2-.3-.2-.4 0-.2 0-.4.1-.6.1-.1.2-.2.2-.3 0-.1 0-.1-.1-.1s-.1-.1-.2-.1c-.4 0-.8.3-1.2.6-.7.6-1.4 2.1-1.8 3.1h2l-1 1.9h-1.6l-.8 2.3c-.6 1.7-1.1 2.8-1.6 3.6-.5.7-1.2 1.3-1.9 1.6-.7.4-1.6.6-2.5.6-.6 0-1-.1-1.3-.3-.2-.1-.3-.5-.3-.7s.2-1 1.2-1c.9 0 1 .8 1 1s-.1.3-.2.4-.2.1-.2.2l.1.1H6c.2 0 .4 0 .5-.1.4-.2.6-.5.8-.9.1-.2.4-.7.7-1.7l1.7-5H8l1-1.9h1.3c.2-.1.6-.9.7-1.1.8-1 1.4-1.7 2.2-2.2.9-.6 1.8-.8 2.9-.8.7 0 1.1.1 1.4.3.3.2.5.4.5.7s-.2.6-.4.8z"/></svg>',
    'dxrd-svg-fieldlist-calcfloat': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm8 16H2v-2h2v-4H2V8h2V6h2v8h2v2zm4 0h-2v-2h2v2zm8-8v2h-2v2h-2v2h4v2h-6v-4h2v-2h2V8h-4V6h6v2z"/></svg>',
    'dxrd-svg-fieldlist-calcinteger': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm6 16H4v-6H2V8h2V6h2v10zm6-9v3h-2v4h2v2H8v-6h2V8H8V6h4v1zm8 0v9h-6v-2h4v-2h-2v-2h2V8h-4V6h6v1z"/></svg>',
    'dxrd-svg-fieldlist-calcstring': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0v22h22V0H0zm10 18H4v-6h4v-2H4V8h6v10zm8-4.3V18h-6V4h2v6h4v3.7z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 14h2v2H6zM14 12h2v4h-2z"/></svg>',
    'dxrd-svg-landscape': '<svg data-bind="svgAttrs" viewBox="0 0 34 34"><style>.st0{opacity:0.5;}</style><g><path class="dxd-icon-fill" d="M33 4H1c-.5 0-1 .5-1 1v24c0 .5.5 1 1 1h32c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm-1 24H2V6h30v22z"/><path class="st0 dxd-icon-fill" d="M28 12H6v-2h22v2zm0 2H6v2h22v-2zm0 4H6v2h22v-2zm0 4H6v2h22v-2z"/></g></svg>',
    'dxrd-svg-menu-add_datasource': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><ellipse class="dxd-icon-fill" cx="8" cy="2" rx="6" ry="2"/><path class="dxd-icon-fill" d="M16 10c-3.3 0-6 2.7-6 6s2.7 6 6 6 6-2.7 6-6-2.7-6-6-6zm3 7h-2v2h-2v-2h-2v-2h2v-2h2v2h2v2zM8 13c-3.1 0-6-.9-6-2v5c0 1.1 2.9 2 6 2h.3c-.2-.6-.3-1.3-.3-2 0-1.1.2-2.1.6-3H8zM14 8.3V4c0 1.1-2.9 2-6 2s-6-.9-6-2v5c0 1.1 2.9 2 6 2 .6 0 1.3 0 1.9-.1 1-1.3 2.5-2.2 4.1-2.6z"/></svg>',
    'dxrd-svg-menu-back': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M6 12l9-9 2 2-7 7 7 7-2 2z"/></svg>',
    'dxrd-svg-menu-exit': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22 12l-6-6v4H8v4h8v4z"/><path class="dxd-icon-fill" d="M12 20H2V4h10v4h2V2H0v20h14v-6h-2z"/></svg>',
    'dxrd-svg-menu-new_via_wizard': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M5.7 11.3L9.1 16l1.5-5.4L16 9.1l-4.7-3.4-.1-5.7-4.5 3.3-5.4-2 2 5.4L0 11.2z"/><path class="dxd-icon-fill" d="M23.5 20.6l-8.7-8.8-2.3.7-.6 2.1 8.7 8.8c.7.7 1.9.7 2.6 0l.2-.2c.8-.7.8-1.9.1-2.6zM18 12l2 2V2h-6v2h4zM6 20v-6H4v8h12l-2-2z"/></svg>',
    'dxrd-svg-menu-newreport': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M14 0v6h6z"/><path class="dxd-icon-fill" d="M12 0H2v22h18V8h-8z"/></svg>',
    'dxrd-svg-menu-run_wizard': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M11.3 5.7L11.2 0 6.7 3.3 1.5 1.5l1.8 5.2L0 11.2l5.7.1L9.1 16l1.5-5.4L16 9.1z"/><path class="dxd-icon-fill" d="M23.5 20.6l-8.7-8.8-2.3.7-.6 2.1 8.7 8.8c.7.7 1.9.7 2.6 0l.2-.2c.8-.7.8-1.9.1-2.6z"/></svg>',
    'dxrd-svg-multi_select': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 12h12v12H12zM12 0H0v12h4V4h8z"/><path class="dxd-icon-fill" d="M18 6H6v12h4v-8h8z"/></svg>',
    'dxrd-svg-none': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 0v22h16V0H4zm14 14l-2 2-4-4-4 4-2-2 4-4-4-4 2-2 4 4 4-4 2 2-4 4 4 4z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_bottomcenter': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M10 16h12v12H10z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_bottomleft': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M4 16h12v12H4z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_bottomright': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M16 16h12v12H16z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_middlecenter': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M10 10h12v12H10z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_middleleft': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M4 10h12v12H4z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_middleright': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M16 10h12v12H16z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_topcenter': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M10 4h12v12H10z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_topleft': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M4 4h12v12H4z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_topright': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .Green{fill:#039C23;} .Yellow{fill:#FFB115;} .Red{fill:#D11C1C;} .White{fill:#FFFFFF;} .st0{opacity:0.5;} .st1{opacity:0.75;}</style><g><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M16 4h12v12H16z"/></g></svg>',
    'dxrd-svg-pictureeditor-image_gallery': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;} .st0{opacity:0.5;}</style><path class="White" d="M22 2H2c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h20c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H3V4h18v16zM15.5 6C16.9 6 18 7.1 18 8.5S16.9 11 15.5 11 13 9.9 13 8.5 14.1 6 15.5 6zM15 19l-8-8-3 3v5h11z"/><path class="st0 White" d="M16.4 19H19l-4-4-1.3 1.3z"/></svg>',
    'dxrd-svg-pictureeditor-size_mode_normal': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .st0{opacity:0.35;}</style><g><path class="Blue" d="M10 10h12v12H10z"/><path class="st0 Black" d="M5 15h3v2H5v4l-5-5 5-5v4zm6-10h4v3h2V5h4l-5-5-5 5zm21 11l-5-5v4h-3v2h3v4l5-5zm-15 8h-2v3h-4l5 5 5-5h-4v-3z"/><path class="Black" d="M28 22c-2.2 0-4 1.8-4 4v5c0 .6.4 1 1 1h6c.6 0 1-.4 1-1v-5c0-2.2-1.8-4-4-4zm0 2c1.1 0 2 .9 2 2h-4c0-1.1.9-2 2-2z"/></g></svg>',
    'dxrd-svg-pictureeditor-size_mode_squeeze': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .st0{opacity:0.35;}</style><g><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M28.2 26.8l2.1 2.1-1.4 1.4-2.1-2.1L24 31v-7h7l-2.8 2.8zm-24.4 0l-2.1 2.1 1.4 1.4 2.1-2.1L8 31v-7H1l2.8 2.8zM28.2 5.2l2.1-2.1-1.4-1.4-2.1 2.1L24 1v7h7l-2.8-2.8zM1 8h7V1L5.2 3.8 3.1 1.7 1.7 3.1l2.1 2.1L1 8z"/></g></svg>',
    'dxrd-svg-pictureeditor-size_mode_stretchimage': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .st0{opacity:0.35;}</style><g><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M5 15h3v2H5v4l-5-5 5-5v4zm6-10h4v3h2V5h4l-5-5-5 5zm21 11l-5-5v4h-3v2h3v4l5-5zm-15 8h-2v3h-4l5 5 5-5h-4v-3z"/></g></svg>',
    'dxrd-svg-pictureeditor-size_mode_zoomimage': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><style>.Black{fill:#727272;} .Blue{fill:#1177D7;} .st0{opacity:0.35;}</style><g><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M6.2 4.8l2.1 2.1-1.4 1.4-2.1-2.1L2 9V2h7L6.2 4.8zm19.6 0l-2.1 2.1 1.4 1.4 2.1-2.1L30 9V2h-7l2.8 2.8zM6.2 27.2l2.1-2.1-1.4-1.4-2.1 2.1L2 23v7h7l-2.8-2.8zM23 30h7v-7l-2.8 2.8-2.1-2.1-1.4 1.4 2.1 2.1L23 30z"/></g></svg>',
    'dxrd-svg-pictureeditor-toolbar_brush_options': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;} .BrushColor{fill:#000000;} .st0{opacity:0.75;}</style><g><path class="BrushColor" d="M2 21c8.5 8.6 11.8-4.5 19 0-8.4-8.6-11.8 4.6-19 0z"/><path class="White" d="M8 13l2 2c-2.5 4.2-4 4-8 4 2.5-2.5 3.3-6 6-6zm6-1l6.5-6.5c.3-.3.3-.7 0-1l-2-2c-.3-.3-.7-.3-1 0L11 9l3 3zm-5-1c-.3.3-.3.7 0 1l2 2c.3.3.7.3 1 0l1-1-3-3-1 1z"/></g></svg>',
    'dxrd-svg-pictureeditor-toolbar_clear': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;}</style><path class="White" d="M19 5c.6 0 1 .4 1 1v1H4V6c0-.6.4-1 1-1h5V4c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v1h5zm0 3v12c0 .6-.4 1-1 1H6c-.6 0-1-.4-1-1V8h14zM9 10H7v9h2v-9zm4 0h-2v9h2v-9zm4 0h-2v9h2v-9z"/></svg>',
    'dxrd-svg-pictureeditor-toolbar_open': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;} .Color{fill:#5DABE0;} .st0{opacity:0.75;}</style><g><path class="st0 White" d="M7.9 11.9c.4-.6 1-.9 1.7-.9H19V8.7c0-.4-.3-.7-.7-.7H10V5.7c0-.4-.3-.7-.7-.7H3.7c-.4 0-.7.3-.7.7v14l4.9-7.8z"/><path class="White" d="M9.6 12h13.2c.5 0 .9.6.6 1.1l-4 6.5c-.2.3-.5.5-.8.5H4l4.7-7.5c.2-.4.5-.6.9-.6z"/></g></svg>',
    'dxrd-svg-pictureeditor-toolbar_reset': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;}</style><path class="White" d="M12 3C9.5 3 7.3 4 5.6 5.6L3 3v8h8L7.8 7.8C8.9 6.7 10.3 6 12 6c3.3 0 6 2.7 6 6s-2.7 6-6 6c-2.6 0-4.8-1.7-5.6-4H3.2c.9 4 4.5 7 8.8 7 5 0 9-4 9-9s-4-9-9-9z"/></svg>',
    'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><style>.White{fill:#FFFFFF;} .Color{fill:#5DABE0;} .st0{opacity:0.75;}</style><path class="White" d="M20 12V4h-8l3 3-8 8-3-3v8h8l-3-3 8-8z"/></svg>',
    'dxrd-svg-portrait': '<svg data-bind="svgAttrs" viewBox="0 0 34 34"><style>.st0{opacity:0.5;}</style><g><path class="dxd-icon-fill" d="M29 0H5c-.5 0-1 .5-1 1v32c0 .5.5 1 1 1h24c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 32H6V2h22v30z"/><path class="st0 dxd-icon-fill" d="M24 8H10V6h14v2zm0 2H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2z"/></g></svg>',
    'dxrd-svg-preview-export-Export': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22 10l-4-4v2h-1.4C11.8 8 8 11.1 8 15.9V18c1-4.2 4.6-6 8.6-6H18v2l4-4z"/><path class="dxd-icon-fill" d="M18 22H4V2h14l2 2V0H2v24h18v-8l-2 2z"/></svg>',
    'dxrd-svg-preview-export-export-to-csv': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v11h10v-7l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3zM0 3v7h13V3H0zm4 2H2v3h2v1H2V8H1V5h1V4h2v1zm4 0H6v1h1v1h1v1H7v1H5V8h2V7H6V6H5V5h1V4h2v1zm4 3h-1v1h-1V8H9V4h1v4h1V4h1v4z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4z"/></svg>',
    'dxrd-svg-preview-export-export-to-html': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h18v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h19V3H0zm4 6H3V7H2v2H1V4h1v2h1V4h1v5zm4-4H7v4H6V5H5V4h3v1zm6 4h-1V6h-1v1h-1V6h-1v3H9V4h1v1h1v1h1V5h1V4h1v5zm4 0h-3V4h1v4h2v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-image': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h14v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h15V3H0zm2 6H1V4h1v5zm6 0H7V6H6v1H5V6H4v3H3V4h1v1h1v1h1V5h1V4h1v5zm5-4h-3v3h2V7h1v2h-3V8H9V5h1V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-mht': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM2 5h1v1H2z"/><path class="dxd-icon-fill" d="M0 3v7h13V3H0zm4 3H3v1h1v2H3V7H2v2H1V4h2v1h1v1zm4-1H7v4H6V5H5V4h3v1zm4 0h-2v1h1v1h-1v2H9V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-pdf': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM2 5h1v1H2z"/><path class="dxd-icon-fill" d="M0 3v7h13V3H0zm4 3H3v1H2v2H1V4h2v1h1v1zm4 2H7v1H5V4h2v1h1v3zm4-3h-2v1h1v1h-1v2H9V4h3v1z"/><path class="dxd-icon-fill" d="M6 5h1v3H6z"/></svg>',
    'dxrd-svg-preview-export-export-to-rtf': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h14v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h15V3H0zm6 6H5V6H4v1H3V6H2v3H1V4h1v1h1v1h1V5h1V4h1v5zm4 0H9V7H8v2H7V4h1v2h1V4h1v5zm4-4h-1v4h-1V5h-1V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-txt': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h18v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM18 3H0v7h19V3h-1zM4 6H3v1h1v2H3V7H2v2H1V7h1V6H1V4h1v2h1V4h1v2zm4 3H5V4h1v4h2v1zm4-4h-2v1h1v1h1v1h-1v1H9V8h2V7h-1V6H9V5h1V4h2v1zm4 1h-1v1h1v2h-1V7h-1v2h-1V7h1V6h-1V4h1v2h1V4h1v2z"/></svg>',
    'dxrd-svg-preview-export-export-to-xls': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM12.3 3H0v7h13V3h-.7zM4 6H3v1h1v2H3V7H2v2H1V7h1V6H1V4h1v2h1V4h1v2zm4 3H5V4h1v4h2v1zm4-4h-2v1h1v1h1v1h-1v1H9V8h2V7h-1V6H9V5h1V4h2v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-xlsx': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h13V3H0zm4 2H3v4H2V5H1V4h3v1zm4 1H7v1h1v2H7V7H6v2H5V7h1V6H5V4h1v2h1V4h1v2zm4-1h-1v4h-1V5H9V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 4l-4-4v4h4zM22 10v6H12v-6l-2 2v12h14V10h-2zm0 12H12v-4h10v4z"/><path class="dxd-icon-fill" d="M16 10h4v4h-4z"/><path class="dxd-icon-fill" d="M18 6h-6V0H0v20h8V10l2-2h8z"/></svg>',
    'dxrd-svg-preview-first_page': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M6 12l14 8V4zM2 3h2v18H2z"/></svg>',
    'dxrd-svg-preview-last_page': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 12L2 20V4zM18 3h2v18h-2z"/></svg>',
    'dxrd-svg-preview-multi_page_preview': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 0H0v10h10V2H8V0zm0 8H2V2h4v2h2v4zM20 2V0h-8v10h10V2h-2zm0 6h-6V2h4v2h2v4zM8 12H0v10h10v-8H8v-2zm0 8H2v-6h4v2h2v4z"/></svg>',
    'dxrd-svg-preview-next_page': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 12L4 20V4z"/></svg>',
    'dxrd-svg-preview-previous_page': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 12l14 8V4z"/></svg>',
    'dxrd-svg-preview-print': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 0H6v10h10V0zm-2 8H8V2h6v6zM6 24h10v-6H6v6zm2-4h6v2H8v-2z"/><path class="dxd-icon-fill" d="M20 8h-2v4H4V8H2l-2 2v10h4v-4h14v4h4V10z"/></svg>',
    'dxrd-svg-preview-print_page': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 0H6v10h10V0zm-2 8H8V2h6v6zM20 8h-2v2h4z"/><path class="dxd-icon-fill" d="M4 8H2l-2 2v10h12v-8H4zM22 14v-2h-8v12h10V14h-2zm0 8h-6v-8h4v2h2v6z"/></svg>',
    'dxrd-svg-preview-print_preview': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 4l-4-4v4zM21.7 22.3l-4.5-4.5c.5-.8.8-1.8.8-2.8 0-2.8-2.2-5-5-5s-5 2.2-5 5 2.2 5 5 5c1 0 2-.3 2.8-.8l4.5 4.5c.4.4 1 .4 1.4 0s.4-1 0-1.4zM13.1 18c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.4 3-3 3z"/><path class="dxd-icon-fill" d="M13 8c2 0 3.7.8 5 2.1V6h-6V0H0v20h8.1C6.8 18.7 6 17 6 15c0-3.9 3.1-7 7-7z"/></svg>',
    'dxrd-svg-preview-report_designer': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 6l-4-4v4h4zM14 18h2l8-8-2-2-8 8z"/><path class="dxd-icon-fill" d="M12 20v-4l6-6V8h-6V2H0v20h18v-4l-2 2h-4zm-6-4c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/><path class="dxd-icon-fill" d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2H6v-2z"/></svg>',
    'dxrd-svg-preview-search': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2.6 21.4c.8.8 2 .8 2.8 0l4.6-4.6c1.2.7 2.6 1.1 4.1 1.1 4.4 0 8-3.6 8-8s-3.6-8-8-8-8 3.6-8 8c0 1.5.4 2.9 1.1 4.1l-4.6 4.6c-.8.8-.8 2 0 2.8zM10 10.1c0-2.2 1.8-4 4-4s4 1.8 4 4-1.8 4-4 4-4-1.9-4-4z"/></svg>',
    'dxrd-svg-preview-single_page': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 4V0H2v24h20V4h-4zm2 18H4V2h12v4h4v16z"/></svg>',
    'dxrd-svg-preview-sort_asc': '<svg data-bind="svgAttrs" viewBox="0 0 11 11"><path class="dxd-icon-fill" d="M0 7l5-5 5 5z"/></svg>',
    'dxrd-svg-preview-sort_desc': '<svg data-bind="svgAttrs" viewBox="0 0 11 11"><path class="dxd-icon-fill" d="M10 3L5 8 0 3z"/></svg>',
    'dxrd-svg-reportexplorer-component': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><ellipse class="dxd-icon-fill" cx="11" cy="4" rx="7" ry="2"/><path class="dxd-icon-fill" d="M11 10c-3.9 0-7-.9-7-2v12c0 1.1 3.1 2 7 2s7-.9 7-2V8c0 1.1-3.1 2-7 2z"/></svg>',
    'dxrd-svg-reportexplorer-components': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><circle class="dxd-icon-fill" cx="12" cy="12" r="2"/><path class="dxd-icon-fill" d="M20 10h-.3c-.2-.7-.5-1.4-.9-2.1l.2-.2c.8-.8.8-2.1 0-2.8-.8-.8-2.1-.8-2.8 0l-.2.2c-.6-.4-1.3-.7-2.1-.9V4c0-1.1-.9-2-2-2S10 2.9 10 4v.3c-.7.2-1.4.4-2.1.8l-.1-.2c-.8-.7-2.1-.7-2.9 0-.7.8-.7 2.1 0 2.9l.2.2c-.4.6-.6 1.3-.8 2H4c-1.1 0-2 .9-2 2s.9 2 2 2h.3c.2.7.5 1.4.9 2.1l-.2.2c-.8.8-.8 2.1 0 2.8.8.8 2.1.8 2.8 0l.2-.2c.6.4 1.3.7 2.1.9v.2c0 1.1.9 2 2 2s2-.9 2-2v-.3c.7-.2 1.4-.5 2.1-.9l.2.2c.8.8 2.1.8 2.8 0 .8-.8.8-2.1 0-2.8L19 16c.4-.6.7-1.3.9-2.1h.1c1.1 0 2-.9 2-2 0-1-.9-1.9-2-1.9zm-8 6c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/></svg>',
    'dxrd-svg-reportexplorer-formatting_rule': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 10h6V2H2v18h12v-2l-4-4z"/><path class="dxd-icon-fill" d="M12 12v2l4 4v4h2v-4l4-4v-2z"/></svg>',
    'dxrd-svg-reportexplorer-formatting_rules': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 0H0v16h2V2h10z"/><path class="dxd-icon-fill" d="M10 10h6V4H4v16h10v-2l-4-4z"/><path class="dxd-icon-fill" d="M12 12v2l4 4v4h2v-4l4-4v-2z"/></svg>',
    'dxrd-svg-reportexplorer-style': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M6 20c1-.3 1.5-1.1 1.7-2 .2-.5.4-1 .8-1.4.3-.3.5-.5.9-.6 0 0 .7-.1 1-.5.1-.1.2-.3.2-.3l.7-1.3c.1-.2.8-.9.8-.9.6-.7 1.3-1.4 1.9-2.1V2H0v18h6zm5.4-6.4c-.1.3-.2.4 0 0zM21.8 8.1c-.2-.2-.5-.1-.8.1-.4.4-.9.7-1.3 1.1-2 1.7-3.5 3.4-5.3 5.3-.1.1-.5.5-.5.6-.2.2-.3.4-.6.8.6.5 1.5 1.2 2.1 1.7.4-.3.6-.6.6-.6l.4-.4c.7-.9 1.1-1.5 1.8-2.4 1.3-1.7 2.5-3.5 3.5-5.4.4-.3.3-.6.1-.8zM12.5 18.1c-.1-.1-.2-.1-.3-.1-.7-.1-1.2.2-1.7.7-.3.3-.6.8-.8 1.3-.2.9-.7 1.7-1.7 2h2.6c1 0 1.8-.4 2.5-1.1.4-.4.7-.9.6-1.5 0-.2-.1-.4-.2-.5-.3-.3-.7-.5-1-.8z"/></svg>',
    'dxrd-svg-reportexplorer-styles': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 0v2H2v14H0V0z"/><path class="dxd-icon-fill" d="M8 20c1-.3 1.5-1.1 1.7-2 .2-.5.4-1 .8-1.4.3-.3.5-.5.9-.6 0 0 .7-.1 1-.5.1-.1.2-.3.2-.3l.7-1.3c.1-.2.8-.9.8-.9.6-.7 1.3-1.4 1.9-2.1V4H4v16h4zm5.4-6.4c-.1.3-.2.4 0 0zM23.8 8.1c-.2-.2-.5-.1-.8.1-.4.4-.9.7-1.3 1.1-2 1.7-3.5 3.4-5.3 5.3-.1.1-.5.5-.5.6-.2.2-.3.4-.6.8.6.5 1.5 1.2 2.1 1.7.4-.3.6-.6.6-.6l.4-.4c.7-.9 1.1-1.5 1.8-2.4 1.3-1.7 2.5-3.5 3.5-5.4.4-.3.3-.6.1-.8zM14.5 18.1c-.1-.1-.2-.1-.3-.1-.7-.1-1.2.2-1.7.7-.4.4-.6.9-.8 1.4-.3.9-.7 1.6-1.7 2h2.6c1 0 1.8-.4 2.5-1.1.4-.4.7-.9.6-1.5 0-.2-.1-.4-.2-.5-.3-.4-.7-.6-1-.9z"/></svg>',
    'dxrd-svg-reportexplorer-tablecell': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 8v8h8V8H8zm6 6h-4v-4h4v4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M2 2v20h20V2H2zm18 6h-4v2h4v4h-4v2h4v4h-4v-4h-2v4h-4v-4H8v4H4v-4h4v-2H4v-4h4V8H4V4h4v4h2V4h4v4h2V4h4v4z"/></svg>',
    'dxrd-svg-reportexplorer-tablerow': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 8H2v8h20V8h-6zm-8 6H4v-4h4v4zm6 0h-4v-4h4v4zm6 0h-4v-4h4v4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M4 8V4h4v4h2V4h4v4h2V4h4v4h2V2H2v6zM20 16v4h-4v-4h-2v4h-4v-4H8v4H4v-4H2v6h20v-6z"/></svg>',
    'dxrd-svg-series-area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 20v-4l8-8 4 4 8-8v16z"/></svg>',
    'dxrd-svg-series-area3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 12v2h4v2H8v2h4v2H8v2h6V12zM20 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M12 8L8 4l-8 8v4h6v-6h14V0z"/></svg>',
    'dxrd-svg-series-bubbles': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><circle class="dxd-icon-fill" cx="8" cy="4" r="2"/><circle class="dxd-icon-fill" cx="16" cy="10" r="4"/><circle class="dxd-icon-fill" cx="7" cy="19" r="3"/></svg>',
    'dxrd-svg-series-candle_stick': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 4V2h-2v2h-2v16h2v2h2v-2h2V4h-2zm0 14h-2V6h2v12zM8 2H6v2H4v16h2v2h2v-2h2V4H8z"/></svg>',
    'dxrd-svg-series-doughnut': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M5.1 10C5.5 7 7 5.5 10 5.1V0C5 .5.5 5 0 10h5.1zM12 5.1c3 .5 5 2.9 5 5.9 0 1.3-.4 2.5-1.1 3.5l3.6 3.6c1.5-2 2.5-4.4 2.5-7.1C22 5.3 18 .5 12 0v5.1zM14.5 15.9c-1 .7-2.2 1.1-3.5 1.1-3 0-5.4-2-5.9-5H0c.5 6 5.2 10 11 10 2.7 0 5.1-1 7-2.6l-3.5-3.5z"/></svg>',
    'dxrd-svg-series-doughnut3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2.5v-5.9L22 12zm0 8h-2v-6h2v6zM10 4.9V0C5 .5.5 5 0 10h5c.5-3 2-4.6 5-5.1zM12 0v4.9c2 .4 4.5 2.1 4.9 5.1h5C21.5 5 17 .5 12 0zM5.1 12H0c.4 5 4 7.9 8 9.1v-5.3C6 14.9 5.4 14 5.1 12z"/></svg>',
    'dxrd-svg-series-full_stacked_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2v14L12 6l4 4 6-6V2z"/><path class="dxd-icon-fill" d="M12 10L2 20v2h20V8l-6 6z"/></svg>',
    'dxrd-svg-series-full_stacked_area3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM14 8l6-6V0H0v14L10 4z"/><path class="dxd-icon-fill" d="M10 8L0 18v2h8v-8h6zM20 6l-6 6h6z"/></svg>',
    'dxrd-svg-series-full_stacked_bar': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 4h4v10H4zM10 4h4v6h-4zM10 12h4v8h-4zM16 4h4v8h-4zM16 14h4v6h-4zM4 16h4v4H4z"/></svg>',
    'dxrd-svg-series-full_stacked_bar3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0h4v10H2zM8 0h4v6H8zM8 8h4v4H8zM14 0h4v8h-4zM14 10h4v2h-4zM2 12h4v4H2zM8 14v2h4v2H8v2h4v2H8v2h6V14h-2zM20 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/></svg>',
    'dxrd-svg-series-full_stacked_line': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2h20v2H2zM12 8L2 18v4l10-10 4 4 6-6V6l-6 6z"/></svg>',
    'dxrd-svg-series-full_stacked_line3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 14v2h4v2H8v2h4v2H8v2h6V14h-2zM20 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 0h20v2H0z"/><path class="dxd-icon-fill" d="M12 12h4l4-4V4l-6 6-4-4L0 16v4l10-10z"/></svg>',
    'dxrd-svg-series-full_stacked_spline_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 11.9c1.8 0 2.6 1.3 3.3 2.3S6.5 16 8 16c1.4 0 2.6-2.1 3.7-4.2C13.3 9.1 14.9 6 18 6c1.5 0 2.8.7 4 1.8V2H2v9.9z"/><path class="dxd-icon-fill" d="M18 8c-1.9 0-3.2 2.4-4.5 4.7C12.1 15.3 10.6 18 8 18s-3.7-1.6-4.4-2.7C3 14.3 2.7 14 2 14v8h20V10.7C20.8 9.3 19.4 8 18 8z"/></svg>',
    'dxrd-svg-series-full_stacked_spline_area3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM16 4c1.5 0 2.8.7 4 1.8V0H0v9.9c1.8 0 2.6 1.3 3.3 2.3C4 13.2 4.5 14 6 14c1.4 0 2.6-2.1 3.7-4.2C11.3 7.1 12.9 4 16 4z"/><path class="dxd-icon-fill" d="M11.5 10.8l-.6 1.2H20V8.7C18.8 7.3 17.4 6 16 6c-1.9 0-3.2 2.5-4.5 4.8zM1.6 13.3C1 12.3.7 12 0 12v8h8v-4.6c-1 .4-1.2.6-2 .6-2.6 0-3.6-1.6-4.4-2.7z"/></svg>',
    'dxrd-svg-series-funnel': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12h4l6-6H4zM4 2h16v2H4zM10 22l4-2v-6h-4z"/></svg>',
    'dxrd-svg-series-funnel3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM6 10h4l6-6H0zM0 0h16v2H0zM6 20l2-1v-7H6z"/></svg>',
    'dxrd-svg-series-gantt': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 4h8v4H2zM6 10h14v4H6zM2 16h12v4H2z"/></svg>',
    'dxrd-svg-series-line': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 16L12 6l4 4 6-6v4l-6 6-4-4L2 20z"/></svg>',
    'dxrd-svg-series-line3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20 0l-6 6-4-4L0 12v4L10 6l4 4 6-6z"/><path class="dxd-icon-fill" d="M8 12v2h4v2H8v2h4v2H8v2h6V12h-2zM20 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/></svg>',
    'dxrd-svg-series-manhattan_bar3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 12h4v8H0z"/><path class="dxd-icon-fill dxd-opacity-60" d="M12 5.9h4V10h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 10h2V2H6v18h2z"/></svg>',
    'dxrd-svg-series-nested_doughnut': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20 10h2c-.5-5-5-9.5-10-10v2c4 .5 7.5 4 8 8z"/><path class="dxd-icon-fill" d="M11 20c-5 0-9-4-9-9 0-4.6 3-8.5 8-9V0C4 .5 0 5.2 0 11c0 6.1 4.9 11 11 11 5.7 0 10.5-4 11-10h-2c-.5 5-4.3 8-9 8z"/><path class="dxd-icon-fill" d="M11 16c-2.4 0-4.4-2-4.9-4h-2c.5 3 3.4 6 6.9 6 1.4 0 2.7-.4 3.8-1.2l-1.5-1.5c-.6.5-1.4.7-2.3.7zM4.1 10h2c.5-2 2.5-4 4.9-4 2.8 0 5 2.2 5 5 0 .9-.2 1.7-.7 2.4l1.5 1.5c.8-1.1 1.2-2.5 1.2-3.9 0-3.9-3.1-7-7-7-3.5 0-6.4 3-6.9 6z"/></svg>',
    'dxrd-svg-series-pie': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M12 2v10H2c0 5.5 4.5 10 10 10s10-4.5 10-10S17.5 2 12 2z"/><path class="dxd-icon-fill" d="M10 0C4.5 0 0 4.5 0 10h10V0z"/></svg>',
    'dxrd-svg-series-pie3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM10 0C4.5 0 0 4.5 0 10h10V0zM12 2v8h9.8c-.9-4.6-5-8-9.8-8zM8 21.1V12H2c0 4.1 2 7.6 6 9.1z"/></svg>',
    'dxrd-svg-series-point': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><circle class="dxd-icon-fill" cx="4" cy="16" r="2"/><circle class="dxd-icon-fill" cx="8" cy="8" r="2"/><circle class="dxd-icon-fill" cx="14" cy="12" r="2"/><circle class="dxd-icon-fill" cx="20" cy="6" r="2"/></svg>',
    'dxrd-svg-series-polar_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm.9 19.9V17c0-.5-.5-1-1-1s-1 .5-1 1v3c-4-.4-7.5-3.8-8-8h3.1c.5 0 1-.5 1-1s-.5-1-1-1h-3H2c.5-4.2 4-7.5 8-8v1c0 .5.5 1 1 1s1-.5 1-1v-.9c4 .5 7.5 3.8 7.9 7.9H19c-.5 0-1 .5-1 1s.5 1 1 1h.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><path class="dxd-icon-fill" d="M6 6h10v10z"/></svg>',
    'dxrd-svg-series-polar_line': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm.9 19.9V17c0-.5-.5-1-1-1s-1 .5-1 1v3c-4-.4-7.5-3.8-8-8h3.1c.5 0 1-.5 1-1s-.5-1-1-1h-3H2c.5-4.2 4-7.5 8-8v1c0 .5.5 1 1 1s1-.5 1-1v-.9c4 .5 7.5 3.8 7.9 7.9H19c-.5 0-1 .5-1 1s.5 1 1 1h.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><path class="dxd-icon-fill" d="M16 16L6 6h10v10zm-6-8l4 4V8h-4z"/></svg>',
    'dxrd-svg-series-polar_point': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm8.8 10H12V2.1c4 .5 7.5 3.8 7.9 7.9zM10 2v8H2.1 2c.5-4.2 4-7.5 8-8zm0 18c-4-.4-7.5-3.8-8-8h8v8zm2-.1V12h7.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="7" cy="15" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/></svg>',
    'dxrd-svg-series-radar_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 16L6 6h10v10zm-6-8l4 4V8h-4z"/><path class="dxd-icon-fill dxd-opacity-60" d="M11.9 15.9c-.3.1-.6.1-.9.1-2.8 0-5-2.2-5-5 0-.3 0-.6.1-.9L4.5 8.5c-.3.8-.5 1.6-.5 2.5 0 3.9 3.1 7 7 7 .9 0 1.7-.2 2.5-.5l-1.6-1.6z"/><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/></svg>',
    'dxrd-svg-series-radar_line': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="7" cy="15" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/><g><path class="dxd-icon-fill dxd-opacity-60" d="M13.1 15.5c-.6.3-1.4.5-2.1.5-.7 0-1.4-.2-2.1-.5-.2.7-.8 1.3-1.6 1.4 1.1.7 2.3 1 3.6 1 1.3 0 2.6-.4 3.7-1-.7-.1-1.3-.6-1.5-1.4zM17 7.4c-.1.8-.7 1.4-1.4 1.6.2.6.4 1.3.4 2s-.2 1.4-.5 2.1c.7.2 1.3.8 1.4 1.6.6-1.1 1-2.3 1-3.6s-.3-2.7-.9-3.7zM8.9 6.5c.7-.3 1.4-.5 2.1-.5.7 0 1.5.2 2.1.5.2-.7.8-1.3 1.6-1.4-1.1-.7-2.3-1-3.7-1-1.3-.1-2.6.3-3.6.9.7.2 1.3.7 1.5 1.5zM6.5 13.1c-.3-.7-.5-1.4-.5-2.1s.2-1.4.5-2.1c-.8-.2-1.3-.8-1.5-1.6-.6 1.1-1 2.4-1 3.7s.4 2.6 1 3.7c.2-.8.7-1.4 1.5-1.6z"/></g></svg>',
    'dxrd-svg-series-radar_point': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-60" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/><g><path class="dxd-icon-fill dxd-opacity-60" d="M13.1 15.5c-.6.3-1.4.5-2.1.5-.3 0-.6 0-.9-.1h-.2c-.2-.1-.5-.1-.7-.2-.1 0-.2-.1-.3-.1-1.1-.5-2-1.4-2.5-2.5-.1-.1-.1-.2-.1-.3-.1-.2-.2-.4-.2-.7v-.2c-.1-.3-.1-.6-.1-.9 0-.5.1-1 .2-1.5.1-.2.1-.4.2-.6-.7-.2-1.2-.8-1.4-1.6-.1.3-.2.5-.4.8 0 .1-.1.1-.1.2 0 .2-.1.4-.2.6 0 .1-.1.2-.1.3 0 .2-.1.4-.1.6v.3c-.1.3-.1.6-.1.9 0 .3 0 .6.1.9v.2c0 .3.1.5.2.8v.1c.5 1.7 1.6 3.1 3.1 4 .5.3 1.1.6 1.7.8h.1c.3.1.5.1.8.2h.2c.3 0 .6.1.9.1h.5c1.1-.1 2.2-.4 3.1-1-.8-.3-1.4-.8-1.6-1.6zM17 7.4c-.1.8-.7 1.4-1.4 1.6.2.6.4 1.3.4 2s-.2 1.4-.5 2.1c.7.2 1.3.8 1.4 1.6.6-1.1 1-2.3 1-3.6s-.3-2.7-.9-3.7zM7.4 5c.8.1 1.4.7 1.6 1.4.6-.2 1.3-.4 2-.4s1.5.2 2.1.5c.2-.7.8-1.3 1.6-1.4-1.1-.7-2.3-1-3.7-1-1.3-.1-2.6.3-3.6.9z"/></g></svg>',
    'dxrd-svg-series-range_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 14L12 4l4 4 6-6v6l-6 6-4-4L2 20z"/></svg>',
    'dxrd-svg-series-range_area3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M20 0l-6 6-4-4L0 12v6L10 8l2 2h4l4-4z"/></svg>',
    'dxrd-svg-series-range_bar': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 12h4v8H4zM16 6h4v14h-4zM10 2h4v14h-4z"/></svg>',
    'dxrd-svg-series-scatter_line': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22.8 8c-1.5-2.7-4-4.7-7-5.5-3-.8-6.1-.8-8.8.8C3 5.6.5 10 0 14h2.1c.4-4 2.5-6.9 6-8.9 2.2-1.3 4.8-1.4 7.2-.7 2.4.6 4.4 2.3 5.7 4.5 1 1.7 1.2 3.8.7 5.7-.5 1.9-1.8 3.5-3.5 4.5-2.7 1.6-6.2.6-7.8-2.2-1.2-2.1-.4-4.8 1.6-6 .8-.4 1.6-.5 2.5-.3.8.2 1.5.8 2 1.6.3.6.4 1.2.2 1.9-.2.6-.6 1.2-1.1 1.5-.8.5-1.9.2-2.4-.7-.3-.6-.1-1.3.4-1.6l-1-1.8c-1.5.9-2.1 2.9-1.2 4.4 1 1.8 3.3 2.5 5.1 1.4 2.1-1.2 2.9-4 1.7-6.1-.7-1.3-1.8-2.1-3.2-2.5-1.4-.4-2.8-.2-4 .5C8 11 6.9 14.9 8.7 18c2.1 3.8 6.8 5.1 10.6 2.9 2.2-1.3 3.8-3.3 4.4-5.7.6-2.4.3-5-.9-7.2z"/></svg>',
    'dxrd-svg-series-side_by_side_bar': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 12h4v8H4zM16 6h4v14h-4zM10 2h4v18h-4z"/></svg>',
    'dxrd-svg-series-side_by_side_bar3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 10h4v8H0zM12 4h4v6h-4zM10 0H6v18h2v-8h2z"/></svg>',
    'dxrd-svg-series-side_by_side_full_stacked_bar': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h4v12H0zM0 14h4v8H0zM12 0h4v16h-4zM12 18h4v4h-4zM18 8h4v14h-4zM18 0h4v6h-4zM6 8h4v14H6zM6 0h4v6H6z"/></svg>',
    'dxrd-svg-series-side_by_side_full_stacked_bar3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 0h4v12H0zM0 14h4v8H0zM12 0h4v12h-4zM18 8h4v4h-4zM18 0h4v6h-4zM6 0h4v6H6zM10 8H6v14h2V12h2z"/></svg>',
    'dxrd-svg-series-side_by_side_gantt': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0h8v4H2zM4 12h12v4H4zM6 18h12v4H6zM6 6h14v4H6z"/></svg>',
    'dxrd-svg-series-side_by_side_range_bar': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 12h4v8H0zM12 6h4v12h-4zM18 4h4v12h-4zM6 2h4v14H6z"/></svg>',
    'dxrd-svg-series-side_by_side_stacked_bar': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 10h4v2H0zM0 14h4v8H0zM6 12h4v10H6zM6 0h4v10H6zM12 4h4v4h-4zM12 10h4v12h-4zM18 2h4v4h-4zM18 8h4v14h-4z"/></svg>',
    'dxrd-svg-series-side_by_side_stacked_bar3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 8h4v4H0zM0 14h4v8H0zM6 12h2v10H6zM6 0h4v10H6zM12 4h4v4h-4zM12 10h4v2h-4zM18 2h4v4h-4zM18 8h4v2h-4z"/></svg>',
    'dxrd-svg-series-spline': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 11.5C22.1 8.6 19.7 6 17 6c-3 0-4.7 3.1-6.2 5.8C9.6 13.8 8.4 16 7 16c-1.5 0-2-.8-2.7-1.8-.6-1-1.5-2.2-3.3-2.3-.4 0-.7.1-1 .2V15c0-.1.1-.5.4-.8.2-.2.5-.3.6-.3.7 0 1 .4 1.6 1.3C3.4 16.4 4.4 18 7 18c2.6 0 4.1-2.7 5.5-5.2C13.8 10.4 15.1 8 17 8c2.9 0 5.9 5.4 6.9 7.2l.1.2v-3.9z"/></svg>',
    'dxrd-svg-series-spline3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM15 2c2.9 0 5.9 5.4 6.9 7.2l.1.2V5.5C20.1 2.6 17.7 0 15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v2.3c.2.2.4.5.6.9C1.4 10.4 2.4 12 5 12c2.6 0 4.1-2.7 5.5-5.2C11.8 4.4 13.1 2 15 2z"/></svg>',
    'dxrd-svg-series-spline_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M15 2c-3 0-4.7 3.1-6.2 5.8C7.6 9.8 6.4 12 5 12c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V20h22V7.5C20.1 4.6 17.8 2 15 2z"/></svg>',
    'dxrd-svg-series-spline_area3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M22 7.5C20.1 4.6 17.8 2 15 2c-3 0-4.7 3.1-6.2 5.8C7.6 9.8 6.4 12 5 12c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V20h8v-8h14V7.5z"/></svg>',
    'dxrd-svg-series-stacked_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 8l-4-4L2 14v4L12 8l4 4 6-6V2z"/><path class="dxd-icon-fill" d="M12 12L2 22h20V10l-6 6z"/></svg>',
    'dxrd-svg-series-stacked_area3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM8 22v-8l-8 8z"/><path class="dxd-icon-fill" d="M20 2l-6 6-4-4L0 14v4L10 8l2 2h4l4-4z"/></svg>',
    'dxrd-svg-series-stacked_bar': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 8h4v4H4zM4 14h4v6H4zM10 2h4v6h-4zM10 10h4v10h-4zM16 6h4v4h-4zM16 12h4v8h-4z"/></svg>',
    'dxrd-svg-series-stacked_bar3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 6h4v4H0zM0 12h4v6H0zM6 0h4v6H6zM10 8H6v10h2v-6h2zM12 4h4v4h-4zM12 10h4v2h-4z"/></svg>',
    'dxrd-svg-series-stacked_line': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M14 8l-4-4L0 14v4L10 8l4 4 8-8V0z"/><path class="dxd-icon-fill" d="M10 10L0 20v4l10-10 8 8 4-4v-4l-4 4z"/></svg>',
    'dxrd-svg-series-stacked_line3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M14 12l8-8V0l-8 8-4-4L0 14v4L10 8zM10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M10 10l-2 2h4zM0 24l8-8v-4l-8 8zM22 10V6l-6 6h4z"/></svg>',
    'dxrd-svg-series-stacked_spline_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v6c1.2.4 1.8 1.3 2.3 2.1C3 15.2 3.5 16 5 16c1.4 0 2.6-2.1 3.7-4.2C10.3 9.1 12 6 15 6c2.8 0 5.1 2.6 7 5.5v-6C20.1 2.6 17.8 0 15 0z"/><path class="dxd-icon-fill" d="M15 9c-3 0-4.7 3.1-6.2 5.8C7.6 16.8 6.4 19 5 19c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V22h22v-7.5C20.1 11.6 17.8 9 15 9z"/></svg>',
    'dxrd-svg-series-stacked_spline_area3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M15 6c2.8 0 5.1 2.6 7 5.5v-6C20.1 2.6 17.8 0 15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v6c1.2.4 1.8 1.3 2.3 2.1C3 15.2 3.5 16 5 16c1.4 0 2.6-2.1 3.7-4.2C10.3 9.1 12 6 15 6z"/><path class="dxd-icon-fill" d="M5.1 19c-1.5 0-2.1-.8-2.8-1.8-.5-.8-1.2-1.7-2.3-2.1V22h8v-5.7C7 17.8 6.1 19 5.1 19zM10.4 12h9.7c-1.5-1.7-3.2-3-5.2-3-1.9 0-3.3 1.3-4.5 3z"/></svg>',
    'dxrd-svg-series-step_area': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 6V0h-6v12H6V8H0v14h24V6z"/></svg>',
    'dxrd-svg-series-step_area3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM18 14v10h4l2-2v-6l-2-2h-4zm4 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M18 6V0h-6v10H6V6H0v14h8v-8h16V6z"/></svg>',
    'dxrd-svg-series-step_line': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M14 2v18H8v-6H0v2h6v6h10V4h6v8h2V2z"/></svg>',
    'dxrd-svg-series-step_line3d': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM6 12H0v2h4v6h4v-2H6zM16 10h4V8h-2V0h-8v12h2V2h4v6z"/></svg>',
    'dxrd-svg-series-stock': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 0H4v4H0v4h4v14h4v-4h4v-4H8zM20 18V0h-8v4h4v18h8v-4z"/></svg>',
    'dxrd-svg-series-swift_plot': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 8l-4 4-2-2-6 6-4-4-2 2-4-4-2 2v-2l2-2 4 4 2-2 4 4 6-6 2 2 4-4"/></svg>',
    'dxrd-svg-tabs-collapse': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M16 12l-6 6-2-2 4-4-4-4 2-2z"/></svg>',
    'dxrd-svg-tabs-expand': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 12l6 6 2-2-4-4 4-4-2-2z"/></svg>',
    'dxrd-svg-tabs-expressions': '<svg data-bind="svgAttrs" viewBox="0 0 32 32"><path class="dxd-icon-fill" d="M18.6 10c.3-2.5.6-3.4.8-3.7.6-1 2.2-.2 3 0l4.1-4c-3.6-.5-7.1-1.1-9.8 2-1.2 1.4-2 3.3-2.3 5.7l-.2 2H10l-4 4h7.7l-.7 7c-.2 1.9-.8 3.6-3 2.9l-.8-.3-3.7 3.3 2.3.8c2.4.8 4.9-.1 6.7-1.7 1-.9 1.7-1.9 2.2-3 .4-1.1.7-2.5.9-4.4L18 16h4l4-4h-7.6l.2-2z"/></svg>',
    'dxrd-svg-tabs-fieldlist': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><ellipse class="dxd-icon-fill" cx="11" cy="2" rx="7" ry="2"/><path class="dxd-icon-fill" d="M11 6c-3.9 0-7-.9-7-2v4c0 1.1 3.1 2 7 2s7-.9 7-2V4c0 1.1-3.1 2-7 2zM11 12c-3.9 0-7-.9-7-2v4c0 1.1 3.1 2 7 2s7-.9 7-2v-4c0 1.1-3.1 2-7 2zM11 18c-3.9 0-7-.9-7-2v4c0 1.1 3.1 2 7 2s7-.9 7-2v-4c0 1.1-3.1 2-7 2z"/></svg>',
    'dxrd-svg-tabs-parameters': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M19.8 5c-.2-.4-.4-.7-.9-1.1C17.3 2.7 14 2 11 2c-3.4 0-6.3.7-7.8 1.9 0 0-.7.5-1 1.1-.1.3-.2.7-.2 1 0 .2-.1.9 1 2l7 7v6c0 .6.5 1 1 1s1-.5 1-1v-6l7-7c.5-.4 1-1.2 1-2 0-.3-.1-.7-.2-1zM11 8c-3.9 0-7-.9-7-2s3.1-2 7-2c4 0 7 .9 7 2s-3.1 2-7 2z"/></svg>',
    'dxrd-svg-tabs-reportexplorer': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 16v-6h-6V6h4V0H6v6h4v4H4v6H0v6h10v-6H6v-4h10v4h-4v6h10v-6z"/></svg>',
    'dxrd-svg-tabs-search': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2.6 21.4c.8.8 2 .8 2.8 0l4.6-4.5c1.1.7 2.5 1.1 4 1.1 4.4 0 8-3.6 8-8s-3.6-8-8-8-8 3.6-8 8c0 1.5.4 2.9 1.1 4.1l-4.6 4.6c-.7.7-.7 1.9.1 2.7zM10 10c0-2.2 1.8-4 4-4s4 1.8 4 4-1.8 4-4 4-4-1.8-4-4z"/></svg>',
    'dxrd-svg-titles-bottom_center': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M4 0v14h14V0H4zm6 8V6h2v2h-2zm2 2v2h-2v-2h2zm-2-6V2h2v2h-2zM6 2h2v2H6V2zm0 4h2v2H6V6zm0 4h2v2H6v-2zm10 2h-2v-2h2v2zm0-4h-2V6h2v2zm-2-4V2h2v2h-2z"/><path class="dxd-icon-fill" d="M6 18h10v4H6z"/></svg>',
    'dxrd-svg-titles-bottom_left': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M6 0v14h14V0H6zm6 8V6h1.9v2H12zm1.9 2v2H12v-2h1.9zM12 4V2h1.9v2H12zM8 2h1.9v2H8V2zm0 4h1.9v2H8V6zm0 4h1.9v2H8v-2zm9.9 2H16v-2h1.9v2zm0-4H16V6h1.9v2zM16 4V2h1.9v2H16z"/><path class="dxd-icon-fill" d="M2 18h10v4H2z"/></svg>',
    'dxrd-svg-titles-bottom_right': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 0v14h14V0H2zm6 8V6h2v2H8zm2 2v2H8v-2h2zM8 4V2h2v2H8zm6 0h-2V2h2v2zm0 4h-2V6h2v2zm0 4h-2v-2h2v2zM4 10h2v2H4v-2zm0-4h2v2H4V6zm0-2V2h2v2H4z"/><path class="dxd-icon-fill" d="M10 18h10v4H10z"/></svg>',
    'dxrd-svg-titles-left_bottom_vertical': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 2H8v14h14V2zm-8 6h2v2h-2V8zm-2 2h-2V8h2v2zm6-2h2v2h-2V8zm0 6v-2h2v2h-2zm-4 0v-2h2v2h-2zm-4 0v-2h2v2h-2zm2-10v2h-2V4h2zm4 0v2h-2V4h2zm2 0h2v2h-2V4z"/><path class="dxd-icon-fill" d="M0 10h4v10H0z"/></svg>',
    'dxrd-svg-titles-left_center_vertical': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 4H8v14h14V4zm-8 6h2v2h-2v-2zm-2 2h-2v-2h2v2zm6-2h2v2h-2v-2zm2-4v2h-2V6h2zm-4 0v2h-2V6h2zm-4 0v2h-2V6h2zm-2 10v-2h2v2h-2zm4 0v-2h2v2h-2zm4-2h2v2h-2v-2z"/><path class="dxd-icon-fill" d="M0 6h4v10H0z"/></svg>',
    'dxrd-svg-titles-left_top_vertical': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M22 6H8v14h14V6zm-8 6h2v2h-2v-2zm-2 2h-2v-2h2v2zm6-2h2v2h-2v-2zm2-4v2h-2V8h2zm-4 0v2h-2V8h2zm-4 0v2h-2V8h2zm-2 10v-2h2v2h-2zm4 0v-2h2v2h-2zm4-2h2v2h-2v-2z"/><path class="dxd-icon-fill" d="M0 2h4v10H0z"/></svg>',
    'dxrd-svg-titles-right_bottom_vertical': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 16h14V2H0v14zm8-6H6V8h2v2zm2-2h2v2h-2V8zm-6 2H2V8h2v2zm-2 4v-2h2v2H2zm4 0v-2h2v2H6zm4 0v-2h2v2h-2zm2-10v2h-2V4h2zM8 4v2H6V4h2zM4 6H2V4h2v2z"/><path class="dxd-icon-fill" d="M18 10h4v10h-4z"/></svg>',
    'dxrd-svg-titles-right_center_vertical': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 18h14V4H0v14zm8-6H6v-2h2v2zm2-2h2v2h-2v-2zm-6 2H2v-2h2v2zm0-6v2H2V6h2zm4 0v2H6V6h2zm4 0v2h-2V6h2zm-2 10v-2h2v2h-2zm-4 0v-2h2v2H6zm-2 0H2v-2h2v2z"/><path class="dxd-icon-fill" d="M18 6h4v10h-4z"/></svg>',
    'dxrd-svg-titles-right_top_vertical': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 20h14V6H0v14zm8-6H6v-2h2v2zm2-2h2v2h-2v-2zm-6 2H2v-2h2v2zm0-6v2H2V8h2zm4 0v2H6V8h2zm4 0v2h-2V8h2zm-2 10v-2h2v2h-2zm-4 0v-2h2v2H6zm-2 0H2v-2h2v2z"/><path class="dxd-icon-fill" d="M18 2h4v10h-4z"/></svg>',
    'dxrd-svg-titles-top_center': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M18 22V8H4v14h14zm-6-8v2h-2v-2h2zm-2-2v-2h2v2h-2zm2 6v2h-2v-2h2zm-6 0h2v2H6v-2zm0-4h2v2H6v-2zm0-4h2v2H6v-2zm10 2h-2v-2h2v2zm0 4h-2v-2h2v2zm0 2v2h-2v-2h2z"/><path class="dxd-icon-fill" d="M6 0h10v4H6z"/></svg>',
    'dxrd-svg-titles-top_left': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 22V8H6v14h14zm-6-8v2h-2v-2h2zm-2-2v-2h2v2h-2zm2 6v2h-2v-2h2zm-6 0h2v2H8v-2zm0-4h2v2H8v-2zm0-4h2v2H8v-2zm10 2h-2v-2h2v2zm0 4h-2v-2h2v2zm0 2v2h-2v-2h2z"/><path class="dxd-icon-fill" d="M2 0h10v4H2z"/></svg>',
    'dxrd-svg-titles-top_right': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M16 22V8H2v14h14zm-6-8v2H8v-2h2zm-2-2v-2h2v2H8zm2 6v2H8v-2h2zm4 2h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2v-2h2v2zM4 10h2v2H4v-2zm0 4h2v2H4v-2zm2 4v2H4v-2h2z"/><path class="dxd-icon-fill" d="M10 0h10v4H10z"/></svg>',
    'dxrd-svg-todo-chart': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M0 10h4v12H0zM18 12h4v10h-4zM6 6h4v16H6zM12 2h4v20h-4z"/></svg>',
    'dxrd-svg-todo-gauge': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M11 0C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11S17.1 0 11 0zm0 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><path class="dxd-icon-fill dxd-opacity-80" d="M11 9c-.2 0-.4 0-.5.1L7.4 6c-.4-.3-1.1-.3-1.5 0s-.4 1 0 1.4L9 10.5v.5c0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2zM6 10.1L4.5 8.5c-.3.8-.5 1.6-.5 2.5 0 1.9.8 3.7 2 5l1.3-1.3c-.9-.9-1.4-2.1-1.4-3.5 0-.4.1-.8.1-1.1z"/><path class="dxd-icon-fill dxd-opacity-80" d="M11 4c-.9 0-1.8.2-2.5.5l1.8 1.8c.2 0 .5-.1.7-.1 2.8 0 5 2.2 5 5 0 1.3-.5 2.5-1.4 3.4L16 16c1.3-1.3 2-3.1 2-5 0-3.9-3.1-7-7-7z"/></svg>',
    'dxrd-svg-todo-pivotgrid': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M20 2H4v2l8 8-8 8v2h16v-2H7l8-8-8-8h13z"/></svg>',
    'dxrd-svg-todo-sparkline': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill dxd-opacity-80" d="M2 4v16h20V4H2zm18 10l-2-2-4 4-2-2-4 4-2-2-2 2v-4l2-2 2 2 4-4 2 2 4-4 2 2v4z"/></svg>',
    'dxrd-svg-toolbar-fullscreen': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M1 10h3V4h6V1H1zM4 14H1v9h9v-3H4zM14 1v3h6v6h3V1zM20 20h-6v3h9v-9h-3z"/></svg>',
    'dxrd-svg-toolbar-hightlightEditingFields': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M24 15l-12-5 5 12 2-3 3 3 2-2-3-3zM18 0H0v8h18V0zm-2 6H2V2h14v4zM2 16v-4h8.8l-.8-2H0v8h13.3l-.8-2z"/></svg>',
    'dxrd-svg-toolbar-scripts': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M22 6c-.1-1-1.4-3.4-3-4-.7.5-1.5 1.3-.5 4H22z"/><path class="dxd-icon-fill" d="M16 4c0-1.5.8-2.7 1.9-3.4-.4-.3-1.1-.6-2-.6h-12C1.7 0 0 1.8 0 4v.2L3.4 16H17.2s.2 1.9.4 2.4c.1.3.3 1 .5 1.2.4.6.7 1.1.8 1.1C19.6 20 20 19 20 18L16 4zM17.9.6c.2.1-.1-.1 0 0z"/><path class="dxd-icon-fill" d="M16.4 19.9c-.3-.8-.4-1.9-.4-1.9H0c0 2.2 1.7 4 3.9 4h12c.6 0 1.1-.1 1.6-.3 0-.1-.2-.3-.5-.8-.2-.2-.3-.5-.6-1z"/></svg>',
    'dxrd-svg-toolbar-validateBindingMode': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 5V3c0-1.7 3.6-3 8-3s8 1.3 8 3v2c0 1.7-3.6 3-8 3S0 6.7 0 5zm8 9h.5c.6-1.8 1.8-3.3 3.3-4.4-1.1.3-2.4.4-3.8.4-4.4 0-8-1.3-8-3v4c0 1.7 3.6 3 8 3zm0 3c0-.3 0-.7.1-1H8c-4.4 0-8-1.3-8-3v4c0 1.7 3.6 3 8 3h.5c-.3-.9-.5-2-.5-3zm9-7c-3.9 0-7 3.1-7 7s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm1 12h-2v-2h2v2zm0-4h-2v-6h2v6z"/></svg>',
    'dxrd-svg-toolbox-barcode': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h2v20H0zM14 0h4v18h-4zM10 0h2v16h-2zM4 0h4v18H4zM20 0h2v20h-2z"/></svg>',
    'dxrd-svg-toolbox-charactercomb': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 3v18h9V3H2zm7 10v5H5v-1H4v-3h1v-1h3v-2H5v-1h3v1h1v2z"/><path class="dxd-icon-fill" d="M5 14h3v3H5z"/><g><path class="dxd-icon-fill" d="M15 12h3v5h-3z"/><path class="dxd-icon-fill" d="M12 3v18h9V3h-9zm7 9v6h-5V8h1v3h4v1z"/></g></svg>',
    'dxrd-svg-toolbox-chart': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 10h4v12H0zM18 12h4v10h-4zM6 6h4v16H6zM12 2h4v20h-4z"/></svg>',
    'dxrd-svg-toolbox-checkbox': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2v20h20V2H2zm18 6L8 20l-4-4v-4l4 4L20 4v4z"/></svg>',
    'dxrd-svg-toolbox-crossbandbox': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 8h20v2H2zM2 12h20v2H2zM6 4h12v2h2V2H4v4h2zM18 18H6v-2H4v4h16v-4h-2z"/></svg>',
    'dxrd-svg-toolbox-crossbandline': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 8h18v2H2zM2 12h18v2H2zM10 0h2v6h-2zM10 16h2v6h-2z"/></svg>',
    'dxrd-svg-toolbox-gauge': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M11 0C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11S17.1 0 11 0zm0 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><path class="dxd-icon-fill" d="M11 9c-.2 0-.4 0-.5.1L7.4 6c-.4-.3-1.1-.3-1.5 0s-.4 1 0 1.4L9 10.5v.5c0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2zM6 10.1L4.5 8.5c-.3.8-.5 1.6-.5 2.5 0 1.9.8 3.7 2 5l1.3-1.3c-.9-.9-1.4-2.1-1.4-3.5 0-.4.1-.8.1-1.1z"/><path class="dxd-icon-fill" d="M11 4c-.9 0-1.8.2-2.5.5l1.8 1.8c.2 0 .5-.1.7-.1 2.8 0 5 2.2 5 5 0 1.3-.5 2.5-1.4 3.4L16 16c1.3-1.3 2-3.1 2-5 0-3.9-3.1-7-7-7z"/></svg>',
    'dxrd-svg-toolbox-label': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20.7 20.9c-.4-.4-.9-1.4-1.6-2.9L12.3 2H12L5.3 17.6c-.6 1.5-1.2 2.5-1.6 3s-1 .8-1.7.9v.5h6v-.5c-1-.1-1.5-.2-1.7-.3-.4-.3-.6-.7-.6-1.2 0-.4.2-.9.4-1.6l.2-.4h8l.4.9c.3.6.4 1 .4 1.1.1.2.1.4.1.5 0 .3-.1.3-.3.4-.4.2-.9.1-1.6.1H13v1h9v-.5c-.6-.1-1-.3-1.3-.6zM13.4 16H7.2l3.2-7.4 3 7.4z"/></svg>',
    'dxrd-svg-toolbox-line': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M18 16L8 6V0H0v8h6l10 10v6h8v-8h-6zM2 6V2h4v4H2zm20 16h-4v-4h4v4z"/></svg>',
    'dxrd-svg-toolbox-pagebreak': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M4 2h14v6H4zM4 16h14v6H4zM0 8v8l4-4zM18 12l4 4V8z"/></svg>',
    'dxrd-svg-toolbox-pageinfo': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M15 10c-3.9 0-7 3.1-7 7s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm1 12h-2v-6h2v6zm0-8h-2v-2h2v2z"/><path class="dxd-icon-fill" d="M14.9 8c.4 0 .8 0 1.1.1V6h-6V0H0v20h6.3c-.3-.9-.5-1.9-.5-3 0-5 4.1-9 9.1-9z"/><path class="dxd-icon-fill" d="M12 0v4h4z"/></svg>',
    'dxrd-svg-toolbox-panel': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2v20h20V2H2zm18 18H4V4h16v16z"/></svg>',
    'dxrd-svg-toolbox-picturebox': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 4v16h20V4H2zm6 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm12 12H4v-1.9L8 12l2 2 6-6 4 4v6z"/></svg>',
    'dxrd-svg-toolbox-pivotgrid': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20 2H4v2l8 8-8 8v2h16v-2H7l8-8-8-8h13z"/></svg>',
    'dxrd-svg-toolbox-richtext': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M20 6h-4V2z"/><path class="dxd-icon-fill" d="M10 16v-6h6l4 4V8h-6V2H4v20h12z"/><path class="dxd-icon-fill" d="M12 12v2l8 8v-4l-6-6z"/></svg>',
    'dxrd-svg-toolbox-shape': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><circle class="dxd-icon-fill" cx="14" cy="14" r="6"/><path class="dxd-icon-fill" d="M14 6c.7 0 1.4.1 2 .3V2H4v12h2c0-4.4 3.6-8 8-8z"/></svg>',
    'dxrd-svg-toolbox-sparkline': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 4v16h20V4H2zm18 10l-2-2-4 4-2-2-4 4-2-2-2 2v-4l2-2 2 2 4-4 2 2 4-4 2 2v4z"/></svg>',
    'dxrd-svg-toolbox-subreport': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M8 0h6v4H8z"/><path class="dxd-icon-fill" d="M16 2v2h2v18H4V4h2V2H2v22h18V2z"/><path class="dxd-icon-fill" d="M6 6v14h10V6H6zm8 12H8v-2h6v2zm0-4H8v-2h6v2zm0-4H8V8h6v2z"/></svg>',
    'dxrd-svg-toolbox-table': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M0 0h6v4H0zM8 0h6v4H8zM16 0h6v4h-6zM0 6h6v4H0zM8 6h6v4H8zM16 6h6v4h-6zM0 12h6v4H0zM8 12h6v4H8zM16 12h6v4h-6zM0 18h6v4H0zM8 18h6v4H8zM16 18h6v4h-6z"/></svg>',
    'dxrd-svg-toolbox-tableofcontents': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 0v22h18V0H2zm5 18H5v-2h2v2zm0-4H5v-2h2v2zm0-4H5V8h2v2zm0-4H5V4h2v2zm10 12H9v-2h8v2zm0-4H9v-2h8v2zm0-4H9V8h8v2zm0-4H9V4h8v2z"/></svg>',
    'dxrd-svg-toolbox-zipcode': '<svg data-bind="svgAttrs" viewBox="0 0 24 24"><path class="dxd-icon-fill" d="M2 2h6v2H2zM0 4h2v6H0zM8 4h2v6H8zM0 12h2v8H0zM8 12h2v8H8zM2 10h6v2H2zM2 20h6v2H2zM14 2h6v2h-6zM12 4h2v6h-2zM20 4h2v6h-2zM12 12h2v8h-2zM20 12h2v8h-2zM14 10h6v2h-6zM14 20h6v2h-6z"/></svg>',
    'dxrd-svg-wizard-EmptyReport': '<svg data-bind="svgAttrs" viewBox="0 0 96 96"><style>.Black{fill:#727272;} .White{fill:#FFFFFF;} .Green{fill:#039C23;} .Blue{fill:#1177D7;} .Red{fill:#D11C1C;} .st0{opacity:0.75;} .st1{opacity:0.25;} .st2{opacity:0.5;}</style><g><path class="st0 Black" d="M83 93H13c-.6 0-1-.4-1-1V6c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .6-.4 1-1 1z"/><path class="White" d="M13 6h70v86H13z"/><path class="st1 Black" d="M83 14v-1h-7V6h-1v7H21V6h-1v7h-7v1h7v70h-7v1h7v7h1v-7h54v7h1v-7h7v-1h-7V14h7zm-8 70H21V14h54v70z"/></g></svg>',
    'dxrd-svg-wizard-LabelReport': '<svg data-bind="svgAttrs" viewBox="0 0 96 96"><style>.Black{fill:#727272;} .White{fill:#FFFFFF;} .Green{fill:#039C23;} .Blue{fill:#1177D7;} .Red{fill:#D11C1C;} .st0{opacity:0.75;} .st1{opacity:0.25;} .st2{opacity:0.5;}</style><g><path class="st0 Black" d="M83 92H13c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .6-.4 1-1 1z"/><path class="White" d="M13 5h70v86H13z"/><path class="st1 Blue" d="M47 29H21V13h26v16zm28 0H49V13h26v16zM47 47H21V31h26v16zm28 0H49V31h26v16zM47 65H21V49h26v16zm28 0H49V49h26v16zM47 83H21V67h26v16zm28 0H49V67h26v16z"/></g></svg>',
    'dxrd-svg-wizard-StandardReport': '<svg data-bind="svgAttrs" viewBox="0 0 96 96"><style>.Black{fill:#727272;} .White{fill:#FFFFFF;} .Green{fill:#039C23;} .Blue{fill:#1177D7;} .Red{fill:#D11C1C;} .st0{opacity:0.75;} .st1{opacity:0.25;} .st2{opacity:0.5;}</style><g><path class="st2 Black" d="M27.5 15C17.8 15 10 13 10 10.5v32C10 45 17.8 47 27.5 47S45 45 45 42.5v-32C45 13 37.2 15 27.5 15z"/><ellipse class="st1 Black" cx="27.5" cy="8.5" rx="17.5" ry="4.5"/><path class="st0 Black" d="M85.8 30h-13L60 42.8 47.2 30H33.9c-.6 0-1 .4-1 1v60c0 .6.4 1 1 1h51.9c.6 0 1-.4 1-1V31c0-.6-.5-1-1-1z"/><path class="White" d="M85.764 31.036v60h-51.9v-60z"/><path class="st1 Black" d="M48.9 46h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6z"/><path class="st2 Black" d="M41 38h8v6h-8v-6zm14.2 0H51v6h8v-2.2L55.2 38zm5.8 3.8V44h8v-6h-4.2L61 41.8zM71 38v6h8v-6h-8z"/><path class="Blue" d="M64 30c0-7.2-6.7-13-15-13 3.9 0 7 5.8 7 13h-6l10 10 10-10h-6z"/></g></svg>',
    'dxrd-svg-wizard-VerticalReport': '<svg data-bind="svgAttrs" viewBox="0 0 96 96"><style>.Black{fill:#727272;} .White{fill:#FFFFFF;} .Green{fill:#039C23;} .Blue{fill:#1177D7;} .Red{fill:#D11C1C;} .st0{opacity:0.75;} .st1{opacity:0.25;} .st2{opacity:0.5;}</style><g><path class="st2 Black" d="M27.5 15C17.8 15 10 13 10 10.5v32C10 45 17.8 47 27.5 47S45 45 45 42.5v-32C45 13 37.2 15 27.5 15z"/><ellipse class="st1 Black" cx="27.5" cy="8.5" rx="17.5" ry="4.5"/><path class="st0 Black" d="M85.8 30h-13L60 42.8 47.2 30H33.9c-.6 0-1 .4-1 1v60c0 .6.4 1 1 1h51.9c.6 0 1-.4 1-1V31c0-.6-.5-1-1-1z"/><path class="White" d="M85.764 31.036v60h-51.9v-60z"/><path class="st1 Black" d="M55.2 38H51v6h8v-2.2L55.2 38zm5.8 3.8V44h8v-6h-4.2L61 41.8zM71 38v6h8v-6h-8zm-12.1 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6z"/><path class="st2 Black" d="M41 38h8v6h-8v-6zm7.9 8h-8v6h8v-6zm0 8h-8v6h8v-6zm0 8h-8v6h8v-6zm0 8h-8v6h8v-6zm0 8h-8v6h8v-6z"/><path class="Blue" d="M64 30c0-7.2-6.7-13-15-13 3.9 0 7 5.8 7 13h-6l10 10 10-10h-6z"/></g></svg>',
    'dxrd-svg-wizard-warning': '<svg data-bind="svgAttrs" viewBox="0 0 31 31"><path class="dxd-icon-fill" d="M15.5 0C6.9 0 0 6.9 0 15.5S6.9 31 15.5 31 31 24.1 31 15.5 24.1 0 15.5 0zm0 25c-1.4 0-2.5-1.1-2.5-2.5s1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5-1.1 2.5-2.5 2.5zm0-7C14.1 18 13 9.9 13 8.5 13 7.1 14.1 6 15.5 6S18 7.1 18 8.5 16.9 18 15.5 18z"/></svg>',
});
var DevExpress;
(function (DevExpress) {
    var Reporting;
    (function (Reporting) {
        var Chart;
        (function (Chart) {
            var Internal;
            (function (Internal) {
                var ChartRequests = (function () {
                    function ChartRequests() {
                    }
                    ChartRequests.getChartImage = function (uri, chartLayout, width, height) {
                        return DevExpress.Analytics.Internal.ajax(uri, 'chart', encodeURIComponent(JSON.stringify({
                            width: width,
                            height: height,
                            Chart: JSON.stringify({
                                'ChartXmlSerializer': {
                                    '@version': "16.2.0.0",
                                    Chart: chartLayout
                                }
                            })
                        })));
                    };
                    ChartRequests.fieldListCallback = function (request) {
                        var requestJson = JSON.stringify(request);
                        var encodedJson = encodeURIComponent(requestJson);
                        return DevExpress.Analytics.Internal.ajax(Internal.HandlerUri, 'fieldList', encodedJson);
                    };
                    return ChartRequests;
                }());
                Internal.ChartRequests = ChartRequests;
                var ChartStructureTreeListController = (function (_super) {
                    __extends(ChartStructureTreeListController, _super);
                    function ChartStructureTreeListController(propertyNames, listPropertyNames, selectCallback) {
                        var _this = _super.call(this, propertyNames, listPropertyNames) || this;
                        _this.hasItems = function (item) {
                            return !!listPropertyNames && listPropertyNames.indexOf(item.specifics) !== -1;
                        };
                        _this.select = function (value) {
                            _this.selectedItem && _this.selectedItem.isSelected(false);
                            _this.selectedItem = value;
                            value.isSelected(true);
                            selectCallback && selectCallback(value);
                        };
                        _this.showIconsForChildItems = function (parent) {
                            if (parent === void 0) { parent = null; }
                            return parent === null || parent.level < 1;
                        };
                        return _this;
                    }
                    return ChartStructureTreeListController;
                }(DevExpress.Analytics.Internal.ObjectStructureTreeListController));
                Internal.ChartStructureTreeListController = ChartStructureTreeListController;
                var ChartStructureObjectProvider = (function (_super) {
                    __extends(ChartStructureObjectProvider, _super);
                    function ChartStructureObjectProvider(target, displayName, localizationId) {
                        return _super.call(this, target, displayName, localizationId) || this;
                    }
                    ChartStructureObjectProvider.prototype.getClassName = function (instance) {
                        if (instance instanceof Series.SeriesViewModel) {
                            return "SeriesViewModel";
                        }
                        else if (instance instanceof Axis.SecondaryAxisViewModel) {
                            return "SecondaryAxisViewModel";
                        }
                        else {
                            return _super.prototype.getClassName.call(this, instance);
                        }
                    };
                    return ChartStructureObjectProvider;
                }(DevExpress.Analytics.Internal.ObjectStructureProvider));
                Internal.ChartStructureObjectProvider = ChartStructureObjectProvider;
                function createInnerActionsWithPopover(text, id, actions) {
                    var object = {
                        text: text,
                        imageClassName: "dxrd-image-add",
                        imageTemplateName: "dxrd-svg-operations-add",
                        disabled: ko.observable(false),
                        id: id,
                        _visible: ko.observable(false),
                        popoverVisible: null,
                        togglePopoverVisible: null,
                        closePopover: null,
                        templateName: "dxrd-collectionactions-template",
                        getContainer: function (element, selector) {
                            return $(element).parent().find(selector);
                        },
                        actions: actions
                    };
                    object.popoverVisible = ko.pureComputed(function () {
                        return object._visible();
                    });
                    object.togglePopoverVisible = function () {
                        object._visible(!object._visible());
                    };
                    object.closePopover = function () {
                        object._visible(false);
                    };
                    return [object];
                }
                Internal.createInnerActionsWithPopover = createInnerActionsWithPopover;
                ;
                function _isNumericTypeSpecific(specific) {
                    return ["Integer", "Float", "CalcInteger", "CalcFloat", "SumInteger", "SumFloat"].indexOf(specific) > -1;
                }
                Internal._isNumericTypeSpecific = _isNumericTypeSpecific;
                function _isDateTypeSpecific(specific) {
                    return ["Date", "CalcDate", "SumDate"].indexOf(specific) > -1;
                }
                Internal._isDateTypeSpecific = _isDateTypeSpecific;
                var Widgets;
                (function (Widgets) {
                    var templates = DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.templates;
                    DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.addTemplates({
                        'dxrd-svg-fieldlist-area': templates['dxrd-svg-series-area'],
                        'dxrd-svg-fieldlist-area3d': templates['dxrd-svg-series-area3d'],
                        'dxrd-svg-fieldlist-sidebysidebar': templates['dxrd-svg-series-side_by_side_bar'],
                        'dxrd-svg-fieldlist-sidebysidebar3d': templates['dxrd-svg-series-side_by_side_bar3d'],
                        'dxrd-svg-fieldlist-bubble': templates['dxrd-svg-series-bubbles'],
                        'dxrd-svg-fieldlist-candlestick': templates['dxrd-svg-series-candle_stick'],
                        'dxrd-svg-fieldlist-doughnut3d': templates['dxrd-svg-series-doughnut3d'],
                        'dxrd-svg-fieldlist-doughnut': templates['dxrd-svg-series-doughnut'],
                        'dxrd-svg-fieldlist-fullstackedarea': templates['dxrd-svg-series-full_stacked_area'],
                        'dxrd-svg-fieldlist-fullstackedarea3d': templates['dxrd-svg-series-full_stacked_area3d'],
                        'dxrd-svg-fieldlist-fullstackedbar': templates['dxrd-svg-series-full_stacked_bar'],
                        'dxrd-svg-fieldlist-fullstackedbar3d': templates['dxrd-svg-series-full_stacked_bar3d'],
                        'dxrd-svg-fieldlist-fullstackedline': templates['dxrd-svg-series-full_stacked_line'],
                        'dxrd-svg-fieldlist-fullstackedline3d': templates['dxrd-svg-series-full_stacked_line3d'],
                        'dxrd-svg-fieldlist-fullstackedsplinearea': templates['dxrd-svg-series-full_stacked_spline_area'],
                        'dxrd-svg-fieldlist-fullstackedsplinearea3d': templates['dxrd-svg-series-full_stacked_spline_area3d'],
                        'dxrd-svg-fieldlist-funnel': templates['dxrd-svg-series-funnel'],
                        'dxrd-svg-fieldlist-funnel3d': templates['dxrd-svg-series-funnel3d'],
                        'dxrd-svg-fieldlist-overlappedgantt': templates['dxrd-svg-series-gantt'],
                        'dxrd-svg-fieldlist-line': templates['dxrd-svg-series-line'],
                        'dxrd-svg-fieldlist-line3d': templates['dxrd-svg-series-line3d'],
                        'dxrd-svg-fieldlist-manhattanbar': templates['dxrd-svg-series-manhattan_bar3d'],
                        'dxrd-svg-fieldlist-nesteddoughnut': templates['dxrd-svg-series-nested_doughnut'],
                        'dxrd-svg-fieldlist-pie': templates['dxrd-svg-series-pie'],
                        'dxrd-svg-fieldlist-pie3d': templates['dxrd-svg-series-pie3d'],
                        'dxrd-svg-fieldlist-point': templates['dxrd-svg-series-point'],
                        'dxrd-svg-fieldlist-polararea': templates['dxrd-svg-series-polar_area'],
                        'dxrd-svg-fieldlist-polarline': templates['dxrd-svg-series-polar_line'],
                        'dxrd-svg-fieldlist-polarpoint': templates['dxrd-svg-series-polar_point'],
                        'dxrd-svg-fieldlist-radararea': templates['dxrd-svg-series-radar_area'],
                        'dxrd-svg-fieldlist-radarline': templates['dxrd-svg-series-radar_line'],
                        'dxrd-svg-fieldlist-radarpoint': templates['dxrd-svg-series-radar_point'],
                        'dxrd-svg-fieldlist-rangearea': templates['dxrd-svg-series-range_area'],
                        'dxrd-svg-fieldlist-rangearea3d': templates['dxrd-svg-series-range_area3d'],
                        'dxrd-svg-fieldlist-overlappedrangebar': templates['dxrd-svg-series-range_bar'],
                        'dxrd-svg-fieldlist-scatterline': templates['dxrd-svg-series-scatter_line'],
                        'dxrd-svg-fieldlist-sidebysidefullstackedbar': templates['dxrd-svg-series-side_by_side_full_stacked_bar'],
                        'dxrd-svg-fieldlist-sidebysidefullstackedbar3d': templates['dxrd-svg-series-side_by_side_full_stacked_bar3d'],
                        'dxrd-svg-fieldlist-sidebysidegantt': templates['dxrd-svg-series-side_by_side_gantt'],
                        'dxrd-svg-fieldlist-sidebysiderangebar': templates['dxrd-svg-series-side_by_side_range_bar'],
                        'dxrd-svg-fieldlist-sidebysidestackedbar': templates['dxrd-svg-series-side_by_side_stacked_bar'],
                        'dxrd-svg-fieldlist-sidebysidestackedbar3d': templates['dxrd-svg-series-side_by_side_stacked_bar3d'],
                        'dxrd-svg-fieldlist-spline': templates['dxrd-svg-series-spline'],
                        'dxrd-svg-fieldlist-splinearea': templates['dxrd-svg-series-spline_area'],
                        'dxrd-svg-fieldlist-splinearea3d': templates['dxrd-svg-series-spline_area3d'],
                        'dxrd-svg-fieldlist-spline3d': templates['dxrd-svg-series-spline3d'],
                        'dxrd-svg-fieldlist-stackedarea': templates['dxrd-svg-series-stacked_area'],
                        'dxrd-svg-fieldlist-stackedarea3d': templates['dxrd-svg-series-stacked_area3d'],
                        'dxrd-svg-fieldlist-stackedbar': templates['dxrd-svg-series-stacked_bar'],
                        'dxrd-svg-fieldlist-stackedbar3d': templates['dxrd-svg-series-stacked_bar3d'],
                        'dxrd-svg-fieldlist-stackedline': templates['dxrd-svg-series-stacked_line'],
                        'dxrd-svg-fieldlist-stackedline3d': templates['dxrd-svg-series-stacked_line'],
                        'dxrd-svg-fieldlist-stackedsplinearea': templates['dxrd-svg-series-stacked_spline_area'],
                        'dxrd-svg-fieldlist-stackedsplinearea3d': templates['dxrd-svg-series-stacked_spline_area3d'],
                        'dxrd-svg-fieldlist-steparea': templates['dxrd-svg-series-step_area'],
                        'dxrd-svg-fieldlist-steparea3d': templates['dxrd-svg-series-step_area3d'],
                        'dxrd-svg-fieldlist-stepline': templates['dxrd-svg-series-step_line'],
                        'dxrd-svg-fieldlist-stepline3d': templates['dxrd-svg-series-step_line3d'],
                        'dxrd-svg-fieldlist-stock': templates['dxrd-svg-series-stock'],
                        'dxrd-svg-fieldlist-swiftplot': templates['dxrd-svg-series-swift_plot'],
                        'dxrd-svg-fieldlist-chart': templates['dxrd-svg-chartstructure-chart'],
                        'dxrd-svg-fieldlist-diagram': templates['dxrd-svg-chartstructure-diagram'],
                        'dxrd-svg-fieldlist-legend': templates['dxrd-svg-chartstructure-legend'],
                        'dxrd-svg-fieldlist-legends': templates['dxrd-svg-chartstructure-legend'],
                        'dxrd-svg-fieldlist-series': templates['dxrd-svg-chartstructure-seriescollection'],
                        'dxrd-svg-fieldlist-seriestemplate': templates['dxrd-svg-chartstructure-seriescollection'],
                        'dxrd-svg-fieldlist-titles': templates['dxrd-svg-chartstructure-titles'],
                    });
                    var ChartDataMemberEditor = (function (_super) {
                        __extends(ChartDataMemberEditor, _super);
                        function ChartDataMemberEditor(info, level, parentDisabled) {
                            var _this = _super.call(this, info, level, parentDisabled) || this;
                            _this.treeListController.itemsFilter = function (item) {
                                if (item.isList)
                                    return true;
                                if (_this.name === "argumentDataMember") {
                                    return _this._getArgumentDataMemberFilter(item);
                                }
                                else {
                                    return _this._getValueDataMemberFilter(item);
                                }
                            };
                            return _this;
                        }
                        ChartDataMemberEditor.prototype._isNumber = function (specifics) {
                            return specifics.indexOf("integer") !== -1 || specifics.indexOf("float") !== -1;
                        };
                        ChartDataMemberEditor.prototype._isDate = function (specifics) { return specifics.indexOf("date") !== -1; };
                        ChartDataMemberEditor.prototype._getArgumentDataMemberFilter = function (item) {
                            var scaleType = this._model() && this._model()["argumentScaleType"]();
                            var itemSpecifics = item.specifics.toLowerCase();
                            if (scaleType === "Numerical") {
                                return this._isNumber(itemSpecifics);
                            }
                            else if (scaleType === "DateTime") {
                                return this._isDate(itemSpecifics);
                            }
                            else {
                                return true;
                            }
                        };
                        ChartDataMemberEditor.prototype._getValueDataMemberFilter = function (item) {
                            var itemSpecifics = item.specifics.toLowerCase();
                            if (this.name === "weight") {
                                return this._isNumber(itemSpecifics);
                            }
                            else {
                                var scaleType = this._model() && this._model()["valueScaleType"]();
                                if (scaleType === "Numerical") {
                                    return this._isNumber(itemSpecifics);
                                }
                                else {
                                    return this._isDate(itemSpecifics);
                                }
                            }
                        };
                        return ChartDataMemberEditor;
                    }(DevExpress.Analytics.Widgets.FieldListEditor));
                    Widgets.ChartDataMemberEditor = ChartDataMemberEditor;
                    var ChartDataSourceEditor = (function (_super) {
                        __extends(ChartDataSourceEditor, _super);
                        function ChartDataSourceEditor() {
                            var _this = _super !== null && _super.apply(this, arguments) || this;
                            _this.options = null;
                            return _this;
                        }
                        ChartDataSourceEditor.prototype.generateOptions = function (dataSources, popupContainer) {
                            var _this = this;
                            if (!this.options) {
                                var disabled = ko.computed(function () {
                                    return _this.disabled() || !dataSources() || dataSources().length === 0;
                                });
                                var value = ko.computed({
                                    read: function () {
                                        var unwrappedDataSources = dataSources();
                                        var dataSource = unwrappedDataSources.filter(function (x) { return !!x && (x.value === _this.value()); })[0];
                                        return ko.unwrap(dataSource && dataSource.displayName);
                                    },
                                    write: function (newVal) {
                                        var unwrappedDataSources = dataSources();
                                        var dataSource = unwrappedDataSources.filter(function (x) { return !!x && (ko.unwrap(x.displayName) === newVal); })[0];
                                        _this.value(dataSource && dataSource.value);
                                    }
                                });
                                this._disposables.push(value);
                                this._disposables.push(disabled);
                                this.options = {
                                    displayExpr: "displayName",
                                    dataSource: dataSources,
                                    disabled: disabled,
                                    value: value,
                                    valueExpr: "displayName",
                                    displayCustomValue: true,
                                    dropDownOptions: { container: popupContainer }
                                };
                            }
                            return this.options;
                        };
                        return ChartDataSourceEditor;
                    }(DevExpress.Analytics.Widgets.Editor));
                    Widgets.ChartDataSourceEditor = ChartDataSourceEditor;
                    var ChartDependencyEditor = (function (_super) {
                        __extends(ChartDependencyEditor, _super);
                        function ChartDependencyEditor(info, level, parentDisabled, textToSearch) {
                            return _super.call(this, info, level, parentDisabled, textToSearch) || this;
                        }
                        ChartDependencyEditor.prototype.getDependencyOptions = function (templateOptions, propertyName, depPropertyName) {
                            var _this = this;
                            if (!this.bindableOptions) {
                                var debObj = {};
                                this.depProperty = ko.computed(function () { return _this._model() && _this._model()[depPropertyName](); });
                                this._disposables.push(this.depProperty);
                                debObj[propertyName] = this.depProperty;
                                this.bindableOptions = $.extend({}, this.getOptions(templateOptions), debObj);
                            }
                            return this.bindableOptions;
                        };
                        return ChartDependencyEditor;
                    }(DevExpress.Analytics.Widgets.Editor));
                    Widgets.ChartDependencyEditor = ChartDependencyEditor;
                    var CollectionLookupEditorModel = (function (_super) {
                        __extends(CollectionLookupEditorModel, _super);
                        function CollectionLookupEditorModel(info, level, parentDisabled, textToSearch) {
                            var _this = _super.call(this, info, level, parentDisabled, textToSearch) || this;
                            _this.array = ko.computed(function () { return _this.value() || []; });
                            _this.selectedItem = ko.observable();
                            _this._disposables.push(_this.array);
                            return _this;
                        }
                        Object.defineProperty(CollectionLookupEditorModel.prototype, "editors", {
                            get: function () {
                                var selectedItem = this.selectedItem();
                                return selectedItem && selectedItem["getInfo"] && selectedItem["getInfo"]();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        return CollectionLookupEditorModel;
                    }(DevExpress.Analytics.Widgets.Editor));
                    Widgets.CollectionLookupEditorModel = CollectionLookupEditorModel;
                    var PointsEditor = (function (_super) {
                        __extends(PointsEditor, _super);
                        function PointsEditor(info, level, parentDisabled, textToSearch) {
                            return _super.call(this, info, level, parentDisabled, textToSearch) || this;
                        }
                        PointsEditor.prototype.addPoint = function (model) {
                            return Series.SeriesPointModel.createNew(model);
                        };
                        return PointsEditor;
                    }(DevExpress.Analytics.Widgets.Editor));
                    Widgets.PointsEditor = PointsEditor;
                    var SummaryFunctionModel = (function () {
                        function SummaryFunctionModel(functionName, args) {
                            var _this = this;
                            this.functionName = ko.observable();
                            this.args = ko.observableArray();
                            this.functionName(functionName);
                            this.args(args.map(function (x) { return { value: ko.observable(x) }; }));
                            this.functionName.subscribe(function (newVal) {
                                _this._updateArgs(newVal);
                            });
                        }
                        SummaryFunctionModel.from = function (val) {
                            var functionName = null, args = [];
                            if (val) {
                                functionName = val.split('(')[0];
                                args = val.split('(')[1].split(')')[0].split(',');
                                if (args[0] === "") {
                                    args = [];
                                }
                                else {
                                    args = args.map(function (x) { return x.split('[')[1].split(']')[0]; });
                                }
                            }
                            return new SummaryFunctionModel(functionName, args);
                        };
                        SummaryFunctionModel.toJson = function (value) {
                            if (!value.functionName()) {
                                return {};
                            }
                            return value.functionName() + '(' + value.args().map(function (x) { return '[' + x.value() + ']'; }).join(',') + ')';
                        };
                        SummaryFunctionModel.prototype._updateArgs = function (functionName) {
                            if (SummaryFunctionModel.availableItems.indexOf(functionName) !== -1) {
                                if (functionName === "COUNT" || !functionName) {
                                    this.args([]);
                                }
                                else if (this.args().length === 0) {
                                    this.args.push({ value: ko.observable("") });
                                }
                                else if (this.args().length > 1) {
                                    this.args.splice(1, this.args().length - 1);
                                }
                            }
                        };
                        SummaryFunctionModel.availableItems = ["SUM", "MIN", "MAX", "AVERAGE", "COUNT"];
                        return SummaryFunctionModel;
                    }());
                    Widgets.SummaryFunctionModel = SummaryFunctionModel;
                    var SummaryFunctionEditor = (function (_super) {
                        __extends(SummaryFunctionEditor, _super);
                        function SummaryFunctionEditor(modelPropertyInfo, level, parentDisabled) {
                            var _this = _super.call(this, modelPropertyInfo, level, parentDisabled) || this;
                            _this.argumentTemplateName = ko.bindingHandlers["displayNameExtender"] ? "dxrd-field" : "dxcd-field";
                            _this.actionsAreAvailable = ko.observable(false);
                            var subscription = null;
                            _this.memberPadding = { paddingLeft: (level + 1) * DevExpress.Analytics.Widgets.Internal.propertiesGridEditorsPaddingLeft };
                            _this._model.subscribe(function (newVal) {
                                subscription && subscription.dispose();
                                subscription = ko.computed(function () {
                                    _this.actionsAreAvailable(_this.value().functionName() && SummaryFunctionModel.availableItems.indexOf(_this.value() && _this.value().functionName()) === -1);
                                });
                            });
                            return _this;
                        }
                        SummaryFunctionEditor.prototype.getLocalization = function (displayName, localizationId) {
                            return DevExpress.Analytics.Utils.getLocalization(displayName, localizationId);
                        };
                        SummaryFunctionEditor.prototype.add = function () {
                            this.value().args.push({ value: ko.observable("") });
                        };
                        SummaryFunctionEditor.prototype.remove = function (index) {
                            this.value().args.splice(index, 1);
                        };
                        SummaryFunctionEditor.prototype.availableItems = function () {
                            return SummaryFunctionModel.availableItems;
                        };
                        return SummaryFunctionEditor;
                    }(DevExpress.Analytics.Widgets.FieldListEditor));
                    Widgets.SummaryFunctionEditor = SummaryFunctionEditor;
                    var UndoColorPickerEditor = (function (_super) {
                        __extends(UndoColorPickerEditor, _super);
                        function UndoColorPickerEditor(info, level, parentDisabled) {
                            return _super.call(this, info, level, parentDisabled) || this;
                        }
                        UndoColorPickerEditor.prototype.generateValue = function (undoEngine) {
                            var _this = this;
                            if (!this.generatedValue) {
                                this._disposables.push(this.generatedValue = ko.computed({
                                    read: function () { return _this.displayValue(); },
                                    write: function (newVal) {
                                        undoEngine().start();
                                        _this.displayValue(newVal);
                                        undoEngine().end();
                                    }
                                }));
                            }
                            return this.generatedValue;
                        };
                        return UndoColorPickerEditor;
                    }(DevExpress.Analytics.Widgets.ColorPickerEditor));
                    Widgets.UndoColorPickerEditor = UndoColorPickerEditor;
                    var ViewEditor = (function (_super) {
                        __extends(ViewEditor, _super);
                        function ViewEditor(info, level, parentDisabled, textToSearch) {
                            var _this = _super.call(this, info, level, parentDisabled, textToSearch) || this;
                            _this.contentValue = ko.computed(function () {
                                return _this.value() && _this.value().model() || {};
                            });
                            _this._disposables.push(_this.contentValue);
                            return _this;
                        }
                        ViewEditor.prototype.generateHeaderValue = function (undoEngine) {
                            var _this = this;
                            if (!this.headerValue) {
                                this._disposables.push(this.headerValue = ko.computed({
                                    read: function () { return _this.value() && _this.value().type(); },
                                    write: function (newVal) {
                                        undoEngine().start();
                                        _this.value().type(newVal);
                                        undoEngine().end();
                                    }
                                }));
                            }
                            return this.headerValue;
                        };
                        ViewEditor.prototype.generateViewClassName = function (value, isTemplate) {
                            if (isTemplate === void 0) { isTemplate = false; }
                            var _name = (isTemplate ? 'dxrd-svg-fieldlist-' : 'dx-image-fieldlist-') + Series.SeriesViewModel.getClassName(value);
                            if (isTemplate)
                                return DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.getExistingTemplate(_name);
                            return _name;
                        };
                        return ViewEditor;
                    }(DevExpress.Analytics.Widgets.Editor));
                    Widgets.ViewEditor = ViewEditor;
                })(Widgets = Internal.Widgets || (Internal.Widgets = {}));
                Internal.editorTemplates = {
                    chartDataSource: { header: "dxcd-datasource", editorType: Internal.Widgets.ChartDataSourceEditor },
                    collection: { header: "dxcd-collection-lookup-header", content: "dxcd-collection-item", editorType: Internal.Widgets.CollectionLookupEditorModel },
                    views: { header: "dxcd-viewHeader", content: "dxcd-viewContent", editorType: Internal.Widgets.ViewEditor },
                    fieldChart: { header: "dxcd-field", editorType: DevExpress.Analytics.Widgets.FieldListEditor },
                    dataMemberChart: { header: "dxcd-field", editorType: DevExpress.Analytics.Widgets.DataMemberEditor },
                    valueDataMember: { header: "dxcd-field", editorType: Internal.Widgets.ChartDataMemberEditor },
                    panes: { header: "dxcd-panes-editor" },
                    axisX: { header: "dxcd-axisX-editor" },
                    axisY: { header: "dxcd-axisY-editor" },
                    legends: { header: "dxcd-legends-editor" },
                    summaryFunction: { header: "dx-emptyHeader", content: "dxcd-summaryFunction-content", editorType: Internal.Widgets.SummaryFunctionEditor },
                    points: { custom: "dxcd-pointscollection", editorType: Internal.Widgets.PointsEditor },
                    maxSize: { header: "dxcd-maxSize", editorType: Internal.Widgets.ChartDependencyEditor },
                    minSize: { header: "dxcd-minSize", editorType: Internal.Widgets.ChartDependencyEditor },
                    group: { header: "dxcd-group" },
                    undoCustomColorEditor: { header: "dxcd-color-undo", editorType: Internal.Widgets.UndoColorPickerEditor }
                };
                Internal.defaultBooleanValues = [
                    { value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' },
                    { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' },
                    { value: "Default", displayValue: "Default", localizationId: 'StringId.DefaultBooleanDefault' }
                ];
                Internal.scaleTypeValues = [
                    { value: "Qualitative", displayValue: "Qualitative", localizationId: 'DevExpress.XtraCharts.ScaleType.Qualitative' },
                    { value: "Numerical", displayValue: "Numerical", localizationId: 'DevExpress.XtraCharts.ScaleType.Numerical' },
                    { value: "DateTime", displayValue: "DateTime", localizationId: 'DevExpress.XtraCharts.ScaleType.DateTime' },
                    { value: "Auto", displayValue: "Auto", localizationId: 'DevExpress.XtraCharts.ScaleType.Auto' }
                ];
                Internal.stringAlignmentValues = [
                    { value: "Near", displayValue: "Near", localizationId: 'ChartStringId.WizStringAlignmentNear' },
                    { value: "Center", displayValue: "Center", localizationId: 'ChartStringId.WizStringAlignmentCenter' },
                    { value: "Far", displayValue: "Far", localizationId: 'ChartStringId.WizStringAlignmentFar' }
                ];
                Internal.paneName = { propertyName: "paneName", modelName: "@PaneName", displayName: 'Pane', localizationId: 'DevExpress.XtraCharts.XYDiagramPane', defaultVal: DevExpress.Analytics.Utils.getLocalization('Default Pane', 'ChartStringId.DefaultPaneName'), editor: Internal.editorTemplates.panes };
                Internal.axisXName = { propertyName: "axisXName", modelName: "@AxisXName", displayName: 'AxisX', localizationId: "DevExpress.XtraCharts.GanttAxisX", defaultVal: DevExpress.Analytics.Utils.getLocalization('Primary AxisX', 'ChartStringId.PrimaryAxisXName'), editor: Internal.editorTemplates.axisX };
                Internal.axisYName = { propertyName: "axisYName", modelName: "@AxisYName", displayName: 'AxisY', localizationId: "DevExpress.XtraCharts.SeparatePaneIndicator.AxisY", defaultVal: DevExpress.Analytics.Utils.getLocalization('Primary AxisY', 'ChartStringId.PrimaryAxisYName'), editor: Internal.editorTemplates.axisY };
                Internal.angle = { propertyName: "angle", modelName: "@Angle", defaultVal: 0, from: DevExpress.Analytics.Utils.floatFromModel, displayName: "Angle", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraReports.UI.XRLabel.Angle' };
                Internal.borderColor = { propertyName: "borderColor", modelName: "@BorderColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, displayName: "Border Color", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderColor' };
                Internal.backColor = { propertyName: "backColor", modelName: "@BackColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, displayName: "Background Color", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControl.BackColor' };
                Internal.dataMember = { propertyName: "dataMember", modelName: "@DataMember" };
                Internal.text = { propertyName: "text", modelName: "@Text", defaultVal: "", displayName: "Text", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'ASPxReportsStringId.ExportName_txt' };
                Internal.visible = { propertyName: "visible", modelName: "@Visible", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, displayName: "Visible", localizationId: 'DevExpress.XtraReports.UI.XRControl.Visible' };
                Internal.name = { propertyName: "name", modelName: "@Name", displayName: "Name", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraReports.UI.XRControl.Name' };
                Internal.tag = { propertyName: "tag", modelName: "@Tag", displayName: "Tag", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraReports.UI.XRControl.Tag' };
                Internal.checkedInLegend = { propertyName: "checkedInLegend", modelName: "@CheckedInLegend", displayName: "Checked In Legend", localizationId: 'DevExpress.XtraCharts.SeriesBase.CheckedInLegend', editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                Internal.checkableInLegend = { propertyName: "checkableInLegend", modelName: "@CheckableInLegend", displayName: "Checkable In Legend", localizationId: 'DevExpress.XtraCharts.SeriesBase.CheckableInLegend', editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                Internal.legendText = { propertyName: "legendText", modelName: "@LegendText", displayName: "Legend Text", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.Strip.LegendText' };
                Internal.showInLegend = { propertyName: "showInLegend", modelName: "@ShowInLegend", displayName: "Show In Legend", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.Indicator.ShowInLegend' };
                Internal.thickness = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.TickmarksBase.Thickness' };
                Internal.visibility = { propertyName: "visibility", modelName: "@Visibility", displayName: "Visibility", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.BorderBase.Visibility' };
                Internal.color = { propertyName: "color", modelName: "@Color", displayName: "Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.SeriesViewBase.Color' };
                Internal.titleAlignment = { propertyName: "titleAlignment", modelName: "@Alignment", displayName: "Alignment", defaultVal: "Center", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.stringAlignmentValues, localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Alignment' };
                Internal.textPattern = { propertyName: "textPattern", modelName: "@TextPattern", displayName: "Text Pattern", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.TotalLabel.TextPattern' };
                Internal.textAlignment = { propertyName: "textAlignment", modelName: "@TextAlignment", displayName: "Text Alignment", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.stringAlignmentValues, localizationId: 'DevExpress.XtraReports.UI.XRControl.TextAlignment' };
                Internal.maxLineCount = { propertyName: "maxLineCount", modelName: "@MaxLineCount", displayName: "Max Line Count", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.MaxLineCount' };
                Internal.maxWidth = { propertyName: "maxWidth", modelName: "@MaxWidth", displayName: "Max Width", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsSelection.MaxWidth' };
                Internal.textColor = { propertyName: "textColor", modelName: "@TextColor", displayName: "Text Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.TotalLabel.TextColor' };
                Internal.antialiasing = { propertyName: "antialiasing", modelName: "@Antialiasing", displayName: "Antialiasing", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.SwiftPlotSeriesView.Antialiasing' };
                Internal.font = { propertyName: "font", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 8pt", editor: DevExpress.Analytics.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
                Internal.enableAxisXZooming = { propertyName: "enableAxisXZooming", modelName: "@EnableAxisXZooming", displayName: "Enable Axis X Zooming" };
                Internal.enableAxisXScrolling = { propertyName: "enableAxisXScrolling", modelName: "@EnableAxisXScrolling", displayName: "Enable Axis X Scrolling" };
                Internal.enableAxisYZooming = { propertyName: "enableAxisYZooming", modelName: "@EnableAxisYZooming", displayName: "Enable Axis Y Zooming" };
                Internal.enableAxisYScrolling = { propertyName: "enableAxisYScrolling", modelName: "@EnableAxisYScrolling", displayName: "Enable Axis Y Scrolling" };
                Internal.rotated = { propertyName: "rotated", modelName: "@Rotated", displayName: "Rotated", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.XYDiagram.Rotated' };
                Internal.typeNameNotShow = { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" };
                Internal.left = { propertyName: "left", modelName: "@Left", displayName: "Left", localizationId: "AnalyticsCoreStringId.PaddingInfo.Left", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                Internal.right = { propertyName: "right", modelName: "@Top", displayName: "Top", localizationId: "AnalyticsCoreStringId.PaddingInfo.Top", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                Internal.top = { propertyName: "top", modelName: "@Right", displayName: "Right", localizationId: "AnalyticsCoreStringId.PaddingInfo.Right", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                Internal.bottom = { propertyName: "bottom", modelName: "@Bottom", displayName: "Bottom", localizationId: "AnalyticsCoreStringId.PaddingInfo.Bottom", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                Internal.margin = { propertyName: "chartMargins", modelName: "Margins", displayName: "Margins", info: [Internal.left, Internal.right, Internal.top, Internal.bottom], editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XtraReport.Margins' };
                Internal.font18 = { propertyName: "font18", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 18pt", editor: DevExpress.Analytics.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
                Internal.font12 = { propertyName: "font12", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 12pt", editor: DevExpress.Analytics.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
                Internal.font8 = { propertyName: "font8", modelName: "@Font", displayName: "Font", defaultVal: "Tahoma, 8pt", editor: DevExpress.Analytics.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
                Internal.paneSerializationsInfo = [Internal.enableAxisXScrolling, Internal.enableAxisYScrolling, Internal.enableAxisYZooming, Internal.enableAxisXZooming, Internal.backColor, Internal.borderColor];
                Internal.defaultPane = { propertyName: "defaultPane", modelName: "DefaultPane", displayName: "Default Pane", localizationId: 'ChartStringId.DefaultPaneName', info: Internal.paneSerializationsInfo, defaultVal: {}, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                Internal.additionalPaneSerializationsInfo = [Internal.name].concat(Internal.paneSerializationsInfo);
                Internal.chartDataSource = { propertyName: "dataSource", displayName: "Data Source", modelName: "@DataSource", link: true, editor: Internal.editorTemplates.chartDataSource, localizationId: 'DevExpress.XtraReports.UI.XRSparkline.DataSource' };
                var Axis;
                (function (Axis) {
                    var AxisXYViewModel = (function (_super) {
                        __extends(AxisXYViewModel, _super);
                        function AxisXYViewModel(model, serializer, info) {
                            var _this = _super.call(this, model, serializer, info || Internal.axisXYSerializationsInfo) || this;
                            _this.constantLines = deserializeModelArray(model && model.ConstantLines, function (item, parent) { return new Models.ConstantLineViewModel(item, parent, serializer); }, Models.ConstantLineViewModel.prefix);
                            _this.scaleBreaks = deserializeModelArray(model && model.ScaleBreaks, function (item, parent) { return new Models.ScaleBreakViewModel(item, parent, serializer); }, Models.ScaleBreakViewModel.prefix);
                            _this.strips = deserializeModelArray(model && model.Strips, function (item, parent) { return new Models.StripViewModel(item, parent, serializer); }, Models.StripViewModel.prefix);
                            return _this;
                        }
                        AxisXYViewModel.from = function (info) {
                            return function (model, serializer) {
                                return new AxisXYViewModel(model || {}, serializer, info);
                            };
                        };
                        AxisXYViewModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, undefined, refs);
                        };
                        return AxisXYViewModel;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Axis.AxisXYViewModel = AxisXYViewModel;
                    var SecondaryAxisViewModel = (function (_super) {
                        __extends(SecondaryAxisViewModel, _super);
                        function SecondaryAxisViewModel(model, parent, serializer) {
                            var _this = _super.call(this, model, serializer, Internal.secondaryAxisXYSerializationsInfo) || this;
                            initCollectionItem(_this, parent)();
                            return _this;
                        }
                        Object.defineProperty(SecondaryAxisViewModel.prototype, "axisID", {
                            get: function () {
                                return this.parent().indexOf(this);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SecondaryAxisViewModel.xPrefix = "Secondary Axis X";
                        SecondaryAxisViewModel.yPrefix = "Secondary Axis Y";
                        return SecondaryAxisViewModel;
                    }(AxisXYViewModel));
                    Axis.SecondaryAxisViewModel = SecondaryAxisViewModel;
                    function initCollectionItem(item, parent) {
                        return function () {
                            item.parent = parent;
                            item.innerActions = [
                                {
                                    text: DevExpress.Analytics.Utils.getLocalization("Remove", 'ReportStringId.UD_Capt_SpacingRemove'),
                                    imageClassName: "dxrd-image-recycle-bin",
                                    imageTemplateName: "dxrd-svg-operations-recycle_bin",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { parent.remove(item); },
                                }
                            ];
                        };
                    }
                    Axis.initCollectionItem = initCollectionItem;
                })(Axis = Internal.Axis || (Internal.Axis = {}));
                var Models;
                (function (Models) {
                    var ChartElementCollectionItemBase = (function (_super) {
                        __extends(ChartElementCollectionItemBase, _super);
                        function ChartElementCollectionItemBase(model, parent, serializer, info) {
                            var _this = _super.call(this, model, serializer, info) || this;
                            Axis.initCollectionItem(_this, parent)();
                            return _this;
                        }
                        ChartElementCollectionItemBase.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, null, refs);
                        };
                        return ChartElementCollectionItemBase;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Models.ChartElementCollectionItemBase = ChartElementCollectionItemBase;
                    var TitleViewModel = (function (_super) {
                        __extends(TitleViewModel, _super);
                        function TitleViewModel(model, parent, serializer) {
                            var _this = _super.call(this, model, parent, serializer, Internal.titleSerializationsInfo) || this;
                            _this.name = ko.pureComputed({
                                read: function () { return _this["text"] ? _this["text"]() : "title"; },
                                write: function (val) { _this["text"](val); }
                            });
                            return _this;
                        }
                        TitleViewModel.from = function (model, serializer) {
                            return new TitleViewModel(model || {}, null, serializer);
                        };
                        TitleViewModel.prefix = "Title";
                        return TitleViewModel;
                    }(ChartElementCollectionItemBase));
                    Models.TitleViewModel = TitleViewModel;
                    var AdditionalLegendViewModel = (function (_super) {
                        __extends(AdditionalLegendViewModel, _super);
                        function AdditionalLegendViewModel(model, parent, serializer) {
                            return _super.call(this, model, parent, serializer, Internal.additionalLegendSerializationsInfo) || this;
                        }
                        AdditionalLegendViewModel.from = function (model, serializer) {
                            return new AdditionalLegendViewModel(model || {}, null, serializer);
                        };
                        AdditionalLegendViewModel.prefix = "Legend";
                        return AdditionalLegendViewModel;
                    }(ChartElementCollectionItemBase));
                    Models.AdditionalLegendViewModel = AdditionalLegendViewModel;
                    var ConstantLineViewModel = (function (_super) {
                        __extends(ConstantLineViewModel, _super);
                        function ConstantLineViewModel(model, parent, serializer) {
                            return _super.call(this, model, parent, serializer, Internal.constantLineSerializationsInfo) || this;
                        }
                        ConstantLineViewModel.from = function (model, serializer) {
                            return new ConstantLineViewModel(model || {}, null, serializer);
                        };
                        ConstantLineViewModel.prefix = "Constant Line ";
                        return ConstantLineViewModel;
                    }(ChartElementCollectionItemBase));
                    Models.ConstantLineViewModel = ConstantLineViewModel;
                    var ScaleBreakViewModel = (function (_super) {
                        __extends(ScaleBreakViewModel, _super);
                        function ScaleBreakViewModel(model, parent, serializer) {
                            return _super.call(this, model, parent, serializer, Internal.scaleBreakSerializationsInfo) || this;
                        }
                        ScaleBreakViewModel.from = function (model, serializer) {
                            return new ScaleBreakViewModel(model || {}, null, serializer);
                        };
                        ScaleBreakViewModel.prefix = "Scale Break ";
                        return ScaleBreakViewModel;
                    }(ChartElementCollectionItemBase));
                    Models.ScaleBreakViewModel = ScaleBreakViewModel;
                    var StripViewModel = (function (_super) {
                        __extends(StripViewModel, _super);
                        function StripViewModel(model, parent, serializer) {
                            return _super.call(this, model, parent, serializer, Internal.stripSerializationsInfo) || this;
                        }
                        StripViewModel.from = function (model, serializer) {
                            return new StripViewModel(model || {}, null, serializer);
                        };
                        StripViewModel.prefix = "Strip ";
                        return StripViewModel;
                    }(ChartElementCollectionItemBase));
                    Models.StripViewModel = StripViewModel;
                    var AdditionalPaneViewModel = (function (_super) {
                        __extends(AdditionalPaneViewModel, _super);
                        function AdditionalPaneViewModel(model, parent, serializer) {
                            return _super.call(this, model, parent, serializer, Internal.additionalPaneSerializationsInfo) || this;
                        }
                        AdditionalPaneViewModel.from = function (model, serializer) {
                            return new AdditionalPaneViewModel(model || {}, null, serializer);
                        };
                        AdditionalPaneViewModel.prefix = "Pane ";
                        return AdditionalPaneViewModel;
                    }(ChartElementCollectionItemBase));
                    Models.AdditionalPaneViewModel = AdditionalPaneViewModel;
                    Models.dataFilterSerializationsInfo = [
                        { propertyName: "columnName", displayName: "Column Name", editor: ko.bindingHandlers["displayNameExtender"] ? DevExpress.Analytics.Widgets.editorTemplates.field : Internal.editorTemplates.fieldChart, modelName: "@ColumnNameSerializable", localizationId: 'DevExpress.XtraCharts.DataFilter.ColumnName' },
                        {
                            propertyName: "dataType", displayName: "Data Type", defaultVal: "System.String", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, modelName: "@DataTypeSerializable",
                            valuesArray: [{ value: "System.Boolean", displayValue: "System.Boolean" }, { value: "System.Byte", displayValue: "System.Byte" }, { value: "System.Char", displayValue: "System.Char" }, { value: "System.DateTime", displayValue: "System.DateTime" }, { value: "System.Decimal", displayValue: "System.Decimal" }, { value: "System.Double", displayValue: "System.Double" }, { value: "System.Guid", displayValue: "System.Guid" }, { value: "System.Int16", displayValue: "System.Int16" }, { value: "System.Int32", displayValue: "System.Int32" }, { value: "System.Int64", displayValue: "System.Int64" }, { value: "System.SByte", displayValue: "System.SByte" }, { value: "System.Single", displayValue: "System.Single" }, { value: "System.String", displayValue: "System.String" }, { value: "System.TimeSpan", displayValue: "System.TimeSpan" }, { value: "System.UInt16", displayValue: "System.UInt16" }, { value: "System.UInt32", displayValue: "System.UInt32" }, { value: "System.UInt64", displayValue: "System.UInt64" }],
                            localizationId: 'DevExpress.XtraCharts.DataFilter.DataType'
                        },
                        {
                            propertyName: "condition", displayName: "Condition", defaultVal: "Equal", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, modelName: "@Condition",
                            valuesArray: [{ value: "Equal", displayValue: "Equal", localizationId: 'DevExpress.XtraCharts.DataFilterCondition.Equal' }, { value: "GreaterThan", displayValue: "GreaterThan" }, { value: "GreaterThanOrEqual", displayValue: "GreaterThanOrEqual" }, { value: "LessThan", displayValue: "LessThan" }, { value: "LessThanOrEqual", displayValue: "LessThanOrEqual" }, { value: "NotEqual", displayValue: "NotEqual" }],
                            localizationId: 'DevExpress.XtraReports.UI.FormattingRule.Condition'
                        },
                        { propertyName: "value", displayName: "Value", editor: DevExpress.Analytics.Widgets.editorTemplates.text, modelName: "@InvariantValueSerializable", localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' }
                    ];
                    var DataFilterModel = (function () {
                        function DataFilterModel(model, serializer) {
                            var _this = this;
                            this.columnName = ko.observable("");
                            serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                            serializer.deserialize(this, model);
                            this.name = ko.pureComputed(function () {
                                return !!_this.columnName() ? _this.columnName() : DevExpress.Analytics.Utils.getLocalization("DataFilter", "ChartStringId.DefaultDataFilterName");
                            });
                        }
                        DataFilterModel.createNew = function () {
                            return new Models.DefaultDataFilterModel({}, new DevExpress.Analytics.Utils.ModelSerializer());
                        };
                        DataFilterModel.prototype.getInfo = function () {
                            return Models.dataFilterSerializationsInfo;
                        };
                        return DataFilterModel;
                    }());
                    Models.DataFilterModel = DataFilterModel;
                    Models.DefaultDataFilterModel = DataFilterModel;
                    var DataContainerViewModel = (function (_super) {
                        __extends(DataContainerViewModel, _super);
                        function DataContainerViewModel(model, serializer) {
                            var _this = _super.call(this, model, serializer, Internal.dataContainerSerializationsInfo) || this;
                            _this.series = deserializeModelArray(model && model.SeriesSerializable, function (item, parent) { return new Series.SeriesViewModel(item, parent, serializer); }, Series.SeriesViewModel.prefix);
                            var array = Internal.viewBindableSerializationInfo.valuesArray;
                            var actions = [];
                            for (var i = 0; i < array.length; i++) {
                                var value = array[i];
                                var getImageClassName = function (isTemplate) {
                                    if (isTemplate === void 0) { isTemplate = false; }
                                    return (isTemplate ? "dxrd-svg-fieldlist-" : "dx-image-fieldlist-") + Series.SeriesViewModel.getClassName(value.value);
                                };
                                actions.push({
                                    text: DevExpress.Analytics.Utils.getLocalization(value.displayValue, value.localizationId),
                                    imageClassName: getImageClassName(),
                                    imageTemplateName: DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.getExistingTemplate(getImageClassName(true)),
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: (function (typeName) { return function (item) {
                                        _this.series()["innerActions"][0].closePopover();
                                        _this.series.push(new Series.SeriesViewModel({
                                            "@Name": DevExpress.Analytics.Internal.getUniqueName(_this.series().map(function (x) { return x["name"](); }), Series.SeriesViewModel.prefix),
                                            "View": {
                                                "@TypeNameSerializable": typeName,
                                            }
                                        }, _this.series));
                                    }; })(value.value)
                                });
                            }
                            _this.series()["innerActions"] = createInnerActionsWithPopover(DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'), "addseries-action", actions);
                            return _this;
                        }
                        DataContainerViewModel.from = function (model, serializer) {
                            return new DataContainerViewModel(model || {}, serializer);
                        };
                        DataContainerViewModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, Internal.dataContainerSerializationsInfo, refs);
                        };
                        return DataContainerViewModel;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Models.DataContainerViewModel = DataContainerViewModel;
                    var LegendViewModel = (function (_super) {
                        __extends(LegendViewModel, _super);
                        function LegendViewModel(model, serializer) {
                            return _super.call(this, model, serializer, Internal.legendSerializationsInfo) || this;
                        }
                        LegendViewModel.from = function (model, serializer) {
                            return new LegendViewModel(model || {}, serializer);
                        };
                        LegendViewModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, Internal.legendSerializationsInfo, refs);
                        };
                        return LegendViewModel;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Models.LegendViewModel = LegendViewModel;
                    var ChartViewModel = (function (_super) {
                        __extends(ChartViewModel, _super);
                        function ChartViewModel(model, serializer) {
                            var _this = _super.call(this, DevExpress.Analytics.Internal.cutRefs(model), serializer, Internal.chartSerializationsInfo) || this;
                            var oldType = ko.observable("");
                            _this._createDiagram(model["Diagram"], oldType, serializer);
                            _this._disposables.push(ko.computed(function () {
                                _this._createDiagram({}, oldType, serializer);
                            }));
                            _this.titles = deserializeModelArray(model && model.Titles, function (title, parent) { return new Models.TitleViewModel(title, parent, serializer); }, Models.TitleViewModel.prefix);
                            _this.legends = deserializeModelArray(model && model.Legends, function (legends, parent) { return new Models.AdditionalLegendViewModel(legends, parent, serializer); }, Models.AdditionalLegendViewModel.prefix);
                            _this._patchSeries(_this.dataContainer.seriesTemplate);
                            _this._disposables.push(_this.dataContainer.series.subscribe(function (changes) {
                                changes.filter(function (x) { return x.status === "added"; }).forEach(function (change) {
                                    _this._patchSeries(change.value);
                                });
                            }, undefined, "arrayChange"));
                            _this.dataContainer.series().forEach(function (series) { return _this._patchSeries(series); });
                            var actions = [
                                {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-top_left",
                                    imageTemplateName: "dxrd-svg-titles-top_left",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Alignment": "Near" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-top_center",
                                    imageTemplateName: "dxrd-svg-titles-top_center",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Alignment": "Center" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-top_right",
                                    imageTemplateName: "dxrd-svg-titles-top_right",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Alignment": "Far" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-right_top_vertical",
                                    imageTemplateName: "dxrd-svg-titles-right_top_vertical",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Dock": "Right", "@Alignment": "Near" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-right_center_vertical",
                                    imageTemplateName: "dxrd-svg-titles-right_center_vertical",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Dock": "Right", "@Alignment": "Center" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-right_bottom_vertical",
                                    imageTemplateName: "dxrd-svg-titles-right_bottom_vertical",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Dock": "Right", "@Alignment": "Far" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-bottom_left",
                                    imageTemplateName: "dxrd-svg-titles-bottom_left",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Dock": "Bottom", "@Alignment": "Near" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-bottom_center",
                                    imageTemplateName: "dxrd-svg-titles-bottom_center",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Dock": "Bottom", "@Alignment": "Center" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-bottom_right",
                                    imageTemplateName: "dxrd-svg-titles-bottom_right",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Dock": "Bottom", "@Alignment": "Far" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-left_bottom_vertical",
                                    imageTemplateName: "dxrd-svg-titles-left_bottom_vertical",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Dock": "Left", "@Alignment": "Near" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-left_center_vertical",
                                    imageTemplateName: "dxrd-svg-titles-left_center_vertical",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Dock": "Left", "@Alignment": "Center" }); }
                                }, {
                                    text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                                    imageClassName: "dxrd-image-chart-title-left_top_vertical",
                                    imageTemplateName: "dxrd-svg-titles-left_top_vertical",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    clickAction: function () { _this.addTitle({ "@Dock": "Left", "@Alignment": "Far" }); }
                                }
                            ];
                            _this.titles()["innerActions"] = createInnerActionsWithPopover(DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'), "addtitles-action", actions);
                            return _this;
                        }
                        ChartViewModel.from = function (model, serializer) {
                            return new ChartViewModel(model || {}, serializer);
                        };
                        ChartViewModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, Internal.chartSerializationsInfo, refs);
                        };
                        ChartViewModel.prototype._patchView = function (view) {
                            var _this = this;
                            var info = view.getInfo();
                            ["barDistance", "barDistanceFixed"].forEach(function (propertyName) {
                                if (info.filter(function (x) { return x.propertyName === propertyName; }).length > 0) {
                                    view[propertyName] = _this[propertyName];
                                }
                            });
                        };
                        ChartViewModel.prototype._patchSeries = function (series) {
                            var _this = this;
                            series._disposables.push(series.view.subscribe(function (newVal) {
                                _this._patchView(newVal);
                            }));
                            this._patchView(series.view());
                        };
                        ChartViewModel.prototype._createDiagram = function (model, oldType, serializer) {
                            if (model) {
                                var typeName = "";
                                if (this.dataContainer.seriesDataMember() || this.dataContainer.series().length === 0) {
                                    typeName = this.dataContainer.seriesTemplate.viewType();
                                }
                                else {
                                    typeName = this.dataContainer.series()[0].viewType();
                                }
                                if (oldType.peek() !== Internal.diagramMapper[typeName].type) {
                                    oldType(Internal.diagramMapper[typeName].type);
                                    this.diagram(DiagramViewModel.createDiagram(model, typeName, serializer));
                                }
                            }
                        };
                        ChartViewModel.prototype.addTitle = function (model) {
                            model["@Text"] = model["@Name"] = DevExpress.Analytics.Internal.getUniqueName(this.titles().map(function (x) { return x["name"](); }), Models.TitleViewModel.prefix);
                            this.titles()["innerActions"][0].closePopover();
                            this.titles.push(new Models.TitleViewModel(model, this.titles));
                        };
                        return ChartViewModel;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Models.ChartViewModel = ChartViewModel;
                })(Models = Internal.Models || (Internal.Models = {}));
                Internal.typeNameSerializable = {
                    propertyName: "typeName", modelName: "@TypeNameSerializable", from: function (value) { return value; }
                };
                Internal.barSeriesViewGroup = ["SideBySideBarSeriesView", "StackedBarSeriesView", "FullStackedBarSeriesView", "SideBySideStackedBarSeriesView", "SideBySideFullStackedBarSeriesView", "OverlappedRangeBarSeriesView", "SideBySideRangeBarSeriesView", "OverlappedGanttSeriesView", "SideBySideGanttSeriesView"];
                Internal.bar3DSeriesViewGroup = ["SideBySideBar3DSeriesView", "StackedBar3DSeriesView", "FullStackedBar3DSeriesView", "SideBySideStackedBar3DSeriesView", "SideBySideFullStackedBar3DSeriesView", "ManhattanBarSeriesView"];
                Internal.barWidth = { propertyName: "barWidth", modelName: "@BarWidth", displayName: "Bar Width", defaultVal: 0.6, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.BarSeriesView.BarWidth' };
                Internal.colorEach = { propertyName: "colorEach", modelName: "@ColorEach", displayName: "Color Each", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.SeriesView3DColorEachSupportBase.ColorEach' };
                Internal.borderSerializationsInfo = [Internal.color, Internal.thickness, Internal.visibility];
                Internal.border = { propertyName: "border", modelName: "Border", displayName: "Border", info: Internal.borderSerializationsInfo, defaultVal: {}, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.TotalLabel.Border' };
                var color2 = { propertyName: "color2", modelName: "@Color2", displayName: "Color2", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.PaletteEntry.Color2' }, typeNameSerializableOptions = { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" };
                Internal.fillMode = {
                    propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", defaultVal: "Empty", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }, { value: "Hatch", displayValue: "Hatch", localizationId: 'DevExpress.XtraCharts.FillMode.Hatch' }],
                    localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode'
                };
                var gradientModeBase = {
                    propertyName: "gradientMode", modelName: "@GradientMode", displayName: "Gradient Mode", defaultVal: "TopToBottom", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "TopToBottom", displayValue: "Top To Bottom", localizationId: 'DevExpress.XtraCharts.TextOrientation.TopToBottom' }, { value: "BottomToTop", displayValue: "Bottom To Top", localizationId: 'DevExpress.XtraCharts.TextOrientation.BottomToTop' }, { value: "LeftToRight", displayValue: "Left To Right" }, { value: "RightToLeft", displayValue: "Right To Left" }, { value: "TopLeftToBottomRight", displayValue: "Top Left To Bottom Right" }, { value: "BottomRightToTopLeft", displayValue: "Bottom Right To Top Left" }, { value: "TopRightToBottomLeft", displayValue: "Top Right To Bottom Left" }, { value: "BottomLeftToTopRight", displayValue: "Bottom Left To Top Right" }, { value: "FromCenterHorizontal", displayValue: "From Center Horizontal", localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.FromCenterHorizontal' }, { value: "ToCenterHorizontal", displayValue: "To Center Horizontal", localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.ToCenterHorizontal' }, { value: "FromCenterVertical", displayValue: "From Center Vertical", localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.FromCenterVertical' }, { value: "ToCenterVertical", displayValue: "To Center Vertical", localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.ToCenterVertical' }],
                    localizationId: 'DevExpress.XtraCharts.PolygonGradientFillOptions.GradientMode'
                }, GradientFillOptionsInfoBase = [gradientModeBase, color2, Internal.tag, { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" }];
                var hatchStyle = {
                    propertyName: "hatchStyle", modelName: "@HatchStyle", displayName: "Hatch Style", defaultVal: "BackwardDiagonal", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Horizontal", displayValue: "Horizontal", localizationId: 'DevExpress.XtraCharts.TextOrientation.Horizontal' }, { value: "Vertical", displayValue: "Vertical", localizationId: 'DevExpress.XtraCharts.LayoutDirection.Vertical' }, { value: "ForwardDiagonal", displayValue: "ForwardDiagonal", localizationId: 'ChartStringId.WizHatchForwardDiagonal' }, { value: "BackwardDiagonal", displayValue: "BackwardDiagonal", localizationId: 'ChartStringId.WizHatchBackwardDiagonal' }, { value: "LargeGrid", displayValue: "LargeGrid", localizationId: 'ChartStringId.WizHatchLargeGrid' }, { value: "DiagonalCross", displayValue: "DiagonalCross", localizationId: 'ChartStringId.WizHatchDiagonalCross' }, { value: "Percent05", displayValue: "Percent05", localizationId: 'ChartStringId.WizHatchPercent05' }, { value: "Percent10", displayValue: "Percent10", localizationId: 'ChartStringId.WizHatchPercent10' }, { value: "Percent20", displayValue: "Percent20", localizationId: 'ChartStringId.WizHatchPercent20' }, { value: "Percent25", displayValue: "Percent25", localizationId: 'ChartStringId.WizHatchPercent25' }, { value: "Percent30", displayValue: "Percent30", localizationId: 'ChartStringId.WizHatchPercent30' }, { value: "Percent40", displayValue: "Percent40", localizationId: 'ChartStringId.WizHatchPercent40' }, { value: "Percent50", displayValue: "Percent50", localizationId: 'ChartStringId.WizHatchPercent50' }, { value: "Percent60", displayValue: "Percent60", localizationId: 'ChartStringId.WizHatchPercent60' }, { value: "Percent70", displayValue: "Percent70", localizationId: 'ChartStringId.WizHatchPercent70' }, { value: "Percent75", displayValue: "Percent75", localizationId: 'ChartStringId.WizHatchPercent75' }, { value: "Percent80", displayValue: "Percent80", localizationId: 'ChartStringId.WizHatchPercent80' }, { value: "Percent90", displayValue: "Percent90", localizationId: 'ChartStringId.WizHatchPercent90' }, { value: "LightDownwardDiagonal", displayValue: "LightDownwardDiagonal", localizationId: 'ChartStringId.WizHatchLightDownwardDiagonal' }, { value: "LightUpwardDiagonal", displayValue: "LightUpwardDiagonal", localizationId: 'ChartStringId.WizHatchLightUpwardDiagonal' }, { value: "DarkDownwardDiagonal", displayValue: "DarkDownwardDiagonal", localizationId: 'ChartStringId.WizHatchDarkDownwardDiagonal' }, { value: "DarkUpwardDiagonal", displayValue: "DarkUpwardDiagonal", localizationId: 'ChartStringId.WizHatchDarkUpwardDiagonal' }, { value: "WideDownwardDiagonal", displayValue: "WideDownwardDiagonal", localizationId: 'ChartStringId.WizHatchWideDownwardDiagonal' }, { value: "WideUpwardDiagonal", displayValue: "WideUpwardDiagonal", localizationId: 'ChartStringId.WizHatchWideUpwardDiagonal' }, { value: "LightVertical", displayValue: "LightVertical", localizationId: 'ChartStringId.WizHatchLightVertical' }, { value: "LightHorizontal", displayValue: "LightHorizontal", localizationId: 'ChartStringId.WizHatchLightHorizontal' }, { value: "NarrowVertical", displayValue: "NarrowVertical", localizationId: 'ChartStringId.WizHatchNarrowVertical' }, { value: "NarrowHorizontal", displayValue: "NarrowHorizontal", localizationId: 'ChartStringId.WizHatchNarrowHorizontal' }, { value: "DarkVertical", displayValue: "DarkVertical", localizationId: 'ChartStringId.WizHatchDarkVertical' }, { value: "DarkHorizontal", displayValue: "DarkHorizontal", localizationId: 'ChartStringId.WizHatchDarkHorizontal' }, { value: "DashedDownwardDiagonal", displayValue: "DashedDownwardDiagonal", localizationId: 'ChartStringId.WizHatchDashedDownwardDiagonal' }, { value: "DashedUpwardDiagonal", displayValue: "DashedUpwardDiagonal", localizationId: 'ChartStringId.WizHatchDashedUpwardDiagonal' }, { value: "DashedHorizontal", displayValue: "DashedHorizontal", localizationId: 'ChartStringId.WizHatchDashedHorizontal' }, { value: "DashedVertical", displayValue: "DashedVertical", localizationId: 'ChartStringId.WizHatchDashedVertical' }, { value: "SmallConfetti", displayValue: "SmallConfetti", localizationId: 'ChartStringId.WizHatchSmallConfetti' }, { value: "LargeConfetti", displayValue: "LargeConfetti", localizationId: 'ChartStringId.WizHatchLargeConfetti' }, { value: "ZigZag", displayValue: "ZigZag", localizationId: 'ChartStringId.WizHatchZigZag' }, { value: "Wave", displayValue: "Wave", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Wave' }, { value: "DiagonalBrick", displayValue: "DiagonalBrick", localizationId: 'ChartStringId.WizHatchDiagonalBrick' }, { value: "HorizontalBrick", displayValue: "HorizontalBrick", localizationId: 'ChartStringId.WizHatchHorizontalBrick' }, { value: "Weave", displayValue: "Weave", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Weave' }, { value: "Plaid", displayValue: "Plaid", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Plaid' }, { value: "Divot", displayValue: "Divot", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Divot' }, { value: "DottedGrid", displayValue: "DottedGrid", localizationId: 'ChartStringId.WizHatchDottedGrid' }, { value: "DottedDiamond", displayValue: "DottedDiamond", localizationId: 'ChartStringId.WizHatchDottedDiamond' }, { value: "Shingle", displayValue: "Shingle", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Shingle' }, { value: "Trellis", displayValue: "Trellis", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Trellis' }, { value: "Sphere", displayValue: "Sphere", localizationId: 'System.Drawing.Drawing2D.HatchStyle.Sphere' }, { value: "SmallGrid", displayValue: "SmallGrid", localizationId: 'ChartStringId.WizHatchSmallGrid' }, { value: "SmallCheckerBoard", displayValue: "SmallCheckerBoard", localizationId: 'ChartStringId.WizHatchSmallCheckerBoard' }, { value: "LargeCheckerBoard", displayValue: "LargeCheckerBoard", localizationId: 'ChartStringId.WizHatchLargeCheckerBoard' }, { value: "OutlinedDiamond", displayValue: "OutlinedDiamond", localizationId: 'ChartStringId.WizHatchOutlinedDiamond' }, { value: "SolidDiamond", displayValue: "SolidDiamond", localizationId: 'ChartStringId.WizHatchSolidDiamond' }],
                    localizationId: 'DevExpress.XtraCharts.HatchFillOptions.HatchStyle'
                }, hatchFillOptionsInfo = [hatchStyle, color2, Internal.tag, typeNameSerializableOptions];
                Internal.fillStyleOptionsSerialize = { propertyName: "options", modelName: "Options", displayName: "Options", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.Options' };
                Internal.fillMode3D = {
                    propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", defaultVal: "Empty", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }],
                    localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode'
                };
                Internal.fillStyle = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRChart.FillStyle' };
                var seriesAggregateFunction = {
                    propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: 'Aggregate Function', localizationId: 'DevExpress.XtraCharts.XYDiagram2DSeriesViewBase.AggregateFunction', defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: 'Default', displayValue: DevExpress.Analytics.Utils.getLocalization('Default', 'ChartStringId.WizAggregateFunctionDefault') }, { value: 'None', displayValue: DevExpress.Analytics.Utils.getLocalization('None', 'ChartStringId.WizAggregateFunctionNone') }, { value: 'Average', displayValue: DevExpress.Analytics.Utils.getLocalization('Average', 'ChartStringId.WizAggregateFunctionAverage') }, { value: 'Sum', displayValue: DevExpress.Analytics.Utils.getLocalization('Sum', 'ChartStringId.WizAggregateFunctionSum') }, { value: 'Minimum', displayValue: DevExpress.Analytics.Utils.getLocalization('Minimum', 'ChartStringId.WizAggregateFunctionMinimum') }, { value: 'Maximum', displayValue: DevExpress.Analytics.Utils.getLocalization('Maximum', 'ChartStringId.WizAggregateFunctionMaximum') }, { value: 'Count', displayValue: DevExpress.Analytics.Utils.getLocalization('Count', 'ChartStringId.WizAggregateFunctionCount') }, { value: 'Financial', displayValue: DevExpress.Analytics.Utils.getLocalization('Financial', 'ChartStringId.WizAggregateFunctionFinancial') }]
                };
                Internal.viewSerializationsInfo = [Internal.typeNameSerializable, Internal.color, Internal.colorEach, Internal.border, seriesAggregateFunction, Internal.tag];
                Internal.fillModeMapper = {
                    "Empty": [],
                    "Solid": [Internal.tag],
                    "Gradient": GradientFillOptionsInfoBase,
                    "Hatch": hatchFillOptionsInfo
                };
                var Series;
                (function (Series) {
                    var SummaryOptionsModelBase = (function () {
                        function SummaryOptionsModelBase(model, serializer) {
                            serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                            serializer.deserialize(this, model || {});
                        }
                        SummaryOptionsModelBase.prototype.getInfo = function () {
                            return Metadata.summaryOptionsSerializationInfoArray;
                        };
                        SummaryOptionsModelBase.prototype.resetAllProperties = function () {
                            var _this = this;
                            this.getInfo().forEach(function (info) {
                                if ("defaultVal" in info) {
                                    _this[info.propertyName](info.defaultVal);
                                }
                                else if (info.propertyName === "summaryFunction") {
                                    _this.summaryFunction.functionName(null);
                                    _this.summaryFunction.args([]);
                                }
                                else {
                                    _this[info.propertyName](null);
                                }
                            });
                        };
                        return SummaryOptionsModelBase;
                    }());
                    Series.SummaryOptionsModelBase = SummaryOptionsModelBase;
                    var QualitativeSummaryOptionsModel = (function (_super) {
                        __extends(QualitativeSummaryOptionsModel, _super);
                        function QualitativeSummaryOptionsModel(model, serializer) {
                            return _super.call(this, model || {}, serializer) || this;
                        }
                        QualitativeSummaryOptionsModel.from = function (model, serializer) {
                            return new QualitativeSummaryOptionsModel(model || {}, serializer);
                        };
                        QualitativeSummaryOptionsModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, Metadata.summaryOptionsSerializationInfoArray, refs);
                        };
                        return QualitativeSummaryOptionsModel;
                    }(SummaryOptionsModelBase));
                    Series.QualitativeSummaryOptionsModel = QualitativeSummaryOptionsModel;
                    var NumericSummaryOptionsModel = (function (_super) {
                        __extends(NumericSummaryOptionsModel, _super);
                        function NumericSummaryOptionsModel(model, serializer) {
                            return _super.call(this, model || {}, serializer) || this;
                        }
                        NumericSummaryOptionsModel.from = function (model, serializer) {
                            return new NumericSummaryOptionsModel(model || {}, serializer);
                        };
                        NumericSummaryOptionsModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, Metadata.numericSummaryOptionsSerializationInfoArray, refs);
                        };
                        NumericSummaryOptionsModel.prototype.getInfo = function () {
                            return Metadata.numericSummaryOptionsSerializationInfoArray;
                        };
                        return NumericSummaryOptionsModel;
                    }(SummaryOptionsModelBase));
                    Series.NumericSummaryOptionsModel = NumericSummaryOptionsModel;
                    var DateTimeSummaryOptionsModel = (function (_super) {
                        __extends(DateTimeSummaryOptionsModel, _super);
                        function DateTimeSummaryOptionsModel(model, serializer) {
                            return _super.call(this, model || {}, serializer) || this;
                        }
                        DateTimeSummaryOptionsModel.from = function (model, serializer) {
                            return new DateTimeSummaryOptionsModel(model || {}, serializer);
                        };
                        DateTimeSummaryOptionsModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, Metadata.dateTimeSummaryOptionsSerializationInfoArray, refs);
                        };
                        DateTimeSummaryOptionsModel.prototype.getInfo = function () {
                            return Metadata.dateTimeSummaryOptionsSerializationInfoArray;
                        };
                        return DateTimeSummaryOptionsModel;
                    }(SummaryOptionsModelBase));
                    Series.DateTimeSummaryOptionsModel = DateTimeSummaryOptionsModel;
                    var Metadata;
                    (function (Metadata) {
                        Metadata.summaryFunctionSerializationInfo = {
                            propertyName: "summaryFunction", displayName: "Summary Function", modelName: "@SummaryFunction", from: Widgets.SummaryFunctionModel.from, toJsonObject: Widgets.SummaryFunctionModel.toJson,
                            editor: Internal.editorTemplates.summaryFunction, localizationId: 'DevExpress.XtraCharts.SummaryOptionsBase.SummaryFunction'
                        };
                        Metadata.summaryOptionsSerializationInfoArray = [
                            Metadata.summaryFunctionSerializationInfo, Internal.tag
                        ];
                        Metadata.numericSummaryOptionsSerializationInfoArray = Metadata.summaryOptionsSerializationInfoArray.concat([
                            { propertyName: "measureUnit", modelName: "@MeasureUnit", displayName: "Measure Unit", localizationId: "DevExpress.XtraCharts.NumericSummaryOptions.MeasureUnit", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric },
                            { propertyName: "useAxisMeasureUnit", modelName: "@UseAxisMeasureUnit", displayName: "Use Axis Measure Unit", localizationId: "DevExpress.XtraCharts.NumericSummaryOptions.UseAxisMeasureUnit", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool },
                        ]);
                        Metadata.dateTimeSummaryOptionsSerializationInfoArray = Metadata.summaryOptionsSerializationInfoArray.concat([
                            {
                                propertyName: "measureUnit", modelName: "@MeasureUnit", displayName: "Measure Unit", localizationId: "DevExpress.XtraCharts.DateTimeSummaryOptions.MeasureUnit", defaultVal: "Day", from: DevExpress.Analytics.Utils.fromEnum, editor: DevExpress.Analytics.Widgets.editorTemplates.comboBox,
                                valuesArray: [
                                    { value: "Millisecond", displayValue: "Millisecond", localizationId: "DevExpress.XtraCharts.DateTimeMeasureUnit.Millisecond" },
                                    { value: "Second", displayValue: "Second", localizationId: "DevExpress.XtraCharts.DateTimeMeasureUnit.Second" },
                                    { value: "Minute", displayValue: "Minute", localizationId: "DevExpress.XtraCharts.DateTimeMeasureUnit.Minute" },
                                    { value: "Hour", displayValue: "Hour", localizationId: "DevExpress.XtraCharts.DateTimeMeasureUnit.Hour" },
                                    { value: "Day", displayValue: "Day", localizationId: "DevExpress.XtraCharts.DateTimeMeasureUnit.Day" },
                                    { value: "Week", displayValue: "Week", localizationId: "DevExpress.XtraCharts.DateTimeMeasureUnit.Week" },
                                    { value: "Month", displayValue: "Month", localizationId: "DevExpress.XtraCharts.DateTimeMeasureUnit.Month" },
                                    { value: "Quarter", displayValue: "Quarter", localizationId: "DevExpress.XtraCharts.DateTimeMeasureUnit.Quarter" },
                                    { value: "Year", displayValue: "Year", localizationId: "DevExpress.XtraCharts.DateTimeMeasureUnit.Year" },
                                ]
                            },
                            { propertyName: "measureUnitMultiplier", modelName: "@MeasureUnitMultiplier", displayName: "Measure Unit Multiplier", localizationId: "DevExpress.XtraCharts.DateTimeSummaryOptions.MeasureUnitMultiplier", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric },
                            { propertyName: "useAxisMeasureUnit", modelName: "@UseAxisMeasureUnit", displayName: "Use Axis Measure Unit", localizationId: "DevExpress.XtraCharts.DateTimeSummaryOptions.UseAxisMeasureUnit", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool }
                        ]);
                    })(Metadata = Series.Metadata || (Series.Metadata = {}));
                    var FillStyle = (function (_super) {
                        __extends(FillStyle, _super);
                        function FillStyle(model, info, gradientTypeName, serializer) {
                            var _this = _super.call(this, model, serializer, info) || this;
                            _this.gradientTypeName = gradientTypeName;
                            _this.updateOptions(_this.fillMode(), serializer, model["Options"]);
                            _this._disposables.push(_this.fillMode.subscribe(function (newValue) {
                                _this.updateOptions(newValue, serializer, {});
                            }));
                            return _this;
                        }
                        FillStyle.from = function (info, gradientTypeName) {
                            return function (model, serializer) {
                                return new FillStyle(model || {}, info, gradientTypeName, serializer);
                            };
                        };
                        FillStyle.toJson = function (model, serializer, refs) {
                            return serializer.serialize(model, undefined, refs);
                        };
                        FillStyle.prototype._optionsTypeMap = function (unitType) {
                            switch (unitType) {
                                case "Gradient": return this.gradientTypeName;
                                case "Hatch": return "HatchFillOptions";
                                default: return undefined;
                            }
                        };
                        FillStyle.prototype.isPropertyVisible = function (propertyName) {
                            return propertyName !== "options" || (propertyName === "options" && this[propertyName]());
                        };
                        FillStyle.prototype.updateOptions = function (fillMode, serializer, optionsObject) {
                            var newObject = $.extend({ "@TypeNameSerializable": this._optionsTypeMap(fillMode) }, optionsObject);
                            var optionsInfo = Internal.fillModeMapper[fillMode];
                            this.options(new DevExpress.Analytics.Elements.SerializableModel(newObject, serializer, optionsInfo));
                        };
                        return FillStyle;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Series.FillStyle = FillStyle;
                })(Series = Internal.Series || (Internal.Series = {}));
                var arrowWidthValidationRules = [{
                        type: "custom",
                        validationCallback: function (options) {
                            return options.value % 2 !== 0;
                        },
                        get message() {
                            return DevExpress.Analytics.Utils.getLocalization("The arrow width should be always odd and greater than 0", "ChartStringId.MsgIncorrectArrowWidth");
                        }
                    }];
                var invertedStep = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.FullStackedStepAreaSeriesView.InvertedStep", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var viewFillMode = {
                    propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", localizationId: "DevExpress.XtraCharts.FillStyle2D.FillMode", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }, { value: "Hatch", displayValue: "Hatch", localizationId: 'DevExpress.XtraCharts.FillMode.Hatch' }], defaultVal: "Empty"
                };
                var fillStyleInfo = [viewFillMode, Internal.fillStyleOptionsSerialize, Internal.tag,];
                var viewFillStyle = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.FillStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, from: Series.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Series.FillStyle.toJson };
                var transparency = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.Transparency", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var viewEnableAntialiasing = {
                    propertyName: "enableAntialiasing", modelName: "@EnableAntialiasing", displayName: "Enable Antialiasing", localizationId: "DevExpress.XtraCharts.LineSeriesView.EnableAntialiasing", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var size = { propertyName: "size", modelName: "@Size", displayName: "Size", localizationId: "DevExpress.XtraCharts.Shadow.Size", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 2, editorOptions: { min: 1 } };
                var viewColor = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.Shadow.Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, defaultVal: "79,0,0,0" };
                var viewVisible = { propertyName: "visible", modelName: "@Visible", displayName: "Visible", localizationId: "DevExpress.XtraCharts.Shadow.Visible", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var shadowInfo = [size, viewColor, viewVisible, Internal.tag,];
                var shadow = { propertyName: "shadow", modelName: "Shadow", displayName: "Shadow", localizationId: "DevExpress.XtraCharts.XYDiagramSeriesViewBase.Shadow", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: shadowInfo, };
                var viewAggregateFunction = {
                    propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: "Aggregate Function", localizationId: "DevExpress.XtraCharts.XYDiagram2DSeriesViewBase.AggregateFunction", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Average", displayValue: "Average", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: "Minimum", displayValue: "Minimum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: "Maximum", displayValue: "Maximum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: "Sum", displayValue: "Sum", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "Financial", displayValue: "Financial", localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var color1 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.SeriesViewBase.Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, defaultVal: "transparent" };
                var fullStackedStepAreaSeriesViewinfo = [invertedStep, viewFillStyle, transparency, viewEnableAntialiasing, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var viewColor2 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.Marker.Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, defaultVal: "transparent" };
                var size1 = { propertyName: "size", modelName: "@Size", displayName: "Size", localizationId: "DevExpress.XtraCharts.SimpleMarker.Size", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 10, editorOptions: { min: 1 } };
                var kind = {
                    propertyName: "kind", modelName: "@Kind", displayName: "Kind", localizationId: "DevExpress.XtraCharts.MarkerBase.Kind", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Square", displayValue: "Square", localizationId: 'DevExpress.XtraCharts.MarkerKind.Square' }, { value: "Diamond", displayValue: "Diamond", localizationId: 'DevExpress.XtraCharts.MarkerKind.Diamond' }, { value: "Triangle", displayValue: "Triangle", localizationId: 'DevExpress.XtraCharts.MarkerKind.Triangle' }, { value: "InvertedTriangle", displayValue: "InvertedTriangle" }, { value: "Circle", displayValue: "Circle", localizationId: 'DevExpress.XtraCharts.CircleEasingFunction' }, { value: "Plus", displayValue: "Plus", localizationId: 'DevExpress.XtraCharts.MarkerKind.Plus' }, { value: "Cross", displayValue: "Cross", localizationId: 'DevExpress.XtraCharts.MarkerKind.Cross' }, { value: "Star", displayValue: "Star", localizationId: 'DevExpress.XtraCharts.MarkerKind.Star' }, { value: "Pentagon", displayValue: "Pentagon", localizationId: 'DevExpress.XtraCharts.MarkerKind.Pentagon' }, { value: "Hexagon", displayValue: "Hexagon", localizationId: 'DevExpress.XtraCharts.MarkerKind.Hexagon' }], defaultVal: "Circle"
                };
                var starPointCount = { propertyName: "starPointCount", modelName: "@StarPointCount", displayName: "Star Point Count", localizationId: "DevExpress.XtraCharts.MarkerBase.StarPointCount", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 5, editorOptions: { min: 3, max: 100 } };
                var fillStyle1 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.MarkerBase.FillStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, from: Series.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Series.FillStyle.toJson };
                var viewBorderVisible = { propertyName: "borderVisible", modelName: "@BorderVisible", displayName: "Border Visible", localizationId: "DevExpress.XtraCharts.MarkerBase.BorderVisible", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var viewBorderColor = { propertyName: "borderColor", modelName: "@BorderColor", displayName: "Border Color", localizationId: "DevExpress.XtraCharts.MarkerBase.BorderColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, defaultVal: "transparent" };
                var marker1Info = [viewColor2, size1, kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, Internal.tag,];
                var marker1 = { propertyName: "marker1", modelName: "Marker1", displayName: "Marker 1", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker1", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: marker1Info, };
                var marker2Info = [viewColor2, size1, kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, Internal.tag,];
                var marker2 = { propertyName: "marker2", modelName: "Marker2", displayName: "Marker 2", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker2", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: marker2Info, };
                var color3 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.BorderBase.Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, defaultVal: "transparent" };
                var viewThickness = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", localizationId: "DevExpress.XtraCharts.BorderBase.Thickness", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { min: 1 } };
                var viewVisibility = {
                    propertyName: "visibility", modelName: "@Visibility", displayName: "Visibility", localizationId: "DevExpress.XtraCharts.BorderBase.Visibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var border1Info = [color3, viewThickness, viewVisibility, Internal.tag,];
                var border1 = { propertyName: "border1", modelName: "Border1", displayName: "Border 1", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Border1", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: border1Info, };
                var border2Info = [color3, viewThickness, viewVisibility, Internal.tag,];
                var border2 = { propertyName: "border2", modelName: "Border2", displayName: "Border 2", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Border2", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: border2Info, };
                var marker1Visibility = {
                    propertyName: "marker1Visibility", modelName: "@Marker1Visibility", displayName: "Marker 1 Visibility", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker1Visibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var marker2Visibility = {
                    propertyName: "marker2Visibility", modelName: "@Marker2Visibility", displayName: "Marker 2 Visibility", localizationId: "DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker2Visibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var fillStyle2 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.RadarAreaSeriesView.FillStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, from: Series.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Series.FillStyle.toJson };
                var transparency1 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.RadarAreaSeriesView.Transparency", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 135 };
                var aggregateFunction1 = {
                    propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: "Aggregate Function", localizationId: "DevExpress.XtraCharts.RadarSeriesViewBase.AggregateFunction", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Average", displayValue: "Average", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: "Minimum", displayValue: "Minimum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: "Maximum", displayValue: "Maximum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: "Sum", displayValue: "Sum", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "Financial", displayValue: "Financial", localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var shadow1 = { propertyName: "shadow", modelName: "Shadow", displayName: "Shadow", localizationId: "DevExpress.XtraCharts.RadarSeriesViewBase.Shadow", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: shadowInfo, };
                var viewColorEach = { propertyName: "colorEach", modelName: "@ColorEach", displayName: "Color Each", localizationId: "DevExpress.XtraCharts.RadarSeriesViewBase.ColorEach", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var polarRangeAreaSeriesViewinfo = [marker1, marker2, border1, border2, marker1Visibility, marker2Visibility, fillStyle2, transparency1, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var radarRangeAreaSeriesViewinfo = [marker1, marker2, border1, border2, marker1Visibility, marker2Visibility, fillStyle2, transparency1, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var areaWidth = { propertyName: "areaWidth", modelName: "@AreaWidth", displayName: "Area Width", localizationId: "DevExpress.XtraCharts.Area3DSeriesView.AreaWidth", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 1 } };
                var aggregateFunction2 = {
                    propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: "Aggregate Function", localizationId: "DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.AggregateFunction", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Average", displayValue: "Average", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: "Minimum", displayValue: "Minimum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: "Maximum", displayValue: "Maximum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: "Sum", displayValue: "Sum", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "Financial", displayValue: "Financial", localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var transparency2 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.Transparency", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var rangeArea3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency2, color1, Internal.tag,];
                var marker11 = { propertyName: "marker1", modelName: "Marker1", displayName: "Marker 1", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Marker1", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: marker1Info, };
                var marker21 = { propertyName: "marker2", modelName: "Marker2", displayName: "Marker 2", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Marker2", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: marker2Info, };
                var border11 = { propertyName: "border1", modelName: "Border1", displayName: "Border 1", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Border1", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: border1Info, };
                var border21 = { propertyName: "border2", modelName: "Border2", displayName: "Border 2", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Border2", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: border2Info, };
                var marker1Visibility1 = {
                    propertyName: "marker1Visibility", modelName: "@Marker1Visibility", displayName: "Marker 1 Visibility", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Marker1Visibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var marker2Visibility1 = {
                    propertyName: "marker2Visibility", modelName: "@Marker2Visibility", displayName: "Marker 2 Visibility", localizationId: "DevExpress.XtraCharts.RangeAreaSeriesView.Marker2Visibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var transparency3 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.Transparency", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 135 };
                var colorEach1 = { propertyName: "colorEach", modelName: "@ColorEach", displayName: "Color Each", localizationId: "DevExpress.XtraCharts.SeriesViewColorEachSupportBase.ColorEach", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var rangeAreaSeriesViewinfo = [marker11, marker21, border11, border21, marker1Visibility1, marker2Visibility1, viewFillStyle, transparency3, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var invertedStep1 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StackedStepAreaSeriesView.InvertedStep", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var borderInfo = [color3, viewThickness, viewVisibility, Internal.tag,];
                var viewBorder1 = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.Border", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: borderInfo, };
                var stackedStepAreaSeriesViewinfo = [invertedStep1, viewBorder1, viewFillStyle, transparency, viewEnableAntialiasing, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var invertedStep2 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StepArea3DSeriesView.InvertedStep", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var transparency4 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.Transparency", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 135 };
                var stepArea3DSeriesViewinfo = [invertedStep2, areaWidth, aggregateFunction2, transparency4, color1, Internal.tag,];
                var invertedStep3 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StepAreaSeriesView.InvertedStep", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var markerOptionsInfo = [viewColor2, size1, kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, Internal.tag,];
                var markerOptions = { propertyName: "markerOptions", modelName: "MarkerOptions", displayName: "Marker Options", localizationId: "DevExpress.XtraCharts.AreaSeriesViewBase.MarkerOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: markerOptionsInfo, };
                var viewMarkerVisibility = {
                    propertyName: "markerVisibility", modelName: "@MarkerVisibility", displayName: "Marker Visibility", localizationId: "DevExpress.XtraCharts.LineSeriesView.MarkerVisibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var stepAreaSeriesViewinfo = [invertedStep3, viewBorder1, viewFillStyle, markerOptions, transparency3, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var stackedGroup = { propertyName: "stackedGroup", modelName: "@StackedGroupSerializable", displayName: "Stacked Group", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.StackedGroup", editor: Internal.editorTemplates.group, defaultVal: null };
                var barDistance = { propertyName: "barDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.BarDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var barDistanceFixed = { propertyName: "barDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.BarDistanceFixed", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
                var equalBarWidth = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.EqualBarWidth", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var viewBarWidth = { propertyName: "barWidth", modelName: "@BarWidth", displayName: "Bar Width", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.BarWidth", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 0 } };
                var barDepth = { propertyName: "barDepth", modelName: "@BarDepth", displayName: "Bar Depth", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.BarDepth", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 0 } };
                var barDepthAuto = { propertyName: "barDepthAuto", modelName: "@BarDepthAuto", displayName: "Bar Depth Auto", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.BarDepthAuto", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var fillMode1 = {
                    propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", localizationId: "DevExpress.XtraCharts.FillStyle3D.FillMode", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }], defaultVal: "Empty"
                };
                var fillStyleInfo1 = [fillMode1, Internal.fillStyleOptionsSerialize, Internal.tag,];
                var fillStyle3 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.FillStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, from: Series.FillStyle.from(fillStyleInfo1, "RectangleGradientFillOptions"), toJsonObject: Series.FillStyle.toJson };
                var model = {
                    propertyName: "model", modelName: "@Model", displayName: "Model", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.Model", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Box", displayValue: "Box", localizationId: 'DevExpress.XtraCharts.Bar3DModel.Box' }, { value: "Cylinder", displayValue: "Cylinder", localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.Cylinder' }, { value: "Cone", displayValue: "Cone", localizationId: 'DevExpress.XtraCharts.Bar3DModel.Cone' }, { value: "Pyramid", displayValue: "Pyramid", localizationId: 'DevExpress.XtraCharts.Bar3DModel.Pyramid' }], defaultVal: "Box"
                };
                var showFacet = { propertyName: "showFacet", modelName: "@ShowFacet", displayName: "Show Facet", localizationId: "DevExpress.XtraCharts.Bar3DSeriesView.ShowFacet", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var colorEach2 = { propertyName: "colorEach", modelName: "@ColorEach", displayName: "Color Each", localizationId: "DevExpress.XtraCharts.SeriesView3DColorEachSupportBase.ColorEach", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var sideBySideFullStackedBar3DSeriesViewinfo = [stackedGroup, barDistance, barDistanceFixed, equalBarWidth, viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Internal.tag,];
                var stackedGroup1 = { propertyName: "stackedGroup", modelName: "@StackedGroupSerializable", displayName: "Stacked Group", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.StackedGroup", editor: Internal.editorTemplates.group, defaultVal: null };
                var barDistance1 = { propertyName: "barDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.BarDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var barDistanceFixed1 = { propertyName: "barDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.BarDistanceFixed", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
                var equalBarWidth1 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.EqualBarWidth", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var barWidth1 = { propertyName: "barWidth", modelName: "@BarWidth", displayName: "Bar Width", localizationId: "DevExpress.XtraCharts.BarSeriesView.BarWidth", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 0 } };
                var border3 = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.BarSeriesView.Border", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: borderInfo, };
                var fillStyle4 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.BarSeriesView.FillStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, from: Series.FillStyle.from(fillStyleInfo, "RectangleGradientFillOptions"), toJsonObject: Series.FillStyle.toJson };
                var transparency5 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.BarSeriesView.Transparency", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var sideBySideFullStackedBarSeriesViewinfo = [stackedGroup1, barDistance1, barDistanceFixed1, equalBarWidth1, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var stackedGroup2 = { propertyName: "stackedGroup", modelName: "@StackedGroupSerializable", displayName: "Stacked Group", localizationId: "DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.StackedGroup", editor: Internal.editorTemplates.group, defaultVal: null };
                var barDistance2 = { propertyName: "barDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.BarDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var barDistanceFixed2 = { propertyName: "barDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.BarDistanceFixed", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
                var equalBarWidth2 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.EqualBarWidth", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var sideBySideStackedBar3DSeriesViewinfo = [stackedGroup2, barDistance2, barDistanceFixed2, equalBarWidth2, viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Internal.tag,];
                var stackedGroup3 = { propertyName: "stackedGroup", modelName: "@StackedGroupSerializable", displayName: "Stacked Group", localizationId: "DevExpress.XtraCharts.SideBySideStackedBarSeriesView.StackedGroup", editor: Internal.editorTemplates.group, defaultVal: null };
                var barDistance3 = { propertyName: "barDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideStackedBarSeriesView.BarDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var barDistanceFixed3 = { propertyName: "barDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideStackedBarSeriesView.BarDistanceFixed", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
                var equalBarWidth3 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideStackedBarSeriesView.EqualBarWidth", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var sideBySideStackedBarSeriesViewinfo = [stackedGroup3, barDistance3, barDistanceFixed3, equalBarWidth3, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var lineThickness = { propertyName: "lineThickness", modelName: "@LineThickness", displayName: "Line Thickness", localizationId: "DevExpress.XtraCharts.Line3DSeriesView.LineThickness", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 5, editorOptions: { min: 1 } };
                var lineWidth = { propertyName: "lineWidth", modelName: "@LineWidth", displayName: "Line Width", localizationId: "DevExpress.XtraCharts.Line3DSeriesView.LineWidth", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0.6, editorOptions: { min: 1 } };
                var fullStackedLine3DSeriesViewinfo = [lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Internal.tag,];
                var thickness1 = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", localizationId: "DevExpress.XtraCharts.LineStyle.Thickness", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 2, editorOptions: { min: 1 } };
                var viewDashStyle = {
                    propertyName: "dashStyle", modelName: "@DashStyle", displayName: "Dash Style", localizationId: "DevExpress.XtraCharts.LineStyle.DashStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Dash", displayValue: "Dash", localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' }, { value: "Dot", displayValue: "Dot", localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' }, { value: "DashDot", displayValue: "DashDot" }, { value: "DashDotDot", displayValue: "DashDotDot" }], defaultVal: "Solid"
                };
                var lineJoin = {
                    propertyName: "lineJoin", modelName: "@LineJoin", displayName: "Line Join", localizationId: "DevExpress.XtraCharts.LineStyle.LineJoin", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Miter", displayValue: "Miter", localizationId: 'System.Drawing.Drawing2D.LineJoin.Miter' }, { value: "Bevel", displayValue: "Bevel", localizationId: 'System.Drawing.Drawing2D.LineJoin.Bevel' }, { value: "Round", displayValue: "Round", localizationId: 'System.Drawing.Drawing2D.LineJoin.Round' }, { value: "MiterClipped", displayValue: "MiterClipped", localizationId: 'System.Drawing.Drawing2D.LineJoin.MiterClipped' }], defaultVal: "Miter"
                };
                var lineStyleInfo = [thickness1, viewDashStyle, lineJoin, Internal.tag,];
                var viewLineStyle = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", localizationId: "DevExpress.XtraCharts.LineSeriesView.LineStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: lineStyleInfo, };
                var lineMarkerOptionsInfo = [viewColor2, size1, kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, Internal.tag,];
                var lineMarkerOptions = { propertyName: "lineMarkerOptions", modelName: "LineMarkerOptions", displayName: "Line Marker Options", localizationId: "DevExpress.XtraCharts.LineSeriesView.LineMarkerOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: lineMarkerOptionsInfo, };
                var fullStackedLineSeriesViewinfo = [viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var lineStyle1 = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", localizationId: "DevExpress.XtraCharts.RadarLineSeriesView.LineStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: lineStyleInfo, };
                var closed = { propertyName: "closed", modelName: "@Closed", displayName: "Closed", localizationId: "DevExpress.XtraCharts.RadarLineSeriesView.Closed", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var lineMarkerOptions1 = { propertyName: "lineMarkerOptions", modelName: "LineMarkerOptions", displayName: "Line Marker Options", localizationId: "DevExpress.XtraCharts.RadarLineSeriesView.LineMarkerOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: lineMarkerOptionsInfo, };
                var markerVisibility1 = {
                    propertyName: "markerVisibility", modelName: "@MarkerVisibility", displayName: "Marker Visibility", localizationId: "DevExpress.XtraCharts.RadarLineSeriesView.MarkerVisibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var scatterPolarLineSeriesViewinfo = [lineStyle1, closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var scatterRadarLineSeriesViewinfo = [lineStyle1, closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var stackedLine3DSeriesViewinfo = [lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Internal.tag,];
                var stackedLineSeriesViewinfo = [viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var weight = { propertyName: "weight", modelName: "@Weight", displayName: "Weight", localizationId: "DevExpress.XtraCharts.NestedDoughnutSeriesView.Weight", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { min: 1 } };
                var innerIndent = { propertyName: "innerIndent", modelName: "@InnerIndent", displayName: "Inner Indent", localizationId: "DevExpress.XtraCharts.NestedDoughnutSeriesView.InnerIndent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 5, editorOptions: { min: 0 } };
                var group = { propertyName: "group", modelName: "@GroupSerializable", displayName: "Group", localizationId: "DevExpress.XtraCharts.NestedDoughnutSeriesView.Group", editor: Internal.editorTemplates.group, defaultVal: null };
                var holeRadiusPercent = { propertyName: "holeRadiusPercent", modelName: "@HoleRadiusPercent", displayName: "Hole Radius Percent", localizationId: "DevExpress.XtraCharts.DoughnutSeriesView.HoleRadiusPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 40, editorOptions: { min: 0, max: 100 } };
                var minAllowedSizePercentage = { propertyName: "minAllowedSizePercentage", modelName: "@MinAllowedSizePercentage", displayName: "Min Allowed Size Percentage", localizationId: "DevExpress.XtraCharts.PieSeriesView.MinAllowedSizePercentage", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 50, editorOptions: { min: 0, max: 100 } };
                var rotation = { propertyName: "rotation", modelName: "@Rotation", displayName: "Rotation", localizationId: "DevExpress.XtraCharts.PieSeriesView.Rotation", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var heightToWidthRatio = { propertyName: "heightToWidthRatio", modelName: "@HeightToWidthRatio", displayName: "Height to Width Ratio", localizationId: "DevExpress.XtraCharts.PieSeriesView.HeightToWidthRatio", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { min: 0 } };
                var border4 = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.PieSeriesView.Border", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: borderInfo, };
                var fillStyle5 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.PieSeriesView.FillStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, from: Series.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Series.FillStyle.toJson };
                var runtimeExploding = { propertyName: "runtimeExploding", modelName: "@RuntimeExploding", displayName: "Runtime Exploding", localizationId: "DevExpress.XtraCharts.PieSeriesView.RuntimeExploding", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var explodedDistancePercentage = { propertyName: "explodedDistancePercentage", modelName: "@ExplodedDistancePercentage", displayName: "Exploded Distance Percentage", localizationId: "DevExpress.XtraCharts.PieSeriesViewBase.ExplodedDistancePercentage", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 10, editorOptions: { min: 1 } };
                var explodeMode = {
                    propertyName: "explodeMode", modelName: "@ExplodeMode", displayName: "Explode Mode", localizationId: "DevExpress.XtraCharts.PieSeriesViewBase.ExplodeMode", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "All", displayValue: "All", localizationId: 'DevExpress.XtraCharts.PieExplodeMode.All' }, { value: "MinValue", displayValue: "MinValue" }, { value: "MaxValue", displayValue: "MaxValue" }, { value: "UsePoints", displayValue: "UsePoints" }, { value: "UseFilters", displayValue: "UseFilters" }, { value: "Others", displayValue: "Others", localizationId: 'DevExpress.XtraCharts.PieExplodeMode.Others' }], defaultVal: "None"
                };
                var sweepDirection = {
                    propertyName: "sweepDirection", modelName: "@SweepDirection", displayName: "Sweep Direction", localizationId: "DevExpress.XtraCharts.PieSeriesViewBase.SweepDirection", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Counterclockwise", displayValue: "Counterclockwise", localizationId: 'DevExpress.XtraCharts.PieSweepDirection.Counterclockwise' }, { value: "Clockwise", displayValue: "Clockwise", localizationId: 'DevExpress.XtraCharts.PieSweepDirection.Clockwise' }], defaultVal: "Counterclockwise"
                };
                var totalLabelInfo = [Internal.textColor, Internal.backColor, viewEnableAntialiasing, Internal.maxWidth, Internal.maxLineCount, Internal.textAlignment, Internal.textPattern, viewVisible, Internal.tag, Internal.font12, viewBorder1, viewFillStyle, shadow];
                var totalLabel = { propertyName: "totalLabel", modelName: "TotalLabel", displayName: "Total Label", localizationId: "DevExpress.XtraCharts.PieSeriesView.TotalLabel", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: totalLabelInfo, };
                var nestedDoughnutSeriesViewinfo = [weight, innerIndent, group, holeRadiusPercent, minAllowedSizePercentage, rotation, heightToWidthRatio, border4, fillStyle5, runtimeExploding, explodedDistancePercentage, explodeMode, sweepDirection, Internal.tag, totalLabel];
                var thickness2 = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", localizationId: "DevExpress.XtraCharts.LineStyle.Thickness", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { min: 1 } };
                var lineStyleInfo1 = [thickness2, viewDashStyle, lineJoin, Internal.tag,];
                var lineStyle2 = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", localizationId: "DevExpress.XtraCharts.SwiftPlotSeriesView.LineStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: lineStyleInfo1, };
                var viewAntialiasing = { propertyName: "antialiasing", modelName: "@Antialiasing", displayName: "Antialiasing", localizationId: "DevExpress.XtraCharts.SwiftPlotSeriesView.Antialiasing", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var swiftPlotSeriesViewinfo = [lineStyle2, viewAntialiasing, Internal.axisXName, Internal.axisYName, Internal.paneName, viewAggregateFunction, color1, Internal.tag,];
                var holeRadiusPercent1 = { propertyName: "holeRadiusPercent", modelName: "@HoleRadiusPercent", displayName: "Hole Radius Percent", localizationId: "DevExpress.XtraCharts.Funnel3DSeriesView.HoleRadiusPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 90, editorOptions: { min: 0, max: 100 } };
                var heightToWidthRatio1 = { propertyName: "heightToWidthRatio", modelName: "@HeightToWidthRatio", displayName: "Height to Width Ratio", localizationId: "DevExpress.XtraCharts.FunnelSeriesViewBase.HeightToWidthRatio", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1 };
                var pointDistance = { propertyName: "pointDistance", modelName: "@PointDistance", displayName: "Point Distance", localizationId: "DevExpress.XtraCharts.FunnelSeriesViewBase.PointDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0, editorOptions: { min: 0 } };
                var funnel3DSeriesViewinfo = [holeRadiusPercent1, heightToWidthRatio1, pointDistance, Internal.tag,];
                var border5 = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.FunnelSeriesView.Border", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: borderInfo, };
                var fillStyle6 = { propertyName: "fillStyle", modelName: "FillStyle", displayName: "Fill Style", localizationId: "DevExpress.XtraCharts.FunnelSeriesView.FillStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, from: Series.FillStyle.from(fillStyleInfo, "PolygonGradientFillOptions"), toJsonObject: Series.FillStyle.toJson };
                var alignToCenter = { propertyName: "alignToCenter", modelName: "@AlignToCenter", displayName: "Align to Center", localizationId: "DevExpress.XtraCharts.FunnelSeriesView.AlignToCenter", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var heightToWidthRatioAuto = { propertyName: "heightToWidthRatioAuto", modelName: "@HeightToWidthRatioAuto", displayName: "Height to Width Ratio Auto", localizationId: "DevExpress.XtraCharts.FunnelSeriesView.HeightToWidthRatioAuto", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var funnelSeriesViewinfo = [border5, fillStyle6, alignToCenter, heightToWidthRatioAuto, heightToWidthRatio1, pointDistance, Internal.tag,];
                var scatterLineSeriesViewinfo = [viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var bubbleMarkerOptionsInfo = [kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, Internal.tag,];
                var bubbleMarkerOptions = { propertyName: "bubbleMarkerOptions", modelName: "BubbleMarkerOptions", displayName: "Bubble Marker Options", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.BubbleMarkerOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: bubbleMarkerOptionsInfo, };
                var autoSize = { propertyName: "autoSize", modelName: "@AutoSize", displayName: "Automatic Size", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.AutoSize", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var maxSize = { propertyName: "maxSize", modelName: "@MaxSize", displayName: "Max Size", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.MaxSize", editor: Internal.editorTemplates.maxSize, defaultVal: 0.9 };
                var minSize = { propertyName: "minSize", modelName: "@MinSize", displayName: "Min Size", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.MinSize", editor: Internal.editorTemplates.minSize, defaultVal: 0.3, editorOptions: { min: 0 } };
                var transparency6 = { propertyName: "transparency", modelName: "@Transparency", displayName: "Transparency", localizationId: "DevExpress.XtraCharts.BubbleSeriesView.Transparency", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var bubbleSeriesViewinfo = [bubbleMarkerOptions, autoSize, maxSize, minSize, transparency6, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var lineTensionPercent = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.Spline3DSeriesView.LineTensionPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
                var spline3DSeriesViewinfo = [lineTensionPercent, lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Internal.tag,];
                var lineTensionPercent1 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.SplineArea3DSeriesView.LineTensionPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
                var splineArea3DSeriesViewinfo = [lineTensionPercent1, areaWidth, aggregateFunction2, transparency4, color1, Internal.tag,];
                var lineTensionPercent2 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.FullStackedSplineArea3DSeriesView.LineTensionPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
                var fullStackedSplineArea3DSeriesViewinfo = [lineTensionPercent2, areaWidth, aggregateFunction2, transparency4, color1, Internal.tag,];
                var lineTensionPercent3 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.SplineAreaSeriesView.LineTensionPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
                var splineAreaSeriesViewinfo = [lineTensionPercent3, viewBorder1, viewFillStyle, markerOptions, transparency3, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var lineTensionPercent4 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.FullStackedSplineAreaSeriesView.LineTensionPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
                var fullStackedSplineAreaSeriesViewinfo = [lineTensionPercent4, viewFillStyle, transparency, viewEnableAntialiasing, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var lineTensionPercent5 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.StackedSplineArea3DSeriesView.LineTensionPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
                var stackedSplineArea3DSeriesViewinfo = [lineTensionPercent5, areaWidth, aggregateFunction2, transparency4, color1, Internal.tag,];
                var lineTensionPercent6 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.SplineSeriesView.LineTensionPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
                var splineSeriesViewinfo = [lineTensionPercent6, viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var lineTensionPercent7 = { propertyName: "lineTensionPercent", modelName: "@LineTensionPercent", displayName: "Line Tension Percent", localizationId: "DevExpress.XtraCharts.StackedSplineAreaSeriesView.LineTensionPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 80, editorOptions: { min: 0, max: 100 } };
                var stackedSplineAreaSeriesViewinfo = [lineTensionPercent7, viewBorder1, viewFillStyle, transparency, viewEnableAntialiasing, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var area3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency4, color1, Internal.tag,];
                var fullStackedArea3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency4, color1, Internal.tag,];
                var border6 = { propertyName: "border", modelName: "Border", displayName: "Border", localizationId: "DevExpress.XtraCharts.RadarAreaSeriesView.Border", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: borderInfo, };
                var markerOptions1 = { propertyName: "markerOptions", modelName: "MarkerOptions", displayName: "Marker Options", localizationId: "DevExpress.XtraCharts.RadarAreaSeriesView.MarkerOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: markerOptionsInfo, };
                var polarAreaSeriesViewinfo = [border6, fillStyle2, markerOptions1, transparency1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var radarAreaSeriesViewinfo = [border6, fillStyle2, markerOptions1, transparency1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var stackedArea3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency4, color1, Internal.tag,];
                var fullStackedBar3DSeriesViewinfo = [viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Internal.tag,];
                var barDistance4 = { propertyName: "barDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideBar3DSeriesView.BarDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var barDistanceFixed4 = { propertyName: "barDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideBar3DSeriesView.BarDistanceFixed", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
                var equalBarWidth4 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideBar3DSeriesView.EqualBarWidth", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var sideBySideBar3DSeriesViewinfo = [barDistance4, barDistanceFixed4, equalBarWidth4, viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Internal.tag,];
                var stackedBar3DSeriesViewinfo = [viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Internal.tag,];
                var polarLineSeriesViewinfo = [lineStyle1, closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var radarLineSeriesViewinfo = [lineStyle1, closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var holeRadiusPercent2 = { propertyName: "holeRadiusPercent", modelName: "@HoleRadiusPercent", displayName: "Hole Radius Percent", localizationId: "DevExpress.XtraCharts.Doughnut3DSeriesView.HoleRadiusPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 60, editorOptions: { min: 0, max: 100 } };
                var depth = { propertyName: "depth", modelName: "@Depth", displayName: "Depth", localizationId: "DevExpress.XtraCharts.Pie3DSeriesView.Depth", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 15, editorOptions: { min: 1, max: 100 } };
                var sizeAsPercentage = { propertyName: "sizeAsPercentage", modelName: "@SizeAsPercentage", displayName: "Size As Percentage", localizationId: "DevExpress.XtraCharts.Pie3DSeriesView.SizeAsPercentage", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 100, editorOptions: { min: 0, max: 100 } };
                var pieFillStyleInfo = [fillMode1, Internal.fillStyleOptionsSerialize, Internal.tag,];
                var pieFillStyle = { propertyName: "pieFillStyle", modelName: "PieFillStyle", displayName: "Pie Fill Style", localizationId: "DevExpress.XtraCharts.Pie3DSeriesView.PieFillStyle", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: pieFillStyleInfo, };
                var doughnut3DSeriesViewinfo = [holeRadiusPercent2, depth, sizeAsPercentage, pieFillStyle, explodedDistancePercentage, explodeMode, sweepDirection, Internal.tag,];
                var holeRadiusPercent3 = { propertyName: "holeRadiusPercent", modelName: "@HoleRadiusPercent", displayName: "Hole Radius Percent", localizationId: "DevExpress.XtraCharts.DoughnutSeriesView.HoleRadiusPercent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 60, editorOptions: { min: 0, max: 100 } };
                var doughnutSeriesViewinfo = [holeRadiusPercent3, minAllowedSizePercentage, rotation, heightToWidthRatio, border4, fillStyle5, runtimeExploding, explodedDistancePercentage, explodeMode, sweepDirection, Internal.tag, totalLabel];
                var size2 = { propertyName: "size", modelName: "@Size", displayName: "Size", localizationId: "DevExpress.XtraCharts.SimpleMarker.Size", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 8, editorOptions: { min: 1 } };
                var pointMarkerOptionsInfo = [size2, kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, Internal.tag,];
                var pointMarkerOptions = { propertyName: "pointMarkerOptions", modelName: "PointMarkerOptions", displayName: "Point Marker Options", localizationId: "DevExpress.XtraCharts.RadarPointSeriesView.PointMarkerOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: pointMarkerOptionsInfo, };
                var polarPointSeriesViewinfo = [pointMarkerOptions, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var arrowWidth = { propertyName: "arrowWidth", modelName: "@ArrowWidth", displayName: "Arrow Width", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.ArrowWidth", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 7, editorOptions: { min: 1 }, validationRules: arrowWidthValidationRules };
                var arrowHeight = { propertyName: "arrowHeight", modelName: "@ArrowHeight", displayName: "Arrow Height", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.ArrowHeight", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 5, editorOptions: { min: 1 } };
                var viewMinIndent = { propertyName: "minIndent", modelName: "@MinIndent", displayName: "Min Indent", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.MinIndent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 2, editorOptions: { min: 0 } };
                var thickness3 = { propertyName: "thickness", modelName: "@Thickness", displayName: "Thickness", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.Thickness", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 3, editorOptions: { min: 1 } };
                var visible1 = { propertyName: "visible", modelName: "@Visible", displayName: "Visible", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.Visible", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var colorSource = {
                    propertyName: "colorSource", modelName: "@ColorSource", displayName: "Color Source", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.ColorSource", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "ParentColor", displayValue: "ParentColor" }, { value: "ParentBorderColor", displayValue: "ParentBorderColor" }, { value: "ChildColor", displayValue: "ChildColor" }, { value: "ChildBorderColor", displayValue: "ChildBorderColor" }, { value: "OwnColor", displayValue: "OwnColor" }], defaultVal: "ParentColor"
                };
                var color4 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: Internal.editorTemplates.undoCustomColorEditor, defaultVal: "transparent" };
                var inFront = { propertyName: "inFront", modelName: "@InFront", displayName: "In Front", localizationId: "DevExpress.XtraCharts.TaskLinkOptions.InFront", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var linkOptionsInfo = [arrowWidth, arrowHeight, viewMinIndent, thickness3, visible1, colorSource, color4, inFront, Internal.tag,];
                var linkOptions = { propertyName: "linkOptions", modelName: "LinkOptions", displayName: "Link Options", localizationId: "DevExpress.XtraCharts.GanttSeriesView.LinkOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: linkOptionsInfo, };
                var minValueMarkerInfo = [viewColor2, size1, kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, Internal.tag,];
                var minValueMarker = { propertyName: "minValueMarker", modelName: "MinValueMarker", displayName: "Min Value Marker", localizationId: "DevExpress.XtraCharts.RangeBarSeriesView.MinValueMarker", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: minValueMarkerInfo, };
                var maxValueMarkerInfo = [viewColor2, size1, kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, Internal.tag,];
                var maxValueMarker = { propertyName: "maxValueMarker", modelName: "MaxValueMarker", displayName: "Max Value Marker", localizationId: "DevExpress.XtraCharts.RangeBarSeriesView.MaxValueMarker", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: maxValueMarkerInfo, };
                var minValueMarkerVisibility = {
                    propertyName: "minValueMarkerVisibility", modelName: "@MinValueMarkerVisibility", displayName: "Min Value Marker Visibility", localizationId: "DevExpress.XtraCharts.RangeBarSeriesView.MinValueMarkerVisibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var maxValueMarkerVisibility = {
                    propertyName: "maxValueMarkerVisibility", modelName: "@MaxValueMarkerVisibility", displayName: "Max Value Marker Visibility", localizationId: "DevExpress.XtraCharts.RangeBarSeriesView.MaxValueMarkerVisibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "True", displayValue: "True", localizationId: 'StringId.DefaultBooleanTrue' }, { value: "False", displayValue: "False", localizationId: 'StringId.DefaultBooleanFalse' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: "Default"
                };
                var overlappedGanttSeriesViewinfo = [linkOptions, minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var radarPointSeriesViewinfo = [pointMarkerOptions, aggregateFunction1, shadow1, viewColorEach, color1, Internal.tag,];
                var barDistance5 = { propertyName: "barDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideGanttSeriesView.BarDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var barDistanceFixed5 = { propertyName: "barDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideGanttSeriesView.BarDistanceFixed", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
                var equalBarWidth5 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideGanttSeriesView.EqualBarWidth", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var sideBySideGanttSeriesViewinfo = [barDistance5, barDistanceFixed5, equalBarWidth5, linkOptions, minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var areaSeriesViewinfo = [viewBorder1, viewFillStyle, markerOptions, transparency3, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var fillMode2 = {
                    propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode", localizationId: "DevExpress.XtraCharts.CandleStickReductionOptions.FillMode", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "FilledOnReduction", displayValue: "FilledOnReduction" }, { value: "FilledOnIncrease", displayValue: "FilledOnIncrease" }, { value: "AlwaysEmpty", displayValue: "AlwaysEmpty" }, { value: "AlwaysFilled", displayValue: "AlwaysFilled" }], defaultVal: "FilledOnReduction"
                };
                var color5 = { propertyName: "color", modelName: "@Color", displayName: "Color", localizationId: "DevExpress.XtraCharts.ReductionStockOptions.Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, defaultVal: "255,255,0,0" };
                var level = {
                    propertyName: "level", modelName: "@Level", displayName: "Level", localizationId: "DevExpress.XtraCharts.ReductionStockOptions.Level", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Low", displayValue: "Low", localizationId: 'DevExpress.XtraCharts.StockLevel.Low' }, { value: "High", displayValue: "High", localizationId: 'DevExpress.XtraCharts.StockLevel.High' }, { value: "Open", displayValue: "Open", localizationId: 'DevExpress.XtraCharts.StockLevel.Open' }, { value: "Close", displayValue: "Close", localizationId: 'DevExpress.XtraCharts.StockLevel.Close' }], defaultVal: "Close"
                };
                var visible2 = { propertyName: "visible", modelName: "@Visible", displayName: "Visible", localizationId: "DevExpress.XtraCharts.ReductionStockOptions.Visible", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var colorMode = {
                    propertyName: "colorMode", modelName: "@ColorMode", displayName: "Color Mode", localizationId: "DevExpress.XtraCharts.ReductionStockOptions.ColorMode", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "PreviousToCurrentPoint", displayValue: "PreviousToCurrentPoint" }, { value: "OpenToCloseValue", displayValue: "OpenToCloseValue" }], defaultVal: "PreviousToCurrentPoint"
                };
                var reductionOptionsInfo = [fillMode2, color5, level, visible2, colorMode, Internal.tag,];
                var reductionOptions = { propertyName: "reductionOptions", modelName: "ReductionOptions", displayName: "Reduction Options", localizationId: "DevExpress.XtraCharts.CandleStickSeriesView.ReductionOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: reductionOptionsInfo, };
                var levelLineLength = { propertyName: "levelLineLength", modelName: "@LevelLineLength", displayName: "Level Line Length", localizationId: "DevExpress.XtraCharts.FinancialSeriesViewBase.LevelLineLength", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0.25, editorOptions: { min: 1 } };
                var lineThickness1 = { propertyName: "lineThickness", modelName: "@LineThickness", displayName: "Line Thickness", localizationId: "DevExpress.XtraCharts.FinancialSeriesViewBase.LineThickness", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 2, editorOptions: { min: 1 } };
                var reductionOptionsInfo1 = [color5, level, visible2, colorMode, Internal.tag,];
                var reductionOptions1 = { propertyName: "reductionOptions", modelName: "ReductionOptions", displayName: "Reduction Options", localizationId: "DevExpress.XtraCharts.FinancialSeriesViewBase.ReductionOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: reductionOptionsInfo1, };
                var candleStickSeriesViewinfo = [reductionOptions, levelLineLength, lineThickness1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var fullStackedAreaSeriesViewinfo = [viewFillStyle, transparency, viewEnableAntialiasing, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var fullStackedBarSeriesViewinfo = [barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var line3DSeriesViewinfo = [lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Internal.tag,];
                var lineSeriesViewinfo = [viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var manhattanBarSeriesViewinfo = [viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, Internal.tag,];
                var overlappedRangeBarSeriesViewinfo = [minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var pie3DSeriesViewinfo = [depth, sizeAsPercentage, pieFillStyle, explodedDistancePercentage, explodeMode, sweepDirection, Internal.tag,];
                var pieSeriesViewinfo = [minAllowedSizePercentage, rotation, heightToWidthRatio, border4, fillStyle5, runtimeExploding, explodedDistancePercentage, explodeMode, sweepDirection, Internal.tag, totalLabel];
                var pointMarkerOptions1 = { propertyName: "pointMarkerOptions", modelName: "PointMarkerOptions", displayName: "Point Marker Options", localizationId: "DevExpress.XtraCharts.PointSeriesView.PointMarkerOptions", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: pointMarkerOptionsInfo, };
                var pointSeriesViewinfo = [pointMarkerOptions1, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var barDistance6 = { propertyName: "barDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideBarSeriesView.BarDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var barDistanceFixed6 = { propertyName: "barDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideBarSeriesView.BarDistanceFixed", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
                var equalBarWidth6 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideBarSeriesView.EqualBarWidth", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var sideBySideBarSeriesViewinfo = [barDistance6, barDistanceFixed6, equalBarWidth6, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var barDistance7 = { propertyName: "barDistance", displayName: "Bar Distance", localizationId: "DevExpress.XtraCharts.SideBySideRangeBarSeriesView.BarDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0 };
                var barDistanceFixed7 = { propertyName: "barDistanceFixed", displayName: "Bar Distance Fixed", localizationId: "DevExpress.XtraCharts.SideBySideRangeBarSeriesView.BarDistanceFixed", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, editorOptions: { format: "#0" } };
                var equalBarWidth7 = { propertyName: "equalBarWidth", modelName: "@EqualBarWidth", displayName: "Equal Bar Width", localizationId: "DevExpress.XtraCharts.SideBySideRangeBarSeriesView.EqualBarWidth", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true };
                var sideBySideRangeBarSeriesViewinfo = [barDistance7, barDistanceFixed7, equalBarWidth7, minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var stackedAreaSeriesViewinfo = [viewBorder1, viewFillStyle, transparency, viewEnableAntialiasing, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var stackedBarSeriesViewinfo = [barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var invertedStep4 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StepLineSeriesView.InvertedStep", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var stepLineSeriesViewinfo = [invertedStep4, viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var showOpenClose = {
                    propertyName: "showOpenClose", modelName: "@ShowOpenClose", displayName: "Show Open Close", localizationId: "DevExpress.XtraCharts.StockSeriesView.ShowOpenClose", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Both", displayValue: "Both", localizationId: 'DevExpress.XtraCharts.ErrorBarDirection.Both' }, { value: "Open", displayValue: "Open", localizationId: 'DevExpress.XtraCharts.StockLevel.Open' }, { value: "Close", displayValue: "Close", localizationId: 'DevExpress.XtraCharts.StockLevel.Close' }], defaultVal: "Both"
                };
                var stockSeriesViewinfo = [showOpenClose, levelLineLength, lineThickness1, reductionOptions1, shadow, Internal.paneName, Internal.axisXName, Internal.axisYName, viewAggregateFunction, color1, Internal.tag,];
                var invertedStep5 = { propertyName: "invertedStep", modelName: "@InvertedStep", displayName: "Inverted Step", localizationId: "DevExpress.XtraCharts.StepLine3DSeriesView.InvertedStep", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false };
                var stepLine3DSeriesViewinfo = [invertedStep5, lineThickness, lineWidth, aggregateFunction2, transparency2, color1, Internal.tag,];
                Internal.viewMapper = {
                    FullStackedStepAreaSeriesView: fullStackedStepAreaSeriesViewinfo,
                    PolarRangeAreaSeriesView: polarRangeAreaSeriesViewinfo,
                    RadarRangeAreaSeriesView: radarRangeAreaSeriesViewinfo,
                    RangeArea3DSeriesView: rangeArea3DSeriesViewinfo,
                    RangeAreaSeriesView: rangeAreaSeriesViewinfo,
                    StackedStepAreaSeriesView: stackedStepAreaSeriesViewinfo,
                    StepArea3DSeriesView: stepArea3DSeriesViewinfo,
                    StepAreaSeriesView: stepAreaSeriesViewinfo,
                    SideBySideFullStackedBar3DSeriesView: sideBySideFullStackedBar3DSeriesViewinfo,
                    SideBySideFullStackedBarSeriesView: sideBySideFullStackedBarSeriesViewinfo,
                    SideBySideStackedBar3DSeriesView: sideBySideStackedBar3DSeriesViewinfo,
                    SideBySideStackedBarSeriesView: sideBySideStackedBarSeriesViewinfo,
                    FullStackedLine3DSeriesView: fullStackedLine3DSeriesViewinfo,
                    FullStackedLineSeriesView: fullStackedLineSeriesViewinfo,
                    ScatterPolarLineSeriesView: scatterPolarLineSeriesViewinfo,
                    ScatterRadarLineSeriesView: scatterRadarLineSeriesViewinfo,
                    StackedLine3DSeriesView: stackedLine3DSeriesViewinfo,
                    StackedLineSeriesView: stackedLineSeriesViewinfo,
                    NestedDoughnutSeriesView: nestedDoughnutSeriesViewinfo,
                    SwiftPlotSeriesView: swiftPlotSeriesViewinfo,
                    Funnel3DSeriesView: funnel3DSeriesViewinfo,
                    FunnelSeriesView: funnelSeriesViewinfo,
                    ScatterLineSeriesView: scatterLineSeriesViewinfo,
                    BubbleSeriesView: bubbleSeriesViewinfo,
                    Spline3DSeriesView: spline3DSeriesViewinfo,
                    SplineArea3DSeriesView: splineArea3DSeriesViewinfo,
                    FullStackedSplineArea3DSeriesView: fullStackedSplineArea3DSeriesViewinfo,
                    SplineAreaSeriesView: splineAreaSeriesViewinfo,
                    FullStackedSplineAreaSeriesView: fullStackedSplineAreaSeriesViewinfo,
                    StackedSplineArea3DSeriesView: stackedSplineArea3DSeriesViewinfo,
                    SplineSeriesView: splineSeriesViewinfo,
                    StackedSplineAreaSeriesView: stackedSplineAreaSeriesViewinfo,
                    Area3DSeriesView: area3DSeriesViewinfo,
                    FullStackedArea3DSeriesView: fullStackedArea3DSeriesViewinfo,
                    PolarAreaSeriesView: polarAreaSeriesViewinfo,
                    RadarAreaSeriesView: radarAreaSeriesViewinfo,
                    StackedArea3DSeriesView: stackedArea3DSeriesViewinfo,
                    FullStackedBar3DSeriesView: fullStackedBar3DSeriesViewinfo,
                    SideBySideBar3DSeriesView: sideBySideBar3DSeriesViewinfo,
                    StackedBar3DSeriesView: stackedBar3DSeriesViewinfo,
                    PolarLineSeriesView: polarLineSeriesViewinfo,
                    RadarLineSeriesView: radarLineSeriesViewinfo,
                    Doughnut3DSeriesView: doughnut3DSeriesViewinfo,
                    DoughnutSeriesView: doughnutSeriesViewinfo,
                    PolarPointSeriesView: polarPointSeriesViewinfo,
                    OverlappedGanttSeriesView: overlappedGanttSeriesViewinfo,
                    RadarPointSeriesView: radarPointSeriesViewinfo,
                    SideBySideGanttSeriesView: sideBySideGanttSeriesViewinfo,
                    AreaSeriesView: areaSeriesViewinfo,
                    CandleStickSeriesView: candleStickSeriesViewinfo,
                    FullStackedAreaSeriesView: fullStackedAreaSeriesViewinfo,
                    FullStackedBarSeriesView: fullStackedBarSeriesViewinfo,
                    Line3DSeriesView: line3DSeriesViewinfo,
                    LineSeriesView: lineSeriesViewinfo,
                    ManhattanBarSeriesView: manhattanBarSeriesViewinfo,
                    OverlappedRangeBarSeriesView: overlappedRangeBarSeriesViewinfo,
                    Pie3DSeriesView: pie3DSeriesViewinfo,
                    PieSeriesView: pieSeriesViewinfo,
                    PointSeriesView: pointSeriesViewinfo,
                    SideBySideBarSeriesView: sideBySideBarSeriesViewinfo,
                    SideBySideRangeBarSeriesView: sideBySideRangeBarSeriesViewinfo,
                    StackedAreaSeriesView: stackedAreaSeriesViewinfo,
                    StackedBarSeriesView: stackedBarSeriesViewinfo,
                    StepLineSeriesView: stepLineSeriesViewinfo,
                    StockSeriesView: stockSeriesViewinfo,
                    StepLine3DSeriesView: stepLine3DSeriesViewinfo,
                };
                var DataMembers;
                (function (DataMembers) {
                    var DataMemberBase = (function (_super) {
                        __extends(DataMemberBase, _super);
                        function DataMemberBase(value, valueScaleType) {
                            var _this = _super.call(this) || this;
                            _this._separator = ';';
                            _this._assignValueDataMembers(_this, value);
                            if (valueScaleType) {
                                _this.valueScaleType = valueScaleType;
                                _this._disposables.push(_this.valueScaleType.subscribe(function (newVal) {
                                    _this._assignValueDataMembers(_this, "");
                                }));
                            }
                            return _this;
                        }
                        DataMemberBase.prototype._assignValueDataMembers = function (valueDataMember, value) {
                            var values = (value || "").split(this._separator);
                            valueDataMember.arrayValueDataMemberNames.forEach(function (name, index) {
                                if (valueDataMember[name])
                                    valueDataMember[name](values[index] || "");
                                else
                                    valueDataMember[name] = ko.observable(values[index] || "");
                            });
                        };
                        DataMemberBase.prototype._valueDataMembersToString = function (valueDataMember) {
                            var result = [];
                            valueDataMember.arrayValueDataMemberNames.forEach(function (name) {
                                result.push(valueDataMember[name]() || "");
                            });
                            return result.join(this._separator);
                        };
                        DataMemberBase.prototype.toString = function () {
                            var _this = this;
                            var shouldSerialize = false;
                            this.arrayValueDataMemberNames.forEach(function (name) {
                                shouldSerialize = shouldSerialize || _this[name]();
                            });
                            return shouldSerialize ? this._valueDataMembersToString(this) : null;
                        };
                        return DataMemberBase;
                    }(DevExpress.Analytics.Utils.Disposable));
                    DataMembers.DataMemberBase = DataMemberBase;
                    var CommonValueDataMembers = (function (_super) {
                        __extends(CommonValueDataMembers, _super);
                        function CommonValueDataMembers() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        CommonValueDataMembers.from = function (value) {
                            return new CommonValueDataMembers(value, null);
                        };
                        CommonValueDataMembers.toJson = function (value) {
                            return value.toString() || {};
                        };
                        CommonValueDataMembers.prototype.getInfo = function () {
                            return commonValueSerializationsInfo;
                        };
                        Object.defineProperty(CommonValueDataMembers.prototype, "arrayValueDataMemberNames", {
                            get: function () { return ["value"]; },
                            enumerable: true,
                            configurable: true
                        });
                        return CommonValueDataMembers;
                    }(DataMemberBase));
                    DataMembers.CommonValueDataMembers = CommonValueDataMembers;
                    var commonValueSerializationsInfo = [
                        { propertyName: "value", displayName: "Value", editor: Internal.editorTemplates.valueDataMember, localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' },
                    ];
                    var StockValueDataMembers = (function (_super) {
                        __extends(StockValueDataMembers, _super);
                        function StockValueDataMembers() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        StockValueDataMembers.prototype.getInfo = function () {
                            return stockValueSerializationsInfo;
                        };
                        Object.defineProperty(StockValueDataMembers.prototype, "arrayValueDataMemberNames", {
                            get: function () { return ["low", "high", "open", "close"]; },
                            enumerable: true,
                            configurable: true
                        });
                        return StockValueDataMembers;
                    }(DataMemberBase));
                    DataMembers.StockValueDataMembers = StockValueDataMembers;
                    var stockValueSerializationsInfo = [
                        { propertyName: "low", displayName: "Low", editor: Internal.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.StockLevel.Low' },
                        { propertyName: "high", displayName: "High", editor: Internal.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.StockLevel.High' },
                        { propertyName: "open", displayName: "Open", editor: Internal.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.StockLevel.Open' },
                        { propertyName: "close", displayName: "Close", editor: Internal.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.StockLevel.Close' },
                    ];
                    var Value1Value2DataMembers = (function (_super) {
                        __extends(Value1Value2DataMembers, _super);
                        function Value1Value2DataMembers() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        Value1Value2DataMembers.prototype.getInfo = function () {
                            return value1Value2SerializationsInfo;
                        };
                        Object.defineProperty(Value1Value2DataMembers.prototype, "arrayValueDataMemberNames", {
                            get: function () { return ["value1", "value2"]; },
                            enumerable: true,
                            configurable: true
                        });
                        return Value1Value2DataMembers;
                    }(DataMemberBase));
                    DataMembers.Value1Value2DataMembers = Value1Value2DataMembers;
                    var value1Value2SerializationsInfo = [
                        { propertyName: "value1", displayName: "Value 1", editor: Internal.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.ValueLevel.Value_1' },
                        { propertyName: "value2", displayName: "Value 2", editor: Internal.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.ValueLevel.Value_2' },
                    ];
                    var ValueWeightDataMembers = (function (_super) {
                        __extends(ValueWeightDataMembers, _super);
                        function ValueWeightDataMembers() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        ValueWeightDataMembers.prototype.getInfo = function () {
                            return valueWeightSerializationsInfo;
                        };
                        Object.defineProperty(ValueWeightDataMembers.prototype, "arrayValueDataMemberNames", {
                            get: function () { return ["value", "weight"]; },
                            enumerable: true,
                            configurable: true
                        });
                        return ValueWeightDataMembers;
                    }(DataMemberBase));
                    DataMembers.ValueWeightDataMembers = ValueWeightDataMembers;
                    var valueWeightSerializationsInfo = [
                        { propertyName: "value", displayName: "Value", editor: Internal.editorTemplates.valueDataMember, localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' },
                        { propertyName: "weight", displayName: "Weight", editor: Internal.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraPivotGrid.PivotKPIType.Weight' },
                    ];
                })(DataMembers = Internal.DataMembers || (Internal.DataMembers = {}));
                (function (Series) {
                    var ScaleType;
                    (function (ScaleType) {
                        ScaleType[ScaleType["Qualitative"] = 0] = "Qualitative";
                        ScaleType[ScaleType["Numerical"] = 1] = "Numerical";
                        ScaleType[ScaleType["DateTime"] = 2] = "DateTime";
                        ScaleType[ScaleType["Auto"] = 3] = "Auto";
                    })(ScaleType = Series.ScaleType || (Series.ScaleType = {}));
                    Series.ScaleTypeMap = {
                        "Qualitative": ScaleType.Qualitative,
                        "Numerical": ScaleType.Numerical,
                        "DateTime": ScaleType.DateTime,
                        "Auto": ScaleType.Auto
                    };
                    function _fixSeriesTemplateModel(model) {
                        delete model["@SeriesDataMember"];
                        return model;
                    }
                    var SeriesTemplateViewModel = (function (_super) {
                        __extends(SeriesTemplateViewModel, _super);
                        function SeriesTemplateViewModel(model, serializer, info) {
                            var _this = _super.call(this, _fixSeriesTemplateModel(model), serializer, info) || this;
                            _this._actualArgumentScaleType = ko.observable(ScaleType.Numerical);
                            if (_this.valueDataMembers) {
                                ko.unwrap(_this.valueDataMembers).dispose();
                            }
                            _this.viewType = ko.observable(_this.view().typeName);
                            _this.viewType.subscribe(function (newType) {
                                var newSerializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                                _this.view(SeriesViewViewModel.from({ "@TypeNameSerializable": newType }, newSerializer)());
                            });
                            _this._disposables.push(_this.view.subscribe(function (newView) {
                                if (_this.viewType() !== newView.typeName) {
                                    _this.viewType(newView.typeName);
                                }
                                _this.updateByView(newView);
                            }));
                            _this.valueDataMembers = ko.observable(new (viewTypesDataMembers[_this.view().typeName] || DataMembers.CommonValueDataMembers)(model["@ValueDataMembersSerializable"] || "", _this.valueScaleType));
                            _this.dataFilters = DevExpress.Analytics.Utils.deserializeArray(model.DataFilters, function (item) { return new Models.DefaultDataFilterModel(item, serializer); });
                            _this._disposables.push(ko.computed(function () {
                                _this.dataFilters().forEach(function (dataFilter) {
                                    if (!dataFilter["getPath"]) {
                                        dataFilter["getPath"] = function (propertyName) {
                                            return _this["getPath"]("argumentDataMember");
                                        };
                                    }
                                });
                            }));
                            _this._disposables.push(_this.argumentScaleType.subscribe(function (newVal) {
                                if (newVal !== "Auto" && newVal !== "Qualitative")
                                    _this.argumentDataMember("");
                                _this._actualArgumentScaleType(newVal == "Auto" ? ScaleType.Numerical : Series.ScaleTypeMap[newVal]);
                            }));
                            _this._disposables.push(_this._actualArgumentScaleType.subscribe(function (newVal) {
                                switch (newVal) {
                                    case ScaleType.DateTime:
                                        _this.qualitativeSummaryOptions.resetAllProperties();
                                        _this.numericSummaryOptions.resetAllProperties();
                                        break;
                                    case ScaleType.Numerical:
                                        _this.qualitativeSummaryOptions.resetAllProperties();
                                        _this.dateTimeSummaryOptions.resetAllProperties();
                                        break;
                                    case ScaleType.Qualitative:
                                        _this.numericSummaryOptions.resetAllProperties();
                                        _this.dateTimeSummaryOptions.resetAllProperties();
                                        break;
                                }
                            }));
                            _this.updateByView(_this.view());
                            [_this.qualitativeSummaryOptions, _this.numericSummaryOptions, _this.dateTimeSummaryOptions].forEach(function (options) {
                                options["getPath"] = function (propertyName) {
                                    return _this["getPath"] && _this["getPath"]("summaryFunction") || "";
                                };
                            });
                            _this.viewBindable = {
                                model: _this.view,
                                type: _this.viewType
                            };
                            return _this;
                        }
                        SeriesTemplateViewModel.from = function (model, serializer) {
                            return new SeriesTemplateViewModel(model || {}, serializer, Internal.seriesTemplateSerializationsInfo);
                        };
                        SeriesTemplateViewModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, Internal.seriesTemplateSerializationsInfo, refs);
                        };
                        SeriesTemplateViewModel.prototype.updateByView = function (view) {
                            if (this.label && this.label.typeNameSerializable) {
                                this.label.typeNameSerializable(mapTypes[view.typeName]);
                            }
                            this.valueDataMembers.peek().dispose();
                            this.valueDataMembers(new (viewTypesDataMembers[view.typeName] || DataMembers.CommonValueDataMembers)(this.valueDataMembers.peek().toString(), this.valueScaleType));
                        };
                        SeriesTemplateViewModel.prototype.isPropertyVisible = function (propertyName) {
                            switch (propertyName) {
                                case "qualitativeSummaryOptions":
                                    return this._actualArgumentScaleType() === ScaleType.Qualitative;
                                case "numericSummaryOptions":
                                    return this._actualArgumentScaleType() === ScaleType.Numerical;
                                case "dateTimeSummaryOptions":
                                    return this._actualArgumentScaleType() === ScaleType.DateTime;
                                default:
                                    return true;
                            }
                        };
                        return SeriesTemplateViewModel;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Series.SeriesTemplateViewModel = SeriesTemplateViewModel;
                    var viewTypesDataMembers = {
                        "BubbleSeriesView": Reporting.Chart.Internal.DataMembers.ValueWeightDataMembers,
                        "OverlappedRangeBarSeriesView": Reporting.Chart.Internal.DataMembers.Value1Value2DataMembers,
                        "SideBySideRangeBarSeriesView": Reporting.Chart.Internal.DataMembers.Value1Value2DataMembers,
                        "RangeAreaSeriesView": Reporting.Chart.Internal.DataMembers.Value1Value2DataMembers,
                        "RangeArea3DSeriesView": Reporting.Chart.Internal.DataMembers.Value1Value2DataMembers,
                        "OverlappedGanttSeriesView": Reporting.Chart.Internal.DataMembers.Value1Value2DataMembers,
                        "SideBySideGanttSeriesView": Reporting.Chart.Internal.DataMembers.Value1Value2DataMembers,
                        "StockSeriesView": Reporting.Chart.Internal.DataMembers.StockValueDataMembers,
                        "CandleStickSeriesView": Reporting.Chart.Internal.DataMembers.StockValueDataMembers
                    };
                    var mapTypes = {
                        "SideBySideBarSeriesView": "SideBySideBarSeriesLabel",
                        "StackedBarSeriesView": "StackedBarSeriesLabel",
                        "FullStackedBarSeriesView": "FullStackedBarSeriesLabel",
                        "SideBySideStackedBarSeriesView": "StackedBarSeriesLabel",
                        "SideBySideFullStackedBarSeriesView": "FullStackedBarSeriesLabel",
                        "SideBySideBar3DSeriesView": "Bar3DSeriesLabel",
                        "StackedBar3DSeriesView": "StackedBar3DSeriesLabel",
                        "FullStackedBar3DSeriesView": "FullStackedBar3DSeriesLabel",
                        "SideBySideStackedBar3DSeriesView": "StackedBar3DSeriesLabel",
                        "SideBySideFullStackedBar3DSeriesView": "FullStackedBar3DSeriesLabel",
                        "ManhattanBarSeriesView": "Bar3DSeriesLabel",
                        "PointSeriesView": "PointSeriesLabel",
                        "BubbleSeriesView": "BubbleSeriesLabel",
                        "LineSeriesView": "PointSeriesLabel",
                        "StackedLineSeriesView": "StackedLineSeriesLabel",
                        "FullStackedLineSeriesView": "StackedLineSeriesLabel",
                        "StepLineSeriesView": "PointSeriesLabel",
                        "SplineSeriesView": "PointSeriesLabel",
                        "ScatterLineSeriesView": "PointSeriesLabel",
                        "SwiftPlotSeriesView": null,
                        "Line3DSeriesView": "Line3DSeriesLabel",
                        "StackedLine3DSeriesView": "StackedLine3DSeriesLabel",
                        "FullStackedLine3DSeriesView": "StackedLine3DSeriesLabel",
                        "StepLine3DSeriesView": "Line3DSeriesLabel",
                        "Spline3DSeriesView": "Line3DSeriesLabel",
                        "PieSeriesView": "PieSeriesLabel",
                        "DoughnutSeriesView": "DoughnutSeriesLabel",
                        "NestedDoughnutSeriesView": "NestedDoughnutSeriesLabel",
                        "Pie3DSeriesView": "Pie3DSeriesLabel",
                        "Doughnut3DSeriesView": "Doughnut3DSeriesLabel",
                        "FunnelSeriesView": "FunnelSeriesLabel",
                        "Funnel3DSeriesView": "Funnel3DSeriesLabel",
                        "AreaSeriesView": "PointSeriesLabel",
                        "StackedAreaSeriesView": "PointSeriesLabel",
                        "FullStackedAreaSeriesView": "FullStackedAreaSeriesLabel",
                        "StepAreaSeriesView": "PointSeriesLabel",
                        "SplineAreaSeriesView": "PointSeriesLabel",
                        "StackedSplineAreaSeriesView": "PointSeriesLabel",
                        "FullStackedSplineAreaSeriesView": "FullStackedSplineAreaSeriesLabel",
                        "Area3DSeriesView": "Area3DSeriesLabel",
                        "StackedArea3DSeriesView": "StackedArea3DSeriesLabel",
                        "FullStackedArea3DSeriesView": "FullStackedArea3DSeriesLabel",
                        "StepArea3DSeriesView": "Area3DSeriesLabel",
                        "SplineArea3DSeriesView": "Area3DSeriesLabel",
                        "StackedSplineArea3DSeriesView": "StackedArea3DSeriesLabel",
                        "FullStackedSplineArea3DSeriesView": "FullStackedArea3DSeriesLabel",
                        "OverlappedRangeBarSeriesView": "RangeBarSeriesLabel",
                        "SideBySideRangeBarSeriesView": "RangeBarSeriesLabel",
                        "RangeAreaSeriesView": "RangeAreaSeriesLabel",
                        "RangeArea3DSeriesView": "RangeArea3DSeriesLabel",
                        "RadarPointSeriesView": "RadarPointSeriesLabel",
                        "RadarLineSeriesView": "RadarPointSeriesLabel",
                        "RadarAreaSeriesView": "RadarPointSeriesLabel",
                        "PolarPointSeriesView": "RadarPointSeriesLabel",
                        "PolarLineSeriesView": "RadarPointSeriesLabel",
                        "PolarAreaSeriesView": "RadarPointSeriesLabel",
                        "StockSeriesView": "StockSeriesLabel",
                        "CandleStickSeriesView": "StockSeriesLabel",
                        "OverlappedGanttSeriesView": "RangeBarSeriesLabel",
                        "SideBySideGanttSeriesView": "RangeBarSeriesLabel"
                    };
                    var SeriesLabelViewModel = (function (_super) {
                        __extends(SeriesLabelViewModel, _super);
                        function SeriesLabelViewModel(model, serializer) {
                            return _super.call(this, model, serializer, Internal.seriesLabelSerializationsInfo) || this;
                        }
                        SeriesLabelViewModel.from = function (model, serializer) {
                            return new SeriesLabelViewModel(model || {}, serializer);
                        };
                        SeriesLabelViewModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, Internal.seriesLabelSerializationsInfo, refs);
                        };
                        return SeriesLabelViewModel;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Series.SeriesLabelViewModel = SeriesLabelViewModel;
                    var SeriesPointModel = (function (_super) {
                        __extends(SeriesPointModel, _super);
                        function SeriesPointModel(model, series, serializer) {
                            var _this = _super.call(this, model, serializer, Internal.seriesPointSerializationsInfo) || this;
                            _this.series = series;
                            _this.arrayValueDataMemberNames = series.valueDataMembers().arrayValueDataMemberNames;
                            _this._assignValueDataMembers(_this, _this.valuesSerializable(), null);
                            _this._disposables.push(_this.series.valueDataMembers.subscribe(function (newValue) { _this.arrayValueDataMemberNames = newValue.arrayValueDataMemberNames; }));
                            _this._disposables.push(_this.series.valueScaleType.subscribe(function (newValue) {
                                _this._assignValueDataMembers(_this, null, null);
                            }));
                            _this.valuesSerializable = ko.computed(function () {
                                return _this.arrayValueDataMemberNames.map(function (name) { return _this[name]; });
                            });
                            _this.getInfo = function () {
                                var dataMember = _this.series && _this.series.valueDataMembers();
                                if (!dataMember)
                                    return Internal.seriesPointSerializationsInfo;
                                var valueDataMemberInfo = dataMember.getInfo().map(function (info) { return $.extend({}, info, { editor: _this.isDateType ? DevExpress.Analytics.Widgets.editorTemplates.date : DevExpress.Analytics.Widgets.editorTemplates.numeric }); });
                                return Internal.seriesPointSerializationsInfo.concat(valueDataMemberInfo);
                            };
                            return _this;
                        }
                        SeriesPointModel.getSerializationValue = function (array, dateConverter) {
                            return array.map(function (item) {
                                var value = ko.unwrap(item);
                                return (value instanceof Date) ? dateConverter(value) : value;
                            });
                        };
                        SeriesPointModel.createNew = function (series) {
                            return new SeriesPointModel({}, series, new DevExpress.Analytics.Utils.ModelSerializer());
                        };
                        SeriesPointModel.valueToJsonObject = function (value) {
                            var result = SeriesPointModel.getSerializationValue(value, serializeDate);
                            return (result instanceof Array) ? result.join(SeriesPointModel.separator) : result;
                        };
                        SeriesPointModel.prototype._valueDataMembersToString = function (valueDataMember, isDateType) {
                            var result = [];
                            valueDataMember.arrayValueDataMemberNames.forEach(function (name) {
                                if (isDateType)
                                    result.push(serializeDate(valueDataMember[name]() || ""));
                                result.push(valueDataMember[name]() || "");
                            });
                            return result.join(SeriesPointModel.separator);
                        };
                        SeriesPointModel.prototype._assignValueDataMembers = function (valueDataMember, value, defaultValue) {
                            var _this = this;
                            var values = (value || "").split(SeriesPointModel.separator);
                            valueDataMember.arrayValueDataMemberNames.forEach(function (name, index) {
                                var newValue = _this.isDateType ? parseDate(values[index] || defaultValue) : (values[index] || defaultValue);
                                if (valueDataMember[name])
                                    valueDataMember[name](newValue);
                                else
                                    valueDataMember[name] = ko.observable(newValue);
                            });
                        };
                        Object.defineProperty(SeriesPointModel.prototype, "isDateType", {
                            get: function () {
                                return this.series.valueScaleType() === "DateTime";
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SeriesPointModel.separator = ';';
                        return SeriesPointModel;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Series.SeriesPointModel = SeriesPointModel;
                    var SeriesViewViewModel = (function (_super) {
                        __extends(SeriesViewViewModel, _super);
                        function SeriesViewViewModel(model, serializer) {
                            var _this = this;
                            model["@TypeNameSerializable"] = model["@TypeNameSerializable"] || "SideBySideBarSeriesView";
                            _this = _super.call(this, model, serializer) || this;
                            _this._createMarkerDependences();
                            _this._createLinkOptionsDependences();
                            _this["isPropertyDisabled"] = function (propertyName) {
                                return _this._createPropertyDisabledDependence(propertyName, "heightToWidthRatio", _this["heightToWidthRatioAuto"], [true]) ||
                                    _this._createPropertyDisabledDependence(propertyName, "minSize", _this["autoSize"], [true]) ||
                                    _this._createPropertyDisabledDependence(propertyName, "maxSize", _this["autoSize"], [true]) ||
                                    _this._createPropertyDisabledDependence(propertyName, "barDepth", _this["barDepthAuto"], [true]) ||
                                    _this._createPropertyDisabledDependence(propertyName, "showFacet", _this["model"], ["Cone", "Pyramid"]);
                            };
                            return _this;
                        }
                        SeriesViewViewModel.from = function (model, serializer) {
                            return ko.observable(new SeriesViewViewModel(model || {}, serializer));
                        };
                        SeriesViewViewModel.prototype.dispose = function () {
                            this._disposables.forEach(function (x) { return x.dispose(); });
                        };
                        SeriesViewViewModel.toJson = function (value, serializer, refs) {
                            value = ko.unwrap(value);
                            return serializer.serialize(value, value.getInfo(), refs);
                        };
                        SeriesViewViewModel.prototype._getInfo = function (typeName) {
                            return [Internal.typeNameSerializable].concat(Internal.viewMapper[typeName]);
                        };
                        SeriesViewViewModel.prototype._createPropertyDisabledDependence = function (propertyName, depLeftPropertyName, depRightProperty, depValues, reverse) {
                            if (reverse === void 0) { reverse = false; }
                            if (propertyName !== depLeftPropertyName || !depRightProperty)
                                return false;
                            var isDisabled = false;
                            for (var i = 0; i < depValues.length; i++) {
                                if (depRightProperty() === depValues[i]) {
                                    isDisabled = true;
                                    break;
                                }
                            }
                            return reverse ? !isDisabled : isDisabled;
                        };
                        SeriesViewViewModel.prototype._createMarkerDependences = function () {
                            var _this = this;
                            ["minValueMarker", "maxValueMarker", "marker1", "marker2", "markerOptions", "lineMarkerOptions", "bubbleMarkerOptions", "pointMarkerOptions"].forEach(function (propertyName) {
                                if (_this[propertyName]) {
                                    _this[propertyName].isPropertyDisabled = function (innerName) {
                                        return _this._createPropertyDisabledDependence(innerName, "starPointCount", _this[propertyName].kind, ["Star"], true);
                                    };
                                }
                            });
                        };
                        SeriesViewViewModel.prototype._createLinkOptionsDependences = function () {
                            var _this = this;
                            if (!!this["linkOptions"]) {
                                this._disposables.push(this["linkOptions"].color.subscribe(function (newVal) {
                                    _this["linkOptions"].colorSource("OwnColor");
                                }));
                            }
                        };
                        SeriesViewViewModel.prototype.preInitProperties = function (model) {
                            var _this = this;
                            this.getInfo = function () { return _this._getInfo(model["@TypeNameSerializable"]); };
                        };
                        return SeriesViewViewModel;
                    }(DevExpress.Analytics.Elements.SerializableModel));
                    Series.SeriesViewViewModel = SeriesViewViewModel;
                    var SeriesViewModel = (function (_super) {
                        __extends(SeriesViewModel, _super);
                        function SeriesViewModel(model, parent, serializer) {
                            var _this = _super.call(this, model, serializer, Internal.seriesSerializationsInfo) || this;
                            _this.isIncompatible = ko.observable(false);
                            Axis.initCollectionItem(_this, parent)();
                            _this._disposables.push(_this["displayName"] = ko.pureComputed(function () {
                                return _this.isIncompatible() ? DevExpress.Analytics.Utils.getLocalization("(incompatible)", "ChartStringId.IncompatibleSeriesView") + " " + _this["name"]() : _this["name"]();
                            }));
                            _this.points = ko.observableArray([]);
                            _this._disposables.push(_this.points.subscribe(function (newValue) { newValue["owner"] = _this; }));
                            _this.points(DevExpress.Analytics.Utils.deserializeArray(model.Points || [], function (item) { return new SeriesPointModel(item, _this, serializer); })());
                            return _this;
                        }
                        SeriesViewModel.from = function (model, serializer) {
                            return new SeriesViewModel(model || {}, null, serializer);
                        };
                        SeriesViewModel.toJson = function (value, serializer, refs) {
                            return serializer.serialize(value, Internal.seriesSerializationsInfo, refs);
                        };
                        SeriesViewModel.getClassName = function (typeName) {
                            return typeName.toLowerCase().split("seriesview")[0];
                        };
                        SeriesViewModel.prototype.updateByView = function (view) {
                            _super.prototype.updateByView.call(this, view);
                            this.points && this.points([]);
                        };
                        SeriesViewModel.prefix = "Series";
                        return SeriesViewModel;
                    }(SeriesTemplateViewModel));
                    Series.SeriesViewModel = SeriesViewModel;
                })(Series = Internal.Series || (Internal.Series = {}));
                var DiagramViewModel = (function (_super) {
                    __extends(DiagramViewModel, _super);
                    function DiagramViewModel(model, serializer) {
                        return _super.call(this, model, serializer, Internal.diagramSerializationsInfo) || this;
                    }
                    DiagramViewModel.createDiagram = function (model, type, serializer) {
                        if (serializer === void 0) { serializer = new DevExpress.Analytics.Utils.ModelSerializer(); }
                        var info = Internal.diagramMapper[type].info;
                        var newDiagram = {
                            getInfo: function () {
                                return info;
                            }
                        };
                        serializer.deserialize(newDiagram, $.extend(model, { "@TypeNameSerializable": Internal.diagramMapper[type].type }));
                        if (info.filter(function (x) { return x.propertyName === Internal.secondaryAxesX.propertyName; }).length > 0) {
                            var createAxes = function (item, parent) { return new Axis.SecondaryAxisViewModel(item, parent, serializer); };
                            newDiagram.secondaryAxesX = deserializeModelArray(model && model.SecondaryAxesX, createAxes, Axis.SecondaryAxisViewModel.xPrefix);
                            newDiagram.secondaryAxesY = deserializeModelArray(model && model.SecondaryAxesY, createAxes, Axis.SecondaryAxisViewModel.yPrefix);
                        }
                        if (info.filter(function (x) { return x.propertyName === Internal.panes.propertyName; }).length > 0) {
                            newDiagram.panes = deserializeModelArray(model && model.Panes, function (item, parent) { return new Models.AdditionalPaneViewModel(item, parent, serializer); }, Models.AdditionalPaneViewModel.prefix);
                        }
                        return newDiagram;
                    };
                    DiagramViewModel.from = function (model, serializer) {
                        return new DiagramViewModel(model || {}, serializer);
                    };
                    DiagramViewModel.toJson = function (value, serializer, refs) {
                        return serializer.serialize(value, null, refs);
                    };
                    return DiagramViewModel;
                }(DevExpress.Analytics.Elements.SerializableModel));
                Internal.DiagramViewModel = DiagramViewModel;
                var minValue = { propertyName: "minValue", modelName: "@MinValueSerializable", displayName: "Min Value", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.AxisRange.MinValue' }, maxValue = { propertyName: "maxValue", modelName: "@MaxValueSerializable", displayName: "Max Value", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.Range.MaxValue' }, auto = { propertyName: "auto", modelName: "@Auto", displayName: "Auto", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraReports.UI.DocumentExportMode.Auto' }, autoSideMargins = { propertyName: "autoSideMargins", modelName: "@AutoSideMargins", displayName: "Auto Side Margins", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.Range.AutoSideMargins' }, sideMarginsValue = { propertyName: "sideMarginsValue", modelName: "@SideMarginsValue", displayName: "Side Margins Value", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.Range.SideMarginsValue' };
                var visualRangeSerializationsInfo = [auto, autoSideMargins, minValue, maxValue, sideMarginsValue], visualRange = { propertyName: "visualRange", modelName: "VisualRange", displayName: "Visual Range", info: visualRangeSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.VisualRange' };
                var alwaysShowZeroLevel = { propertyName: "alwaysShowZeroLevel", modelName: "@AlwaysShowZeroLevel", displayName: "Always Show Zero Level", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.WholeRange.AlwaysShowZeroLevel' };
                var wholeRangeSerializationsInfo = visualRangeSerializationsInfo.concat(alwaysShowZeroLevel), wholeRange = { propertyName: "wholeRange", modelName: "WholeRange", displayName: "Whole Range", info: wholeRangeSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.WholeRange' };
                var radarWholeRange = { propertyName: "radarWholeRange", modelName: "WholeRange", displayName: "Whole Range", info: visualRangeSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.WholeRange' };
                var dashStyle = {
                    propertyName: "dashStyle", modelName: "@DashStyle", displayName: "Dash Style", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                    valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Dash", displayValue: "Dash", localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' }, { value: "Dot", displayValue: "Dot", localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' }, { value: "DashDot", displayValue: "DashDot" }, { value: "DashDotDot", displayValue: "DashDotDot" }],
                    localizationId: 'DevExpress.XtraCharts.LineStyle.DashStyle'
                };
                var lineStyleSerializationsInfo = [Internal.thickness, dashStyle], lineStyle = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", info: lineStyleSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRShape.LineStyle' }, minorLineStyle = { propertyName: "minorLineStyle", modelName: "MinorLineStyle", displayName: "Minor Line Style", info: lineStyleSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.GridLines.MinorLineStyle' };
                var scaleMode = {
                    propertyName: "scaleName", modelName: "@ScaleMode", displayName: "Scale Mode", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                    valuesArray: [{ value: "Automatic", displayValue: "Automatic", localizationId: 'DevExpress.XtraCharts.ScaleMode.Automatic' }, { value: "Manual", displayValue: "Manual", localizationId: 'DevExpress.XtraCharts.ChartRangeControlClientSnapMode.Manual' }, { value: "Continuous", displayValue: "Continuous", localizationId: 'DevExpress.XtraCharts.ScaleMode.Continuous' }],
                    localizationId: 'DevExpress.XtraCharts.ScaleOptionsBase.ScaleMode'
                }, aggregateFunction = {
                    propertyName: "aggregateFunction", modelName: "@AggregateFunction", displayName: "Aggregate Function",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Average", displayValue: "Average", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: "Sum", displayValue: "Sum", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: "Minimum", displayValue: "Minimum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: "Maximum", displayValue: "Maximum", localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "Financial", displayValue: "Financial", localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }],
                    localizationId: 'DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.AggregateFunction'
                }, gridSpacing = { propertyName: "gridSpacing", modelName: "@GridSpacing", displayName: "Grid Spacing", localizationId: "DevExpress.XtraCharts.ScaleGridOptionsBase.GridSpacing", defaultVal: 1.0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, autoGrid = { propertyName: "autoGrid", modelName: "@AutoGrid", displayName: "Auto Grid", localizationId: "DevExpress.XtraCharts.ScaleGridOptionsBase.AutoGrid", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true, from: DevExpress.Analytics.Utils.parseBool }, gridOffset = { propertyName: "gridOffset", modelName: "@GridOffset", displayName: "Grid Offset", localizationId: "DevExpress.XtraCharts.ScaleGridOptionsBase.GridOffset", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                var scaleOptionsBaseSerializationsInfo = [autoGrid, aggregateFunction, gridOffset, gridSpacing, scaleMode];
                var numericMeasureUnit = {
                    propertyName: "measureUnit", modelName: "@MeasureUnit", displayName: "Measure Unit",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Ones", displayValue: "Ones", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Ones' }, { value: "Tens", displayValue: "Tens", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Tens' }, { value: "Hundreds", displayValue: "Hundreds", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Hundreds' }, { value: "Thousands", displayValue: "Thousands", localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Thousands' }, { value: "Millions", displayValue: "Millions", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Millions' }, { value: "Billions", displayValue: "Billions", localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Billions' }, { value: "Custom", displayValue: "Custom", localizationId: 'DevExpress.XtraReports.UI.SortingSummaryFunction.Custom' }],
                    localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions.MeasureUnit'
                }, numericGridAlignment = {
                    propertyName: "gridAlignment", modelName: "@GridAlignment", displayName: "Grid Alignment",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Ones", displayValue: "Ones", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Ones' }, { value: "Tens", displayValue: "Tens", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Tens' }, { value: "Hundreds", displayValue: "Hundreds", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Hundreds' }, { value: "Thousands", displayValue: "Thousands", localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Thousands' }, { value: "Millions", displayValue: "Millions", localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Millions' }, { value: "Billions", displayValue: "Billions", localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Billions' }, { value: "Custom", displayValue: "Custom", localizationId: 'DevExpress.XtraReports.UI.SortingSummaryFunction.Custom' }],
                    localizationId: 'DevExpress.XtraCharts.ChartRangeControlClientDateTimeGridOptions.GridAlignment'
                }, customGridAlignment = { propertyName: "customGridAlignment", modelName: "@CustomGridAlignment", defaultVal: null, displayName: "Custom Grid Alignment", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions.CustomGridAlignment' }, customMeasureUnit = { propertyName: "customMeasureUnit", modelName: "@CustomMeasureUnit", defaultVal: null, displayName: "Custom Measure Unit", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions.CustomMeasureUnit' };
                var numericScaleOptionsSerializationsInfo = [numericMeasureUnit, numericGridAlignment, customGridAlignment, customMeasureUnit].concat(scaleOptionsBaseSerializationsInfo), numericScaleOptions = { propertyName: "numericScaleOptions", modelName: "NumericScaleOptions", displayName: "Numeric Scale Options", info: numericScaleOptionsSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions' };
                var radarAxisYNumericScaleOptionsSerializationsInfo = [autoGrid, numericGridAlignment, gridOffset, gridSpacing], radarAxisYNumericScaleOptions = { propertyName: "radarAxisYNumericScaleOptions", modelName: "NumericScaleOptions", displayName: "Numeric Scale Options", info: radarAxisYNumericScaleOptionsSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions' };
                var radarAxisXNumericScaleOptionsSerializationsInfo = radarAxisYNumericScaleOptionsSerializationsInfo.concat(scaleMode), radarAxisXNumericScaleOptions = { propertyName: "radarAxisXNumericScaleOptions", modelName: "NumericScaleOptions", displayName: "Numeric Scale Options", info: radarAxisXNumericScaleOptionsSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.NumericScaleOptions' };
                var dateMeasureUnit = {
                    propertyName: "measureUnit", modelName: "@MeasureUnit", displayName: "Measure Unit",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Millisecond", displayValue: "Millisecond", localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Millisecond' }, { value: "Second ", displayValue: "Second", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Second' }, { value: "Minute", displayValue: "Minute", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Minute' }, { value: "Hour", displayValue: "Hour", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Hour' }, { value: "Day", displayValue: "Day", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateDay' }, { value: "Week", displayValue: "Week", localizationId: 'DevExpress.XtraCharts.DateTimeGridAlignment.Week' }, { value: "Month", displayValue: "Month", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonth' }, { value: "Quarter", displayValue: "Quarter", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarter' }, { value: "Year", displayValue: "Year", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateYear' }],
                    localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions.MeasureUnit'
                }, dateGridAlignment = {
                    propertyName: "gridAlignment", modelName: "@GridAlignment", displayName: "Grid Alignment",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Millisecond", displayValue: "Millisecond", localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Millisecond' }, { value: "Second ", displayValue: "Second", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Second' }, { value: "Minute", displayValue: "Minute", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Minute' }, { value: "Hour", displayValue: "Hour", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Hour' }, { value: "Day", displayValue: "Day", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateDay' }, { value: "Week", displayValue: "Week", localizationId: 'DevExpress.XtraCharts.DateTimeGridAlignment.Week' }, { value: "Month", displayValue: "Month", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonth' }, { value: "Quarter", displayValue: "Quarter", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarter' }, { value: "Year", displayValue: "Year", localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateYear' }],
                    localizationId: 'DevExpress.XtraCharts.ChartRangeControlClientDateTimeGridOptions.GridAlignment'
                }, workdaysOnly = { propertyName: "workdaysOnly", modelName: "@WorkdaysOnly", displayName: "Workdays Only", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions.WorkdaysOnly' };
                var dateTimeScaleOptionsSerializationsInfo = [dateGridAlignment, dateMeasureUnit, workdaysOnly].concat(scaleOptionsBaseSerializationsInfo), dateTimeScaleOptions = { propertyName: "dateTimeScaleOptions", modelName: "DateTimeScaleOptions", displayName: "Date-Time Scale Options", info: dateTimeScaleOptionsSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions' };
                var qualitativeScaleOptionsSerializationInfo = [autoGrid, gridOffset, gridSpacing], qualitativeScaleOptions = { propertyName: "qualitativeScaleOptions", modelName: "QualitativeScaleOptions", displayName: "Qualitative Scale Options", localizationId: "DevExpress.XtraCharts.AxisX3D.QualitativeScaleOptions", info: qualitativeScaleOptionsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                var visibleInPanesSerializable = { propertyName: "visibleInPanesSerializable", modelName: "@VisibleInPanesSerializable", displayName: "Visible In Panes Serializable", editor: DevExpress.Analytics.Widgets.editorTemplates.text }, minorVisible = { propertyName: "minorVisible", modelName: "@MinorVisible", displayName: "Minor Visible", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorVisible' }, minorColor = { propertyName: "minorColor", modelName: "@MinorColor", displayName: "Minor Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.GridLines.MinorColor' };
                var gridLinesAxisBaseSerializationsInfo = [Internal.visible, minorVisible, Internal.color, minorColor, lineStyle, minorLineStyle];
                var gridLinesAxisX = { propertyName: "gridLinesAxisX", modelName: "GridLines", displayName: "Grid Lines", info: gridLinesAxisBaseSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.GridLines' }, gridLinesAxisY = { propertyName: "gridLinesAxisY", modelName: "GridLines", displayName: "Grid Lines", info: gridLinesAxisBaseSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.AxisBase.GridLines' };
                var straggered = { propertyName: "straggered", modelName: "@Straggered", displayName: "Straggered", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false, from: DevExpress.Analytics.Utils.parseBool }, allowStagger = { propertyName: "allowStagger", modelName: "@AllowStagger", displayName: "Allow Stagger", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.AllowStagger' }, allowRotate = { propertyName: "allowRotate", modelName: "@AllowRotate", displayName: "Allow Rotate", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.AllowRotate' }, allowHide = { propertyName: "allowHide", modelName: "@AllowHide", displayName: "Allow Hide", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.AllowHide' }, minIndent = { propertyName: "minIndent", modelName: "@MinIndent", displayName: "Min Indent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.MinIndent' }, axisLabelResolveOverlappingOptionsSerializationsInfo = [allowStagger, allowRotate, allowHide, minIndent], axisLabelResolveOverlappingOptions = { propertyName: "resolveOverlappingOptions", modelName: "ResolveOverlappingOptions", displayName: "Resolve Overlapping Options", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: axisLabelResolveOverlappingOptionsSerializationsInfo, localizationId: 'DevExpress.XtraCharts.AxisLabel.ResolveOverlappingOptions' }, enableAntialiasing = { propertyName: "enableAntialiasing", modelName: "@EnableAntialiasing", displayName: "Enable Antialiasing", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.TitleBase.EnableAntialiasing' };
                var axisLabelBaseSerializationsInfo = [enableAntialiasing, Internal.font, Internal.maxLineCount, Internal.maxWidth, axisLabelResolveOverlappingOptions, Internal.textAlignment, Internal.textColor, Internal.textPattern];
                var axisLabelSerializationsInfo = [Internal.angle, straggered, Internal.visibility].concat(axisLabelBaseSerializationsInfo), axisLabel = { propertyName: "axisLabel", modelName: "Label", displayName: "Label", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: axisLabelSerializationsInfo, localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
                var minorCount = { propertyName: "minorCount", modelName: "@MinorCount", displayName: "Minor Count", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.AxisBase.MinorCount' }, interlaced = { propertyName: "interlaced", modelName: "@Interlaced", displayName: "Interlaced", from: DevExpress.Analytics.Utils.parseBool, defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, localizationId: 'DevExpress.XtraCharts.AxisBase.Interlaced' }, interlacedColor = { propertyName: "interlacedColor", modelName: "@InterlacedColor", displayName: "Interlaced Color", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, from: DevExpress.Analytics.Utils.colorFromString, localizationId: 'DevExpress.XtraCharts.AxisBase.InterlacedColor' };
                var axisBaseSerializationsInfo = [visualRange, wholeRange, numericScaleOptions, dateTimeScaleOptions, minorCount, interlacedColor];
                var axisFillMode = {
                    propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }, { value: "Hatch", displayValue: "Hatch", localizationId: 'DevExpress.XtraCharts.FillMode.Hatch' }],
                    localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode'
                }, fillStyle2D = [axisFillMode];
                var rectangleFillStyleSerializationsInfo = [].concat(fillStyle2D), interlacedFillStyle = { propertyName: "InterlacedFillStyle", modelName: "InterlacedFillStyle", displayName: "Interlaced Fill Style", info: rectangleFillStyleSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.RadarAxis.InterlacedFillStyle' };
                var crossAxis = { propertyName: "crossAxis", modelName: "@CrossAxis", displayName: "Cross Axis", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.TickmarksBase.CrossAxis' }, minorThickness = { propertyName: "minorThickness", modelName: "@MinorThickness", displayName: "Minor Thickness", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 1, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorThickness' }, minorLength = { propertyName: "minorLength", modelName: "@MinorLength", displayName: "Minor Length", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 2, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorLength' }, lengthinfo = { propertyName: "length", modelName: "@Length", displayName: "Length", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 5, localizationId: 'DevExpress.XtraCharts.TickmarksBase.Length' }, tickmarksMinorVisible = { propertyName: "minorVisible", modelName: "@MinorVisible", displayName: "Minor Visible", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorVisible' }, tickmarksBaseSerializationsInfo = [Internal.visible, tickmarksMinorVisible, crossAxis, Internal.thickness, minorThickness, lengthinfo, minorLength], tickmarksSerializationsInfo = [].concat(tickmarksBaseSerializationsInfo);
                var tickmarks = { propertyName: "tickmarks", modelName: "Tickmarks", displayName: "Tickmarks", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: tickmarksSerializationsInfo, localizationId: 'DevExpress.XtraCharts.RadarAxisY.Tickmarks' };
                var axisAlignment = {
                    propertyName: "axisAlignment", modelName: "@Alignment",
                    displayName: "Alignment", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                    valuesArray: [{ value: "Near", displayValue: "Near", localizationId: 'DevExpress.XtraCharts.ConstantLineTitleAlignment.Near' }, { value: "Zero", displayValue: "Zero", localizationId: 'DevExpress.XtraCharts.AxisAlignment.Zero' }, { value: "Far", displayValue: "Far", localizationId: 'DevExpress.XtraCharts.ConstantLineTitleAlignment.Far' }],
                    localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Alignment'
                };
                var pattern = { propertyName: "pattern", modelName: "@Pattern", displayName: "Pattern", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.CrosshairAxisLabelOptions.Pattern' }, crosshairAxisLabelOptionsSerializationsInfo = [Internal.visibility, pattern, Internal.backColor, Internal.textColor, Internal.font];
                var crosshairAxisLabelOptions = { propertyName: "crosshairAxisLabelOptions", modelName: "CrosshairAxisLabelOptions", displayName: "Crosshair Axis Label Options", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: crosshairAxisLabelOptionsSerializationsInfo, localizationId: 'DevExpress.XtraCharts.Axis2D.CrosshairAxisLabelOptions' };
                var axisTitleVisibility = { propertyName: "axisTitleVisibility", modelName: "@Visibility", displayName: "Visibility", defaultVal: "False", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.BorderBase.Visibility' };
                var axisTitleSerializationsInfo = [Internal.text, Internal.titleAlignment, Internal.antialiasing, axisTitleVisibility, Internal.textColor, Internal.font12], axisTitle = { propertyName: "axisTitle", modelName: "Title", displayName: "Title", defaultVal: {}, info: axisTitleSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title' };
                var crosshairLabelVisibility = { propertyName: "crosshairLabelVisibility", modelName: "@CrosshairLabelVisibility", displayName: "Crosshair Label Visibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.SeriesBase.CrosshairLabelVisibility' };
                var axis2DSerializationsInfo = [interlaced, interlacedFillStyle, tickmarks, axisTitle, Internal.visibility, axisAlignment, axisLabel, Internal.thickness,
                    Internal.color, crosshairLabelVisibility, visibleInPanesSerializable, crosshairAxisLabelOptions].concat(axisBaseSerializationsInfo);
                var axisY3DInterlaced = { propertyName: "axisY3DInterlaced", modelName: "@Interlaced", displayName: "Interlaced", from: DevExpress.Analytics.Utils.parseBool, defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, localizationId: 'DevExpress.XtraCharts.AxisBase.Interlaced' };
                var axisFillMode3D = {
                    propertyName: "fillMode", modelName: "@FillMode", displayName: "Fill Mode",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Gradient", displayValue: "Gradient", localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }],
                    localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode'
                }, fillStyle3D = [axisFillMode];
                var rectangleFillStyle3DSerializationsInfo = [].concat(fillStyle3D), rectangleFillStyle3D = { propertyName: "interlacedFillStyle", modelName: "InterlacedFillStyle", displayName: "Interlaced Fill Style", info: rectangleFillStyle3DSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.RadarAxis.InterlacedFillStyle' }, axisLabel3DPosition = {
                    propertyName: "axisLabel3DPosition", modelName: "@AxisLabel3DPosition", displayName: "Axis Label 3D Position",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Bottom", displayValue: "Bottom", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Bottom' }, { value: "Left", displayValue: "Left", localizationId: 'DevExpress.XtraReports.UI.XRControl.Left' }, { value: "Right", displayValue: "Right", localizationId: 'DevExpress.XtraCharts.RectangleIndents.Right' }, { value: "Top", displayValue: "Top", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: "Auto", displayValue: "Auto", localizationId: 'DevExpress.XtraReports.UI.DocumentExportMode.Auto' }]
                };
                var axisLabel3DSerializationsInfo = [axisLabel3DPosition].concat(axisLabelSerializationsInfo), axisLabel3D = { propertyName: "axisLabel3D", modelName: "Label", displayName: "Label", info: axisLabel3DSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
                var axis3DSerializationsInfo = [rectangleFillStyle3D, axisLabel3D].concat(axisBaseSerializationsInfo);
                var sizeInPixels = { propertyName: "sizeInPixels", modelName: "@SizeInPixels", displayName: "Size In Pixels", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.XYDiagramPaneBase.SizeInPixels' }, scaleBreakStyle = {
                    propertyName: "style", modelName: "@Style", displayName: "Style", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                    valuesArray: [{ value: "Straight", displayValue: "Straight", localizationId: 'DevExpress.XtraCharts.ScaleBreakStyle.Straight' }, { value: "Ragged", displayValue: "Ragged", localizationId: 'DevExpress.XtraCharts.ScaleBreakStyle.Ragged' }, { value: "Waved", displayValue: "Waved", localizationId: 'DevExpress.XtraCharts.ScaleBreakStyle.Waved' }],
                    localizationId: 'DevExpress.XtraReports.UI.ConditionFormatting.Style'
                }, scaleBreaksOptionsSerializationsInfo = [sizeInPixels, Internal.color, scaleBreakStyle];
                var scaleBreaksOptions = { propertyName: "scaleBreakOptions", modelName: "ScaleBreakOptions", displayName: "Scale Break Options", info: scaleBreaksOptionsSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.Axis.ScaleBreakOptions' };
                var enabled = { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraReports.UI.EditOptions.Enabled' }, maxCount = { propertyName: "maxCount", modelName: "@MaxCount", displayName: "Max Count", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.AutoScaleBreaks.MaxCount' }, autoScaleBreaksSerializationsInfo = [enabled, maxCount];
                var edge1 = { propertyName: "edge1", modelName: "@Edge1Serializable", displayName: 'Edge1', localizationId: 'DevExpress.XtraCharts.ScaleBreak.Edge1', editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, edge2 = { propertyName: "edge2", modelName: "@Edge2Serializable", displayName: 'Edge2', localizationId: 'DevExpress.XtraCharts.ScaleBreak.Edge2', editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                var scaleBreaks = { propertyName: "scaleBreaks", modelName: "ScaleBreaks", displayName: 'Scale Breaks', localizationId: 'DevExpress.XtraCharts.Axis.ScaleBreaks', array: true, editor: Internal.editorTemplates.collection };
                Internal.scaleBreakSerializationsInfo = [edge1, edge2, Internal.visible, Internal.name, Internal.tag];
                var autoScaleBreaks = { propertyName: "autoScaleBreaks", modelName: "AutoScaleBreaks", displayName: "Auto Scale Breaks", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: autoScaleBreaksSerializationsInfo, localizationId: 'DevExpress.XtraCharts.Axis.AutoScaleBreaks' }, reverse = { propertyName: "axisReverse", modelName: "@Reverse", displayName: "Reverse", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.Axis.Reverse' };
                var axisValueSerializable = { propertyName: "axisValue", modelName: "@AxisValueSerializable", displayName: "Axis Value", localizationId: "DevExpress.XtraCharts.AxisCoordinate.AxisValue", editor: DevExpress.Analytics.Widgets.editorTemplates.text }, showBehind = { propertyName: "showBehind", modelName: "@ShowBehind", from: DevExpress.Analytics.Utils.parseBool, displayName: "Show Behind", localizationId: 'DevExpress.XtraCharts.ConstantLine.ShowBehind', editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                Internal.legendName = { propertyName: "legendName", modelName: "@LegendName", displayName: "Legend", localizationId: "DevExpress.XtraCharts.ConstantLine.Legend", defaultVal: DevExpress.Analytics.Utils.getLocalization('Default Legend', 'ChartStringId.DefaultLegend'), editor: Internal.editorTemplates.legends };
                var showAxisLabel = { propertyName: "showAxisLabel", modelName: "@ShowAxisLabel", displayName: 'Show Axis Label', localizationId: 'DevExpress.XtraCharts.Strip.ShowAxisLabel', editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, axisLabelText = { propertyName: "axisLabelText", modelName: "@AxisLabelText", displayName: "Axis Label Text", localizationId: 'DevExpress.XtraCharts.Strip.AxisLabelText', editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                var strips = { propertyName: "strips", modelName: "Strips", displayName: 'Strips', localizationId: 'DevExpress.XtraCharts.Axis2D.Strips', array: true, editor: Internal.editorTemplates.collection };
                Internal.stripSerializationsInfo = [Internal.visible, Internal.color, Internal.showInLegend, Internal.legendName, Internal.legendText, Internal.checkableInLegend, Internal.checkedInLegend, showAxisLabel, axisLabelText, Internal.name, Internal.tag];
                Internal.constantLineSerializationsInfo = [axisValueSerializable, Internal.name, Internal.visible, Internal.color, Internal.showInLegend, Internal.legendName, Internal.legendText, Internal.checkedInLegend, Internal.checkableInLegend, showBehind, Internal.tag];
                var constantLines = { propertyName: "constantLines", modelName: "ConstantLines", displayName: "Constant Lines", localizationId: "DevExpress.XtraCharts.Axis2D.ConstantLines", array: true, editor: Internal.editorTemplates.collection };
                var axisSerializationsInfo = [reverse, scaleBreaksOptions, autoScaleBreaks].concat(axis2DSerializationsInfo);
                Internal.axisXYSerializationsInfo = [constantLines, scaleBreaks, strips].concat(axisSerializationsInfo);
                var axisID = { propertyName: "axisID", modelName: "@AxisID" };
                Internal.secondaryAxisXYSerializationsInfo = [Internal.name, axisID].concat(Internal.axisXYSerializationsInfo);
                var topLevel = { propertyName: "topLevel", modelName: "@TopLevel", displayName: "Top Level", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.RadarAxisY.TopLevel' }, radarAxisXLabelTextDirection = {
                    propertyName: "textDirection", modelName: "TextDirection", displayName: "Text Direction", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                    valuesArray: [{ value: "LeftToRight", displayValue: "LeftToRight", localizationId: 'ChartStringId.WizGradientLeftToRight' }, { value: "TopToBottom", displayValue: "TopToBottom", localizationId: 'ChartStringId.WizSeriesLabelTextOrientationTopToBottom' }, { value: "BottomToTop", displayValue: "BottomToTop", localizationId: 'ChartStringId.WizSeriesLabelTextOrientationBottomToTop' }, { value: "Radial", displayValue: "Radial", localizationId: 'DevExpress.XtraCharts.PieSeriesLabelPosition.Radial' }, { value: "Tangent", displayValue: "Tangent", localizationId: 'DevExpress.XtraCharts.PieSeriesLabelPosition.Tangent' }],
                    localizationId: 'DevExpress.XtraCharts.RadarAxisXLabel.TextDirection'
                };
                var radarAxisXLabelSerializationsInfo = axisLabelBaseSerializationsInfo.concat(radarAxisXLabelTextDirection), radarAxisXLabel = { propertyName: "radarAxisXLabel", modelName: "Label", displayName: "Label", info: radarAxisXLabelSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRLabel' }, radarAxisYLabel = { propertyName: "radarAxisYLabel", modelName: "Label", displayName: "Label", info: axisLabelBaseSerializationsInfo.concat([Internal.angle, Internal.visible]), editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
                var radarAxisSerializationsInfo = [interlaced, interlacedColor, interlacedFillStyle, visualRange, minorCount], radarAxisXSerializationsInfo = [radarAxisXNumericScaleOptions, radarWholeRange, gridLinesAxisX, radarAxisXLabel, qualitativeScaleOptions].concat(radarAxisSerializationsInfo), radarAxisYSerializationsInfo = [Internal.color, Internal.thickness, Internal.visible, radarAxisYNumericScaleOptions, topLevel, wholeRange, gridLinesAxisY, radarAxisYLabel, tickmarks].concat(radarAxisSerializationsInfo);
                Internal.radarAxisX = { propertyName: "axisX", modelName: "AxisX", displayName: "Axis X", info: radarAxisXSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.GanttAxisX' };
                Internal.radarAxisY = { propertyName: "axisY", modelName: "AxisY", displayName: "Axis Y", info: radarAxisYSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.SeparatePaneIndicator.AxisY' };
                Internal.axisX3D = { propertyName: "axisX", modelName: "AxisX", displayName: "Axis X", info: [gridLinesAxisX, interlaced, qualitativeScaleOptions].concat(axis3DSerializationsInfo), editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.GanttAxisX' };
                Internal.axisY3D = { propertyName: "axisY", modelName: "AxisY", displayName: "Axis Y", info: [gridLinesAxisY, axisY3DInterlaced].concat(axis3DSerializationsInfo), editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.SeparatePaneIndicator.AxisY' };
                Internal.axisX = { propertyName: "axisX", modelName: "AxisX", displayName: "Primary Axis X", localizationId: 'DevExpress.XtraCharts.AxisX', defaultVal: {}, from: Internal.Axis.AxisXYViewModel.from([gridLinesAxisX, qualitativeScaleOptions].concat(Internal.axisXYSerializationsInfo)), toJsonObject: Internal.Axis.AxisXYViewModel.toJson, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                Internal.axisY = { propertyName: "axisY", modelName: "AxisY", displayName: "Primary Axis Y", localizationId: 'DevExpress.XtraCharts.AxisY', defaultVal: {}, from: Internal.Axis.AxisXYViewModel.from([gridLinesAxisY].concat(Internal.axisXYSerializationsInfo)), toJsonObject: Internal.Axis.AxisXYViewModel.toJson, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                Internal.diagram = { propertyName: "diagram", modelName: "Diagram", displayName: "Diagram", from: function (val) { return ko.observable(val); }, toJsonObject: DiagramViewModel.toJson, localizationId: 'DevExpress.XtraReports.UI.XRChart.Diagram' };
                var dimension = { propertyName: "dimension", modelName: "@Dimension", displayName: "Dimension", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.SimpleDiagram3D.Dimension' }, equalPieSize = { propertyName: "equalPieSize", modelName: "@EqualPieSize", displayName: "EqualPieSize", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, typeNameNotShowDiagram = { propertyName: "typeNameSerializable", modelName: "@TypeNameSerializable" };
                Internal.secondaryAxesX = { propertyName: "secondaryAxesX", modelName: "SecondaryAxesX", displayName: "Secondary Axes X", array: true, editor: Internal.editorTemplates.collection, localizationId: 'DevExpress.XtraCharts.XYDiagram.SecondaryAxesX' };
                Internal.secondaryAxesY = { propertyName: "secondaryAxesY", modelName: "SecondaryAxesY", displayName: "Secondary Axes Y", array: true, editor: Internal.editorTemplates.collection, localizationId: 'DevExpress.XtraCharts.XYDiagram.SecondaryAxesY' };
                Internal.panes = { propertyName: "panes", modelName: "Panes", displayName: "Additional Panes", array: true, editor: Internal.editorTemplates.collection, localizationId: 'ChartDesignerStringIDs.TreeAdditionalPanelCollection' };
                var drawingStyle = {
                    propertyName: "drawingStyle", modelName: "@DrawingStyle", displayName: "Drawing Style", localizationId: "DevExpress.XtraCharts.RadarDiagram.DrawingStyle", defaultVal: "Counterclockwise",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                        { value: "Counterclockwise", displayValue: "Counterclockwise", localizationId: "DevExpress.XtraCharts.RadarDiagramRotationDirection.Counterclockwise" },
                        { value: "Clockwise", displayValue: "Clockwise", localizationId: "DevExpress.XtraCharts.RadarDiagramRotationDirection.Clockwise" }
                    ]
                }, startAngleInDegrees = {
                    propertyName: "startAngleInDegrees", modelName: "@StartAngleInDegrees", displayName: "Start Angle in Degrees", localizationId: "DevExpress.XtraCharts.RadarDiagram.StartAngleInDegrees", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: 0
                }, rotationDirection = {
                    propertyName: "rotationDirection", modelName: "@RotationDirection", displayName: "Rotation Direction", localizationId: "DevExpress.XtraCharts.RadarDiagram.RotationDirection", defaultVal: "Circle",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                        { value: "Circle", displayValue: "Circle", localizationId: "DevExpress.XtraCharts.RadarDiagramDrawingStyle.Circle" },
                        { value: "Polygon", displayValue: "Polygon", localizationId: "DevExpress.XtraCharts.RadarDiagramDrawingStyle.Polygon" }
                    ]
                };
                Internal.diagramSerializationsInfo = [typeNameNotShowDiagram];
                var radarSerializationsInfo = [drawingStyle, startAngleInDegrees, rotationDirection, Internal.radarAxisX, Internal.radarAxisY, Internal.margin, Internal.backColor].concat(Internal.diagramSerializationsInfo), polarSerializationsInfo = [Internal.radarAxisX, Internal.radarAxisY, Internal.margin, Internal.backColor].concat(Internal.diagramSerializationsInfo), simple3DSerializationsInfo = [dimension, Internal.margin, equalPieSize].concat(Internal.diagramSerializationsInfo), funnel3DSerializationsInfo = [].concat(simple3DSerializationsInfo), simpleSerializationsInfo = [dimension, Internal.margin, equalPieSize].concat(Internal.diagramSerializationsInfo), XY2DSerializationsInfo = [Internal.defaultPane, Internal.panes, Internal.axisX, Internal.axisY, Internal.secondaryAxesX, Internal.secondaryAxesY, Internal.margin, Internal.enableAxisXScrolling, Internal.enableAxisXZooming, Internal.enableAxisYScrolling, Internal.enableAxisYZooming, typeNameNotShowDiagram], XYSerializationsInfo = [Internal.rotated].concat(XY2DSerializationsInfo), XY3DSerializationsInfo = [Internal.axisX3D, Internal.axisY3D, Internal.backColor, typeNameNotShowDiagram], GanttDiagramSerializationsInfo = [].concat(XY2DSerializationsInfo);
                var XYObject = { info: XYSerializationsInfo, type: "XYDiagram" }, XY2DObject = { info: XY2DSerializationsInfo, type: "SwiftPlotDiagram" }, XY3DObject = { info: XY3DSerializationsInfo, type: "XYDiagram3D" }, radarObject = { info: radarSerializationsInfo, type: "RadarDiagram" }, polarObject = { info: polarSerializationsInfo, type: "PolarDiagram" }, simpleObject = { info: simpleSerializationsInfo, type: "SimpleDiagram" }, simple3DObject = { info: simple3DSerializationsInfo, type: "SimpleDiagram3D" }, funnel3DObject = { info: funnel3DSerializationsInfo, type: "FunnelDiagram" }, gantObject = { info: GanttDiagramSerializationsInfo, type: "GanttDiagram" };
                Internal.diagramMapper = {
                    "SideBySideBarSeriesView": XYObject,
                    "StackedBarSeriesView": XYObject,
                    "FullStackedBarSeriesView": XYObject,
                    "SideBySideStackedBarSeriesView": XYObject,
                    "SideBySideFullStackedBarSeriesView": XYObject,
                    "SideBySideBar3DSeriesView": XY3DObject,
                    "StackedBar3DSeriesView": XY3DObject,
                    "FullStackedBar3DSeriesView": XY3DObject,
                    "SideBySideStackedBar3DSeriesView": XY3DObject,
                    "SideBySideFullStackedBar3DSeriesView": XY3DObject,
                    "ManhattanBarSeriesView": XY3DObject,
                    "PointSeriesView": XYObject,
                    "BubbleSeriesView": XYObject,
                    "LineSeriesView": XYObject,
                    "StackedLineSeriesView": XYObject,
                    "FullStackedLineSeriesView": XYObject,
                    "StepLineSeriesView": XYObject,
                    "SplineSeriesView": XYObject,
                    "ScatterLineSeriesView": XYObject,
                    "SwiftPlotSeriesView": XY2DObject,
                    "Line3DSeriesView": XY3DObject,
                    "StackedLine3DSeriesView": XY3DObject,
                    "FullStackedLine3DSeriesView": XY3DObject,
                    "StepLine3DSeriesView": XY3DObject,
                    "Spline3DSeriesView": XY3DObject,
                    "PieSeriesView": simpleObject,
                    "DoughnutSeriesView": simpleObject,
                    "NestedDoughnutSeriesView": simpleObject,
                    "Pie3DSeriesView": simple3DObject,
                    "Doughnut3DSeriesView": simple3DObject,
                    "FunnelSeriesView": simpleObject,
                    "Funnel3DSeriesView": funnel3DObject,
                    "AreaSeriesView": XYObject,
                    "StackedAreaSeriesView": XYObject,
                    "FullStackedAreaSeriesView": XYObject,
                    "StepAreaSeriesView": XYObject,
                    "SplineAreaSeriesView": XYObject,
                    "StackedSplineAreaSeriesView": XYObject,
                    "FullStackedSplineAreaSeriesView": XYObject,
                    "Area3DSeriesView": XY3DObject,
                    "StackedArea3DSeriesView": XY3DObject,
                    "FullStackedArea3DSeriesView": XY3DObject,
                    "StepArea3DSeriesView": XY3DObject,
                    "SplineArea3DSeriesView": XY3DObject,
                    "StackedSplineArea3DSeriesView": XY3DObject,
                    "FullStackedSplineArea3DSeriesView": XY3DObject,
                    "OverlappedRangeBarSeriesView": XYObject,
                    "SideBySideRangeBarSeriesView": XYObject,
                    "RangeAreaSeriesView": XYObject,
                    "RangeArea3DSeriesView": XY3DObject,
                    "RadarPointSeriesView": radarObject,
                    "RadarLineSeriesView": radarObject,
                    "RadarAreaSeriesView": radarObject,
                    "PolarPointSeriesView": polarObject,
                    "PolarLineSeriesView": polarObject,
                    "PolarAreaSeriesView": polarObject,
                    "StockSeriesView": XYObject,
                    "CandleStickSeriesView": XYObject,
                    "OverlappedGanttSeriesView": gantObject,
                    "SideBySideGanttSeriesView": gantObject
                };
                var sideBySideBarDistanceFixed = { propertyName: "barDistanceFixed", modelName: "@SideBySideBarDistanceFixed", defaultVal: 1 }, sideBySideBarDistance = { propertyName: "barDistance", modelName: "@SideBySideBarDistance", defaultVal: 0.0 };
                var seriesPointsSorting = {
                    propertyName: "seriesPointsSorting", modelName: "@SeriesPointsSorting", displayName: "Series Points Sorting", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Ascending", displayValue: "Ascending", localizationId: 'DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending' }, { value: "Descending", displayValue: "Descending", localizationId: 'DevExpress.XtraReports.UI.XRColumnSortOrder.Descending' }],
                    localizationId: 'DevExpress.XtraCharts.SeriesBase.SeriesPointsSorting'
                }, seriesPointsSortingKey = {
                    propertyName: "seriesPointsSortingKey", modelName: "@SeriesPointsSortingKey", displayName: "Series Points Sorting Key", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Argument", displayValue: "Argument", localizationId: 'DevExpress.XtraCharts.SeriesSelectionMode.Argument' }, { value: "Value_1", displayValue: "Value_1", localizationId: 'ChartStringId.WizValueLevelValue_1' }, { value: "Value_2", displayValue: "Value_2", localizationId: 'ChartStringId.WizValueLevelValue_2' }, { value: "Value_3", displayValue: "Value_3" }, { value: "Value_4", displayValue: "Value_4" }],
                    localizationId: 'DevExpress.XtraCharts.SeriesBase.SeriesPointsSortingKey'
                }, legendTextPattern = { propertyName: "legendTextPattern", modelName: "@LegendTextPattern", displayName: "Legend Text Pattern", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.SeriesBase.LegendTextPattern' }, argumentScaleType = { propertyName: "argumentScaleType", modelName: "@ArgumentScaleType", displayName: "Argument Scale Type", defaultVal: "Auto", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.scaleTypeValues, localizationId: 'DevExpress.XtraCharts.SeriesBase.ArgumentScaleType' }, valueScaleType = {
                    propertyName: "valueScaleType", modelName: "@ValueScaleType", displayName: "Value Scale Type", defaultVal: "Numerical", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Numerical", displayValue: "Numerical", localizationId: 'DevExpress.XtraCharts.ScaleType.Numerical' }, { value: "DateTime", displayValue: "DateTime", localizationId: 'DevExpress.XtraTreeList.Data.UnboundColumnType.DateTime' }],
                    localizationId: 'DevExpress.XtraCharts.SeriesBase.ValueScaleType'
                }, labelsVisibility = { propertyName: "labelsVisibility", modelName: "@LabelsVisibility", displayName: "Labels Visibility", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.SeriesBase.LabelsVisibility' }, argumentDataMember = { propertyName: "argumentDataMember", modelName: "@ArgumentDataMember", displayName: "Argument Data Member", defaultVal: "", editor: Internal.editorTemplates.valueDataMember, localizationId: 'DevExpress.XtraCharts.SeriesBase.ArgumentDataMember' }, valueDataMembersSerializable = { propertyName: "valueDataMembers", modelName: "@ValueDataMembersSerializable", displayName: "Value Data Members", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, from: Internal.DataMembers.CommonValueDataMembers.from, toJsonObject: Internal.DataMembers.CommonValueDataMembers.toJson, localizationId: 'DevExpress.XtraCharts.SeriesBase.ValueDataMembers' };
                var enabled = { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraReports.UI.EditOptions.Enabled' }, mode = {
                    propertyName: "mode", modelName: "@Mode", displayName: "Mode", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "Count", valuesArray: [{ value: "Count", displayValue: "Count", localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: "ThresholdValue", displayValue: "Threshold Value", localizationId: 'DevExpress.XtraCharts.TopNMode.ThresholdValue' }, { value: "ThresholdPercent", displayValue: "Threshold Percent", localizationId: 'DevExpress.XtraCharts.TopNOptions.ThresholdPercent' }],
                    localizationId: 'DevExpress.XtraReports.UI.MultiColumn.Mode'
                }, count = { propertyName: "count", modelName: "@Count", displayName: "Count", defaultVal: 5, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, showOthers = { propertyName: "showOthers", modelName: "@ShowOthers", displayName: "Show Others", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.TopNOptions.ShowOthers' }, othersArgument = { propertyName: "othersArgument", modelName: "@OthersArgument", displayName: "Others Argument", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'DevExpress.XtraCharts.TopNOptions.OthersArgument' }, thresholdValue = { propertyName: "thresholdValue", modelName: "@ThresholdValue", displayName: "Threshold Value", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.TopNMode.ThresholdValue' }, thresholdPercent = { propertyName: "thresholdPercent", modelName: "@ThresholdPercent", displayName: "Threshold Percent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.TopNOptions.ThresholdPercent' };
                var textOrientation = {
                    propertyName: "textOrientation", modelName: "@TextOrientation", displayName: "Text Orientation", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Horizontal ", displayValue: "Horizontal", localizationId: 'DevExpress.XtraCharts.TextOrientation.Horizontal' }, { value: "TopToBottom", displayValue: "Top To Bottom", localizationId: 'DevExpress.XtraCharts.TextOrientation.TopToBottom' }, { value: "BottomToTop", displayValue: "Bottom To Top", localizationId: 'DevExpress.XtraCharts.TextOrientation.BottomToTop' }],
                    localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.TextOrientation'
                }, resolveOverlappingMode = {
                    propertyName: "resolveOverlappingMode", modelName: "@ResolveOverlappingMode", displayName: "Resolve Overlapping Mode", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "None", displayValue: "None", localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }, { value: "HideOverlapped", displayValue: "Hide Overlapped", localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingMode.HideOverlapped' }, { value: "JustifyAroundPoint", displayValue: "Justify Around Point", localizationId: 'DevExpress.XtraCharts.ResolveOverlappingMode.JustifyAroundPoint' }, { value: "JustifyAllAroundPoint", displayValue: "Justify All Around Point", localizationId: 'DevExpress.XtraCharts.ResolveOverlappingMode.JustifyAllAroundPoint' }],
                    localizationId: 'DevExpress.XtraCharts.StackedBarTotalLabel.ResolveOverlappingMode'
                }, lineColor = { propertyName: "lineColor", modelName: "@LineColor", displayName: "Line Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.LineColor' }, lineVisibility = { propertyName: "lineVisibility", modelName: "@LineVisibility", displayName: "Line Visibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.LineVisibility' }, lineLength = { propertyName: "lineLength", modelName: "@LineLength", displayName: "Line Length", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.LineLength' }, barPosition = {
                    propertyName: "barPosition", modelName: "@Position", displayName: "Position", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Top", displayValue: "Top", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: "Center", displayValue: "Center", localizationId: 'DevExpress.XtraCharts.FunnelSeriesLabelPosition.Center' }, { value: "TopInside", displayValue: "Top Inside", localizationId: 'DevExpress.XtraCharts.BarSeriesLabelPosition.TopInside' }, { value: "BottomInside", displayValue: "Bottom Inside", localizationId: 'DevExpress.XtraCharts.BarSeriesLabelPosition.BottomInside' }],
                    localizationId: 'DevExpress.XtraCharts.PointSeriesLabel.Position'
                }, showForZeroValues = { propertyName: "showForZeroValues", modelName: "@ShowForZeroValues", displayName: "Show for Zero Values", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.BarSeriesLabel.ShowForZeroValues' };
                var dashStyle = {
                    propertyName: "dashStyle", modelName: "@DashStyle", displayName: "Dash Style", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Empty", displayValue: "Empty", localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: "Solid", displayValue: "Solid", localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: "Dash", displayValue: "Dash", localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' }, { value: "Dot", displayValue: "Dot", localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' }, { value: "DashDot", displayValue: "Dash-Dot", localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.DashDot' }, { value: "DashDotDot", displayValue: "Dash-Dot-Dot", localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.DashDotDot' }],
                    localizationId: 'DevExpress.XtraCharts.LineStyle.DashStyle'
                };
                var markerVisibility = { propertyName: "markerVisibility", modelName: "@MarkerVisibility", displayName: "Marker Visibility", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Internal.defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.RadarLineSeriesView.MarkerVisibility' }, markerKind = {
                    propertyName: "kind", modelName: "@Kind", displayName: "Kind", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Square", displayValue: "Square", localizationId: 'DevExpress.XtraCharts.MarkerKind.Square' }, { value: "Diamond", displayValue: "Diamond", localizationId: 'DevExpress.XtraCharts.MarkerKind.Diamond' }, { value: "Triangle", displayValue: "Triangle", localizationId: 'DevExpress.XtraCharts.MarkerKind.Triangle' }, { value: "InvertedTriangle", displayValue: "Inverted Triangle", localizationId: 'DevExpress.XtraCharts.MarkerKind.InvertedTriangle' }, { value: "Circle", displayValue: "Circle", localizationId: 'DevExpress.XtraCharts.CircleEasingFunction' }, { value: "Plus", displayValue: "Plus", localizationId: 'DevExpress.XtraCharts.MarkerKind.Plus' }, { value: "Cross", displayValue: "Cross", localizationId: 'DevExpress.XtraCharts.MarkerKind.Cross' }, { value: "Star", displayValue: "Star", localizationId: 'DevExpress.XtraCharts.MarkerKind.Star' }, { value: "Pentagon", displayValue: "Pentagon", localizationId: 'DevExpress.XtraCharts.MarkerKind.Pentagon' }, { value: "Hexagon", displayValue: "Hexagon", localizationId: 'DevExpress.XtraCharts.MarkerKind.Hexagon' }],
                    localizationId: 'DevExpress.XtraCharts.MarkerBase.Kind'
                }, borderVisible = { propertyName: "borderVisible", modelName: "@BorderVisible", displayName: "Border Visible", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, localizationId: 'DevExpress.XtraCharts.MarkerBase.BorderVisible' };
                var direction = {
                    propertyName: "direction", modelName: "@Direction", displayName: "Direction", defaultVal: "TopToBottom", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "TopToBottom", displayValue: "Top To Bottom", localizationId: 'DevExpress.XtraCharts.TextOrientation.TopToBottom' }, { value: "BottomToTop", displayValue: "Bottom To Top", localizationId: 'DevExpress.XtraCharts.TextOrientation.BottomToTop' }, { value: "LeftToRight", displayValue: "Left To Right" }, { value: "RightToLeft", displayValue: "Right To Left" }],
                    localizationId: 'DevExpress.XtraReports.UI.MultiColumn.Direction'
                }, alignmentVertical = {
                    propertyName: "alignmentVertical", modelName: "@AlignmentVertical", displayName: "Vertical Alignment", defaultVal: "Top", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Top", displayValue: "Top", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: "TopOutside", displayValue: "Top Outside", localizationId: 'DevExpress.XtraCharts.LegendAlignmentVertical.TopOutside' }, { value: "Center", displayValue: "Center", localizationId: 'DevExpress.XtraCharts.FunnelSeriesLabelPosition.Center' }, { value: "Bottom", displayValue: "Bottom", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Bottom' }, { value: "BottomOutside", displayValue: "Bottom Outside", localizationId: 'DevExpress.XtraCharts.LegendAlignmentVertical.BottomOutside' }],
                    localizationId: 'DevExpress.XtraCharts.Legend.AlignmentVertical'
                }, alignmentHorizontal = {
                    propertyName: "alignmentHorizontal", modelName: "@AlignmentHorizontal", displayName: "Horizontal Alignment", defaultVal: "RightOutside", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Left", displayValue: "Left", localizationId: 'DevExpress.XtraReports.UI.XRControl.Left' }, { value: "LeftOutside", displayValue: "Left Outside", localizationId: 'DevExpress.XtraCharts.LegendAlignmentHorizontal.LeftOutside' }, { value: "Center", displayValue: "Center", localizationId: 'DevExpress.XtraCharts.FunnelSeriesLabelPosition.Center' }, { value: "Right", displayValue: "Right", localizationId: 'DevExpress.XtraCharts.RectangleIndents.Right' }, { value: "RightOutside", displayValue: "Right Outside", localizationId: 'DevExpress.XtraCharts.LegendAlignmentHorizontal.RightOutside' }],
                    localizationId: 'DevExpress.XtraCharts.Legend.AlignmentHorizontal'
                };
                var dock = {
                    propertyName: "dock", modelName: "@Dock", displayName: "Dock", defaultVal: "Top", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Top", displayValue: "Top", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: "Bottom", displayValue: "Bottom", localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Bottom' }, { value: "Left", displayValue: "Left", localizationId: 'DevExpress.XtraReports.UI.XRControl.Left' }, { value: "Right", displayValue: "Right", localizationId: 'DevExpress.XtraCharts.RectangleIndents.Right' }],
                    localizationId: 'DevExpress.XtraCharts.DockableTitle.Dock'
                };
                var chartTitleText = { propertyName: "text", modelName: "@Text", displayName: "Text", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'ASPxReportsStringId.ExportName_txt' };
                Internal.padding = { propertyName: "chartPadding", modelName: "Padding", displayName: "Padding", info: [Internal.left, Internal.right, Internal.top, Internal.bottom], editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRBarCode.PaddingInfo' };
                var lineMarkerOptionsSerializationsInfo = [Internal.color, Internal.colorEach, markerVisibility], lineMarker = { propertyName: "lineMarker", modelName: "LineMarker", displayName: "Line Marker", info: lineMarkerOptionsSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                var topNOptionsSerializationsInfo = [enabled, mode, count, thresholdPercent, thresholdValue, showOthers, othersArgument], topNOptions = { propertyName: "topNOptions", modelName: "TopNOptions", displayName: "Top N Options", info: topNOptionsSerializationsInfo, defaultVal: {}, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraCharts.SeriesBase.TopNOptions' };
                var lineStyleSerializationsInfo = [Internal.thickness, dashStyle], lineStyle = { propertyName: "lineStyle", modelName: "LineStyle", displayName: "Line Style", info: lineStyleSerializationsInfo, defaultVal: {}, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRShape.LineStyle' };
                Internal.seriesLabelSerializationsInfo = [Internal.typeNameNotShow, Internal.textPattern, Internal.textAlignment, Internal.maxLineCount, Internal.maxWidth, textOrientation, resolveOverlappingMode,
                    lineColor, lineVisibility, lineLength, Internal.antialiasing, Internal.backColor, Internal.textColor, barPosition, showForZeroValues, Internal.font8, lineStyle, Internal.border];
                Internal.seriesLabel = { propertyName: "label", modelName: "Label", displayName: "Label", info: Internal.seriesLabelSerializationsInfo, defaultVal: {}, from: Series.SeriesLabelViewModel.from, toJsonObject: Series.SeriesLabelViewModel.toJson, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
                var autoBindingSettingsEnabled = { propertyName: "autoBindingSettingsEnabled", modelName: "@AutoBindingSettingsEnabled", displayName: "Auto Binding Settings Enabled", localizationId: "DevExpress.XtraCharts.PivotGridDataSourceOptions.AutoBindingSettingsEnabled", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool }, autoLayoutSettingsEnabled = { propertyName: "autoLayoutSettingsEnabled", modelName: "@AutoLayoutSettingsEnabled", displayName: "Auto Layout Settings Enabled", localizationId: "DevExpress.XtraCharts.PivotGridDataSourceOptions.AutoLayoutSettingsEnabled", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                Internal.pivotGridDataSourceOptions = { propertyName: "pivotGridDataSourceOptions", modelName: "PivotGridDataSourceOptions", displayName: "Pivot Grid Data Source Options", localizationId: "DevExpress.XtraReports.UI.XRChart.PivotGridDataSourceOptions", info: [autoBindingSettingsEnabled, autoLayoutSettingsEnabled], editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                var dataFilters = {
                    modelName: "DataFilters", displayName: "Data Filters", propertyName: "dataFilters",
                    editor: DevExpress.Analytics.Widgets.editorTemplates.commonCollection, array: true, addHandler: Models.DataFilterModel.createNew, template: '#dxrd-collectionItemWithAccordion',
                    localizationId: 'DevExpress.XtraCharts.SeriesBase.DataFilters'
                };
                var dataFiltersConjunctionMode = {
                    modelName: "@DataFiltersConjunctionMode", defaultVal: "And", displayName: "Conjunction Mode", propertyName: "dataFiltersConjunctionMode", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                    valuesArray: [{ value: "And", displayValue: "And", localizationId: 'DevExpress.XtraCharts.ConjunctionTypes.And' }, { value: "Or", displayValue: "Or", localizationId: 'DevExpress.XtraCharts.ConjunctionTypes.Or' }],
                    localizationId: 'DevExpress.XtraCharts.DataFilterCollection.ConjunctionMode'
                };
                var colorDataMember = { propertyName: "colorDataMember", displayName: "Color Data Member", defaultVal: "", modelName: "@ColorDataMember", editor: ko.bindingHandlers["displayNameExtender"] ? DevExpress.Analytics.Widgets.editorTemplates.field : Internal.editorTemplates.fieldChart, localizationId: 'DevExpress.XtraCharts.SeriesBase.ColorDataMember' };
                var valuesSerializable = { propertyName: "valuesSerializable", modelName: "@ValuesSerializable", from: function (val) { return ko.observable(val); }, toJsonObject: Series.SeriesPointModel.valueToJsonObject }, argumentSerializable = { propertyName: "argumentSerializable", modelName: "@ArgumentSerializable", displayName: 'Argument', localizationId: 'DevExpress.XtraCharts.SeriesPoint.Argument', editor: DevExpress.Analytics.Widgets.editorTemplates.text }, colorSerializable = { propertyName: "colorSerializable", modelName: "@ColorSerializable", displayName: 'Color', localizationId: 'DevExpress.XtraCharts.SeriesPoint.Color', from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor };
                Internal.seriesPointSerializationsInfo = [argumentSerializable, valuesSerializable, colorSerializable];
                Internal.points = {
                    propertyName: "points", modelName: "Points", displayName: 'Points', localizationId: 'DevExpress.XtraCharts.Series.Points',
                    editor: Internal.editorTemplates.points, array: true
                };
                Internal.createViewsArray = function (limitation) {
                    var array = [];
                    array.push({ value: "SideBySideBarSeriesView", displayValue: "Bar", localizationId: 'DevExpress.Sparkline.SparklineViewType.Bar' });
                    array.push({ value: "StackedBarSeriesView", displayValue: "Bar Stacked", localizationId: 'ChartStringId.SvnStackedBar' });
                    array.push({ value: "FullStackedBarSeriesView", displayValue: "Bar Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedBar' });
                    array.push({ value: "SideBySideStackedBarSeriesView", displayValue: "Side By Side Bar Stacked", localizationId: 'ChartStringId.SvnSideBySideStackedBar' });
                    array.push({ value: "SideBySideFullStackedBarSeriesView", displayValue: "Side By Side Bar Stacked 100%", localizationId: 'ChartStringId.SvnSideBySideFullStackedBar' });
                    if (!limitation) {
                        array.push({ value: "SideBySideBar3DSeriesView", displayValue: "Bar 3D", localizationId: 'ChartStringId.SvnSideBySideBar3D' });
                        array.push({ value: "StackedBar3DSeriesView", displayValue: "Bar 3D Stacked", localizationId: 'ChartStringId.SvnStackedBar3D' });
                        array.push({ value: "FullStackedBar3DSeriesView", displayValue: "Bar 3D Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedBar3D' });
                        array.push({ value: "SideBySideStackedBar3DSeriesView", displayValue: "Side By Side Bar 3D Stacked " });
                        array.push({ value: "SideBySideFullStackedBar3DSeriesView", displayValue: "Side By Side Bar 3D Stacked 100%", localizationId: 'ChartStringId.SvnSideBySideFullStackedBar3D' });
                        array.push({ value: "ManhattanBarSeriesView", displayValue: "Manhattan Bar", localizationId: 'ChartStringId.SvnManhattanBar' });
                    }
                    array.push({ value: "PointSeriesView", displayValue: "Point", localizationId: 'ASPxReportsStringId.ReportDesigner_FontOptions_Unit_Point' });
                    array.push({ value: "BubbleSeriesView", displayValue: "Bubble", localizationId: 'ChartStringId.SvnBubble' });
                    array.push({ value: "LineSeriesView", displayValue: "Line", localizationId: 'DevExpress.XtraReports.UI.XRLine' });
                    array.push({ value: "StackedLineSeriesView", displayValue: "Line Stacked", localizationId: 'ChartStringId.SvnStackedLine' });
                    array.push({ value: "FullStackedLineSeriesView", displayValue: "Line Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedLine' });
                    array.push({ value: "StepLineSeriesView", displayValue: "Step Line", localizationId: 'ChartStringId.SvnStepLine' });
                    array.push({ value: "SplineSeriesView", displayValue: "Spline", localizationId: 'ChartStringId.SvnSpline' });
                    array.push({ value: "ScatterLineSeriesView", displayValue: "Scatter Line", localizationId: 'ChartStringId.CmdCreateScatterLineChartMenuCaption' });
                    array.push({ value: "SwiftPlotSeriesView", displayValue: "Swift Plot", localizationId: 'ChartStringId.SvnSwiftPlot' });
                    if (!limitation) {
                        array.push({ value: "Line3DSeriesView", displayValue: "Line 3D", localizationId: 'ChartStringId.SvnLine3D' });
                        array.push({ value: "StackedLine3DSeriesView", displayValue: "Line 3D Stacked", localizationId: 'ChartStringId.SvnStackedLine3D' });
                        array.push({ value: "FullStackedLine3DSeriesView", displayValue: "Line 3D Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedLine3D' });
                        array.push({ value: "StepLine3DSeriesView", displayValue: "Step Line 3D", localizationId: 'ChartStringId.SvnStepLine3D' });
                        array.push({ value: "Spline3DSeriesView", displayValue: "Spline 3D", localizationId: 'ChartStringId.SvnSpline3D' });
                    }
                    array.push({ value: "PieSeriesView", displayValue: "Pie", localizationId: 'ChartStringId.CmdCreatePieChartMenuCaption' });
                    array.push({ value: "DoughnutSeriesView", displayValue: "Doughnut", localizationId: 'ChartStringId.CmdCreateDoughnutChartMenuCaption' });
                    array.push({ value: "NestedDoughnutSeriesView", displayValue: "Nested Doughnut", localizationId: 'ChartStringId.CmdCreateNestedDoughnutChartMenuCaption' });
                    if (!limitation) {
                        array.push({ value: "Pie3DSeriesView", displayValue: "Pie 3D", localizationId: 'ChartStringId.SvnPie3D' });
                        array.push({ value: "Doughnut3DSeriesView", displayValue: "Doughnut 3D", localizationId: 'ChartStringId.SvnDoughnut3D' });
                    }
                    array.push({ value: "FunnelSeriesView", displayValue: "Funnel", localizationId: 'ChartStringId.SvnFunnel' });
                    if (!limitation) {
                        array.push({ value: "Funnel3DSeriesView", displayValue: "Funnel 3D", localizationId: 'ChartStringId.SvnFunnel3D' });
                    }
                    array.push({ value: "AreaSeriesView", displayValue: "Area", localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsDataField.Area' });
                    array.push({ value: "StackedAreaSeriesView", displayValue: "Area Stacked", localizationId: 'ChartStringId.SvnStackedArea' });
                    array.push({ value: "FullStackedAreaSeriesView", displayValue: "Area Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedArea' });
                    array.push({ value: "StepAreaSeriesView", displayValue: "Step Area", localizationId: 'ChartStringId.SvnStepArea' });
                    array.push({ value: "SplineAreaSeriesView", displayValue: "Spline Area", localizationId: 'ChartStringId.SvnSplineArea' });
                    array.push({ value: "StackedSplineAreaSeriesView", displayValue: "Spline Area Stacked", localizationId: 'ChartStringId.SvnSplineStackedArea' });
                    array.push({ value: "FullStackedSplineAreaSeriesView", displayValue: "Spline Area Stacked 100%", localizationId: 'ChartStringId.SvnSplineFullStackedArea' });
                    if (!limitation) {
                        array.push({ value: "Area3DSeriesView", displayValue: "Area 3D", localizationId: 'ChartStringId.SvnArea3D' });
                        array.push({ value: "StackedArea3DSeriesView", displayValue: "Area 3D Stacked", localizationId: 'ChartStringId.SvnStackedArea3D' });
                        array.push({ value: "FullStackedArea3DSeriesView", displayValue: "Area 3D Stacked 100%", localizationId: 'ChartStringId.SvnFullStackedArea3D' });
                        array.push({ value: "StepArea3DSeriesView", displayValue: "Step 3D Area" });
                        array.push({ value: "SplineArea3DSeriesView", displayValue: "Spline 3D Area" });
                        array.push({ value: "StackedSplineArea3DSeriesView", displayValue: "Spline Area 3D Stacked", localizationId: 'ChartStringId.SvnSplineAreaStacked3D' });
                        array.push({ value: "FullStackedSplineArea3DSeriesView", displayValue: "Spline Area 3D Stacked 100%", localizationId: 'ChartStringId.SvnSplineAreaFullStacked3D' });
                    }
                    array.push({ value: "OverlappedRangeBarSeriesView", displayValue: "Range Bar", localizationId: 'ChartStringId.SvnOverlappedRangeBar' });
                    array.push({ value: "SideBySideRangeBarSeriesView", displayValue: "Side By Side Range Bar", localizationId: 'ChartStringId.SvnSideBySideRangeBar' });
                    array.push({ value: "RangeAreaSeriesView", displayValue: "Range Area", localizationId: 'ChartStringId.SvnRangeArea' });
                    if (!limitation) {
                        array.push({ value: "RangeArea3DSeriesView", displayValue: "Range Area 3D", localizationId: 'ChartStringId.SvnRangeArea3D' });
                    }
                    array.push({ value: "RadarPointSeriesView", displayValue: "Radar Point", localizationId: 'ChartStringId.SvnRadarPoint' });
                    array.push({ value: "RadarLineSeriesView", displayValue: "Radar Line", localizationId: 'ChartStringId.SvnRadarLine' });
                    array.push({ value: "RadarAreaSeriesView", displayValue: "Radar Area", localizationId: 'ChartStringId.CmdCreateRadarAreaChartMenuCaption' });
                    array.push({ value: "PolarPointSeriesView", displayValue: "Polar Point", localizationId: 'ChartStringId.SvnPolarPoint' });
                    array.push({ value: "PolarLineSeriesView", displayValue: "Polar Line", localizationId: 'ChartStringId.CmdCreatePolarLineChartMenuCaption' });
                    array.push({ value: "PolarAreaSeriesView", displayValue: "Polar Area", localizationId: 'ChartStringId.SvnPolarArea' });
                    array.push({ value: "StockSeriesView", displayValue: "Stock Series" });
                    array.push({ value: "CandleStickSeriesView", displayValue: "Candle Stick", localizationId: 'ChartStringId.CmdCreateCandleStickChartMenuCaption' });
                    array.push({ value: "OverlappedGanttSeriesView", displayValue: "Gantt", localizationId: 'ChartStringId.CmdGanttGroupPlaceHolderMenuCaption' });
                    array.push({ value: "SideBySideGanttSeriesView", displayValue: "Side By Side Gantt", localizationId: 'ChartStringId.SvnSideBySideGantt' });
                    return array;
                };
                Internal.view = {
                    propertyName: "view", modelName: "View", displayName: "View", defaultVal: {},
                    from: Series.SeriesViewViewModel.from, toJsonObject: Series.SeriesViewViewModel.toJson,
                    localizationId: 'DevExpress.XtraReports.UI.XRSparkline.View'
                };
                Internal.viewBindableSerializationInfo = {
                    propertyName: "viewBindable", displayName: "View", editor: Internal.editorTemplates.views, valuesArray: Internal.createViewsArray(Reporting.Chart["limitation"]),
                    localizationId: 'DevExpress.XtraReports.UI.XRSparkline.View'
                };
                Internal.qualitativeSummaryOptions = { propertyName: "qualitativeSummaryOptions", modelName: "QualitativeSummaryOptions", displayName: "Qualitative Summary Options", localizationId: "DevExpress.XtraCharts.SeriesBase.QualitativeSummaryOptions", info: Series.Metadata.summaryOptionsSerializationInfoArray, from: Series.QualitativeSummaryOptionsModel.from, toJsonObject: Series.QualitativeSummaryOptionsModel.toJson, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                Internal.numericSummaryOptions = { propertyName: "numericSummaryOptions", modelName: "NumericSummaryOptions", displayName: "Numeric Summary Options", localizationId: "DevExpress.XtraCharts.SeriesBase.NumericSummaryOptions", info: Series.Metadata.numericSummaryOptionsSerializationInfoArray, from: Series.NumericSummaryOptionsModel.from, toJsonObject: Series.NumericSummaryOptionsModel.toJson, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                Internal.dateTimeSumaryOptions = { propertyName: "dateTimeSummaryOptions", modelName: "DateTimeSummaryOptions", displayName: "Date-Time Summary Options", localizationId: "DevExpress.XtraCharts.SeriesBase.DateTimeSummaryOptions", info: Series.Metadata.dateTimeSummaryOptionsSerializationInfoArray, from: Series.DateTimeSummaryOptionsModel.from, toJsonObject: Series.DateTimeSummaryOptionsModel.toJson, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                Internal.seriesTemplateSerializationsInfo = [Internal.viewBindableSerializationInfo, Internal.view, argumentDataMember, valueDataMembersSerializable, colorDataMember, argumentScaleType, seriesPointsSorting, seriesPointsSortingKey, valueScaleType, Internal.checkableInLegend, Internal.checkedInLegend, Internal.showInLegend, Internal.legendName, Internal.legendText, legendTextPattern, labelsVisibility, dataFiltersConjunctionMode, Internal.qualitativeSummaryOptions, Internal.numericSummaryOptions, Internal.dateTimeSumaryOptions, dataFilters, Internal.seriesLabel, topNOptions, Internal.visible];
                Internal.seriesTemplate = { propertyName: "seriesTemplate", modelName: "SeriesTemplate", displayName: "Series Template", localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesTemplate', info: Internal.seriesTemplateSerializationsInfo, from: Series.SeriesTemplateViewModel.from, toJsonObject: Series.SeriesTemplateViewModel.toJson, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                Internal.seriesSerializationsInfo = [Internal.name, Internal.points].concat(Internal.seriesTemplateSerializationsInfo);
                Internal.seriesSerializable = { propertyName: "series", modelName: "SeriesSerializable", displayName: "Series", array: true, editor: Internal.editorTemplates.collection, localizationId: 'DevExpress.XtraReports.UI.XRChart.Series' };
                Internal.seriesDataMember = { propertyName: "seriesDataMember", modelName: "@SeriesDataMember", displayName: "Series Data Member", editor: ko.bindingHandlers["displayNameExtender"] ? DevExpress.Analytics.Widgets.editorTemplates.field : Internal.editorTemplates.fieldChart, localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesDataMember' };
                Internal.dataContainerSerializationsInfo = [Internal.seriesDataMember, Internal.seriesSerializable, Internal.seriesTemplate, Internal.dataMember, Internal.pivotGridDataSourceOptions];
                Internal.dataContainer = { propertyName: "dataContainer", modelName: "DataContainer", displayName: "Data Container", info: Internal.dataContainerSerializationsInfo, from: Models.DataContainerViewModel.from, toJsonObject: Models.DataContainerViewModel.toJson, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditorCustom };
                Internal.titleSerializationsInfo = [chartTitleText, Internal.textColor, dock, Internal.titleAlignment, Internal.visibility, Internal.font18];
                Internal.titles = { propertyName: "titles", modelName: "Titles", displayName: "Titles", localizationId: 'DevExpress.XtraReports.UI.XRChart.Titles', array: true, editor: Internal.editorTemplates.collection };
                var markerMode = {
                    propertyName: "markerMode", modelName: "@MarkerMode", displayName: 'Marker Mode', localizationId: 'DevExpress.XtraCharts.Legend.MarkerMode', defaultVal: "Marker", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Marker", displayValue: DevExpress.Analytics.Utils.getLocalization('Marker', 'DevExpress.XtraCharts.LegendMarkerMode.Marker') }, { value: "CheckBox", displayValue: DevExpress.Analytics.Utils.getLocalization('Check Box', 'DevExpress.XtraCharts.LegendMarkerMode.CheckBox') }, { value: "CheckBoxAndMarker", displayValue: DevExpress.Analytics.Utils.getLocalization('Check Box and Marker', 'DevExpress.XtraCharts.LegendMarkerMode.CheckBoxAndMarker') }, { value: "MarkerAndCheckBox", displayValue: DevExpress.Analytics.Utils.getLocalization('Marker and Check Box', 'DevExpress.XtraCharts.LegendMarkerMode.MarkerAndCheckBox') }, { value: "None", displayValue: DevExpress.Analytics.Utils.getLocalization('None', 'DevExpress.XtraCharts.LegendMarkerMode.None') }]
                }, markerOffset = { propertyName: "markerOffset", modelName: "@MarkerOffset", displayName: 'Marker Offset', localizationId: 'DevExpress.XtraCharts.Legend.MarkerOffset', defaultVal: 2, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                Internal.legendSerializationsInfo = [Internal.textColor, Internal.backColor, direction, alignmentVertical, alignmentHorizontal, Internal.visibility, markerMode, markerOffset, Internal.border, Internal.margin, Internal.padding, Internal.font8];
                Internal.legend = { propertyName: "legend", modelName: "Legend", displayName: "Legend", localizationId: 'DevExpress.XtraCharts.Legend', info: Internal.legendSerializationsInfo, from: Internal.Models.LegendViewModel.from, toJsonObject: Internal.Models.LegendViewModel.toJson, defaultVal: {}, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                Internal.additionalLegendSerializationsInfo = [Internal.name].concat(Internal.legendSerializationsInfo);
                Internal.legends = { propertyName: "legends", modelName: "Legends", displayName: "Legends", localizationId: 'DevExpress.XtraReports.UI.XRChart.Legends', array: true, editor: Internal.editorTemplates.collection };
                Internal.appearanceName = {
                    propertyName: "appearanceName", modelName: "@AppearanceNameSerializable", displayName: "Appearance Name", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Nature Colors", displayValue: "Nature Colors", localizationId: 'ChartStringId.AppNatureColors' }, { value: "Pastel Kit", displayValue: "Pastel Kit", localizationId: 'ChartStringId.AppPastelKit' }, { value: "In A Fog", displayValue: "In A Fog", localizationId: 'ChartStringId.AppInAFog' }, { value: "Terracotta Pie", displayValue: "Terracotta Pie", localizationId: 'ChartStringId.PltTerracottaPie' }, { value: "Northern Lights", displayValue: "Northern Lights", localizationId: 'ChartStringId.PltNorthernLights' }, { value: "Chameleon", displayValue: "Chameleon", localizationId: 'ChartStringId.AppChameleon' }, { value: "The Trees", displayValue: "The Trees", localizationId: 'ChartStringId.PltTheTrees' }, { value: "Light", displayValue: "Light", localizationId: 'ChartStringId.AppLight' }, { value: "Gray", displayValue: "Gray", localizationId: 'ChartStringId.AppGray' }, { value: "Dark", displayValue: "Dark", localizationId: 'ChartStringId.AppDark' }, { value: "Dark Flat", displayValue: "Dark Flat", localizationId: 'ChartStringId.AppDarkFlat' }, { value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }],
                    localizationId: 'DevExpress.XtraReports.UI.XRChart.AppearanceName'
                };
                Internal.paletteName = {
                    propertyName: "paletteName", modelName: "@PaletteName", displayName: "Palette Name", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Default", displayValue: "Default", localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }, { value: "Nature Colors", displayValue: "Nature Colors", localizationId: 'ChartStringId.AppNatureColors' }, { value: "Pastel Kit", displayValue: "Pastel Kit", localizationId: 'ChartStringId.AppPastelKit' }, { value: "In A Fog", displayValue: "In A Fog", localizationId: 'ChartStringId.AppInAFog' }, { value: "Terracotta Pie", displayValue: "Terracotta Pie", localizationId: 'ChartStringId.PltTerracottaPie' }, { value: "Northern Lights", displayValue: "Northern Lights", localizationId: 'ChartStringId.PltNorthernLights' }, { value: "Chameleon", displayValue: "Chameleon", localizationId: 'ChartStringId.AppChameleon' }, { value: "The Trees", displayValue: "The Trees", localizationId: 'ChartStringId.PltTheTrees' }, { value: "Mixed", displayValue: "Mixed", localizationId: 'ChartStringId.PltMixed' }, { value: "Office", displayValue: "Office", localizationId: 'ChartStringId.PltOffice' }, { value: "Black and White", displayValue: "Black and White", localizationId: 'ChartStringId.PltBlackAndWhite' }, { value: "Grayscale", displayValue: "Grayscale", localizationId: 'ChartStringId.PltGrayscale' }, { value: "Apex", displayValue: "Apex", localizationId: 'ChartStringId.PltApex' }, { value: "Aspect", displayValue: "Aspect", localizationId: 'ChartStringId.PltAspect' }, { value: "Civic", displayValue: "Civic", localizationId: 'ChartStringId.PltCivic' }, { value: "Concourse", displayValue: "Concourse", localizationId: 'ChartStringId.PltConcourse' }, { value: "Equity", displayValue: "Equity", localizationId: 'ChartStringId.PltEquity' }, { value: "Flow", displayValue: "Flow", localizationId: 'ChartStringId.PltFlow' }, { value: "Foundry", displayValue: "Foundry", localizationId: 'ChartStringId.PltFoundry' }, { value: "Median", displayValue: "Median", localizationId: 'DevExpress.XtraReports.UI.SortingSummaryFunction.Median' }, { value: "Metro", displayValue: "Metro", localizationId: 'ChartStringId.PltMetro' }, { value: "Module", displayValue: "Module", localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Module' }, { value: "Opulent", displayValue: "Opulent", localizationId: 'ChartStringId.PltOpulent' }, { value: "Oriel", displayValue: "Oriel", localizationId: 'ChartStringId.PltOriel' }, { value: "Origin", displayValue: "Origin", localizationId: 'ChartStringId.PltOrigin' }, { value: "Paper", displayValue: "Paper", localizationId: 'ChartStringId.PltPaper' }, { value: "Solstice", displayValue: "Solstice", localizationId: 'ChartStringId.PltSolstice' }, { value: "Technic", displayValue: "Technic", localizationId: 'ChartStringId.PltTechnic' }, { value: "Trek", displayValue: "Trek", localizationId: 'ChartStringId.PltTrek' }, { value: "Urban", displayValue: "Urban", localizationId: 'ChartStringId.PltUrban' }, { value: "Verve", displayValue: "Verve", localizationId: 'ChartStringId.PltVerve' }, { value: "Office2013", displayValue: "Office2013" }, { value: "Blue Warm", displayValue: "Blue Warm", localizationId: 'ChartStringId.PltBlueWarm' }, { value: "Blue", displayValue: "Blue", localizationId: 'ChartStringId.PltBlue' }, { value: "Blue II", displayValue: "Blue II", localizationId: 'ChartStringId.PltBlueII' }, { value: "Blue Green", displayValue: "Blue Green", localizationId: 'ChartStringId.PltBlueGreen' }, { value: "Green", displayValue: "Green", localizationId: 'ChartStringId.PltGreen' }, { value: "Green Yellow", displayValue: "Green Yellow", localizationId: 'ChartStringId.PltGreenYellow' }, { value: "Yellow", displayValue: "Yellow", localizationId: 'ChartStringId.PltYellow' }, { value: "Yellow Orange", displayValue: "Yellow Orange", localizationId: 'ChartStringId.PltYellowOrange' }, { value: "Orange", displayValue: "Orange", localizationId: 'ChartStringId.PltOrange' }, { value: "Orange Red", displayValue: "Orange Red", localizationId: 'ChartStringId.PltOrangeRed' }, { value: "Red Orange", displayValue: "Red Orange", localizationId: 'ChartStringId.PltRedOrange' }, { value: "Red", displayValue: "Red", localizationId: 'ChartStringId.PltRed' }, { value: "Red Violet", displayValue: "Red Violet", localizationId: 'ChartStringId.PltRedViolet' }, { value: "Violet", displayValue: "Violet", localizationId: 'ChartStringId.PltViolet' }, { value: "Violet II", displayValue: "Violet II", localizationId: 'ChartStringId.PltVioletII' }, { value: "Marquee", displayValue: "Marquee", localizationId: 'ChartStringId.PltMarquee' }, { value: "Slipstream", displayValue: "Slipstream", localizationId: 'ChartStringId.PltSlipstream' }],
                    localizationId: 'DevExpress.XtraReports.UI.XRChart.PaletteName'
                };
                Internal.chartSerializationsInfo = [Internal.appearanceName, Internal.paletteName, sideBySideBarDistanceFixed, sideBySideBarDistance, Internal.dataContainer, Internal.diagram, Internal.titles, Internal.legend, Internal.legends];
                Internal.chart = { propertyName: "chart", modelName: "Chart", displayName: "Chart", from: Internal.Models.ChartViewModel.from, toJsonObject: Internal.Models.ChartViewModel.toJson, localizationId: 'DevExpress.XtraReports.UI.XRChart' };
                Internal.chartDataMember = { propertyName: "dataMember", displayName: "Data Member", defaultVal: "", editor: ko.bindingHandlers["displayNameExtender"] ? DevExpress.Analytics.Widgets.editorTemplates.dataMember : Internal.editorTemplates.dataMemberChart, localizationId: 'DevExpress.XtraReports.UI.XRSparkline.DataMember' };
                Internal.chartSeriesDataMember = { propertyName: "seriesDataMember", displayName: "Series Data Member", defaultVal: "", editor: Internal.editorTemplates.fieldChart, localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesDataMember' };
                Internal.fakeChartSerializationInfo = [
                    Internal.chartDataSource, Internal.chartDataMember, Internal.chartSeriesDataMember, Internal.seriesTemplate, Internal.seriesSerializable, Internal.diagram, Internal.titles, Internal.legend, Internal.legends
                ];
                Internal.chartControlSerializationsInfo = [Internal.chart];
                var ChartControlViewModel = (function (_super) {
                    __extends(ChartControlViewModel, _super);
                    function ChartControlViewModel(options) {
                        var _this = _super.call(this) || this;
                        _this.fieldListProvider = ko.observable(null);
                        _this.chart = options.chart ? options.chart : new Internal.Models.ChartViewModel(options.chartSource, new DevExpress.Analytics.Utils.ModelSerializer());
                        _this.dataSource = options.dataSource;
                        _this._initChartElementFunctions();
                        ["seriesDataMember", "dataMember"].forEach(function (val) {
                            _this[val] = ko.computed({
                                read: function () {
                                    return _this.chart.dataContainer[val]();
                                }, write: function (newVal) {
                                    _this.chart.dataContainer[val](newVal);
                                }
                            });
                        });
                        return _this;
                    }
                    ChartControlViewModel.prototype.getInfo = function () {
                        return Internal.chartControlSerializationsInfo;
                    };
                    ChartControlViewModel.prototype.getControlFactory = function () {
                        return Internal.controlsFactory;
                    };
                    ChartControlViewModel.prototype.isSeriesPropertyDisabled = function (name) {
                        if (!this.dataSource()) {
                            return name === "argumentDataMember" || name === "valueDataMembers" || name === "colorDataMember";
                        }
                    };
                    ChartControlViewModel.prototype.isSeriesTemplatePropertyDisabled = function (name) {
                        if (!this.dataSource()) {
                            return name === "argumentDataMember" || name === "valueDataMembers" || name === "valueScaleType" || name === "argumentScaleType";
                        }
                    };
                    ChartControlViewModel.prototype._getSeriesActualArgumentScaleType = function (argumentFieldName) {
                        var deffered = $.Deferred();
                        if (!argumentFieldName)
                            deffered.resolve(Series.ScaleType.Numerical);
                        var seriesDataMember = this.getPath("seriesDataMember");
                        if (this.fieldListProvider()) {
                            this.fieldListProvider().getItems(new DevExpress.Analytics.Utils.PathRequest(seriesDataMember))
                                .done(function (items) {
                                var result = items.filter(function (item) { return item.name === argumentFieldName; })[0];
                                var _scaleType = Series.ScaleType.Numerical;
                                if (result && result.specifics) {
                                    if (_isNumericTypeSpecific(result.specifics))
                                        _scaleType = Series.ScaleType.Numerical;
                                    else if (_isDateTypeSpecific(result.specifics))
                                        _scaleType = Series.ScaleType.DateTime;
                                    else
                                        _scaleType = Series.ScaleType.Qualitative;
                                }
                                deffered.resolve(_scaleType);
                            })
                                .fail(function () {
                                deffered.resolve(Series.ScaleType.Numerical);
                            });
                        }
                        return deffered.promise();
                    };
                    ChartControlViewModel.prototype._initSeries = function (series) {
                        var _this = this;
                        series["getPath"] = function (propertyName) {
                            if (propertyName === "argumentDataMember" || propertyName === "colorDataMember" || propertyName === "summaryFunction") {
                                return _this.getPath("seriesDataMember");
                            }
                        };
                        series["isPropertyDisabled"] = function (name) {
                            return _this.isSeriesPropertyDisabled(name);
                        };
                        series.valueDataMembers()["getPath"] = function (propertyName) {
                            return _this.getPath("seriesDataMember");
                        };
                        series._disposables.push(series.valueDataMembers.subscribe(function (newVal) {
                            newVal["getPath"] = function (propertyName) {
                                return _this.getPath("seriesDataMember");
                            };
                        }));
                        this._disposables.push(series.argumentDataMember.subscribe(function (newValue) {
                            if (_this.chart.dataContainer.seriesTemplate.argumentScaleType() !== "Auto")
                                return;
                            _this._getSeriesActualArgumentScaleType(newValue).done(function (scaleType) {
                                series._actualArgumentScaleType(scaleType);
                            });
                        }));
                    };
                    ChartControlViewModel.prototype._initChartElementFunctions = function () {
                        var _this = this;
                        this.chart.dataContainer.series().forEach(function (series) { return _this._initSeries(series); });
                        this._disposables.push(this.chart.dataContainer.series.subscribe(function (args) {
                            if (args[0].status === "added") {
                                _this._initSeries(args[0].value);
                            }
                        }, null, "arrayChange"));
                        this.chart.dataContainer.seriesTemplate["getPath"] = function (propertyName) {
                            return _this.getPath("seriesDataMember");
                        };
                        this.chart.dataContainer.seriesTemplate["isPropertyDisabled"] = function (name) {
                            return _this.isSeriesTemplatePropertyDisabled(name);
                        };
                        this.chart.dataContainer.seriesTemplate.valueDataMembers()["getPath"] = function (propertyName) {
                            return _this.getPath("seriesDataMember");
                        };
                        this._disposables.push(this.chart.dataContainer.seriesTemplate.valueDataMembers.subscribe(function (newValue) {
                            newValue["getPath"] = function (propertyName) {
                                return _this.getPath("seriesDataMember");
                            };
                        }));
                        this._disposables.push(this.chart.dataContainer.seriesTemplate.argumentDataMember.subscribe(function (newValue) {
                            if (_this.chart.dataContainer.seriesTemplate.argumentScaleType() !== "Auto")
                                return;
                            _this._getSeriesActualArgumentScaleType(newValue).done(function (scaleType) {
                                _this.chart.dataContainer.seriesTemplate._actualArgumentScaleType(scaleType);
                            });
                        }));
                    };
                    ChartControlViewModel.prototype.getPath = function (propertyName) {
                        var dataSourceInfo = this.dataSource();
                        var dataSourceName = (dataSourceInfo && dataSourceInfo.data && (dataSourceInfo.id || dataSourceInfo.ref)) || "";
                        if (propertyName === "seriesDataMember" || propertyName === "valueDataMembers" || propertyName === "colorDataMember") {
                            return DevExpress.Analytics.Internal.getFullPath(dataSourceName, this.chart.dataContainer.dataMember());
                        }
                        else if (propertyName === "dataMember") {
                            return dataSourceName;
                        }
                    };
                    ChartControlViewModel.prototype.serialize = function () {
                        return (new DevExpress.Analytics.Utils.ModelSerializer()).serialize(this);
                    };
                    ChartControlViewModel.prototype.save = function () {
                        var data = this.serialize();
                        if (this.onSave) {
                            this.onSave(data);
                        }
                        return data;
                    };
                    ChartControlViewModel.prototype.isPropertyDisabled = function (name) {
                        return !this.dataSource() && (name === "seriesDataMember" || name === "dataMember");
                    };
                    return ChartControlViewModel;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.ChartControlViewModel = ChartControlViewModel;
                var ChartControlSurface = (function (_super) {
                    __extends(ChartControlSurface, _super);
                    function ChartControlSurface(control, zoom, size) {
                        if (zoom === void 0) { zoom = ko.observable(1); }
                        if (size === void 0) { size = DevExpress.Analytics.Elements.Size.fromString("500, 500"); }
                        var _this = _super.call(this) || this;
                        _this.imageSrc = ko.observable("");
                        _this.templateName = "dx-chart-surface";
                        _this.width = ko.computed(function () { return size.width() * zoom(); });
                        _this.height = ko.computed(function () { return size.height() * zoom(); });
                        _this.zoom = zoom;
                        _this._disposables.push(_this.width);
                        _this._disposables.push(_this.height);
                        _this._disposables.push(ko.computed(function () {
                            var series = control.chart.dataContainer.series();
                            series.forEach(function (val) {
                                val.viewType();
                            });
                            var _self = _this;
                            if (Internal.HandlerUri) {
                                ChartRequests.getChartImage(Internal.HandlerUri, Internal.Models.ChartViewModel.toJson(ko.unwrap(control.chart), new DevExpress.Analytics.Utils.ModelSerializer(), null), _this.width(), _this.height()).done(function (result) {
                                    var allSeries = control.chart.dataContainer.series();
                                    allSeries.forEach(function (val) {
                                        val.isIncompatible(false);
                                    });
                                    _self.imageSrc("data:image/x;base64," + result.Image);
                                    result.Indexes.forEach(function (val) {
                                        var series = allSeries[val];
                                        series.isIncompatible(true);
                                    });
                                })
                                    .fail(function (result) {
                                    DevExpress.Analytics.Internal.NotifyAboutWarning("Impossible to get chart image.");
                                });
                            }
                        }));
                        return _this;
                    }
                    return ChartControlSurface;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.ChartControlSurface = ChartControlSurface;
                Internal.ActionId = {
                    Save: "dxxcd-save"
                };
                var ChartDesignerElements = {
                    Main: "dx-chart-middlePart",
                    Toolbar: "dxcd-toolbar",
                    RightPanel: "dx-right-panel-lightweight",
                    LeftPanel: "dx-chart-leftPanel"
                };
                Internal.controlsFactory = new DevExpress.Analytics.Utils.ControlsFactory();
                function registerControls() {
                    Internal.controlsFactory.registerControl("ChartControl", {
                        info: Internal.chartControlSerializationsInfo,
                        surfaceType: ChartControlSurface,
                        type: ChartControlViewModel,
                        elementActionsTypes: [],
                        isContainer: true,
                        nonToolboxItem: true
                    });
                }
                Internal.registerControls = registerControls;
                function deserializeModelArray(model, creator, prefix) {
                    var array = ko.observableArray();
                    array(DevExpress.Analytics.Utils.deserializeArray(model || {}, function (item) { return creator(item, array); })());
                    array()["innerActions"] = [{
                            text: DevExpress.Analytics.Utils.getLocalization("Add", 'ChartStringId.MenuItemAdd'),
                            imageClassName: "dxrd-image-add",
                            imageTemplateName: "dxrd-svg-operations-add",
                            disabled: ko.observable(false),
                            visible: true,
                            clickAction: function () {
                                array.push(creator({ "@Name": DevExpress.Analytics.Internal.getUniqueName(array().map(function (x) { return x["name"] && x["name"](); }), prefix) }, array));
                            }
                        }];
                    return array;
                }
                Internal.deserializeModelArray = deserializeModelArray;
                function parseDate(val) {
                    if (!val)
                        return null;
                    if (val instanceof Date)
                        return val;
                    var date = DevExpress.Analytics.Internal.parseDate(val);
                    if (!date) {
                        date = DevExpress.Analytics.Internal.parseDate(val, false, "MM/dd/yyyy HH:mm:ss.SSS");
                    }
                    return date;
                }
                Internal.parseDate = parseDate;
                function serializeDate(date) {
                    var milliseconds = date.getMilliseconds().toString();
                    var zeros;
                    switch (3 - milliseconds.length) {
                        case 2:
                            zeros = "00";
                            break;
                        case 1:
                            zeros = "0";
                            break;
                        default:
                            zeros = "";
                    }
                    return DevExpress.Analytics.Utils.serializeDate(date) + "." + zeros + milliseconds;
                }
                Internal.serializeDate = serializeDate;
                Internal.HandlerUri = "DXXCD.axd";
                var _limitation = false;
                Object.defineProperty(DevExpress.Reporting.Chart, "limitation", {
                    get: function () { return _limitation; },
                    set: function (newVal) {
                        _limitation = newVal;
                        Internal.viewBindableSerializationInfo.valuesArray = Internal.createViewsArray(newVal);
                    }
                });
                function customizeDesignerActions(designerModel, nextCustomizer) {
                    var chart = designerModel.model;
                    return (function (actions) {
                        var save = {
                            id: Internal.ActionId.Save,
                            text: "Save",
                            imageClassName: "dxrd-image-save",
                            imageTemplateName: "dxrd-svg-menu-save",
                            disabled: ko.observable(false),
                            visible: true,
                            hasSeparator: true,
                            hotKey: { ctrlKey: true, keyCode: "S".charCodeAt(0) },
                            clickAction: function () {
                                chart().save();
                            }
                        };
                        actions.splice(0, 0, save);
                        nextCustomizer && nextCustomizer(actions);
                    });
                }
                function updateChartSurfaceContentSize(element, surfaceSize, rtl) {
                    if (rtl === void 0) { rtl = false; }
                    var $element = $(element);
                    return function () {
                        var rightAreaWidth = $element.find(".dxrd-right-panel")[0].offsetWidth;
                        var leftAreaWidth = $element.find(".dx-chart-left-panel")[0].offsetWidth;
                        var otherWidth = rightAreaWidth + leftAreaWidth, surfaceWidth = $element.find(".dxcd-designer")[0].offsetWidth - (otherWidth + 5);
                        $element.find(".dxrd-surface-wrapper").eq(0).css({
                            "right": !rtl ? rightAreaWidth : leftAreaWidth,
                            "left": rtl ? rightAreaWidth : leftAreaWidth,
                            "width": surfaceWidth
                        });
                        surfaceSize(surfaceWidth);
                    };
                }
                Internal.updateChartSurfaceContentSize = updateChartSurfaceContentSize;
                function subscribeTreelistArray(chartStructureProvider, array, getPath, subscribeNewItem) {
                    return array.subscribe(function (args) {
                        args.forEach(function (changeSet) {
                            if (changeSet.status) {
                                var selectedPath = "";
                                var path = getPath();
                                if (changeSet.status === "deleted") {
                                    selectedPath = array().length === 0 ? path.join('.') : [].concat(path, "0").join('.');
                                }
                                else if (changeSet.status === "added") {
                                    selectedPath = [].concat(path, changeSet.index).join(".");
                                    subscribeNewItem && subscribeNewItem(changeSet.value, array, path);
                                }
                                chartStructureProvider.selectedPath(selectedPath);
                            }
                        });
                    }, null, "arrayChange");
                }
                Internal.subscribeTreelistArray = subscribeTreelistArray;
                function getPropertyInfo(serializationsInfo, index, pathComponets) {
                    var info = serializationsInfo.filter(function (info) { return info.propertyName === pathComponets[index]; })[0];
                    if (info && info.info && index++ < pathComponets.length)
                        info = getPropertyInfo(info.info, index, pathComponets);
                    return info;
                }
                Internal.getPropertyInfo = getPropertyInfo;
                function wrapSelectedElement(selectedElement, selectedElementInfo, displayName, propertyName) {
                    if (propertyName === void 0) { propertyName = "element"; }
                    var object = {};
                    object[propertyName] = selectedElement;
                    object["owner"] = ko.unwrap(selectedElement)["owner"];
                    object["getInfo"] = function () {
                        return [$.extend({}, selectedElementInfo, { displayName: displayName, propertyName: propertyName })];
                    };
                    return object;
                }
                function createChartStructure(chart, selectedItem, subscriptions) {
                    var fakeChart = {
                        dataSource: chart.dataSource,
                        dataMember: chart.chart.dataContainer.dataMember,
                        seriesDataMember: chart.chart.dataContainer.seriesDataMember,
                        seriesTemplate: chart.chart.dataContainer.seriesTemplate,
                        series: chart.chart.dataContainer.series,
                        diagram: ko.computed(function () {
                            if (chart.chart.dataContainer.series().length > 0 || !!chart.chart.dataContainer.seriesDataMember()) {
                                return chart.chart.diagram();
                            }
                            return null;
                        }),
                        titles: chart.chart.titles,
                        legend: chart.chart["legend"],
                        legends: chart.chart.legends,
                        getInfo: function () {
                            return Internal.fakeChartSerializationInfo;
                        },
                        getPath: function (propertyName) { return chart.getPath(propertyName); },
                        isPropertyDisabled: function (propertyName) { return chart.isPropertyDisabled(propertyName); },
                        className: function () { return 'chart'; }
                    };
                    var chartStructureProvider = new ChartStructureObjectProvider(fakeChart, "Chart", 'DevExpress.XtraReports.UI.XRChart');
                    var chartStructureTreeListController = new ChartStructureTreeListController(["chart", "Chart", "titles", "legend", "legends", "series", "diagram",
                        "defaultPane", "panes", "axisX", "axisY", "secondaryAxesX", "secondaryAxesY", "constantLines", "scaleBreaks", "strips", "seriesTemplate", "label", "points"], ["chart", "diagram", "axisX", "axisY", "titles", "legends", "series", "panes", "secondaryAxesX", "secondaryAxesY", "constantLines", "scaleBreaks", "strips", "SeriesViewModel", "SecondaryAxisViewModel"], function (newItem) {
                        var selectedElement = chartStructureProvider.selectedMember();
                        if (newItem.data.specifics === "points") {
                            selectedElement = wrapSelectedElement(ko.observableArray(selectedElement), Internal.points, newItem.data.displayName, "points");
                        }
                        else if (Array.isArray(selectedElement)) {
                            selectedElement = wrapSelectedElement(selectedElement, { editor: Internal.editorTemplates.collection }, newItem.data.displayName);
                        }
                        selectedItem(selectedElement);
                    });
                    var chartStructure = {
                        itemsProvider: chartStructureProvider,
                        treeListController: chartStructureTreeListController,
                        expandRootItems: true,
                        selectedPath: chartStructureProvider.selectedPath
                    };
                    chartStructureProvider.selectedPath("Chart");
                    selectedItem(null);
                    subscriptions.push(fakeChart.diagram);
                    subscriptions.push(subscribeTreelistArray(chartStructureProvider, chart.chart.dataContainer.series, function () { return ["Chart", "series"]; }));
                    subscriptions.push(subscribeTreelistArray(chartStructureProvider, chart.chart.titles, function () { return ["Chart", "titles"]; }));
                    subscriptions.push(subscribeTreelistArray(chartStructureProvider, chart.chart.legends, function () { return ["Chart", "legends"]; }));
                    var diagramSubscriptions = [];
                    var subscribeDiagram = function (diagram) {
                        diagramSubscriptions.forEach(function (val) { return val.dispose(); });
                        var axisCollectionNames = ["constantLines", "scaleBreaks", "strips"];
                        var subscribeAxis = function (axis, array, path) {
                            axisCollectionNames.forEach(function (propertyName) {
                                diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, axis[propertyName], function () { return [].concat(path, array.indexOf(axis), propertyName); }));
                            });
                        };
                        ["axisX", "axisY"].forEach(function (propertyName) {
                            if (diagram[propertyName]) {
                                axisCollectionNames.forEach(function (innerPropertyName) {
                                    if (diagram[propertyName][innerPropertyName]) {
                                        diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, diagram[propertyName][innerPropertyName], function () { return ["Chart", "diagram", propertyName, innerPropertyName]; }));
                                    }
                                });
                            }
                        });
                        ["secondaryAxesX", "secondaryAxesY"].forEach(function (propertyName) {
                            if (diagram[propertyName]) {
                                diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, diagram[propertyName], function () { return ["Chart", "diagram", propertyName]; }, subscribeAxis));
                                var axis = ko.unwrap(diagram[propertyName]);
                                for (var i = 0; i < axis.length; i++) {
                                    subscribeAxis(axis[i], axis, ["Chart", "diagram", propertyName]);
                                }
                            }
                        });
                        if (diagram.panes) {
                            diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, diagram.panes, function () { return ["Chart", "diagram", "panes"]; }));
                        }
                        [].push.apply(subscriptions, diagramSubscriptions);
                    };
                    subscribeDiagram(chart.chart.diagram());
                    chart.chart.diagram.subscribe(function (newVal) {
                        subscribeDiagram(newVal);
                    });
                    return chartStructure;
                }
                Internal.createChartStructure = createChartStructure;
                function createArrayOfNames(collectionProperty, defaultVal) {
                    return ko.computed(function () {
                        return (defaultVal && [defaultVal] || []).concat(collectionProperty().map(function (x) { return x.name(); }));
                    });
                }
                function createChartDesigner(element, options, applyBindings) {
                    if (applyBindings === void 0) { applyBindings = true; }
                    if (options.localization) {
                        DevExpress.Analytics.Utils.addCultureInfo(options.localization);
                    }
                    options.callbacks.fieldLists = options.callbacks.fieldLists || ChartRequests.fieldListCallback;
                    registerControls();
                    var chartControlModel = ko.observable(), surface = ko.observable(), dataBindingsProvider = ko.observable(), size = new DevExpress.Analytics.Elements.Size(options.data.width, options.data.height);
                    var chartStructure = ko.observable(null);
                    var chartSelectedItem = ko.observable(null);
                    var subscriptions = [];
                    var groups = ko.observableArray();
                    var chartSourceSubscription = null;
                    var undoModel = ko.observable({});
                    var initChartControlModel = function (newModel) {
                        surface() && surface()._disposables.forEach(function (item) { item.dispose(); });
                        subscriptions.forEach(function (item) { return item.dispose(); });
                        subscriptions = [];
                        if (newModel) {
                            groups(newModel.chart.dataContainer.series().map(function (x) { return x.view()["group"] || x["stackedGroup"]; }).filter(function (x) { return !!x; }).map(function (x) { return x(); }));
                            chartControlModel(newModel);
                            undoModel(newModel);
                            surface() && surface()._disposables.forEach(function (item) { item.dispose(); });
                            surface(new ChartControlSurface(newModel, ko.observable(1), size));
                            var fieldListProvider = ko.unwrap(options.fieldListProvider);
                            if (!!fieldListProvider) {
                                dataBindingsProvider(fieldListProvider);
                            }
                            else {
                                var _chartSources = options.data.dataSource && options.data.dataSource() ? [options.data.dataSource()] : [];
                                if (options.data.availableChartDataSources) {
                                    _chartSources = options.data.availableChartDataSources().map(function (x) {
                                        return x.value;
                                    });
                                }
                                var realChartSources = ko.observableArray(_chartSources);
                                dataBindingsProvider(new DevExpress.Analytics.Internal.FieldListProvider(options.callbacks.fieldLists, realChartSources));
                            }
                            newModel.fieldListProvider(dataBindingsProvider());
                            chartStructure(createChartStructure(newModel, chartSelectedItem, subscriptions));
                        }
                        designerModel.undoEngine().clearHistory();
                    };
                    var init = function (chartSourceValue) {
                        var newModel = new ChartControlViewModel({
                            chartSource: chartSourceValue,
                            dataSource: options.data.dataSource,
                            callbacks: options.callbacks,
                            size: {
                                height: ko.observable(options.data.height),
                                width: ko.observable(options.data.width),
                                isPropertyDisabled: function (name) { return true; }
                            }
                        });
                        initChartControlModel(newModel);
                    };
                    var undoEngine = new DevExpress.Analytics.Utils.UndoEngine(undoModel, ["viewType"], "getInfo");
                    undoEngine["_disposeUndoEngineSubscriptionsName"] += "chartdesigner";
                    var designerModel = {
                        model: chartControlModel,
                        chartStructure: chartStructure,
                        rightPanelHeader: function () { return DevExpress.Analytics.Utils.getLocalization('Chart Structure', 'ChartDesignerStringIDs.ChartStructureDockPanelTitle'); },
                        surface: surface,
                        undoEngine: ko.observable(undoEngine),
                        tabPanel: new DevExpress.Analytics.Utils.TabPanel({
                            tabs: [
                                new DevExpress.Analytics.Utils.TabInfo({
                                    text: "Properties",
                                    template: "dxrd-propertygridtab",
                                    model: new DevExpress.Analytics.Widgets.ObjectProperties(chartSelectedItem),
                                    localizationId: "AnalyticsCoreStringId.Cmd_Properties"
                                })
                            ],
                            rtl: options.rtl
                        }),
                        surfaceSize: ko.observable(0),
                        isLoading: ko.observable(true),
                        rtl: options.rtl,
                        groups: groups,
                        applyGroup: function (groupName) {
                            if (groups().indexOf(groupName) === -1 && !!groupName) {
                                groups.push(groupName);
                            }
                        }
                    };
                    DevExpress.Analytics.Internal.appendStaticContextToRootViewModel(designerModel, DevExpress);
                    if (options.data.chartSource) {
                        chartSourceSubscription = options.data.chartSource.subscribe(function (newValue) {
                            init(newValue);
                        });
                        init(options.data.chartSource());
                    }
                    else {
                        options.data.chart.subscribe(function (newVal) {
                            initChartControlModel(newVal);
                        });
                        initChartControlModel(options.data.chart());
                    }
                    designerModel.panes = createArrayOfNames(function () {
                        var panes = chartControlModel().chart.diagram().panes;
                        return panes && panes() || [];
                    }, Internal.paneName.defaultVal);
                    designerModel.legends = createArrayOfNames(function () {
                        var legends = chartControlModel().chart.legends;
                        return legends && legends() || [];
                    }, Internal.legendName.defaultVal);
                    designerModel.axisX = createArrayOfNames(function () {
                        var axisX = chartControlModel().chart.diagram().secondaryAxesX;
                        return axisX && axisX() || [];
                    }, Internal.axisXName.defaultVal);
                    designerModel.axisY = createArrayOfNames(function () {
                        var axisY = chartControlModel().chart.diagram().secondaryAxesY;
                        return axisY && axisY() || [];
                    }, Internal.axisYName.defaultVal);
                    if (options.data.availableChartDataSources) {
                        designerModel.chartDataSources = options.data.availableChartDataSources;
                    }
                    else {
                        var displayedChartSources = options.data.dataSource && options.data.dataSource() ? [{ displayName: options.data.dataSource().name, value: options.data.dataSource() }] : [];
                        designerModel.chartDataSources = ko.observableArray(displayedChartSources);
                    }
                    designerModel.rootStyle = "dxcd-designer dxd-back-primary";
                    designerModel.parts = [
                        { id: ChartDesignerElements.Main, templateName: ChartDesignerElements.Main, model: designerModel },
                        { id: ChartDesignerElements.Toolbar, templateName: ChartDesignerElements.Toolbar, model: designerModel },
                        { id: ChartDesignerElements.RightPanel, templateName: ChartDesignerElements.RightPanel, model: designerModel },
                        { id: ChartDesignerElements.LeftPanel, templateName: ChartDesignerElements.LeftPanel, model: designerModel }
                    ];
                    designerModel.dataBindingsProvider = dataBindingsProvider;
                    designerModel.actionLists = new DevExpress.Analytics.Internal.ActionLists(surface, null, designerModel.undoEngine, customizeDesignerActions(designerModel, options.callbacks.customizeActions));
                    designerModel.isLoading(false);
                    if (applyBindings) {
                        $(element).children().remove();
                        ko.applyBindings(designerModel, element);
                    }
                    var updateSurfaceContentSize_ = updateChartSurfaceContentSize(element, designerModel.surfaceSize, designerModel.rtl);
                    designerModel.tabPanel.width.subscribe(function () {
                        updateSurfaceContentSize_();
                    });
                    designerModel.subscriptions = subscriptions;
                    designerModel.chartSourceSubscription = chartSourceSubscription;
                    designerModel.updateSurfaceSize = function () {
                        updateSurfaceContentSize_();
                    };
                    if (applyBindings) {
                        designerModel.updateSurfaceSize();
                    }
                    options.callbacks && options.callbacks.init && options.callbacks.init(designerModel);
                    return designerModel;
                }
                Internal.createChartDesigner = createChartDesigner;
                ko.bindingHandlers["dxChartDesigner"] = {
                    init: function (element, valueAccessor) {
                        var options = ko.unwrap(valueAccessor()) || {};
                        $(element).children().remove();
                        var templateHtml = DevExpress.Analytics.Widgets.Internal.getTemplate('dxrd-designer'), $element = $(element).append(templateHtml);
                        var designerModel = createChartDesigner($element[0], options, false);
                        ko.applyBindings(designerModel, $element.children()[0]);
                        designerModel.updateSurfaceSize();
                        DevExpress.Analytics.Internal.addDisposeCallback(element, function () {
                            designerModel.model() && designerModel.model()._disposables.forEach(function (item) { return item.dispose(); });
                            designerModel.subscriptions.forEach(function (item) { return item.dispose(); });
                            designerModel.chartSourceSubscription && designerModel.chartSourceSubscription.dispose();
                            designerModel.subscriptions = [];
                            designerModel = null;
                        });
                        return { controlsDescendantBindings: true };
                    }
                };
            })(Internal = Chart.Internal || (Chart.Internal = {}));
        })(Chart = Reporting.Chart || (Reporting.Chart = {}));
        var Designer;
        (function (Designer) {
            var Actions;
            (function (Actions) {
                Actions.ActionId = {
                    NewReport: "dxrd-newreport",
                    NewReportViaWizard: "dxrd-newreport-via-wizard",
                    OpenReport: "dxrd-open-report",
                    ReportWizard: "dxrd-run-wizard",
                    ReportWizardFullScreen: "dxrd-run-wizard-full-screen",
                    Preview: "dxrd-preview",
                    Scripts: "dxrd-scripts",
                    AddDataSource: "dxrd-add-datasource",
                    AddSqlDataSource: "dxrd-add-sql-datasource",
                    AddMultiQuerySqlDataSource: "dxrd-add-multi-query-sql-datasource",
                    ValidateBindings: "dxrd-validate-bindings",
                    Save: "dxrd-save",
                    SaveAs: "dxrd-save-as",
                    Exit: "dxrd-exit",
                    FullScreen: "dxrd-fullscreen"
                };
            })(Actions = Designer.Actions || (Designer.Actions = {}));
            var Internal;
            (function (Internal) {
                var AlignmentHandler = (function () {
                    function AlignmentHandler(selectionProvider, surfaceContext) {
                        this._selectionProvider = selectionProvider;
                        this._surfaceContext = surfaceContext;
                    }
                    AlignmentHandler.prototype._getFocusedItem = function () { return this._selectionProvider.focused(); };
                    AlignmentHandler.prototype._getFocusedParent = function () { return this._selectionProvider.focused().parent; };
                    AlignmentHandler.prototype._getPositionFromBand = function (surface) {
                        var rect = $.extend({}, surface.rect());
                        var parent = surface.parent;
                        if (!(surface instanceof Bands.BandSurface)) {
                            while (!(parent instanceof Bands.BandSurface)) {
                                rect.left += parent.rect().left;
                                rect.top += parent.rect().top;
                                parent = parent.parent;
                            }
                            rect.bottom = rect.top + rect.height;
                            rect.right = rect.left + rect.width;
                        }
                        else {
                            parent = surface;
                        }
                        rect.band = parent;
                        return rect;
                    };
                    AlignmentHandler.prototype._visitAllSelectedItemsInSameContainerWithFocused = function (iterator) {
                        var focused = this._selectionProvider.focused();
                        var rect = this._getPositionFromBand(focused);
                        this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) {
                            return item !== focused;
                        }).forEach(function (item) {
                            iterator(item, rect);
                        });
                    };
                    AlignmentHandler.prototype._centerByBand = function (isHoriz, margins, rtl) {
                        if (rtl === void 0) { rtl = false; }
                        var axisProperty = isHoriz ? "left" : "top", lengthProperty = isHoriz ? "width" : "height", focusedParent = this._getFocusedParent(), bandOffset = focusedParent instanceof Bands.BandSurface ? margins.right() : 0, parentLengthProperty = focusedParent.rect()[lengthProperty] - bandOffset, minAxis = this._getFocusedItem().rect()[axisProperty], maxSide = this._getFocusedItem().rect()[axisProperty] + this._getFocusedItem().rect()[lengthProperty], newOffset;
                        this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.parent; }).forEach(function (item) {
                            var axis = item.rect()[axisProperty];
                            var side = item.rect()[axisProperty] + item.rect()[lengthProperty];
                            if (axis < minAxis) {
                                minAxis = axis;
                            }
                            if (side > maxSide) {
                                maxSide = side;
                            }
                        });
                        newOffset = (parentLengthProperty - (maxSide - minAxis)) / 2 - minAxis + (rtl ? bandOffset : 0);
                        this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.parent; }).forEach(function (item) {
                            var newVal = {};
                            newVal[axisProperty] = item.rect()[axisProperty] + newOffset;
                            newVal[lengthProperty] = item.rect()[lengthProperty];
                            item.rect(newVal);
                        });
                    };
                    AlignmentHandler.prototype._roundingValue = function (value, snapGridSize) {
                        return Math.round(value / snapGridSize) * snapGridSize;
                    };
                    AlignmentHandler.prototype.alignLeft = function () {
                        var _this = this;
                        this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                            if (item instanceof Controls.XRTableRowSurface) {
                                item = item.parent;
                            }
                            var parentRect = _this._getPositionFromBand(item.parent);
                            var left = rect.left - parentRect.left;
                            item.rect({ left: left });
                        });
                    };
                    AlignmentHandler.prototype.alignTop = function () {
                        var _this = this;
                        this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                            if (item instanceof Controls.XRTableCellSurface) {
                                item = item.parent;
                            }
                            var parentRect = _this._getPositionFromBand(item.parent);
                            if (parentRect["band"] === rect["band"]) {
                                var top = rect.top - parentRect.top;
                                item.rect({ top: top });
                            }
                        });
                    };
                    AlignmentHandler.prototype.alignRight = function () {
                        var _this = this;
                        this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                            if (item instanceof Controls.XRTableRowSurface) {
                                item = item.parent;
                            }
                            var parentRect = _this._getPositionFromBand(item.parent);
                            var right = rect.left - parentRect.left + rect.width;
                            var left = right - item.rect().width;
                            item.rect({ right: right, left: left });
                        });
                    };
                    AlignmentHandler.prototype.alignBottom = function () {
                        var _this = this;
                        this._visitAllSelectedItemsInSameContainerWithFocused(function (item, rect) {
                            if (item instanceof Controls.XRTableCellSurface) {
                                item = item.parent;
                            }
                            var parentRect = _this._getPositionFromBand(item.parent);
                            if (parentRect["band"] === rect["band"]) {
                                var bottom = rect.top - parentRect.top + rect.height;
                                var top = bottom - item.rect().height;
                                item.rect({ bottom: bottom, top: top });
                            }
                        });
                    };
                    AlignmentHandler.prototype.alignVerticalCenters = function () {
                        var focused = this._getFocusedItem();
                        var verticalCenter = focused.rect().left + focused.rect().width / 2;
                        this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                            if (item instanceof Controls.XRTableCellSurface) {
                                item = item.parent.parent;
                            }
                            else if (item instanceof Controls.XRTableRowSurface) {
                                item = item.parent;
                            }
                            if (focused.parent === item.parent) {
                                item.rect({ left: verticalCenter - item.rect().width / 2 });
                            }
                        });
                    };
                    AlignmentHandler.prototype.alignHorizontalCenters = function () {
                        var focused = this._getFocusedItem();
                        var horizontalCenter = focused.rect().top + focused.rect().height / 2;
                        this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                            if (item instanceof Controls.XRTableCellSurface) {
                                item = item.parent.parent;
                            }
                            else if (item instanceof Controls.XRTableRowSurface) {
                                item = item.parent;
                            }
                            if (focused.parent === item.parent) {
                                item.rect({ top: horizontalCenter - item.rect().height / 2 });
                            }
                        });
                    };
                    AlignmentHandler.prototype.sizeToControlWidth = function () {
                        var newWidth = this._getFocusedItem().rect().width;
                        this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                            if (item instanceof Controls.XRTableRowSurface) {
                                item = item.parent;
                            }
                            item.rect({ width: newWidth });
                        });
                    };
                    AlignmentHandler.prototype.sizeToControlHeight = function () {
                        var newHeight = this._getFocusedItem().rect().height;
                        this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                            if (item instanceof Controls.XRTableCellSurface) {
                                item = item.parent;
                            }
                            item.rect({ height: newHeight });
                        });
                    };
                    AlignmentHandler.prototype.sizeToControl = function () {
                        var newWidth = this._getFocusedItem().rect().width, newHeight = this._getFocusedItem().rect().height;
                        this._visitAllSelectedItemsInSameContainerWithFocused(function (item) {
                            if (item instanceof Controls.XRTableCellSurface) {
                                item.rect({ width: newWidth });
                                item.parent.rect({ height: newHeight });
                            }
                            else if (item instanceof Controls.XRTableRowSurface) {
                                item.rect({ height: newHeight });
                                item.parent.rect({ width: newWidth });
                            }
                            else {
                                item.rect({ width: newWidth, height: newHeight });
                            }
                        });
                    };
                    AlignmentHandler.prototype.centerHorizontally = function () {
                        this._centerByBand(true, this._surfaceContext().margins, this._surfaceContext().rtl());
                    };
                    AlignmentHandler.prototype.centerVertically = function () {
                        this._centerByBand(false, new DevExpress.Analytics.Elements.Margins(0, 0, 0, 0));
                    };
                    AlignmentHandler.prototype.alignToGrid = function () {
                        var _this = this;
                        var snapGridSize = this._surfaceContext().snapGridSize();
                        this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
                            if (item instanceof Controls.XRTableCellSurface) {
                                item.rect({
                                    left: _this._roundingValue(item.rect().left, snapGridSize)
                                });
                                item.parent.rect({
                                    top: _this._roundingValue(item.rect().top, snapGridSize)
                                });
                            }
                            else if (item instanceof Controls.XRTableRowSurface) {
                                item.rect({
                                    top: _this._roundingValue(item.rect().top, snapGridSize)
                                });
                                item.parent.rect({
                                    left: _this._roundingValue(item.rect().left, snapGridSize)
                                });
                            }
                            else {
                                item.rect({
                                    left: _this._roundingValue(item.rect().left, snapGridSize),
                                    top: _this._roundingValue(item.rect().top, snapGridSize)
                                });
                            }
                        });
                    };
                    AlignmentHandler.prototype.sizeToGrid = function () {
                        var _this = this;
                        var snapGridSize = this._surfaceContext().snapGridSize();
                        this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
                            if (item instanceof Controls.XRTableCellSurface) {
                                item.rect({
                                    left: _this._roundingValue(item.rect().left, snapGridSize),
                                    width: _this._roundingValue(item.rect().width, snapGridSize)
                                });
                                item.parent.rect({
                                    top: _this._roundingValue(item.rect().top, snapGridSize),
                                    height: _this._roundingValue(item.rect().height, snapGridSize)
                                });
                            }
                            else if (item instanceof Controls.XRTableRowSurface) {
                                item.rect({
                                    top: _this._roundingValue(item.rect().top, snapGridSize),
                                    height: _this._roundingValue(item.rect().height, snapGridSize)
                                });
                                item.parent.rect({
                                    left: _this._roundingValue(item.rect().left, snapGridSize),
                                    width: _this._roundingValue(item.rect().width, snapGridSize)
                                });
                            }
                            else {
                                item.rect({
                                    left: _this._roundingValue(item.rect().left, snapGridSize),
                                    top: _this._roundingValue(item.rect().top, snapGridSize),
                                    width: _this._roundingValue(item.rect().width, snapGridSize),
                                    height: _this._roundingValue(item.rect().height, snapGridSize)
                                });
                            }
                        });
                    };
                    AlignmentHandler.prototype.sendToBack = function () {
                        this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
                            if (!item.focused()) {
                                item.getControlModel()["sendToBack"]();
                            }
                        });
                        this._getFocusedItem().getControlModel()["sendToBack"]();
                    };
                    AlignmentHandler.prototype.bringToFront = function () {
                        var reverseSelectedItems = this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; });
                        reverseSelectedItems.reverse();
                        reverseSelectedItems.forEach(function (item) {
                            item.getControlModel()["bringToFront"]();
                        });
                    };
                    AlignmentHandler.prototype.canChangeZOrder = function () {
                        var focusedItem = this._getFocusedItem(), parent = focusedItem && focusedItem.parent;
                        if (!focusedItem || !parent)
                            return false;
                        var childrenCollection = parent.getChildrenCollection();
                        return (childrenCollection && childrenCollection.peek().length) > 1;
                    };
                    return AlignmentHandler;
                }());
                Internal.AlignmentHandler = AlignmentHandler;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Actions) {
                var ElementActions = (function (_super) {
                    __extends(ElementActions, _super);
                    function ElementActions(surfaceContext, selectionProvider) {
                        var _this = _super.call(this) || this;
                        _this._selectionProvider = selectionProvider;
                        _this._isMultiSelect = ko.observable(false);
                        var alignHandler = new Internal.AlignmentHandler(selectionProvider, surfaceContext);
                        var fitToContainerAction = new FitToContainerAction(selectionProvider.focused);
                        _super.prototype.initActions.call(_this, [
                            {
                                text: "Align to Grid",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Align to Grid", 'ReportStringId.Cmd_AlignToGrid'); },
                                imageClassName: "dxrd-image-actions-align_to_grid",
                                imageTemplateName: "dxrd-svg-actions-align_to_grid",
                                clickAction: function () { alignHandler.alignToGrid(); },
                                disabled: ko.pureComputed(function () { return _this._generalDisabled; }),
                            }, {
                                text: "Size to Grid",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Size to Grid", 'ReportStringId.UD_Capt_MakeSameSizeSizeToGrid'); },
                                imageClassName: "dxrd-image-actions-size_to_grid",
                                imageTemplateName: "dxrd-svg-actions-size_to_grid",
                                clickAction: function () { alignHandler.sizeToGrid(); },
                                disabled: ko.pureComputed(function () { return _this._generalDisabled; }),
                            }, {
                                text: "Center Horizontally",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Center Horizontally", 'ReportStringId.RibbonXRDesign_CenterHorizontally_STipTitle'); },
                                imageClassName: "dxrd-image-actions-center_horizontally",
                                imageTemplateName: "dxrd-svg-actions-center_horizontally",
                                clickAction: function () { alignHandler.centerHorizontally(); },
                                disabled: ko.pureComputed(function () { return _this._generalDisabled || selectionProvider.focused() instanceof Controls.XRCrossBandSurface; }),
                            }, {
                                text: "Center Vertically",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Center Vertically", 'ReportStringId.RibbonXRDesign_CenterVertically_STipTitle'); },
                                imageClassName: "dxrd-image-actions-center_vertically",
                                imageTemplateName: "dxrd-svg-actions-center_vertically",
                                clickAction: function () { alignHandler.centerVertically(); },
                                disabled: ko.pureComputed(function () { return _this._generalDisabled || selectionProvider.focused() instanceof Controls.XRCrossBandSurface; }),
                            }, {
                                text: "Bring to Front",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Bring to Front", 'ReportStringId.Cmd_BringToFront'); },
                                imageClassName: "dxrd-image-actions-bring_to_front",
                                imageTemplateName: "dxrd-svg-actions-bring_to_front",
                                clickAction: function () { alignHandler.bringToFront(); },
                                disabled: ko.pureComputed(function () { return _this._generalDisabled || !alignHandler.canChangeZOrder(); }),
                            }, {
                                text: "Send to Back",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Send to Back", 'ReportStringId.Cmd_SendToBack'); },
                                imageClassName: "dxrd-image-actions-send_to_back",
                                imageTemplateName: "dxrd-svg-actions-send_to_back",
                                clickAction: function () { alignHandler.sendToBack(); },
                                disabled: ko.pureComputed(function () { return _this._generalDisabled || !alignHandler.canChangeZOrder(); }),
                            }, {
                                text: "Fit Bounds To Container",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Fit Bounds To Container", 'ReportStringId.Cmd_FitBoundsToContainer'); },
                                imageClassName: "dxrd-image-actions-fit_to_—Åontainer",
                                imageTemplateName: "dxrd-svg-actions-fit_to_—Åontainer",
                                clickAction: function () { fitToContainerAction.doAction(); },
                                disabled: ko.pureComputed(function () { return _this._generalDisabled || !fitToContainerAction.allowed(); }),
                                visible: ko.pureComputed(function () {
                                    return !_this._isMultiSelect() && fitToContainerAction.visible();
                                })
                            }
                        ]);
                        _this.setDisabled = function (context) {
                            _this._generalDisabled = _this._selectionProvider.selectedItems.some(function (item) { return item.locked; });
                        };
                        return _this;
                    }
                    ElementActions.prototype.condition = function (context) {
                        this._isMultiSelect(context.controlType === "multiselect");
                        return !(context instanceof Controls.XRTableCellViewModel || context instanceof Controls.XRTableRowViewModel);
                    };
                    return ElementActions;
                }(DevExpress.Analytics.Internal.BaseActionsProvider));
                Actions.ElementActions = ElementActions;
                var ElementsGroupActions = (function (_super) {
                    __extends(ElementsGroupActions, _super);
                    function ElementsGroupActions(surfaceContext, selectionProvider) {
                        var _this = _super.call(this) || this;
                        _this._selectionProvider = selectionProvider;
                        var alignHandler = new Internal.AlignmentHandler(selectionProvider, surfaceContext), spaceCommandHandler = new Internal.SpaceCommandHandler(selectionProvider, surfaceContext);
                        _super.prototype.initActions.call(_this, [
                            {
                                text: "Align Lefts",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Align Lefts", 'ReportStringId.UD_TTip_AlignLeft'); },
                                imageClassName: "dxrd-image-actions-align_lefts",
                                imageTemplateName: "dxrd-svg-actions-align_lefts",
                                clickAction: function () { alignHandler.alignLeft(); },
                            }, {
                                text: "Align Centers",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Align Centers", 'ReportStringId.RibbonXRDesign_AlignVerticalCenters_STipTitle'); },
                                imageClassName: "dxrd-image-actions-align_centers",
                                imageTemplateName: "dxrd-svg-actions-align_centers",
                                clickAction: function () { alignHandler.alignVerticalCenters(); },
                            }, {
                                text: "Align Rights",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Align Rights", 'ReportStringId.RibbonXRDesign_AlignRight_Caption'); },
                                imageClassName: "dxrd-image-actions-align_rights",
                                imageTemplateName: "dxrd-svg-actions-align_rights",
                                clickAction: function () { alignHandler.alignRight(); },
                            }, {
                                text: "Align Tops",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Align Tops", 'ReportStringId.RibbonXRDesign_AlignTop_Caption'); },
                                imageClassName: "dxrd-image-actions-align_tops",
                                imageTemplateName: "dxrd-svg-actions-align_tops",
                                clickAction: function () { alignHandler.alignTop(); },
                            }, {
                                text: "Align Middles",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Align Middles", 'ReportStringId.RibbonXRDesign_AlignHorizontalCenters_Caption'); },
                                imageClassName: "dxrd-image-actions-align_middles",
                                imageTemplateName: "dxrd-svg-actions-align_middles",
                                clickAction: function () { alignHandler.alignHorizontalCenters(); },
                            }, {
                                text: "Align Bottoms",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Align Bottoms", 'ReportStringId.RibbonXRDesign_AlignBottom_Caption'); },
                                imageClassName: "dxrd-image-actions-align_bottoms",
                                imageTemplateName: "dxrd-svg-actions-align_bottoms",
                                clickAction: function () { alignHandler.alignBottom(); },
                            }, {
                                text: "Size to Control Width",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Size to Control Width", 'ASPxReportsStringId.ReportDesigner_ElementsAction_SizeToControlWidth'); },
                                imageClassName: "dxrd-image-actions-make_same_width",
                                imageTemplateName: "dxrd-svg-actions-make_same_width",
                                clickAction: function () { alignHandler.sizeToControlWidth(); },
                            }, {
                                text: "Size to Control Height",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Size to Control Height", 'ASPxReportsStringId.ReportDesigner_ElementsAction_SizeToControlHeight'); },
                                imageClassName: "dxrd-image-actions-make_same_height",
                                imageTemplateName: "dxrd-svg-actions-make_same_height",
                                clickAction: function () { alignHandler.sizeToControlHeight(); },
                            }, {
                                text: "Size to Control",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Size to Control", 'ASPxReportsStringId.ReportDesigner_ElementsAction_SizeToControl'); },
                                imageClassName: "dxrd-image-actions-make_same_sizes",
                                imageTemplateName: "dxrd-svg-actions-make_same_sizes",
                                clickAction: function () { alignHandler.sizeToControl(); },
                            }, {
                                text: "Make Horizontal Spacing Equal",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Make Horizontal Spacing Equal", 'ReportStringId.UD_TTip_HorizSpaceMakeEqual'); },
                                imageClassName: "dxrd-image-actions-make_horizontal_spacing_equal",
                                imageTemplateName: "dxrd-svg-actions-make_horizontal_spacing_equal",
                                clickAction: function () { spaceCommandHandler.horizSpaceMakeEqual(); },
                            }, {
                                text: "Increase Horizontal Spacing",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Increase Horizontal Spacing", 'ReportStringId.UD_TTip_HorizSpaceIncrease'); },
                                imageClassName: "dxrd-image-actions-increase_horizontal_spacing",
                                imageTemplateName: "dxrd-svg-actions-increase_horizontal_spacing",
                                clickAction: function () { spaceCommandHandler.horizSpaceIncrease(); },
                            }, {
                                text: "Decrease Horizontal Spacing",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Decrease Horizontal Spacing", 'ReportStringId.RibbonXRDesign_HorizSpaceDecrease_Caption'); },
                                imageClassName: "dxrd-image-actions-decrease_horizontal_spacing",
                                imageTemplateName: "dxrd-svg-actions-decrease_horizontal_spacing",
                                clickAction: function () { spaceCommandHandler.horizSpaceDecrease(); },
                            }, {
                                text: "Remove Horizontal Spacing",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Remove Horizontal Spacing", 'ReportStringId.RibbonXRDesign_HorizSpaceConcatenate_Caption'); },
                                imageClassName: "dxrd-image-actions-remove_horizontal_spacing",
                                imageTemplateName: "dxrd-svg-actions-remove_horizontal_spacing",
                                clickAction: function () { spaceCommandHandler.horizSpaceConcatenate(); },
                            }, {
                                text: "Make Vertical Spacing Equal",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Make Vertical Spacing Equal", 'ReportStringId.RibbonXRDesign_VertSpaceMakeEqual_Caption'); },
                                imageClassName: "dxrd-image-actions-make_vertical_spacing_equal",
                                imageTemplateName: "dxrd-svg-actions-make_vertical_spacing_equal",
                                clickAction: function () { spaceCommandHandler.vertSpaceMakeEqual(); },
                            }, {
                                text: "Increase Vertical Spacing",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Increase Vertical Spacing", 'ReportStringId.RibbonXRDesign_VertSpaceIncrease_STipTitle'); },
                                imageClassName: "dxrd-image-actions-increase_vertical_spacing",
                                imageTemplateName: "dxrd-svg-actions-increase_vertical_spacing",
                                clickAction: function () { spaceCommandHandler.vertSpaceIncrease(); },
                            }, {
                                text: "Decrease Vertical Spacing",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Decrease Vertical Spacing", 'ReportStringId.UD_TTip_VertSpaceDecrease'); },
                                imageClassName: "dxrd-image-actions-decrease_vertical_spacing",
                                imageTemplateName: "dxrd-svg-actions-decrease_vertical_spacing",
                                clickAction: function () { spaceCommandHandler.vertSpaceDecrease(); },
                            }, {
                                text: "Remove Vertical Spacing",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Remove Vertical Spacing", 'ReportStringId.UD_TTip_VertSpaceConcatenate'); },
                                imageClassName: "dxrd-image-actions-remove_vertical_spacing",
                                imageTemplateName: "dxrd-svg-actions-remove_vertical_spacing",
                                clickAction: function () { spaceCommandHandler.vertSpaceConcatenate(); },
                            }
                        ]);
                        _this.setDisabled = function (context) {
                            var isDisabled = _this._selectionProvider.selectedItems.some(function (item) { return item.locked; });
                            _this.actions.forEach(function (action) {
                                action.disabled(isDisabled);
                            });
                        };
                        return _this;
                    }
                    ElementsGroupActions.prototype.condition = function (context) {
                        return this._selectionProvider.selectedItems.length > 1;
                    };
                    return ElementsGroupActions;
                }(DevExpress.Analytics.Internal.BaseActionsProvider));
                Actions.ElementsGroupActions = ElementsGroupActions;
                var FitBoundsToTextAction = (function () {
                    function FitBoundsToTextAction(_control, textElementHelper) {
                        if (textElementHelper === void 0) { textElementHelper = new Internal.TextElementSizeHelper(); }
                        this._control = _control;
                        this.textElementHelper = textElementHelper;
                    }
                    FitBoundsToTextAction.prototype._getNewRectForVetical = function (textHeight, alignment) {
                        var contentSize = this._control.getContentSize();
                        var controlRect = this._control.rect();
                        var difference = contentSize.height - textHeight;
                        if (alignment === "Middle") {
                            return { top: controlRect.top + difference / 2, height: controlRect.height - difference };
                        }
                        else if (alignment === "Bottom") {
                            return { top: controlRect.top + difference, height: controlRect.height - difference };
                        }
                        else {
                            return { height: controlRect.height - difference };
                        }
                    };
                    FitBoundsToTextAction.prototype._findWidth = function (text, currentWidth) {
                        var _this = this;
                        var content = this._control.getCssContent();
                        if (!this._control.getWordWrap()) {
                            return this.textElementHelper.getTextContainerSize(text, content).width;
                        }
                        var horOffset = 0;
                        ["Left", "Right"].forEach(function (propertyName) {
                            horOffset += (parseFloat(content["padding" + propertyName]) * _this._control._context.zoom());
                            delete content["padding" + propertyName];
                        });
                        var words = text.split(' ');
                        var wordsWidths = words.map(function (line) { return _this.textElementHelper.getTextContainerSize(line, content).width; });
                        if (wordsWidths.some(function (width) { return width + horOffset > currentWidth; })) {
                            return currentWidth;
                        }
                        var spaceWidth = this.textElementHelper.getTextContainerSize("&nbsp", content).width;
                        return wordsWidths.reduce(function (accumulator, currentVal, index) {
                            if (index === 0)
                                return accumulator;
                            var newVal = spaceWidth + currentVal;
                            accumulator.lineWidth += newVal;
                            if (accumulator.lineWidth + horOffset > currentWidth) {
                                accumulator.lineWidth = currentVal;
                            }
                            if (accumulator.max < accumulator.lineWidth) {
                                accumulator.max = accumulator.lineWidth;
                            }
                            return accumulator;
                        }, { lineWidth: wordsWidths[0], max: wordsWidths[0] }).max + horOffset;
                    };
                    FitBoundsToTextAction.prototype._getNewRectForHorizontal = function (textWidth, alignment) {
                        var contentSize = this._control.getContentSize();
                        var controlRect = this._control.rect();
                        var difference = contentSize.width - textWidth;
                        if (alignment === "Center") {
                            return { left: controlRect.left + difference / 2, width: controlRect.width - difference };
                        }
                        else if (alignment === "Right") {
                            return { left: controlRect.left + difference, width: controlRect.width - difference };
                        }
                        else {
                            return { width: controlRect.width - difference };
                        }
                    };
                    FitBoundsToTextAction.prototype._getTextContainerSize = function (content) {
                        return this.textElementHelper.getTextContainerSize(this._control.getText(), this._control.getCssContent(content));
                    };
                    FitBoundsToTextAction.prototype._getTextHeight = function () {
                        var content = { width: this._control.getContentSize().width / this._control._context.zoom() };
                        return this._getTextContainerSize(content).height;
                    };
                    FitBoundsToTextAction.prototype.fitWidth = function () {
                        var width = this._findWidth(this._control.getText(), this._control.getContentSize().width);
                        var horizontalAlignment = this._control.getAlignments().horizontal;
                        this._control.rect(this._getNewRectForHorizontal(width, horizontalAlignment));
                    };
                    FitBoundsToTextAction.prototype.fitHeight = function () {
                        var height = this._getTextHeight();
                        var verticalAlignment = this._control.getAlignments().vertical;
                        this._control.rect(this._getNewRectForVetical(height, verticalAlignment));
                    };
                    FitBoundsToTextAction.prototype.fitBounds = function () {
                        var size = {
                            width: this._findWidth(this._control.getText(), this._control.getContentSize().width),
                            height: this._getTextHeight()
                        };
                        var alignment = this._control.getAlignments();
                        this._control.rect(DevExpress.Analytics.Internal.extend({}, this._getNewRectForHorizontal(size.width, alignment.horizontal), this._getNewRectForVetical(size.height, alignment.vertical)));
                    };
                    return FitBoundsToTextAction;
                }());
                Actions.FitBoundsToTextAction = FitBoundsToTextAction;
                var FitTextToBoundsAction = (function () {
                    function FitTextToBoundsAction(_control, textElementHelper) {
                        if (textElementHelper === void 0) { textElementHelper = new Internal.TextElementSizeHelper(); }
                        this._control = _control;
                        this.textElementHelper = textElementHelper;
                    }
                    FitTextToBoundsAction.prototype._getTextSide = function ($div, fontProperties, controlSize, getSide) {
                        var currentSide = getSide($div);
                        var sizeFounded = false;
                        var inc = controlSize / currentSide;
                        var currentFontSize = Math.ceil(fontProperties.size * inc);
                        while (!sizeFounded) {
                            $div.css({ "font-size": currentFontSize + fontProperties.unit });
                            if (getSide($div) > controlSize) {
                                currentFontSize -= 1;
                            }
                            else {
                                sizeFounded = true;
                            }
                        }
                        return currentFontSize;
                    };
                    FitTextToBoundsAction.prototype._calculateFont = function ($div, fontProperties, maxHeight) {
                        var sizeFounded = false;
                        var font = fontProperties.size;
                        var height = $div[0].getBoundingClientRect().height;
                        if (height === maxHeight)
                            return font;
                        var inc = height > maxHeight ? -1 : 1;
                        while (!sizeFounded) {
                            font += inc;
                            $div.css({ "font-size": font + fontProperties.unit });
                            var height = $div[0].getBoundingClientRect().height;
                            if (height < maxHeight && inc === -1) {
                                sizeFounded = true;
                            }
                            else if (inc === 1 && height > maxHeight) {
                                font -= inc;
                                sizeFounded = true;
                            }
                        }
                        return font;
                    };
                    FitTextToBoundsAction.prototype._getAvailableFont = function () {
                        var fontModel = this._control.getFontModel();
                        var containerSize = this._control.getContentSize();
                        var zoom = this._control._context.zoom();
                        var font = fontModel.size();
                        if (!this._control.getWordWrap()) {
                            var $div = this.textElementHelper.$createTextElement(this._control.getText(), this._control.getCssContent());
                            var fontByHeight = this._getTextSide($div, { size: font, unit: fontModel.unit() }, containerSize.height, function ($div) { return $div[0].getBoundingClientRect().height; });
                            var fontByWidth = this._getTextSide($div, { size: fontByHeight, unit: fontModel.unit() }, containerSize.width, function ($div) { return $div[0].getBoundingClientRect().width; });
                            $div.remove();
                            font = Math.min(fontByHeight, fontByWidth);
                        }
                        else {
                            var $div = this.textElementHelper.$createTextElement(this._control.getText(), this._control.getCssContent({ width: containerSize.width / zoom }));
                            font = this._calculateFont($div, { size: font, unit: fontModel.unit() }, containerSize.height - 2 * zoom);
                            $div.remove();
                        }
                        return font;
                    };
                    FitTextToBoundsAction.prototype.fit = function () {
                        this._control.setFontSize(this._getAvailableFont());
                    };
                    return FitTextToBoundsAction;
                }());
                Actions.FitTextToBoundsAction = FitTextToBoundsAction;
                var FitToContainerAction = (function () {
                    function FitToContainerAction(_control) {
                        var _this = this;
                        this._control = _control;
                        this._container = ko.pureComputed(function () { return _this._control() && _this._control().parent; });
                    }
                    FitToContainerAction.prototype.doAction = function () {
                        this._control().rect(this._container().getUsefulRect());
                    };
                    FitToContainerAction.prototype.allowed = function () {
                        var container = this._container();
                        if (!container || container.getChildrenCollection()().length > 1)
                            return false;
                        return (container instanceof Controls.XRTableCellSurface ||
                            container instanceof Controls.XRControlSurface ||
                            container instanceof Bands.BandSurface ||
                            container instanceof Bands.VerticalBandSurface);
                    };
                    FitToContainerAction.prototype.visible = function () {
                        return !(this._control() instanceof Controls.XRCrossBandSurface ||
                            this._control() instanceof Controls.XRPageBreakSurface ||
                            this._control() instanceof Controls.XRTableOfContentsSurface);
                    };
                    return FitToContainerAction;
                }());
                Actions.FitToContainerAction = FitToContainerAction;
                var PivotGridActions = (function (_super) {
                    __extends(PivotGridActions, _super);
                    function PivotGridActions() {
                        var _this = _super.call(this) || this;
                        _super.prototype.initActions.call(_this, [
                            {
                                text: "Insert Field in Filter Area",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Field in Filter Area", 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheFilterArea'); },
                                imageClassName: "dxrd-image-actions-add_field_to_filter_area",
                                imageTemplateName: "dxrd-svg-actions-add_field_to_filter_area",
                                clickAction: function (model) { model["addFieldToArea"]("FilterArea"); }
                            },
                            {
                                text: "Insert Field in Data Area",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Field in Data Area", 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheDataArea'); },
                                imageClassName: "dxrd-image-actions-add_field_to_data_area",
                                imageTemplateName: "dxrd-svg-actions-add_field_to_data_area",
                                clickAction: function (model) { model["addFieldToArea"]("DataArea"); }
                            },
                            {
                                text: "Insert Field in Column Area",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Field in Column Area", 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheColumnArea'); },
                                imageClassName: "dxrd-image-actions-add_field_to_column_area",
                                imageTemplateName: "dxrd-svg-actions-add_field_to_column_area",
                                clickAction: function (model) { model["addFieldToArea"]("ColumnArea"); }
                            },
                            {
                                text: "Insert Field in Row Area",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Field in Row Area", 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheRowArea'); },
                                imageClassName: "dxrd-image-actions-add_field_to_row_area",
                                imageTemplateName: "dxrd-svg-actions-add_field_to_row_area",
                                clickAction: function (model) { model["addFieldToArea"]("RowArea"); }
                            }
                        ]);
                        return _this;
                    }
                    PivotGridActions.prototype.condition = function (context) {
                        return context instanceof Controls.XRPivotGridViewModel;
                    };
                    return PivotGridActions;
                }(DevExpress.Analytics.Internal.BaseActionsProvider));
                Actions.PivotGridActions = PivotGridActions;
                var ReportActions = (function () {
                    function ReportActions(onComponentAdded) {
                        var _this = this;
                        this._contextModel = ko.observable();
                        this._targetModel = ko.computed(function () {
                            var model = _this._contextModel();
                            if (model) {
                                if (model.parentModel() && model.parentModel().parentModel() && model.controlType === "SubBand") {
                                    model = model.parentModel().parentModel();
                                }
                                else if (model.parentModel() && model.controlType !== "DevExpress.XtraReports.UI.XtraReport" && model.controlType !== "DetailReportBand") {
                                    model = model.parentModel();
                                }
                                else {
                                    model = model;
                                }
                            }
                            return model;
                        });
                        this.actions = [
                            {
                                text: "Insert Top Margin Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Top Margin Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertTopMarginBand'); },
                                imageClassName: "dxrd-image-actions-top_margin",
                                imageTemplateName: "dxrd-svg-actions-top_margin",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("TopMarginBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("TopMarginBand"); },
                            }, {
                                text: "Insert Report Header Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Report Header Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertReportHeaderBand'); },
                                imageClassName: "dxrd-image-actions-report_header",
                                imageTemplateName: "dxrd-svg-actions-report_header",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("ReportHeaderBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("ReportHeaderBand"); },
                            }, {
                                text: "Insert Page Header Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Page Header Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertPageHeaderBand'); },
                                imageClassName: "dxrd-image-actions-page_header",
                                imageTemplateName: "dxrd-svg-actions-page_header",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("PageHeaderBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("PageHeaderBand"); },
                            }, {
                                text: "Insert Group Header Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Group Header Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertGroupHeaderBand'); },
                                imageClassName: "dxrd-image-actions-group_header",
                                imageTemplateName: "dxrd-svg-actions-group_header",
                                disabled: ko.observable(false),
                                visible: true,
                                clickAction: function () { _this._addBand("GroupHeaderBand"); },
                            }, {
                                text: "Insert Detail Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Detail Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertDetailBand'); },
                                imageClassName: "dxrd-image-actions-detail",
                                imageTemplateName: "dxrd-svg-actions-detail",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("DetailBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("DetailBand"); },
                            }, {
                                text: "Insert Vertical Header Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Vertical Header Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertVerticalHeaderBand'); },
                                imageClassName: "dxrd-image-actions-vertical_header",
                                imageTemplateName: "dxrd-svg-actions-vertical_header",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("VerticalHeaderBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("VerticalHeaderBand"); },
                            }, {
                                text: "Insert Vertical Detail Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Vertical Detail Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertVerticalDetailBand'); },
                                imageClassName: "dxrd-image-actions-vertical_detail",
                                imageTemplateName: "dxrd-svg-actions-vertical_detail",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("VerticalDetailBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("VerticalDetailBand"); },
                            }, {
                                text: "Insert Vertical Total Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Vertical Total Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertVerticalTotalBand'); },
                                imageClassName: "dxrd-image-actions-vertical_total",
                                imageTemplateName: "dxrd-svg-actions-vertical_total",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("VerticalTotalBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("VerticalTotalBand"); },
                            }, {
                                text: "Insert Detail Report Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Detail Report Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertDetailReportBand'); },
                                imageClassName: "dxrd-image-actions-detail_report",
                                imageTemplateName: "dxrd-svg-actions-detail_report",
                                disabled: ko.observable(false),
                                visible: true,
                                clickAction: function () { _this._addBand("DetailReportBand"); },
                            }, {
                                text: "Insert Group Footer Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Group Footer Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertGroupFooterBand'); },
                                imageClassName: "dxrd-image-actions-group_footer",
                                imageTemplateName: "dxrd-svg-actions-group_footer",
                                disabled: ko.observable(false),
                                visible: true,
                                clickAction: function () { _this._addBand("GroupFooterBand"); },
                            }, {
                                text: "Insert Report Footer Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Report Footer Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertReportFooterBand'); },
                                imageClassName: "dxrd-image-actions-report_footer",
                                imageTemplateName: "dxrd-svg-actions-report_footer",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("ReportFooterBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("ReportFooterBand"); },
                            }, {
                                text: "Insert Page Footer Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Page Footer Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertPageFooterBand'); },
                                imageClassName: "dxrd-image-actions-page_footer",
                                imageTemplateName: "dxrd-svg-actions-page_footer",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("PageFooterBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("PageFooterBand"); },
                            }, {
                                text: "Insert Bottom Margin Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Bottom Margin Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertBottomMarginBand'); },
                                imageClassName: "dxrd-image-actions-bottom_margin",
                                imageTemplateName: "dxrd-svg-actions-bottom_margin",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("BottomMarginBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("BottomMarginBand"); },
                            }, {
                                text: "Insert Sub-Band",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Sub-Band", 'ASPxReportsStringId.ReportDesigner_ReportActions_InsertSubBand'); },
                                imageClassName: "dxrd-image-actions-subband",
                                imageTemplateName: "dxrd-svg-actions-subband",
                                disabled: ko.pureComputed(function () {
                                    return !_this._canAddBand("SubBand");
                                }),
                                visible: true,
                                clickAction: function () { _this._addBand("SubBand"); },
                            }
                        ];
                        this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                    }
                    ReportActions.prototype._canAddBand = function (bandType) {
                        if (!this._targetModel()) {
                            return false;
                        }
                        if (bandType === "GroupHeaderBand" || bandType === "GroupFooterBand" || bandType === "DetailReportBand") {
                            return true;
                        }
                        if (bandType === "SubBand") {
                            var model = (this._contextModel());
                            return model !== null && !model.lockedInUserDesigner() && (model.controlType.indexOf("XtraReport") === -1 && ["DetailReportBand", "TopMarginBand", "BottomMarginBand", "SubBand"].indexOf(model.controlType) === -1);
                        }
                        if (this._targetModel().controlType === "DetailReportBand" && (bandType === "TopMarginBand" || bandType === "BottomMarginBand" || bandType === "PageHeaderBand" || bandType === "PageFooterBand")) {
                            return false;
                        }
                        return this._targetModel()["bands"]().filter(function (band) { return band.controlType === bandType; }).length === 0;
                    };
                    ReportActions.prototype._addBand = function (bandType) {
                        if (this._canAddBand(bandType)) {
                            var model = this._targetModel();
                            if (bandType === "SubBand") {
                                model = this._contextModel();
                            }
                            var height = model.root["dpi"]();
                            var control = model.createChild({ "@ControlType": bandType, "@HeightF": height });
                            this.onComponentAdded({ parent: model, model: control });
                        }
                    };
                    ReportActions.prototype.getActions = function (context) {
                        if (context instanceof Controls.ReportViewModel || context instanceof Bands.BandViewModel) {
                            this._contextModel(context);
                            return this.actions;
                        }
                        else {
                            this._contextModel(null);
                        }
                        return [];
                    };
                    return ReportActions;
                }());
                Actions.ReportActions = ReportActions;
                var ReportElementActions = (function (_super) {
                    __extends(ReportElementActions, _super);
                    function ReportElementActions(surfaceContext, selection) {
                        return _super.call(this, surfaceContext, selection) || this;
                    }
                    ReportElementActions.prototype.getActions = function (context) {
                        if (context && !(context instanceof Controls.ReportViewModel || context instanceof Bands.BandViewModel) && (context instanceof Controls.XRReportElementViewModel || context.controlType === "multiselect")) {
                            return _super.prototype.getActions.call(this, context);
                        }
                        return [];
                    };
                    return ReportElementActions;
                }(ElementActions));
                Actions.ReportElementActions = ReportElementActions;
            })(Actions = Designer.Actions || (Designer.Actions = {}));
            (function (Internal) {
                var SpaceCommandHandler = (function () {
                    function SpaceCommandHandler(selectionProvider, surfaceContext) {
                        this._selectionProvider = selectionProvider;
                        this._surfaceContext = surfaceContext;
                    }
                    SpaceCommandHandler.prototype._comparer = function (propertyName) {
                        return function (a, b) {
                            return a.rect()[propertyName] - b.rect()[propertyName];
                        };
                    };
                    SpaceCommandHandler.prototype._spaceIncrease = function (sign, isHoriz) {
                        var sortedSelectedItems = this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }), axisProperty = isHoriz ? "left" : "top", lengthProperty = isHoriz ? "width" : "height", margin = isHoriz ? this._surfaceContext().margins.left() : 0, snapGridSize = this._surfaceContext().snapGridSize(), focusedParent = this._selectionProvider.focused().getControlModel().parentModel(), focusedItem = this._selectionProvider.focused();
                        sortedSelectedItems.sort(this._comparer(axisProperty));
                        var focusedItemIndex = sortedSelectedItems.indexOf(this._selectionProvider.focused());
                        this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return item !== focusedItem && item.getControlModel().parentModel() === focusedParent; }).forEach(function (item) {
                            var itemIndex = sortedSelectedItems.indexOf(item), spaceOffset = Math.abs(itemIndex - focusedItemIndex) * snapGridSize * sign, itemAxisProperty = item.rect()[axisProperty], itemLengthProperty = item.rect()[lengthProperty], parentLengthProperty = item.parent.rect()[lengthProperty] - margin, newValue;
                            if (itemIndex < focusedItemIndex) {
                                newValue = itemAxisProperty - spaceOffset;
                                if (newValue < 0) {
                                    newValue = 0;
                                }
                            }
                            else {
                                newValue = itemAxisProperty + spaceOffset;
                                if ((newValue + itemLengthProperty) > parentLengthProperty) {
                                    newValue = parentLengthProperty - itemLengthProperty;
                                }
                            }
                            var val = {};
                            val[axisProperty] = newValue;
                            item.rect(val);
                        });
                    };
                    SpaceCommandHandler.prototype._spaceMakeEqual = function (isHoriz) {
                        this._concatenateWithSpace(isHoriz, function (sortedSelectedItems, axisProperty, lengthProperty) {
                            var averageSpace = 0;
                            for (var i = 0; i < sortedSelectedItems.length - 1; i++) {
                                var currentValue = sortedSelectedItems[i + 1].rect()[axisProperty] - (sortedSelectedItems[i].rect()[axisProperty] + sortedSelectedItems[i].rect()[lengthProperty]);
                                averageSpace = (averageSpace * i + currentValue) / (i + 1);
                            }
                            return averageSpace;
                        });
                    };
                    SpaceCommandHandler.prototype._concatenateWithSpace = function (isHoriz, getSpaceSize) {
                        var sortedSelectedItems = this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }), axisProperty = isHoriz ? "left" : "top", lengthProperty = isHoriz ? "width" : "height", spaceSize = 0, focusedParent = this._selectionProvider.focused().getControlModel().parentModel();
                        sortedSelectedItems.sort(this._comparer(axisProperty));
                        spaceSize = getSpaceSize(sortedSelectedItems, axisProperty, lengthProperty);
                        this._selectionProvider.selectedItems.filter(function (item) { return !item.locked; }).filter(function (item) { return focusedParent === item.getControlModel().parentModel(); }).forEach(function (item) {
                            var itemIndex = sortedSelectedItems.indexOf(item);
                            if (itemIndex > 0) {
                                var prevControl = sortedSelectedItems[itemIndex - 1], val = {};
                                val[axisProperty] = prevControl.rect()[axisProperty] + prevControl.rect()[lengthProperty] + spaceSize;
                                item.rect(val);
                            }
                        });
                    };
                    SpaceCommandHandler.prototype.horizSpaceConcatenate = function () {
                        this._concatenateWithSpace(true, function () { return 0; });
                    };
                    SpaceCommandHandler.prototype.vertSpaceConcatenate = function () {
                        this._concatenateWithSpace(false, function () { return 0; });
                    };
                    SpaceCommandHandler.prototype.horizSpaceMakeEqual = function () {
                        this._spaceMakeEqual(true);
                    };
                    SpaceCommandHandler.prototype.vertSpaceMakeEqual = function () {
                        this._spaceMakeEqual(false);
                    };
                    SpaceCommandHandler.prototype.horizSpaceDecrease = function () {
                        this._spaceIncrease(-1, true);
                    };
                    SpaceCommandHandler.prototype.horizSpaceIncrease = function () {
                        this._spaceIncrease(1, true);
                    };
                    SpaceCommandHandler.prototype.vertSpaceDecrease = function () {
                        this._spaceIncrease(-1, false);
                    };
                    SpaceCommandHandler.prototype.vertSpaceIncrease = function () {
                        this._spaceIncrease(1, false);
                    };
                    return SpaceCommandHandler;
                }());
                Internal.SpaceCommandHandler = SpaceCommandHandler;
                var DataSourceActions = (function () {
                    function DataSourceActions(dsHelper, reportViewModel, undoEngine) {
                        var _this = this;
                        this.removeDataSourceAction = {
                            clickAction: function (item) {
                                _this.removeDataSource(item.data.name);
                            },
                            position: 50,
                            imageClassName: "dxrd-image-recycle-bin",
                            imageTemplateName: "dxrd-svg-operations-recycle_bin",
                            text: DevExpress.Analytics.Utils.getLocalization("Remove Data Source", "ASPxReportsStringId.ReportDesigner_FieldListActions_RemoveDataSource")
                        };
                        this._dsHelper = dsHelper;
                        this._reportViewModel = reportViewModel;
                        this._undoEngine = undoEngine;
                    }
                    DataSourceActions.prototype._findDataSource = function (dataSourceID) {
                        return this._dsHelper().usedDataSources().filter(function (item) {
                            return item.id === dataSourceID || item.ref === dataSourceID;
                        })[0];
                    };
                    DataSourceActions.prototype.removeDataSource = function (dataSourceID) {
                        var dsInfo = this._findDataSource(dataSourceID);
                        if (!dsInfo)
                            return;
                        Internal.removeDataSourceFromReport(this._dsHelper(), this._reportViewModel().dataSource, this._undoEngine, dsInfo);
                    };
                    DataSourceActions.prototype.getActions = function (context) {
                        var result = [];
                        if (!context.data)
                            return result;
                        if (context.data["canRemove"] === true) {
                            result.push(this.removeDataSourceAction);
                        }
                        return result;
                    };
                    return DataSourceActions;
                }());
                Internal.DataSourceActions = DataSourceActions;
                var CreateQueryIterator = (function (_super) {
                    __extends(CreateQueryIterator, _super);
                    function CreateQueryIterator() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    CreateQueryIterator.prototype.getNextPageId = function (pageId) {
                        if (!pageId) {
                            return DevExpress.Analytics.Wizard.SqlDataSourceWizardPageId.ConfigureQueryPage;
                        }
                        return _super.prototype.getNextPageId.call(this, pageId);
                    };
                    return CreateQueryIterator;
                }(DevExpress.Analytics.Wizard.DataSourceWizardPageIterator));
                Internal.CreateQueryIterator = CreateQueryIterator;
                var SqlDataSourceEditor = (function () {
                    function SqlDataSourceEditor(dsHelper, dataSourceWizard, reportViewModel, undoEngine, itemsProvider) {
                        var _this = this;
                        this.relationsEditor = ko.observable();
                        this.addAction = {
                            clickAction: function (item) {
                                _this.addSqlQuery(item.data.name);
                            },
                            imageClassName: "dxrd-image-add-query",
                            imageTemplateName: "dxrd-svg-operations-add_query",
                            text: DevExpress.Analytics.Utils.getLocalization("Add query", "AnalyticsCoreStringId.SqlDSWizard_AddQuery")
                        };
                        this.editAction = {
                            clickAction: function (item) {
                                _this.editSqlQuery(new DevExpress.Analytics.Utils.PathRequest(item.path).id, item.name);
                            },
                            position: 0,
                            imageClassName: "dx-image-edit",
                            imageTemplateName: "dxrd-svg-operations-edit",
                            text: DevExpress.Analytics.Utils.getLocalization("Edit query", "AnalyticsCoreStringId.SqlDSWizard_EditQuery")
                        };
                        this.removeAction = {
                            clickAction: function (item) {
                                _this.removeSqlQuery(new DevExpress.Analytics.Utils.PathRequest(item.path).id, item.name);
                            },
                            position: 50,
                            imageClassName: "dxrd-image-recycle-bin",
                            imageTemplateName: "dxrd-svg-operations-recycle_bin",
                            text: DevExpress.Analytics.Utils.getLocalization("Remove query", "AnalyticsCoreStringId.SqlDSWizard_RemoveQuery")
                        };
                        this.editRelationsAction = {
                            clickAction: function (item) {
                                _this.editMasterDetailRelations(item.data.name);
                            },
                            position: 0,
                            imageClassName: "dx-image-edit",
                            imageTemplateName: "dxrd-svg-operations-edit",
                            text: DevExpress.Analytics.Utils.getLocalization("Edit Master-Detail Relations", "ASPxReportsStringId.ReportDesigner_FieldListActions_EditMasterDetailRelations")
                        };
                        this._dsHelper = dsHelper;
                        this._wizard = dataSourceWizard;
                        this._reportViewModel = reportViewModel;
                        this._undoEngine = undoEngine;
                        this._itemsProvider = itemsProvider;
                    }
                    SqlDataSourceEditor.prototype._applyWizardChanges = function (dataSource, wizardModel, queryName, relationsEditing) {
                        return this._applyDataSourceChange(wizardModel.sqlDataSource, dataSource, queryName, relationsEditing);
                    };
                    SqlDataSourceEditor.prototype._createOrEditSqlDataSource = function (requestJson, dataSource, requestName) {
                        var _this = this;
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, requestName, encodeURIComponent(requestJson))
                            .done(function (result) {
                            result.dataSource.data = JSON.parse(result.dataSource.data);
                            result.dataSource.isSqlDataSource = true;
                            if (dataSource) {
                                dataSource.data["base64"](result.dataSource.data["@Base64"]);
                            }
                            else {
                                Internal.addDataSourceToReport(_this._dsHelper(), _this._reportViewModel(), _this._undoEngine(), _this._itemsProvider(), result.dataSource);
                            }
                        })
                            .fail(function (result) {
                            if (DevExpress.Analytics.Internal.getErrorMessage(result))
                                DevExpress.Analytics.Internal.ShowMessage(DevExpress.Analytics.Internal.getErrorMessage(result));
                        });
                    };
                    SqlDataSourceEditor.prototype._applyDataSourceChange = function (source, dest, queryName, relationsEditing) {
                        var _this = this;
                        return SqlDataSourceEditor.createSqlDataSourceInfo(source, queryName, relationsEditing)
                            .done(function (result) {
                            if (dest) {
                                dest.data["base64"](result.base64());
                            }
                            else {
                                Internal.addDataSourceToReport(_this._dsHelper(), _this._reportViewModel(), _this._undoEngine(), _this._itemsProvider(), result);
                            }
                        });
                    };
                    SqlDataSourceEditor.prototype._findDataSource = function (dataSourceID) {
                        return this._dsHelper().usedDataSources().filter(function (item) {
                            return item.id === dataSourceID || item.ref === dataSourceID;
                        })[0];
                    };
                    SqlDataSourceEditor._onFail = function (result, deferred) {
                        if (DevExpress.Analytics.Internal.getErrorMessage(result))
                            DevExpress.Analytics.Internal.ShowMessage(DevExpress.Analytics.Internal.getErrorMessage(result));
                        deferred.reject(result);
                    };
                    SqlDataSourceEditor.prototype.editSqlQuery = function (dataSourceID, queryName) {
                        var _this = this;
                        var dataSourceInfo = this._findDataSource(dataSourceID);
                        Internal.ReportDataSourceService.sqlDataSourceFromBase64(dataSourceInfo.data["base64"]()).done(function (result) {
                            var sqlDataSource = new DevExpress.Analytics.Data.SqlDataSource(JSON.parse(result.sqlDataSourceJSON), undefined, Internal.QBRequestWrapper);
                            sqlDataSource.name(dataSourceInfo.name);
                            _this._wizard.initialize({
                                dataSourceType: DevExpress.Analytics.Wizard.DataSourceType.Sql,
                                sqlDataSourceWizard: {
                                    name: sqlDataSource.connection.name(),
                                    queryName: queryName,
                                    sqlDataSourceJSON: JSON.stringify(new DevExpress.Analytics.Utils.ModelSerializer().serialize(sqlDataSource))
                                }
                            }, function (factory, stateManager) { return new CreateQueryIterator(factory, stateManager, _this._wizard["_wizardOptions"]); });
                            _this._wizard.start();
                            _this._wizard.isVisible(true);
                        });
                    };
                    SqlDataSourceEditor.prototype.addSqlQuery = function (dataSourceID) {
                        this.editSqlQuery(dataSourceID, null);
                    };
                    SqlDataSourceEditor.prototype.removeSqlQuery = function (dataSourceID, queryName) {
                        var _this = this;
                        var dataSourceInfo = this._findDataSource(dataSourceID);
                        Internal.ReportDataSourceService.sqlDataSourceFromBase64(dataSourceInfo.data["base64"]()).done(function (result) {
                            var sqlDataSource = new DevExpress.Analytics.Data.SqlDataSource(JSON.parse(result.sqlDataSourceJSON));
                            sqlDataSource.queries.remove(function (x) { return x.name() === queryName; });
                            _this._applyWizardChanges(dataSourceInfo, { sqlDataSource: sqlDataSource }, queryName);
                        });
                    };
                    SqlDataSourceEditor.prototype.editMasterDetailRelations = function (dataSourceID) {
                        var _this = this;
                        var dataSourceInfo = this._findDataSource(dataSourceID);
                        Internal.ReportDataSourceService.sqlDataSourceFromBase64(dataSourceInfo.data["base64"]()).done(function (result) {
                            var sqlDataSource = new DevExpress.Analytics.Data.SqlDataSource(JSON.parse(result.sqlDataSourceJSON));
                            if (sqlDataSource.queries().length < 2) {
                                DevExpress.Analytics.Internal.ShowMessage(DevExpress.Analytics.Utils.getLocalization("At least two queries are required to create a master-detail relation.", "DataAccessUIStringId.MessageLessThanTwoQueries"), "warning", 10000);
                                return;
                            }
                            _this.relationsEditor(new DevExpress.QueryBuilder.Widgets.Internal.MasterDetailEditor(sqlDataSource.relations, sqlDataSource.resultSet, function () {
                                return _this._applyWizardChanges(dataSourceInfo, { sqlDataSource: sqlDataSource }, "", true);
                            }));
                            _this.relationsEditor().popupVisible(true);
                        });
                    };
                    SqlDataSourceEditor.prototype.applySqlDataSourceWizardChanges = function (dataSourceWizardModel) {
                        var dataSourceWrapped = DevExpress.Analytics.Wizard._restoreSqlDataSourceFromState(dataSourceWizardModel.sqlDataSourceWizard, Internal.QBRequestWrapper, dataSourceWizardModel.dataSourceId);
                        var dataSource = this._dsHelper().findDataSourceInfoByName(dataSourceWrapped.sqlDataSource.name());
                        return this._applyDataSourceChange(dataSourceWrapped.sqlDataSource, dataSource, dataSourceWrapped.sqlQuery && dataSourceWrapped.sqlQuery.name());
                    };
                    SqlDataSourceEditor.createSqlDataSourceInfo = function (source, queryName, relationsEditing) {
                        var deferred = $.Deferred();
                        Internal.QBRequestWrapper.rebuildResultSchema(source, queryName, relationsEditing)
                            .done(function (result) {
                            var model = JSON.parse(result.resultSchemaJSON);
                            source.resultSet = !!model ? new DevExpress.Analytics.Data.ResultSet(model) : null;
                            if (!!result.connectionParameters) {
                                source.connection.parameteres((function (x) { try {
                                    return JSON.parse(x)["Parameters"] || x;
                                }
                                catch (_) {
                                    return x;
                                } })(result.connectionParameters));
                                source.connection.fromAppConfig(false);
                            }
                            Internal.ReportDataSourceService.getSqlDataSourceBase64(source)
                                .done(function (result) {
                                deferred.resolve({
                                    name: "sqlDataSource",
                                    id: source.id,
                                    data: {
                                        "@ObjectType": "DevExpress.DataAccess.Sql.SqlDataSource",
                                        "@Base64": result
                                    },
                                    isSqlDataSource: true,
                                    base64: function () { return result; }
                                });
                            })
                                .fail(function (result) { SqlDataSourceEditor._onFail(result, deferred); });
                        })
                            .fail(function (result) { SqlDataSourceEditor._onFail(result, deferred); });
                        return deferred.promise();
                    };
                    SqlDataSourceEditor.prototype.getActions = function (context) {
                        var result = [];
                        if (!context.data)
                            return result;
                        if (context.data["canAddSqlQuery"] === true) {
                            result.push(this.addAction);
                            result.push(this.editRelationsAction);
                        }
                        if (context.data["canEditQuery"] === true) {
                            result.push(this.editAction);
                            result.push(this.removeAction);
                        }
                        return result;
                    };
                    return SqlDataSourceEditor;
                }());
                Internal.SqlDataSourceEditor = SqlDataSourceEditor;
                var EditSchemaIterator = (function (_super) {
                    __extends(EditSchemaIterator, _super);
                    function EditSchemaIterator() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    EditSchemaIterator.prototype.getNextPageId = function (pageId) {
                        if (!pageId)
                            return DevExpress.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
                        return _super.prototype.getNextPageId.call(this, pageId);
                    };
                    return EditSchemaIterator;
                }(DevExpress.Analytics.Wizard.DataSourceWizardPageIterator));
                Internal.EditSchemaIterator = EditSchemaIterator;
                var JsonDataSourceEditor = (function () {
                    function JsonDataSourceEditor(dsHelper, dataSourceWizard, reportViewModel, undoEngine, itemsProvider) {
                        var _this = this;
                        this.editSchemaAction = {
                            clickAction: function (item) {
                                _this.editSchema(new DevExpress.Analytics.Utils.PathRequest(item.path).id);
                            },
                            position: 0,
                            imageClassName: "dx-image-edit",
                            imageTemplateName: "dxrd-svg-operations-edit",
                            text: DevExpress.Analytics.Utils.getLocalization("Edit Schema...", "TODO")
                        };
                        this._dsHelper = dsHelper;
                        this._wizard = dataSourceWizard;
                        this._reportViewModel = reportViewModel;
                        this._undoEngine = undoEngine;
                        this._itemsProvider = itemsProvider;
                    }
                    JsonDataSourceEditor.prototype._applyDataSourceChange = function (source, dest) {
                        var _this = this;
                        return JsonDataSourceEditor.createJsonDataSourceInfo(source)
                            .done(function (result) {
                            if (dest) {
                                dest.data["base64"](result.base64());
                            }
                            else {
                                Internal.addDataSourceToReport(_this._dsHelper(), _this._reportViewModel(), _this._undoEngine(), _this._itemsProvider(), result);
                            }
                        });
                    };
                    JsonDataSourceEditor.prototype._findDataSource = function (dataSourceID) {
                        return this._dsHelper().usedDataSources().filter(function (item) {
                            return item.id === dataSourceID || item.ref === dataSourceID;
                        })[0];
                    };
                    JsonDataSourceEditor._onFail = function (result, deferred) {
                        if (DevExpress.Analytics.Internal.getErrorMessage(result))
                            DevExpress.Analytics.Internal.ShowMessage(DevExpress.Analytics.Internal.getErrorMessage(result));
                        deferred.reject(result);
                    };
                    JsonDataSourceEditor.prototype.editSchema = function (dataSourceID) {
                        var _this = this;
                        var dataSourceInfo = this._findDataSource(dataSourceID);
                        Internal.ReportDataSourceService.jsonDataSourceFromBase64(dataSourceInfo.data["base64"]())
                            .done(function (result) {
                            var jsonDataSource = new DevExpress.Analytics.Data.JsonDataSource(JSON.parse(result.jsonDataSourceJSON), undefined, Internal.QBRequestWrapper);
                            jsonDataSource.name(dataSourceInfo.name);
                            var jsonSerialized = new DevExpress.Analytics.Utils.ModelSerializer().serialize(jsonDataSource);
                            var beforeInitEvent = function (e) {
                                e.state.dataSourceType = DevExpress.Analytics.Wizard.DataSourceType.Json;
                                e.state.jsonDataSourceWizard = {
                                    connectionName: jsonDataSource.connectionName(),
                                    dataSourceName: jsonSerialized["@Name"],
                                    jsonScheme: JSON.stringify(jsonSerialized["Schema"]),
                                    jsonSource: JSON.stringify(jsonSerialized["Source"]),
                                    rootElement: jsonSerialized["@RootElement"]
                                };
                            };
                            _this._wizard.events.addHandler("beforeInitialize", beforeInitEvent);
                            _this._wizard.initialize({}, function (factory, stateManager) { return new EditSchemaIterator(factory, stateManager, _this._wizard["_wizardOptions"]); });
                            _this._wizard.events.removeHandler("beforeInitialize", beforeInitEvent);
                            _this._wizard.start();
                            _this._wizard.isVisible(true);
                        });
                    };
                    JsonDataSourceEditor.prototype.applyDataSourceWizardChanges = function (dataSourceWizardModel) {
                        var jsonDataSource = DevExpress.Analytics.Wizard._restoreJsonDataSourceFromState(dataSourceWizardModel.jsonDataSourceWizard, undefined, dataSourceWizardModel.dataSourceId);
                        var dataSource = jsonDataSource && this._dsHelper().findDataSourceInfoByName(jsonDataSource.name());
                        return this._applyDataSourceChange(jsonDataSource, dataSource);
                    };
                    JsonDataSourceEditor.prototype.saveJsonSource = function (state, connections) {
                        var _this = this;
                        var jsonDataSourceState = state.jsonDataSourceWizard;
                        var jsonDataSource = DevExpress.Analytics.Wizard._restoreJsonDataSourceFromState(jsonDataSourceState);
                        var deferred = $.Deferred();
                        Internal.QBRequestWrapper.saveJsonSource(state.jsonDataSourceWizard.newConnectionName, jsonDataSource)
                            .done(function (connectionName) {
                            if (connections.json().every(function (x) { return x.name !== jsonDataSourceState.newConnectionName; })) {
                                connections.json.push({
                                    name: jsonDataSourceState.newConnectionName,
                                    description: jsonDataSourceState.newConnectionName
                                });
                            }
                            jsonDataSourceState.connectionName = connectionName;
                            jsonDataSourceState.jsonSource = null;
                            _this.applyDataSourceWizardChanges(state)
                                .done(function (result) { deferred.resolve(result); })
                                .fail(function () { return deferred.reject(); });
                        })
                            .fail(function (result) { JsonDataSourceEditor._onFail(result, deferred); });
                        ;
                        return deferred.promise();
                    };
                    JsonDataSourceEditor.createJsonDataSourceInfo = function (source) {
                        var deferred = $.Deferred();
                        Internal.ReportDataSourceService.getJsonDataSourceBase64(source)
                            .done(function (result) {
                            deferred.resolve({
                                name: "jsonDataSource",
                                id: source.id,
                                data: {
                                    "@ObjectType": "DevExpress.DataAccess.Json.JsonDataSource",
                                    "@Base64": result.base64
                                },
                                isJsonDataSource: true,
                                base64: function () { return result.base64; }
                            });
                        })
                            .fail(function (result) { JsonDataSourceEditor._onFail(result, deferred); });
                        return deferred.promise();
                    };
                    JsonDataSourceEditor.prototype.getActions = function (context) {
                        var result = [];
                        if (!context.data)
                            return result;
                        if (context.data["isJsonDataSource"] === true) {
                            result.push(this.editSchemaAction);
                        }
                        return result;
                    };
                    return JsonDataSourceEditor;
                }());
                Internal.JsonDataSourceEditor = JsonDataSourceEditor;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Actions) {
                var TableRowActions = (function (_super) {
                    __extends(TableRowActions, _super);
                    function TableRowActions(selection, onComponentAdded) {
                        var _this = _super.call(this) || this;
                        _this.selection = selection;
                        _super.prototype.initActions.call(_this, [
                            {
                                text: "Insert Row Above",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Row Above", "ASPxReportsStringId.ReportDesigner_TableActions_InsertRowAbove"); },
                                imageClassName: "dxrd-image-actions-insert_row_above",
                                imageTemplateName: "dxrd-svg-actions-insert_row_above",
                                clickAction: function () { _this.insertRowAbove(); },
                            }, {
                                text: "Insert Row Below",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Row Below", "ASPxReportsStringId.ReportDesigner_TableActions_InsertRowBelow"); },
                                imageClassName: "dxrd-image-actions-insert_row_below",
                                imageTemplateName: "dxrd-svg-actions-insert_row_below",
                                clickAction: function () { _this.insertRowBelow(); },
                            }, {
                                text: "Delete Row",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Delete Row", "ASPxReportsStringId.ReportDesigner_TableActions_DeleteRow"); },
                                imageClassName: "dxrd-image-actions-delete_row",
                                imageTemplateName: "dxrd-svg-actions-delete_row",
                                clickAction: function () { _this.deleteRow(); },
                            }
                        ]);
                        _this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                        return _this;
                    }
                    Object.defineProperty(TableRowActions.prototype, "_row", {
                        get: function () {
                            return this.selection.focused().getControlModel();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TableRowActions.prototype, "_table", {
                        get: function () {
                            return this._row.parentModel();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    TableRowActions.prototype.insertRowAbove = function () {
                        this._table.insertRow(this._row, true, this.onComponentAdded);
                    };
                    TableRowActions.prototype.insertRowBelow = function () {
                        this._table.insertRow(this._row, false, this.onComponentAdded);
                    };
                    TableRowActions.prototype.deleteRow = function () {
                        DevExpress.Analytics.Internal.deleteSelection(this.selection);
                    };
                    TableRowActions.prototype.condition = function (context) {
                        return context instanceof Controls.XRTableRowViewModel;
                    };
                    return TableRowActions;
                }(DevExpress.Analytics.Internal.BaseActionsProvider));
                Actions.TableRowActions = TableRowActions;
                var TableCellGroupActions = (function (_super) {
                    __extends(TableCellGroupActions, _super);
                    function TableCellGroupActions(selectionProvider) {
                        var _this = _super.call(this) || this;
                        _this._selectionProvider = selectionProvider;
                        _this._distributeColumnsAction = {
                            text: "Distribute Columns Evenly",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Distribute Columns Evenly", "ReportStringId.Cmd_TableDistributeColumnsEvenly"); },
                            imageClassName: "dxrd-image-actions-distribute_columns_evenly",
                            imageTemplateName: "dxrd-svg-actions-distribute_columns_evenly",
                            clickAction: function () { _this._distributeColumns(); }
                        };
                        _this._distributeRowsAction = {
                            text: "Distribute Rows Evenly",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Distribute Rows Evenly", "ReportStringId.Cmd_TableDistributeRowsEvenly"); },
                            imageClassName: "dxrd-image-actions-distribute_rows_evenly",
                            imageTemplateName: "dxrd-svg-actions-distribute_rows_evenly",
                            clickAction: function () { _this._distributeRows(); }
                        };
                        _super.prototype.initActions.call(_this, [
                            _this._distributeColumnsAction,
                            _this._distributeRowsAction
                        ]);
                        _this.setDisabled = function (context) {
                            var status = { rows: false, cols: false }, cells = _this._selectedCells();
                            if (cells.length) {
                                var row0 = cells[0].parentModel(), colIndex0 = row0.cells().indexOf(cells[0]);
                                for (var i = 1; i < cells.length; i++) {
                                    var rowi = cells[i].parentModel();
                                    if (!status.rows && rowi.name() !== row0.name())
                                        status.rows = true;
                                    if (!status.cols && rowi.cells().indexOf(cells[i]) != colIndex0)
                                        status.cols = true;
                                    if (status.rows && status.cols)
                                        break;
                                }
                            }
                            _this._distributeColumnsAction.disabled(!status.cols);
                            _this._distributeRowsAction.disabled(!status.rows);
                        };
                        return _this;
                    }
                    TableCellGroupActions.prototype._distributeColumns = function () {
                        var cellsByRows = this._selectedCells()
                            .reduce(function (acc, x) {
                            var row = x.parentModel().name();
                            if (acc[row])
                                acc[row].push(x);
                            else
                                acc[row] = [x];
                            return acc;
                        }, {});
                        for (var row in cellsByRows) {
                            var cells = cellsByRows[row];
                            if (cells.length < 2)
                                continue;
                            var weight = cells.reduce(function (acc, x) { return acc + x.weight(); }, 0) / cells.length;
                            cells
                                .sort(function (x, y) { return x.left() - y.left(); })
                                .forEach(function (x) { x.weight(weight); });
                        }
                    };
                    TableCellGroupActions.prototype._distributeRows = function () {
                        var _this = this;
                        var rowModels = this._selectedCells()
                            .map(function (x) { return x.parentModel(); })
                            .reduce(function (acc, x) { return acc.indexOf(x) >= 0 ? acc : acc.concat(x); }, []), weight = rowModels.reduce(function (acc, x) { return acc + x.weight(); }, 0) / rowModels.length;
                        rowModels.forEach(function (x) { x.weight(weight); });
                        var minHeight = Math.max.apply(Math, [].concat.apply([], rowModels.map(function (x) { return x.cells(); })).map(function (x) {
                            var height = _this._calculateMinimalHeight(x), rowSpan = x["rowSpan"]();
                            if (rowSpan > 1) {
                                var row = x.parentModel(), table = row.parentModel(), rowIdx = table.rows.indexOf(row), divisor = 1;
                                for (var i = 1; i < rowSpan; i++) {
                                    var nextRow = table.rows()[rowIdx + i];
                                    if (!nextRow)
                                        break;
                                    if (rowModels.indexOf(nextRow) >= 0)
                                        divisor++;
                                    else
                                        height -= nextRow.size.height();
                                }
                                height /= divisor;
                            }
                            return height;
                        })), height = rowModels[0].height();
                        if (height < minHeight) {
                            var table = rowModels[0].parentModel();
                            table.size.height(table.size.height() + (minHeight - height) * rowModels.length);
                            weight *= minHeight / height;
                            rowModels.forEach(function (x) { x.weight(weight); });
                        }
                    };
                    TableCellGroupActions.prototype._calculateMinimalHeight = function (cell) {
                        return Math.max.apply(Math, [this._calculateTextHeight(cell) + this._calculateBordersHeight(cell) + this._calculatePaddingsHeight(cell)].concat(cell.controls().map(function (control) { return control.location.y() + control.size.height(); })));
                    };
                    TableCellGroupActions.prototype._calculateTextHeight = function (cell) {
                        if (!(cell.text && cell.text()))
                            return 0;
                        var wordWrap = ko.unwrap(cell["wordWrap"]), width = wordWrap ? Math.max(1, cell.width() - this._calculatePaddingsWidth(cell)) + "px" : "auto", $div = $("<div>")
                            .css(jQuery.extend({
                            "height": "auto",
                            "width": width,
                            "overflow": "hidden"
                        }, cell.surface.cssCalculator.createFont(ko.unwrap(cell["font"])), cell.surface.cssCalculator.createWordWrap(wordWrap, cell.multiline())))
                            .html(cell.text())
                            .appendTo($("body"));
                        try {
                            return DevExpress.Analytics.Internal.pixelToUnits(Math.ceil($div[0].getBoundingClientRect().height) + 2, cell.root.measureUnit(), 1);
                        }
                        finally {
                            $div.remove();
                        }
                    };
                    TableCellGroupActions.prototype._calculateBordersHeight = function (cell) {
                        var borders = cell.borders();
                        var toCount;
                        if (borders == "All")
                            toCount = [true, true];
                        else {
                            toCount = [false, false];
                            if (borders.indexOf("Top") >= 0)
                                toCount[0] = true;
                            if (borders.indexOf("Bottom") >= 0)
                                toCount[1] = true;
                        }
                        var row = cell.parentModel();
                        var rowIndex = row.parentModel().rows().indexOf(row);
                        if (rowIndex != 0)
                            toCount[0] = false;
                        return toCount.filter(function (x) { return x; }).length * ko.unwrap(cell["borderWidth"]);
                    };
                    TableCellGroupActions.prototype._isCellTextControl = function (cell) { return cell.surface.getChildrenCollection()().length === 0; };
                    TableCellGroupActions.prototype._calculatePaddingsHeight = function (cell) { return this._isCellTextControl(cell) ? cell.paddingObj.top() + cell.paddingObj.bottom() : 0; };
                    TableCellGroupActions.prototype._calculatePaddingsWidth = function (cell) { return this._isCellTextControl(cell) ? cell.paddingObj.left() + cell.paddingObj.right() : 0; };
                    TableCellGroupActions.prototype._selectedCells = function () {
                        var result = [];
                        this._selectionProvider.selectedItems
                            .map(function (x) { return x.getControlModel(); })
                            .forEach(function (x) {
                            switch (x.controlType) {
                                case "XRTableCell":
                                    result.push(x);
                                    break;
                                case "XRTableRow":
                                    result.push.apply(result, x.cells());
                                    break;
                                case "XRTable":
                                    x.rows().forEach(function (row) { return result.push.apply(result, row.cells()); });
                                    break;
                            }
                        });
                        return result;
                    };
                    TableCellGroupActions.prototype.condition = function (context) {
                        return this._selectionProvider.selectedItems.length > 1
                            && this._selectionProvider.selectedItems.every(function (x) { return ["XRTableCell", "XRTableRow"].indexOf(x.getControlModel().controlType) >= 0; })
                            || this._selectionProvider.selectedItems.length == 1
                                && ["XRTable", "XRTableRow"].indexOf(this._selectionProvider.selectedItems[0].getControlModel().controlType) >= 0;
                    };
                    return TableCellGroupActions;
                }(DevExpress.Analytics.Internal.BaseActionsProvider));
                Actions.TableCellGroupActions = TableCellGroupActions;
                var TableCellActions = (function (_super) {
                    __extends(TableCellActions, _super);
                    function TableCellActions(selection, onComponentAdded) {
                        var _this = _super.call(this, selection) || this;
                        _super.prototype.initActions.call(_this, [
                            {
                                text: "Insert Row Above",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Row Above", "ASPxReportsStringId.ReportDesigner_TableActions_InsertRowAbove"); },
                                imageClassName: "dxrd-image-actions-insert_row_above",
                                imageTemplateName: "dxrd-svg-actions-insert_row_above",
                                clickAction: function () { _this.insertRowAbove(); },
                            }, {
                                text: "Insert Row Below",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Row Below", "ASPxReportsStringId.ReportDesigner_TableActions_InsertRowBelow"); },
                                imageClassName: "dxrd-image-actions-insert_row_below",
                                imageTemplateName: "dxrd-svg-actions-insert_row_below",
                                clickAction: function () { _this.insertRowBelow(); },
                            }, {
                                text: "Delete Row",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Delete Row", "ASPxReportsStringId.ReportDesigner_TableActions_DeleteRow"); },
                                imageClassName: "dxrd-image-actions-delete_row",
                                imageTemplateName: "dxrd-svg-actions-delete_row",
                                clickAction: function () { _this.deleteRow(); },
                            }, {
                                text: "Insert Cell",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Cell", "ASPxReportsStringId.ReportDesigner_TableActions_InsertCell"); },
                                imageClassName: "dxrd-image-actions-insert_cell",
                                imageTemplateName: "dxrd-svg-actions-insert_cell",
                                clickAction: function () { _this.insertCell(); },
                            }, {
                                text: "Delete Cell",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Delete Cell", "ASPxReportsStringId.ReportDesigner_TableActions_DeleteCell"); },
                                imageClassName: "dxrd-image-actions-delete_cell",
                                imageTemplateName: "dxrd-svg-actions-delete_cell",
                                clickAction: function () { _this.deleteCell(); },
                            }, {
                                text: "Insert Column To Left",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Column To Left", "ASPxReportsStringId.ReportDesigner_TableActions_InsertColumnToLeft"); },
                                imageClassName: "dxrd-image-actions-insert_column_to_left",
                                imageTemplateName: "dxrd-svg-actions-insert_column_to_left",
                                clickAction: function () { _this.insertColumn(false); },
                            }, {
                                text: "Insert Column To Right",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Insert Column To Right", "ASPxReportsStringId.ReportDesigner_TableActions_InsertColumnToRight"); },
                                imageClassName: "dxrd-image-actions-insert_column_to_right",
                                imageTemplateName: "dxrd-svg-actions-insert_column_to_right",
                                clickAction: function () { _this.insertColumn(true); },
                            }, {
                                text: "Delete Column",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Delete Column", "ASPxReportsStringId.ReportDesigner_TableActions_DeleteColumn"); },
                                imageClassName: "dxrd-image-actions-delete_column",
                                imageTemplateName: "dxrd-svg-actions-delete_column",
                                clickAction: function () { _this.deleteColumn(); },
                            }
                        ]);
                        _this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                        return _this;
                    }
                    Object.defineProperty(TableCellActions.prototype, "_cell", {
                        get: function () {
                            return this.selection.focused().getControlModel();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TableCellActions.prototype, "_row", {
                        get: function () {
                            return this._cell.parentModel();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TableCellActions.prototype, "_table", {
                        get: function () {
                            return this._row.parentModel();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TableCellActions.prototype, "_cellSurface", {
                        get: function () {
                            var cell = this.selection.focused();
                            return cell instanceof Controls.XRTableCellSurface && cell || null;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    TableCellActions.prototype.insertCell = function () {
                        this._row.insertCellCopy(this._cell, false, this.onComponentAdded);
                    };
                    TableCellActions.prototype.deleteCell = function () {
                        DevExpress.Analytics.Internal.deleteSelection(this.selection);
                    };
                    TableCellActions.prototype.deleteRow = function () {
                        this.selection.initialize(this._cellSurface.parent);
                        DevExpress.Analytics.Internal.deleteSelection(this.selection);
                    };
                    TableCellActions.prototype.insertColumn = function (isRight) {
                        this._table.insertColumn(this._cell, isRight, this.onComponentAdded);
                    };
                    TableCellActions.prototype.deleteColumn = function () {
                        this._cellSurface.selectColumn(this.selection);
                        DevExpress.Analytics.Internal.deleteSelection(this.selection);
                    };
                    TableCellActions.prototype.condition = function (context) {
                        return context instanceof Controls.XRTableCellViewModel && !!this._cellSurface;
                    };
                    return TableCellActions;
                }(TableRowActions));
                Actions.TableCellActions = TableCellActions;
                var TextElementAction = (function (_super) {
                    __extends(TextElementAction, _super);
                    function TextElementAction(_selectionProvider) {
                        var _this = _super.call(this) || this;
                        _this._selectionProvider = _selectionProvider;
                        _super.prototype.initActions.call(_this, [
                            {
                                text: "Fit Bounds To Text",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Fit Bounds To Text", 'ReportStringId.Cmd_FitBoundsToText'); },
                                imageClassName: "dxrd-image-actions-fit_bounds_to_text",
                                imageTemplateName: "dxrd-svg-actions-fit_bounds_to_text",
                                disabled: ko.computed(function () { return _this._inaccessibleAction(); }),
                                visible: ko.pureComputed(function () {
                                    return _this._selectionProvider.selectedItems.every(function (item) { return item.getControlModel().controlType === "XRLabel" || item.getControlModel().controlType === "XRCharacterComb"; });
                                }),
                                clickAction: function () { _this._textControls.forEach(function (item) { return item.fitBoundsToText(); }); }
                            }, {
                                text: "Fit Text To Bounds",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Fit Text To Bounds", 'ReportStringId.Cmd_FitTextToBounds'); },
                                imageClassName: "dxrd-image-actions-fit_text_to_bounds",
                                imageTemplateName: "dxrd-svg-actions-fit_text_to_bounds",
                                disabled: ko.computed(function () { return _this._inaccessibleAction(); }),
                                visible: ko.pureComputed(function () {
                                    return _this._selectionProvider.selectedItems.every(function (item) { return item.getControlModel().controlType === "XRLabel" || item.getControlModel().controlType === "XRTableCell"; });
                                }),
                                clickAction: function () { _this._textControls.forEach(function (item) { return item.fitTextToBounds(); }); }
                            },
                        ]);
                        return _this;
                    }
                    Object.defineProperty(TextElementAction.prototype, "_textControls", {
                        get: function () {
                            return this._selectionProvider.selectedItems;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    TextElementAction.prototype._inaccessibleAction = function () {
                        if (this._textControls && this._textControls.some(function (item) { return item.getText && item.getText() === ""; }))
                            return true;
                        return !!(this._textControls && this._textControls.every(function (item) { return item.hasDataBindingByName && item.hasDataBindingByName("Text"); }));
                    };
                    TextElementAction.prototype.condition = function (context) {
                        return context && (context.controlType === "XRLabel" || context.controlType === "XRTableCell" || context.controlType === "XRCharacterComb" || context.controlType === "multiselect");
                    };
                    return TextElementAction;
                }(DevExpress.Analytics.Internal.BaseActionsProvider));
                Actions.TextElementAction = TextElementAction;
            })(Actions = Designer.Actions || (Designer.Actions = {}));
            (function (Internal) {
                var colors = ['Transparent', 'AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod', 'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DodgerBlue', 'Firebrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green', 'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenrodYellow', 'LightGreen', 'LightGray', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen'];
                var ExpressionWrapper = (function (_super) {
                    __extends(ExpressionWrapper, _super);
                    function ExpressionWrapper(_bindingMode, _fieldListProvider) {
                        if (_bindingMode === void 0) { _bindingMode = Designer.Internal.DataBindingMode.Expressions; }
                        var _this = _super.call(this) || this;
                        _this._bindingMode = _bindingMode;
                        _this._fieldListProvider = _fieldListProvider;
                        _this._valuesDictionary = {
                            ForeColor: colors,
                            BackColor: colors,
                            FillColor: colors,
                            BorderColor: colors,
                            Borders: ["Left", "Right", "Top", "Bottom", "All"],
                            BorderDashStyle: Controls.Metadata.borderDashStyleValues,
                            TextAlignment: Controls.Metadata.textAlignmentValues,
                            Name: Object.keys(ko.unwrap(DevExpress.Analytics.Widgets.Internal.availableFonts))
                        };
                        _this._displayNameDictionary = {
                            Text: { localizationId: "DevExpress.XtraReports.UI.XRControl.Text", displayName: "Text" },
                            Visible: { localizationId: "DevExpress.XtraReports.UI.XRControl.Visible", displayName: "Visible" },
                            NavigateUrl: { localizationId: "DevExpress.XtraReports.UI.XRControl.NavigateUrl", displayName: "Navigate Url" },
                            Bookmark: { localizationId: "DevExpress.XtraReports.UI.XRControl.Bookmark", displayName: "Bookmark" },
                            Tag: { localizationId: "DevExpress.XtraReports.UI.XRControl.Tag", displayName: "Tag" },
                            LeftF: { localizationId: "DevExpress.XtraReports.UI.XRControl.Left", displayName: "Left" },
                            TopF: { localizationId: "DevExpress.XtraReports.UI.XRControl.Top", displayName: "Top" },
                            WidthF: { localizationId: "DevExpress.XtraReports.UI.XRControl.Width", displayName: "Width" },
                            HeightF: { localizationId: "DevExpress.XtraReports.UI.XRControl.Height", displayName: "Height" },
                            StyleName: { localizationId: "DevExpress.XtraReports.UI.XRControl.StyleName", displayName: "Style Name" },
                            ForeColor: { localizationId: "DevExpress.XtraReports.UI.XRControl.ForeColor", displayName: "Foreground Color" },
                            BackColor: { localizationId: "DevExpress.XtraReports.UI.XRControl.BackColor", displayName: "Background Color" },
                            BorderColor: { localizationId: "DevExpress.XtraReports.UI.XRControl.BorderColor", displayName: "Border Color" },
                            Borders: { localizationId: "DevExpress.XtraReports.UI.XRControl.Borders", displayName: "Borders" },
                            BorderWidth: { localizationId: "DevExpress.XtraReports.UI.XRControl.BorderWidth", displayName: "Border Width" },
                            BorderDashStyle: { localizationId: "DevExpress.XtraReports.UI.XRControl.BorderDashStyle", displayName: "Border Dash Style" },
                            TextAlignment: { localizationId: "DevExpress.XtraReports.UI.XRControl.TextAlignment", displayName: "Text Alignment" },
                            Font: { localizationId: "DevExpress.XtraReports.UI.XRControl.Font", displayName: "Font" },
                            Padding: { localizationId: "DevExpress.XtraReports.UI.XRControl.Padding", displayName: "Padding" },
                            Appearance: { localizationId: "ReportStringId.CatAppearance", displayName: "Appearance" },
                            Layout: { localizationId: "ReportStringId.CatLayout", displayName: "Layout" },
                            Name: { localizationId: "AnalyticsCoreStringId.FormatFontName", displayName: "Name" },
                            Size: { localizationId: "AnalyticsCoreStringId.Font.Size", displayName: "Size" },
                            Italic: { localizationId: "System.Drawing.Font.Italic", displayName: "Italic" },
                            Strikeout: { localizationId: "System.Drawing.Font.Strikeout", displayName: "Strikeout" },
                            Bold: { localizationId: "System.Drawing.Font.Bold", displayName: "Bold" },
                            Underline: { localizationId: "System.Drawing.Font.Underline", displayName: "Underline" },
                            Left: { localizationId: "AnalyticsCoreStringId.PaddingInfo.Left", displayName: "Left" },
                            Right: { localizationId: "AnalyticsCoreStringId.PaddingInfo.Right", displayName: "Right" },
                            Top: { localizationId: "AnalyticsCoreStringId.PaddingInfo.Top", displayName: "Top" },
                            Bottom: { localizationId: "AnalyticsCoreStringId.PaddingInfo.Bottom", displayName: "Bottom" },
                            CheckState: { localizationId: "DevExpress.XtraReports.UI.XRCheckBox.CheckState", displayName: "Check State" },
                            Image: { localizationId: "DevExpress.XtraReports.UI.XRPictureBox.Image", displayName: "Image" },
                            ImageSource: { localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageSource", displayName: "Image Source" },
                            ImageUrl: { localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageUrl", displayName: "Image Url" },
                            BinaryData: { localizationId: "DevExpress.XtraReports.UI.XRBarCode.BinaryData", displayName: "Binary Data" },
                            TargetValue: { localizationId: "DevExpress.XtraReports.UI.XRGauge.TargetValue", displayName: "Target Value" },
                            ActualValue: { localizationId: "DevExpress.XtraReports.UI.XRGauge.ActualValue", displayName: "Actual Value" },
                            PrintOnPage: { localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnPrintOnPage", displayName: "PrintOnPage" },
                            BeforePrint: { localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnBeforePrint", displayName: "BeforePrint" },
                            Minimum: { localizationId: "DevExpress.XtraReports.UI.XRGauge.Minimum", displayName: "Minimum" },
                            Maximum: { localizationId: "DevExpress.XtraReports.UI.XRGauge.Maximum", displayName: "Maximum" },
                            FillColor: { localizationId: "DevExpress.XtraReports.UI.XRShape.FillColor", displayName: "Fill Color" }
                        };
                        _this._expressionsInfo = {};
                        _this._expressionsSerializationInfoCache = {};
                        return _this;
                    }
                    ExpressionWrapper.prototype.dispose = function () {
                        this._expressionsInfo = null;
                        this._expressionsSerializationInfoCache = null;
                        this._fieldListProvider = null;
                    };
                    ExpressionWrapper.createExpression = function (propertyName, eventName, expression) {
                        return {
                            getInfo: function () { return Controls.Metadata.expressionBindingSerializationsInfo; },
                            eventName: ko.observable(eventName),
                            expression: ko.observable(expression),
                            propertyName: ko.observable(propertyName)
                        };
                    };
                    ExpressionWrapper.prototype._createPropertyByName = function (propertyName, prefix) {
                        var result = {
                            propertyName: prefix ? [prefix, propertyName].join('.') : propertyName,
                            modelName: propertyName,
                            displayName: propertyName,
                            editor: Widgets.editorTemplates.reportexpression
                        };
                        if (this._displayNameDictionary[propertyName]) {
                            result.localizationId = this._displayNameDictionary[propertyName].localizationId;
                            result.displayName = this._displayNameDictionary[propertyName].displayName;
                        }
                        if (this._valuesDictionary[propertyName]) {
                            result.valuesArray = this._valuesDictionary[propertyName];
                        }
                        return result;
                    };
                    ExpressionWrapper.prototype._createInfo = function (rootInfo, prefix, path) {
                        var _this = this;
                        var info = rootInfo;
                        for (var i = 0; i < path.length; i++) {
                            if (typeof (path[i]) !== "string" && Array.isArray(path[i])) {
                                info.push.apply(info, path[i].map(function (innerProperty) { return _this._createPropertyByName(innerProperty, path[i - 1]); }));
                            }
                            else {
                                var currentInfo = info.filter(function (x) { return x.propertyName === path[i]; })[0];
                                if (!currentInfo) {
                                    currentInfo = this._createPropertyByName(path[i]);
                                    if (i !== path.length - 1) {
                                        currentInfo.editor = DevExpress.Analytics.Widgets.editorTemplates.objecteditor;
                                        currentInfo.info = [];
                                    }
                                    info.push(currentInfo);
                                }
                                info = currentInfo.info;
                            }
                        }
                        return rootInfo;
                    };
                    ExpressionWrapper.prototype._addControlInfo = function (controlType) {
                        var params = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            params[_i - 1] = arguments[_i];
                        }
                        if (!this._expressionsSerializationInfoCache[controlType]) {
                            this._expressionsSerializationInfoCache[controlType] = [];
                        }
                        this._expressionsSerializationInfoCache[controlType] = this._createInfo(this._expressionsSerializationInfoCache[controlType], "", params.filter(function (x) { return !!x; }));
                    };
                    ExpressionWrapper.prototype._createSerializationInfo = function (controlType, useEvents) {
                        var _this = this;
                        if (useEvents === void 0) { useEvents = false; }
                        var propertyNames = Object.keys(this._expressionsInfo[controlType]);
                        propertyNames.forEach(function (propertyName) {
                            var propertyDescriptor = _this._expressionsInfo[controlType][propertyName];
                            if (!useEvents) {
                                if (propertyDescriptor.events.indexOf("BeforePrint") !== -1)
                                    _this._addControlInfo(controlType, propertyDescriptor.group, propertyName, propertyDescriptor.objectProperties);
                            }
                            else {
                                propertyDescriptor.events.forEach(function (eventName) {
                                    _this._addControlInfo(controlType, eventName, propertyDescriptor.group, propertyName, propertyDescriptor.objectProperties);
                                });
                            }
                        });
                    };
                    ExpressionWrapper.prototype._getStateObjKeys = function (object) {
                        return Object.keys(object).filter(function (name) { return name !== "getInfo" && name !== "_model" && name !== "update"; });
                    };
                    ExpressionWrapper.prototype._getExpressionFromArray = function (propertyName, eventName, expressions) {
                        return expressions().filter(function (x) {
                            return x.propertyName() === propertyName &&
                                x.eventName() === eventName;
                        })[0];
                    };
                    ExpressionWrapper.prototype._createExpressionMap = function (propertyName, eventName, expressions, subscriptions, path, summaryRunning) {
                        var _this = this;
                        var isValid = ko.observable(true);
                        var functions = !!summaryRunning && !!summaryRunning(propertyName)
                            ? ko.computed(function () { return summaryRunning(propertyName)() ? _this._summaryFunctions() : Widgets.reportFunctionDisplay; })
                            : Widgets.reportFunctionDisplay;
                        var expressionOptions = new WrappedExpressionOptions({
                            path: path || ko.observable(""),
                            functions: functions
                        }, {
                            addExpression: function (newVal) {
                                expressions.push(ExpressionWrapper.createExpression(propertyName, eventName, newVal));
                            },
                            removeExpression: function (expression) {
                                expressions.remove(expression);
                            }
                        }, this._fieldListProvider, eventName);
                        expressionOptions._disposables.push(functions);
                        expressionOptions.expression(this._getExpressionFromArray(propertyName, eventName, expressions));
                        return expressionOptions;
                    };
                    ExpressionWrapper.prototype._summaryFunctions = function () {
                        var createNewItemDelegate = function (funcName, paramCount) {
                            return [{
                                    paramCount: paramCount,
                                    text: "sum" + funcName + "()",
                                    descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_Summary" + funcName
                                }];
                        };
                        var summaryCategory = {
                            display: "Summary",
                            localizationId: "ReportStringId.ExpressionEditor_ItemInfo_FunctionSummary",
                            category: "Summary",
                            items: {}
                        };
                        ["Avg", "Count", "Sum", "RunningSum", "Percentage", "Max", "Min", "Median", "Var", "VarP", "StdDev", "StdDevP", "DAvg", "DCount", "DSum", "DVar", "DVarP", "DStdDev", "DStdDevP", "RecordNumber",
                            { name: "WAvg", paramCount: 2 }
                        ].forEach(function (func) {
                            if (typeof func === "string") {
                                summaryCategory.items[func] = createNewItemDelegate(func, 1);
                            }
                            else {
                                summaryCategory.items[func.name] = createNewItemDelegate(func.name, func.paramCount);
                            }
                        });
                        return Widgets.reportFunctionDisplay
                            .filter(function (cat) { return cat.category != "Aggregate"; })
                            .concat([summaryCategory]);
                    };
                    ExpressionWrapper.prototype._mapExpressionsToObjectByEventName = function (object, eventName, expressions, subscriptions, path, summaryRunning) {
                        var _this = this;
                        var properties = this._getStateObjKeys(object);
                        properties.forEach(function (propertyName) {
                            if (!ko.isObservable(object[propertyName])) {
                                _this._mapExpressionsToObjectByEventName(object[propertyName], eventName, expressions, subscriptions, path, summaryRunning);
                            }
                            else {
                                object[propertyName] = _this._createExpressionMap(propertyName, eventName, expressions, subscriptions, path, summaryRunning);
                                subscriptions.push(object[propertyName]);
                            }
                        });
                    };
                    ExpressionWrapper.prototype._validateExpressions = function (object) {
                        var _this = this;
                        var isValid = true;
                        this._getStateObjKeys(object).forEach(function (propertyName) {
                            if (!isValid)
                                return;
                            if (object[propertyName] instanceof Object && !(object[propertyName] instanceof WrappedExpressionOptions)) {
                                isValid = _this._validateExpressions(object[propertyName]);
                            }
                            else {
                                isValid = object[propertyName].isValid();
                            }
                        });
                        return isValid;
                    };
                    ExpressionWrapper.prototype._getExpressionByPropertyName = function (object, propertyNameToSearch) {
                        if (object[propertyNameToSearch]) {
                            return object[propertyNameToSearch];
                        }
                        else {
                            var properties = this._getStateObjKeys(object);
                            var innerObjectPropertyNames = properties.filter(function (propertyName) { return !(object[propertyName] instanceof WrappedExpressionOptions); });
                            for (var i = 0; i < innerObjectPropertyNames.length; i++) {
                                var result = this._getExpressionByPropertyName(object[innerObjectPropertyNames[i]], propertyNameToSearch);
                                if (result)
                                    return result;
                            }
                        }
                    };
                    ExpressionWrapper.prototype._mapExpressionsToObject = function (controlType, expressions, path, summaryRunning) {
                        var _this = this;
                        if (this._bindingMode === Internal.DataBindingMode.Bindings) {
                            return null;
                        }
                        var useEvents = this._bindingMode === Internal.DataBindingMode.ExpressionsAdvanced;
                        var subscriptions = [];
                        if (!this._expressionsSerializationInfoCache[controlType]) {
                            this._createSerializationInfo(controlType, useEvents);
                        }
                        var stateObj = {
                            getInfo: function () { return _this._expressionsSerializationInfoCache[controlType]; },
                            getExpression: function (propertyName, eventName) {
                                if (useEvents) {
                                    return _this._getExpressionByPropertyName(stateObj[eventName], propertyName);
                                }
                                else {
                                    return _this._getExpressionByPropertyName(stateObj, propertyName);
                                }
                            },
                            dispose: function () {
                                subscriptions.forEach(function (x) { return x.dispose(); });
                                subscriptions.splice(0);
                            },
                            validateExpression: function () {
                                return _this._validateExpressions(stateObj);
                            }
                        };
                        new DevExpress.Analytics.Utils.ModelSerializer().deserialize(stateObj, {});
                        if (useEvents) {
                            var events = this._getStateObjKeys(stateObj);
                            events.forEach(function (eventName) {
                                _this._mapExpressionsToObjectByEventName(stateObj[eventName], eventName, expressions, subscriptions, path, summaryRunning);
                            });
                        }
                        else {
                            this._mapExpressionsToObjectByEventName(stateObj, "BeforePrint", expressions, subscriptions, path, summaryRunning);
                        }
                        subscriptions.push(expressions.subscribe(function (args) {
                            args.forEach(function (arg) {
                                if (arg.status === "deleted") {
                                    stateObj.getExpression(arg.value.propertyName(), arg.value.eventName()).expression(null);
                                }
                                else if (arg.status === "added") {
                                    stateObj.getExpression(arg.value.propertyName(), arg.value.eventName()).expression(arg.value);
                                }
                            });
                        }, null, "arrayChange"));
                        return { stateObj: stateObj, subscriptions: subscriptions };
                    };
                    ExpressionWrapper.prototype.setPropertyDescription = function (controlType, propertyName, events, objectProperties, group) {
                        if (!this._expressionsInfo[controlType])
                            this._expressionsInfo[controlType] = {};
                        this._expressionsInfo[controlType][propertyName] = {
                            events: events,
                            group: group,
                            objectProperties: objectProperties
                        };
                    };
                    ExpressionWrapper.prototype.hidePropertyDescriptions = function (controlType) {
                        var _this = this;
                        var propertyNames = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            propertyNames[_i - 1] = arguments[_i];
                        }
                        propertyNames.forEach(function (propertyName) {
                            if (propertyName.indexOf('.') !== -1) {
                                var propertyPath = propertyName.split('.');
                                if (propertyPath.length > 2)
                                    return;
                                var expressionInfo = _this._expressionsInfo[controlType][propertyPath[0]];
                                if (!expressionInfo || !expressionInfo.objectProperties)
                                    return;
                                var index = expressionInfo.objectProperties.indexOf(propertyPath[1]);
                                if (index === -1)
                                    return;
                                expressionInfo.objectProperties.splice(index, 1);
                                if (expressionInfo.objectProperties.length === 0)
                                    delete _this._expressionsInfo[controlType][propertyPath[0]];
                                return;
                            }
                            delete _this._expressionsInfo[controlType][propertyName];
                        });
                    };
                    ExpressionWrapper.prototype.createExpressionsObject = function (controlType, expressions, path, summaryRunning) {
                        var result = this._mapExpressionsToObject(controlType, expressions, path, summaryRunning);
                        if (!result)
                            return;
                        return result.stateObj;
                    };
                    ExpressionWrapper.prototype.setLocalizationId = function (propertyName, localizationId, displayName) {
                        this._displayNameDictionary[propertyName] = {
                            localizationId: localizationId,
                            displayName: displayName || propertyName
                        };
                    };
                    ExpressionWrapper.prototype.setValues = function (propertyName, values) {
                        this._valuesDictionary[propertyName] = values;
                    };
                    return ExpressionWrapper;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.ExpressionWrapper = ExpressionWrapper;
                var WrappedExpressionOptions = (function (_super) {
                    __extends(WrappedExpressionOptions, _super);
                    function WrappedExpressionOptions(options, handlers, fieldListProvider, eventName) {
                        var _this = _super.call(this) || this;
                        _this.eventName = eventName;
                        _this.isValid = ko.observable(true);
                        _this.expression = ko.observable(null);
                        _this.rootItems = [
                            { name: "Parameters", needPrefix: true },
                            { name: "ReportItems", needPrefix: false, rootPath: "Root" },
                            { name: "DataSource", needPrefix: false, rootPath: "Root" }
                        ];
                        _this._disposables.push(_this.value = ko.computed({
                            read: function () {
                                return _this.expression() && _this.expression().expression() || "";
                            },
                            write: function (newVal) {
                                if (_this.expression()) {
                                    if (newVal && newVal.trim()) {
                                        _this.expression().expression(newVal);
                                    }
                                    else {
                                        handlers.removeExpression(_this.expression());
                                    }
                                    ;
                                }
                                else {
                                    if (newVal && newVal.trim())
                                        handlers.addExpression(newVal);
                                }
                            }
                        }));
                        _this.path = options.path;
                        _this.functions = options.functions;
                        var specificRootItems = {
                            "DataSource": function (path) {
                                return path === "DataSource" && ["CurrentRowIndex", "RowCount", "CurrentRowHierarchyLevel"].map(function (name) { return Internal.createIDataMemberInfoByName(name, "integer"); });
                            }
                        };
                        if (_this.eventName === "PrintOnPage") {
                            _this.rootItems.push({ name: "Arguments", needPrefix: false, rootPath: "Root" });
                            specificRootItems["Arguments"] = function (path) {
                                return path === "Arguments" && ["PageIndex", "PageCount"].map(function (name) { return Internal.createIDataMemberInfoByName(name, "integer"); });
                            };
                        }
                        _this._disposables.push(ko.computed(function () {
                            var unwrappedfieldListProvider = ko.unwrap(fieldListProvider);
                            if (_this.value() && unwrappedfieldListProvider) {
                                DevExpress.Analytics.Internal.validateExpression({
                                    fieldListProvider: {
                                        getItemByPath: function (path) {
                                            return unwrappedfieldListProvider.getItemByPath(path, specificRootItems);
                                        },
                                        getItems: function () { return void 0; }
                                    },
                                    expression: _this.value(),
                                    path: _this.path(),
                                    rootItems: _this.rootItems.map(function (x) { return x.name; }),
                                }).done(function () { return _this.isValid(true); }).fail(function () { return _this.isValid(false); });
                            }
                            else {
                                _this.isValid(true);
                            }
                        }));
                        return _this;
                    }
                    return WrappedExpressionOptions;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.WrappedExpressionOptions = WrappedExpressionOptions;
                Internal.createSinglePopularBindingInfos = function (propertyName) {
                    return [Utils.createPopularBindingInfo({ bindingName: propertyName, propertyName: "" }, false), Utils.createPopularBindingInfo({ bindingName: propertyName, propertyName: "" })];
                };
                Internal.createPopularBindingInfos = function (options) {
                    var dataBindingOptions = {
                        propertyName: "popularDataBinding" + options.propertyName,
                        displayName: options.propertyName,
                        localizationId: options.localizationId,
                        bindingName: options.propertyName,
                    };
                    var expressionOptions = {
                        propertyName: "popularExpression" + options.propertyName,
                        displayName: options.propertyName,
                        localizationId: options.localizationId,
                        bindingName: options.propertyName,
                    };
                    return [Utils.createPopularBindingInfo(dataBindingOptions, false), Utils.createPopularBindingInfo(expressionOptions)];
                };
                var svgAttrs = ko.bindingHandlers["svgAttrs"];
                ko.bindingHandlers["svgAttrs"] = {
                    update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                        svgAttrs.update(element, valueAccessor, allBindingsAccessor, viewModel);
                        if (viewModel instanceof Reporting.Designer.Controls.XRCheckBoxSurface) {
                            element.setAttribute('preserveAspectRatio', "none");
                        }
                    }
                };
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            var Utils;
            (function (Utils) {
                Utils.createPopularBindingInfo = function (options, isExpression) {
                    if (isExpression === void 0) { isExpression = true; }
                    var newInfo = {
                        propertyName: options.propertyName || (isExpression ? "popularExpression" : "popularDataBinding"),
                        displayName: options.displayName || (isExpression ? "Expression" : "Data Binding"),
                        localizationId: options.localizationId || (isExpression ? "DevExpress.XtraReports.UI.CalculatedField.Expression" : "ReportStringId.STag_Name_DataBinding"),
                        editor: isExpression ? Widgets.editorTemplates.reportexpression : Widgets.editorTemplates.dataBinding,
                    };
                    if (isExpression)
                        newInfo["expressionName"] = options.bindingName;
                    else
                        newInfo["bindingName"] = options.bindingName;
                    return newInfo;
                };
                function _isReorderBand(dropTarget, dragFrom) {
                    return Bands.BandViewModel.isReorderingBand(dropTarget.getControlModel()) &&
                        Bands.BandViewModel.isReorderingBand(dragFrom) &&
                        dropTarget.getControlModel().controlType === dragFrom.controlType &&
                        dropTarget.getControlModel().parentModel() === dragFrom.parentModel();
                }
                Utils._isReorderBand = _isReorderBand;
            })(Utils = Designer.Utils || (Designer.Utils = {}));
            (function (Internal) {
                function registerControls(fieldListProvider) {
                    Utils.controlsFactory = new Controls.ControlsFactory(fieldListProvider);
                    Utils.controlsFactory.registerControl("Unknown", {
                        info: Controls.Metadata.unknownSerializationsInfo,
                        type: Controls.XRControlViewModel,
                        defaultVal: {
                            "@SizeF": "100,23"
                        },
                        nonToolboxItem: true,
                        surfaceType: Controls.XRControlSurface
                    });
                    Utils.controlsFactory.registerControl("XRLabel", {
                        info: Controls.Metadata.labelSerializationsInfo,
                        toolboxIndex: 0,
                        defaultVal: {
                            "@Padding": "2,2,0,0,100",
                            "@Multiline": "true",
                            "@SizeF": "100,23"
                        },
                        defaultBindingName: "Text",
                        surfaceType: Controls.XRTextControlSurfaceBase,
                        type: Controls.XRControlViewModel,
                        popularProperties: Controls.Metadata.popularPropertiesLabel,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Label", "DevExpress.XtraReports.UI.XRLabel")
                    });
                    Utils.controlsFactory.registerControl("XRCheckBox", {
                        info: Controls.Metadata.checkboxSerializationsInfo,
                        toolboxIndex: 1,
                        type: Controls.XRCheckBoxViewModel,
                        surfaceType: Controls.XRCheckBoxSurface,
                        defaultVal: {
                            "@SizeF": "100,23",
                            "@Padding": "2,2,0,0,100"
                        },
                        defaultBindingName: "CheckState",
                        popularProperties: Controls.Metadata.popularPropertiesCheckBox,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Check Box", "DevExpress.XtraReports.UI.XRCheckBox")
                    });
                    Utils.controlsFactory.registerControl("XRRichText", {
                        info: Controls.Metadata.richTextSerializationsInfo,
                        toolboxIndex: 2,
                        defaultVal: {
                            "@SizeF": "100,23",
                            "@Padding": "2,2,0,0,100"
                        },
                        surfaceType: Controls.XRRichSurface,
                        type: Controls.XRRichViewModel,
                        defaultBindingName: "Rtf",
                        popularProperties: Controls.Metadata.popularPropertiesRichText,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Rich Text", "DevExpress.XtraReports.UI.XRRichText")
                    });
                    Utils.controlsFactory.registerControl("XRPictureBox", {
                        info: Controls.Metadata.pictureBoxSerializationsInfo,
                        toolboxIndex: 3,
                        defaultVal: {
                            "@SizeF": "100,100",
                        },
                        type: Controls.XRPictureBoxViewModel,
                        surfaceType: Controls.XRPictureBoxSurface,
                        defaultBindingName: "ImageSource",
                        popularProperties: Controls.Metadata.popularPropertiesPicture,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Picture Box", "DevExpress.XtraReports.UI.XRPictureBox")
                    });
                    Utils.controlsFactory.registerControl("XRPanel", {
                        info: Controls.Metadata.panelSerializationsInfo,
                        toolboxIndex: 4,
                        defaultVal: {
                            "@SizeF": "300,75"
                        },
                        surfaceType: Controls.XRControlSurface,
                        type: Controls.XRControlViewModel,
                        isContainer: true,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Panel", "DevExpress.XtraReports.UI.XRPanel")
                    });
                    Utils.controlsFactory.registerControl("XRTable", {
                        info: Controls.Metadata.tableSerializationsInfo,
                        type: Controls.XRTableControlViewModel,
                        toolboxIndex: 5,
                        defaultVal: {
                            "@SizeF": "300,25",
                            "Rows": {
                                "Item1": {
                                    "@ControlType": "XRTableRow",
                                    "@Weight": "1",
                                    "Cells": {
                                        "Item1": {
                                            "@ControlType": "XRTableCell",
                                            "@Weight": "1",
                                            "@Multiline": "true",
                                            "@Padding": "2,2,0,0,100"
                                        },
                                        "Item2": {
                                            "@ControlType": "XRTableCell",
                                            "@Weight": "1",
                                            "@Multiline": "true",
                                            "@Padding": "2,2,0,0,100"
                                        },
                                        "Item3": {
                                            "@ControlType": "XRTableCell",
                                            "@Weight": "1",
                                            "@Multiline": "true",
                                            "@Padding": "2,2,0,0,100"
                                        }
                                    }
                                }
                            }
                        },
                        surfaceType: Controls.XRTableSurface,
                        popularProperties: Controls.Metadata.popularPropertiesTable,
                        isContainer: true,
                        isPasteDeny: true,
                        canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType !== "XRTableRow"; },
                        displayName: DevExpress.Analytics.Utils.getLocalization("Table", "DevExpress.XtraReports.UI.XRTable")
                    });
                    Utils.controlsFactory.registerControl("XRCharacterComb", {
                        info: Controls.Metadata.characterCombSerializationsInfo,
                        toolboxIndex: 6,
                        defaultVal: {
                            "@SizeF": "200,80",
                            "@Multiline": "true"
                        },
                        defaultBindingName: "Text",
                        surfaceType: Controls.XRCharacterCombSurface,
                        type: Controls.XRCharacterComb,
                        popularProperties: Controls.Metadata.popularPropertiesLabel,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Character Comb", "DevExpress.XtraReports.UI.XRCharacterComb")
                    });
                    Utils.controlsFactory.registerControl("XRLine", {
                        info: Controls.Metadata.lineSerializationsInfo,
                        toolboxIndex: 7,
                        type: Controls.XRControlViewModel,
                        surfaceType: Controls.XRLineSurface,
                        defaultVal: {
                            "@SizeF": "100,23",
                        },
                        popularProperties: Controls.Metadata.popularPropertiesLine,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Line", "DevExpress.XtraReports.UI.XRLine")
                    });
                    Utils.controlsFactory.registerControl("XRShape", {
                        info: Controls.Metadata.shapeSerializationsInfo,
                        toolboxIndex: 8,
                        defaultVal: {
                            "@SizeF": "100,23"
                        },
                        defaultBindingName: "Tag",
                        type: Controls.XRShapeViewModel,
                        surfaceType: Controls.XRShapeControlSurface,
                        popularProperties: Controls.Metadata.popularPropertiesShape,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Shape", "DevExpress.XtraReports.UI.XRShape")
                    });
                    Utils.controlsFactory.registerControl("XRBarCode", {
                        info: Controls.Metadata.barcodeSerializationsInfo,
                        toolboxIndex: 9,
                        defaultVal: {
                            "@SizeF": "200,75",
                            "@Padding": "10,10,0,0,100",
                            "Symbology": {
                                "@Name": "Code128"
                            },
                            "@Text": ""
                        },
                        defaultBindingName: "Text",
                        surfaceType: Controls.XRBarcodeSurface,
                        type: Controls.XRBarCodeViewModel,
                        popularProperties: Controls.Metadata.popularPropertiesBarCode,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Bar Code", "DevExpress.XtraReports.UI.XRBarCode")
                    });
                    Utils.controlsFactory.registerControl("XRZipCode", {
                        info: Controls.Metadata.zipCodeSerializationInfo,
                        type: Controls.XRControlViewModel,
                        nonToolboxItem: true,
                        surfaceType: Controls.XRZipCodeSurface,
                        toolboxIndex: 10,
                        defaultVal: {
                            "@SizeF": "100,23"
                        },
                        popularProperties: Controls.Metadata.popularPropertiesZipCode,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Zip Code", "DevExpress.XtraReports.UI.XRZipCode")
                    });
                    Utils.controlsFactory.registerControl("XRChart", {
                        info: Controls.Metadata.xrChartSerializationInfo,
                        toolboxIndex: 11,
                        defaultVal: {
                            "@SizeF": "400,300",
                            "Chart": {
                                "Diagram": {
                                    "@TypeNameSerializable": "XYDiagram",
                                    "AxisY": {
                                        "@VisibleInPanesSerializable": "-1"
                                    },
                                    "AxisX": {
                                        "@VisibleInPanesSerializable": "-1"
                                    }
                                },
                                "DataContainer": {}
                            }
                        },
                        defaultBindingName: "Tag",
                        type: Controls.XRChartViewModel,
                        surfaceType: Controls.XRChartSurface,
                        popularProperties: ["name"],
                        displayName: DevExpress.Analytics.Utils.getLocalization("Chart", "DevExpress.XtraReports.UI.XRChart")
                    });
                    Utils.controlsFactory.registerControl("XRGauge", {
                        info: Controls.Metadata.xrGaugeSerializationInfo,
                        surfaceType: Internal.TodoControlSurface,
                        type: Controls.XRGaugeViewModel,
                        toolboxIndex: 12,
                        defaultVal: {
                            "@SizeF": "220,120"
                        },
                        defaultBindingName: "Tag",
                        popularProperties: Controls.Metadata.popularPropertiesGauge,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Gauge", "DevExpress.XtraReports.UI.XRGauge")
                    });
                    Utils.controlsFactory.registerControl("XRSparkline", {
                        info: Controls.Metadata.sparklineSerializationsInfo,
                        toolboxIndex: 13,
                        defaultVal: {
                            "@SizeF": "150,80",
                            "View": {
                                "@Type": "Line"
                            },
                        },
                        surfaceType: Controls.XRSparkLineSurface,
                        defaultBindingName: "Tag",
                        type: Controls.XRSparklineViewModel,
                        popularProperties: Controls.Metadata.popularPropertiesSparkline,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Sparkline", "DevExpress.XtraReports.UI.XRSparkline")
                    });
                    Utils.controlsFactory.registerControl("XRPivotGrid", {
                        info: Controls.Metadata.pivotGridSerializationsInfo,
                        toolboxIndex: 14,
                        defaultVal: {
                            "@ControlType": "XRPivotGrid",
                            "@SizeF": "250,120",
                            "OptionsChartDataSource": {},
                            "Prefilter": {},
                            "OptionsPrint": {
                                "@FilterSeparatorBarPadding": "3",
                                "@UsePrintAppearance": "true",
                                "@PrintFilterHeaders": "False"
                            },
                            "OptionsView": {}
                        },
                        defaultBindingName: "Tag",
                        type: Controls.XRPivotGridViewModel,
                        surfaceType: Controls.XRPivotGridSurface,
                        popularProperties: ["dataSource", "dataMember"],
                        displayName: DevExpress.Analytics.Utils.getLocalization("Pivot Grid", "DevExpress.XtraReports.UI.XRPivotGrid")
                    });
                    Utils.controlsFactory.registerControl("XRSubreport", {
                        info: Controls.Metadata.subreportSerializationsInfo,
                        toolboxIndex: 15,
                        defaultVal: {
                            "@SizeF": "100,23",
                            "ReportSource": Controls.SubreportViewModel.defaultReport
                        },
                        surfaceType: Controls.XRSubreportSurface,
                        type: Controls.XRSubreportViewModel,
                        popularProperties: ["name", "reportSourceUrl"],
                        displayName: DevExpress.Analytics.Utils.getLocalization("Sub-Report", "DevExpress.XtraReports.UI.XRSubreport")
                    });
                    Utils.controlsFactory.registerControl("XRTableOfContents", {
                        toolboxIndex: 16,
                        info: Controls.Metadata.tocSerializationsInfo,
                        surfaceType: Controls.XRTableOfContentsSurface,
                        type: Controls.XRTableOfContentsViewModel,
                        defaultVal: {
                            "@ControlType": "XRTableOfContents",
                            "LevelTitle": {
                                "@Text": "Title",
                                "@Height": "23",
                                "@Padding": "0,0,0,0,100"
                            },
                            "LevelDefault": {
                                "@Height": "23",
                                "@Padding": "0,0,0,0,100"
                            }
                        },
                        canDrop: function (dropTarget, dragFrom) {
                            var bandModel = Controls.XRControlViewModel.getNearestBand(dropTarget.getControlModel());
                            if (!bandModel)
                                return false;
                            if (dragFrom) {
                                if (Internal.isHeaderOrFooterBandType(bandModel)) {
                                    var bandToc = DevExpress.Analytics.Internal.findFirstItemMatchesCondition(bandModel.controls(), function (item) { return item.controlType === "XRTableOfContents"; });
                                    if (!bandToc || bandToc === dragFrom)
                                        return true;
                                }
                                return false;
                            }
                            var reportModel = bandModel.parentModel();
                            return !Internal.bandContainsToc(reportModel, "ReportHeaderBand") || !Internal.bandContainsToc(reportModel, "ReportFooterBand");
                        },
                        displayName: DevExpress.Analytics.Utils.getLocalization("Table Of Contents", "DevExpress.XtraReports.UI.XRTableOfContents")
                    });
                    Utils.controlsFactory.registerControl("XRPageInfo", {
                        info: Controls.Metadata.pageInfoSerializationsInfo,
                        type: Controls.XRPageInfoViewModel,
                        surfaceType: Controls.XRPageInfoSurface,
                        toolboxIndex: 17,
                        defaultVal: {
                            "@SizeF": "100,23",
                            "@Padding": "2,2,0,0,100"
                        },
                        popularProperties: Controls.Metadata.popularPropertiesPageInfo,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Page Info", "DevExpress.XtraReports.UI.XRPageInfo")
                    });
                    Utils.controlsFactory.registerControl("XRPageBreak", {
                        info: Controls.Metadata.pageBreakSerializationsInfo,
                        type: Controls.XRControlViewModel,
                        surfaceType: Controls.XRPageBreakSurface,
                        toolboxIndex: 18,
                        defaultVal: {
                            "@SizeF": "30,2"
                        },
                        displayName: DevExpress.Analytics.Utils.getLocalization("Page Break", "DevExpress.XtraReports.UI.XRPageBreak")
                    });
                    Utils.controlsFactory.registerControl("XRCrossBandLine", {
                        info: Controls.Metadata.crossBandLineControlSerializationsInfo,
                        type: Controls.XRCrossBandControlViewModel,
                        toolboxIndex: 19,
                        defaultVal: {
                            "@WidthF": "9.38",
                            "@StartPointFloat": "0,0",
                            "@EndPointFloat": "0,50"
                        },
                        size: "9.38, 50",
                        surfaceType: Controls.XRCrossBandSurface,
                        popularProperties: Controls.Metadata.popularPropertiesCrossLine,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Cross-band Line", "DevExpress.XtraReports.UI.XRCrossBandLine")
                    });
                    Utils.controlsFactory.registerControl("XRCrossBandBox", {
                        info: Controls.Metadata.crossBandBoxControlSerializationsInfo,
                        type: Controls.XRCrossBandControlViewModel,
                        toolboxIndex: 20,
                        defaultVal: {
                            "@WidthF": "50",
                            "@StartPointFloat": "0,0",
                            "@EndPointFloat": "0,50"
                        },
                        size: "50,50",
                        surfaceType: Controls.XRCrossBandSurface,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Cross-band Box", "DevExpress.XtraReports.UI.XRCrossBandBox")
                    });
                    Utils.controlsFactory.registerControl("DevExpress.XtraReports.UI.XtraReport", {
                        info: Controls.Metadata.reportSerializationInfo,
                        nonToolboxItem: true,
                        surfaceType: Controls.ReportSurface,
                        popularProperties: Controls.Metadata.popularPropertiesReport,
                        isCopyDeny: true,
                        isDeleteDeny: true,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Report", "DevExpress.XtraReports.UI.XtraReport")
                    });
                    Utils.controlsFactory.registerControl("TopMarginBand", {
                        info: Bands.Metadata.bandSerializationInfo.concat(Controls.Metadata.commonBandScripts),
                        type: Bands.TopMarginBand,
                        nonToolboxItem: true,
                        surfaceType: Bands.BandSurface,
                        isContainer: true,
                        isCopyDeny: true,
                        isDeleteDeny: true,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Top Margin", "DevExpress.XtraReports.UI.TopMarginBand")
                    });
                    Utils.controlsFactory.registerControl("BottomMarginBand", {
                        info: Bands.Metadata.bandSerializationInfo.concat(Controls.Metadata.commonBandScripts),
                        type: Bands.BottomMarginBand,
                        nonToolboxItem: true,
                        surfaceType: Bands.BottomMarginSurface,
                        isContainer: true,
                        isCopyDeny: true,
                        isDeleteDeny: true,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Bottom Margin", "DevExpress.XtraReports.UI.BottomMarginBand")
                    });
                    Utils.controlsFactory.registerControl("DetailReportBand", {
                        info: Bands.Metadata.detailReportBandSerializationInfo,
                        type: Bands.DetailReportBand,
                        nonToolboxItem: true,
                        surfaceType: Bands.DetailReportBandSurface,
                        popularProperties: Bands.Metadata.popularPropertiesDetailReport,
                        isContainer: true,
                        isCopyDeny: true,
                        canDrop: Utils._isReorderBand,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Detail Report", "DevExpress.XtraReports.UI.DetailReportBand")
                    });
                    Utils.controlsFactory.registerControl("DetailBand", {
                        info: Bands.Metadata.detailBandSerializationInfo.concat(Bands.Metadata.multiColumn),
                        type: Bands.DetailBand,
                        nonToolboxItem: true,
                        surfaceType: Bands.DetailBandSurface,
                        popularProperties: Bands.Metadata.popularPropertiesDetail.concat("multiColumn"),
                        isContainer: true,
                        isCopyDeny: true,
                        isDeleteDeny: true,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Detail", "DevExpress.XtraReports.UI.DetailBand")
                    });
                    Utils.controlsFactory.registerControl("SubBand", {
                        info: Bands.Metadata.detailBandSerializationInfo,
                        type: Bands.SubBandViewModel,
                        nonToolboxItem: true,
                        surfaceType: Bands.SubBandSurface,
                        popularProperties: Bands.Metadata.popularPropertiesDetail,
                        isContainer: true,
                        isCopyDeny: true,
                        canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType === "SubBand"; },
                        displayName: DevExpress.Analytics.Utils.getLocalization("Sub-Band", "DevExpress.XtraReports.UI.SubBand")
                    });
                    Utils.controlsFactory.registerControl("GroupHeaderBand", {
                        info: Bands.Metadata.groupHeaderBandSerializationInfo,
                        type: Bands.GroupHeaderBand,
                        nonToolboxItem: true,
                        surfaceType: Bands.BandSurface,
                        popularProperties: Bands.Metadata.popularPropertiesGroupHeader,
                        isContainer: true,
                        isCopyDeny: true,
                        canDrop: Utils._isReorderBand,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Group Header", "DevExpress.XtraReports.UI.GroupHeaderBand")
                    });
                    Utils.controlsFactory.registerControl("GroupFooterBand", {
                        info: Bands.Metadata.groupFooterBandSerializationInfo,
                        type: Bands.BandViewModel,
                        nonToolboxItem: true,
                        surfaceType: Bands.BandSurface,
                        popularProperties: Bands.Metadata.popularPropertiesGroupFooter,
                        isContainer: true,
                        isCopyDeny: true,
                        canDrop: Utils._isReorderBand,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Group Footer", "DevExpress.XtraReports.UI.GroupFooterBand")
                    });
                    Utils.controlsFactory.registerControl("PageHeaderBand", {
                        info: Bands.Metadata.pageBandSerializationInfo,
                        type: Bands.BandViewModel,
                        nonToolboxItem: true,
                        surfaceType: Bands.BandSurface,
                        popularProperties: Bands.Metadata.popularPropertiesPageHeader,
                        isContainer: true,
                        isCopyDeny: true,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Page Header", "DevExpress.XtraReports.UI.PageHeaderBand")
                    });
                    Utils.controlsFactory.registerControl("PageFooterBand", {
                        info: Bands.Metadata.pageBandSerializationInfo,
                        type: Bands.BandViewModel,
                        nonToolboxItem: true,
                        surfaceType: Bands.PageFooterSurface,
                        popularProperties: Bands.Metadata.popularPropertiesPageFooter,
                        isContainer: true,
                        isCopyDeny: true,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Page Footer", "DevExpress.XtraReports.UI.PageFooterBand")
                    });
                    Utils.controlsFactory.registerControl("ReportHeaderBand", {
                        info: Bands.Metadata.reportHeaderBandSerializationInfo,
                        type: Bands.BandViewModel,
                        nonToolboxItem: true,
                        surfaceType: Bands.BandSurface,
                        popularProperties: Bands.Metadata.popularPropertiesReportHeader,
                        isContainer: true,
                        isCopyDeny: true,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Report Header", "DevExpress.XtraReports.UI.ReportHeaderBand")
                    });
                    Utils.controlsFactory.registerControl("ReportFooterBand", {
                        info: Bands.Metadata.reportFooterBandSerializationInfo,
                        type: Bands.BandViewModel,
                        nonToolboxItem: true,
                        popularProperties: Bands.Metadata.popularPropertiesReportFooter,
                        surfaceType: Bands.BandSurface,
                        isContainer: true,
                        isCopyDeny: true,
                        displayName: DevExpress.Analytics.Utils.getLocalization("Report Footer", "DevExpress.XtraReports.UI.ReportFooterBand")
                    });
                    Utils.controlsFactory.registerControl("VerticalHeaderBand", {
                        info: Bands.Metadata.verticalHeaderBandSerializationInfo,
                        type: Bands.VerticalBandViewModel,
                        nonToolboxItem: true,
                        popularProperties: Bands.Metadata.popularPropertiesVerticalHeaderBand,
                        surfaceType: Bands.VerticalBandSurface,
                        isContainer: true,
                        isCopyDeny: true
                    });
                    Utils.controlsFactory.registerControl("VerticalDetailBand", {
                        info: Bands.Metadata.verticalDetailBandSerializationInfo,
                        type: Bands.VerticalDetailBandViewModel,
                        nonToolboxItem: true,
                        popularProperties: Bands.Metadata.popularPropertiesVerticalDetailBand,
                        surfaceType: Bands.VerticalBandSurface,
                        isContainer: true,
                        isCopyDeny: true,
                        isDeleteDeny: true
                    });
                    Utils.controlsFactory.registerControl("VerticalTotalBand", {
                        info: Bands.Metadata.verticalTotalBandSerializationInfo,
                        type: Bands.VerticalBandViewModel,
                        nonToolboxItem: true,
                        popularProperties: Bands.Metadata.popularPropertiesVerticalTotalBand,
                        surfaceType: Bands.VerticalBandSurface,
                        isContainer: true,
                        isCopyDeny: true
                    });
                    Utils.controlsFactory.registerControl("PivotGridField", {
                        info: Controls.PivotGrid.Metadata.pivotGridFieldSerializationsInfo,
                        type: Controls.PivotGrid.PivotGridFieldViewModel,
                        surfaceType: Controls.PivotGrid.PivotGridFieldSurface,
                        nonToolboxItem: true,
                        popularProperties: Controls.PivotGrid.Metadata.popularPropertiesPivotGridField,
                        displayName: "PivotGridField"
                    });
                    Utils.controlsFactory.registerControl("XRTableRow", {
                        info: Controls.Metadata.tableRowSerializationsInfo,
                        type: Controls.XRTableRowViewModel,
                        defaultVal: {
                            "@HeightF": "25",
                            "@Weight": "20"
                        },
                        nonToolboxItem: true,
                        surfaceType: Controls.XRTableRowSurface,
                        isContainer: true,
                        isCopyDeny: true,
                        isPasteDeny: true,
                        canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType === "XRTable"; },
                        displayName: DevExpress.Analytics.Utils.getLocalization("Table Row", "DevExpress.XtraReports.UI.XRTableRow")
                    });
                    Utils.controlsFactory.registerControl("XRTableCell", {
                        info: Controls.Metadata.tableCellSerializationsInfo,
                        type: Controls.XRTableCellViewModel,
                        defaultVal: {
                            "@Weight": "1",
                            "@WidthF": "100",
                            "@Multiline": "true",
                            "@Padding": "2,2,0,0,100"
                        },
                        nonToolboxItem: true,
                        surfaceType: Controls.XRTableCellSurface,
                        popularProperties: Controls.Metadata.popularPropertiesTableCell,
                        isContainer: true,
                        defaultBindingName: "Text",
                        isCopyDeny: true,
                        canDrop: function (dropTarget) { return dropTarget.getControlModel().controlType === "XRTableRow"; },
                        displayName: DevExpress.Analytics.Utils.getLocalization("Table Cell", "DevExpress.XtraReports.UI.XRTableCell")
                    });
                }
                Internal.registerControls = registerControls;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Utils) {
                var ReportWizardSettings = (function (_super) {
                    __extends(ReportWizardSettings, _super);
                    function ReportWizardSettings() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    ReportWizardSettings.prototype.createDefault = function (wizardSettings) {
                        var newSettings = DevExpress.Analytics.Internal.extend({}, _super.prototype.createDefault.call(this, wizardSettings), { useFullscreenWizard: true, useMasterDetailWizard: true });
                        if (!wizardSettings)
                            return newSettings;
                        if (wizardSettings.useFullscreenWizard !== undefined)
                            newSettings.useFullscreenWizard = wizardSettings.useFullscreenWizard;
                        if (wizardSettings.useMasterDetailWizard !== undefined)
                            newSettings.useMasterDetailWizard = wizardSettings.useMasterDetailWizard;
                        return newSettings;
                    };
                    return ReportWizardSettings;
                }(DevExpress.Analytics.Wizard.DataSourceWizardSettings));
                Utils.ReportWizardSettings = ReportWizardSettings;
                var PaperKind;
                (function (PaperKind) {
                    PaperKind[PaperKind["Custom"] = 0] = "Custom";
                    PaperKind[PaperKind["Letter"] = 1] = "Letter";
                    PaperKind[PaperKind["LetterSmall"] = 2] = "LetterSmall";
                    PaperKind[PaperKind["Tabloid"] = 3] = "Tabloid";
                    PaperKind[PaperKind["Ledger"] = 4] = "Ledger";
                    PaperKind[PaperKind["Legal"] = 5] = "Legal";
                    PaperKind[PaperKind["Statement"] = 6] = "Statement";
                    PaperKind[PaperKind["Executive"] = 7] = "Executive";
                    PaperKind[PaperKind["A3"] = 8] = "A3";
                    PaperKind[PaperKind["A4"] = 9] = "A4";
                    PaperKind[PaperKind["A4Small"] = 10] = "A4Small";
                    PaperKind[PaperKind["A5"] = 11] = "A5";
                    PaperKind[PaperKind["B4"] = 12] = "B4";
                    PaperKind[PaperKind["B5"] = 13] = "B5";
                    PaperKind[PaperKind["Folio"] = 14] = "Folio";
                    PaperKind[PaperKind["Quarto"] = 15] = "Quarto";
                    PaperKind[PaperKind["Standard10x14"] = 16] = "Standard10x14";
                    PaperKind[PaperKind["Standard11x17"] = 17] = "Standard11x17";
                    PaperKind[PaperKind["Note"] = 18] = "Note";
                    PaperKind[PaperKind["Number9Envelope"] = 19] = "Number9Envelope";
                    PaperKind[PaperKind["Number10Envelope"] = 20] = "Number10Envelope";
                    PaperKind[PaperKind["Number11Envelope"] = 21] = "Number11Envelope";
                    PaperKind[PaperKind["Number12Envelope"] = 22] = "Number12Envelope";
                    PaperKind[PaperKind["Number14Envelope"] = 23] = "Number14Envelope";
                    PaperKind[PaperKind["CSheet"] = 24] = "CSheet";
                    PaperKind[PaperKind["DSheet"] = 25] = "DSheet";
                    PaperKind[PaperKind["ESheet"] = 26] = "ESheet";
                    PaperKind[PaperKind["DLEnvelope"] = 27] = "DLEnvelope";
                    PaperKind[PaperKind["C5Envelope"] = 28] = "C5Envelope";
                    PaperKind[PaperKind["C3Envelope"] = 29] = "C3Envelope";
                    PaperKind[PaperKind["C4Envelope"] = 30] = "C4Envelope";
                    PaperKind[PaperKind["C6Envelope"] = 31] = "C6Envelope";
                    PaperKind[PaperKind["C65Envelope"] = 32] = "C65Envelope";
                    PaperKind[PaperKind["B4Envelope"] = 33] = "B4Envelope";
                    PaperKind[PaperKind["B5Envelope"] = 34] = "B5Envelope";
                    PaperKind[PaperKind["B6Envelope"] = 35] = "B6Envelope";
                    PaperKind[PaperKind["ItalyEnvelope"] = 36] = "ItalyEnvelope";
                    PaperKind[PaperKind["MonarchEnvelope"] = 37] = "MonarchEnvelope";
                    PaperKind[PaperKind["PersonalEnvelope"] = 38] = "PersonalEnvelope";
                    PaperKind[PaperKind["USStandardFanfold"] = 39] = "USStandardFanfold";
                    PaperKind[PaperKind["GermanStandardFanfold"] = 40] = "GermanStandardFanfold";
                    PaperKind[PaperKind["GermanLegalFanfold"] = 41] = "GermanLegalFanfold";
                    PaperKind[PaperKind["IsoB4"] = 42] = "IsoB4";
                    PaperKind[PaperKind["JapanesePostcard"] = 43] = "JapanesePostcard";
                    PaperKind[PaperKind["Standard9x11"] = 44] = "Standard9x11";
                    PaperKind[PaperKind["Standard10x11"] = 45] = "Standard10x11";
                    PaperKind[PaperKind["Standard15x11"] = 46] = "Standard15x11";
                    PaperKind[PaperKind["InviteEnvelope"] = 47] = "InviteEnvelope";
                    PaperKind[PaperKind["LetterExtra"] = 50] = "LetterExtra";
                    PaperKind[PaperKind["LegalExtra"] = 51] = "LegalExtra";
                    PaperKind[PaperKind["TabloidExtra"] = 52] = "TabloidExtra";
                    PaperKind[PaperKind["A4Extra"] = 53] = "A4Extra";
                    PaperKind[PaperKind["LetterTransverse"] = 54] = "LetterTransverse";
                    PaperKind[PaperKind["A4Transverse"] = 55] = "A4Transverse";
                    PaperKind[PaperKind["LetterExtraTransverse"] = 56] = "LetterExtraTransverse";
                    PaperKind[PaperKind["APlus"] = 57] = "APlus";
                    PaperKind[PaperKind["BPlus"] = 58] = "BPlus";
                    PaperKind[PaperKind["LetterPlus"] = 59] = "LetterPlus";
                    PaperKind[PaperKind["A4Plus"] = 60] = "A4Plus";
                    PaperKind[PaperKind["A5Transverse"] = 61] = "A5Transverse";
                    PaperKind[PaperKind["B5Transverse"] = 62] = "B5Transverse";
                    PaperKind[PaperKind["A3Extra"] = 63] = "A3Extra";
                    PaperKind[PaperKind["A5Extra"] = 64] = "A5Extra";
                    PaperKind[PaperKind["B5Extra"] = 65] = "B5Extra";
                    PaperKind[PaperKind["A2"] = 66] = "A2";
                    PaperKind[PaperKind["A3Transverse"] = 67] = "A3Transverse";
                    PaperKind[PaperKind["A3ExtraTransverse"] = 68] = "A3ExtraTransverse";
                    PaperKind[PaperKind["JapaneseDoublePostcard"] = 69] = "JapaneseDoublePostcard";
                    PaperKind[PaperKind["A6"] = 70] = "A6";
                    PaperKind[PaperKind["JapaneseEnvelopeKakuNumber2"] = 71] = "JapaneseEnvelopeKakuNumber2";
                    PaperKind[PaperKind["JapaneseEnvelopeKakuNumber3"] = 72] = "JapaneseEnvelopeKakuNumber3";
                    PaperKind[PaperKind["JapaneseEnvelopeChouNumber3"] = 73] = "JapaneseEnvelopeChouNumber3";
                    PaperKind[PaperKind["JapaneseEnvelopeChouNumber4"] = 74] = "JapaneseEnvelopeChouNumber4";
                    PaperKind[PaperKind["LetterRotated"] = 75] = "LetterRotated";
                    PaperKind[PaperKind["A3Rotated"] = 76] = "A3Rotated";
                    PaperKind[PaperKind["A4Rotated"] = 77] = "A4Rotated";
                    PaperKind[PaperKind["A5Rotated"] = 78] = "A5Rotated";
                    PaperKind[PaperKind["B4JisRotated"] = 79] = "B4JisRotated";
                    PaperKind[PaperKind["B5JisRotated"] = 80] = "B5JisRotated";
                    PaperKind[PaperKind["JapanesePostcardRotated"] = 81] = "JapanesePostcardRotated";
                    PaperKind[PaperKind["JapaneseDoublePostcardRotated"] = 82] = "JapaneseDoublePostcardRotated";
                    PaperKind[PaperKind["A6Rotated"] = 83] = "A6Rotated";
                    PaperKind[PaperKind["JapaneseEnvelopeKakuNumber2Rotated"] = 84] = "JapaneseEnvelopeKakuNumber2Rotated";
                    PaperKind[PaperKind["JapaneseEnvelopeKakuNumber3Rotated"] = 85] = "JapaneseEnvelopeKakuNumber3Rotated";
                    PaperKind[PaperKind["JapaneseEnvelopeChouNumber3Rotated"] = 86] = "JapaneseEnvelopeChouNumber3Rotated";
                    PaperKind[PaperKind["JapaneseEnvelopeChouNumber4Rotated"] = 87] = "JapaneseEnvelopeChouNumber4Rotated";
                    PaperKind[PaperKind["B6Jis"] = 88] = "B6Jis";
                    PaperKind[PaperKind["B6JisRotated"] = 89] = "B6JisRotated";
                    PaperKind[PaperKind["Standard12x11"] = 90] = "Standard12x11";
                    PaperKind[PaperKind["JapaneseEnvelopeYouNumber4"] = 91] = "JapaneseEnvelopeYouNumber4";
                    PaperKind[PaperKind["JapaneseEnvelopeYouNumber4Rotated"] = 92] = "JapaneseEnvelopeYouNumber4Rotated";
                    PaperKind[PaperKind["Prc16K"] = 93] = "Prc16K";
                    PaperKind[PaperKind["Prc32K"] = 94] = "Prc32K";
                    PaperKind[PaperKind["Prc32KBig"] = 95] = "Prc32KBig";
                    PaperKind[PaperKind["PrcEnvelopeNumber1"] = 96] = "PrcEnvelopeNumber1";
                    PaperKind[PaperKind["PrcEnvelopeNumber2"] = 97] = "PrcEnvelopeNumber2";
                    PaperKind[PaperKind["PrcEnvelopeNumber3"] = 98] = "PrcEnvelopeNumber3";
                    PaperKind[PaperKind["PrcEnvelopeNumber4"] = 99] = "PrcEnvelopeNumber4";
                    PaperKind[PaperKind["PrcEnvelopeNumber5"] = 100] = "PrcEnvelopeNumber5";
                    PaperKind[PaperKind["PrcEnvelopeNumber6"] = 101] = "PrcEnvelopeNumber6";
                    PaperKind[PaperKind["PrcEnvelopeNumber7"] = 102] = "PrcEnvelopeNumber7";
                    PaperKind[PaperKind["PrcEnvelopeNumber8"] = 103] = "PrcEnvelopeNumber8";
                    PaperKind[PaperKind["PrcEnvelopeNumber9"] = 104] = "PrcEnvelopeNumber9";
                    PaperKind[PaperKind["PrcEnvelopeNumber10"] = 105] = "PrcEnvelopeNumber10";
                    PaperKind[PaperKind["Prc16KRotated"] = 106] = "Prc16KRotated";
                    PaperKind[PaperKind["Prc32KRotated"] = 107] = "Prc32KRotated";
                    PaperKind[PaperKind["Prc32KBigRotated"] = 108] = "Prc32KBigRotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber1Rotated"] = 109] = "PrcEnvelopeNumber1Rotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber2Rotated"] = 110] = "PrcEnvelopeNumber2Rotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber3Rotated"] = 111] = "PrcEnvelopeNumber3Rotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber4Rotated"] = 112] = "PrcEnvelopeNumber4Rotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber5Rotated"] = 113] = "PrcEnvelopeNumber5Rotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber6Rotated"] = 114] = "PrcEnvelopeNumber6Rotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber7Rotated"] = 115] = "PrcEnvelopeNumber7Rotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber8Rotated"] = 116] = "PrcEnvelopeNumber8Rotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber9Rotated"] = 117] = "PrcEnvelopeNumber9Rotated";
                    PaperKind[PaperKind["PrcEnvelopeNumber10Rotated"] = 118] = "PrcEnvelopeNumber10Rotated";
                })(PaperKind = Utils.PaperKind || (Utils.PaperKind = {}));
                Utils.ReportDesignerElements = $.extend({}, DevExpress.Analytics.Internal.DesignerBaseElements, {
                    MenuButton: "dxrd-menubutton-template",
                    NavigationPanel: "dxrd-navigation-panel-template",
                    ReportDialog: "dxrd-report-dialog-template",
                    ChartDialog: "dxrd-chart-designer-popup",
                    ReportConverterDialog: "dxrd-report-dialog-converter-template",
                });
                Utils.ReportDesignerAddOns = {
                    Preview: "dxrd-report-preview",
                    ReportWizard: "dx-wizard-newlayout#report",
                    ReportWizardFullscreen: "dx-wizard-fullscreen#report",
                    DataSourceWizard: "dx-wizard-newlayout#data-source",
                    MultiQueryDataSourceWizard: "dx-wizard-newlayout#multiquery-data-source",
                    MultiQueryDataSourceWizardFullscreen: "dx-wizard-fullscreen#multiquery-data-source",
                    MasterDetailEditor: "dxrd-masterDetail-editor",
                    ScriptEditor: "dxrd-scripts"
                };
                Utils.controlsFactory = null;
                Utils.DataBindingMode = "Expressions";
                Utils.HandlerUri = "DXXRD.axd";
                Utils.formatStringEditorCustomSet = {};
            })(Utils = Designer.Utils || (Designer.Utils = {}));
            var Widgets;
            (function (Widgets) {
                var BandEditorBase = (function (_super) {
                    __extends(BandEditorBase, _super);
                    function BandEditorBase() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.generateValue = function (bands) {
                            if (!_this.bands) {
                                _this.bands = bands(_this.filter, _this.noneNeaded);
                            }
                            return _this.bands;
                        };
                        _this.bands = null;
                        return _this;
                    }
                    return BandEditorBase;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.BandEditorBase = BandEditorBase;
                var RunningBandEditor = (function (_super) {
                    __extends(RunningBandEditor, _super);
                    function RunningBandEditor() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.filter = function (item) {
                            return item.controlType === "GroupHeaderBand" || item.controlType === "DetailReportBand";
                        };
                        _this.noneNeaded = true;
                        return _this;
                    }
                    return RunningBandEditor;
                }(BandEditorBase));
                Widgets.RunningBandEditor = RunningBandEditor;
                var BandsEditor = (function (_super) {
                    __extends(BandsEditor, _super);
                    function BandsEditor() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.filter = function (item) {
                            return !(item instanceof Bands.DetailReportBand);
                        };
                        _this.noneNeaded = false;
                        return _this;
                    }
                    return BandsEditor;
                }(BandEditorBase));
                Widgets.BandsEditor = BandsEditor;
                var SortingBandEditor = (function (_super) {
                    __extends(SortingBandEditor, _super);
                    function SortingBandEditor(info, level, parentDisabled, textToSearch) {
                        var _this = _super.call(this, info, level, parentDisabled, textToSearch) || this;
                        _this.filter = function (item) {
                            return item.controlType === "GroupHeaderBand" || item.controlType === "DetailBand";
                        };
                        _this.noneNeaded = true;
                        var value = ko.computed(function () { return _this.value() || {}; });
                        _this._disposables.push(value);
                        _this.viewmodel = new DevExpress.Analytics.Widgets.ObjectProperties(value, { editors: [Bands.Metadata.sortFields, Bands.Metadata.groupFields] }, level + 1, _this.disabled, textToSearch);
                        _this._disposables.push(_this.viewmodel);
                        return _this;
                    }
                    return SortingBandEditor;
                }(BandEditorBase));
                Widgets.SortingBandEditor = SortingBandEditor;
                var DataSourceEditor = (function (_super) {
                    __extends(DataSourceEditor, _super);
                    function DataSourceEditor() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    DataSourceEditor.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this._getEditorOptions = null;
                    };
                    DataSourceEditor.prototype.getEditorOptions = function (dataSourceHelper, undoEngine, popupContainer) {
                        if (!this._getEditorOptions) {
                            var _dataSourceHelper = ko.unwrap(dataSourceHelper);
                            var items = ko.computed(function () { return _dataSourceHelper && _dataSourceHelper.usedDataSources(); });
                            this._disposables.push(items);
                            this._getEditorOptions = {
                                items: items,
                                value: _dataSourceHelper && _dataSourceHelper.dataSourceValue(this.value, undoEngine),
                                valueExpr: 'name',
                                displayExpr: _dataSourceHelper && _dataSourceHelper.dataSourceDisplayExpr,
                                displayCustomValue: true,
                                disabled: this.disabled,
                                dropDownOptions: { container: popupContainer }
                            };
                        }
                        return this._getEditorOptions;
                    };
                    return DataSourceEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.DataSourceEditor = DataSourceEditor;
                var ChartValueBindingEditor = (function (_super) {
                    __extends(ChartValueBindingEditor, _super);
                    function ChartValueBindingEditor(info, level, parentDisabled, textToSearch) {
                        var _this = _super.call(this, info, level, parentDisabled, textToSearch) || this;
                        _this.treeListController = new DevExpress.Analytics.Widgets.Internal.TreeListController();
                        return _this;
                    }
                    ChartValueBindingEditor.prototype.generateDisplayValue = function (reportDataSource) {
                        var _this = this;
                        if (!this.displayBinding) {
                            this._disposables.push(this.displayBinding = ko.computed(function () {
                                return _this._model && _this._model() && _this._model()["displayValue"](reportDataSource());
                            }));
                        }
                        return this.displayBinding();
                    };
                    ChartValueBindingEditor.prototype.generateValue = function (undoEngine, reportParameters, reportDataSource) {
                        var _this = this;
                        if (!this.binding) {
                            this._disposables.push(this.binding = ko.computed({
                                read: function () {
                                    return _this._model && _this._model() && _this._model()["calculatePath"](reportDataSource()) || "";
                                },
                                write: function (path) {
                                    var pathRequest = new DevExpress.Analytics.Utils.PathRequest(path);
                                    undoEngine.start();
                                    _this._model()["updateValue"](pathRequest, reportParameters());
                                    undoEngine.end();
                                }
                            }));
                        }
                        return this.binding;
                    };
                    return ChartValueBindingEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.ChartValueBindingEditor = ChartValueBindingEditor;
                Widgets.reportFunctionDisplay = (function (addins) { return DevExpress.Analytics.Widgets.Internal.insertInFunctionDisplay(addins); })({
                    "String": {
                        "NewLine": [{ paramCount: 0, text: "NewLine()", descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_NewLine" }],
                        "FormatString": [{ paramCount: 1, text: "FormatString('')", descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_FormatString" }],
                        "Rgb": [{ paramCount: 3, text: "Rgb(, , )", descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_Rgb" }],
                        "Argb": [{ paramCount: 4, text: "Argb(, , , )", descriptionStringId: "ReportStringId.ExpressionEditor_Description_Function_Argb" }]
                    }
                });
                var ReportExpressionEditor = (function (_super) {
                    __extends(ReportExpressionEditor, _super);
                    function ReportExpressionEditor(modelPropertyInfo, level, parentDisabled, textToSearch) {
                        return _super.call(this, modelPropertyInfo, level, parentDisabled, textToSearch) || this;
                    }
                    ReportExpressionEditor.prototype._createReportItems = function (reportExplorerProvider, onClick) {
                        var item = {
                            displayName: DevExpress.Analytics.Utils.getLocalization("Report Items", "ReportStringId.ExpressionEditor_ItemInfo_ReportItems"),
                            content: {
                                showDescription: false,
                                isSelected: ko.observable(false),
                                data: {
                                    fields: {
                                        itemsProvider: reportExplorerProvider,
                                        expandRootItems: true,
                                        selectedPath: ko.observable(""),
                                        templateName: "dx-ee-treelist-item",
                                        treeListController: new DevExpress.Analytics.Widgets.Internal.ExpressionEditorTreeListController("", function (item, element) { onClick('[' + ["ReportItems", item.text].join('.') + ']'); })
                                    }
                                },
                                name: "dx-expressioneditor-fields"
                            }
                        };
                        return item;
                    };
                    ReportExpressionEditor.prototype._createValuesTab = function () {
                        var items = this.values().map(function (item) {
                            var display = item.value || item;
                            return {
                                text: "'" + display + "'",
                                displayName: display
                            };
                        });
                        return DevExpress.Analytics.Widgets.Internal.createExpressionEditorCollectionToolOptions(items, "Values", "ReportStringId.ExpressionEditor_ItemInfo_Values", false);
                    };
                    ReportExpressionEditor.prototype.patchOptions = function (reportExplorerProvider) {
                        var _this = this;
                        if (!this.value()) {
                            return false;
                        }
                        else {
                            if (!this.value()["customizeCategories"])
                                this.value()["customizeCategories"] = function (sender, groups, onClick) {
                                    groups.splice(0, 0, _this._createReportItems(reportExplorerProvider, onClick));
                                    if (_this.values() && _this.values().length > 0) {
                                        groups.splice(2, 0, _this._createValuesTab());
                                    }
                                    Designer.Internal.addVariablesToExpressionEditor(groups, _this.value().eventName === "PrintOnPage" ? function (items) {
                                        items.push({ text: "Arguments.PageIndex", val: "[Arguments.PageIndex]", descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Arguments_PageIndex' });
                                        items.push({ text: "Arguments.PageCount", val: "[Arguments.PageCount]", descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Arguments_PageCount' });
                                        return items;
                                    } : undefined);
                                };
                            return true;
                        }
                    };
                    return ReportExpressionEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.ReportExpressionEditor = ReportExpressionEditor;
                var ExplorerEditor = (function (_super) {
                    __extends(ExplorerEditor, _super);
                    function ExplorerEditor(modelPropertyInfo, level, parentDisabled, textToSearch) {
                        var _this = _super.call(this, modelPropertyInfo, level, parentDisabled, textToSearch) || this;
                        _this._collectionNames = ["controls", "bands"];
                        _this._disposables.push(_this.displayExpr = ko.computed(function () {
                            var value = ko.unwrap(_this.value);
                            return value && ko.unwrap(value.displayName || value.name) || "";
                        }));
                        var model = ko.computed(function () { return _this._model() && _this._model()["root"]; });
                        _this._disposables.push(model);
                        _this._disposables.push(_this.itemsProvider = new DevExpress.Analytics.Internal.ObjectExplorerProvider([{ model: model, name: "Report", displayName: "Report", className: "master_report" }], ["bands", "controls", "rows", "cells"], _this.value, Designer.Internal.ReportExplorerModel.getPathByMember));
                        _this.itemsProvider.path("Report");
                        _this.treeListController = new DevExpress.Analytics.Internal.ObjectStructureTreeListController(["bands", "controls", "rows", "cells", "Report"]);
                        _this.treeListController.canSelect = function (item) {
                            return !item.hasItems && !(item.data && (item.data["data"] instanceof Bands.BandViewModel));
                        };
                        _this.treeListController.itemsFilter = function (item) {
                            return item && item["data"] && _this._isVisible(item["data"]);
                        };
                        return _this;
                    }
                    ExplorerEditor.prototype._isVisible = function (item) {
                        if (item instanceof Bands.BandViewModel) {
                            for (var i = 0; i < this._collectionNames.length; i++) {
                                var collection = item[this._collectionNames[i]] && item[this._collectionNames[i]]();
                                if (collection) {
                                    for (var j = 0; j < collection.length; j++) {
                                        if (this._isVisible(collection[j]))
                                            return true;
                                    }
                                }
                            }
                            return false;
                        }
                        else {
                            return item !== this._model() &&
                                item.controlType !== "XRTableOfContents" &&
                                item.controlType !== "XRPivotGrid" &&
                                item.controlType !== "XRPageBreak" &&
                                item.controlType !== "XRSubreport" &&
                                item.controlType !== "PivotGridField";
                        }
                    };
                    return ExplorerEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.ExplorerEditor = ExplorerEditor;
                var DrillDownEditor = (function (_super) {
                    __extends(DrillDownEditor, _super);
                    function DrillDownEditor(info, level, parentDisabled, textToSearch) {
                        var _this = _super.call(this, info, level, parentDisabled, textToSearch) || this;
                        _this.path = ko.observable(null);
                        _this._disposables.push(ko.computed(function () {
                            if (_this._model() && _this._model() instanceof Bands.BandViewModel) {
                                var target = null;
                                if (_this._model() instanceof Bands.DetailBand && _this._model().hasHierarchyPrintOptions()) {
                                    target = _this._model();
                                }
                                else {
                                    var bands = _this._model().parentModel().bands();
                                    var position = bands.indexOf(_this._model());
                                    target = _this._findFistAvailableBand(bands, position - 1);
                                }
                                if (target) {
                                    _this._setDisabled(false);
                                    _this.itemsProvider.path(Designer.Internal.ReportExplorerModel.getPathByMember(target));
                                }
                                else {
                                    _this.itemsProvider.path("");
                                    _this._setDisabled(true);
                                }
                            }
                        }));
                        return _this;
                    }
                    DrillDownEditor.prototype._setDisabled = function (value) {
                        var info = this.info();
                        if (info.disabled) {
                            if (ko.isObservable(info.disabled)) {
                                info.disabled(value);
                            }
                            else {
                                info.disabled = value;
                            }
                        }
                        else {
                            info.disabled = ko.observable(value);
                        }
                    };
                    DrillDownEditor.prototype._findFistAvailableBand = function (bands, position) {
                        if (position === -1) {
                            return null;
                        }
                        var target = bands[position];
                        if (target && (target.controlType === "GroupHeaderBand" || target.controlType === "DetailBand")) {
                            return target;
                        }
                        else if (target) {
                            return this._findFistAvailableBand(bands, position - 1);
                        }
                        else {
                            return null;
                        }
                    };
                    return DrillDownEditor;
                }(ExplorerEditor));
                Widgets.DrillDownEditor = DrillDownEditor;
                var EditOptionsEditorNameEditorModel = (function (_super) {
                    __extends(EditOptionsEditorNameEditorModel, _super);
                    function EditOptionsEditorNameEditorModel(modelPropertyInfo, level, parentDisabled, textToSearch) {
                        var _this = _super.call(this, modelPropertyInfo, level, parentDisabled, textToSearch) || this;
                        _this.displayValue = ko.observable("");
                        var extesions = DevExpress.Reporting.Editing.EditingFieldExtensions.instance();
                        var editorOptions = modelPropertyInfo.editorOptions;
                        var categoriesToFilter = [];
                        if (editorOptions) {
                            categoriesToFilter = editorOptions.categories || extesions.categories(editorOptions.excludeCategories);
                        }
                        _this.itemsProvider = {
                            getItems: function (path) {
                                var editorSet = extesions.editors();
                                var filteredEditorSet = !categoriesToFilter
                                    ? editorSet
                                    : editorSet.filter(function (e) { return categoriesToFilter.indexOf(e.category) !== -1; });
                                var editorMembers = filteredEditorSet.map(function (item) {
                                    var mask = item.options && item.options["mask"];
                                    return {
                                        name: item.name,
                                        displayName: item.displayName,
                                        specifics: "_none_",
                                        templateName: "dxrd-editingField-editor-treelist-item",
                                        title: item.displayName + (mask ? " [" + mask + "]" : "")
                                    };
                                });
                                return $.Deferred().resolve(editorMembers).promise();
                            }
                        };
                        var editor = extesions.editor(_this.value());
                        if (editor) {
                            _this.value(editor.name);
                            _this.displayValue(editor.displayName);
                        }
                        _this.value.subscribe(function (newValue) {
                            var editor = extesions.editor(newValue);
                            if (editor) {
                                _this.value(editor.name);
                                _this.displayValue(editor.displayName);
                                return;
                            }
                            _this.displayValue("");
                            _this.value("");
                        });
                        return _this;
                    }
                    return EditOptionsEditorNameEditorModel;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.EditOptionsEditorNameEditorModel = EditOptionsEditorNameEditorModel;
                var FieldsComboboxEditor = (function (_super) {
                    __extends(FieldsComboboxEditor, _super);
                    function FieldsComboboxEditor() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.wrappedValues = null;
                        return _this;
                    }
                    FieldsComboboxEditor.prototype._createItem = function (displayNameProvider, item) {
                        var deferred = $.Deferred();
                        displayNameProvider.getDisplayNameByPath(this.path(), item).done(function (result) {
                            deferred.resolve({ value: item, displayValue: result });
                        }).fail(function () {
                            deferred.resolve({ value: item, displayValue: item });
                        });
                        return deferred;
                    };
                    FieldsComboboxEditor.prototype._updateValues = function (values, displayNameProvider) {
                        var _this = this;
                        this.wrappedValues(values);
                        $.when.apply($, values.map(function (x) { return _this._createItem(displayNameProvider, x.value); })).done(function () {
                            var results = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                results[_i] = arguments[_i];
                            }
                            _this.wrappedValues(results);
                        });
                    };
                    FieldsComboboxEditor.prototype.wrapValues = function (displayNameProvider) {
                        var _this = this;
                        if (!this.wrappedValues) {
                            this.wrappedValues = ko.observableArray();
                            this._disposables.push(this.values.subscribe(function (newVal) {
                                _this._updateValues(newVal, displayNameProvider());
                            }));
                            this._updateValues(this.values(), displayNameProvider());
                        }
                        return this.wrappedValues;
                    };
                    return FieldsComboboxEditor;
                }(DevExpress.Analytics.Widgets.FieldListEditor));
                Widgets.FieldsComboboxEditor = FieldsComboboxEditor;
                var FormattingRuleEditor = (function (_super) {
                    __extends(FormattingRuleEditor, _super);
                    function FormattingRuleEditor(info, level, parentDisabled, textToSearch) {
                        var _this = _super.call(this, info, level, parentDisabled, textToSearch) || this;
                        var rules = ko.pureComputed(function () {
                            var formattingRuleSheet = _this._model() && _this._model()["root"] && _this._model()["root"].formattingRuleSheet || ko.observableArray();
                            formattingRuleSheet().forEach(function (rule) {
                                _this._disposables.push(rule.selected = ko.pureComputed({
                                    read: function () {
                                        return _this.value()().filter(function (link) { return link.value() === rule; }).length > 0;
                                    },
                                    write: function (val) {
                                        if (val) {
                                            _this.value().push(Controls.FormattingRuleLink.createNew(rule));
                                        }
                                        else {
                                            var link = _this.value()().filter(function (itemLink) { return itemLink.value() === rule; })[0];
                                            _this.value().remove(link);
                                        }
                                    }
                                }));
                            });
                            return formattingRuleSheet;
                        });
                        _this._disposables.push(rules);
                        _this.options = {
                            addHandler: function () { return Controls.FormattingRule.createNew(_this._model()["root"]); },
                            values: rules,
                            displayName: _this.displayName(),
                            level: _this.level,
                            info: _this.info
                        };
                        return _this;
                    }
                    return FormattingRuleEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.FormattingRuleEditor = FormattingRuleEditor;
                var GaugeStyleEditor = (function (_super) {
                    __extends(GaugeStyleEditor, _super);
                    function GaugeStyleEditor(info, level, parentDisabled, textToSearch) {
                        var _this = _super.call(this, info, 0, parentDisabled, textToSearch) || this;
                        _this._viewModel = ko.observable();
                        _this.viewmodel = {
                            items: ko.pureComputed(function () {
                                if (_this._viewModel() && _this._viewModel().viewType) {
                                    return _this._viewModel().viewType() === 'Circular' ? Controls.Metadata.circularValues : Controls.Metadata.linearValues;
                                }
                                else {
                                    return [];
                                }
                            })
                        };
                        _this._disposables.push(_this.viewmodel.items);
                        return _this;
                    }
                    GaugeStyleEditor.prototype.update = function (viewModel) {
                        _super.prototype.update.call(this, viewModel);
                        this._viewModel(viewModel);
                    };
                    return GaugeStyleEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.GaugeStyleEditor = GaugeStyleEditor;
                var dxImageSourceEditor = (function (_super) {
                    __extends(dxImageSourceEditor, _super);
                    function dxImageSourceEditor(element, options) {
                        var _this = this;
                        options.placeholderId = options.placeholderId || "Image";
                        _this = _super.call(this, element, options) || this;
                        return _this;
                    }
                    dxImageSourceEditor.prototype._toggleReadOnlyState = function () {
                        _super.prototype._toggleReadOnlyState.call(this);
                        this["_input"]().prop("readOnly", true);
                    };
                    dxImageSourceEditor.prototype._handleFiles = function (filesHolder) {
                        var _this = this;
                        var files = filesHolder.files;
                        for (var i = 0; i < files.length; i++) {
                            var file = files[i];
                            if (this.option("type") === "img") {
                                var imageType = /image.*/;
                                if (!file.type.match(imageType)) {
                                    continue;
                                }
                            }
                            var fr = new FileReader();
                            fr.onload = function (args) {
                                var format = _this._filesinput[0].files[0].name.split('.').pop();
                                var encodedContent = fr.result.replace(/^data:[^,]+,/, '');
                                _this.option("value", new DevExpress.Reporting.ImageSource(format.toLowerCase() === 'svg' ? 'svg' : 'img', encodedContent));
                                _this._filesinput.val("");
                            };
                            fr.readAsDataURL(file);
                        }
                    };
                    return dxImageSourceEditor;
                }(DevExpress.Analytics.Widgets.Internal.dxFileImagePicker));
                Widgets.dxImageSourceEditor = dxImageSourceEditor;
                DevExpress.registerComponent('dxImageSourceEditor', dxImageSourceEditor);
                var LinesEditor = (function (_super) {
                    __extends(LinesEditor, _super);
                    function LinesEditor() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.collapsed = ko.observable(false);
                        return _this;
                    }
                    return LinesEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.LinesEditor = LinesEditor;
                var NameEditor = (function (_super) {
                    __extends(NameEditor, _super);
                    function NameEditor(info, level, parentDisabled, textToSearch) {
                        return _super.call(this, info, level, parentDisabled, textToSearch) || this;
                    }
                    NameEditor.prototype._getEditorValidationRules = function () {
                        return (this.currentValidationRules || []).concat(_super.prototype._getEditorValidationRules.call(this));
                    };
                    NameEditor.prototype.generateRules = function (allControls) {
                        var self = this;
                        if (!this.currentValidationRules) {
                            this.currentValidationRules = [{
                                    type: "custom",
                                    validationCallback: function (options) {
                                        return allControls().filter(function (x) {
                                            if (ko.unwrap(x.name) !== options.value)
                                                return false;
                                            var model = self._model();
                                            if (!model || x === model)
                                                return false;
                                            var same = model["isSame"];
                                            if (same && $.isFunction(same) && same(x))
                                                return false;
                                            return true;
                                        }).length === 0;
                                    },
                                    get message() { return DevExpress.Analytics.Utils.getLocalization("Name is not unique", "ASPxReportsStringId.ReportDesigner_NameUniqueError"); }
                                }];
                        }
                        return this._getEditorValidationRules();
                    };
                    return NameEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.NameEditor = NameEditor;
                var PivotGridCriteriaEditor = (function (_super) {
                    __extends(PivotGridCriteriaEditor, _super);
                    function PivotGridCriteriaEditor(info, level, parentDisabled, textToSearch) {
                        return _super.call(this, info, level, parentDisabled, textToSearch) || this;
                    }
                    PivotGridCriteriaEditor.prototype._createItemsProvider = function (fieldListProvider) {
                        var _this = this;
                        return {
                            getItems: function (pathRequest) {
                                var model = _this._model.peek();
                                if (!model || pathRequest.fullPath.indexOf("Parameters") === 0)
                                    return $.Deferred().resolve().promise();
                                var pivot = model["parent"];
                                var result = $.Deferred();
                                var fullPath = new DevExpress.Analytics.Utils.PathRequest(DevExpress.Analytics.Internal.getFullPath(pivot.getPath(""), pivot.dataMember()));
                                ko.unwrap(fieldListProvider).getItems(fullPath).done(function (dataSourceItems) {
                                    var items = [], fields = pivot.fields();
                                    for (var i = 0; i < fields.length; i++) {
                                        var field = fields[i];
                                        if (field.area() === "DataArea") {
                                            continue;
                                        }
                                        var dataMemberInfo = dataSourceItems.filter(function (item) { return item.name === field.fieldName(); })[0];
                                        items.push({
                                            displayName: field.getDisplayName(),
                                            isList: false,
                                            name: field.name(),
                                            specifics: dataMemberInfo && dataMemberInfo.specifics.toLowerCase() || "integer"
                                        });
                                    }
                                    result.resolve(items);
                                });
                                return result.promise();
                            }
                        };
                    };
                    PivotGridCriteriaEditor.prototype._getFieldName = function (name, isRealName) {
                        if (isRealName === void 0) { isRealName = false; }
                        var model = this._model.peek();
                        if (!model)
                            return $.Deferred().resolve().promise();
                        var pivot = model["parent"];
                        var field = DevExpress.Analytics.Internal.find(pivot.fields.peek(), function (f) { return (isRealName ? (f.getDisplayName() || name) : f.name()) === name; });
                        var def = $.Deferred();
                        if (!field)
                            def.reject();
                        else
                            def.resolve(isRealName ? field.name() : field.getDisplayName());
                        return def.promise();
                    };
                    PivotGridCriteriaEditor.prototype._createDisplayNameProvider = function () {
                        var _this = this;
                        return {
                            getDisplayNameByPath: function (path, name) {
                                return _this._getFieldName(name);
                            },
                            getRealName: function (path, name) {
                                return _this._getFieldName(name, true);
                            }
                        };
                    };
                    PivotGridCriteriaEditor.prototype.wrapModel = function (fieldListProvider) {
                        if (!this.itemsProvider) {
                            this.itemsProvider = this._createItemsProvider(fieldListProvider);
                            this.displayNameProvider = this._createDisplayNameProvider();
                        }
                        return this;
                    };
                    return PivotGridCriteriaEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.PivotGridCriteriaEditor = PivotGridCriteriaEditor;
                var ContentByTypeEditor = (function (_super) {
                    __extends(ContentByTypeEditor, _super);
                    function ContentByTypeEditor() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    ContentByTypeEditor.prototype.createObjectProperties = function () {
                        return new DevExpress.Analytics.Widgets.ObjectProperties(this.getViewModel(), undefined, this.level + 1, this.disabled, undefined, this.textToSearch);
                    };
                    ContentByTypeEditor.prototype.getViewModel = function () {
                        var _this = this;
                        var value = ko.computed(function () {
                            return _this.value() && _this.value().content();
                        });
                        this._disposables.push(value);
                        return value;
                    };
                    return ContentByTypeEditor;
                }(DevExpress.Analytics.Widgets.PropertyGridEditor));
                Widgets.ContentByTypeEditor = ContentByTypeEditor;
                var DataBindingsEditor = (function (_super) {
                    __extends(DataBindingsEditor, _super);
                    function DataBindingsEditor(info, level, parentDisabled, textToSearch) {
                        return _super.call(this, info, level, parentDisabled, textToSearch) || this;
                    }
                    DataBindingsEditor.prototype.createObjectProperties = function () {
                        var _this = this;
                        var model = ko.pureComputed(function () {
                            var obj = {};
                            obj.isPropertyModified = function (name) {
                                return !obj[name].isEmpty();
                            };
                            obj.actions = [{
                                    action: function (propertyName) { obj[propertyName].resetValue(); },
                                    title: DevExpress.Analytics.Utils.getLocalization("Reset", "AnalyticsCoreStringId.PropertyGrid_PopupMenu_Reset"),
                                    visible: function () { return true; }
                                }];
                            var databindings = _this.value()();
                            (databindings || []).map(function (value) { obj[value.propertyName()] = value; });
                            return obj;
                        });
                        this._disposables.push(model);
                        return new DevExpress.Analytics.Widgets.ObjectProperties(model, { editors: Internal.dataBindingsSerializationInfo }, this.level + 1, this.disabled, undefined, this.textToSearch);
                    };
                    return DataBindingsEditor;
                }(DevExpress.Analytics.Widgets.PropertyGridEditor));
                Widgets.DataBindingsEditor = DataBindingsEditor;
                var FontEditorUndo = (function (_super) {
                    __extends(FontEditorUndo, _super);
                    function FontEditorUndo(info, level, parentDisabled, textToSearch) {
                        return _super.call(this, info, level, parentDisabled, textToSearch) || this;
                    }
                    FontEditorUndo.prototype.generateValue = function (undoEngine) {
                        this.undoEngine = undoEngine;
                        return this.viewmodel;
                    };
                    FontEditorUndo.prototype.createObjectProperties = function () {
                        var _this = this;
                        var undoValue = ko.computed({
                            read: function () {
                                return _this.value();
                            },
                            write: function (val) {
                                _this.undoEngine && _this.undoEngine().start();
                                _this.value(val);
                                _this.undoEngine && _this.undoEngine().end();
                            }
                        });
                        this._disposables.push(undoValue);
                        var model = new DevExpress.Analytics.Widgets.Internal.FontModel(undoValue);
                        this._disposables.push(model);
                        return new DevExpress.Analytics.Widgets.ObjectProperties(ko.observable(model), { editors: DevExpress.Analytics.Widgets.Metadata.fontInfo }, this.level + 1, this.disabled, undefined, this.textToSearch);
                    };
                    return FontEditorUndo;
                }(DevExpress.Analytics.Widgets.PropertyGridEditor));
                Widgets.FontEditorUndo = FontEditorUndo;
                var RichTextFileEditor = (function (_super) {
                    __extends(RichTextFileEditor, _super);
                    function RichTextFileEditor(info, level, parentDisabled, textToSearch) {
                        var _this = _super.call(this, info, level, parentDisabled, textToSearch) || this;
                        _this.format = ko.observable("");
                        _this._disposables.push(_this.format.subscribe(function (newVal) {
                            _this._model().format(_this._toStreamType(newVal));
                        }));
                        return _this;
                    }
                    RichTextFileEditor.prototype._toStreamType = function (extension) {
                        switch (extension.toLowerCase()) {
                            case "txt":
                                return Controls.XRRichTextStreamType.PlainText;
                            case "htm":
                            case "html":
                                return Controls.XRRichTextStreamType.HtmlText;
                            case "docx":
                                return Controls.XRRichTextStreamType.XmlText;
                        }
                        return Controls.XRRichTextStreamType.RtfText;
                    };
                    return RichTextFileEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.RichTextFileEditor = RichTextFileEditor;
                var UndoEditor = (function (_super) {
                    __extends(UndoEditor, _super);
                    function UndoEditor(info, level, parentDisabled, textToSearch) {
                        return _super.call(this, info, level, parentDisabled, textToSearch) || this;
                    }
                    UndoEditor.prototype.generateValue = function (undoEngine) {
                        var _this = this;
                        if (!this.generatedValue) {
                            this._disposables.push(this.generatedValue = ko.computed({
                                read: function () {
                                    return _this.value();
                                },
                                write: function (val) {
                                    undoEngine().start();
                                    _this.value(val);
                                    undoEngine().end();
                                }
                            }));
                        }
                        return this.generatedValue;
                    };
                    return UndoEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.UndoEditor = UndoEditor;
                var ComboboxUndoEditor = (function (_super) {
                    __extends(ComboboxUndoEditor, _super);
                    function ComboboxUndoEditor(info, level, parentDisabled, textToSearch) {
                        return _super.call(this, info, level, parentDisabled, textToSearch) || this;
                    }
                    ComboboxUndoEditor.prototype.generateValue = function (undoEngine) {
                        var _this = this;
                        if (!this.undoValue) {
                            this._disposables.push(this.undoValue = ko.computed({
                                read: function () {
                                    return _this.value();
                                },
                                write: function (val) {
                                    undoEngine().start();
                                    _this.value(val);
                                    undoEngine().end();
                                }
                            }));
                        }
                        return this.undoValue;
                    };
                    return ComboboxUndoEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.ComboboxUndoEditor = ComboboxUndoEditor;
                var ReportUrlEditor = (function (_super) {
                    __extends(ReportUrlEditor, _super);
                    function ReportUrlEditor(info, level, parentDisabled, textToSearch) {
                        return _super.call(this, info, level, parentDisabled, textToSearch) || this;
                    }
                    ReportUrlEditor.prototype.getItems = function (urls, tab) {
                        if (!this.urls) {
                            this.urls = ko.computed(function () {
                                return tab() ? urls().filter(function (x) { return x.Key !== tab().url(); }) : urls();
                            });
                        }
                        return this.urls;
                    };
                    return ReportUrlEditor;
                }(DevExpress.Analytics.Widgets.Editor));
                Widgets.ReportUrlEditor = ReportUrlEditor;
                var StylesEditorHeaderModel = (function () {
                    function StylesEditorHeaderModel(styleName, styles, disabled, popupContainer) {
                        var _this = this;
                        this.displayExpr = "name";
                        this.valueExpr = "name";
                        this.displayCustomValue = true;
                        this.placeholder = DevExpress.Analytics.Internal.selectPlaceholder();
                        this.noDataText = DevExpress.Analytics.Internal.noDataText();
                        this.value = ko.pureComputed({
                            read: function () {
                                return styleName();
                            },
                            write: function (newVal) {
                                if (newVal !== DevExpress.Analytics.Utils.getLocalization(StylesEditorHeaderModel.newItem, StylesEditorHeaderModel.newItemTextId)) {
                                    styleName(newVal);
                                }
                            }
                        });
                        this.items = ko.pureComputed(function () {
                            var result = [new Controls.StyleModel({ "@Name": DevExpress.Analytics.Utils.getLocalization(StylesEditorHeaderModel.newItem, StylesEditorHeaderModel.newItemTextId) })];
                            if (styles && styles()) {
                                result.push.apply(result, styles());
                            }
                            return result;
                        });
                        this.onValueChanged = function (e) {
                            if (e.value === DevExpress.Analytics.Utils.getLocalization(StylesEditorHeaderModel.newItem, StylesEditorHeaderModel.newItemTextId)) {
                                var newStyleName = DevExpress.Analytics.Internal.getUniqueNameForNamedObjectsArray(styles(), "xrControlStyle"), newStyle = new Controls.StyleModel({ "@Name": newStyleName });
                                styles.push(newStyle);
                                _this.value(newStyleName);
                            }
                        };
                        this.disabled = disabled;
                        this.dropDownOptions = { container: popupContainer };
                    }
                    StylesEditorHeaderModel.newItem = "Create New Style";
                    StylesEditorHeaderModel.newItemTextId = "ASPxReportsStringId.ReportDesigner_StylesEditor_CreateNew";
                    return StylesEditorHeaderModel;
                }());
                Widgets.StylesEditorHeaderModel = StylesEditorHeaderModel;
                ko.bindingHandlers['dxStylesEditor'] = {
                    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        $(element).children().remove();
                        var values = valueAccessor(), templateHtml = DevExpress.Analytics.Widgets.Internal.getTemplate('dx-propertieseditor'), $element = $(element).append(templateHtml);
                        var style = ko.pureComputed(function () {
                            var value = valueAccessor(), styles = value.styles && value.styles(), filtered = styles && styles.filter(function (item) {
                                return item.name() === valueAccessor().styleName();
                            });
                            return (filtered && filtered.length > 0) ? filtered[0] : null;
                        });
                        ko.applyBindings(bindingContext.createChildContext(new DevExpress.Analytics.Widgets.ObjectProperties(style, { editors: Controls.Metadata.styleSerializationInfo }, 1, viewModel.disabled, undefined, viewModel.textToSearch)), $element.children()[0]);
                        return { controlsDescendantBindings: true };
                    }
                };
                Widgets.editorTemplates = {
                    dataSource: { header: "dxrd-datasource", editorType: DataSourceEditor },
                    dataBindings: { header: "dxrd-dataBindings", content: "dxrd-dataBindingsContent", editorType: DataBindingsEditor },
                    dataBinding: { header: "dxrd-dataBinding", content: "dxrd-dataBindingContent", editorType: DevExpress.Analytics.Widgets.FieldListEditor },
                    reportExplorer: { header: "dxrd-reportexplorer-editor", editorType: ExplorerEditor },
                    reportSourceUrl: { header: "dxrd-reportSourceUrl", editorType: ReportUrlEditor },
                    bands: { header: "dxrd-bands", editorType: BandsEditor },
                    runningBand: { header: "dxrd-bands", editorType: RunningBandEditor },
                    sortingBand: { header: "dxrd-bands", content: "dx-objectEditorContent", editorType: SortingBandEditor },
                    style: { header: "dxrd-style", content: "dxrd-styleContent" },
                    stylePriority: { header: "dxrd-stylePriority" },
                    contentByType: { header: "dxrd-content-type", content: "dx-objectEditorContent", editorType: ContentByTypeEditor },
                    lookUpValues: { custom: "dxrd-lookUpValues" },
                    reportexpression: { header: "dxrd-reportexpression", editorType: ReportExpressionEditor },
                    drillDownControls: { header: "dxrd-reportexplorer-editor", editorType: DrillDownEditor },
                    viewStyle: { header: "dxrd-viewStyle", editorType: GaugeStyleEditor },
                    pivotGridFields: { custom: "dxrd-pivotGridFields" },
                    scriptsBox: { header: "dxrd-scriptsbox" },
                    formattingRule: { custom: "dxrd-formattingRuleCollection", editorType: FormattingRuleEditor },
                    toclevel: { custom: "dxrd-levelCollection" },
                    calculatedFields: { custom: "dxrd-calculatedFields" },
                    parameters: { custom: "dxrd-parameters" },
                    reportRtlProperty: { header: "dxrd-reportRtlProperty" },
                    comboboxUndo: { header: "dx-combobox-undo", editorType: ComboboxUndoEditor },
                    fontUndo: { header: "dx-emptyHeader", content: "dx-objectEditorContentUndo", editorType: FontEditorUndo },
                    chartValueBinding: { header: "dxrd-chartValueBinding", editorType: ChartValueBindingEditor },
                    name: { header: "dxrd-name", editorType: NameEditor },
                    numericUndo: { header: "dx-numeric-undo", editorType: UndoEditor },
                    pivotCriteria: { header: "dxrd-pivotcriteria", editorType: PivotGridCriteriaEditor },
                    fieldsCombobox: { header: "dxrd-fields-combobox", editorType: FieldsComboboxEditor },
                    richTextLoad: { header: "dxrd-richtext-loadfile", editorType: RichTextFileEditor },
                    summaryEditor: { header: "dxrd-summaryeditor-header", content: "dxrd-objectEditorContent", editorType: null }
                };
                var Internal;
                (function (Internal) {
                    Internal.dataBindingsSerializationInfo = [
                        { propertyName: "ActualValue", editor: Widgets.editorTemplates.dataBinding, displayName: "Actual Value", localizationId: "DevExpress.XtraReports.UI.XRGauge.ActualValue" },
                        { propertyName: "Bookmark", editor: Widgets.editorTemplates.dataBinding, displayName: "Bookmark", localizationId: "DevExpress.XtraReports.UI.XRControl.Bookmark" },
                        { propertyName: "CheckState", editor: Widgets.editorTemplates.dataBinding, displayName: "Check State", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.CheckState" },
                        { propertyName: "Html", editor: Widgets.editorTemplates.dataBinding, displayName: "HTML", localizationId: 'ASPxReportsStringId.ExportName_html' },
                        { propertyName: "Image", editor: Widgets.editorTemplates.dataBinding, displayName: "Image", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.Image" },
                        { propertyName: "ImageSource", editor: Widgets.editorTemplates.dataBinding, displayName: "Image Source", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageSource" },
                        { propertyName: "ImageUrl", editor: Widgets.editorTemplates.dataBinding, displayName: "Image URL", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageUrl" },
                        { propertyName: "Maximum", editor: Widgets.editorTemplates.dataBinding, displayName: "Maximum", localizationId: "DevExpress.XtraReports.UI.XRGauge.Maximum" },
                        { propertyName: "Minimum", editor: Widgets.editorTemplates.dataBinding, displayName: "Minimum", localizationId: "DevExpress.XtraReports.UI.XRGauge.Minimum" },
                        { propertyName: "NavigateUrl", editor: Widgets.editorTemplates.dataBinding, displayName: "Navigation URL", localizationId: "DevExpress.XtraReports.UI.XRControl.NavigateUrl" },
                        { propertyName: "Rtf", editor: Widgets.editorTemplates.dataBinding, displayName: "RTF", localizationId: 'ASPxReportsStringId.ExportName_rtf' },
                        { propertyName: "Tag", editor: Widgets.editorTemplates.dataBinding, displayName: "Tag", localizationId: "DevExpress.XtraReports.UI.XRControl.Tag" },
                        { propertyName: "TargetValue", editor: Widgets.editorTemplates.dataBinding, displayName: "Target Value", localizationId: "DevExpress.XtraReports.UI.XRGauge.TargetValue" },
                        { propertyName: "Text", editor: Widgets.editorTemplates.dataBinding, displayName: "Text", localizationId: "DevExpress.XtraReports.UI.XRControl.Text" }
                    ];
                })(Internal = Widgets.Internal || (Widgets.Internal = {}));
                (function (Internal) {
                    var SummaryEditorPopup = (function () {
                        function SummaryEditorPopup() {
                            var _this = this;
                            this.model = ko.observable(null);
                            this.grid = new DevExpress.Analytics.Widgets.ObjectProperties(this.model);
                            this.visible = ko.observable(false);
                            this.container = function (element) { return DevExpress.Analytics.Internal.getParentContainer(element); };
                            this.buttons = [
                                {
                                    toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                        text: DevExpress.Analytics.Utils.getLocalization('Apply', ''), onClick: function () {
                                            _this.model().applyChanges();
                                            _this.visible(false);
                                        }
                                    }
                                },
                                {
                                    toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                        text: DevExpress.Analytics.Utils.getLocalization("Cancel", 'AnalyticsCoreStringId.SearchDialog_Cancel'), onClick: function () {
                                            _this.visible(false);
                                        }
                                    }
                                }
                            ];
                        }
                        SummaryEditorPopup.prototype.dispose = function () {
                            this.buttons = [];
                            this.grid.dispose();
                            this.model(null);
                        };
                        return SummaryEditorPopup;
                    }());
                    Internal.SummaryEditorPopup = SummaryEditorPopup;
                    var SummaryEditorModel = (function (_super) {
                        __extends(SummaryEditorModel, _super);
                        function SummaryEditorModel(_control) {
                            var _this = _super.call(this) || this;
                            _this._control = _control;
                            _this._order = ["Running", "Func", "calculate", "weight", "ignoreNullValues", "treatStringsAsNumerics"];
                            _this._summaryFunctionValues = Controls.Metadata.getSummaryFunctionValues().map(function (x) {
                                return {
                                    value: "sum" + x.value,
                                    displayValue: x.displayValue,
                                    localizationId: x.localizationId
                                };
                            }).concat([{ value: "sumWAvg", displayValue: "Weighted average", localizationId: "ReportStringId.WAvgDisplayName" }]);
                            _this._info = Controls.Metadata.createSummarySerializationInfo(_this._summaryFunctionValues).concat([
                                { propertyName: "calculate", editor: Widgets.editorTemplates.reportexpression, displayName: "Calculate" },
                                { propertyName: "weight", editor: Widgets.editorTemplates.reportexpression, displayName: "Weight" }
                            ]).sort(function (a, b) { return _this._order.indexOf(a.propertyName) - _this._order.indexOf(b.propertyName); });
                            _this.Func = ko.observable("sumSum");
                            _this.calculate = { value: ko.observable("") };
                            _this.weight = { value: ko.observable("") };
                            _this._summary = _this._control["Summary"];
                            _this._initExpressionValues();
                            _this.ignoreNullValues = ko.observable(_this._summary.ignoreNullValues());
                            _this.treatStringsAsNumerics = ko.observable(_this._summary.treatStringsAsNumerics());
                            _this.Running = ko.observable(_this._summary.Running());
                            _this._disposables.push(_this.calculate.path = ko.computed(function () { return _this._control.getPath("expression"); }));
                            _this._disposables.push(_this.weight.path = ko.computed(function () { return _this._control.getPath("expression"); }));
                            return _this;
                        }
                        SummaryEditorModel.prototype.dispose = function () {
                            _super.prototype.dispose.call(this);
                            this._control = null;
                            this._summary = null;
                        };
                        SummaryEditorModel.prototype._initExpressionValues = function () {
                            var textBinding = this._control.getExpressionBinding("Text");
                            if (!textBinding)
                                return;
                            var expression = DevExpress.Analytics.Criteria.CriteriaOperator.parse(textBinding);
                            var leftPart = textBinding;
                            if (expression instanceof DevExpress.Analytics.Criteria.FunctionOperator && this._summaryFunctionValues.some(function (x) { return x.value === expression.displayType; })) {
                                var serializer = new DevExpress.Analytics.Widgets.Internal.FilterEditorSerializer();
                                this.Func(expression.displayType);
                                leftPart = expression.leftPart && serializer.serialize(expression.leftPart);
                                this.weight.value(this.Func() === "sumWAvg" ? expression.rightPart[0] && serializer.serialize(expression.rightPart[0]) : "");
                            }
                            this.calculate.value(leftPart);
                        };
                        SummaryEditorModel.prototype.getInfo = function () {
                            return this._info;
                        };
                        SummaryEditorModel.prototype.applyChanges = function () {
                            var undoEngine = DevExpress.Analytics.Utils.UndoEngine.tryGetUndoEngine(this._control);
                            undoEngine && undoEngine.start();
                            var result = "";
                            this._summary.Running(this.Running());
                            if (this.isDisabled()) {
                                result = this.calculate.value();
                            }
                            else {
                                this._summary.ignoreNullValues(this.ignoreNullValues());
                                this._summary.treatStringsAsNumerics(this.treatStringsAsNumerics());
                                result = this.Func() + "(" + this.calculate.value() + (this.weight.value() ? ", " + this.weight.value() : "") + ")";
                            }
                            this._control.getDefaultBinding().value(result);
                            undoEngine && undoEngine.end();
                        };
                        SummaryEditorModel.prototype.isPropertyDisabled = function (propertyName) {
                            if (this.isDisabled()) {
                                return propertyName !== "Running";
                            }
                            return propertyName === "weight" && this.Func() !== "sumWAvg";
                        };
                        SummaryEditorModel.prototype.isDisabled = function () { return this.Running() === "None"; };
                        return SummaryEditorModel;
                    }(DevExpress.Analytics.Utils.Disposable));
                    Internal.SummaryEditorModel = SummaryEditorModel;
                })(Internal = Widgets.Internal || (Widgets.Internal = {}));
                var SummaryEditor = (function (_super) {
                    __extends(SummaryEditor, _super);
                    function SummaryEditor() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.popup = new Internal.SummaryEditorPopup();
                        return _this;
                    }
                    SummaryEditor.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.popup.dispose();
                        this.summaryModel && this.summaryModel.dispose();
                    };
                    SummaryEditor.prototype.getPopupServiceActions = function () {
                        var _this = this;
                        var actions = [].concat([{
                                action: function () {
                                    _this.summaryModel && _this.summaryModel.dispose();
                                    _this.summaryModel = new Internal.SummaryEditorModel(_this._model()["getModel"] && _this._model()["getModel"]() || _this._model());
                                    _this.popup.model(_this.summaryModel);
                                    _this.popup.visible(true);
                                },
                                title: "Run Editor",
                                visible: function (propertyName) {
                                    var model = _this._model() && _this._model()["getModel"] && _this._model()["getModel"]() || _this._model();
                                    return _this.visible() && model && model["dataBindingMode"] !== Designer.Internal.DataBindingMode.Bindings;
                                }
                            }], _super.prototype.getPopupServiceActions.call(this) || []);
                        return actions;
                    };
                    return SummaryEditor;
                }(DevExpress.Analytics.Widgets.PropertyGridEditor));
                Widgets.SummaryEditor = SummaryEditor;
                Widgets.editorTemplates.summaryEditor.editorType = SummaryEditor;
            })(Widgets = Designer.Widgets || (Designer.Widgets = {}));
            var Controls;
            (function (Controls) {
                var Metadata;
                (function (Metadata) {
                    Metadata.afterPrint = { propertyName: "onAfterPrint", modelName: "@OnAfterPrint", displayName: "After Print", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnAfterPrint", editor: Widgets.editorTemplates.scriptsBox };
                    Metadata.beforePrint = { propertyName: "onBeforePrint", modelName: "@OnBeforePrint", displayName: "Before Print", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnBeforePrint", editor: Widgets.editorTemplates.scriptsBox };
                    Metadata.sizeChanged = { propertyName: "onSizeChanged", modelName: "@OnSizeChanged", displayName: "Size Changed", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnSizeChanged", editor: Widgets.editorTemplates.scriptsBox };
                    Metadata.truncatedControlEventsSerializationInfo = [
                        Metadata.afterPrint, Metadata.beforePrint,
                        { propertyName: "onLocationChanged", modelName: "@OnLocationChanged", displayName: "Location Changed", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnLocationChanged", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onParentChanged", modelName: "@OnParentChanged", displayName: "Parent Changed", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnParentChanged", editor: Widgets.editorTemplates.scriptsBox },
                    ];
                    Metadata.truncatedControlScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRPageBreak.Scripts", info: Metadata.truncatedControlEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var commonEventsSerializationInfo = Metadata.truncatedControlEventsSerializationInfo.concat([Metadata.sizeChanged,
                        { propertyName: "onDraw", modelName: "@OnDraw", displayName: "Draw", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnDraw", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onEvaluateBinding", modelName: "@OnEvaluateBinding", displayName: "Evaluate Binding", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnEvaluateBinding", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onPrintOnPage", modelName: "@OnPrintOnPage", displayName: "Print on Page", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnPrintOnPage", editor: Widgets.editorTemplates.scriptsBox }
                    ]);
                    Metadata.commonScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRControl.Scripts", info: commonEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var controlEventsSerializationInfo = commonEventsSerializationInfo.concat([
                        { propertyName: "onHtmlItemCreated", modelName: "@OnHtmlItemCreated", displayName: "Html Item Created", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnHtmlItemCreated", editor: Widgets.editorTemplates.scriptsBox }
                    ]);
                    Metadata.controlScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRLine.Scripts", info: controlEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var textControlEventsSerializationInfo = controlEventsSerializationInfo.concat([
                        { propertyName: "onTextChanged", modelName: "@OnTextChanged", displayName: "Text Changed", localizationId: "DevExpress.XtraReports.UI.XRControlEvents.OnTextChanged", editor: Widgets.editorTemplates.scriptsBox }
                    ]);
                    Metadata.textControlScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRLabel.Scripts", info: textControlEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var labelEventsSerializationInfo = textControlEventsSerializationInfo.concat([
                        { propertyName: "onSummaryCalculated", modelName: "@OnSummaryCalculated", displayName: "Summary Calculated", localizationId: "DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryCalculated", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onSummaryGetResult", modelName: "@OnSummaryGetResult", displayName: "Summary Get Result", localizationId: "DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryGetResult", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onSummaryReset", modelName: "@OnSummaryReset", displayName: "Summary Reset", localizationId: "DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryReset", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onSummaryRowChanged", modelName: "@OnSummaryRowChanged", displayName: "Summary Row Changed", localizationId: "DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryRowChanged", editor: Widgets.editorTemplates.scriptsBox }
                    ]);
                    Metadata.labelScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRLabel.Scripts", info: labelEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var specificChartEventsSerializationInfo = [
                        { propertyName: "onCustomDrawSeries", modelName: "@OnCustomDrawSeries", displayName: "Custom Draw a Series", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawSeries", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomDrawSeriesPoint", modelName: "@OnCustomDrawSeriesPoint", displayName: "Custom Draw a Series Point", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawSeriesPoint", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomDrawAxisLabel", modelName: "@OnCustomDrawAxisLabel", displayName: "Custom Draw an Axis Label", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawAxisLabel", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomPaint", modelName: "@OnCustomPaint", displayName: "Custom Paint", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnCustomPaint", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onBoundDataChanged", modelName: "@OnBoundDataChanged", displayName: "Bound Data Changed", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnBoundDataChanged", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onPieSeriesPointExploded", modelName: "@OnPieSeriesPointExploded", displayName: "Pie Series Point Exploded", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnPieSeriesPointExploded", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onAxisScaleChanged", modelName: "@OnAxisScaleChanged", displayName: "Axis Scale Changed", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnAxisScaleChanged", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onSmallChartTextShowing", modelName: "@OnSmallChartTextShowing", displayName: "Small Chart Text Showing", localizationId: "DevExpress.XtraReports.UI.XRChartScripts.OnSmallChartTextShowing", editor: Widgets.editorTemplates.scriptsBox }
                    ], chartEventsSerializationInfo = controlEventsSerializationInfo.concat(specificChartEventsSerializationInfo);
                    Metadata.chartScripts = { propertyName: "scripts", modelName: "Scripts", info: chartEventsSerializationInfo, displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRChart.Scripts", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var specificPivotEventsSerializationInfo = [
                        { propertyName: "onCustomCellDisplayText", modelName: "@OnCustomCellDisplayText", displayName: "Custom Cell Display Text", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomCellDisplayText", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomCellValue", modelName: "@OnCustomCellValue", displayName: "Custom Cell Value", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomCellValue", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomColumnWidth", modelName: "@OnCustomColumnWidth", displayName: "Custom Column Width", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomColumnWidth", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomFieldSort", modelName: "@OnCustomFieldSort", displayName: "Custom Field Sort", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomFieldSort", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomFieldValueCells", modelName: "@OnCustomFieldValueCells", displayName: "Custom Field Value Cells", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomFieldValueCells", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomGroupInterval", modelName: "@OnCustomGroupInterval", displayName: "Custom Group Interval", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomGroupInterval", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomRowHeight", modelName: "@OnCustomRowHeight", displayName: "Custom Row Height", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomRowHeight", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomSummary", modelName: "@OnCustomSummary", displayName: "Custom Summary", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomSummary", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onCustomUnboundFieldData", modelName: "@OnCustomUnboundFieldData", displayName: "Custom Unbound Field Data", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomUnboundFieldData", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onFieldValueDisplayText", modelName: "@OnFieldValueDisplayText", displayName: "Field Value Display Text", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnFieldValueDisplayText", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onPrefilterCriteriaChanged", modelName: "@OnPrefilterCriteriaChanged", displayName: "Prefilter Criteria Changed", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrefilterCriteriaChanged", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onPrintCell", modelName: "@OnPrintCell", displayName: "Print Cell", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrintCell", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onPrintFieldValue", modelName: "@OnPrintFieldValue", displayName: "Print Field Value", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrintFieldValue", editor: Widgets.editorTemplates.scriptsBox },
                        { propertyName: "onPrintHeader", modelName: "@OnPrintHeader", displayName: "Print Header", localizationId: "DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrintHeader", editor: Widgets.editorTemplates.scriptsBox }
                    ], pivotEventsSerializationInfo = Metadata.truncatedControlEventsSerializationInfo.concat([Metadata.sizeChanged], specificPivotEventsSerializationInfo);
                    Metadata.pivotScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.Scripts", info: pivotEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.subreportScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.SubreportBase.Scripts", info: Metadata.truncatedControlEventsSerializationInfo.concat(Metadata.sizeChanged), editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var commonBandEventsSerializationInfo = [Metadata.afterPrint, Metadata.beforePrint];
                    Metadata.commonBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.Band.Scripts", info: commonBandEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var onBandLevelChanged = { propertyName: "onBandLevelChanged", modelName: "@OnBandLevelChanged", displayName: "Band Level Changed", localizationId: "DevExpress.XtraReports.UI.GroupBandScripts.OnBandLevelChanged", editor: Widgets.editorTemplates.scriptsBox }, groupBandEventsSerializationInfo = commonBandEventsSerializationInfo.concat([onBandLevelChanged]);
                    Metadata.groupBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.Scripts", info: groupBandEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var onSortingSummaryGetResult = { propertyName: "onSortingSummaryGetResult", modelName: "@OnSortingSummaryGetResult", displayName: "Sorting Summary Get Result", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBandScripts.OnSortingSummaryGetResult", editor: Widgets.editorTemplates.scriptsBox }, onSortingSummaryReset = { propertyName: "onSortingSummaryReset", modelName: "@OnSortingSummaryReset", displayName: "Sorting Summary Reset", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBandScripts.OnSortingSummaryReset", editor: Widgets.editorTemplates.scriptsBox }, onSortingSummaryRowChanged = { propertyName: "onSortingSummaryRowChanged", modelName: "@OnSortingSummaryRowChanged", displayName: "Sorting Summary RowChanged", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBandScripts.OnSortingSummaryRowChanged", editor: Widgets.editorTemplates.scriptsBox }, groupHeaderBandEventsSerializationInfo = groupBandEventsSerializationInfo.concat([onSortingSummaryGetResult, onSortingSummaryReset, onSortingSummaryRowChanged]);
                    Metadata.groupHeaderBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.Scripts", info: groupHeaderBandEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var onBandHeightChanged = { propertyName: "onBandHeightChanged", modelName: "@OnBandHeightChanged", displayName: "Band's Height Changed", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnBandHeightChanged", editor: Widgets.editorTemplates.scriptsBox }, onDataSourceRowChanged = { propertyName: "onDataSourceRowChanged", modelName: "@OnDataSourceRowChanged", displayName: "Data Source's Row Changed", localizationId: "DevExpress.XtraReports.UI.XtraReportBase.DataSource", editor: Widgets.editorTemplates.scriptsBox }, onDataSourceDemanded = { propertyName: "onDataSourceDemanded", modelName: "@OnDataSourceDemanded", displayName: "Data Source Demanded", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnDataSourceDemanded", editor: Widgets.editorTemplates.scriptsBox }, detailReportBandEventsSerializationInfo = commonBandEventsSerializationInfo.concat([onBandHeightChanged, onDataSourceRowChanged, onDataSourceDemanded]);
                    Metadata.detailReportBandScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.DetailReportBand.Scripts", info: detailReportBandEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var onFillEmptySpace = { propertyName: "onFillEmptySpace", modelName: "@OnFillEmptySpace", displayName: "Fill Empty Space", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnFillEmptySpace", editor: Widgets.editorTemplates.scriptsBox }, onPrintProgress = { propertyName: "onPrintProgress", modelName: "@OnPrintProgress", displayName: "Print Progress", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnPrintProgress", editor: Widgets.editorTemplates.scriptsBox }, onParametersRequestBeforeShow = { propertyName: "onParametersRequestBeforeShow", modelName: "@OnParametersRequestBeforeShow", displayName: "Parameters Request Before Show", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnParametersRequestBeforeShow", editor: Widgets.editorTemplates.scriptsBox }, onParametersRequestValueChanged = { propertyName: "onParametersRequestValueChanged", modelName: "@OnParametersRequestValueChanged", displayName: "Parameters Changed", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnParametersRequestValueChanged", editor: Widgets.editorTemplates.scriptsBox }, onParametersRequestSubmit = { propertyName: "onParametersRequestSubmit", modelName: "@OnParametersRequestSubmit", displayName: "Parameters Submitted", localizationId: "DevExpress.XtraReports.UI.XtraReportScripts.OnParametersRequestSubmit", editor: Widgets.editorTemplates.scriptsBox }, reportEventsSerializationInfo = detailReportBandEventsSerializationInfo.concat([
                        onFillEmptySpace, onPrintProgress, onParametersRequestBeforeShow, onParametersRequestValueChanged, onParametersRequestSubmit
                    ]);
                    Metadata.reportScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XtraReport.Scripts", info: reportEventsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.allScripts = {
                        propertyName: "scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.XRControl.Scripts", info: labelEventsSerializationInfo.concat(specificChartEventsSerializationInfo, specificPivotEventsSerializationInfo, [
                            onBandLevelChanged, onSortingSummaryGetResult, onSortingSummaryReset, onSortingSummaryRowChanged, onBandHeightChanged, onDataSourceRowChanged, onDataSourceDemanded,
                            onFillEmptySpace, onPrintProgress, onParametersRequestBeforeShow, onParametersRequestValueChanged, onParametersRequestSubmit
                        ]), editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor
                    };
                    Metadata.textAlignmentValues = [
                        { value: "TopLeft", displayValue: "Top Left", localizationId: "DevExpress.XtraPrinting.TextAlignment.TopLeft" },
                        { value: "MiddleLeft", displayValue: "Middle Left", localizationId: "DevExpress.XtraPrinting.TextAlignment.MiddleLeft" },
                        { value: "BottomLeft", displayValue: "Bottom Left", localizationId: "DevExpress.XtraPrinting.TextAlignment.BottomLeft" },
                        { value: "TopCenter", displayValue: "Top Center", localizationId: "DevExpress.XtraPrinting.TextAlignment.TopCenter" },
                        { value: "MiddleCenter", displayValue: "Middle Center", localizationId: "DevExpress.XtraPrinting.TextAlignment.MiddleCenter" },
                        { value: "BottomCenter", displayValue: "Bottom Center", localizationId: "DevExpress.XtraPrinting.TextAlignment.BottomCenter" },
                        { value: "TopJustify", displayValue: "Top Justify", localizationId: "DevExpress.XtraPrinting.TextAlignment.TopJustify" },
                        { value: "MiddleJustify", displayValue: "Middle Justify", localizationId: "DevExpress.XtraPrinting.TextAlignment.MiddleJustify" },
                        { value: "BottomJustify", displayValue: "Bottom Justify", localizationId: "DevExpress.XtraPrinting.TextAlignment.BottomJustify" },
                        { value: "TopRight", displayValue: "Top Right", localizationId: "DevExpress.XtraPrinting.TextAlignment.TopRight" },
                        { value: "MiddleRight", displayValue: "Middle Right", localizationId: "DevExpress.XtraPrinting.TextAlignment.MiddleRight" },
                        { value: "BottomRight", displayValue: "Bottom Right", localizationId: "DevExpress.XtraPrinting.TextAlignment.BottomRight" },
                    ];
                    Metadata.borderDashStyleValues = [
                        { value: "Solid", displayValue: "Solid", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.Solid" },
                        { value: "Dash", displayValue: "Dash", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.Dash" },
                        { value: "Dot", displayValue: "Dot", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.Dot" },
                        { value: "DashDot", displayValue: "Dash-Dot", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.DashDot" },
                        { value: "DashDotDot", displayValue: "Dash-Dot-Dot", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.DashDotDot" }
                    ];
                    Metadata.stylePrioritySerializationInfo = [
                        { propertyName: "useBackColor", modelName: "@UseBackColor", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool },
                        { propertyName: "useBorderColor", modelName: "@UseBorderColor", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool },
                        { propertyName: "useBorderDashStyle", modelName: "@UseBorderDashStyle", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool },
                        { propertyName: "useBorders", modelName: "@UseBorders", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool },
                        { propertyName: "useBorderWidth", modelName: "@UseBorderWidth", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool },
                        { propertyName: "useFont", modelName: "@UseFont", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool },
                        { propertyName: "useForeColor", modelName: "@UseForeColor", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool },
                        { propertyName: "usePadding", modelName: "@UsePadding", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool },
                        { propertyName: "useTextAlignment", modelName: "@UseTextAlignment", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool }
                    ];
                    Metadata.xlsxFormatString = { propertyName: "xlsxFormatString", modelName: "@XlsxFormatString", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text, displayName: "Xlsx Format String", localizationId: "DevExpress.XtraReports.UI.XRControl.XlsxFormatString" };
                    Metadata.name = { propertyName: "name", modelName: "@Name", displayName: "Name", localizationId: "DevExpress.XtraReports.UI.XRControl.Name", editor: Widgets.editorTemplates.name, validationRules: DevExpress.Analytics.Internal.nameValidationRules };
                    Metadata.displayName = { propertyName: "displayNameObject", modelName: "@DisplayName", editor: DevExpress.Analytics.Widgets.editorTemplates.text, defaultVal: "", displayName: "Display Name", localizationId: "DevExpress.XtraReports.UI.XtraReport.DisplayName" };
                    Metadata.text = { propertyName: "text", modelName: "@Text", defaultVal: "", displayName: "Text", localizationId: "DevExpress.XtraReports.UI.XRControl.Text", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                    Metadata.textArea = { propertyName: "textArea", displayName: "Text", localizationId: "DevExpress.XtraReports.UI.XRControl.Text", defaultVal: "", editor: $.extend({}, DevExpress.Analytics.Widgets.editorTemplates.stringArray, { editorType: Widgets.LinesEditor }) };
                    Metadata.textTrimming = {
                        propertyName: "textTrimming", modelName: "@TextTrimming", displayName: "Text Trimming", localizationId: "DevExpress.XtraReports.UI.XRControl.TextTrimming", defaultVal: "Character", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "None", displayValue: "None", localizationId: "System.Drawing.StringTrimming.None" },
                            { value: "Character", displayValue: "Character", localizationId: "System.Drawing.StringTrimming.Character" },
                            { value: "Word", displayValue: "Word", localizationId: "System.Drawing.StringTrimming.Word" },
                            { value: "EllipsisCharacter", displayValue: "Ellipsis Character", localizationId: "System.Drawing.StringTrimming.EllipsisCharacter" },
                            { value: "EllipsisWord", displayValue: "Ellipsis Word", localizationId: "System.Drawing.StringTrimming.EllipsisWord" },
                            { value: "EllipsisPath", displayValue: "Ellipsis Path", localizationId: "System.Drawing.StringTrimming.EllipsisPath" }
                        ]
                    };
                    Metadata.size = { propertyName: "size", modelName: "@SizeF", from: DevExpress.Analytics.Elements.Size.fromString, displayName: "Size", localizationId: "DevExpress.XtraReports.UI.XRControl.Size", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.location = { propertyName: "location", modelName: "@LocationFloat", from: DevExpress.Analytics.Elements.Point.fromString, displayName: "Location", localizationId: "DevExpress.XtraReports.UI.XRControl.Location", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.defaultBooleanValuesArray = [
                        { value: "True", displayValue: "True", localizationId: "DevExpress.Utils.DefaultBoolean.True" },
                        { value: "False", displayValue: "False", localizationId: "DevExpress.Utils.DefaultBoolean.False" },
                        { value: "Default", displayValue: "Default", localizationId: "DevExpress.Utils.DefaultBoolean.Default" }
                    ];
                    Metadata.tag = { propertyName: "tag", modelName: "@Tag", displayName: "Tag", localizationId: "DevExpress.XtraReports.UI.XRControl.Tag", editor: DevExpress.Analytics.Widgets.editorTemplates.text, defaultVal: "" };
                    Metadata.lockedInUserDesigner = { propertyName: "_lockedInUserDesigner", modelName: "@LockedInUserDesigner", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool };
                    Metadata.visible = { propertyName: "visible", modelName: "@Visible", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, displayName: "Visible", localizationId: "DevExpress.XtraReports.UI.XRControl.Visible" };
                    Metadata.backColor = $.extend({ displayName: "Background Color", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControl.BackColor' }, Reporting.Metadata.previewBackColor);
                    Metadata.foreColor = $.extend({ displayName: "Foreground Color", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControlStyle.ForeColor' }, Reporting.Metadata.previewForeColor);
                    Metadata.font = $.extend({ displayName: "Font", editor: DevExpress.Analytics.Widgets.editorTemplates.font, localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' }, Reporting.Metadata.previewFont);
                    Metadata.borderColor = $.extend({ displayName: "Border Color", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderColor' }, Reporting.Metadata.previewBorderColor);
                    Metadata.borders = { propertyName: "borders", modelName: "@Borders", displayName: "Borders", localizationId: "DevExpress.XtraReports.UI.XRControl.Borders", editor: DevExpress.Analytics.Widgets.editorTemplates.borders };
                    Metadata.borderWidth = { propertyName: "borderWidth", modelName: "@BorderWidth", displayName: "Border Width", localizationId: "DevExpress.XtraReports.UI.XRControl.BorderWidth", from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    Metadata.borderDashStyle = $.extend({
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Border Dash Style", localizationId: "DevExpress.XtraReports.UI.XRControl.BorderDashStyle",
                        valuesArray: [].concat(Metadata.borderDashStyleValues, [{ value: "Double", displayValue: "Double", localizationId: "DevExpress.XtraPrinting.BorderDashStyle.Double" }])
                    }, Reporting.Metadata.previewBorderDashStyle);
                    Metadata.paddingString = { propertyName: "padding", modelName: "@Padding" };
                    Metadata.padding = { displayName: "Padding", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, propertyName: "paddingObj", localizationId: 'DevExpress.XtraReports.UI.XRBarCode.PaddingInfo' };
                    Metadata.textAlignment = $.extend({
                        displayName: "Text Alignment",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: Metadata.textAlignmentValues,
                        localizationId: 'DevExpress.XtraReports.UI.XRControl.TextAlignment'
                    }, Reporting.Metadata.previewTextAlignment);
                    Metadata.textFitMode = {
                        propertyName: "textFitMode",
                        modelName: "@TextFitMode", displayName: "Text Fit Mode", localizationId: "DevExpress.XtraReports.UI.XRLabel.TextFitMode", defaultVal: "None",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.TextFitMode.None" },
                            { value: "GrowOnly", displayValue: "Grow Only", localizationId: "DevExpress.XtraReports.UI.TextFitMode.GrowOnly" },
                            { value: "ShrinkOnly", displayValue: "Shrink Only", localizationId: "DevExpress.XtraReports.UI.TextFitMode.ShrinkOnly" },
                            { value: "ShrinkAndGrow", displayValue: "Shrink And Grow", localizationId: "DevExpress.XtraReports.UI.TextFitMode.ShrinkAndGrow" }
                        ]
                    };
                    Metadata.angle = { propertyName: "angle", modelName: "@Angle", defaultVal: 0, from: DevExpress.Analytics.Utils.floatFromModel, displayName: "Angle", localizationId: "DevExpress.XtraReports.UI.XRLabel.Angle", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    Metadata.canGrow = { propertyName: "canGrow", modelName: "@CanGrow", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, displayName: "Can Grow", localizationId: "DevExpress.XtraReports.UI.XRControl.CanGrow", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.canShrink = { propertyName: "canShrink", modelName: "@CanShrink", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, displayName: "Can Shrink", localizationId: "DevExpress.XtraReports.UI.XRControl.CanShrink", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.multiline = { propertyName: "multiline", modelName: "@Multiline", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, displayName: "Multiline", localizationId: "DevExpress.XtraReports.UI.XRLabel.Multiline", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.wordWrap = { propertyName: "wordWrap", modelName: "@WordWrap", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, displayName: "Word Wrap", localizationId: "DevExpress.XtraReports.UI.XRControl.WordWrap", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.allowMarkupText = { propertyName: "allowMarkupText", modelName: "@AllowMarkupText", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, displayName: "Allow Markup Text", localizationId: "DevExpress.XtraReports.UI.XRLabel.AllowMarkupText", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.autoWidth = { propertyName: "autoWidth", modelName: "@AutoWidth", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, displayName: "Auto Width", localizationId: "DevExpress.XtraReports.UI.XRLabel.AutoWidth", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.keepTogether = { propertyName: "keepTogether", modelName: "@KeepTogether", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, displayName: "Keep Together", localizationId: "DevExpress.XtraReports.UI.XRControl.KeepTogether", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.keepTogetherDefaultValueFalse = { propertyName: "keepTogether", modelName: "@KeepTogether", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, displayName: "Keep Together", localizationId: "DevExpress.XtraReports.UI.XRControl.KeepTogether", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.processDuplicatesTarget = {
                        propertyName: "processDuplicatesTarget", modelName: "@ProcessDuplicatesTarget", displayName: "Process Duplicates Target", localizationId: "DevExpress.XtraReports.UI.XRLabel.ProcessDuplicatesTarget",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "Value", from: DevExpress.Analytics.Utils.fromEnum,
                        valuesArray: [
                            { value: "Value", displayValue: "Value", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesTarget.Value" },
                            { value: "Tag", displayValue: "Tag", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesTarget.Tag" }
                        ]
                    };
                    Metadata.processDuplicatesMode = {
                        propertyName: "processDuplicatesMode", modelName: "@ProcessDuplicatesMode", displayName: "Process Duplicates Mode", localizationId: "DevExpress.XtraReports.UI.XRLabel.ProcessDuplicatesMode",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "Leave", from: DevExpress.Analytics.Utils.fromEnum,
                        valuesArray: [
                            { value: "Leave", displayValue: "Leave", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesMode.Leave" },
                            { value: "Merge", displayValue: "Merge", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesMode.Merge" },
                            { value: "Suppress", displayValue: "Suppress", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesMode.Suppress" },
                            { value: "SuppressAndShrink", displayValue: "Suppress and Shrink", localizationId: "DevExpress.XtraReports.UI.ProcessDuplicatesMode.SuppressAndShrink" }
                        ]
                    };
                    Metadata.processNullValues = {
                        propertyName: "processNullValues",
                        modelName: "@ProcessNullValues", displayName: "Process Null Values", localizationId: "DevExpress.XtraReports.UI.XRLabel.ProcessNullValues",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "Leave", from: DevExpress.Analytics.Utils.fromEnum,
                        valuesArray: [
                            { value: "Leave", displayValue: "Leave", localizationId: "DevExpress.XtraReports.UI.ValueSuppressType.Leave" },
                            { value: "Suppress", displayValue: "Suppress", localizationId: "DevExpress.XtraReports.UI.ValueSuppressType.Suppress" },
                            { value: "SuppressAndShrink", displayValue: "Suppress and Shrink", localizationId: "DevExpress.XtraReports.UI.ValueSuppressType.SuppressAndShrink" },
                        ]
                    };
                    Metadata.reportPrintOptionsSerializationInfo = [
                        { propertyName: "printOnEmptyDataSource", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, modelName: "@PrintOnEmptyDataSource", displayName: "Print when Data Source is Empty", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.PrintOnEmptyDataSource", editor: DevExpress.Analytics.Widgets.editorTemplates.bool },
                        { propertyName: "detailCountAtDesignTime", defaultVal: 0, from: DevExpress.Analytics.Utils.floatFromModel, modelName: "@DetailCountAtDesignTime", displayName: "Detail Count at Design Time", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.DetailCountAtDesignTime", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric },
                        { propertyName: "detailCountOnEmptyDataSource", defaultVal: 1, from: DevExpress.Analytics.Utils.floatFromModel, modelName: "@DetailCountOnEmptyDataSource", displayName: "Detail Count when Data Source is Empty", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.DetailCountOnEmptyDataSource", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric },
                        { propertyName: "blankDetailCount", defaultVal: 0, from: DevExpress.Analytics.Utils.floatFromModel, modelName: "@BlankDetailCount", displayName: "Blank Detail Count", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.BlankDetailCount", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric },
                        { propertyName: "detailCount", defaultVal: 0, from: DevExpress.Analytics.Utils.floatFromModel, modelName: "@DetailCount", displayName: "Detail Count", localizationId: "DevExpress.XtraReports.UI.ReportPrintOptions.DetailCount", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }
                    ];
                    Metadata.dataAdapter = { propertyName: "dataAdapter", modelName: "@DataAdapter", link: true, editor: null };
                    Metadata.dataSource = { propertyName: "dataSource", modelName: "@DataSource", displayName: "Data Source", localizationId: "DevExpress.XtraReports.UI.XtraReportBase.DataSource", link: true, editor: Widgets.editorTemplates.dataSource };
                    Metadata.dataMember = { propertyName: "dataMember", modelName: "@DataMember", displayName: "Data Member", localizationId: "DevExpress.XtraReports.UI.XtraReportBase.DataMember", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.dataMember };
                    Metadata.filterString = { propertyName: "_filterString", modelName: "@FilterString" };
                    Metadata.filterStringEditable = { propertyName: "filterString", displayName: "Filter String", localizationId: "DevExpress.XtraReports.UI.XtraReportBase.FilterString", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.filterEditor };
                    Metadata.bookmark = { propertyName: "bookmark", modelName: "@Bookmark", displayName: "Bookmark", localizationId: "DevExpress.XtraReports.UI.XRControl.Bookmark", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                    Metadata.bookmarkParent = { propertyName: "bookmarkParent", modelName: "@BookmarkParent", link: true, displayName: "Parent Bookmark", localizationId: "DevExpress.XtraReports.UI.XRControl.BookmarkParent", defaultVal: null, editor: Widgets.editorTemplates.reportExplorer };
                    Metadata.navigateUrl = { propertyName: "navigateUrl", modelName: "@NavigateUrl", displayName: "Navigation URL", localizationId: "DevExpress.XtraReports.UI.XRControl.NavigateUrl", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                    Metadata.target = { propertyName: "target", modelName: "@Target", displayName: "Navigation Target", localizationId: "DevExpress.XtraReports.UI.XRControl.Target", editor: DevExpress.Analytics.Widgets.editorTemplates.text, defaultVal: "" };
                    Metadata.nullValueText = { propertyName: "nullValueText", modelName: "@NullValueText", displayName: "Null Value Text", localizationId: "DevExpress.XtraReports.UI.XRControl.NullValueText", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                    function getSummaryFunctionValues() {
                        if (Utils.DataBindingMode === "Bindings") {
                            var values = Metadata.summaryFunctionValues.concat([]);
                            values.push({ value: "Custom", displayValue: "Custom", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Custom" });
                            return values;
                        }
                        return Metadata.summaryFunctionValues;
                    }
                    Metadata.getSummaryFunctionValues = getSummaryFunctionValues;
                    Metadata.summaryFunctionValues = [
                        { value: "Avg", displayValue: "Average", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Avg" },
                        { value: "Count", displayValue: "Count", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Count" },
                        { value: "Sum", displayValue: "Sum", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Sum" },
                        { value: "RunningSum", displayValue: "Running Summary", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.RunningSum" },
                        { value: "Percentage", displayValue: "Percentage", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Percentage" },
                        { value: "Max", displayValue: "Max", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Max" },
                        { value: "Min", displayValue: "Min", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Min" },
                        { value: "Median", displayValue: "Median", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Median" },
                        { value: "Var", displayValue: "Variance", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.Var" },
                        { value: "VarP", displayValue: "Population Variance", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.VarP" },
                        { value: "StdDev", displayValue: "Standard Deviation", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.StdDev" },
                        { value: "StdDevP", displayValue: "Standard Population Deviation", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.StdDevP" },
                        { value: "DAvg", displayValue: "Average (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DAvg" },
                        { value: "DCount", displayValue: "Count (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DCount" },
                        { value: "DSum", displayValue: "Summary (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DSum" },
                        { value: "DVar", displayValue: "Variance (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DVar" },
                        { value: "DVarP", displayValue: "Population Variance (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DVarP" },
                        { value: "DStdDev", displayValue: "Standard Deviation (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DStdDev" },
                        { value: "DStdDevP", displayValue: "Standard Population Deviation (Distinct)", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.DStdDevP" },
                        { value: "RecordNumber", displayValue: "Record Number", localizationId: "DevExpress.XtraReports.UI.SummaryFunc.RecordNumber" }
                    ];
                    Metadata.textFormatString = { propertyName: "textFormatString", modelName: "@TextFormatString", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.formatEditor, displayName: "Text Format String", localizationId: "DevExpress.XtraReports.UI.XRControl.TextFormatString" };
                    function createSummarySerializationInfo(summaryFunctions) {
                        if (summaryFunctions === void 0) { summaryFunctions = getSummaryFunctionValues(); }
                        return [
                            {
                                propertyName: "Running", modelName: "@Running", defaultVal: "None",
                                editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Running", localizationId: "DevExpress.XtraReports.UI.XRSummary.Running",
                                valuesArray: [
                                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.SummaryRunning.None" },
                                    { value: "Group", displayValue: "Group", localizationId: "DevExpress.XtraReports.UI.SummaryRunning.Group" },
                                    { value: "Report", displayValue: "Report", localizationId: "DevExpress.XtraReports.UI.SummaryRunning.Report" },
                                    { value: "Page", displayValue: "Page", localizationId: "DevExpress.XtraReports.UI.SummaryRunning.Page" }
                                ]
                            },
                            {
                                propertyName: "Func", modelName: "@Func", defaultVal: "Sum",
                                editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Function", localizationId: "DevExpress.XtraReports.UI.XRSummary.Func",
                                valuesArray: summaryFunctions
                            },
                            { propertyName: "formatString", visible: false, modelName: "@FormatString", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.formatEditor, displayName: "Format String", localizationId: "DevExpress.XtraReports.UI.XRSummary.FormatString" },
                            { propertyName: "ignoreNullValues", modelName: "@IgnoreNullValues", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, displayName: "Ignore Null Values", localizationId: "DevExpress.XtraReports.UI.XRSummary.IgnoreNullValues" },
                            { propertyName: "treatStringsAsNumerics", modelName: "@TreatStringsAsNumerics", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, displayName: "Treat Strings As Numerics", localizationId: "DevExpress.XtraReports.UI.XRSummary.TreatStringsAsNumerics" }
                        ];
                    }
                    Metadata.createSummarySerializationInfo = createSummarySerializationInfo;
                    Metadata.summarySerializationInfo = createSummarySerializationInfo();
                    Metadata.summary = { propertyName: "Summary", modelName: "Summary", info: Metadata.summarySerializationInfo, editor: Widgets.editorTemplates.summaryEditor, displayName: "Summary", localizationId: "DevExpress.XtraReports.UI.XRLabel.Summary" };
                    Metadata.reportPrintOptions = { propertyName: "reportPrintOptions", modelName: "ReportPrintOptions", info: Metadata.reportPrintOptionsSerializationInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, displayName: "Report Print Options", localizationId: "DevExpress.XtraReports.UI.XtraReport.ReportPrintOptions" };
                    Metadata.lineWidth = { propertyName: "lineWidth", modelName: "@LineWidth", defaultVal: 1, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Line Width", localizationId: "DevExpress.XtraReports.UI.XRLine.LineWidth" };
                    Metadata.lineStyle = {
                        propertyName: "lineStyle",
                        modelName: "@LineStyle", defaultVal: "Solid", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Line Style", localizationId: "DevExpress.XtraReports.UI.XRLine.LineStyle",
                        valuesArray: [
                            { value: "Solid", displayValue: "Solid", localizationId: "DevExpress.XtraCharts.DashStyle.Solid" },
                            { value: "Dash", displayValue: "Dash", localizationId: "DevExpress.XtraCharts.DashStyle.Dash" },
                            { value: "Dot", displayValue: "Dot", localizationId: "DevExpress.XtraCharts.DashStyle.Dot" },
                            { value: "DashDot", displayValue: "Dash-Dot", localizationId: "DevExpress.XtraCharts.DashStyle.DashDot" },
                            { value: "DashDotDot", displayValue: "Dash-Dot-Dot", localizationId: "DevExpress.XtraCharts.DashStyle.DashDotDot" }
                        ]
                    };
                    Metadata.dpi = { propertyName: "dpi", modelName: "@Dpi", defaultVal: 100, from: DevExpress.Analytics.Utils.floatFromModel };
                    Metadata.canPublish = { propertyName: "canPublish", modelName: "@CanPublish", displayName: "Can Publish", localizationId: "DevExpress.XtraReports.UI.XRControl.CanPublish", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.rtl = {
                        propertyName: "rightToLeft", modelName: "@RightToLeft", displayName: "Right To Left", localizationId: "DevExpress.XtraReports.UI.XRControl.RightToLeft", defaultVal: "Inherit", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "No", displayValue: "No", localizationId: "DevExpress.XtraReports.UI.RightToLeft.No" },
                            { value: "Yes", displayValue: "Yes", localizationId: "DevExpress.XtraReports.UI.RightToLeft.Yes" },
                            { value: "Inherit", displayValue: "Inherit", localizationId: "DevExpress.XtraReports.UI.RightToLeft.Inherit" }
                        ]
                    };
                    Metadata.imageType = {
                        propertyName: "imageType", displayName: "Image Type", localizationId: "DevExpress.XtraReports.UI.XRChart.ImageType", modelName: "@ImageType", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "Metafile", valuesArray: [
                            { value: "Metafile", displayValue: "Metafile", localizationId: "DevExpress.XtraReports.UI.ChartImageType.Metafile" },
                            { value: "Bitmap", displayValue: "Bitmap", localizationId: "DevExpress.XtraReports.UI.ChartImageType.Bitmap" }
                        ]
                    };
                    Metadata.paddingGroup = [Metadata.paddingString, Metadata.padding];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
            })(Controls = Designer.Controls || (Designer.Controls = {}));
            var Data;
            (function (Data) {
                var DataBindingBase = (function (_super) {
                    __extends(DataBindingBase, _super);
                    function DataBindingBase(model, serializer) {
                        var _this = _super.call(this) || this;
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(_this, model);
                        _this._disposables.push(_this.displayExpr = ko.pureComputed(function () {
                            var parameter = _this.parameter();
                            return parameter ? parameter.parameterName() : _this.dataMember();
                        }));
                        return _this;
                    }
                    DataBindingBase.prototype.getInfo = function () {
                        return Metadata.dataBindingBaseSerializationInfo;
                    };
                    DataBindingBase.prototype._findDataSourceFromPath = function (path, dataSources) {
                        var dataSourceId = path.split('.')[0];
                        var dataSourceInfo = (dataSources || []).filter(function (dataSource) { return dataSource.ref === dataSourceId || dataSource.id === dataSourceId; })[0];
                        if (dataSourceInfo) {
                            return dataSourceInfo.data;
                        }
                        return null;
                    };
                    DataBindingBase.prototype.updateParameter = function (pathRequest, dataSources) {
                        this.parameter(this._findDataSourceFromPath(pathRequest.fullPath, dataSources)().filter(function (item) { return item.parameterName() === pathRequest.path; })[0]);
                        this.dataSource(null);
                    };
                    DataBindingBase.prototype.updateBinding = function (path, dataSources) {
                        if (!!path) {
                            var pathRequest = new DevExpress.Analytics.Utils.PathRequest(path);
                            if (path.indexOf("Parameters.") === 0) {
                                this.updateParameter(pathRequest, dataSources);
                            }
                            else {
                                this.dataMember(pathRequest.path);
                                this.dataSource(this._findDataSourceFromPath(path, dataSources));
                                this.parameter(null);
                            }
                        }
                        else {
                            this.resetValue();
                        }
                    };
                    DataBindingBase.prototype.getValuePath = function (dataSourceHelper) {
                        if (this.parameter()) {
                            return "Parameters." + this.parameter().parameterName();
                        }
                        var dataSourceName = "";
                        if (this.dataSource()) {
                            var ds = dataSourceHelper.findDataSourceInfo(this.dataSource());
                            dataSourceName = ds && (ds.id || ds.ref);
                        }
                        return dataSourceName && this.dataMember() ? (dataSourceName + "." + this.dataMember()) : "";
                    };
                    DataBindingBase.prototype.generateValue = function (undoEngine, dataSourceHelper, dataSources) {
                        var _this = this;
                        if (!this.generatedValue) {
                            this._disposables.push(this.generatedValue = ko.computed({
                                read: function () {
                                    return _this.getValuePath(dataSourceHelper);
                                },
                                write: function (val) {
                                    undoEngine.start();
                                    _this.updateBinding(val, dataSources);
                                    undoEngine.end();
                                }
                            }));
                        }
                        return this.generatedValue;
                    };
                    DataBindingBase.prototype.resetValue = function () {
                        this.parameter(null);
                        this.dataSource(null);
                        this.dataMember(null);
                    };
                    DataBindingBase.prototype.isEmpty = function () {
                        return !(this.dataMember() || this.dataSource() || this.parameter());
                    };
                    return DataBindingBase;
                }(DevExpress.Analytics.Utils.Disposable));
                Data.DataBindingBase = DataBindingBase;
                var DataBinding = (function (_super) {
                    __extends(DataBinding, _super);
                    function DataBinding(model, serializer) {
                        var _this = _super.call(this, model, serializer) || this;
                        _this.visible = ko.observable(true);
                        _this.disabled = ko.pureComputed(function () {
                            var dataMember = _this.dataMember();
                            return !(_this.parameter() || dataMember);
                        });
                        _this._disposables.push(_this.disabled.subscribe(function (newVal) {
                            newVal && _this.formatString("");
                        }));
                        _this._disposables.push(_this.disabled);
                        return _this;
                    }
                    DataBinding.initialize = function (model, serializer) {
                        var currentDataBindings = DevExpress.Analytics.Utils.deserializeArray(model, function (item) { return new DataBinding(item, serializer); });
                        (this["allDataBindings"] || []).forEach(function (value) {
                            if (currentDataBindings().filter(function (databinding) { return databinding.propertyName() === value; }).length === 0)
                                currentDataBindings.push(new DataBinding({ "@PropertyName": value }, serializer));
                        });
                        currentDataBindings()["findBinding"] = function (bindingName) {
                            return currentDataBindings().filter(function (binding) { return binding.propertyName() === bindingName; })[0];
                        };
                        return currentDataBindings;
                    };
                    DataBinding.prototype.getInfo = function () {
                        return Metadata.dataBindingSerializationInfo;
                    };
                    DataBinding.prototype.updateParameter = function (pathRequest, dataSources) {
                        _super.prototype.updateParameter.call(this, pathRequest, dataSources);
                        this.dataMember(pathRequest.path);
                    };
                    DataBinding.prototype.resetValue = function () {
                        _super.prototype.resetValue.call(this);
                        this.formatString("");
                    };
                    return DataBinding;
                }(DataBindingBase));
                Data.DataBinding = DataBinding;
                var Metadata;
                (function (Metadata) {
                    Metadata.dataBindingBaseSerializationInfo = [
                        { propertyName: "parameter", modelName: "@Parameter", link: true },
                        { propertyName: "dataSource", modelName: "@DataSource", link: true },
                        { propertyName: "dataMember", modelName: "@DataMember" }
                    ];
                    Metadata.dataBindingSerializationInfo = Metadata.dataBindingBaseSerializationInfo.concat([
                        { propertyName: "propertyName", modelName: "@PropertyName" },
                        { propertyName: "formatString", modelName: "@FormatString" }
                    ]);
                    Metadata.dataBindings = function (dataBindingsArray) {
                        return {
                            propertyName: "dataBindings",
                            modelName: "DataBindings",
                            array: true,
                            info: Data.Metadata.dataBindingSerializationInfo,
                            displayName: "Data Bindings", localizationId: "DevExpress.XtraReports.UI.XRControl.DataBindings",
                            editor: Widgets.editorTemplates.dataBindings,
                            allDataBindings: dataBindingsArray,
                            from: Data.DataBinding.initialize
                        };
                    };
                })(Metadata = Data.Metadata || (Data.Metadata = {}));
            })(Data = Designer.Data || (Designer.Data = {}));
            (function (Controls) {
                var FormattingRule = (function (_super) {
                    __extends(FormattingRule, _super);
                    function FormattingRule(model, parent, serializer) {
                        var _this = _super.call(this) || this;
                        _this.className = function () {
                            return "formattingrule";
                        };
                        _this.controlType = "XRFormattingRule";
                        _this.selected = ko.observable(false);
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(_this, model);
                        _this.parent = parent || null;
                        var path = ko.pureComputed(function () {
                            var dsPath = _this.getPath("");
                            if (!!dsPath) {
                                return DevExpress.Analytics.Internal.getFullPath(dsPath, _this.dataMember() || parent.dataMember());
                            }
                            else {
                                return dsPath;
                            }
                        });
                        _this._disposables.push(path);
                        _this["conditionObj"] = {
                            value: _this.condition,
                            path: path,
                            functions: Widgets.reportFunctionDisplay,
                            customizeCategories: function (_, categories, __) { Internal.addVariablesToExpressionEditor(categories); }
                        };
                        return _this;
                    }
                    FormattingRule.createNew = function (report) {
                        return new FormattingRule({}, report);
                    };
                    FormattingRule.prototype.getInfo = function () {
                        return Metadata.formattingRuleSerializationsInfo;
                    };
                    FormattingRule.prototype.getPath = function (propertyName) {
                        return this.parent && this.parent.dsHelperProvider() && this.parent.dsHelperProvider().getDataSourcePath(this["dataSource"]() || this.parent.dataSource());
                    };
                    FormattingRule.prototype.displayType = function () {
                        return DevExpress.Analytics.Utils.getLocalization("Formatting Rule", "DevExpress.XtraReports.UI.FormattingRule");
                    };
                    return FormattingRule;
                }(DevExpress.Analytics.Utils.Disposable));
                Controls.FormattingRule = FormattingRule;
                var FormattingRuleLink = (function () {
                    function FormattingRuleLink(model, serializer) {
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(this, model);
                    }
                    FormattingRuleLink.createNew = function (rule) {
                        var link = new FormattingRuleLink({});
                        link.value = ko.observable(rule);
                        return link;
                    };
                    FormattingRuleLink.prototype.getInfo = function () {
                        return Metadata.formattingRuleLinkSerializationsInfo;
                    };
                    return FormattingRuleLink;
                }());
                Controls.FormattingRuleLink = FormattingRuleLink;
                var Metadata;
                (function (Metadata) {
                    Metadata.formattingRuleLinkSerializationsInfo = [
                        { propertyName: "value", modelName: "@Value", link: true }
                    ];
                    Metadata.formattingRuleLinks = {
                        propertyName: "formattingRuleLinks", modelName: "FormattingRuleLinks", displayName: "Formatting Rules", localizationId: "DevExpress.XtraReports.UI.XRControl.FormattingRules", array: true,
                        editor: Widgets.editorTemplates.formattingRule, addHandler: FormattingRule.createNew,
                        displayPropertyName: "name"
                    };
                    Metadata.defaultBooleanVisible = {
                        propertyName: "visible", modelName: "@Visible", displayName: "Visible", localizationId: "DevExpress.XtraReports.UI.Formatting.Visible", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Metadata.defaultBooleanValuesArray
                    };
                    var borderWidthSerializable = { propertyName: "borderWidthSerializable", modelName: "@BorderWidthSerializable", displayName: "Border Width", localizationId: "DevExpress.XtraReports.UI.Formatting.BorderWidthSerializable", from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, sides = $.extend({ displayName: "Borders", editor: DevExpress.Analytics.Widgets.editorTemplates.borders, localizationId: 'DevExpress.XtraReports.UI.XRControl.Borders' }, Reporting.Metadata.previewSides);
                    Metadata.formattingSerializationsInfo = [Metadata.backColor, sides, Metadata.borderColor, Metadata.borderDashStyle, borderWidthSerializable,
                        Metadata.foreColor, Metadata.font, Metadata.textAlignment, Metadata.defaultBooleanVisible
                    ].concat(Metadata.paddingGroup);
                    Metadata.conditionObj = { propertyName: "conditionObj", displayName: "Condition", localizationId: "DevExpress.XtraReports.UI.FormattingRule.Condition", editor: DevExpress.Analytics.Widgets.editorTemplates.expressionEditor };
                    Metadata.formatting = { propertyName: "formatting", modelName: "Formatting", displayName: "Formatting", localizationId: "DevExpress.XtraReports.UI.FormattingRule.Formatting", info: Metadata.formattingSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.formattingRuleSerializationsInfo = [
                        { propertyName: "name", modelName: "@Name", displayName: "Name", localizationId: "DevExpress.XtraReports.UI.FormattingRule.Name", editor: DevExpress.Analytics.Widgets.editorTemplates.text, validationRules: DevExpress.Analytics.Internal.nameValidationRules },
                        { propertyName: "condition", modelName: "@Condition", displayName: "Condition", localizationId: "DevExpress.XtraReports.UI.FormattingRule.Condition", defaultVal: "" },
                        Metadata.conditionObj,
                        Metadata.dataSource, Metadata.dataMember,
                        Metadata.formatting
                    ];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var Anchoring = (function (_super) {
                    __extends(Anchoring, _super);
                    function Anchoring(subscrible, model, anchoringProperty) {
                        var _this = _super.call(this) || this;
                        _this.state = Anchoring.states.complete;
                        _this.anchoring = anchoringProperty;
                        _this.start(subscrible, model);
                        return _this;
                    }
                    Anchoring.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.subscribtion.dispose();
                    };
                    Anchoring.prototype.start = function (subscrible, model) {
                        var _this = this;
                        this.subscribtion && this.subscribtion.dispose();
                        var oldVal = ko.observable(subscrible());
                        this.subscribtion = subscrible.subscribe(function (newVal) {
                            if (_this.state !== Anchoring.states.fromControls) {
                                _this.state = Anchoring.states.inProgress;
                                _this.anchorSubscribtion(newVal, oldVal, model);
                            }
                            oldVal(newVal);
                            _this.state = Anchoring.states.complete;
                        });
                    };
                    Anchoring.states = {
                        inProgress: "inProgress",
                        complete: "complete",
                        fromControls: "fromControls"
                    };
                    return Anchoring;
                }(DevExpress.Analytics.Utils.Disposable));
                Controls.Anchoring = Anchoring;
                var VerticalAcnhoring = (function (_super) {
                    __extends(VerticalAcnhoring, _super);
                    function VerticalAcnhoring(subscrible, model, anchoringProperty) {
                        var _this = _super.call(this, subscrible, model, anchoringProperty) || this;
                        _this.anchorSubscribtion = function (parentSizeValue, oldValue, model) {
                            if (DevExpress.Analytics.Internal.checkModelReady(model.root) && isFinite(oldValue()) && oldValue()) {
                                if (_this.anchoring() === "Both") {
                                    var newSize = model.size.height() + parentSizeValue - oldValue();
                                    model.size.height(newSize > 0 ? newSize : 1);
                                }
                                if (_this.anchoring() === "Bottom") {
                                    var newLocation = model.location.y() + parentSizeValue - oldValue();
                                    model.location.y(newLocation > 0 ? newLocation : 0);
                                }
                            }
                        };
                        _this._disposables.push(model.size.height.subscribe(function (newVal) {
                            if (_this.state === Anchoring.states.complete) {
                                _this.state = Anchoring.states.fromControls;
                            }
                        }));
                        _this._disposables.push(model.location.y.subscribe(function (newVal) {
                            if (_this.state === Anchoring.states.complete) {
                                _this.state = Anchoring.states.fromControls;
                            }
                        }));
                        return _this;
                    }
                    return VerticalAcnhoring;
                }(Anchoring));
                Controls.VerticalAcnhoring = VerticalAcnhoring;
                var HorizontalAnchoring = (function (_super) {
                    __extends(HorizontalAnchoring, _super);
                    function HorizontalAnchoring(subscrible, model, anchoringProperty) {
                        var _this = _super.call(this, subscrible, model, anchoringProperty) || this;
                        _this.anchorSubscribtion = function (parentSizeValue, oldValue, model) {
                            if (DevExpress.Analytics.Internal.checkModelReady(model.root) && isFinite(oldValue()) && oldValue()) {
                                if (_this.anchoring() === "Both") {
                                    var newSize = model.size.width() + parentSizeValue - oldValue();
                                    model.size.width(newSize > 0 ? newSize : 1);
                                }
                                if (_this.anchoring() === "Right") {
                                    var newLocation = model.location.x() + parentSizeValue - oldValue();
                                    model.location.x(newLocation > 0 ? newLocation : 0);
                                }
                            }
                        };
                        return _this;
                    }
                    return HorizontalAnchoring;
                }(Anchoring));
                Controls.HorizontalAnchoring = HorizontalAnchoring;
                (function (Metadata) {
                    Metadata.anchorVertical = {
                        propertyName: "anchorVertical",
                        modelName: "@AnchorVertical", displayName: "Anchor Vertically", localizationId: "DevExpress.XtraReports.UI.XRControl.AnchorVertical", defaultVal: "None",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.VerticalAnchorStyles.None" },
                            { value: "Top", displayValue: "Top", localizationId: "DevExpress.XtraReports.UI.VerticalAnchorStyles.Top" },
                            { value: "Bottom", displayValue: "Bottom", localizationId: "DevExpress.XtraReports.UI.VerticalAnchorStyles.Bottom" },
                            { value: "Both", displayValue: "Both", localizationId: "DevExpress.XtraReports.UI.VerticalAnchorStyles.Both" }
                        ]
                    };
                    Metadata.anchorHorizontal = {
                        propertyName: "anchorHorizontal",
                        modelName: "@AnchorHorizontal", displayName: "Anchor Horizontally", localizationId: "DevExpress.XtraReports.UI.XRControl.AnchorHorizontal", defaultVal: "None",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.HorizontalAnchorStyles.None" },
                            { value: "Left", displayValue: "Left", localizationId: "DevExpress.XtraReports.UI.HorizontalAnchorStyles.Left" },
                            { value: "Right", displayValue: "Right", localizationId: "DevExpress.XtraReports.UI.HorizontalAnchorStyles.Right" },
                            { value: "Both", displayValue: "Both", localizationId: "DevExpress.XtraReports.UI.HorizontalAnchorStyles.Both" }
                        ]
                    };
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var EditOptions = (function () {
                    function EditOptions(model, serializer) {
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(this, model || {});
                    }
                    EditOptions.prototype.getInfo = function () {
                        return Metadata.editOptionsSerializationInfo;
                    };
                    EditOptions.prototype.isEmpty = function () {
                        return !this.enabled();
                    };
                    EditOptions.prototype.isPropertyDisabled = function (name) {
                        return name !== "enabled" && !this.enabled();
                    };
                    return EditOptions;
                }());
                Controls.EditOptions = EditOptions;
                var CheckEditOptions = (function (_super) {
                    __extends(CheckEditOptions, _super);
                    function CheckEditOptions(model, serializer) {
                        return _super.call(this, model || {}, serializer) || this;
                    }
                    CheckEditOptions.prototype.getInfo = function () {
                        return _super.prototype.getInfo.call(this).concat([
                            { propertyName: "groupId", modelName: "@GroupID", displayName: "Group ID", localizationId: "DevExpress.XtraReports.UI.CheckEditOptions.GroupID", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text }
                        ]);
                    };
                    return CheckEditOptions;
                }(EditOptions));
                Controls.CheckEditOptions = CheckEditOptions;
                var ImageEditOptions = (function (_super) {
                    __extends(ImageEditOptions, _super);
                    function ImageEditOptions(model, serializer) {
                        return _super.call(this, model || {}, serializer) || this;
                    }
                    ImageEditOptions.prototype.getInfo = function () {
                        return _super.prototype.getInfo.call(this).concat([
                            {
                                propertyName: "editorName", modelName: "@EditorName", displayName: "Editor Name", localizationId: "DevExpress.XtraReports.UI.ImageEditOptions.EditorName", defaultVal: "",
                                editor: { header: "dxrd-editOptionsEditorName", editorType: Widgets.EditOptionsEditorNameEditorModel },
                                editorOptions: { acceptCustomValue: true, categories: [DevExpress.Reporting.Editing.Categories.Image()] }
                            }
                        ]);
                    };
                    return ImageEditOptions;
                }(EditOptions));
                Controls.ImageEditOptions = ImageEditOptions;
                var TextEditOptions = (function (_super) {
                    __extends(TextEditOptions, _super);
                    function TextEditOptions(model, serializer) {
                        return _super.call(this, model || {}, serializer) || this;
                    }
                    TextEditOptions.prototype.getInfo = function () {
                        var categories = DevExpress.Reporting.Editing.Categories;
                        return _super.prototype.getInfo.call(this).concat([
                            {
                                propertyName: "editorName", modelName: "@EditorName", displayName: "Editor Name", localizationId: "DevExpress.XtraReports.UI.TextEditOptions.EditorName", defaultVal: "",
                                editor: { header: "dxrd-editOptionsEditorName", editorType: Widgets.EditOptionsEditorNameEditorModel },
                                editorOptions: { acceptCustomValue: true, excludeCategories: [categories.Image()] }
                            }
                        ]);
                    };
                    return TextEditOptions;
                }(EditOptions));
                Controls.TextEditOptions = TextEditOptions;
                (function (Metadata) {
                    Metadata.editOptionsSerializationInfo = [
                        { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", localizationId: "DevExpress.XtraReports.UI.EditOptions.Enabled", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.boolSelect },
                        { propertyName: "id", modelName: "@ID", displayName: "ID", localizationId: "DevExpress.XtraReports.UI.EditOptions.ID", editor: DevExpress.Analytics.Widgets.editorTemplates.text },
                        { propertyName: "readOnly", modelName: "@ReadOnly", displayName: "Read Only", localizationId: "DevExpress.XtraReports.UI.EditOptions.ReadOnly", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.boolSelect }
                    ];
                    Metadata.editOptions = {
                        propertyName: "editOptions",
                        modelName: "EditOptions",
                        displayName: "Edit Options", localizationId: "DevExpress.XtraReports.UI.XRLabel.EditOptions",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor,
                        from: function (model, serializer) { return new EditOptions(model, serializer); },
                        toJsonObject: function (value, serializer) { return serializer.serialize(value); }
                    };
                    Metadata.textEditOptions = $.extend({}, Metadata.editOptions, {
                        propertyName: "textEditOptions",
                        from: function (model, serializer) { return new TextEditOptions(model, serializer); }
                    });
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                function getDefaultCheckSize(checkState) {
                    if (checkState === void 0) { checkState = Reporting.Viewer.Editing.GlyphStyle.StandardBox1; }
                    if (checkState === Reporting.Viewer.Editing.GlyphStyle.StandardBox1)
                        return new DevExpress.Analytics.Elements.Size(13, 13);
                    else
                        return new DevExpress.Analytics.Elements.Size(16, 16);
                }
                Controls.getDefaultCheckSize = getDefaultCheckSize;
                var GlyphOptions = (function (_super) {
                    __extends(GlyphOptions, _super);
                    function GlyphOptions(model, serializer) {
                        var _this = _super.call(this) || this;
                        _this.getInfo = ko.observable(Metadata.glyphOptionsSerializationInfo);
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(_this, model || {});
                        var _currentCheckState = Reporting.Viewer.Editing.GlyphStyle[_this.style()];
                        _this._disposables.push(_this.style.subscribe(function (newStyle) {
                            if (newStyle) {
                                var oldDefSize = getDefaultCheckSize(_currentCheckState);
                                var newDefSize = getDefaultCheckSize(Reporting.Viewer.Editing.GlyphStyle[newStyle]);
                                _currentCheckState = Reporting.Viewer.Editing.GlyphStyle[newStyle];
                                if (oldDefSize.height() === _this.size.height()) {
                                    _this.size.height(newDefSize.height());
                                }
                                if (oldDefSize.width() === _this.size.width()) {
                                    _this.size.width(newDefSize.width());
                                }
                            }
                        }));
                        return _this;
                    }
                    return GlyphOptions;
                }(DevExpress.Analytics.Utils.Disposable));
                Controls.GlyphOptions = GlyphOptions;
                function _getCustomGlyphsInfo(type) {
                    return {
                        propertyName: type,
                        modelName: "@" + type,
                        editor: { header: "dxrd-image-loadfile", editorType: DevExpress.Analytics.Widgets.Editor },
                        displayName: type,
                        localizationId: "DevExpress.XtraReports.UI.CheckBoxGlyphs." + type,
                        from: function (val) { return ko.observable(DevExpress.Reporting.ImageSource.parse(val)); },
                        toJsonObject: DevExpress.Reporting.ImageSource.toString,
                        defaultVal: null
                    };
                }
                (function (Metadata) {
                    Metadata.glyphAlignment = {
                        propertyName: "alignment",
                        modelName: "@Alignment", displayName: "Alignment", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.GlyphAlignment",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        defaultVal: "Near", valuesArray: [
                            { value: "Near", displayValue: "Near", localizationId: "DevExpress.Utils.HorzAlignment.Near" },
                            { value: "Center", displayValue: "Center", localizationId: "DevExpress.Utils.HorzAlignment.Center" },
                            { value: "Far", displayValue: "Far", localizationId: "DevExpress.Utils.HorzAlignment.Far" }
                        ]
                    };
                    var _checkStates = Reporting.Viewer.Internal.getEnumValues(Reporting.Viewer.Editing.CheckState);
                    var customGlyphChecked = _getCustomGlyphsInfo(_checkStates[Reporting.Viewer.Editing.CheckState.Checked]);
                    var customGlyphUnChecked = _getCustomGlyphsInfo(_checkStates[Reporting.Viewer.Editing.CheckState.Unchecked]);
                    var customGlyphIndeterminate = _getCustomGlyphsInfo(_checkStates[Reporting.Viewer.Editing.CheckState.Indeterminate]);
                    var customGlyphsSerializationInfo = [customGlyphChecked, customGlyphUnChecked, customGlyphIndeterminate];
                    var customGlyphs = { propertyName: "customGlyphs", modelName: "CustomGlyphs", info: customGlyphsSerializationInfo, displayName: "Custom Glyphs", localizationId: "DevExpress.XtraReports.UI.CheckBoxGlyphOptions.CustomGlyphs", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var style = {
                        propertyName: "style",
                        modelName: "@Style", displayName: "Glyph Style", localizationId: "DevExpress.XtraReports.UI.CheckBoxGlyphOptions.Style",
                        editor: $.extend({}, DevExpress.Analytics.Widgets.editorTemplates.combobox, { header: "dxrd-checkbox-style-combobox" }),
                        defaultVal: "StandardBox1", valuesArray: Reporting.Viewer.Internal.getEnumValues(Reporting.Viewer.Editing.GlyphStyle).map(function (item) { return ({
                            value: item,
                            displayValue: item,
                            localizationId: "DevExpress.XtraPrinting.GlyphStyle." + item,
                            templateBinding: function (templateName) { return ({ name: templateName, if: DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.getExistingTemplate(templateName) }); }
                        }); })
                    };
                    var size = { propertyName: "size", modelName: "@Size", from: DevExpress.Analytics.Elements.Size.fromString, defaultVal: getDefaultCheckSize().toString(), displayName: "Size", localizationId: "DevExpress.XtraReports.UI.CheckBoxGlyphOptions.Size", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.glyphOptionsSerializationInfo = [customGlyphs, Metadata.glyphAlignment, size, style];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                (function (Metadata) {
                    Metadata.expressionBindingSerializationsInfo = [
                        { propertyName: "eventName", modelName: "@EventName" },
                        { propertyName: "propertyName", modelName: "@PropertyName" },
                        { propertyName: "expression", modelName: "@Expression" },
                    ];
                    Metadata.expressionBindings = { propertyName: "expressionBindings", modelName: "ExpressionBindings", array: true, info: Metadata.expressionBindingSerializationsInfo };
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var SortingOptions = (function (_super) {
                    __extends(SortingOptions, _super);
                    function SortingOptions(model, report, serializer) {
                        var _this = _super.call(this) || this;
                        _this._info = $.extend(true, [], Metadata.sortingOptionsSerializationsInfo);
                        _this._fieldNameInfo = _this._info.filter(function (info) { return info.propertyName == "fieldName"; })[0];
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(_this, model || {});
                        Object.defineProperty(_this._fieldNameInfo, "valuesArray", {
                            get: function () {
                                var items = [];
                                var currentBand = _this.targetBand && _this.targetBand();
                                if (currentBand) {
                                    items = _this._getFieldNames(currentBand).map(function (fieldName) { return { value: fieldName, displayValue: fieldName }; });
                                }
                                return items;
                            }
                        });
                        var _fieldName = _this.fieldName;
                        _this._disposables.push(_this.fieldName = ko.computed({
                            read: function () {
                                var value = _fieldName();
                                return _this._getFieldNames(_this.targetBand()).indexOf(value) === -1 ? "" : value;
                            },
                            write: function (newValue) {
                                _fieldName(newValue);
                            }
                        }));
                        return _this;
                    }
                    SortingOptions.prototype._getFieldNames = function (targetBand) {
                        var fieldArray = targetBand && (targetBand["sortFields"] || targetBand["groupFields"]);
                        return fieldArray ? fieldArray().map(function (item) { return item.fieldName(); }).filter(function (name) { return !!name; }) : [];
                    };
                    SortingOptions.prototype.getInfo = function () {
                        return this._info;
                    };
                    SortingOptions.prototype.isPropertyDisabled = function (name) {
                        return name == "fieldName" && !this.targetBand();
                    };
                    SortingOptions.prototype.resetValue = function () {
                        this.targetBand(null);
                        this.fieldName("");
                    };
                    SortingOptions.prototype.getPath = function (propertyName) {
                        return this.targetBand() && this.targetBand().getPath("groupFields") || "";
                    };
                    return SortingOptions;
                }(DevExpress.Analytics.Utils.Disposable));
                Controls.SortingOptions = SortingOptions;
                (function (Metadata) {
                    var sortingFieldName = { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", localizationId: "DevExpress.XtraReports.UI.SortingOptions.FieldName", defaultVal: "", editor: Widgets.editorTemplates.fieldsCombobox }, targetBand = { propertyName: "targetBand", modelName: "@TargetBand", link: true, displayName: "Target Band", localizationId: "DevExpress.XtraReports.UI.SortingOptions.TargetBand", editor: Widgets.editorTemplates.sortingBand };
                    Metadata.sortingOptionsSerializationsInfo = [targetBand, sortingFieldName];
                    Metadata.interactiveSorting = { propertyName: "interactiveSorting", modelName: "InteractiveSorting", displayName: "Interactive Sorting", localizationId: "DevExpress.XtraReports.UI.XRLabel.InteractiveSorting", info: Metadata.sortingOptionsSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var StyleModel = (function (_super) {
                    __extends(StyleModel, _super);
                    function StyleModel(model, serializer) {
                        var _this = _super.call(this) || this;
                        _this.className = function () {
                            return "stylemodel";
                        };
                        _this.controlType = "XRStyleModel";
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(_this, model);
                        ["backColor", "foreColor", "borderColor"].forEach(function (propertyName) {
                            _this._disposables.push(_this[propertyName] = ko.pureComputed({
                                read: function () { return _this["_" + propertyName] && _this["_" + propertyName]() || StyleModel.defaults[propertyName]; },
                                write: function (val) { _this["_" + propertyName](val); }
                            }));
                        });
                        _this._disposables.push(_this.paddingObj = new DevExpress.Analytics.Elements.PaddingModel());
                        _this.paddingObj.applyFromString(_this["padding"]());
                        var lock = new Internal.Locker().lock;
                        _this._disposables.push(_this.padding.subscribe(function (newVal) {
                            lock(function () { return _this.paddingObj.applyFromString(newVal); });
                        }));
                        ["left", "right", "top", "bottom"].forEach(function (name) {
                            _this._disposables.push(_this.paddingObj[name].subscribe(function (newVal) {
                                lock(function () { return _this.padding(_this.paddingObj.toString()); });
                            }));
                        });
                        return _this;
                    }
                    StyleModel.prototype.getInfo = function () {
                        return Metadata.styleSerializationInfo;
                    };
                    StyleModel.prototype.isPropertyModified = function (name) {
                        var needName = this["_" + name] ? "_" + name : name;
                        var property = ko.unwrap(this[needName]);
                        if (property instanceof Object) {
                            return !property.isEmpty();
                        }
                        else {
                            return !!property;
                        }
                    };
                    StyleModel.prototype.displayType = function () {
                        return DevExpress.Analytics.Utils.getLocalization("Control Style", "DevExpress.XtraReports.UI.XRControlStyle");
                    };
                    StyleModel.defaults = {
                        "backColor": "transparent",
                        "foreColor": "Black",
                        "borderColor": "Black"
                    };
                    return StyleModel;
                }(DevExpress.Analytics.Utils.Disposable));
                Controls.StyleModel = StyleModel;
                (function (Metadata) {
                    var _backColor = { propertyName: "_backColor", modelName: "@BackColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString };
                    var _foreColor = { propertyName: "_foreColor", modelName: "@ForeColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString };
                    var _borderColor = { propertyName: "_borderColor", modelName: "@BorderColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString };
                    Metadata.styleSerializationInfo = $.extend(true, [], [
                        Metadata.name, Metadata.font, Metadata.textAlignment,
                        _foreColor,
                        _backColor,
                        _borderColor,
                        { propertyName: "backColor", displayName: "Background Color", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.BackColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor },
                        { propertyName: "foreColor", displayName: "Foreground Color", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.ForeColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor },
                        { propertyName: "borderColor", displayName: "Border Color", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.BorderColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor },
                        { propertyName: "borders", modelName: "@Sides", displayName: "Borders", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.Borders", editor: DevExpress.Analytics.Widgets.editorTemplates.borders },
                        { propertyName: "borderWidth", modelName: "@BorderWidthSerializable", displayName: "Border Width", localizationId: "DevExpress.XtraReports.UI.XRControlStyle.BorderWidth", from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }
                    ]).concat([Metadata.borderDashStyle], Metadata.paddingGroup);
                    Metadata.styleSerializationInfo.forEach(function (item) { delete item.defaultVal; });
                    Metadata.styleName = { propertyName: "styleName", modelName: "@StyleName", editor: Widgets.editorTemplates.style, displayName: "Style", localizationId: "DevExpress.XtraReports.UI.ConditionFormatting.Style", defaultVal: null };
                    Metadata.evenStyleName = { propertyName: "evenStyleName", modelName: "@EvenStyleName", editor: Widgets.editorTemplates.style, displayName: "Even Style", localizationId: "DevExpress.XtraReports.UI.XRControl.XRControlStyles.EvenStyle", defaultVal: null };
                    Metadata.oddStyleName = { propertyName: "oddStyleName", modelName: "@OddStyleName", editor: Widgets.editorTemplates.style, displayName: "Odd Style", localizationId: "DevExpress.XtraReports.UI.XRControl.XRControlStyles.OddStyle", defaultVal: null };
                    Metadata.stylePriority = { propertyName: "stylePriority", modelName: "StylePriority", info: Metadata.stylePrioritySerializationInfo };
                    var cellStyleName = { propertyName: "cellStyleName", modelName: "@CellStyleName", displayName: "Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Cell", editor: Widgets.editorTemplates.style, defaultVal: null }, customTotalCellStyleName = { propertyName: "customTotalCellStyleName", modelName: "@CustomTotalCellStyleName", displayName: "Custom Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.CustomTotalCell", editor: Widgets.editorTemplates.style, defaultVal: null }, fieldHeaderStyleName = { propertyName: "fieldHeaderStyleName", modelName: "@FieldHeaderStyleName", displayName: "Field Header", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldHeader", editor: Widgets.editorTemplates.style, defaultVal: null }, fieldValueGrandTotalStyleName = { propertyName: "fieldValueGrandTotalStyleName", modelName: "@FieldValueGrandTotalStyleName", displayName: "Field Value Grand Total", localizationId: "DevExpress.XtraPivotGrid.PivotGridAppearancesBase.FieldValueGrandTotal", editor: Widgets.editorTemplates.style, defaultVal: null }, fieldValueStyleName = { propertyName: "fieldValueStyleName", modelName: "@FieldValueStyleName", displayName: "Field Value", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValue", editor: Widgets.editorTemplates.style, defaultVal: null }, fieldValueTotalStyleName = { propertyName: "fieldValueTotalStyleName", modelName: "@FieldValueTotalStyleName", displayName: "Field Value Total", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValueTotal", editor: Widgets.editorTemplates.style, defaultVal: null }, filterSeparatorStyleName = { propertyName: "filterSeparatorStyleName", modelName: "@FilterSeparatorStyleName", displayName: "Filter Separator", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FilterSeparator", editor: Widgets.editorTemplates.style, defaultVal: null }, grandTotalCellStyleName = { propertyName: "grandTotalCellStyleName", modelName: "@GrandTotalCellStyleName", displayName: "Grand Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.GrandTotalCell", editor: Widgets.editorTemplates.style, defaultVal: null }, headerGroupLineStyleName = { propertyName: "headerGroupLineStyleName", modelName: "@HeaderGroupLineStyleName", displayName: "Header Group Line", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.HeaderGroupLine", editor: Widgets.editorTemplates.style, defaultVal: null }, linesStyleName = { propertyName: "linesStyleName", modelName: "@LinesStyleName", displayName: "Lines", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Lines", editor: Widgets.editorTemplates.style, defaultVal: null }, totalCellStyleName = { propertyName: "totalCellStyleName", modelName: "@TotalCellStyleName", displayName: "Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.TotalCell", editor: Widgets.editorTemplates.style, defaultVal: null };
                    Metadata.pivotGridStyles = [cellStyleName, customTotalCellStyleName, fieldHeaderStyleName, fieldValueGrandTotalStyleName, fieldValueStyleName, fieldValueTotalStyleName, filterSeparatorStyleName,
                        grandTotalCellStyleName, headerGroupLineStyleName, linesStyleName, totalCellStyleName];
                    Metadata.stylesInfo = [Metadata.evenStyleName, Metadata.oddStyleName, Metadata.styleName].concat(Metadata.pivotGridStyles);
                    Metadata.stylesObj = { propertyName: "styleObj", displayName: "Styles", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.Styles' };
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                (function (Metadata) {
                    Metadata.sizeLocation = [Metadata.size, Metadata.location];
                    Metadata.bordersProperties = [Metadata.borders, Metadata.borderWidth, Metadata.borderDashStyle, Metadata.borderColor];
                    Metadata.baseControlProperties = [Metadata.name, Metadata.visible, Metadata.dpi, Metadata.lockedInUserDesigner, Metadata.tag, Metadata.expressionBindings];
                    Metadata.commonBandProperties = [Metadata.backColor, Metadata.formattingRuleLinks].concat(Metadata.baseControlProperties, Metadata.bordersProperties, Metadata.paddingGroup);
                    Metadata.commonControlProperties = [Metadata.styleName, Metadata.evenStyleName, Metadata.oddStyleName, Metadata.stylesObj, Metadata.stylePriority, Metadata.canPublish].concat(Metadata.commonBandProperties);
                    Metadata.fontGroup = [Metadata.font, Metadata.foreColor];
                    Metadata.bookmarkGroup = [Metadata.bookmark, Metadata.bookmarkParent];
                    Metadata.navigationGroup = [Metadata.navigateUrl, Metadata.target].concat(Metadata.bookmarkGroup);
                    Metadata.datasourcePrintOptionsGroup = [Metadata.dataSource, Metadata.dataMember, Metadata.dataAdapter, Metadata.filterString, Metadata.filterStringEditable, Metadata.reportPrintOptions];
                    Metadata.processGroup = [Metadata.processDuplicatesMode, Metadata.processDuplicatesTarget, Metadata.processNullValues];
                    Metadata.canGrowShrinkGroup = [Metadata.canGrow, Metadata.canShrink];
                    Metadata.labelGroup = [Metadata.textAlignment, Metadata.text, Metadata.textArea, Metadata.textFormatString, Metadata.textFitMode, Metadata.nullValueText,
                        Metadata.keepTogetherDefaultValueFalse, Metadata.summary, Metadata.multiline, Metadata.angle, Metadata.wordWrap, Metadata.xlsxFormatString, Metadata.rtl, Metadata.interactiveSorting
                    ].concat(Metadata.commonControlProperties, Metadata.fontGroup, Metadata.navigationGroup, Metadata.canGrowShrinkGroup, Metadata.processGroup);
                    Metadata.unknownSerializationsInfo = [].concat(Metadata.baseControlProperties, Metadata.sizeLocation);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var ComponentsModel = (function (_super) {
                    __extends(ComponentsModel, _super);
                    function ComponentsModel(model, renameComponentStrategy) {
                        var _this = _super.call(this) || this;
                        _this.renameComponentStrategy = renameComponentStrategy;
                        _this.className = function () {
                            return "component";
                        };
                        _this.controlType = "XRComponent";
                        var _name = ko.observable(model.name);
                        _this.data = model.data;
                        _this._disposables.push(_this.name = ko.pureComputed({
                            read: function () { return _name(); },
                            write: function (value) {
                                if (value !== _name() && renameComponentStrategy.validateName(value) && renameComponentStrategy.validateUnique(value, _name())) {
                                    if (renameComponentStrategy.tryRename(value, _this.data)) {
                                        _name(value);
                                    }
                                }
                            }
                        }));
                        return _this;
                    }
                    ComponentsModel.prototype.getInfo = function () {
                        return [Metadata.name];
                    };
                    return ComponentsModel;
                }(DevExpress.Analytics.Utils.Disposable));
                Controls.ComponentsModel = ComponentsModel;
                var ExtensionModel = (function () {
                    function ExtensionModel(model, serializer) {
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(this, model);
                    }
                    ExtensionModel.prototype.getInfo = function () {
                        return extensionSerializationInfo;
                    };
                    return ExtensionModel;
                }());
                Controls.ExtensionModel = ExtensionModel;
                var extensionSerializationInfo = [
                    { propertyName: "key", modelName: "@Key" },
                    { propertyName: "value", modelName: "@Value" }
                ];
            })(Controls = Designer.Controls || (Designer.Controls = {}));
            (function (Data) {
                var LookUpValue = (function () {
                    function LookUpValue(model, serializer) {
                        var _this = this;
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(this, model);
                        this.value = ko.pureComputed({
                            read: function () {
                                return _this._value() && _this._value().content();
                            },
                            write: function (newValue) {
                                _this._value() && _this._value().content(newValue);
                            }
                        });
                    }
                    LookUpValue.createNew = function () {
                        return new LookUpValue({});
                    };
                    LookUpValue.from = function (model, serializer) {
                        return new LookUpValue(model, serializer);
                    };
                    LookUpValue.toJson = function (value, serializer, refs) {
                        return serializer.serialize(value, Metadata.lookUpValueSerializationInfo, refs);
                    };
                    LookUpValue.prototype.getInfo = function () {
                        if (this.valueInfo) {
                            return Metadata.lookUpValueSerializationInfo.concat(this.valueInfo());
                        }
                        return Metadata.lookUpValueSerializationInfo;
                    };
                    Object.defineProperty(LookUpValue.prototype, "isEmpty", {
                        get: function () {
                            return this._value() === null || this._value() === undefined;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return LookUpValue;
                }());
                Data.LookUpValue = LookUpValue;
                var Metadata;
                (function (Metadata) {
                    Metadata.lookUpValueSerializationInfo = [
                        { propertyName: "description", modelName: "@Description", displayName: "Description", localizationId: "DevExpress.XtraReports.Parameters.Parameter.Description", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text },
                        { propertyName: "_value", modelName: "@Value", link: true },
                    ];
                })(Metadata = Data.Metadata || (Data.Metadata = {}));
            })(Data = Designer.Data || (Designer.Data = {}));
            var ReportParameterHelper = (function (_super) {
                __extends(ReportParameterHelper, _super);
                function ReportParameterHelper() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return ReportParameterHelper;
            }(DevExpress.Reporting.Viewer.Parameters.ParameterHelper));
            Designer.ReportParameterHelper = ReportParameterHelper;
            (function (Data) {
                var Parameter = (function (_super) {
                    __extends(Parameter, _super);
                    function Parameter(model, report, objectsStorage, parameterHelper, serializer) {
                        var _this = _super.call(this) || this;
                        _this.templateName = "dx-treelist-item";
                        _this.contenttemplate = "dxrd-parameterContent";
                        _this.collapsed = ko.observable(false);
                        _this.valueInfo = ko.observable();
                        _this.multiValueInfo = ko.observable();
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(_this, model);
                        var self = _this;
                        _this.objectsStorage = objectsStorage;
                        _this._parameterHelper = parameterHelper;
                        _this["_name"] = ko.observable(_this.parameterName());
                        _this["change"] = function (e, parameters) {
                            if (parameters.filter(function (x) { return x.parameterName() === e.value; }).length === 1) {
                                _this["_name"](e.value);
                            }
                            else {
                                _this.parameterName(_this["_name"]());
                            }
                        };
                        if (!_this._type()) {
                            _this._type(objectsStorage.getType("System.String"));
                        }
                        if (_this._obsoleteValue()) {
                            _this.value(_this._obsoleteValue().content());
                            _this._obsoleteValue(null);
                        }
                        delete _this._obsoleteValue;
                        _this.type = ko.pureComputed({
                            read: function () {
                                return _this._type().content();
                            },
                            write: function (val) {
                                var oldVal = _this._type().content();
                                if (val !== oldVal) {
                                    var editorValue = _this.value();
                                    if (_this.isMultiValue())
                                        _this.value([]);
                                    else
                                        _this.value(null);
                                    _this.updateLookUpValues(undefined, null);
                                    setTimeout(function () {
                                        _this._type(objectsStorage.getType(val));
                                        if (_this.isMultiValue())
                                            return;
                                        if (val === "System.DateTime") {
                                            _this.value(_this.defaultValue);
                                        }
                                        else {
                                            _this.value(_this._convertSingleValue(editorValue));
                                        }
                                        _this.updateLookUpValues(_this._type().content(), _this.defaultValue);
                                    }, 1);
                                }
                            }
                        });
                        _this._initializeValue();
                        _this._disposables.push(_this.isMultiValue.subscribe(function (newMultiValue) {
                            if (newMultiValue) {
                                _this.value = ko.observableArray([_this._parameterHelper.createMultiValue(_this, _this.value())]);
                            }
                            else {
                                _this.value = ko.observable(_this.defaultValue);
                            }
                        }));
                        _this.valueInfo = ko.pureComputed(function () {
                            var result = $.extend(true, {}, Metadata.parameterValueSerializationInfo, parameterHelper.getParameterInfo(_this));
                            result.propertyName = "value";
                            if (_this.type() === "System.String" || _this.isMultiValue()) {
                                result.defaultVal = "";
                            }
                            return result;
                        });
                        _this._initializeLookUpSourceType();
                        _this._disposables.push(ko.computed(function () {
                            var lookUpSettings = _this.lookUpSettings();
                            if (lookUpSettings) {
                                lookUpSettings.updateFilter(_this, report);
                                if (lookUpSettings instanceof StaticListLookUpSettings) {
                                    _this._disposables.push(lookUpSettings.lookUpValues.subscribe(function (changes) {
                                        for (var index = 0; index < changes.length; index++) {
                                            if (changes[index].status === "added") {
                                                self.initializeLookUpValue(changes[index].value);
                                                changes[index].value.valueInfo = self.multiValueInfo;
                                            }
                                            else if (changes[index].status === "deleted") {
                                                self.objectsStorage.objects.remove(changes[index].value._value());
                                            }
                                        }
                                    }, null, "arrayChange"));
                                }
                            }
                        }));
                        _this.viewmodel = new DevExpress.Analytics.Widgets.ObjectProperties(ko.observable(_this));
                        return _this;
                    }
                    Parameter.valueToJsonObject = function (value) {
                        var result = ReportParameterHelper.getSerializationValue(value, DevExpress.Analytics.Utils.serializeDate);
                        return (result instanceof Array) ? result.join(Parameter.separator) : result;
                    };
                    Parameter.prototype._getTypeValue = function (typeName) {
                        var values = Parameter.typeValues.filter(function (type) { return type.value === typeName; });
                        return values.length > 0 ? values[0] : null;
                    };
                    Parameter.prototype._initializeLookUpSourceType = function () {
                        var _this = this;
                        var lookUpSettings = this.lookUpSettings(), lookUpValues = lookUpSettings && (lookUpSettings instanceof StaticListLookUpSettings) && lookUpSettings.lookUpValues();
                        if (lookUpValues) {
                            lookUpValues.forEach(function (lookUpValue) {
                                lookUpValue.valueInfo = _this.multiValueInfo;
                                if (lookUpValue.isEmpty)
                                    _this.initializeLookUpValue(lookUpValue);
                            });
                        }
                        this.lookUpSourceType = ko.observable("None");
                        if (lookUpSettings) {
                            if (lookUpSettings.objectType().indexOf("StaticListLookUpSettings") !== -1) {
                                this.lookUpSourceType("StaticListLookUpSettings");
                            }
                            else {
                                this.lookUpSourceType("DynamicListLookUpSettings");
                            }
                        }
                        this._disposables.push(this.lookUpSourceType.subscribe(function (newVal) {
                            if (newVal === "StaticListLookUpSettings") {
                                _this.lookUpSettings(_this.objectsStorage.createStaticLookUpSetting());
                            }
                            else if (newVal === "DynamicListLookUpSettings") {
                                _this.lookUpSettings(_this.objectsStorage.createDynamicLookUpSetting());
                            }
                            else {
                                _this.objectsStorage.objects.remove(_this.lookUpSettings());
                                _this.lookUpSettings(null);
                            }
                        }));
                    };
                    Parameter.prototype._tryConvertValue = function (value) {
                        var condition = function (val) { return val !== void 0 && val !== null && !isNaN(typeof val === "string" ? "" : val); };
                        if (!condition(value)) {
                            return { isValid: false, newValue: null };
                        }
                        var typeValue = this._getTypeValue(this.type()), newValue = (typeValue && typeValue.valueConverter) ? typeValue.valueConverter(value) : value;
                        return { isValid: condition(newValue), newValue: newValue };
                    };
                    Parameter.prototype._convertSingleValue = function (value) {
                        var result = this._tryConvertValue(value);
                        return result.isValid ? result.newValue : this.defaultValue;
                    };
                    Parameter.prototype._initializeValue = function () {
                        var _this = this;
                        var value = this.value();
                        if (this.isMultiValue()) {
                            typeof value === "string"
                                ? this.value = this._parameterHelper.createMultiValueArray(value.split(Parameter.separator), this, function (part) { return _this._convertSingleValue(part); })
                                : this.value = ko.observableArray();
                        }
                        else if (this.allowNull() && !value) {
                            this.value(null);
                        }
                        else {
                            this.value(this._convertSingleValue(value));
                        }
                    };
                    Parameter.prototype.getInfo = function () {
                        if (this.type) {
                            var info = $.extend(true, [], Metadata.parameterSerializationInfo);
                            info.splice(info.indexOf(info.filter(function (prop) { return prop.propertyName === "value"; })[0]), 1, this.valueInfo());
                            return info;
                        }
                        return Metadata.parameterSerializationInfo;
                    };
                    Parameter.prototype.isPropertyVisible = function (name) {
                        if (name === "lookUpSettings") {
                            return !!this.lookUpSettings();
                        }
                        return true;
                    };
                    Parameter.prototype.initializeLookUpValue = function (lookUpValue) {
                        var newValue = this.objectsStorage.addValue();
                        newValue.type(this.type());
                        newValue.content(this.defaultValue);
                        lookUpValue._value(newValue);
                    };
                    Parameter.prototype.updateLookUpValues = function (newType, value) {
                        if (value === void 0) { value = null; }
                        var lookUpSettings = this.lookUpSettings(), lookUpValues = lookUpSettings && (lookUpSettings instanceof StaticListLookUpSettings) && lookUpSettings.lookUpValues();
                        if (!lookUpSettings || !lookUpValues)
                            return;
                        lookUpValues.forEach(function (lookUpValue) {
                            var lookUpVal = lookUpValue._value();
                            lookUpVal.content(value);
                            !!newType && lookUpVal.type(newType);
                        });
                    };
                    Parameter.prototype.getParameterDescriptor = function () {
                        return {
                            description: this.description.peek(),
                            displayName: "Value",
                            localizationId: "DevExpress.XtraReports.Parameters.Parameter.Value",
                            name: this.parameterName.peek(),
                            type: this.type.peek(),
                            value: this.value.peek(),
                            visible: this.visible.peek(),
                            multiValue: this.isMultiValue.peek(),
                            allowNull: this.allowNull.peek(),
                            tag: this.tag.peek()
                        };
                    };
                    Object.defineProperty(Parameter.prototype, "name", {
                        get: function () {
                            return this.parameterName();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Parameter.prototype, "specifics", {
                        get: function () {
                            var typeValue = this._getTypeValue(this.type());
                            return typeValue ? typeValue.specifics : "default";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Parameter.prototype, "icon", {
                        get: function () {
                            var typeValue = this._getTypeValue(this.type());
                            return typeValue && typeValue.icon;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Parameter.prototype, "defaultValue", {
                        get: function () {
                            var typeValue = this._getTypeValue(this.type());
                            var _value = typeValue ? typeValue.defaultValue : "";
                            if (_value instanceof Date) {
                                _value = new Date(_value);
                            }
                            return _value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Parameter.prototype, "displayName", {
                        get: function () {
                            return this.parameterName();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Parameter.separator = "|";
                    Parameter.defaultGuidValue = "00000000-0000-0000-0000-000000000000";
                    Parameter.typeValues = [
                        { value: "System.String", displayValue: "String", defaultValue: "", specifics: "String", valueConverter: function (val) { return val.toString(); }, localizationId: "UtilsUIStringId.Parameter_Type_String" },
                        { value: "System.DateTime", displayValue: "Date", defaultValue: new Date(new Date().setHours(0, 0, 0, 0)), specifics: "Date", valueConverter: function (val) { return DevExpress.Analytics.Internal.parseDate(val); }, localizationId: "UtilsUIStringId.Parameter_Type_DateTime" },
                        { value: "System.Int16", displayValue: "Number (16 bit integer)", defaultValue: "0", specifics: "Integer", valueConverter: function (val) { return DevExpress.Analytics.Internal.integerValueConverter(val, this.defaultValue); }, localizationId: "UtilsUIStringId.Parameter_Type_Int16" },
                        { value: "System.Int32", displayValue: "Number (32 bit integer)", defaultValue: "0", specifics: "Integer", valueConverter: function (val) { return DevExpress.Analytics.Internal.integerValueConverter(val, this.defaultValue); }, localizationId: "UtilsUIStringId.Parameter_Type_Int32" },
                        { value: "System.Int64", displayValue: "Number (64 bit integer)", defaultValue: "0", specifics: "Integer", valueConverter: function (val) { return DevExpress.Analytics.Internal.integerValueConverter(val, this.defaultValue); }, localizationId: "UtilsUIStringId.Parameter_Type_Int64" },
                        { value: "System.Single", displayValue: "Number (floating-point)", defaultValue: "0", specifics: "Float", valueConverter: function (val) { return DevExpress.Analytics.Internal.floatValueConverter(val, this.defaultValue); }, localizationId: "UtilsUIStringId.Parameter_Type_Float" },
                        { value: "System.Double", displayValue: "Number (double-precision floating-point)", defaultValue: "0", specifics: "Float", valueConverter: function (val) { return DevExpress.Analytics.Internal.floatValueConverter(val, this.defaultValue); }, localizationId: "UtilsUIStringId.Parameter_Type_Double" },
                        { value: "System.Decimal", displayValue: "Number (decimal)", defaultValue: "0", specifics: "Float", valueConverter: function (val) { return DevExpress.Analytics.Internal.floatValueConverter(val, this.defaultValue); }, localizationId: "UtilsUIStringId.Parameter_Type_Decimal" },
                        { value: "System.Boolean", displayValue: "Boolean", defaultValue: false, specifics: "Bool", valueConverter: function (val) { return String(val).toLowerCase() === "true" ? true : (String(val).toLowerCase() === "false" ? false : null); }, localizationId: "UtilsUIStringId.Parameter_Type_Boolean" },
                        { value: "System.Guid", displayValue: "Guid", defaultValue: Parameter.defaultGuidValue, valueConverter: function (val) { return DevExpress.Analytics.Widgets.Internal.validateGuid(val) ? val : Parameter.defaultGuidValue; }, specifics: "guid", localizationId: "UtilsUIStringId.Parameter_Type_Guid" }
                    ];
                    return Parameter;
                }(DevExpress.Analytics.Utils.Disposable));
                Data.Parameter = Parameter;
                var Metadata;
                (function (Metadata) {
                    Metadata.parameterValueSerializationInfo = { propertyName: "value", displayName: "Value", localizationId: "DevExpress.XtraReports.Parameters.Parameter.Value", modelName: "@ValueInfo", from: function (val) { return ko.observable(val); }, toJsonObject: Parameter.valueToJsonObject };
                    Metadata.parameterLookUpSettingsSerializationInfo = { propertyName: "lookUpSettings", displayName: "Look-Up Settings", localizationId: "DevExpress.XtraReports.Parameters.Parameter.LookUpSettings", modelName: "@LookUpSettings", link: true, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.parameterSerializationInfo = [
                        { propertyName: "parameterName", modelName: "@Name", displayName: "Name", localizationId: 'DevExpress.XtraReports.UI.XRControl.Name', defaultVal: "", validationRules: DevExpress.Analytics.Internal.nameValidationRules, editor: Widgets.editorTemplates.name },
                        { propertyName: "description", modelName: "@Description", displayName: "Description", localizationId: "DevExpress.XtraReports.Parameters.Parameter.Description", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text },
                        Controls.Metadata.visible,
                        { propertyName: "isMultiValue", modelName: "@MultiValue", displayName: "MultiValue", localizationId: "DevExpress.XtraReports.Parameters.Parameter.MultiValue", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool },
                        { propertyName: "allowNull", modelName: "@AllowNull", displayName: "Allow Null", localizationId: "DevExpress.XtraReports.Parameters.Parameter.AllowNull", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool },
                        { propertyName: "tag", modelName: "@Tag", displayName: "Tag", localizationId: "DevExpress.XtraReports.UI.XRControl.Tag", editor: DevExpress.Analytics.Widgets.editorTemplates.text, defaultVal: "" },
                        { propertyName: "type", displayName: "Type", localizationId: "DevExpress.XtraReports.Parameters.Parameter.Type", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: (Parameter.typeValues) },
                        Metadata.parameterValueSerializationInfo,
                        { propertyName: "_obsoleteValue", modelName: "@Value", link: true },
                        { propertyName: "_type", modelName: "@Type", link: true },
                        {
                            propertyName: "lookUpSourceType", displayName: "Look-Up Settings Type", localizationId: "DevExpress.XtraReports.Parameters.Parameter.LookUpSettings", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: [
                                { value: "None", displayValue: "No Look-Up", localizationId: "PreviewStringId.ParameterLookUpSettingsNoLookUp" },
                                { value: "StaticListLookUpSettings", displayValue: "Static List", localizationId: "DevExpress.XtraReports.Parameters.StaticListLookUpSettings" },
                                { value: "DynamicListLookUpSettings", displayValue: "Dynamic List", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings" }
                            ]
                        },
                        Metadata.parameterLookUpSettingsSerializationInfo
                    ];
                })(Metadata = Data.Metadata || (Data.Metadata = {}));
                var CalculatedField = (function (_super) {
                    __extends(CalculatedField, _super);
                    function CalculatedField(model, serializer) {
                        var _this = _super.call(this) || this;
                        _this.templateName = "dx-treelist-item";
                        _this.contenttemplate = "dxrd-calculatedfield-content";
                        _this.isList = false;
                        _this.isCalculated = true;
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(_this, model);
                        return _this;
                    }
                    CalculatedField.prototype.getInfo = function () {
                        return Metadata.calculatedFieldSerializationInfo;
                    };
                    Object.defineProperty(CalculatedField.prototype, "displayName", {
                        get: function () {
                            return this["displayNameObject"]() || this.calculatedFieldName();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(CalculatedField.prototype, "name", {
                        get: function () {
                            return this.calculatedFieldName();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(CalculatedField.prototype, "specifics", {
                        get: function () {
                            var type = this.fieldType();
                            if (["Byte", "Int16", "Int32"].indexOf(type) > -1) {
                                return "calcinteger";
                            }
                            else if (["Float", "Double", "Decimal"].indexOf(type) > -1) {
                                return "calcfloat";
                            }
                            else if (["DateTime", "TimeSpan"].indexOf(type) > -1) {
                                return "calcdate";
                            }
                            return "calc" + (type === "None" ? "default" : type.toLowerCase());
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(CalculatedField.prototype, "type", {
                        get: function () {
                            return this.fieldType();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return CalculatedField;
                }(DevExpress.Analytics.Utils.Disposable));
                Data.CalculatedField = CalculatedField;
                (function (Metadata) {
                    var calculatedFieldScriptsInfo = [
                        { propertyName: "onGetValue", modelName: "@OnGetValue", displayName: "Get a Value", localizationId: "DevExpress.XtraReports.UI.CalculatedFieldScripts.OnGetValue", editor: Widgets.editorTemplates.scriptsBox }
                    ];
                    Metadata.calculatedFieldScripts = { propertyName: "scripts", modelName: "Scripts", displayName: "Scripts", localizationId: "DevExpress.XtraReports.UI.CalculatedField.Scripts", info: calculatedFieldScriptsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.calculatedFieldSerializationInfo = [
                        { propertyName: "calculatedFieldName", modelName: "@Name" },
                        { propertyName: "nameEditable", displayName: "Name", editor: DevExpress.Analytics.Widgets.editorTemplates.text, validationRules: DevExpress.Analytics.Internal.nameValidationRules, localizationId: 'DevExpress.XtraReports.UI.XRControl.Name' },
                        Controls.Metadata.displayName,
                        {
                            propertyName: "fieldType", modelName: "@FieldType", displayName: "Field Type", localizationId: "DevExpress.XtraReports.UI.CalculatedField.FieldType", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "None", from: DevExpress.Analytics.Utils.fromEnum,
                            valuesArray: [
                                { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.FieldType.None" },
                                { value: "String", displayValue: "String", localizationId: "DevExpress.XtraReports.UI.FieldType.String" },
                                { value: "DateTime", displayValue: "DateTime", localizationId: "DevExpress.XtraReports.UI.FieldType.DateTime" },
                                { value: "TimeSpan", displayValue: "TimeSpan", localizationId: "DevExpress.XtraReports.UI.FieldType.TimeSpan" },
                                { value: "Byte", displayValue: "Byte", localizationId: "DevExpress.XtraReports.UI.FieldType.Byte" },
                                { value: "Int16", displayValue: "Int16", localizationId: "DevExpress.XtraReports.UI.FieldType.Int16" },
                                { value: "Int32", displayValue: "Int32", localizationId: "DevExpress.XtraReports.UI.FieldType.Int32" },
                                { value: "Float", displayValue: "Float", localizationId: "DevExpress.XtraReports.UI.FieldType.Float" },
                                { value: "Double", displayValue: "Double", localizationId: "DevExpress.XtraReports.UI.FieldType.Double" },
                                { value: "Decimal", displayValue: "Decimal", localizationId: "DevExpress.XtraReports.UI.FieldType.Decimal" },
                                { value: "Boolean", displayValue: "Boolean", localizationId: "DevExpress.XtraReports.UI.FieldType.Boolean" }
                            ]
                        },
                        Controls.Metadata.dataSource,
                        Controls.Metadata.dataMember,
                        { propertyName: "expression", modelName: "@Expression", displayName: "Expression", localizationId: "DevExpress.XtraReports.UI.CalculatedField.Expression", defaultVal: "" },
                        { propertyName: "expressionObj", displayName: "Expression", localizationId: "DevExpress.XtraReports.UI.CalculatedField.Expression", editor: DevExpress.Analytics.Widgets.editorTemplates.expressionEditor },
                        Metadata.calculatedFieldScripts
                    ];
                })(Metadata = Data.Metadata || (Data.Metadata = {}));
                var ObjectItem = (function (_super) {
                    __extends(ObjectItem, _super);
                    function ObjectItem(model, dsHelperProvider, serializer) {
                        var _this = _super.call(this) || this;
                        _this.dsHelperProvider = dsHelperProvider;
                        _this.preInitProperties(model, dsHelperProvider, serializer);
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(_this, model);
                        _this.afterDeserialization(model, serializer);
                        return _this;
                    }
                    ObjectItem.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.dsHelperProvider = null;
                    };
                    ObjectItem.createNew = function (model, dsHelperProvider, serializer) {
                        var objectType = model["@ObjectType"] || "";
                        if (objectType.indexOf("StaticListLookUpSettings") !== -1) {
                            return new StaticListLookUpSettings(model, dsHelperProvider, serializer);
                        }
                        else if (objectType.indexOf("DynamicListLookUpSettings") !== -1) {
                            return new DynamicListLookUpSettings(model, dsHelperProvider, serializer);
                        }
                        else if (objectType.indexOf("ReportServer") !== -1 && model["@ObjectType"].indexOf("DataSource") !== -1) {
                            return new UniversalDataSource(model, dsHelperProvider, serializer);
                        }
                        else if (objectType.indexOf("DataFederation") !== -1) {
                            return new DataFederationDataSource(model, dsHelperProvider, serializer);
                        }
                        return new ObjectStorageItem(model, dsHelperProvider, serializer);
                    };
                    ObjectItem.prototype.getInfo = function () {
                        return [{ propertyName: "objectType", modelName: "@ObjectType" }];
                    };
                    ObjectItem.prototype.afterDeserialization = function (model, serializer) {
                        DevExpress.Analytics.Internal.cutRefs(model);
                    };
                    ObjectItem.prototype.preInitProperties = function (model, dsHelperProvider, serializer) { };
                    ObjectItem.prototype.clone = function () {
                        var serializer = new DevExpress.Analytics.Utils.ModelSerializer();
                        return ObjectItem.createNew(serializer.serialize(this), this.dsHelperProvider, serializer);
                    };
                    return ObjectItem;
                }(DevExpress.Analytics.Utils.Disposable));
                Data.ObjectItem = ObjectItem;
                var ObjectStorageItem = (function (_super) {
                    __extends(ObjectStorageItem, _super);
                    function ObjectStorageItem(model, dsHelperProvider, serializer) {
                        return _super.call(this, $.extend({ "@ObjectType": "DevExpress.XtraReports.Serialization.ObjectStorageInfo" }, model), dsHelperProvider, serializer) || this;
                    }
                    ObjectStorageItem.prototype._getInfo = function () {
                        return _super.prototype.getInfo.call(this).concat([{ propertyName: "content", modelName: "@Content" }, { propertyName: "type", modelName: "@Type" },
                            { propertyName: "name", modelName: "@Name", defaultVal: "" }]);
                    };
                    ObjectStorageItem.prototype.preInitProperties = function (model) {
                        var _this = this;
                        this.getInfo = (model && model["@Base64"]) ? function () {
                            return _this._getInfo().concat({ propertyName: "base64", modelName: "@Base64" });
                        } : function () { return _this._getInfo(); };
                    };
                    ObjectStorageItem.prototype.isEmpty = function () {
                        return this.type && this.type() === "System.DateTime"
                            && this.content && (this.content() === undefined || this.content() === null);
                    };
                    return ObjectStorageItem;
                }(ObjectItem));
                Data.ObjectStorageItem = ObjectStorageItem;
                var ObjectStorageParameter = (function (_super) {
                    __extends(ObjectStorageParameter, _super);
                    function ObjectStorageParameter(model, serializer) {
                        return _super.call(this, model, serializer, [{ propertyName: "_type", modelName: "@Type", link: true }, Metadata.parameterLookUpSettingsSerializationInfo]) || this;
                    }
                    return ObjectStorageParameter;
                }(DevExpress.Analytics.Elements.SerializableModel));
                Data.ObjectStorageParameter = ObjectStorageParameter;
                var DataFederationDataSource = (function (_super) {
                    __extends(DataFederationDataSource, _super);
                    function DataFederationDataSource() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    DataFederationDataSource.prototype.preInitProperties = function () {
                        var info = this.getInfo();
                        this.getInfo = function () {
                            return [].concat([], info, [
                                {
                                    modelName: "SerializableSourceMap",
                                    propertyName: "serializableSourceMap",
                                    array: true,
                                    info: [
                                        { modelName: "@DataSource", propertyName: "dataSource", link: true },
                                        { modelName: "@Name", propertyName: "name" }
                                    ]
                                }
                            ]);
                        };
                    };
                    return DataFederationDataSource;
                }(ObjectStorageItem));
                Data.DataFederationDataSource = DataFederationDataSource;
                var LookUpSettings = (function (_super) {
                    __extends(LookUpSettings, _super);
                    function LookUpSettings(model, dsHelperProvider, serializer) {
                        return _super.call(this, model, dsHelperProvider, serializer) || this;
                    }
                    LookUpSettings.prototype.getInfo = function () {
                        return _super.prototype.getInfo.call(this).concat([Controls.Metadata.filterString, Controls.Metadata.filterStringEditable]);
                    };
                    LookUpSettings.prototype.updateFilter = function (parameter, report) {
                        this.filterString.helper.parameters = ko.pureComputed({
                            read: function () {
                                var currentIndex = report.parameters.peek().indexOf(parameter);
                                return report && report.parameters().filter(function (_, index) { return index < currentIndex; });
                            },
                            deferEvaluation: true
                        });
                    };
                    return LookUpSettings;
                }(ObjectItem));
                Data.LookUpSettings = LookUpSettings;
                var StaticListLookUpSettings = (function (_super) {
                    __extends(StaticListLookUpSettings, _super);
                    function StaticListLookUpSettings(model, dsHelperProvider, serializer) {
                        var _this = _super.call(this, $.extend({ "@ObjectType": "DevExpress.XtraReports.Parameters.StaticListLookUpSettings" }, model), dsHelperProvider, serializer) || this;
                        _this.filterString = new DevExpress.Analytics.Widgets.FilterStringOptions(_this._filterString);
                        _this.filterString.helper.canChoiceParameters = true;
                        _this.filterString.itemsProvider = ko.observable(null);
                        return _this;
                    }
                    StaticListLookUpSettings.prototype.getInfo = function () {
                        return _super.prototype.getInfo.call(this).concat({ propertyName: "lookUpValues", displayName: "Values", localizationId: "DevExpress.XtraReports.Parameters.StaticListLookUpSettings.LookUpValues", modelName: "LookUpValues", array: true, editor: Widgets.editorTemplates.lookUpValues });
                    };
                    StaticListLookUpSettings.prototype.afterDeserialization = function (model, serializer) {
                        this.lookUpValues = DevExpress.Analytics.Utils.deserializeArray(model.LookUpValues || [], function (item) { return new Data.LookUpValue(item, serializer); });
                        _super.prototype.afterDeserialization.call(this, model, serializer);
                    };
                    StaticListLookUpSettings.prototype.updateFilter = function (parameter, report) {
                        this.filterString.itemsProvider({
                            getItems: function (pathRequest) {
                                var result = $.Deferred();
                                result.resolve([
                                    {
                                        displayName: "Description",
                                        isList: false,
                                        name: "Description",
                                        specifics: "String"
                                    },
                                    {
                                        displayName: "Value",
                                        isList: false,
                                        name: "Value",
                                        specifics: parameter.specifics
                                    }
                                ]);
                                return result.promise();
                            }
                        });
                        _super.prototype.updateFilter.call(this, parameter, report);
                    };
                    return StaticListLookUpSettings;
                }(LookUpSettings));
                Data.StaticListLookUpSettings = StaticListLookUpSettings;
                var DynamicListLookUpSettings = (function (_super) {
                    __extends(DynamicListLookUpSettings, _super);
                    function DynamicListLookUpSettings(model, dsHelperProvider, serializer) {
                        var _this = _super.call(this, $.extend({ "@ObjectType": "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings" }, model), dsHelperProvider, serializer) || this;
                        _this.dsHelperProvider = dsHelperProvider;
                        _this.filterString = new DevExpress.Analytics.Widgets.FilterStringOptions(_this._filterString, ko.pureComputed(function () { return _this.getPath("valueMember"); }), ko.pureComputed(function () { return !_this.dataSource(); }));
                        return _this;
                    }
                    DynamicListLookUpSettings.prototype.getInfo = function () {
                        return _super.prototype.getInfo.call(this).concat([
                            Controls.Metadata.dataAdapter, Controls.Metadata.dataSource, Controls.Metadata.dataMember,
                            { propertyName: "displayMember", modelName: "@DisplayMember", displayName: "Display Member", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.DisplayMember", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.field },
                            { propertyName: "valueMember", modelName: "@ValueMember", displayName: "Value Member", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.ValueMember", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.field },
                            { propertyName: "sortMember", modelName: "@SortMember", displayName: "Sort Member", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.SortMember", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.field },
                            {
                                propertyName: "sortOrder", modelName: "@SortOrder", displayName: "Sort Order", localizationId: "DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.SortOrder", defaultVal: "None", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                                valuesArray: [
                                    {
                                        value: "None", displayValue: "None", localizationId: 'DevExpress.Data.ColumnSortOrder.None'
                                    }, {
                                        value: "Ascending", displayValue: "Ascending", localizationId: 'DevExpress.Data.ColumnSortOrder.Ascending'
                                    }, {
                                        value: "Descending", displayValue: "Descending", localizationId: 'DevExpress.Data.ColumnSortOrder.Descending'
                                    }
                                ]
                            }
                        ]);
                    };
                    DynamicListLookUpSettings.prototype.getPath = function (propertyName) {
                        if (propertyName === "dataMember") {
                            return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
                        }
                        else if (propertyName === "displayMember" || propertyName === "valueMember" || propertyName === "sortMember") {
                            return DevExpress.Analytics.Internal.getFullPath(this.getPath("dataMember"), this.dataMember());
                        }
                        return "";
                    };
                    return DynamicListLookUpSettings;
                }(LookUpSettings));
                Data.DynamicListLookUpSettings = DynamicListLookUpSettings;
                var TableInfoCollectionItem = (function (_super) {
                    __extends(TableInfoCollectionItem, _super);
                    function TableInfoCollectionItem(model, dataSource, dsHelper, serializer) {
                        var _this = _super.call(this, model, serializer, tableInfoCollectionItemSerializationsInfo) || this;
                        _this.filterString = ko.observable(null);
                        var options = new DevExpress.Analytics.Widgets.FilterStringOptions(_this["_filterString"], ko.pureComputed(function () {
                            return dsHelper() && (dsHelper().getDataSourcePath(dataSource) + "." + _this["tableName"]());
                        }), ko.pureComputed(function () { return !dataSource; }));
                        options.helper.canChoiceParameters = true;
                        _this.filterString(options);
                        return _this;
                    }
                    return TableInfoCollectionItem;
                }(DevExpress.Analytics.Elements.SerializableModel));
                Data.TableInfoCollectionItem = TableInfoCollectionItem;
                var tableInfoCollectionItemSerializationsInfo = [Controls.Metadata.filterString, Controls.Metadata.filterStringEditable, { propertyName: "tableName", modelName: "@TableName" }];
                var UniversalDataSource = (function (_super) {
                    __extends(UniversalDataSource, _super);
                    function UniversalDataSource(model, dsHelperProvider, serializer) {
                        var _this = _super.call(this, $.extend({ "@ObjectType": "DevExpress.ReportServer.Infrastructure.Data.UniversalDataSource" }, model), dsHelperProvider, serializer) || this;
                        _this.parameters = DevExpress.Analytics.Utils.deserializeArray(model.Parameters || [], function (item) { return new ObjectStorageParameter(item, serializer); });
                        _this.tableInfoCollection = DevExpress.Analytics.Utils.deserializeArray(model.TableInfoCollection || [], function (item) { return new TableInfoCollectionItem(item, _this, dsHelperProvider, serializer); });
                        _this.spParameterInfoCollection = DevExpress.Analytics.Utils.deserializeArray(model.StoredProcedureParameterInfoCollection || [], function (item) { return new ObjectStorageParameter(item, serializer); });
                        return _this;
                    }
                    UniversalDataSource.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.parameters);
                        this.disposeObservableArray(this.tableInfoCollection);
                        this.disposeObservableArray(this.spParameterInfoCollection);
                        this.resetObservableArray(this.parameters);
                        this.resetObservableArray(this.tableInfoCollection);
                        this.resetObservableArray(this.spParameterInfoCollection);
                    };
                    UniversalDataSource.prototype.getInfo = function () {
                        return _super.prototype.getInfo.call(this).concat([
                            { propertyName: "parameters", modelName: "Parameters", array: true },
                            { propertyName: "tableInfoCollection", modelName: "TableInfoCollection", array: true },
                            { propertyName: "spParameterInfoCollection", modelName: "StoredProcedureParameterInfoCollection", array: true },
                            { propertyName: "name", modelName: "@Name" }
                        ]);
                    };
                    return UniversalDataSource;
                }(ObjectItem));
                Data.UniversalDataSource = UniversalDataSource;
                var ObjectsStorage = (function (_super) {
                    __extends(ObjectsStorage, _super);
                    function ObjectsStorage(objects, dsHelperProvider) {
                        var _this = _super.call(this) || this;
                        _this.objects = objects;
                        _this.dsHelperProvider = dsHelperProvider;
                        return _this;
                    }
                    ObjectsStorage.prototype.findType = function (content) {
                        var objectStorages = this.objects().filter(function (item) { return item instanceof ObjectStorageItem; });
                        var result = objectStorages.filter(function (item) {
                            return !!item.type && item.type() === "System.Type" && item.content() === content;
                        });
                        return result.length === 0 ? null : result[0];
                    };
                    ObjectsStorage.prototype.getType = function (type) {
                        var typeObject = this.findType(type);
                        if (!typeObject) {
                            typeObject = new ObjectStorageItem({
                                "@Content": type,
                                "@Type": "System.Type"
                            }, this.dsHelperProvider);
                            this.objects.push(typeObject);
                        }
                        return typeObject;
                    };
                    ObjectsStorage.prototype.addValue = function () {
                        var newValueRef = new ObjectStorageItem({ "@Content": "" }, this.dsHelperProvider);
                        this.objects.push(newValueRef);
                        return newValueRef;
                    };
                    ObjectsStorage.prototype.createStaticLookUpSetting = function () {
                        var lookUpObject = new StaticListLookUpSettings({}, this.dsHelperProvider);
                        this.objects.push(lookUpObject);
                        return lookUpObject;
                    };
                    ObjectsStorage.prototype.createDynamicLookUpSetting = function () {
                        var lookUpObject = new DynamicListLookUpSettings({}, this.dsHelperProvider);
                        this.objects.push(lookUpObject);
                        return lookUpObject;
                    };
                    return ObjectsStorage;
                }(DevExpress.Analytics.Utils.Disposable));
                Data.ObjectsStorage = ObjectsStorage;
            })(Data = Designer.Data || (Designer.Data = {}));
            (function (Internal) {
                var CharacterCombHelper = (function () {
                    function CharacterCombHelper() {
                    }
                    CharacterCombHelper.getAlignments = function (textAlignment) {
                        var vertical = "";
                        var horizontal = "";
                        for (var i = 0; i < textAlignment.length; i++) {
                            if (textAlignment[i] === textAlignment[i].toLocaleUpperCase()) {
                                if (vertical === "") {
                                    vertical += textAlignment[i];
                                }
                                else if (vertical !== "") {
                                    horizontal += textAlignment[i];
                                }
                            }
                            else {
                                if (horizontal !== "") {
                                    horizontal += textAlignment[i];
                                }
                                else {
                                    vertical += textAlignment[i];
                                }
                            }
                        }
                        return {
                            vertical: vertical,
                            horizontal: horizontal
                        };
                    };
                    CharacterCombHelper.getLines = function (text, horizontal, multiline, wordwrap) {
                        var texts = multiline ? text.split("\n") : [text];
                        var result = [];
                        if (horizontal === 0) {
                            return result;
                        }
                        for (var i = 0; i < texts.length; i++) {
                            var lines = 1;
                            if (texts[i].length > horizontal && wordwrap) {
                                var lines = Math.round(texts[i].length / horizontal);
                                if (lines < texts[i].length / horizontal) {
                                    lines++;
                                }
                            }
                            for (var j = 0; j < lines; j++) {
                                result.push(texts[i].slice(j * (horizontal), (j + 1) * horizontal));
                            }
                        }
                        return result;
                    };
                    CharacterCombHelper.getTextOffset = function (texts, position, verticalAlign, horizontalAlign, vertical, horizontal) {
                        var offset = 0;
                        if (verticalAlign === "Top") {
                            offset += horizontal * position;
                        }
                        else if (verticalAlign === "Middle") {
                            offset += ((Math.floor((vertical - texts.length) / 2)) * horizontal);
                            offset += horizontal * position;
                        }
                        else if (verticalAlign === "Bottom") {
                            offset += ((vertical - texts.length) * horizontal);
                            offset += horizontal * position;
                        }
                        if (horizontalAlign === "Center") {
                            if (texts[position].length < horizontal) {
                                offset += Math.floor((horizontal - Math.max(texts[position].length, 1)) / 2);
                            }
                        }
                        else if (horizontalAlign === "Right") {
                            if (texts[position].length < horizontal) {
                                offset += (horizontal - Math.max(texts[position].length, 1));
                            }
                        }
                        return offset;
                    };
                    CharacterCombHelper.setText = function (texts, cells, getTextOffset) {
                        for (var i = 0; i < cells.length; i++) {
                            cells[i].text("");
                            cells[i].isEmpty = true;
                        }
                        for (var i = 0; i < texts.length; i++) {
                            var offset = getTextOffset(texts, i);
                            if (texts[i] === "" && offset < cells.length && offset >= 0) {
                                cells[offset].isEmpty = false;
                            }
                            for (var j = offset; j < offset + texts[i].length; j++) {
                                if ((j - offset) < texts[i].length && j < cells.length && j >= 0) {
                                    cells[j].text(texts[i][j - offset]);
                                    cells[j].isEmpty = false;
                                }
                            }
                        }
                    };
                    CharacterCombHelper.distributionEmptySpace = function (emptySpace, vertical, textAlignment) {
                        if (vertical && textAlignment.indexOf("Top") !== -1 || !vertical && textAlignment.indexOf("Left") !== -1)
                            return 0;
                        if (vertical && textAlignment.indexOf("Middle") !== -1 || !vertical && textAlignment.indexOf("Center") !== -1)
                            return emptySpace / 2;
                        return emptySpace;
                    };
                    CharacterCombHelper.getHorizontalVerticalByText = function (multiline, wordwrap, text, horizontal, vertical) {
                        var stringLengths = text.split("\n").map(function (str) { return str.length; });
                        var _maxLength = Math.max.apply(Math, stringLengths);
                        var _horizontal = Math.min(text.length, horizontal);
                        var _vertical = vertical;
                        if (!multiline && !wordwrap) {
                            _vertical = 1;
                            _horizontal = text.length;
                        }
                        else if (!multiline && wordwrap) {
                            _vertical = Math.ceil(text.length / _horizontal);
                        }
                        else if (multiline && wordwrap) {
                            _horizontal = Math.min(_horizontal, _maxLength);
                            _vertical = 0;
                            stringLengths.forEach(function (length) { return _vertical += (length ? Math.ceil(length / _horizontal) : 1); });
                        }
                        else if (multiline && !wordwrap) {
                            _vertical = stringLengths.length;
                            _horizontal = _maxLength;
                        }
                        return { horizontal: _horizontal, vertical: _vertical };
                    };
                    return CharacterCombHelper;
                }());
                Internal.CharacterCombHelper = CharacterCombHelper;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Controls) {
                var ControlsFactory = (function (_super) {
                    __extends(ControlsFactory, _super);
                    function ControlsFactory(fieldListProvider) {
                        if (fieldListProvider === void 0) { fieldListProvider = ko.observable(null); }
                        var _this = _super.call(this) || this;
                        _this.fieldListProvider = fieldListProvider;
                        _this._beforePrintPrintOnPage = ["BeforePrint", "PrintOnPage"];
                        _this._beforePrint = ["BeforePrint"];
                        _this._expressionWrapper = new Internal.ExpressionWrapper(Designer.Utils.DataBindingMode, _this.fieldListProvider);
                        return _this;
                    }
                    ControlsFactory.prototype.dispose = function () {
                        var _this = this;
                        this._expressionWrapper.dispose();
                        this._expressionWrapper = null;
                        Object.keys(this.controlsMap).forEach(function (x) {
                            delete _this.controlsMap[x];
                        });
                        this.fieldListProvider = null;
                    };
                    ControlsFactory.prototype._registerCommonExpressions = function (controlType) {
                        this.setExpressionBinding(controlType, "Text", this._beforePrintPrintOnPage);
                        this.setExpressionBinding(controlType, "Visible", this._beforePrintPrintOnPage);
                        this.setExpressionBinding(controlType, "NavigateUrl", this._beforePrint);
                        this.setExpressionBinding(controlType, "Bookmark", this._beforePrint);
                        this.setExpressionBinding(controlType, "Tag", this._beforePrint);
                        this.setExpressionBinding(controlType, "LeftF", this._beforePrint, "Layout");
                        this.setExpressionBinding(controlType, "TopF", this._beforePrint, "Layout");
                        this.setExpressionBinding(controlType, "WidthF", this._beforePrint, "Layout");
                        this.setExpressionBinding(controlType, "HeightF", this._beforePrint, "Layout");
                        this.setExpressionBinding(controlType, "StyleName", this._beforePrint);
                        this.setExpressionBinding(controlType, "ForeColor", this._beforePrintPrintOnPage, "Appearance");
                        this.setExpressionBinding(controlType, "BackColor", this._beforePrintPrintOnPage, "Appearance");
                        this.setExpressionBinding(controlType, "BorderColor", this._beforePrintPrintOnPage, "Appearance");
                        this.setExpressionBinding(controlType, "Borders", this._beforePrintPrintOnPage, "Appearance");
                        this.setExpressionBinding(controlType, "BorderWidth", this._beforePrintPrintOnPage, "Appearance");
                        this.setExpressionBinding(controlType, "BorderDashStyle", this._beforePrintPrintOnPage, "Appearance");
                        this.setExpressionBinding(controlType, "TextAlignment", this._beforePrintPrintOnPage, "Appearance");
                        this.setExpressionBinding(controlType, "Font", this._beforePrintPrintOnPage, "Appearance", ["Name", "Size", "Italic", "Strikeout", "Bold", "Underline"]);
                        this.setExpressionBinding(controlType, "Padding", this._beforePrintPrintOnPage, "Appearance", ["Left", "Right", "Top", "Bottom"]);
                    };
                    ControlsFactory.prototype._registerExtensions = function (controlType, metadata) {
                        var parentType = metadata && metadata.parentType || controlType;
                        this._registerCommonExpressions(controlType);
                        switch (parentType) {
                            case "XRCheckBox":
                                this.setExpressionBinding(controlType, "CheckState", this._beforePrintPrintOnPage);
                                break;
                            case "XRPictureBox":
                                this.setExpressionBinding(controlType, "ImageSource", this._beforePrintPrintOnPage);
                                this.setExpressionBinding(controlType, "ImageUrl", this._beforePrintPrintOnPage);
                                this.hideExpressionBindings(controlType, "Font", "ForeColor", "Text", "TextAlignment");
                                break;
                            case "XRBarCode":
                                this.setExpressionBinding(controlType, "BinaryData", this._beforePrint);
                                break;
                            case "XRGauge":
                                this.hideExpressionBindings(controlType, "Text", "TextAlignment", "Font", "ForeColor");
                                this.setExpressionBinding(controlType, "TargetValue", this._beforePrint);
                                this.setExpressionBinding(controlType, "ActualValue", this._beforePrint);
                                this.setExpressionBinding(controlType, "Minimum", this._beforePrint);
                                this.setExpressionBinding(controlType, "Maximum", this._beforePrint);
                                break;
                            case "XRCharacterComb":
                                this.hideExpressionBindings(controlType, "Padding");
                                break;
                            case "TopMarginBand":
                            case "BottomMarginBand":
                            case "DetailReportBand":
                            case "DetailBand":
                            case "SubBand":
                            case "GroupHeaderBand":
                            case "GroupFooterBand":
                            case "PageHeaderBand":
                            case "ReportHeaderBand":
                            case "ReportFooterBand":
                                this.hideExpressionBindings(controlType, "Bookmark", "NavigateUrl", "Text", "WidthF", "LeftF", "TopF");
                                this.setExpressionBinding(controlType, "Visible", this._beforePrint);
                                break;
                            case "XRSubreport":
                                this.setExpressionBinding(controlType, "Visible", this._beforePrint);
                                this.hideExpressionBindings(controlType, "Bookmark", "NavigateUrl", "Padding", "StyleName");
                                this.hideExpressionBindings(controlType, "BackColor", "BorderColor", "BorderWidth", "BorderDashStyle", "Borders", "Font", "ForeColor", "TextAlignment", "Tag", "Text", "NavigateUrl");
                                break;
                            case "XRCrossBandBox":
                                this.hideExpressionBindings(controlType, "Bookmark", "NavigateUrl", "Text", "BackColor", "Font", "Padding", "TextAlignment");
                                this.hideExpressionBindings(controlType, "ForeColor", "Visible");
                                break;
                            case "XRCrossBandLine":
                                this.hideExpressionBindings(controlType, "Bookmark", "NavigateUrl", "Text", "BackColor", "Font", "Padding", "TextAlignment");
                                this.hideExpressionBindings(controlType, "BorderColor", "BorderDashStyle", "Borders", "BorderWidth", "Visible");
                                break;
                            case "XRChart":
                                this.hideExpressionBindings(controlType, "Text", "Font", "ForeColor", "TextAlignment");
                                break;
                            case "XRLine":
                                this.hideExpressionBindings(controlType, "Font", "Text", "TextAlignment", "NavigateUrl", "Bookmark");
                                break;
                            case "XRPivotGrid":
                                this.setExpressionBinding(controlType, "Visible", this._beforePrint);
                                this.hideExpressionBindings(controlType, "BackColor", "BorderColor", "Borders", "BorderDashStyle", "BorderWidth", "Font", "ForeColor", "Padding", "TextAlignment", "Text", "NavigateUrl", "StyleName");
                                break;
                            case "XRPageBreak":
                                this.setExpressionBinding(controlType, "Visible", this._beforePrint);
                                this.hideExpressionBindings(controlType, "BackColor", "BorderColor", "Borders", "BorderDashStyle", "BorderWidth", "Font", "ForeColor", "Padding", "TextAlignment", "Tag", "Text", "NavigateUrl", "LeftF", "WidthF", "HeightF", "Bookmark", "StyleName");
                                break;
                            case "XRPageInfo":
                                this.hideExpressionBindings(controlType, "Text");
                                break;
                            case "XRPanel":
                                this.hideExpressionBindings(controlType, "Font", "ForeColor", "Text", "TextAlignment");
                                break;
                            case "XRRichText":
                                this.hideExpressionBindings(controlType, "Text");
                                this.setExpressionBinding(controlType, "Rtf", this._beforePrint);
                                this.setExpressionBinding(controlType, "Html", this._beforePrint);
                                break;
                            case "XRShape":
                                this.hideExpressionBindings(controlType, "Font", "TextAlignment", "Text");
                                this.setExpressionBinding(controlType, "FillColor", this._beforePrint, "Appearance");
                                break;
                            case "XRSparkline":
                                this.hideExpressionBindings(controlType, "Text", "Font", "TextAlignment", "ForeColor");
                                break;
                            case "XRTableOfContents":
                                this.hideExpressionBindings(controlType, "NavigateUrl", "Text", "TextAlignment", "Bookmark", "Font", "LeftF", "WidthF");
                                break;
                            case "XRTableRow":
                                this.hideExpressionBindings(controlType, "LeftF", "TopF", "WidthF", "Text", "NavigateUrl", "Bookmark");
                                break;
                            case "XRTableCell":
                                this.hideExpressionBindings(controlType, "LeftF", "TopF", "HeightF");
                                break;
                            case "XRTable":
                                this.hideExpressionBindings(controlType, "Text", "NavigateUrl");
                                break;
                            case "XRZipCode":
                                this.hideExpressionBindings(controlType, "Font", "TextAlignment");
                                break;
                            case "DevExpress.XtraReports.UI.XtraReport":
                                this.hideExpressionBindings(controlType, "StyleName", "Text", "NavigateUrl");
                                this.setExpressionBinding(controlType, "Bookmark", this._beforePrint);
                                this.hideExpressionBindings(controlType, "LeftF", "TopF", "WidthF", "HeightF");
                                break;
                        }
                    };
                    ControlsFactory.prototype.registerControl = function (typeName, metadata) {
                        _super.prototype.registerControl.call(this, typeName, metadata);
                        this._registerExtensions(typeName, metadata);
                    };
                    ControlsFactory.prototype._createExpressionObject = function (typeName, expressions, path, summaryRunning) {
                        return this._expressionWrapper.createExpressionsObject(typeName, expressions, path, summaryRunning);
                    };
                    ControlsFactory.prototype.setExpressionBinding = function (controlType, propertyName, events, group, objectProperties) {
                        this._expressionWrapper.setPropertyDescription(controlType, propertyName, events, objectProperties, group);
                    };
                    ControlsFactory.prototype.setPropertyDescription = function (controlType, propertyName, events, group, objectProperties) {
                        return this.setExpressionBinding(controlType, propertyName, events, group, objectProperties);
                    };
                    ControlsFactory.prototype.setLocalizationIdForExpression = function (propertyName, localizationId) {
                        this._expressionWrapper.setLocalizationId(propertyName, localizationId);
                    };
                    ControlsFactory.prototype.hideExpressionBindings = function (type) {
                        var propertyNames = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            propertyNames[_i - 1] = arguments[_i];
                        }
                        var _a;
                        (_a = this._expressionWrapper).hidePropertyDescriptions.apply(_a, [type].concat(propertyNames));
                    };
                    ControlsFactory.prototype.hidePropertyDescriptions = function (type) {
                        var propertyNames = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            propertyNames[_i - 1] = arguments[_i];
                        }
                        return this.hideExpressionBindings.apply(this, [type].concat(propertyNames));
                    };
                    ControlsFactory.prototype.inheritControl = function (parentType, extendedOptions) {
                        var parentInfo = this.getControlInfo(parentType);
                        var copyParentSerializationsInfo = $.extend(true, [], parentInfo.info);
                        var newInfo = [].concat(copyParentSerializationsInfo, extendedOptions.info || []);
                        var newPopularProperties = [].concat(parentInfo.popularProperties, extendedOptions.popularProperties || []);
                        return $.extend({}, parentInfo, extendedOptions, {
                            parentType: parentType,
                            info: newInfo,
                            popularProperties: newPopularProperties
                        });
                    };
                    ControlsFactory.prototype.createPopularBindingInfo = function (options, isExpression) {
                        if (isExpression === void 0) { isExpression = true; }
                        return Utils.createPopularBindingInfo(options, isExpression);
                    };
                    return ControlsFactory;
                }(DevExpress.Analytics.Utils.ControlsFactory));
                Controls.ControlsFactory = ControlsFactory;
            })(Controls = Designer.Controls || (Designer.Controls = {}));
            (function (Internal) {
                var DataSourceHelper = (function (_super) {
                    __extends(DataSourceHelper, _super);
                    function DataSourceHelper(objects, dataSourceRefs, availableDataSources) {
                        var _this = _super.call(this) || this;
                        _this.usedDataSources = ko.observableArray();
                        _this.allDataSources = ko.observableArray();
                        _this.usedDataSources.push({ ref: "none", name: "none", specifics: "none", data: null, dataSerializer: null });
                        _this._objects = objects;
                        for (var i = 0; i < objects().length; i++) {
                            var currentObject = objects()[i];
                            var ref = currentObject["_model"]["@Ref"];
                            var dataSourceRef = dataSourceRefs.filter(function (ds) { return ds.ref === ref; })[0];
                            if (dataSourceRef) {
                                var currentDataSourceInfo = {
                                    ref: ref,
                                    data: currentObject,
                                    name: dataSourceRef.name,
                                    isSqlDataSource: dataSourceRef.isSqlDataSource,
                                    isJsonDataSource: dataSourceRef.isJsonDataSource,
                                    dataSerializer: dataSourceRef.dataSerializer
                                };
                                currentObject["dataSourceInfo"] = currentDataSourceInfo;
                                _this._addUsedDataSource(currentDataSourceInfo);
                            }
                        }
                        ;
                        var self = _this;
                        _this._disposables.push(objects.subscribe(function (changes) {
                            for (var index = 0; index < changes.length; index++) {
                                if (!changes[index].value["dataSourceInfo"])
                                    return;
                                if (changes[index].status === "added") {
                                    self._addUsedDataSource(changes[index].value["dataSourceInfo"]);
                                }
                                else if (changes[index].status === "deleted") {
                                    var dataSourceInfo = self.findDataSourceInfo(changes[index].value);
                                    if (dataSourceInfo) {
                                        _this.usedDataSources.remove(dataSourceInfo);
                                        _this.allDataSources.remove(dataSourceInfo);
                                    }
                                }
                            }
                        }, null, "arrayChange"));
                        _this.availableDataSources = (availableDataSources || []).map(function (object) {
                            return $.extend({}, object, { data: new Data.ObjectStorageItem(object.data, function () { return _this; }) });
                        });
                        _this.allDataSources.push.apply(_this.allDataSources, _this.availableDataSources);
                        return _this;
                    }
                    DataSourceHelper.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this._objects = null;
                        this.availableDataSources.splice(0);
                        this.usedDataSources([]);
                        this.allDataSources([]);
                    };
                    DataSourceHelper.prototype.getDataSourcePath = function (dataSource) {
                        var dataSourceInfo = dataSource && this.findDataSourceInfo(dataSource);
                        if (dataSourceInfo) {
                            return dataSourceInfo.id || dataSourceInfo.ref;
                        }
                        else {
                            return "";
                        }
                    };
                    DataSourceHelper.prototype._findDataSourceInfo = function (name, collection) {
                        return collection().filter(function (info) { return info.name === name; })[0];
                    };
                    DataSourceHelper.prototype._getDataSourceInfo = function (name) {
                        var result = this._findDataSourceInfo(name, this.usedDataSources);
                        if (!result) {
                            var resultSource = this._findDataSourceInfo(name, this.allDataSources);
                            if (resultSource) {
                                result = this._addDataSource(resultSource, resultSource.data);
                            }
                        }
                        return result;
                    };
                    DataSourceHelper.prototype._getDataSourceName = function (dataSource) {
                        var dataSourceInfo = this.findDataSourceInfo(dataSource);
                        return dataSourceInfo && dataSourceInfo.name;
                    };
                    DataSourceHelper.prototype._addUsedDataSource = function (result) {
                        this.usedDataSources.splice(this.usedDataSources().length - 1, 0, result);
                        this.allDataSources.push(result);
                    };
                    DataSourceHelper.prototype._addDataSource = function (dataSource, data) {
                        if (!dataSource.name) {
                            throw new Error("dataSource name is undefined or null (ref=" + dataSource.ref + ", id=" + dataSource.id + ")");
                        }
                        var dataSourceName = DevExpress.Analytics.Internal.getUniqueNameForNamedObjectsArray(this.allDataSources(), DevExpress.Analytics.Internal.replaceInvalidSymbols(dataSource.name));
                        var newData = data;
                        if (this._objects().indexOf(data) === -1) {
                            newData = data.clone();
                            newData["dataSourceInfo"] = $.extend({}, dataSource, { name: dataSourceName, data: newData });
                            newData["name"] = ko.observable(dataSourceName);
                            this._objects.push(newData);
                        }
                        return this.findDataSourceInfo(newData);
                    };
                    DataSourceHelper.prototype.addDataSource = function (dataSourceInfo) {
                        var _this = this;
                        var data = (dataSourceInfo.data instanceof Data.ObjectItem) ? dataSourceInfo.data : Data.ObjectItem.createNew(dataSourceInfo.data, function () { return _this; });
                        return this._addDataSource(dataSourceInfo, data).data;
                    };
                    DataSourceHelper.prototype.removeDataSource = function (dataSourceInfo) {
                        this._objects.remove(dataSourceInfo.data);
                    };
                    DataSourceHelper.prototype.dataSourceValue = function (value, undoEngine) {
                        var _this = this;
                        var dataSourceValue = ko.pureComputed({
                            read: function () {
                                return _this._getDataSourceName(value());
                            },
                            write: function (val) {
                                var _undoEngine = undoEngine && undoEngine();
                                _undoEngine && _undoEngine.start();
                                var newDataSource = _this._getDataSourceInfo(val);
                                if (DataSourceHelper._assignValueInTimeout) {
                                    setTimeout(function () {
                                        value(newDataSource && newDataSource.data);
                                        _undoEngine && _undoEngine.end();
                                    }, 1);
                                }
                                else {
                                    value(newDataSource && newDataSource.data);
                                    _undoEngine && _undoEngine.end();
                                }
                            }
                        });
                        this._disposables.push(dataSourceValue);
                        return dataSourceValue;
                    };
                    DataSourceHelper.prototype.dataSourceDisplayExpr = function (dataSource) {
                        return (!dataSource || !dataSource.data) ? DevExpress.Analytics.Internal.localizeNoneString("none") : dataSource.name;
                    };
                    DataSourceHelper.prototype.mergedDataSources = function () {
                        var _this = this;
                        var dataSources = this.usedDataSources().slice(0, -1);
                        for (var i = this.availableDataSources.length - 1; i >= 0; i--) {
                            if (!DevExpress.Analytics.Internal.findFirstItemMatchesCondition(dataSources, function (item) { return item.name === _this.availableDataSources[i].name; })) {
                                dataSources.unshift(this.availableDataSources[i]);
                            }
                        }
                        return dataSources;
                    };
                    DataSourceHelper.prototype.findDataSourceInfo = function (dataSource) {
                        return this.usedDataSources().filter(function (info) { return info.data === dataSource; })[0];
                    };
                    DataSourceHelper.prototype.findDataSourceInfoByID = function (id) {
                        return this.usedDataSources().filter(function (info) { return info.id === id; })[0];
                    };
                    DataSourceHelper.prototype.findDataSourceInfoByRef = function (ref) {
                        return this.usedDataSources().filter(function (info) { return info.ref === ref; })[0];
                    };
                    DataSourceHelper.prototype.findDataSourceInfoByName = function (name) {
                        return this.usedDataSources().filter(function (item) { return item.name === name; })[0];
                    };
                    DataSourceHelper.defaultReportExtensionKey = "DataSerializationExtension";
                    DataSourceHelper._assignValueInTimeout = true;
                    return DataSourceHelper;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.DataSourceHelper = DataSourceHelper;
                var DesignControlsHelper = (function (_super) {
                    __extends(DesignControlsHelper, _super);
                    function DesignControlsHelper(target, selection) {
                        return _super.call(this, target, [{
                                added: function (control) { },
                                deleted: function (control) { control.surface === selection.focused() && selection.focused(DevExpress.Analytics.Internal.findNextSelection(control.surface)); }
                            }], ["controls", "bands", "crossBandControls", "rows", "cells", "fields", "styles", "parameters", "formattingRuleSheet", "components"]) || this;
                    }
                    DesignControlsHelper.prototype.getNameProperty = function (model) {
                        if (model instanceof Data.Parameter)
                            return model.parameterName;
                        return _super.prototype.getNameProperty.call(this, model);
                    };
                    DesignControlsHelper.prototype._setName = function (value) {
                        if (value !== this.target) {
                            _super.prototype._setName.call(this, value);
                        }
                    };
                    return DesignControlsHelper;
                }(DevExpress.Analytics.Internal.DesignControlsHelper));
                Internal.DesignControlsHelper = DesignControlsHelper;
                var Locker = (function () {
                    function Locker() {
                        var _this = this;
                        this.lock = function (action) {
                            if (!_this.isUpdate) {
                                _this.isUpdate = true;
                                action();
                                _this.isUpdate = false;
                            }
                        };
                        this.isUpdate = false;
                    }
                    return Locker;
                }());
                Internal.Locker = Locker;
                Internal.reportStorageWebIsRegister = false;
                Internal.limitation = false;
                var orig_optionValuesEqual = DevExpress.ui.dxSelectBox.prototype["_optionValuesEqual"];
                DevExpress.ui.dxSelectBox["redefine"]({
                    _optionValuesEqual: function (optionName, oldValue, newValue) {
                        if (optionName === "value" && (oldValue instanceof DevExpress.Analytics.Elements.ElementViewModel) && (newValue instanceof DevExpress.Analytics.Elements.ElementViewModel)) {
                            return oldValue === newValue;
                        }
                        return orig_optionValuesEqual.apply(this, arguments);
                    }
                });
                function _createReportDesigner(element, data, callbacks, localizationSettings, knownEnums, designerHandlerUri, previewHandlerUri, rtl, applyBindings) {
                    if (applyBindings === void 0) { applyBindings = true; }
                    var selection = new DevExpress.Analytics.Internal.SurfaceSelection();
                    var initializer = new Internal.ReportDesignerInitializer({
                        allowMDI: data.allowMDI,
                        reportStorageWebIsRegister: data.reportStorageWebIsRegister,
                        callbacks: callbacks,
                        rtl: rtl,
                        selection: selection,
                        availableDataSources: data.availableDataSources,
                        knownEnums: knownEnums,
                        reportUrl: data.reportUrl,
                        state: data.state
                    });
                    data.wizardSettings = Utils.ReportWizardSettings.prototype.createDefault(data.wizardSettings);
                    return initializer
                        .applyUri({ reportDesignerUri: designerHandlerUri, previewUri: previewHandlerUri })
                        .initBindingMode(data.dataBindingMode, data.convertBindingsToExpressions)
                        .addLocalization(localizationSettings && localizationSettings.localization)
                        .applyLocalizationToDevExtreme(localizationSettings && localizationSettings.currentCulture)
                        .subscribeIncomeReport(data.report, data.reportUrl, data.dataSourceRefs)
                        .addFlagsAndInitProperties(element)
                        .addReportUrls(data.subreports)
                        .addPreview({
                        callbacks: callbacks.preview,
                        element: element,
                        handlerUri: previewHandlerUri,
                        parametersInfo: { knownEnums: knownEnums },
                        rtl: rtl
                    })
                        .initializeCalculatedFieldsSource()
                        .initializeFieldListItemsExtenders()
                        .initializeParameters()
                        .initializeFieldListProvider()
                        .initializeReportItemsProvider()
                        .initializeDataBindingsProvider()
                        .initializeDisplayNameProvider()
                        .initializeExpressionDisplayNameProvider()
                        .initializeDataSourceHelper()
                        .registerControls(data.dataBindingMode, initializer.buildingModel.reportItemsProvider)
                        .runCustomizeToolboxEvent()
                        .addSelection()
                        .addToolboxItems(function () { return DevExpress.Analytics.Internal.getToolboxItems(Utils.controlsFactory.controlsMap); })
                        .addControlProperties(Object.keys(Widgets.groups).reduce(function (editors, groupName) {
                        if (groupName !== "Styles")
                            editors = editors.concat(Widgets.groups[groupName].info);
                        else
                            editors.push(Controls.Metadata.stylesObj);
                        return editors;
                    }, []), Widgets.groups)
                        .addContextActions()
                        .addPopularProperties(Utils.controlsFactory)
                        .addControlsHelper()
                        .setControlsHelperFilter(Internal.isNotParameter)
                        .addProcessErrorCallback()
                        .initCultureInfo(data.cultureInfoList)
                        .updateFont(data.cultureInfoList && data.cultureInfoList.fontSet)
                        .initFormatStringPatterns(data.formatStringData)
                        .onContextChanged(data.subreports)
                        .addMenu()
                        .addInlineTextEdit()
                        .addReportDialogs(function (settings) {
                        var reportUrls = initializer.buildingModel.reportUrls;
                        settings.createOpenReportDialog(reportUrls, initializer.buildingModel.navigateByReports);
                        settings.createSaveReportDialog(reportUrls);
                        settings.createSaveReportDialogLight();
                    })
                        .addWizards({
                        sql: ko.observableArray(data.wizardConnections && data.wizardConnections.sql),
                        json: ko.observableArray(data.wizardConnections && data.wizardConnections.json)
                    }, data.wizardSettings, function (settings) {
                        var model = initializer.buildingModel;
                        settings.createMultipleQueriesWizardCallbacks(initializer.buildingModel.dataBindingsProvider);
                        settings.createSqlDataSourceWizard(data.disableCustomSql, initializer.buildingModel.dataBindingsProvider);
                        settings.createSqlDataSourceEditor({
                            dataSourceHelper: model.dataSourceHelper,
                            fieldListProvider: model.fieldListProvider,
                            model: model.model,
                            dataSourceWizard: settings.dataSourceWizard,
                            undoEngine: model.undoEngine
                        });
                        settings.createMultiQueryDataSourceWizard(data.disableCustomSql, undefined, data.canCreateJsonDataSource);
                        settings.createReportWizard({
                            data: data,
                            dataSourceHelper: model.dataSourceHelper,
                            fieldListProvider: model.fieldListProvider,
                            isDirty: model.isDirty,
                            isLoading: model.isLoading,
                            model: model.model,
                            navigation: model.navigateByReports,
                            state: function () { return initializer.reportContext() && initializer.reportContext().state() || initializer.buildingModel.state; },
                            undoEngine: model.undoEngine
                        });
                    })
                        .initializeFieldListActionProviders()
                        .addTabPanel()
                        .addDefaultAddons()
                        .tryAddSqlDataSourceEditorAddon()
                        .tryAddScriptEditorAddon(data.isScriptsDisabled)
                        .addActionLists()
                        .addStylesProjection()
                        .addFormattingRulesProjection()
                        .addReportExplorerProvider()
                        .addControlsProjection()
                        .addBandsProjection()
                        .addParts()
                        .addStaticContext()
                        .tryApplyBindings(applyBindings, element)
                        .initializeUIEffects(applyBindings, element)
                        .addOpenReportMethod()
                        .getModel();
                }
                function createReportDesigner(element, data, callbacks, localizationSettings, knownEnums, designerHandlerUri, previewHandlerUri, rtl, applyBindings) {
                    if (applyBindings === void 0) { applyBindings = true; }
                    var localizationPromises = [];
                    callbacks && callbacks.designer && callbacks.designer.customizeLocalization && callbacks.designer.customizeLocalization(localizationPromises);
                    return DevExpress.Analytics.Internal.resolveFromPromises(localizationPromises, function () {
                        return _createReportDesigner(element, data, callbacks, localizationSettings, knownEnums, designerHandlerUri, previewHandlerUri, rtl, applyBindings);
                    }).done(function (designerModel) {
                        if (callbacks && callbacks.designer && callbacks.designer.customizeWizard) {
                            callbacks.designer.customizeWizard("ReportWizard", designerModel.wizard);
                            callbacks.designer.customizeWizard("SingleQueryDataSourceWizard", designerModel.dataSourceWizard);
                            if (designerModel.multiQueryDataSourceWizard) {
                                callbacks.designer.customizeWizard("DataSourceWizard", designerModel.multiQueryDataSourceWizard);
                            }
                        }
                    });
                }
                Internal.createReportDesigner = createReportDesigner;
                function createReportDesignerFromModel(model, element, callbacks, applyBindings) {
                    if (!model)
                        return;
                    Internal.limitation = !!model.limitation;
                    Chart["limitation"] = Internal.limitation;
                    if (model.dataSources && model.dataSourcesData) {
                        for (var i = 0; i < model.dataSources.length; i++) {
                            var dataSource = model.dataSources[i];
                            dataSource.data = model.dataSourcesData[i];
                        }
                    }
                    if (!model.reportModel) {
                        model.reportModel = Controls.SubreportViewModel.defaultReport;
                    }
                    var getRootKeyName = function (obj) {
                        for (var prop in obj) {
                            if (obj.hasOwnProperty(prop)) {
                                return prop;
                            }
                        }
                        return null;
                    };
                    DevExpress.Analytics.Internal.initGlobalize(model);
                    model.reportModelRootName = getRootKeyName(model.reportModel);
                    var dataReport = {};
                    dataReport[model.reportModelRootName] = {
                        "@ControlType": model.reportModel[model.reportModelRootName]["@ControlType"]
                    };
                    var formatStringData = { customPatterns: {}, standardPatterns: {} };
                    if (model.formatStringData) {
                        model.formatStringData.customPatterns.forEach(function (item) {
                            formatStringData.customPatterns[item.Key] = item.Value;
                        });
                        model.formatStringData.standardPatterns.forEach(function (item) {
                            formatStringData.standardPatterns[item.Key] = item.Value;
                        });
                    }
                    var data = {
                        report: ko.observable(dataReport),
                        reportUrl: ko.observable(model.reportUrl),
                        availableDataSources: model.dataSources,
                        allowMDI: model.allowMDI,
                        dataSourceRefs: model.dataSourceRefs,
                        dataBindingMode: model.dataBindingMode || "Expressions",
                        convertBindingsToExpressions: model.convertBindingsToExpressions || Internal.PromptBoolean.Prompt,
                        subreports: model.subreports,
                        cultureInfoList: model.cultureInfoList,
                        formatStringData: formatStringData,
                        state: {
                            reportExtensions: model.reportExtensions
                        },
                        isReportServer: model.internalSettings && model.internalSettings.isReportServer,
                        wizardSettings: model.wizardSettings,
                        wizardConnections: model.wizardConnections,
                        disableCustomSql: model.disableCustomSql,
                        isScriptsDisabled: !model.scriptsEnabled,
                        canCreateJsonDataSource: model.canCreateJsonDataSource,
                        reportStorageWebIsRegister: model.reportStorageWebIsRegister
                    };
                    if (model.queryBuilderHandlerUri)
                        DevExpress.QueryBuilder.Utils.HandlerUri = model.queryBuilderHandlerUri;
                    return createReportDesigner(element, data, callbacks || {}, model, model.knownEnums, model.handlerUri, model.viewerHandlerUri, model.rtl, applyBindings)
                        .done(function (designerModel) {
                        setTimeout(function () {
                            data.report(model.reportModel);
                            designerModel.isLoading && designerModel.isLoading(false);
                        }, 1);
                    });
                }
                Internal.createReportDesignerFromModel = createReportDesignerFromModel;
                var WizardRunner = (function (_super) {
                    __extends(WizardRunner, _super);
                    function WizardRunner(_menuOptions) {
                        var _this = _super.call(this) || this;
                        _this._menuOptions = _menuOptions;
                        _this._currentWizard = null;
                        _this._wizards = {};
                        _this._disposables.push(_this._menuOptions.collapsed.subscribe(function (newVal) {
                            if (!newVal) {
                                _this._currentWizard.close();
                                _this._currentWizard = null;
                            }
                        }));
                        return _this;
                    }
                    WizardRunner.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this._currentWizard = null;
                        this._wizards = {};
                    };
                    WizardRunner.prototype.registerWizard = function (wizardType, start, close) {
                        this._wizards[wizardType] = { start: start, close: close };
                    };
                    WizardRunner.prototype.runWizard = function (wizardType) {
                        this._currentWizard && this._currentWizard.close();
                        this._currentWizard = this._wizards[wizardType];
                        this._currentWizard && this._currentWizard.start();
                    };
                    return WizardRunner;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.WizardRunner = WizardRunner;
                function patchRequest(request, dataSources, state) {
                    request.state = state;
                    var dataSource = DevExpress.Analytics.Internal.findFirstItemMatchesCondition(dataSources, function (ds) { return (request.id && ds.id === request.id) || (request.ref && ds.ref === request.ref); });
                    if (dataSource && dataSource.data) {
                        if (dataSource.data instanceof Data.DataFederationDataSource) {
                            var innerDataSources = dataSource.data["serializableSourceMap"]().reduce(function (result, x) {
                                if (result.indexOf(x.dataSource() === -1))
                                    result.push(x.dataSource());
                                return result;
                            }, ko.observableArray([]));
                            var linkedDataSources = new DevExpress.Analytics.Utils.ModelSerializer().serialize({
                                dataSources: innerDataSources,
                                dataSource: dataSource.data,
                                getInfo: function () {
                                    return [
                                        { propertyName: "dataSources", modelName: "dataSources", array: true },
                                        { propertyName: "dataSource", modelName: "dataSource" }
                                    ];
                                }
                            });
                            request.dataSource = JSON.stringify(linkedDataSources.dataSource);
                            request["dataSources"] = innerDataSources().map(function (x) { return JSON.stringify(new DevExpress.Analytics.Utils.ModelSerializer().serialize(x)); });
                        }
                        else
                            request.dataSource = JSON.stringify(new DevExpress.Analytics.Utils.ModelSerializer().serialize(dataSource.data));
                    }
                }
                Internal.patchRequest = patchRequest;
                var FieldListDataSourcesHelper = (function () {
                    function FieldListDataSourcesHelper() {
                        var _this = this;
                        this._fieldListCache = {};
                        this._dataSourceSubscriptions = [];
                        this._usedDataSourceSubscription = null;
                        this._cacheIsClearNotificicator = ko.observable();
                        this.dataSourceHelper = ko.observable();
                        this.fieldListDataSources = ko.observableArray([]);
                        this._renameDataSourceStrategy = new Internal.RenameDataSourceStrategy(this.dataSourceHelper, function () { return _this.fieldListDataSources.valueHasMutated(); });
                    }
                    FieldListDataSourcesHelper.prototype.dispose = function () {
                        this._usedDataSourceSubscription && this._usedDataSourceSubscription.dispose();
                        this._usedDataSourceSubscription = null;
                        this._clearDataSourceCache();
                        this.fieldListDataSources([]);
                        this.dataSourceHelper(null);
                    };
                    FieldListDataSourcesHelper.prototype._clearDataSourceCache = function (dataSourceRef) {
                        for (var prop in this._fieldListCache) {
                            if (dataSourceRef === undefined || prop.split('.')[0] === dataSourceRef)
                                delete this._fieldListCache[prop];
                        }
                        dataSourceRef !== undefined && this._cacheIsClearNotificicator.notifySubscribers();
                    };
                    FieldListDataSourcesHelper.prototype._subscribeDataSource = function (dataSource) {
                        var _this = this;
                        if (dataSource.data && dataSource.data.base64) {
                            this._dataSourceSubscriptions.push(dataSource.data.base64.subscribe(function (newVal) {
                                _this._clearDataSourceCache(dataSource.ref || dataSource.id);
                                _this.fieldListDataSources.notifySubscribers(_this.fieldListDataSources());
                                _this.dataSourceHelper().usedDataSources.notifySubscribers(_this.dataSourceHelper().usedDataSources());
                            }));
                        }
                    };
                    FieldListDataSourcesHelper.prototype._updateFieldListDataSources = function (usedDataSources, parameters) {
                        var _this = this;
                        if (!usedDataSources) {
                            this.fieldListDataSources(null);
                            return;
                        }
                        this._dataSourceSubscriptions.forEach(function (x) { return x.dispose(); });
                        this._dataSourceSubscriptions = [];
                        for (var prop in this._fieldListCache) {
                            if (this._fieldListCache.hasOwnProperty(prop))
                                delete this._fieldListCache[prop];
                        }
                        var dataSourcesArray = [].concat(usedDataSources);
                        if (parameters) {
                            dataSourcesArray.splice(-1, 0, { ref: "Parameters", name: "Parameters", specifics: "parameters", data: parameters, dataSerializer: null });
                        }
                        dataSourcesArray.forEach(function (item) { return _this._subscribeDataSource(item); });
                        this.fieldListDataSources(dataSourcesArray);
                    };
                    FieldListDataSourcesHelper.prototype.wrapFieldsCallback = function (fieldsCallback, state) {
                        var _this = this;
                        var cache = this._fieldListCache;
                        var dataSources = this.fieldListDataSources;
                        return function (request) {
                            if (cache) {
                                _this._cacheIsClearNotificicator();
                                if (cache[request.fullPath])
                                    return cache[request.fullPath];
                                patchRequest(request, dataSources.peek(), state());
                                if (request.dataSource)
                                    return cache[request.fullPath] = fieldsCallback(request);
                                cache[request.fullPath] = undefined;
                                return $.Deferred().reject().promise();
                            }
                            else {
                                patchRequest(request, dataSources.peek(), state());
                                return request.dataSource ? fieldsCallback(request) : $.Deferred().reject().promise();
                            }
                        };
                    };
                    FieldListDataSourcesHelper.prototype._subscribeDataSources = function (usedDataSources, model) {
                        var _this = this;
                        this._usedDataSourceSubscription = usedDataSources.subscribe(function (args) {
                            var changeSet = args[0];
                            var dataSource = changeSet.value;
                            if (changeSet.status === "added") {
                                _this._subscribeDataSource(dataSource);
                                model.components.push(new Controls.ComponentsModel(dataSource, _this._renameDataSourceStrategy));
                                _this.fieldListDataSources.splice(changeSet.index, 0, dataSource);
                            }
                            else {
                                if (dataSource.data && dataSource.data.base64) {
                                    _this._dataSourceSubscriptions[changeSet.index].dispose();
                                    _this._dataSourceSubscriptions.splice(changeSet.index, 1);
                                }
                                model.components.splice(changeSet.index, 1);
                                _this.fieldListDataSources.splice(changeSet.index, 1);
                                _this._clearDataSourceCache(dataSource.ref || dataSource.id);
                            }
                        }, null, "arrayChange");
                    };
                    FieldListDataSourcesHelper.prototype.updateDataSources = function (dsHelper, model, parameters) {
                        var _this = this;
                        this._subscribeDataSources(dsHelper.usedDataSources, model);
                        this._updateFieldListDataSources(dsHelper.usedDataSources(), parameters);
                        this.dataSourceHelper(dsHelper);
                        model.components([]);
                        model.components(dsHelper.usedDataSources()
                            .filter(function (item) { return item.specifics !== "none"; })
                            .map(function (item) { return new Controls.ComponentsModel(item, _this._renameDataSourceStrategy); }));
                    };
                    return FieldListDataSourcesHelper;
                }());
                Internal.FieldListDataSourcesHelper = FieldListDataSourcesHelper;
                var FieldListDragDropHelper = (function () {
                    function FieldListDragDropHelper(_dataBindingMode, _size) {
                        this._dataBindingMode = _dataBindingMode;
                        this._size = _size;
                        this._getItemsFromList = function (treeListItem, childCollection) {
                            var deferred = $.Deferred();
                            treeListItem.getItems().done(function (items) {
                                var simpleFields = items.filter(function (item) { return !Internal.isList(item.data); });
                                childCollection.push.apply(childCollection, simpleFields);
                                deferred.resolve();
                            });
                            return deferred.promise();
                        };
                    }
                    FieldListDragDropHelper.prototype._createTable = function (parent, items) {
                        var _this = this;
                        if (items.length === 0)
                            return null;
                        var tableSize = this._size ? [this._size.width(), this._size.height()].join(",") : "200, 23";
                        var table = parent.getControlFactory().createControl({ "@ControlType": "XRTable", "@SizeF": tableSize }, parent);
                        var tableRow = table.createChild({ "@ControlType": "XRTableRow", "@Weight": "1" });
                        items.forEach(function (item) {
                            var cell = Internal.createSimpleControl("XRTableCell", tableRow);
                            if (item.data.specifics !== "Array") {
                                Internal.assignBinding(cell, tableRow, "Text", item, _this._dataBindingMode);
                            }
                            else {
                                var path = item.data instanceof Data.Parameter ? item.path : new DevExpress.Analytics.Utils.PathRequest(item.path).path;
                                cell.addChild(Internal.createPictureBox(cell, path, _this._dataBindingMode));
                            }
                        });
                        return table;
                    };
                    FieldListDragDropHelper.prototype._getFirstLevelItems = function (treeListItems) {
                        var deferred = $.Deferred();
                        var promises = [];
                        var childCollection = [];
                        for (var i = 0; i < treeListItems.length; i++) {
                            if (!Internal.isList(treeListItems[i].data))
                                childCollection.push.apply(childCollection, [treeListItems[i]]);
                            else
                                promises.push(this._getItemsFromList(treeListItems[i], childCollection));
                        }
                        $.when.apply($, promises).done(function () {
                            deferred.resolve(childCollection);
                        });
                        return deferred.promise();
                    };
                    FieldListDragDropHelper.prototype.createTableFromListSource = function (treeListItem, parent) {
                        var _this = this;
                        var deferred = $.Deferred();
                        treeListItem.getItems().done(function (items) {
                            if (items.length === 0)
                                deferred.resolve(null);
                            var simpleFields = items.filter(function (item) { return !Internal.isList(item.data); });
                            if (simpleFields.length === 1) {
                                var control = (Internal.memberControlsMap[simpleFields.specifics] || Internal.memberControlsMap["Default"]).drop(simpleFields[0], parent, _this._dataBindingMode);
                                deferred.resolve(control);
                            }
                            else if (simpleFields.length > 1) {
                                deferred.resolve(_this._createTable(parent, simpleFields));
                            }
                            else {
                                _this.createTableFromItems(items, parent).done(function (table) { return deferred.resolve(table); });
                            }
                        });
                        return deferred.promise();
                    };
                    FieldListDragDropHelper.prototype.createTableFromItems = function (treeListItems, parent) {
                        var _this = this;
                        var deferred = $.Deferred();
                        this._getFirstLevelItems(treeListItems).done(function (items) { return deferred.resolve(_this._createTable(parent, items)); });
                        return deferred.promise();
                    };
                    return FieldListDragDropHelper;
                }());
                Internal.FieldListDragDropHelper = FieldListDragDropHelper;
                var ReportDesignerControlsHelper = (function (_super) {
                    __extends(ReportDesignerControlsHelper, _super);
                    function ReportDesignerControlsHelper(helper) {
                        var _this = _super.call(this) || this;
                        _this.getControls = function (context) { return helper() && helper().getControls(context); };
                        _this._disposables.push(_this.allControls = ko.computed(function () { return helper() && helper().allControls() || []; }));
                        return _this;
                    }
                    return ReportDesignerControlsHelper;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.ReportDesignerControlsHelper = ReportDesignerControlsHelper;
                var TextElementSizeHelper = (function () {
                    function TextElementSizeHelper() {
                        this._spaceSymbol = "&nbsp";
                    }
                    TextElementSizeHelper.prototype._$createElement = function (options, processElement) {
                        return processElement($("<div>").css(options)).appendTo($("body"));
                    };
                    TextElementSizeHelper.prototype.$createTextElement = function (text, options) {
                        return this._$createElement(options, function ($element) { return $element.text(text); });
                    };
                    TextElementSizeHelper.prototype.$createSpaceElement = function (options) {
                        var _this = this;
                        return this._$createElement(options, function ($element) { return $element.html(_this._spaceSymbol); });
                    };
                    TextElementSizeHelper.prototype.getTextContainerSize = function (text, options, increaseHeight) {
                        if (increaseHeight === void 0) { increaseHeight = 2; }
                        var $div = text !== this._spaceSymbol ? this.$createTextElement(text, options) : this.$createSpaceElement(options);
                        $div.height($div.height() + increaseHeight);
                        var rect = $div[0].getBoundingClientRect();
                        var height = Math.ceil(rect.height);
                        var width = Math.ceil(rect.width);
                        $div.remove();
                        return { width: width, height: height };
                    };
                    return TextElementSizeHelper;
                }());
                Internal.TextElementSizeHelper = TextElementSizeHelper;
                ko.bindingHandlers["dxAutoScrolling"] = {
                    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var $element = $(element);
                        var rect = null;
                        var values = valueAccessor();
                        var scrollView = DevExpress.ui.dxScrollView["getInstance"](element);
                        if (scrollView) {
                            var timeout = null, interval = null, clearTimings = function () {
                                timeout && clearTimeout(timeout);
                                interval && clearInterval(interval);
                                timeout = null;
                                interval = null;
                            }, scrolling = function (inc) {
                                timeout = setTimeout(function () {
                                    interval = setInterval(function () {
                                        var newPosition = scrollView.scrollTop() + inc;
                                        if (newPosition < 0) {
                                            newPosition = 0;
                                        }
                                        scrollView["scrollTo"](newPosition);
                                    }, 50);
                                }, 500);
                            }, move = function (event) {
                                if (values.active()) {
                                    if (!rect) {
                                        rect = element.getBoundingClientRect();
                                    }
                                    if (event.clientY <= rect.top + 30) {
                                        !timeout && scrolling(-30);
                                    }
                                    else if (event.clientY >= rect.bottom - 30) {
                                        !timeout && scrolling(30);
                                    }
                                    else {
                                        clearTimings();
                                    }
                                }
                            }, subscription = values.active.subscribe(function (newVal) {
                                rect = null;
                                clearTimings();
                            });
                            element.addEventListener("mousemove", move);
                            DevExpress.Analytics.Internal.addDisposeCallback(element, function () {
                                element.removeEventListener("mousemove", move);
                                subscription.dispose();
                            });
                        }
                    }
                };
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            var Bands;
            (function (Bands) {
                var Internal;
                (function (Internal) {
                    function sortBands(band1, band2) {
                        return Bands.BandViewModel.getBandWeight(band1) - Bands.BandViewModel.getBandWeight(band2);
                    }
                    Internal.sortBands = sortBands;
                    function setMarkerWidth(bandHolder, levelCount, currentLevel) {
                        if (currentLevel === void 0) { currentLevel = 0; }
                        if (bandHolder && bandHolder.bands().length !== 0) {
                            bandHolder.bands().forEach(function (band) {
                                band.markerWidth(Bands.BandSurface.collapsedHeight * (levelCount - currentLevel));
                                setMarkerWidth(band.bandsHolder, levelCount, currentLevel + 1);
                            });
                            bandHolder.verticalBandsContainer && bandHolder.verticalBandsContainer.markerWidth(Bands.BandSurface.collapsedHeight * (levelCount - currentLevel));
                        }
                    }
                    Internal.setMarkerWidth = setMarkerWidth;
                    function getLevelCount(bandHolder) {
                        var result = 0, maxLevelCount = 0;
                        if (!bandHolder)
                            return result;
                        if (bandHolder.bands().length !== 0) {
                            bandHolder.bands().forEach(function (band) {
                                var levelCount = getLevelCount(band.bandsHolder);
                                if (levelCount > maxLevelCount) {
                                    maxLevelCount = levelCount;
                                }
                            });
                            result = maxLevelCount + 1;
                        }
                        else if (bandHolder.verticalBandsContainer && bandHolder.verticalBandsContainer.visible) {
                            result = maxLevelCount + 1;
                        }
                        return result;
                    }
                    Internal.getLevelCount = getLevelCount;
                })(Internal = Bands.Internal || (Bands.Internal = {}));
            })(Bands = Designer.Bands || (Designer.Bands = {}));
            (function (Internal) {
                var HtmlMarkUp;
                (function (HtmlMarkUp) {
                    var TextTag = (function () {
                        function TextTag(node, inheritValues) {
                            this.node = node;
                            this.inheritValues = inheritValues;
                            this.value = null;
                            this.element = null;
                            this.hasChildNodes = false;
                            this.value = this.node.getAttribute && this.node.getAttribute(ValueConverter.ValueAttrName);
                            if (this.value)
                                this.value = this.value.trim();
                        }
                        TextTag.prototype.createElement = function () {
                            this.element = document.createTextNode(this.node.outerHTML || this.node.textContent || this.node["data"]);
                        };
                        TextTag.prototype.setProperties = function (parameters, inheritValues) { };
                        TextTag.prototype.appendTo = function (el) {
                            el.appendChild(this.element);
                        };
                        return TextTag;
                    }());
                    var SpanTag = (function (_super) {
                        __extends(SpanTag, _super);
                        function SpanTag() {
                            var _this = _super !== null && _super.apply(this, arguments) || this;
                            _this.hasChildNodes = true;
                            return _this;
                        }
                        SpanTag.prototype.createElement = function () {
                            this.element = document.createElement("span");
                            if (this.inheritValues.backcolor) {
                                this.element.style.backgroundColor = "inherit";
                            }
                        };
                        return SpanTag;
                    }(TextTag));
                    var AnchorTag = (function (_super) {
                        __extends(AnchorTag, _super);
                        function AnchorTag() {
                            var _this = _super !== null && _super.apply(this, arguments) || this;
                            _this.hasChildNodes = true;
                            return _this;
                        }
                        AnchorTag.prototype.createElement = function () {
                            this.element = document.createElement("a");
                        };
                        AnchorTag.prototype.setProperties = function () {
                            this.element.href = "javascript:void(0);";
                        };
                        return AnchorTag;
                    }(TextTag));
                    var ImageTag = (function (_super) {
                        __extends(ImageTag, _super);
                        function ImageTag() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        ImageTag.prototype.appendTo = function (el) { };
                        return ImageTag;
                    }(TextTag));
                    var SimpleTag = (function (_super) {
                        __extends(SimpleTag, _super);
                        function SimpleTag() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        SimpleTag.prototype.createElement = function () {
                            this.element = document.createElement(this.node.nodeName);
                        };
                        return SimpleTag;
                    }(SpanTag));
                    var ColorTag = (function (_super) {
                        __extends(ColorTag, _super);
                        function ColorTag() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        ColorTag.prototype.setProperties = function () {
                            this.element.style.color = DevExpress.Analytics.Utils.colorFromString(this.value)();
                        };
                        return ColorTag;
                    }(SpanTag));
                    var BackColorTag = (function (_super) {
                        __extends(BackColorTag, _super);
                        function BackColorTag() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        BackColorTag.prototype.setProperties = function () {
                            this.element.style.backgroundColor = DevExpress.Analytics.Utils.colorFromString(this.value)();
                            this.inheritValues.backcolor = true;
                        };
                        return BackColorTag;
                    }(SpanTag));
                    var SizeTag = (function (_super) {
                        __extends(SizeTag, _super);
                        function SizeTag() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        SizeTag.prototype.setProperties = function (parameters) {
                            var sizeValue;
                            var textValue = this.value;
                            if (textValue && (textValue[0] === "+" || textValue[0] === "-")) {
                                var _val = parseFloat(textValue.substr(1));
                                sizeValue = this.inheritValues.fontSize + (textValue[0] === "+" ? _val : _val * (-1));
                            }
                            else {
                                sizeValue = parseFloat(textValue);
                            }
                            if (!isNaN(sizeValue))
                                this.element.style.fontSize = sizeValue + (parameters.fontUnit || "pt");
                            else
                                sizeValue = this.inheritValues.fontSize;
                            this.inheritValues.fontSize = sizeValue;
                        };
                        return SizeTag;
                    }(SpanTag));
                    var ValueConverter = (function () {
                        function ValueConverter(_displayNameParameters) {
                            this._displayNameParameters = _displayNameParameters;
                            this._regExp = /<(<*)(\/?)(\s*\w+\s*)(=(\s*.+?\s*)|\b[^>]*)?>/gm;
                        }
                        ValueConverter.prototype._createTag = function (node, inheritValues) {
                            if (!this._checkValidTag(node.nodeName) || node.nodeName === "#text") {
                                return new TextTag(node, inheritValues);
                            }
                            else if (node.nodeName === "COLOR") {
                                return new ColorTag(node, inheritValues);
                            }
                            else if (node.nodeName === "BACKCOLOR") {
                                return new BackColorTag(node, inheritValues);
                            }
                            else if (node.nodeName === "HREF") {
                                return new AnchorTag(node, inheritValues);
                            }
                            else if (node.nodeName === "SIZE") {
                                return new SizeTag(node, inheritValues);
                            }
                            else if (node.nodeName === "IMG") {
                                return new ImageTag(node, inheritValues);
                            }
                            else if (node.nodeName !== "#text") {
                                return new SimpleTag(node, inheritValues);
                            }
                        };
                        ValueConverter.prototype._parceToXml = function (str) {
                            var matches;
                            while ((matches = this._regExp.exec(str)) !== null) {
                                if (matches.index === this._regExp.lastIndex) {
                                    this._regExp.lastIndex++;
                                }
                                var fullmatch = matches[0];
                                var escapeTag = matches[1];
                                var closingTag = matches[2] === "/" ? "/" : "";
                                var tag = matches[3];
                                var value = matches[5];
                                var replacedStr = "";
                                if (this._checkValidTag(tag) && !escapeTag) {
                                    if (value) {
                                        replacedStr = "<" + tag + " " + ValueConverter.ValueAttrName + "='" + value + "'>";
                                    }
                                    else {
                                        replacedStr = "<" + closingTag + tag + ">";
                                    }
                                }
                                else {
                                    var _fullmatch = fullmatch;
                                    if (!!escapeTag) {
                                        _fullmatch = _fullmatch.slice(escapeTag.length);
                                    }
                                    var $spanEscape = $("<span>");
                                    replacedStr = $spanEscape.text(_fullmatch)[0].innerHTML;
                                }
                                str = str.replace(fullmatch, replacedStr);
                            }
                            str = str.replace(/<nbsp>/g, '&nbsp;');
                            str = str.replace(/<br>/g, this._displayNameParameters.wordWrap ? '<br>' : '');
                            return str;
                        };
                        ValueConverter.prototype._checkValidTag = function (tag) {
                            switch (tag.toLocaleLowerCase()) {
                                case "href":
                                case "color":
                                case "backcolor":
                                case "size":
                                case "img":
                                case "image":
                                case "br":
                                case "b":
                                case "i":
                                case "u":
                                case "nbsp":
                                case "s": return true;
                            }
                            return false;
                        };
                        ValueConverter.prototype._createTree = function (treeElement, writeTo, inheritValues) {
                            var _this = this;
                            if (inheritValues === void 0) { inheritValues = { fontSize: this._displayNameParameters.fontSize || 0 }; }
                            if (treeElement.childNodes.length > 0) {
                                var childNodes = Array.prototype.slice.call(treeElement.childNodes);
                                childNodes.forEach(function (node) {
                                    var tag = _this._createTag(node, { fontSize: inheritValues.fontSize, backcolor: inheritValues.backcolor });
                                    tag.createElement();
                                    tag.setProperties(_this._displayNameParameters);
                                    tag.appendTo(writeTo);
                                    if (tag.hasChildNodes)
                                        _this._createTree(node, tag.element, tag.inheritValues);
                                });
                            }
                        };
                        ValueConverter.prototype.appendTo = function (element) {
                            if (!element)
                                return;
                            var fragment = document.createDocumentFragment();
                            var temp = document.createElement("div");
                            fragment.appendChild(temp);
                            ko.utils.setHtml(element, "");
                            ko.utils.setHtml(temp, this._parceToXml(this._displayNameParameters.text));
                            this._createTree(temp, element);
                            fragment.removeChild(temp);
                        };
                        ValueConverter.ValueAttrName = "value";
                        return ValueConverter;
                    }());
                    HtmlMarkUp.ValueConverter = ValueConverter;
                })(HtmlMarkUp = Internal.HtmlMarkUp || (Internal.HtmlMarkUp = {}));
                ko.bindingHandlers["controlDisplayName"] = {
                    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        var value = valueAccessor(), surface = ko.unwrap(value);
                        var parameters = surface.displayNameParameters();
                        var setElementText = function (value) { return $(element).text(value ? ("[" + value + "]") : ""); };
                        if (parameters.isExpression) {
                            $(element).text(parameters.text);
                            var expressionConverter = new DevExpress.Analytics.Internal.DisplayExpressionConverter(bindingContext.$root.displayNameProvider());
                            expressionConverter.toDisplayExpression(parameters.dataMember, parameters.text).done(function (result) {
                                $(element).text(result);
                            });
                        }
                        else if (parameters.dataMember) {
                            setElementText(parameters.dataMember);
                            bindingContext.$root.displayNameProvider()
                                .getDisplayName(parameters.dataSource, parameters.dataMember, parameters.dataMemberOffset, false)
                                .done(function (data) { return setElementText(data); })
                                .fail(function () { return setElementText(parameters.dataMember); });
                        }
                        else {
                            if (!parameters.allowMarkupText) {
                                $(element).text(parameters.text || "");
                            }
                            else {
                                new HtmlMarkUp.ValueConverter(parameters).appendTo(element);
                            }
                        }
                    }
                };
                ko.bindingHandlers["displayNameExtender"] = {
                    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        var value = ko.unwrap(valueAccessor());
                        var displayName = ko.observable("");
                        var displayNameLoader = ko.computed(function () {
                            if (value.dataMember()) {
                                var displayNameProvider = bindingContext.$root.displayNameProvider.peek();
                                var promise = value.path ? displayNameProvider.getDisplayNameByPath(value.path(), value.dataMember()) :
                                    displayNameProvider.getDisplayName(value.dataSource(), value.dataMember(), value.dataMemberOffset, value.includeDataSourceName);
                                promise.done(function (data) { return displayName(data); })
                                    .fail(function () { return displayName(value.dataMember()); });
                            }
                            else {
                                displayName("");
                            }
                        }).extend({ rateLimit: 0 });
                        DevExpress.Analytics.Internal.addDisposeCallback(element, function () {
                            displayNameLoader.dispose();
                        });
                        var innerBindingContext = bindingContext.extend({ $displayName: displayName });
                        ko.applyBindingsToDescendants(innerBindingContext, element);
                        return { controlsDescendantBindings: true };
                    }
                };
                ko.virtualElements.allowedBindings["displayNameExtender"] = true;
                var CalculatedFieldsSource = (function (_super) {
                    __extends(CalculatedFieldsSource, _super);
                    function CalculatedFieldsSource(calculatedFields, reportDataSource, dataSourceHelper) {
                        var _this = _super.call(this) || this;
                        _this._calculatedFieldsInfo = {};
                        _this._ordinaryFieldsInfo = {};
                        _this._fieldsDataMembersInfo = {};
                        _this.addAction = {
                            clickAction: function (item) {
                                return _this.addCalculatedField(item.path);
                            },
                            imageClassName: "dxrd-image-add-calcfield",
                            imageTemplateName: "dxrd-svg-operations-add_calcfield",
                            text: "Add calculated field",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Add calculated field", 'ASPxReportsStringId.ReportDesigner_FieldListActions_AddCalculatedField'); }
                        };
                        _this.removeAction = {
                            clickAction: function (item) {
                                _this.removeCalculatedField(item.path);
                            },
                            position: 50,
                            imageClassName: "dxrd-image-recycle-bin",
                            imageTemplateName: "dxrd-svg-operations-recycle_bin",
                            text: "Remove calculated field",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Remove calculated field", "ASPxReportsStringId.ReportDesigner_FieldListActions_RemoveCalculatedField"); }
                        };
                        _this._calculatedFieldsInfo = {};
                        _this._calculatedFields = calculatedFields;
                        _this._dataSourceHelper = ko.observable(dataSourceHelper);
                        _this._reportDataSource = reportDataSource;
                        for (var index = 0; index < calculatedFields().length; index++) {
                            _this._initializeCalculatedField(calculatedFields()[index]);
                        }
                        ;
                        var self = _this;
                        _this._disposables.push(_this._calculatedFields.subscribe(function (changes) {
                            for (var index = 0; index < changes.length; index++) {
                                if (changes[index].status === "added") {
                                    self._initializeCalculatedField(changes[index].value);
                                }
                                else if (changes[index].status === "deleted") {
                                    var fullPath = self._getFieldPathRequest(changes[index].value).fullPath;
                                    self._getDataMembersInfoByPath(fullPath).remove(function (item) {
                                        return changes[index].value.name === item.name;
                                    });
                                    changes[index].value.dispose();
                                }
                            }
                            ;
                        }, null, "arrayChange"));
                        _this._disposables.push(_this._reportDataSource.subscribe(function (newValue) {
                            for (var index = 0; index < calculatedFields().length; index++) {
                                if (!calculatedFields()[index].dataSource()) {
                                    _this._updateFieldPathRequest(calculatedFields()[index]);
                                }
                            }
                        }));
                        _this.addCalculatedField = function (fullPath) {
                            var pathRequest = new DevExpress.Analytics.Utils.PathRequest(fullPath);
                            var newField = _this.createCalculatedField(pathRequest.path);
                            var dataSourceInfo = _this._dataSourceHelper().findDataSourceInfoByID(pathRequest.id) || _this._dataSourceHelper().findDataSourceInfoByRef(pathRequest.ref);
                            newField.dataSource(dataSourceInfo.data);
                            calculatedFields.push(newField);
                            return newField;
                        };
                        _this.removeCalculatedField = function (fullPath) {
                            var pathRequest = new DevExpress.Analytics.Utils.PathRequest(fullPath);
                            calculatedFields.remove(function (item) {
                                var path = item.dataMember() ? (item.dataMember() + "." + item.name) : item.name;
                                return pathRequest.path === path;
                            });
                        };
                        return _this;
                    }
                    CalculatedFieldsSource.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        for (var name in this._calculatedFieldsInfo) {
                            this.disposeObservableArray(this._calculatedFieldsInfo[name]);
                            this.resetObservableArray(this._calculatedFieldsInfo[name]);
                            delete this._calculatedFieldsInfo[name];
                        }
                        this.disposeObservableArray(this._calculatedFields);
                        this.resetObservableArray(this._calculatedFields);
                        this._dataSourceHelper(null);
                        this._reportDataSource = null;
                        this._fieldsDataMembersInfo = null;
                        this._fieldsCallback = null;
                    };
                    CalculatedFieldsSource.prototype._getDataMembersInfoByPath = function (fullPath) {
                        this._calculatedFieldsInfo[fullPath] = this._calculatedFieldsInfo[fullPath] || ko.observableArray();
                        return this._calculatedFieldsInfo[fullPath];
                    };
                    CalculatedFieldsSource.prototype._subscribeFieldProperties = function (field) {
                        var _this = this;
                        field._disposables.push(field.dataMember.subscribe(function (newValue) {
                            _this._getDataMembersInfoByPath(field.pathRequest.fullPath).remove(field);
                            field.pathRequest = new DevExpress.Analytics.Utils.PathRequest(DevExpress.Analytics.Internal.getFullPath(field.pathRequest.id || field.pathRequest.ref, newValue));
                            _this._getDataMembersInfoByPath(field.pathRequest.fullPath).push(field);
                        }));
                        field._disposables.push(field.dataSource.subscribe(function (newValue) {
                            _this._updateFieldPathRequest(field);
                        }));
                        field._disposables.push(field.calculatedFieldName.subscribe(function (newValue) {
                            _this._getDataMembersInfoByPath(field.pathRequest.fullPath).notifySubscribers();
                        }));
                    };
                    CalculatedFieldsSource.prototype._getFieldPathRequest = function (field) {
                        var dataSourceInfo = this._dataSourceHelper().findDataSourceInfo(field.dataSource() || this._reportDataSource());
                        if (dataSourceInfo)
                            return new DevExpress.Analytics.Utils.PathRequest(DevExpress.Analytics.Internal.getFullPath(dataSourceInfo.id || dataSourceInfo.ref, field.dataMember()));
                        return new DevExpress.Analytics.Utils.PathRequest("none");
                    };
                    CalculatedFieldsSource.prototype._updateFieldPathRequest = function (field) {
                        this._getDataMembersInfoByPath(field.pathRequest.fullPath).remove(field);
                        field.pathRequest = this._getFieldPathRequest(field);
                        if (field.pathRequest.ref !== "none") {
                            this._getDataMembersInfoByPath(field.pathRequest.fullPath).push(field);
                        }
                    };
                    CalculatedFieldsSource.prototype._initializeCalculatedField = function (field) {
                        var _this = this;
                        var pathRequest = this._getFieldPathRequest(field);
                        field["getPath"] = function (propertyName) {
                            var dataSourceInfo = _this._dataSourceHelper().findDataSourceInfo(field.dataSource() || _this._reportDataSource());
                            return dataSourceInfo && (dataSourceInfo.id || dataSourceInfo.ref);
                        };
                        field.expressionObj = {
                            value: field["expression"],
                            path: ko.pureComputed(function () {
                                return _this._getFieldPathRequest(field).fullPath;
                            }),
                            fieldName: field.calculatedFieldName,
                            functions: Widgets.reportFunctionDisplay.filter(function (cat) { return cat.category != "Summary"; })
                        };
                        field._disposables.push(field.expressionObj.path);
                        field.nameEditable = ko.pureComputed({
                            read: function () {
                                return field.calculatedFieldName();
                            },
                            write: function (value) {
                                var fields = this._ordinaryFieldsInfo[field.pathRequest.fullPath];
                                if (!!value && DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this._calculatedFields(), "name", value) === null && DevExpress.Analytics.Internal.getFirstItemByPropertyValue(fields || [], "displayName", value) === null) {
                                    field.calculatedFieldName(value);
                                }
                            },
                            owner: this
                        });
                        field._disposables.push(field.nameEditable);
                        field.pathRequest = pathRequest;
                        field.propertyGrid = new DevExpress.Analytics.Widgets.ObjectProperties(ko.observable(field));
                        field._disposables.push(field.propertyGrid);
                        this._subscribeFieldProperties(field);
                        this._getDataMembersInfoByPath(pathRequest.fullPath).push(field);
                    };
                    CalculatedFieldsSource.prototype._generateNewFieldName = function () {
                        var i = 1;
                        var generatedName;
                        do {
                            generatedName = "calculatedField" + i++;
                        } while (DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this._calculatedFields(), "name", generatedName) !== null);
                        return generatedName;
                    };
                    CalculatedFieldsSource.prototype.createCalculatedField = function (dataMember) {
                        return new Data.CalculatedField({
                            "@Name": this._generateNewFieldName(),
                            "@DataMember": dataMember
                        });
                    };
                    CalculatedFieldsSource.prototype.getActions = function (context) {
                        var result = [];
                        if (context.hasItems && (context.data.specifics === "List" || context.data.specifics === "ListSource") && context.path.indexOf("Parameters") !== 0) {
                            result.push(this.addAction);
                        }
                        if (context.data && context.data.specifics && context.data.specifics.indexOf("calc") === 0) {
                            result.push(this.removeAction);
                        }
                        return result;
                    };
                    CalculatedFieldsSource.prototype.beforeItemsFilled = function (request, items) {
                        if (request.fullPath) {
                            items.push.apply(items, this._getDataMembersInfoByPath(request.fullPath)());
                        }
                        return false;
                    };
                    CalculatedFieldsSource.prototype.afterItemsFilled = function (request, items) {
                        if (request.fullPath) {
                            this._ordinaryFieldsInfo[request.fullPath] = items;
                            items.sort(function (a, b) {
                                var aIsList = FieldListController.isList(a) ? 1 : 0;
                                var bIsList = FieldListController.isList(b) ? 1 : 0;
                                if (aIsList !== bIsList) {
                                    return bIsList - aIsList;
                                }
                                else {
                                    return (a.displayName && b.displayName) ? a.displayName.localeCompare(b.displayName) : a.name.localeCompare(b.name);
                                }
                            });
                        }
                    };
                    return CalculatedFieldsSource;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.CalculatedFieldsSource = CalculatedFieldsSource;
                var CoordinateGridViewModel = (function (_super) {
                    __extends(CoordinateGridViewModel, _super);
                    function CoordinateGridViewModel(options) {
                        var _this = _super.call(this) || this;
                        _this.width = ko.observable(0);
                        _this.height = ko.observable(0);
                        _this.verticalGridLines = ko.observableArray().extend({ deferred: true });
                        _this.horizontalGridLines = ko.observableArray().extend({ deferred: true });
                        _this.majorVerticalGridLines = ko.observableArray().extend({ deferred: true });
                        _this.majorHorizontalGridLines = ko.observableArray().extend({ deferred: true });
                        _this._disposables.push(ko.computed(function () {
                            var flip = !!ko.unwrap(options.flip);
                            var gridSize = DevExpress.Analytics.Internal.unitsToPixel(options.snapGridSize(), options.measureUnit(), options.zoom());
                            var width = DevExpress.Analytics.Internal.unitsToPixel(options.width(), options.measureUnit(), options.zoom());
                            _this.width(width + 0.5);
                            _this._initGrid(width, gridSize, _this.verticalGridLines, flip);
                            _this._initGrid(width, 4 * gridSize, _this.majorVerticalGridLines, flip);
                        }));
                        _this._disposables.push(ko.computed(function () {
                            var gridSize = DevExpress.Analytics.Internal.unitsToPixel(options.snapGridSize(), options.measureUnit(), options.zoom());
                            var height = DevExpress.Analytics.Internal.unitsToPixel(options.height(), options.measureUnit(), options.zoom());
                            _this.height(height + 0.5);
                            _this._initGrid(height, gridSize, _this.horizontalGridLines);
                            _this._initGrid(height, 4 * gridSize, _this.majorHorizontalGridLines);
                        }));
                        return _this;
                    }
                    CoordinateGridViewModel.prototype._initGrid = function (length, gridSize, gridLines, flip) {
                        if (flip === void 0) { flip = false; }
                        var lines = gridLines.peek();
                        var arrayLength = Math.ceil(length / gridSize), currentLength = lines.length, diff = arrayLength - currentLength;
                        if (diff > 0) {
                            for (var index = currentLength; index < arrayLength; index++) {
                                gridLines.push({ coordVal: ko.observable((index + 1) * gridSize + 0.5), visible: ko.observable(true) });
                            }
                        }
                        if (flip) {
                            for (var index = 0, coordVal = length; index < gridLines.peek().length; index++, coordVal -= gridSize) {
                                gridLines.peek()[index].coordVal(coordVal - 0.5);
                                gridLines.peek()[index].visible(index < arrayLength);
                            }
                        }
                        else {
                            for (var index = 0, coordVal = 0; index < gridLines.peek().length; coordVal += gridSize, index++) {
                                gridLines.peek()[index].coordVal(coordVal + 0.5);
                                gridLines.peek()[index].visible(index < arrayLength);
                            }
                        }
                    };
                    ;
                    CoordinateGridViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.horizontalGridLines([]);
                        this.verticalGridLines([]);
                        this.majorHorizontalGridLines([]);
                        this.majorVerticalGridLines([]);
                    };
                    return CoordinateGridViewModel;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.CoordinateGridViewModel = CoordinateGridViewModel;
                ko.bindingHandlers['coordinateGrid'] = {
                    init: function (element, valueAccessor) {
                        $(element).children().remove();
                        var values = valueAccessor(), gridViewModel = new CoordinateGridViewModel(values), templateHtml = DevExpress.Analytics.Widgets.Internal.getTemplate('dxrd-coordinategrid'), $element = $(element).append(templateHtml);
                        ko.applyBindings(gridViewModel, $element.children()[0]);
                        DevExpress.Analytics.Internal.addDisposeCallback($element.children()[0], function () {
                            gridViewModel.dispose();
                        });
                        return { controlsDescendantBindings: true };
                    }
                };
                var CustomMergingEngine = (function () {
                    function CustomMergingEngine() {
                    }
                    CustomMergingEngine.prototype._customMergeForFormatString = function (propertyName, controls, undoEngine) {
                        if (propertyName === "formatString") {
                            var result = ko.observable(controls.every(function (control) { return controls[0][propertyName].peek() === control[propertyName].peek(); }) ? controls[0][propertyName].peek() : null);
                            return {
                                result: result,
                                subscriptions: [
                                    result.subscribe(function (newVal) {
                                        undoEngine && undoEngine().start();
                                        controls.forEach(function (control) {
                                            if (!control.disabled()) {
                                                control[propertyName](newVal);
                                            }
                                        });
                                        undoEngine && undoEngine().end();
                                    })
                                ]
                            };
                        }
                    };
                    CustomMergingEngine.prototype.customMerge = function (propertyName, controls, undoEngine) {
                        var _this = this;
                        if (propertyName === "dataBindings") {
                            var result = ko.observableArray();
                            var subscriptions = [];
                            var allBindings = [].concat.apply([], controls.map(function (x) { return x[propertyName](); }));
                            controls[0][propertyName]().map(function (x) { return x.propertyName(); }).forEach(function (name) {
                                var availableBindings = allBindings.filter(function (binding) {
                                    return binding.propertyName() === name;
                                });
                                if (availableBindings.length === controls.length) {
                                    var combinedObj = DevExpress.Analytics.Internal.CombinedObject._merge(availableBindings, undoEngine, _this._customMergeForFormatString);
                                    var binding = combinedObj.result;
                                    binding["isEmpty"] = function () {
                                        return !(binding["dataMember"]() || binding["dataSource"]() || binding["parameter"]());
                                    };
                                    binding["visible"] = ko.observable(false);
                                    binding["disabled"] = ko.computed(function () {
                                        return availableBindings.every(function (x) { return x.disabled(); });
                                    });
                                    combinedObj.subscriptions.push(binding["disabled"]);
                                    result.push(binding);
                                    subscriptions = [].concat.apply(subscriptions, combinedObj.subscriptions);
                                }
                            });
                            return { result: result, subscriptions: subscriptions };
                        }
                    };
                    return CustomMergingEngine;
                }());
                Internal.CustomMergingEngine = CustomMergingEngine;
                var DataBindingMode;
                (function (DataBindingMode) {
                    DataBindingMode["Bindings"] = "Bindings";
                    DataBindingMode["Expressions"] = "Expressions";
                    DataBindingMode["ExpressionsAdvanced"] = "ExpressionsAdvanced";
                })(DataBindingMode = Internal.DataBindingMode || (Internal.DataBindingMode = {}));
                function addDataSourceToReport(dataSourceHelper, report, undoEngine, itemsProvider, dataSource, forceAssigning) {
                    if (forceAssigning === void 0) { forceAssigning = false; }
                    undoEngine.start();
                    var findFirstDataSourceWithSerializer = DevExpress.Analytics.Internal.findFirstItemMatchesCondition(dataSourceHelper.usedDataSources.peek(), function (item) { return !!item.dataSerializer && item.dataSerializer !== dataSource.dataSerializer; });
                    var result = dataSourceHelper.addDataSource(dataSource);
                    if (!findFirstDataSourceWithSerializer && dataSource.dataSerializer) {
                        report.extensions.peek().forEach(function (item, index) {
                            if (item.key.peek() === Internal.DataSourceHelper.defaultReportExtensionKey) {
                                report.extensions.splice(index, 1);
                            }
                        });
                        var newDataSerializer = new Controls.ExtensionModel({});
                        newDataSerializer.key = ko.observable(Internal.DataSourceHelper.defaultReportExtensionKey);
                        newDataSerializer.value = ko.observable(dataSource.dataSerializer);
                        report.extensions.push(newDataSerializer);
                    }
                    if (forceAssigning || !report.dataSource()) {
                        report.dataSource(result);
                        itemsProvider
                            .getItems(new DevExpress.Analytics.Utils.PathRequest(dataSource.id || dataSource.ref))
                            .done(function (dataMembers) {
                            var lists = dataMembers.filter(function (item) { return Internal.isList(item); });
                            if (dataMembers.length === 0 || includeNonListItem(dataMembers)) {
                                report.dataMember("");
                            }
                            else if (!DevExpress.Analytics.Internal.find(lists, function (item) { return item.name === report.dataMember(); })) {
                                report.dataMember(lists[0].name);
                            }
                        });
                    }
                    undoEngine.end();
                }
                Internal.addDataSourceToReport = addDataSourceToReport;
                function includeNonListItem(dataMembers) {
                    return dataMembers.some(function (field) { return !DevExpress.Analytics.Internal.isList(field) || field.specifics === DevExpress.Analytics.Wizard.Internal.defaultObjectDataSourceItemSpecifics; });
                }
                Internal.includeNonListItem = includeNonListItem;
                function removeDataSourceFromReport(dataSourceHelper, reportDataSource, undoEngine, dataSource) {
                    undoEngine().start();
                    dataSourceHelper.removeDataSource(dataSource);
                    if (reportDataSource() === dataSource.data) {
                        reportDataSource(dataSourceHelper.findDataSourceInfoByRef("none").data);
                    }
                    undoEngine().end();
                }
                Internal.removeDataSourceFromReport = removeDataSourceFromReport;
                function getDataSourceDataMember(control) {
                    var dataSource = null, dataMember = null;
                    while (!dataSource && control) {
                        dataSource = dataSource || control["dataSource"] && control["dataSource"]();
                        dataMember = dataMember || control["dataMember"] && control["dataMember"]();
                        control = control.parentModel();
                    }
                    return { dataSource: dataSource, dataMember: dataMember };
                }
                Internal.getDataSourceDataMember = getDataSourceDataMember;
                Internal.reportCopyPasteStrategy = function (componentAdded) { return ({
                    createChild: function (pasteTarget, info) {
                        var control = null;
                        var parent = pasteTarget;
                        if (info["@ControlType"] === "XRCrossBandBox" || info["@ControlType"] === "XRCrossBandLine") {
                            parent = pasteTarget.root;
                            control = parent.createChild(info);
                        }
                        else {
                            control = DevExpress.Analytics.Internal.copyPasteStrategy.createChild(parent, info);
                            if (control instanceof Controls.XRControlViewModel && !info["@Text"] && control.text) {
                                control.text("");
                            }
                        }
                        componentAdded && componentAdded({ parent: parent, model: control });
                        return control;
                    },
                    calculateDelta: function (selection, pasteTargetSurface, minPoint) {
                        var result = DevExpress.Analytics.Internal.copyPasteStrategy.calculateDelta(selection, pasteTargetSurface, minPoint);
                        if (selection.getControlModel().controlType === "XRCrossBandBox" || selection.getControlModel().controlType === "XRCrossBandLine") {
                            result.y += pasteTargetSurface["absolutePosition"].y();
                        }
                        return result;
                    }
                }); };
                var DataSourceItemsExtender = (function () {
                    function DataSourceItemsExtender(dataSources) {
                        this._dataSources = dataSources;
                    }
                    DataSourceItemsExtender.prototype.beforeItemsFilled = function (request, items) {
                        return false;
                    };
                    DataSourceItemsExtender.prototype.afterItemsFilled = function (request, items) {
                        if (!(this._dataSources && this._dataSources.peek()))
                            return;
                        if (!request.fullPath) {
                            this._dataSources.peek().forEach(function (dataSourceItem) {
                                var dataMember = DevExpress.Analytics.Internal.getFirstItemByPropertyValue(items, "displayName", dataSourceItem.name);
                                if (!(dataMember && dataSourceItem.data))
                                    return;
                                if (dataSourceItem.data.tableInfoCollection) {
                                    dataMember["contenttemplate"] = "dxrd-datasource-item";
                                    dataMember["tableInfoItems"] = dataSourceItem.data.tableInfoCollection;
                                }
                                else if (dataSourceItem.isSqlDataSource) {
                                    dataMember["canAddSqlQuery"] = true;
                                }
                                else if (dataSourceItem.isJsonDataSource) {
                                    dataMember["isJsonDataSource"] = true;
                                }
                                dataMember["canRemove"] = true;
                            });
                        }
                        else if (request.fullPath === request.id || request.fullPath === request.ref) {
                            var dataSourcesInfo = this._dataSources.peek().filter(function (dataSourceItem) {
                                return !!dataSourceItem.id && dataSourceItem.id === request.id || !!dataSourceItem.ref && dataSourceItem.ref === request.ref;
                            })[0];
                            if (!dataSourcesInfo || !dataSourcesInfo.isSqlDataSource)
                                return;
                            items.forEach(function (dataMemberItem) { dataMemberItem["canEditQuery"] = dataMemberItem.isList; });
                        }
                    };
                    return DataSourceItemsExtender;
                }());
                Internal.DataSourceItemsExtender = DataSourceItemsExtender;
                var DisplayNameProvider = (function () {
                    function DisplayNameProvider(_fieldsProvider, _dataSourceHelper, _rootDS) {
                        this._fieldsProvider = _fieldsProvider;
                        this._dataSourceHelper = _dataSourceHelper;
                        this._rootDS = _rootDS;
                        this._requests = {};
                        this._fieldsProvider = _fieldsProvider;
                        this._dataSourceHelper = _dataSourceHelper;
                        this._rootDS = _rootDS;
                    }
                    DisplayNameProvider.prototype._getRequest = function (path) {
                        var _this = this;
                        if (!this._requests[path]) {
                            var pathRequest = new DevExpress.Analytics.Utils.PathRequest(path);
                            this._requests[path] = ko.pureComputed(function () { return _this._fieldsProvider.getItems(pathRequest); });
                        }
                        return this._requests[path];
                    };
                    DisplayNameProvider.prototype._getDisplayNameRequest = function (path, fieldName) {
                        var _this = this;
                        var def = $.Deferred();
                        this._getRequest(path)().done(function (data) {
                            var displayName = _this._getFieldDisplayName(data, fieldName);
                            if (!displayName)
                                def.reject();
                            else
                                def.resolve(displayName);
                        }).fail(function () {
                            def.reject();
                        });
                        return def.promise();
                    };
                    DisplayNameProvider.prototype._createRequestInfo = function (dataSource, path, dataMember, dataMemberOffset, includeDataSourceName) {
                        if (!dataMember)
                            return null;
                        var dataSourceName = null;
                        if (!path) {
                            var ds = (dataSource || this._rootDS());
                            var dsInfo = ds && this._dataSourceHelper.findDataSourceInfo(ds);
                            if (!dsInfo)
                                return null;
                            path = (dsInfo.ref || dsInfo.id);
                            if (includeDataSourceName)
                                dataSourceName = dsInfo.name;
                        }
                        var offset = DevExpress.Analytics.Internal.getFullPath(path, dataMemberOffset);
                        return {
                            fullPath: offset + "." + dataMember,
                            offset: offset,
                            dataMember: dataMember,
                            dataMemberParts: dataMember.split('.'),
                            dataSourceName: dataSourceName
                        };
                    };
                    DisplayNameProvider.prototype._getFieldDisplayName = function (fields, fieldName) {
                        if (!fields)
                            return null;
                        var field = DevExpress.Analytics.Internal.findFirstItemMatchesCondition(fields, function (field) { return field.name === fieldName; });
                        return field ? field.displayName : null;
                    };
                    DisplayNameProvider.prototype._getDisplayName = function (request) {
                        var def = $.Deferred();
                        if (!request) {
                            def.reject();
                            return def;
                        }
                        var fieldsRequests = [];
                        for (var i = -1, path = request.offset; i < request.dataMemberParts.length - 1;) {
                            fieldsRequests.push(this._getDisplayNameRequest(path, request.dataMemberParts[i + 1]));
                            path += "." + request.dataMemberParts[++i];
                        }
                        $.when.apply($, fieldsRequests).done(function () {
                            var result = request.dataSourceName ? (request.dataSourceName + " - ") : "";
                            for (var i = 0; i < arguments.length; i++) {
                                result += arguments[i];
                                if (i < arguments.length - 1)
                                    result += ".";
                            }
                            def.resolve(result);
                        }).fail(function () { return def.reject(); });
                        return def.promise();
                    };
                    DisplayNameProvider.prototype._getRealName = function (request) {
                        if (!request)
                            return $.Deferred().reject().promise();
                        return this._getRealNameRequest(request.offset, request.dataMember);
                    };
                    DisplayNameProvider.prototype._getRealNameRequest = function (path, dataMember) {
                        var _this = this;
                        var def = $.Deferred();
                        this._getRequest(path)()
                            .done(function (items) {
                            var targetItem = items.filter(function (item) { return dataMember.indexOf(item.displayName + '.') === 0 || dataMember === item.displayName; })[0];
                            if (targetItem) {
                                dataMember === targetItem.displayName ? def.resolve(targetItem.name) :
                                    _this._getRealNameRequest(path + "." + targetItem.name, dataMember.substring(targetItem.displayName.length + 1))
                                        .done(function (data) {
                                        def.resolve(targetItem.name + "." + data);
                                    })
                                        .fail(function () {
                                        def.reject();
                                    });
                            }
                            else {
                                def.reject();
                            }
                        })
                            .fail(function () {
                            def.reject();
                        });
                        return def.promise();
                    };
                    DisplayNameProvider.prototype.getDisplayName = function (dataSource, dataMember, dataMemberOffset, includeDataSourceName) {
                        if (dataMemberOffset === void 0) { dataMemberOffset = ""; }
                        if (includeDataSourceName === void 0) { includeDataSourceName = true; }
                        var request = this._createRequestInfo(dataSource, null, dataMember, dataMemberOffset, includeDataSourceName);
                        return this._getDisplayName(request);
                    };
                    DisplayNameProvider.prototype.getDisplayNameByPath = function (path, dataMember) {
                        var _this = this;
                        return this._getByPath(path, dataMember, function (x) { return _this._getDisplayName(x); });
                    };
                    DisplayNameProvider.prototype.getRealName = function (path, dataMember) {
                        var _this = this;
                        return this._getByPath(path, dataMember, function (x) { return _this._getRealName(x); });
                    };
                    DisplayNameProvider.prototype._getByPath = function (path, dataMember, getNameFunc) {
                        var _this = this;
                        path = path || "";
                        var request = this._createRequestInfo(null, path, dataMember, "", false);
                        var pathParts = path.split('.');
                        if (pathParts.length === 1) {
                            return getNameFunc(request);
                        }
                        else {
                            var result = $.Deferred();
                            getNameFunc(request).done(function (x) {
                                result.resolve(x);
                            }).fail(function (x) {
                                request = _this._createRequestInfo(null, pathParts[0], dataMember, "", false);
                                getNameFunc(request).done(function (x) {
                                    result.resolve(x);
                                }).fail(function (x) { return result.reject(); });
                            });
                            return result.promise();
                        }
                    };
                    DisplayNameProvider.prototype.dispose = function () {
                        for (var key in this._requests) {
                            this._requests[key].dispose();
                            delete this._requests[key];
                        }
                    };
                    return DisplayNameProvider;
                }());
                Internal.DisplayNameProvider = DisplayNameProvider;
                Internal.StringId = {
                    Copy: "ReportStringId.RibbonXRDesign_Copy_STipTitle",
                    NewViaWizard: "ReportStringId.UD_Capt_NewWizardReport",
                    Open: "ReportStringId.UD_Capt_OpenFile",
                    Save: "ReportStringId.Verb_Save",
                    SaveAs: "ReportStringId.UD_Capt_SaveFileAs",
                    MdiReportChanged: "ReportStringId.UD_Msg_MdiReportChanged"
                };
                var ItemsInRangeEnumerator = (function () {
                    function ItemsInRangeEnumerator(start, end) {
                        this._start = start;
                        this._end = end;
                    }
                    ItemsInRangeEnumerator.prototype._findCommonParent = function (current, last) {
                        return current === last ? current :
                            this._findCommonParent(current.parent || current, last.parent || last);
                    };
                    ItemsInRangeEnumerator.prototype._selectItemsBetweenShiftSelection = function (parent) {
                        var items = parent.items();
                        for (var i = 0; i < items.length; i++) {
                            if (this._isSelectedRangeEnded)
                                return;
                            var item = items[i];
                            this._addToSelectedItems(item);
                            if (item === this._start || item === this._end) {
                                this._isSelectedRangeEnded = this._isInSelectedRage;
                                this._isInSelectedRage = !this._isInSelectedRage;
                                this._addToSelectedItems(item);
                            }
                            if (!this._isSelectedRangeEnded && !item.collapsed()) {
                                this._selectItemsBetweenShiftSelection(item);
                            }
                        }
                    };
                    ItemsInRangeEnumerator.prototype._addToSelectedItems = function (item) {
                        if (this._isInSelectedRage) {
                            this._callBack(item);
                        }
                    };
                    ItemsInRangeEnumerator.prototype.enumerate = function (callBack) {
                        this._isInSelectedRage = false;
                        this._isSelectedRangeEnded = false;
                        this._callBack = callBack;
                        this._selectItemsBetweenShiftSelection(this._findCommonParent(this._start.parent, this._end.parent));
                    };
                    return ItemsInRangeEnumerator;
                }());
                var FieldListController = (function () {
                    function FieldListController(actionProviders, fieldListActionWrapper, dragDropHandler, customizeFieldListActions) {
                        if (actionProviders === void 0) { actionProviders = []; }
                        if (customizeFieldListActions === void 0) { customizeFieldListActions = null; }
                        this._selectedItems = ko.observableArray([]);
                        this.hasItems = FieldListController.isList;
                        this._actionProviders = actionProviders;
                        this._fieldListActionWrapper = fieldListActionWrapper;
                        this.dragDropHandler = dragDropHandler;
                        this._customizeFieldListActions = customizeFieldListActions;
                    }
                    FieldListController.prototype.dispose = function () {
                        this._actionProviders.splice(0);
                        this._selectedItems.splice(0);
                    };
                    FieldListController.prototype.itemsFilter = function (item) {
                        return item["isCalculated"] === true || item.specifics !== "none";
                    };
                    FieldListController.isList = function (item) {
                        if (!item)
                            return false;
                        return item["isCalculated"] ? false : item.specifics === "List" || item.specifics === "ListSource" || item.isList === true;
                    };
                    FieldListController.prototype.select = function (item) {
                        this.selectedItem && this.selectedItem.isSelected(false);
                        this.selectedItem = item;
                        item.isSelected(true);
                    };
                    FieldListController.prototype.canSelect = function (item) {
                        return true;
                    };
                    FieldListController.prototype.getActions = function (item) {
                        var _this = this;
                        var result = [];
                        (this._actionProviders || []).forEach(function (actionsProvider) {
                            var actions = actionsProvider.getActions(item);
                            if (_this._fieldListActionWrapper) {
                                _this._fieldListActionWrapper(actions);
                            }
                            result.push.apply(result, actions);
                        });
                        var getActionPosition = function (action) {
                            return action.position === undefined ? 1 : action.position;
                        };
                        result = $.extend(true, [], result.sort(function (x, y) { return getActionPosition(x) - getActionPosition(y); }));
                        this._customizeFieldListActions && this._customizeFieldListActions(item.data, result);
                        return result;
                    };
                    FieldListController.prototype.canMultiSelect = function (item) {
                        var path = new DevExpress.Analytics.Utils.PathRequest(item.path).path;
                        var isSelectedItemCanMultiSelect = !this.selectedItem || this.selectedItem === item || this.canMultiSelect(this.selectedItem);
                        return path.length !== 0 && isSelectedItemCanMultiSelect;
                    };
                    FieldListController.prototype.multiSelect = function (item, isShiftPressed, isCtrlPressed) {
                        var _this = this;
                        if (isShiftPressed === void 0) { isShiftPressed = false; }
                        if (isCtrlPressed === void 0) { isCtrlPressed = false; }
                        if (this.selectedItem) {
                            this.selectedItem.isSelected(false);
                            this.selectedItem.isMultiSelected(true);
                        }
                        if (isShiftPressed) {
                            var lastSelectedItem = this.selectedItem;
                            if (!isCtrlPressed) {
                                this._selectedItems.peek().forEach(function (element) { return element.isMultiSelected(false); });
                                this._selectedItems([]);
                            }
                            new ItemsInRangeEnumerator(item, lastSelectedItem).enumerate(function (element) {
                                if (!element.isMultiSelected()) {
                                    _this._selectedItems.push(element);
                                    element.isMultiSelected(true);
                                }
                            });
                            if (this._selectedItems.peek()[0] === lastSelectedItem) {
                                this._selectedItems.reverse();
                            }
                        }
                        else if (this._selectedItems.peek().indexOf(item) > -1) {
                            this._selectedItems.remove(item);
                            item.isMultiSelected(false);
                        }
                        else {
                            this._selectedItems.push(item);
                            item.isMultiSelected(true);
                        }
                    };
                    FieldListController.prototype.isDraggable = function (item) {
                        return true;
                    };
                    Object.defineProperty(FieldListController.prototype, "selectedItem", {
                        get: function () {
                            return this._selectedItems()[this._selectedItems().length - 1];
                        },
                        set: function (value) {
                            this._selectedItems().forEach(function (item) { return item.isMultiSelected(false); });
                            this._selectedItems.splice(0);
                            this._selectedItems.push(value);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    FieldListController.prototype.selectedItems = function () {
                        return this._selectedItems();
                    };
                    return FieldListController;
                }());
                Internal.FieldListController = FieldListController;
                var ParametersViewModel = (function (_super) {
                    __extends(ParametersViewModel, _super);
                    function ParametersViewModel(report) {
                        var _this = _super.call(this) || this;
                        _this.addAction = {
                            clickAction: function (item) {
                                return _this.add();
                            },
                            imageClassName: "dxrd-image-add",
                            imageTemplateName: "dxrd-svg-operations-add",
                            text: "Add parameter",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Add parameter", 'AnalyticsCoreStringId.FieldListActions_AddParameter'); }
                        };
                        _this.removeAction = {
                            clickAction: function (item) {
                                _this.remove({ model: item.data });
                            },
                            imageClassName: "dxrd-image-recycle-bin",
                            imageTemplateName: "dxrd-svg-operations-recycle_bin",
                            text: "Remove parameter",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Remove parameter", 'ASPxReportsStringId.ReportDesigner_FieldListActions_RemoveParameter'); }
                        };
                        _this.parameters = report.parameters;
                        _this.remove = function (e) {
                            _this.parameters.splice(_this.parameters.indexOf(e.model), 1);
                        };
                        _this.add = function () {
                            var newParameter = _this.createParameter();
                            _this.parameters.push(newParameter);
                            return newParameter;
                        };
                        _this.createParameter = function () {
                            var newName = DevExpress.Analytics.Internal.getUniqueNameForNamedObjectsArray(_this.parameters(), "parameter"), newParameter = new Data.Parameter({ "@Name": newName, "@Description": "P" + newName.slice(1) }, report, report.objectsStorageHelper, report.parameterHelper);
                            return newParameter;
                        };
                        return _this;
                    }
                    ParametersViewModel.prototype.getActions = function (context) {
                        var result = [];
                        if (context.path.indexOf("Parameters.") === 0) {
                            result.push(this.removeAction);
                        }
                        else if (context.path.indexOf("Parameters") === 0) {
                            result.push(this.addAction);
                        }
                        return result;
                    };
                    ParametersViewModel.prototype.beforeItemsFilled = function (request, items) {
                        if (request.ref !== "Parameters")
                            return false;
                        items.push.apply(items, request.fullPath === "Parameters" ? this.parameters.slice(0) : []);
                        return true;
                    };
                    ParametersViewModel.prototype.afterItemsFilled = function (request, items) {
                        if (!request.fullPath) {
                            var parameters = DevExpress.Analytics.Internal.findFirstItemMatchesCondition(items, function (item) { return item.specifics === "parameters"; });
                            if (parameters)
                                parameters.displayName = DevExpress.Analytics.Utils.getLocalization("Parameters", "DevExpress.XtraReports.UI.XtraReport.Parameters");
                            var noneDataSource = !request.fullPath && DevExpress.Analytics.Internal.findFirstItemMatchesCondition(items, function (item) { return item.specifics === "none"; });
                            if (noneDataSource)
                                noneDataSource.displayName = DevExpress.Analytics.Internal.localizeNoneString("none");
                        }
                    };
                    return ParametersViewModel;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.ParametersViewModel = ParametersViewModel;
                var RenameDataSourceStrategy = (function () {
                    function RenameDataSourceStrategy(dsHelper, _afterRenameCallBack) {
                        var _this = this;
                        this.dsHelper = dsHelper;
                        this._afterRenameCallBack = _afterRenameCallBack;
                        this._rename = function (dataSourceInfo, name) {
                            dataSourceInfo.name = name;
                            if (dataSourceInfo.data.name) {
                                dataSourceInfo.data.name(name);
                            }
                            _this._afterRenameCallBack && _this._afterRenameCallBack();
                        };
                    }
                    RenameDataSourceStrategy.prototype.validateName = function (nameCandidate) {
                        return nameCandidate && !nameCandidate.match(/(?!\_)[\W]+/);
                    };
                    RenameDataSourceStrategy.prototype.validateUnique = function (nameCandidate, currentName) {
                        return nameCandidate && (nameCandidate === currentName || this.dsHelper().usedDataSources().map(function (dataSource) { return dataSource.name; }).indexOf(nameCandidate) === -1);
                    };
                    RenameDataSourceStrategy.prototype.tryRename = function (nameCandidate, currentItemData) {
                        var currentDs = this.dsHelper && this.dsHelper().findDataSourceInfo(currentItemData);
                        if (!currentDs)
                            return false;
                        this._rename(currentDs, nameCandidate);
                        return true;
                    };
                    return RenameDataSourceStrategy;
                }());
                Internal.RenameDataSourceStrategy = RenameDataSourceStrategy;
                var ReportConverter = (function () {
                    function ReportConverter(_controlsHelper, _undoEngine, _dataBindingMode) {
                        if (_dataBindingMode === void 0) { _dataBindingMode = DataBindingMode.Expressions; }
                        var _this = this;
                        this._controlsHelper = _controlsHelper;
                        this._undoEngine = _undoEngine;
                        this._dataBindingMode = _dataBindingMode;
                        this.convertChoiceEnum = {
                            "Convert": "Convert",
                            "Cancel": "Cancel"
                        };
                        this._formattingMapper = {
                            "@BackColor": "@BackColor",
                            "@Sides": "@Borders",
                            "@BorderColor": "@BorderColor",
                            "@BorderDashStyle": "@BorderDashStyle",
                            "@BorderWidthSerializable": "@BorderWidth",
                            "@ForeColor": "@ForeColor",
                            "@Font": "@Font",
                            "@Padding": "@Padding",
                            "@TextAlignment": "@TextAlignment",
                            "@Visible": "@Visible"
                        };
                        this._expressionsToControlMap = {};
                        this._model = null;
                        this._lastChoice = null;
                        this._defaultFormatting = {};
                        this._notShowAgain = ko.observable(false);
                        this._detailLink = "https://devexpress.github.io/dotnet-eud/interface-elements-for-web/articles/report-designer/bind-to-data/data-binding-modes.html";
                        this.popupOptions = {
                            visible: ko.observable(false),
                            title: DevExpress.Analytics.Utils.getLocalization("Convert", "ReportStringId.UD_Msg_ConvertBindingsCaption"),
                            confirmMessage: DevExpress.Analytics.Internal.formatUnicorn(DevExpress.Analytics.Utils.getLocalization("The {0} contains bindings. Do you want to convert them to expressions?", "ReportStringId.UD_Msg_ConvertBindings"), DevExpress.Analytics.Utils.getLocalization("Report", "DevExpress.XtraReports.UI.XtraReport")),
                            linkText: DevExpress.Analytics.Utils.getLocalization("Learn more about the expressions...", "ReportStringId.UD_Msg_ConvertBindings_LinkText"),
                            linkUrl: this._detailLink,
                            container: function (element) { return DevExpress.Analytics.Internal.getParentContainer(element); },
                            buttons: [
                                {
                                    toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                        text: DevExpress.Analytics.Utils.getLocalization('Yes', 'AnalyticsCoreStringId.ParametersPanel_True'), onClick: function () {
                                            _this._applyChanges();
                                        }
                                    }
                                },
                                {
                                    toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                        text: DevExpress.Analytics.Utils.getLocalization('No', 'ASPxReportsStringId.ParametersPanel_No'), onClick: function () {
                                            _this._cancel();
                                        }
                                    }
                                },
                                { toolbar: 'bottom', location: 'before', widget: 'dxCheckBox', options: { value: this._notShowAgain, text: DevExpress.Analytics.Utils.getLocalization("Remember my choice and don't ask me again.", "ReportStringId.UD_Msg_ConvertBindings_RememberMyChoice") } }
                            ]
                        };
                        this._mapFontObj(this._defaultFormatting, new DevExpress.Analytics.Widgets.Internal.FontModel(ko.observable("")));
                        this._mapPaddingObj(this._defaultFormatting, DevExpress.Analytics.Elements.PaddingModel.from("0,0,0,0"));
                    }
                    ReportConverter.prototype._mapRulesProperties = function (formatting) {
                        var newFormatting = {};
                        for (var name in formatting) {
                            if (this._formattingMapper[name]) {
                                newFormatting[this._formattingMapper[name]] = formatting[name];
                            }
                        }
                        return newFormatting;
                    };
                    ReportConverter.prototype._hasBindings = function () {
                        var allcontrols = this._controlsHelper.allControls();
                        return allcontrols.map(function (x) { return ko.unwrap(x["dataBindings"]); }).filter(function (x) { return !!x; }).some(function (x) { return x.some(function (db) { return !!db.dataMember() || !!db.parameter(); }); });
                    };
                    ReportConverter.prototype._hasFormattingRules = function () {
                        return this._model.formattingRuleSheet().length > 0;
                    };
                    ReportConverter.prototype.convert = function (model, convertBindingsToExpressions) {
                        if (convertBindingsToExpressions === void 0) { convertBindingsToExpressions = Internal.PromptBoolean.Prompt; }
                        if (!model.dataBindingMode) {
                            this._model = model;
                            model._dataBindingMode(this._dataBindingMode);
                            if (this._dataBindingMode !== DataBindingMode.Bindings && this._controlsHelper) {
                                var needConvert = this._hasBindings() || this._hasFormattingRules();
                                if (convertBindingsToExpressions === Internal.PromptBoolean.False)
                                    return this._cancel(needConvert ? DataBindingMode.Bindings : this._dataBindingMode);
                                var canConvert = needConvert ? this._canConvertReport() : true;
                                if (!canConvert)
                                    return this._cancel();
                                if (convertBindingsToExpressions === Internal.PromptBoolean.True || this._notShowAgain()) {
                                    if (needConvert && this._lastChoice !== this.convertChoiceEnum.Cancel)
                                        this._applyChanges();
                                }
                                else {
                                    if (!needConvert) {
                                        this._model = null;
                                        this._expressionsToControlMap = {};
                                    }
                                    this.popupOptions.visible(needConvert);
                                }
                            }
                        }
                    };
                    ReportConverter.prototype._generateStyleName = function (ruleName) {
                        return ruleName;
                    };
                    ReportConverter.prototype._createBindingExpression = function (dataBinding, sumformat, condition) {
                        if (dataBinding.propertyName() === "Text" && sumformat) {
                            condition = DevExpress.Analytics.Internal.formatUnicorn(sumformat, condition);
                        }
                        if (dataBinding.propertyName() !== "Text" && dataBinding.formatString()) {
                            condition = DevExpress.Analytics.Internal.formatUnicorn("FormatString('{0}', {1})", dataBinding.formatString(), condition);
                        }
                        return Internal.ExpressionWrapper.createExpression(dataBinding.propertyName(), "BeforePrint", condition);
                    };
                    ReportConverter.prototype._tryToGenerateBindingExpressions = function (control, expressions, controlDataInfo) {
                        var _this = this;
                        var dataBindings = ko.unwrap(control["dataBindings"]), canConvertDataBindings = true;
                        var sumformat = null;
                        if (control["Summary"] && ko.unwrap(control["Summary"]["Running"]) !== "None") {
                            var summaryFunc = ko.unwrap(control["Summary"]["Func"]);
                            if (summaryFunc === "Custom")
                                return false;
                            sumformat = "sum" + summaryFunc + "({0})";
                        }
                        if (!!dataBindings) {
                            canConvertDataBindings = dataBindings.every(function (dataBinding) {
                                var condition = "";
                                if (dataBinding.dataSource() && controlDataInfo.dataSource !== dataBinding.dataSource()) {
                                    return false;
                                }
                                else if (dataBinding.parameter()) {
                                    condition = "[Parameters." + dataBinding.parameter().name + "]";
                                }
                                else if (dataBinding.dataMember()) {
                                    var condition = dataBinding.dataMember();
                                    if (controlDataInfo.dataMember) {
                                        var prefix = controlDataInfo.dataMember + ".";
                                        if (dataBinding.dataMember().indexOf(prefix) === 0) {
                                            condition = dataBinding.dataMember().substring(prefix.length);
                                        }
                                    }
                                    condition = '[' + condition + ']';
                                }
                                if (condition) {
                                    expressions.push(_this._createBindingExpression(dataBinding, sumformat, condition));
                                }
                                return true;
                            });
                        }
                        return canConvertDataBindings;
                    };
                    ReportConverter.prototype._resetDataBindings = function (control) {
                        var dataBindings = ko.unwrap(control["dataBindings"]);
                        if (!!dataBindings) {
                            dataBindings.forEach(function (dataBinding) {
                                var formatString = null;
                                if (dataBinding.propertyName() === "Text") {
                                    formatString = control["textFormatString"] && control["textFormatString"]();
                                }
                                dataBinding.resetValue();
                                formatString && control["textFormatString"](formatString);
                            });
                        }
                    };
                    ReportConverter.prototype._mapPaddingObj = function (obj, padding) {
                        obj["@Padding.Left"] = padding.left();
                        obj["@Padding.Right"] = padding.right();
                        obj["@Padding.Top"] = padding.top();
                        obj["@Padding.Bottom"] = padding.bottom();
                    };
                    ReportConverter.prototype._mapFontObj = function (obj, font) {
                        obj["@Font.Name"] = font.family();
                        obj["@Font.Size"] = font.size();
                        obj["@Font.Italic"] = font.modificators.italic();
                        obj["@Font.Strikeout"] = font.modificators.strikeout();
                        obj["@Font.Bold"] = font.modificators.bold();
                        obj["@Font.Underline"] = font.modificators.underline();
                    };
                    ReportConverter.prototype._splitFontPropertyValue = function (formatting) {
                        if (formatting["@Font"]) {
                            var font = new DevExpress.Analytics.Widgets.Internal.FontModel(ko.observable(formatting["@Font"]));
                            this._mapFontObj(formatting, font);
                            delete formatting["@Font"];
                        }
                    };
                    ReportConverter.prototype._splitPaddingPropertyValue = function (formatting) {
                        if (formatting["@Padding"]) {
                            var padding = DevExpress.Analytics.Elements.PaddingModel.from(formatting["@Padding"]);
                            this._mapPaddingObj(formatting, padding);
                            delete formatting["@Padding"];
                        }
                    };
                    ReportConverter.prototype._patchRuleCondition = function (condition, dataMember, controlDataMember) {
                        if (!condition)
                            return condition;
                        var expression = DevExpress.Analytics.Criteria.CriteriaOperator.parse(condition);
                        var processNames = [];
                        DevExpress.Analytics.Criteria.Utils.criteriaForEach(expression, function (operator, path) {
                            if (operator instanceof DevExpress.Analytics.Criteria.OperandProperty && path === dataMember) {
                                processNames.push(function () {
                                    var propertyName = [dataMember, operator.propertyName].join('.');
                                    if (propertyName.indexOf(controlDataMember) === 0 && (propertyName.length === controlDataMember.length || propertyName[controlDataMember.length] === '.')) {
                                        propertyName = propertyName.substr(controlDataMember.length + 1, propertyName.length);
                                    }
                                    operator.propertyName = propertyName;
                                });
                            }
                        }, dataMember);
                        processNames.forEach(function (x) { return x(); });
                        return new DevExpress.Analytics.Widgets.Internal.FilterEditorSerializer().serialize(expression);
                    };
                    ReportConverter.prototype._tryToGenerateFormattingRulesExpressions = function (control, expressions, rules, controlDataInfo) {
                        var _this = this;
                        if (!control.formattingRuleLinks)
                            return true;
                        var conditions = {};
                        var currentRules = $.extend(true, [], control.formattingRuleLinks().map(function (x) { return rules[x.value().name()]; }));
                        var changedPropertiesWithDot = [];
                        var canConvertFormattingRules = currentRules.every(function (rule) {
                            if (controlDataInfo.dataSource !== rule.dataSource) {
                                return false;
                            }
                            Object.keys(rule.formatting).forEach(function (name) {
                                if (name.indexOf('.') !== -1 && _this._defaultFormatting[name] !== rule.formatting[name]) {
                                    changedPropertiesWithDot.push(name);
                                }
                            });
                            return true;
                        });
                        if (!canConvertFormattingRules) {
                            return false;
                        }
                        currentRules.forEach(function (rule) {
                            if (rule.dataMember !== controlDataInfo.dataMember) {
                                rule.condition = _this._patchRuleCondition(rule.condition, rule.dataMember, controlDataInfo.dataMember);
                            }
                            for (var propertyName in rule.formatting) {
                                var hasPoint = propertyName.indexOf(".") !== -1;
                                if (!hasPoint || (hasPoint && changedPropertiesWithDot.indexOf(propertyName) !== -1)) {
                                    if (!conditions[propertyName]) {
                                        conditions[propertyName] = [];
                                    }
                                    conditions[propertyName].unshift(rule.condition, "'" + rule.formatting[propertyName] + "'");
                                }
                            }
                            return true;
                        });
                        for (var propertyName in conditions) {
                            expressions.push(this._createRuleExpression(conditions[propertyName], "?", propertyName.substring(1)));
                        }
                        return true;
                    };
                    ReportConverter.prototype._getControlDataSourceDataMember = function (control) {
                        var dataSource = null, dataMember = null;
                        while (!dataSource && control) {
                            dataSource = dataSource || control["dataSource"] && control["dataSource"]();
                            dataMember = dataMember || control["dataMember"] && control["dataMember"]();
                            control = control.parentModel();
                        }
                        return { dataSource: dataSource, dataMember: dataMember };
                    };
                    ReportConverter.prototype._generateFormattingRulesDictionary = function () {
                        var _this = this;
                        var rules = {};
                        this._model.formattingRuleSheet().forEach(function (rule) {
                            var newRule = {
                                condition: rule.condition(),
                                formatting: _this._mapRulesProperties(new DevExpress.Analytics.Utils.ModelSerializer().serialize(rule["formatting"])),
                                dataSource: rule.dataSource() || _this._model.dataSource(),
                                dataMember: rule.dataMember() || _this._model.dataMember()
                            };
                            _this._splitFontPropertyValue(newRule.formatting);
                            _this._splitPaddingPropertyValue(newRule.formatting);
                            rules[rule.name()] = newRule;
                        });
                        return rules;
                    };
                    ReportConverter.prototype._createRuleExpression = function (collection, defaultVal, propertyName) {
                        collection.push(defaultVal);
                        return Internal.ExpressionWrapper.createExpression(propertyName, "BeforePrint", "iif(" + collection.join(',') + ")");
                    };
                    ReportConverter.prototype._canConvertReport = function () {
                        var _this = this;
                        var controls = this._controlsHelper.allControls()
                            .filter(Internal.isControl);
                        var rules = this._generateFormattingRulesDictionary();
                        this._expressionsToControlMap = {};
                        return controls.every(function (control) {
                            var controlName = ko.unwrap(control.name);
                            _this._expressionsToControlMap[controlName] = [];
                            var controlDataInfo = _this._getControlDataSourceDataMember(control.parentModel && control.parentModel() || control);
                            return _this._tryToGenerateBindingExpressions(control, _this._expressionsToControlMap[controlName], controlDataInfo) &&
                                _this._tryToGenerateFormattingRulesExpressions(control, _this._expressionsToControlMap[controlName], rules, controlDataInfo);
                        });
                    };
                    ReportConverter.prototype._applyChanges = function () {
                        var _this = this;
                        this._lastChoice = this.convertChoiceEnum.Convert;
                        var controls = this._controlsHelper.allControls()
                            .filter(Internal.isControl);
                        this._model.formattingRuleSheet.removeAll();
                        controls.forEach(function (control) {
                            control.formattingRuleLinks && control.formattingRuleLinks.removeAll();
                            var controlName = ko.unwrap(control.name);
                            _this._resetDataBindings(control);
                            var expressions = _this._expressionsToControlMap[controlName];
                            if (expressions.length > 0) {
                                control.expressionBindings(expressions);
                            }
                        });
                        this.popupOptions.visible(false);
                        this._undoEngine().clearHistory();
                        this._undoEngine().isDirty(true);
                        this._expressionsToControlMap = null;
                        this._model = null;
                    };
                    ReportConverter.prototype._cancel = function (mode) {
                        if (mode === void 0) { mode = DataBindingMode.Bindings; }
                        this._lastChoice = this.convertChoiceEnum.Cancel;
                        this._model._dataBindingMode(mode);
                        this._model = null;
                        this._expressionsToControlMap = {};
                        this.popupOptions.visible(false);
                    };
                    return ReportConverter;
                }());
                Internal.ReportConverter = ReportConverter;
                var ReportExplorerModel = (function (_super) {
                    __extends(ReportExplorerModel, _super);
                    function ReportExplorerModel(reportModel, editableObject, clickHandler, dragDropHandler, selection) {
                        var _this = _super.call(this) || this;
                        _this._disposables.push(_this.itemsProvider = new DevExpress.Analytics.Internal.ObjectExplorerProvider([{ model: reportModel, name: "Report", displayName: DevExpress.Analytics.Utils.getLocalization("Report", 'ASPxReportsStringId.DocumentViewer_RibbonReportGroupText'), className: "master_report", data: reportModel },
                            { model: ko.pureComputed(function () { return reportModel() && reportModel().styles(); }), name: "Styles", displayName: DevExpress.Analytics.Utils.getLocalization("Styles", 'DevExpress.XtraReports.UI.XRPivotGrid.Styles'), className: "styles" },
                            { model: ko.pureComputed(function () { return reportModel() && reportModel().formattingRuleSheet(); }), name: "Formatting Rules", displayName: DevExpress.Analytics.Utils.getLocalization("Formatting Rules", 'DevExpress.XtraReports.UI.XRControl.FormattingRules'), className: "formattingrules" },
                            { model: ko.pureComputed(function () { return reportModel() && reportModel().crossBandControls(); }), name: "Crossband Controls", displayName: DevExpress.Analytics.Utils.getLocalization("Cross-Band Controls", 'ASPxReportsStringId.ReportDesigner_CrossBandControls'), className: "xrcrossbandbox" },
                            { model: ko.pureComputed(function () { return reportModel() && reportModel().components(); }), name: "Components", displayName: DevExpress.Analytics.Utils.getLocalization("Components", 'ReportStringId.UD_Title_ReportExplorer_Components'), className: "components" }
                        ], ["bands", "controls", "rows", "cells"], editableObject, function (model) {
                            var path = ReportExplorerModel.getPathByMember(model);
                            if (!path) {
                                if (model === (reportModel() && reportModel().styles())) {
                                    path = "Styles";
                                }
                                else if (model === (reportModel() && reportModel().formattingRuleSheet())) {
                                    path = "Formatting Rules";
                                }
                                else if (model === (reportModel() && reportModel().components())) {
                                    path = "Components";
                                }
                                else if (model instanceof Controls.StyleModel) {
                                    path = _this._getPathNonControl(model, "Styles", "styles", editableObject, reportModel);
                                }
                                else if (model instanceof Controls.FormattingRule) {
                                    path = _this._getPathNonControl(model, "Formatting Rules", "formattingRuleSheet", editableObject, reportModel);
                                }
                                else if (model instanceof Controls.ComponentsModel) {
                                    path = _this._getPathNonControl(model, "Components", "components", editableObject, reportModel);
                                }
                                else if (model === (reportModel() && reportModel().crossBandControls())) {
                                    path = "Crossband Controls";
                                }
                            }
                            return path;
                        }));
                        var exprPropertyNames = ["bands", "controls", "rows", "cells", "Report", "Styles", "Crossband Controls", "Components"];
                        var bindingPropertyNames = [].concat(exprPropertyNames, "Formatting Rules");
                        _this._disposables.push(_this.treeListController = new DevExpress.Analytics.Internal.ObjectStructureTreeListController(exprPropertyNames));
                        _this.treeListController.itemsFilter = function (item) {
                            var realPropertyName = item.name.split('.')[0];
                            var propertyNames = reportModel() && reportModel()._dataBindingMode() !== DataBindingMode.Bindings ? exprPropertyNames : bindingPropertyNames;
                            return propertyNames ? propertyNames.indexOf(realPropertyName) !== -1 || $.isNumeric(realPropertyName) : true;
                        };
                        _this.treeListController.getActions = function (item) {
                            if (item.data && item.data.name !== "Crossband Controls" && item.data.name !== "Components") {
                                if (item.data.name !== "Styles" && item.data.name !== "Formatting Rules") {
                                    return _this._createActionsForOneElement(clickHandler, selection, editableObject, reportModel, item);
                                }
                                else {
                                    return _this._createActionsForArray(item, reportModel);
                                }
                            }
                        };
                        _this.treeListController.dragDropHandler = dragDropHandler;
                        return _this;
                    }
                    ReportExplorerModel.getPathByMember = function (model) {
                        if (model.parentModel && model.parentModel()) {
                            if (model instanceof Bands.BandViewModel) {
                                return ReportExplorerModel.getPathByMember(model.parentModel()) + ".bands." + model.parentModel().bands().indexOf(model);
                            }
                            else if (model instanceof Controls.XRCrossBandControlViewModel) {
                                return "Crossband Controls.Crossband Controls." + model.parentModel().crossBandControls().indexOf(model);
                            }
                            else if (model instanceof Controls.XRTableCellViewModel) {
                                return ReportExplorerModel.getPathByMember(model.parentModel()) + ".cells." + model.parentModel().cells().indexOf(model);
                            }
                            else if (model instanceof Controls.XRTableRowViewModel) {
                                return ReportExplorerModel.getPathByMember(model.parentModel()) + ".rows." + model.parentModel().rows().indexOf(model);
                            }
                            else if (model instanceof Controls.XRReportElementViewModel) {
                                return ReportExplorerModel.getPathByMember(model.parentModel()) + ".controls." + model.parentModel().controls().indexOf(model);
                            }
                        }
                        else if (model instanceof Controls.ReportViewModel) {
                            return "Report";
                        }
                        return null;
                    };
                    ReportExplorerModel.prototype._createActionsForOneElement = function (clickHandler, selection, editableObject, reportModel, item) {
                        var actions = [{
                                text: "Properties",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Properties", "AnalyticsCoreStringId.Cmd_Properties"); },
                                imageClassName: "dx-image-edit",
                                imageTemplateName: "dxrd-svg-operations-edit",
                                clickAction: function () {
                                    clickHandler();
                                }
                            }];
                        var element = item.data && item.data.data;
                        var isDeleteDeny = element && ((element.getMetaData && element.getMetaData().isDeleteDeny) || false);
                        var isLocked = element && ((element.lockedInUserDesigner && element.lockedInUserDesigner()) || false);
                        if (!isDeleteDeny && !isLocked) {
                            actions.push({
                                text: "Delete",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Delete", "AnalyticsCoreStringId.Cmd_Delete"); },
                                imageClassName: "dxrd-image-recycle-bin",
                                imageTemplateName: "dxrd-svg-operations-recycle_bin",
                                clickAction: function () {
                                    var selectedObject = ko.unwrap(editableObject);
                                    if (selectedObject instanceof Controls.StyleModel) {
                                        reportModel().styles.remove(selectedObject);
                                    }
                                    else if (selectedObject instanceof Controls.FormattingRule) {
                                        reportModel().formattingRuleSheet.remove(selectedObject);
                                    }
                                    else if (selectedObject instanceof Controls.ComponentsModel) {
                                        var dsHelper = reportModel().dsHelperProvider();
                                        var removedDs = dsHelper.findDataSourceInfo(selectedObject.data);
                                        removedDs && dsHelper.removeDataSource(removedDs);
                                    }
                                    else {
                                        DevExpress.Analytics.Internal.deleteSelection(selection);
                                    }
                                }
                            });
                        }
                        return actions;
                    };
                    ReportExplorerModel.prototype._createActionsForArray = function (item, reportModel) {
                        if (item.data.name === "Styles" || item.data.name === "Formatting Rules") {
                            return [{
                                    text: "Add New " + (item.data.name === "Styles" ? "Style" : "Formatting Rule"),
                                    imageClassName: "dx-image-add",
                                    imageTemplateName: "dxrd-svg-operations-add",
                                    clickAction: function () {
                                        if (item.data.name === "Styles") {
                                            var newStyleName = DevExpress.Analytics.Internal.getUniqueNameForNamedObjectsArray(reportModel().styles(), "xrControlStyle");
                                            reportModel().styles.push(new Controls.StyleModel({ "@Name": newStyleName }));
                                        }
                                        else {
                                            reportModel().formattingRuleSheet.push(Controls.FormattingRule.createNew(reportModel()));
                                        }
                                    }
                                }];
                        }
                        return [];
                    };
                    ReportExplorerModel.prototype._getPathNonControl = function (model, rootName, arrayName, editableObject, reportModel) {
                        var array = reportModel() && reportModel()[arrayName]();
                        var index = array && array.indexOf(model) || 0;
                        if (index < 0) {
                            editableObject(array[0] || reportModel());
                            return array.length > 0 ? [rootName, rootName, 0].join(".") : "Report";
                        }
                        return [rootName, rootName, index].join(".");
                    };
                    return ReportExplorerModel;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.ReportExplorerModel = ReportExplorerModel;
                var ReportItemsProvider = (function (_super) {
                    __extends(ReportItemsProvider, _super);
                    function ReportItemsProvider(controlsHelper, fieldListProvider) {
                        var _this = _super.call(this) || this;
                        _this._rootItems = {
                            "ReportItems": function (path, controlsHelper) {
                                return _this.getReportElementsByPath(controlsHelper, path.split('.'));
                            }
                        };
                        _this.getItems = function (path, rootItems) {
                            var rootItems = $.extend({}, _this._rootItems, rootItems);
                            var getItemsFunc = undefined;
                            Object.keys(rootItems).some(function (currentName) {
                                var rootItem = { propertyName: currentName, getItems: rootItems[currentName] };
                                getItemsFunc = _this._tryGenerateGetItemsFunc(rootItem, path.path) || _this._tryGenerateGetItemsFunc(rootItem, path.fullPath);
                                return !!getItemsFunc;
                            });
                            if (getItemsFunc) {
                                var $deferred = $.Deferred();
                                var items = getItemsFunc(controlsHelper);
                                items && $deferred.resolve(items) || $deferred.reject();
                                return $deferred.promise();
                            }
                            else if (path.fullPath === "Root") {
                                var $deferred = $.Deferred();
                                var result = Object.keys(rootItems).map(function (name) { return Internal.createIDataMemberInfoByName(name); });
                                $deferred.resolve(result);
                                return $deferred.promise();
                            }
                            else {
                                return fieldListProvider.getItems(path);
                            }
                        };
                        _this.getItemByPath = function (pathRequest, rootItems) {
                            return _this._getItemByPath(pathRequest, rootItems, true);
                        };
                        return _this;
                    }
                    ReportItemsProvider.prototype._getControlByName = function (controlsHelper, name) {
                        if (name === "Report") {
                            return controlsHelper.allControls().filter(function (x) { return x instanceof Controls.ReportViewModel; })[0];
                        }
                        return controlsHelper.allControls().filter(function (x) { return controlsHelper.getNameProperty(x)() === name; })[0];
                    };
                    ReportItemsProvider.prototype._getProperties = function (targetInfo, propertyName) {
                        return targetInfo.filter(function (x) { return x.modelName === '@' + propertyName || x.modelName === propertyName; })[0];
                    };
                    ReportItemsProvider.prototype._tryGenerateGetItemsFunc = function (rootItem, path) {
                        if (path.indexOf(rootItem.propertyName) === 0) {
                            return function (controlsHelper) { return rootItem.getItems(path, controlsHelper); };
                        }
                    };
                    ReportItemsProvider.prototype.getReportElementsByPath = function (controlsHelper, path) {
                        if (path.length === 1) {
                            return controlsHelper.allControls().map(function (x) {
                                var name = x instanceof Controls.ReportViewModel ? 'Report' : controlsHelper.getNameProperty(x)();
                                return Internal.createIDataMemberInfoByName(name);
                            });
                        }
                        path = path.slice(1);
                        var control = this._getControlByName(controlsHelper, path[0]);
                        if (!control) {
                            return null;
                        }
                        var info = control.getInfo();
                        var controlsPath = path.slice(1);
                        for (var i = 0; i < controlsPath.length; i++) {
                            info = this._getProperties(info, controlsPath[i]);
                            info = info && info.info;
                        }
                        if (info) {
                            return info.filter(function (x) { return !!x.modelName && !x.array; }).map(function (x) {
                                var name = x.modelName.indexOf('@') === 0 ? x.modelName.slice(1) : x.modelName;
                                return Internal.createIDataMemberInfoByName(name, x.info ? "list" : "string");
                            });
                        }
                        else {
                            return null;
                        }
                    };
                    ReportItemsProvider.prototype._getItemByPath = function (pathRequest, rootItems, askParents) {
                        var _this = this;
                        var $deferred = $.Deferred();
                        var parts = pathRequest.fullPath.split('.');
                        var propertyName = parts.pop();
                        var parentPathRequest = new DevExpress.Analytics.Utils.PathRequest(parts.join('.'));
                        this.getItems(parentPathRequest, rootItems).done(function (items) {
                            var item = items.filter(function (x) { return x.name === propertyName; })[0];
                            if (item) {
                                if (askParents && parts.length > 1)
                                    _this._getItemByPath(parentPathRequest, rootItems, false)
                                        .done(function () { return $deferred.resolve(item); })
                                        .fail(function () { return $deferred.reject(); });
                                else
                                    $deferred.resolve(item);
                            }
                            else
                                $deferred.reject();
                        }).fail(function () { return $deferred.reject(); });
                        return $deferred.promise();
                    };
                    return ReportItemsProvider;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.ReportItemsProvider = ReportItemsProvider;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            var Wizard;
            (function (Wizard) {
                var Legacy;
                (function (Legacy) {
                    var RequestReportModel = (function () {
                        function RequestReportModel(reportWizardModel) {
                            if (reportWizardModel.reportType === Wizard.ReportType.Label) {
                                this.CustomLabelInformation = {
                                    Height: reportWizardModel.labelDetails.height,
                                    HorizontalPitch: reportWizardModel.labelDetails.hPitch,
                                    LeftMargin: reportWizardModel.labelDetails.leftMargin,
                                    RightMargin: reportWizardModel.labelDetails.rightMargin,
                                    PaperKindDataId: reportWizardModel.labelDetails.paperKindId,
                                    TopMargin: reportWizardModel.labelDetails.topMargin,
                                    BottomMargin: reportWizardModel.labelDetails.bottomMargin,
                                    Unit: reportWizardModel.labelDetails.unit === Wizard.GraphicsUnit.Inch ? Wizard.GraphicsUnit.Inch : Wizard.GraphicsUnit.Millimeter,
                                    VerticalPitch: reportWizardModel.labelDetails.vPitch,
                                    Width: reportWizardModel.labelDetails.width
                                };
                                this.LabelProductId = reportWizardModel.labelDetails.productId;
                                this.LabelProductDetailId = reportWizardModel.labelDetails.id;
                            }
                            else if (reportWizardModel.reportType === Wizard.ReportType.Databound || reportWizardModel.reportType === Wizard.ReportType.Vertical) {
                                this.AdjustFieldWidth = reportWizardModel.fitFieldsToPage;
                                if (reportWizardModel.fields().length) {
                                    this.Columns = reportWizardModel.fields().map(function (value) { return value.name; });
                                    this.ColumnInfo = reportWizardModel.fields().map(function (value) {
                                        return {
                                            Name: value.name,
                                            DisplayName: value.displayName,
                                            TypeSpecifics: 0
                                        };
                                    });
                                }
                                else {
                                    this.Columns = null;
                                    this.ColumnInfo = null;
                                }
                                if (reportWizardModel.dataMember() !== null || reportWizardModel.dataMemberPath() !== null) {
                                    this.DataMemberName = {
                                        DisplayName: reportWizardModel.dataMember().displayName,
                                        Name: reportWizardModel.dataMember().name,
                                        DataMemberType: 0
                                    };
                                    if (reportWizardModel.dataMember().name) {
                                        var index = reportWizardModel.dataMemberPath().indexOf('.');
                                        this.DataMemberName.Name = index > 0 ? reportWizardModel.dataMemberPath().substr(index + 1) : reportWizardModel.dataMemberPath();
                                    }
                                }
                                else {
                                    this.DataMemberName = null;
                                }
                                this.DataSourceName = null;
                                this.GroupingLevels = reportWizardModel.groups;
                                this.IgnoreNullValuesForSummary = reportWizardModel.ignoreNullValuesForSummary;
                                this.Layout = reportWizardModel.layout;
                                this.Portrait = reportWizardModel.portrait;
                                this.ReportStyleId = reportWizardModel.style;
                                this.ReportTitle = reportWizardModel.reportTitle;
                                this.SummaryOptions = (reportWizardModel.summaryOptions || []).map(function (item) {
                                    return {
                                        ColumnName: item.columnName,
                                        Flags: item.flags
                                    };
                                });
                                if (reportWizardModel.pageSetup) {
                                    this.PaperKind = Utils.PaperKind[reportWizardModel.pageSetup.paperKind];
                                    this.PaperSize = {
                                        width: reportWizardModel.pageSetup.width,
                                        height: reportWizardModel.pageSetup.height
                                    };
                                    this.Margins = {
                                        Left: reportWizardModel.pageSetup.marginLeft,
                                        Right: reportWizardModel.pageSetup.marginRight,
                                        Top: reportWizardModel.pageSetup.marginTop,
                                        Bottom: reportWizardModel.pageSetup.marginBottom
                                    };
                                    this.Unit = reportWizardModel.pageSetup.unit;
                                }
                            }
                            this.ReportType = reportWizardModel.reportType;
                            this.UseMasterDetailBuilder = reportWizardModel.useMasterDetailBuilder;
                        }
                        return RequestReportModel;
                    }());
                    Legacy.RequestReportModel = RequestReportModel;
                    var RequestXtraReportModel = (function (_super) {
                        __extends(RequestXtraReportModel, _super);
                        function RequestXtraReportModel(reportWizardModel) {
                            var _this = _super.call(this, reportWizardModel) || this;
                            _this._masterRelationMap = function (query, path) {
                                var newInfo = {
                                    Name: query.name,
                                    DisplayName: query.displayName,
                                    CheckedState: query.checked,
                                    Fields: query.fields.map(function (field) {
                                        return {
                                            Name: field.name,
                                            DisplayName: field.displayName,
                                            Checked: field.checked,
                                        };
                                    }),
                                    Relations: query.relations.map(function (relation) { return _this._masterRelationMap(relation, relation.path); })
                                };
                                _this._collectionByPath[path] = newInfo;
                                return newInfo;
                            };
                            _this._collectionByPath = {};
                            _this.DataSourceName = reportWizardModel.dataSource && reportWizardModel.dataSource.name;
                            _this.MasterDetailInfo = reportWizardModel.masterDetailInfoCollection().map(function (info) {
                                return _this._masterRelationMap(info, info.path);
                            });
                            _this.MasterDetailGroupsInfo = $.map(reportWizardModel.masterDetailGroups, function (array, key) { return ({
                                "Key": _this._collectionByPath[key],
                                "Value": (array || []).map(function (item) { return ((item || [])); })
                            }); });
                            _this.MasterDetailSummariesInfo = $.map(reportWizardModel.masterDetailSummariesInfo, function (value, key) { return ({
                                "Key": _this._collectionByPath[key],
                                "Value": (value || []).map(function (item) {
                                    return {
                                        Column: {
                                            Name: item.column.name,
                                            DisplayName: item.column.displayName
                                        },
                                        SummaryFunctions: item.summaryFunctions
                                    };
                                })
                            }); });
                            return _this;
                        }
                        return RequestXtraReportModel;
                    }(RequestReportModel));
                    Legacy.RequestXtraReportModel = RequestXtraReportModel;
                })(Legacy = Wizard.Legacy || (Wizard.Legacy = {}));
            })(Wizard = Designer.Wizard || (Designer.Wizard = {}));
            (function (Internal) {
                var RulerViewModel = (function (_super) {
                    __extends(RulerViewModel, _super);
                    function RulerViewModel(options) {
                        var _this = _super.call(this) || this;
                        _this.height = ko.observable(0);
                        _this.width = ko.observable(0);
                        _this.gridLines = ko.observableArray();
                        _this.majorGridLines = ko.observableArray();
                        _this.disable = null;
                        _this.defaultGridLinesCoordinate = ko.observable();
                        _this._disposables.push(ko.computed(function () {
                            var gridSize = DevExpress.Analytics.Internal.unitsToPixel(25, options.units(), options.zoom());
                            _this.defaultGridLinesCoordinate({ x: 4, x1: "80%", x2: "100%", majorX1: "70%", majorX2: "100%" });
                            var flip = !!ko.unwrap(options.flip);
                            if (options.direction === "vertical") {
                                _this.height(options.length() + 0.5);
                                _this.width(20);
                                if (flip) {
                                    flip = false;
                                    _this.defaultGridLinesCoordinate({ x: 11, x1: "20%", x2: "0%", majorX1: "30%", majorX2: "0%" });
                                }
                            }
                            else {
                                _this.width(options.length() + 0.5);
                                _this.height(20);
                            }
                            _this._initGrid(options.length(), gridSize, _this.gridLines, flip);
                            _this._initGrid(options.length(), 4 * gridSize, _this.majorGridLines, flip);
                        }));
                        _this.disable = options.disable;
                        return _this;
                    }
                    RulerViewModel.prototype._initGrid = function (length, gridSize, gridLines, flip) {
                        if (flip === void 0) { flip = false; }
                        var arrayLength = Math.round(length / gridSize) + 1, currentLength = gridLines.peek().length, diff = arrayLength - currentLength;
                        if (diff > 0) {
                            for (var index = 0; index < diff; index++) {
                                gridLines.push({ coordVal: ko.observable(0), text: ko.observable(0), visible: ko.observable(false) });
                            }
                        }
                        if (flip) {
                            for (var index = 0, coordVal = length; index < gridLines.peek().length; index++, coordVal -= gridSize) {
                                gridLines.peek()[index].coordVal(coordVal - 0.5);
                                gridLines.peek()[index].text(index);
                                gridLines.peek()[index].visible(index < arrayLength);
                            }
                        }
                        else {
                            for (var index = 0, coordVal = 0; index < gridLines.peek().length; coordVal += gridSize, index++) {
                                gridLines.peek()[index].coordVal(coordVal + 0.5);
                                gridLines.peek()[index].text(index);
                                gridLines.peek()[index].visible(index < arrayLength);
                            }
                        }
                    };
                    return RulerViewModel;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.RulerViewModel = RulerViewModel;
                ko.bindingHandlers['ruler'] = {
                    init: function (element, valueAccessor) {
                        $(element).children().remove();
                        var values = valueAccessor(), options_ = $.extend({}, ko.unwrap(values), {}), zoom = options_.zoom, options = {
                            length: options_.length,
                            units: options_.units,
                            direction: options_.direction || "",
                            zoom: zoom,
                            flip: options_.flip,
                            disable: options_.disable
                        }, rulerViewModel = new RulerViewModel(options), templateHtml = DevExpress.Analytics.Widgets.Internal.getTemplate('dxrd-ruler' + options.direction), $element = $(element).append(templateHtml);
                        ko.applyBindings(rulerViewModel, $element.children()[0]);
                        DevExpress.Analytics.Internal.addDisposeCallback($element.children()[0], function () {
                            rulerViewModel.dispose();
                            rulerViewModel.gridLines(null);
                            rulerViewModel.majorGridLines(null);
                        });
                        return { controlsDescendantBindings: true };
                    }
                };
                function findFirstParentWithPropertyName(control, propertyName) {
                    var parent = control.parentModel && control.parentModel();
                    if (parent)
                        return parent[propertyName] ? parent : findFirstParentWithPropertyName(parent, propertyName);
                    else
                        return control.root;
                }
                Internal.findFirstParentWithPropertyName = findFirstParentWithPropertyName;
                function addVariablesToExpressionEditor(categories, customizeItems) {
                    if (customizeItems === void 0) { customizeItems = function (items) { return items; }; }
                    var items = customizeItems([
                        { text: "DataSource.CurrentRowIndex", val: "[DataSource.CurrentRowIndex]", descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_CurrentRowIndex_Description' },
                        { text: "DataSource.RowCount", val: "[DataSource.RowCount]", descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_RowCount_Description' },
                        { text: "DataSource.CurrentRowHierarchyLevel", val: "[DataSource.CurrentRowHierarchyLevel]", descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_CurrentRowHierarchyLevel_Description' }
                    ]);
                    categories.push(DevExpress.Analytics.Widgets.Internal.createExpressionEditorCollectionToolOptions(items, "Variables", "ReportStringId.ExpressionEditor_ItemInfo_Variables", true));
                }
                Internal.addVariablesToExpressionEditor = addVariablesToExpressionEditor;
                function createIDataMemberInfoByName(name, specifics) {
                    if (specifics === void 0) { specifics = "list"; }
                    return {
                        displayName: name,
                        name: name,
                        specifics: specifics,
                        isList: specifics === "list" ? true : false
                    };
                }
                Internal.createIDataMemberInfoByName = createIDataMemberInfoByName;
                function recalculateUnit(value, dpi) {
                    return Math.round(value * dpi) / 100;
                }
                Internal.recalculateUnit = recalculateUnit;
                Internal.PromptBoolean = {
                    "False": "False",
                    "True": "True",
                    "Prompt": "Prompt"
                };
                function correctModel(model) {
                    if (Array.isArray(model)) {
                        for (var i = 0; i < model.length; i++) {
                            if (model[i]["@Ref"] !== undefined) {
                                model = model[i];
                                break;
                            }
                        }
                    }
                    else {
                        Object.keys(model).forEach(function (name) {
                            if (model[name] instanceof Object)
                                model[name] = correctModel(model[name]);
                        });
                    }
                    return model;
                }
                Internal.correctModel = correctModel;
                function createObjectFromInfo(control, serializationsInfo) {
                    var newObj = undefined;
                    var newObjInfo = [];
                    serializationsInfo.forEach(function (info) {
                        if (control[info.propertyName]) {
                            if (newObj === undefined)
                                newObj = {};
                            newObj[info.propertyName] = control[info.propertyName];
                            newObjInfo.push(info);
                        }
                    });
                    if (!!newObj) {
                        newObj["getInfo"] = function () { return newObjInfo; };
                    }
                    return newObj;
                }
                Internal.createObjectFromInfo = createObjectFromInfo;
                function createReportViewModel(newReportInfo, oldReport) {
                    var reportModel = JSON.parse(newReportInfo.reportModel);
                    var report = new Controls.ReportViewModel(reportModel);
                    if (oldReport) {
                        var nextRef = Math.max.apply(Math, report.objectStorage().map(function (data) { return parseInt(data["_model"]["@Ref"]); })) + 1;
                        oldReport.dsHelperProvider().usedDataSources()
                            .filter(function (dsInfo) { return !!dsInfo.data && !newReportInfo.dataSourceRefs.some(function (ref) { return ref.name === dsInfo.name; }); })
                            .forEach(function (dsInfo) {
                            dsInfo.data["_model"]["@Ref"] = nextRef.toString();
                            newReportInfo.dataSourceRefs.push({
                                name: dsInfo.name,
                                ref: nextRef.toString(),
                                isSqlDataSource: dsInfo.isSqlDataSource,
                                isJsonDataSource: dsInfo.isJsonDataSource,
                                dataSerializer: dsInfo.dataSerializer
                            });
                            report.objectStorage.push(dsInfo.data);
                            nextRef++;
                        });
                    }
                    report.dataSourceRefs = newReportInfo.dataSourceRefs;
                    return report;
                }
                Internal.createReportViewModel = createReportViewModel;
                function updateDataSourceRefs(report, dataSourceRefs) {
                    var getDataSourceRefs = function (key) {
                        var resultRefs = (dataSourceRefs || []).filter(function (ds) { return ds.Key === key; })[0];
                        return resultRefs && resultRefs.Value || [];
                    };
                    report.dataSourceRefs = getDataSourceRefs(report.key());
                    var subreportControls = Internal.subreportControlCollector(report);
                    subreportControls.forEach(function (subreport) {
                        if (subreport.reportSource) {
                            subreport.reportSource.dataSourceRefs = getDataSourceRefs(subreport.key());
                        }
                    });
                }
                Internal.updateDataSourceRefs = updateDataSourceRefs;
                function isNotParameter(control) {
                    return !(control instanceof Data.Parameter);
                }
                Internal.isNotParameter = isNotParameter;
                function isControl(control) {
                    return isNotParameter(control) && !(control instanceof Controls.StyleModel || control instanceof Controls.FormattingRule || control instanceof Controls.ComponentsModel);
                }
                Internal.isControl = isControl;
                ko.bindingHandlers["dxWatermark"] = {
                    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        var options = valueAccessor();
                        var leftMargin = options.forLeftMargin;
                        var band = options.band;
                        var reportSurface = options.reportSurface;
                        var backgroundRect = band.backgroundRect();
                        var pxs = function (x) { return x === 0 ? '0' : (x + 'px'); };
                        var url = function (s) { return s ? DevExpress.Analytics.Internal.formatUnicorn('url("{0}")', s) : s; };
                        var size = function (w, h) { return pxs(w) + ' ' + pxs(h); };
                        var getOffset = function (size, vertical) {
                            var noOffsetKey = vertical ? 'Top' : 'Left', fullOffsetKey = vertical ? 'Bottom' : 'Right', pageSize = vertical ? reportSurface.pageHeight() : reportSurface.pageWidth(), align = options.align;
                            return (pageSize - size) * (align.indexOf(noOffsetKey) >= 0 ? 0 : align.indexOf(fullOffsetKey) >= 0 ? 1 : 0.5);
                        };
                        element.style['height'] = pxs(backgroundRect.height);
                        element.style['width'] = pxs(leftMargin ? reportSurface.margins.left() : band._width());
                        element.style['background-image'] = url(options.image);
                        element.style['opacity'] = (255 - options.transparency) / 255 + '';
                        element.style['background-repeat'] = options.tiling ? 'repeat' : 'no-repeat';
                        var xOffset = 0, yOffset = 0, _a = reportSurface._watermarkImageNaturalSize(), width = _a.width, height = _a.height;
                        switch (options.viewMode) {
                            case 'Clip':
                                width *= reportSurface.zoom();
                                height *= reportSurface.zoom();
                                xOffset = getOffset(width, false);
                                yOffset = getOffset(height, true);
                                element.style['background-size'] = size(width, height);
                                break;
                            case 'Stretch':
                                xOffset = yOffset = 0;
                                element.style['background-size'] = size(reportSurface.pageWidth(), reportSurface.pageHeight());
                                break;
                            case 'Zoom':
                                var xRatio = reportSurface.pageWidth() / width, yRatio = reportSurface.pageHeight() / height, ratio;
                                if (xRatio < yRatio) {
                                    ratio = xRatio;
                                    xOffset = 0;
                                    yOffset = getOffset(ratio * height, true);
                                }
                                else {
                                    ratio = yRatio;
                                    xOffset = getOffset(ratio * width, false);
                                    yOffset = 0;
                                }
                                element.style['background-size'] = size(width * ratio, height * ratio);
                                break;
                        }
                        element.style['background-position-y'] = pxs(yOffset - backgroundRect.top);
                        element.style['background-position-x'] = pxs(xOffset - (backgroundRect.left || 0) - (leftMargin ? 0 : reportSurface.margins.left()));
                    }
                };
                function selectTreeListItem(item, event) {
                    if (item instanceof DevExpress.Analytics.Widgets.Internal.TreeListItemViewModel && !item.isMultiSelected() && !item.isSelected())
                        item.toggleSelected(item, event);
                }
                Internal.selectTreeListItem = selectTreeListItem;
                function getExpressionPath(container, path) {
                    var parentParametersPath = "Parameters.";
                    if (path.indexOf(parentParametersPath) !== -1) {
                        return '?' + path.substring(parentParametersPath.length);
                    }
                    var dataSourceInfo = Internal.getDataSourceDataMember(container);
                    var prefix = dataSourceInfo.dataMember && (dataSourceInfo.dataMember + ".");
                    path = (prefix && path.indexOf(prefix) === 0) ? path.slice(prefix.length) : path;
                    return '[' + path + ']';
                }
                Internal.getExpressionPath = getExpressionPath;
                function getFirstSurfaceParentByType(target, checkBandsType) {
                    return checkBandsType(target) ? target : getFirstSurfaceParentByType(target.parent, checkBandsType);
                }
                ;
                function getUsefulReportWidth(surface) {
                    var report = surface && surface.getControlModel();
                    return surface ?
                        DevExpress.Analytics.Elements.Size.fromString(((report.pageWidth() - report.margins.left() - report.margins.right()) / (surface.dpi() / 100)).toString() + ", 23") :
                        DevExpress.Analytics.Elements.Size.fromString("200, 23");
                }
                function createPictureBox(container, bindingPath, dataBindingMode) {
                    var newControl = container.createChild($.extend({ "@ControlType": "XRPictureBox" }, Utils.controlsFactory.controlsMap["XRPictureBox"].defaultVal));
                    if (dataBindingMode === Internal.DataBindingMode.Bindings) {
                        var binding = newControl["dataBindings"]().findBinding("ImageSource");
                        binding.dataMember(bindingPath);
                    }
                    else {
                        var binding = newControl["expressionObj"].getExpression("ImageSource", "BeforePrint");
                        binding.value(getExpressionPath(container, bindingPath));
                    }
                    return newControl;
                }
                Internal.createPictureBox = createPictureBox;
                var _checkBandsType = function (target) { return target instanceof Bands.BandSurface || target instanceof Bands.VerticalBandSurface; };
                Internal.memberControlsMap = {
                    "Array": {
                        drop: function (treeListItem, dropTargetControl, dataBindingMode) {
                            return createPictureBox(dropTargetControl, new DevExpress.Analytics.Utils.PathRequest(treeListItem.path).path, dataBindingMode);
                        },
                        size: function (surface) {
                            return DevExpress.Analytics.Elements.Size.fromString("100, 100");
                        }
                    },
                    "Bool": {
                        drop: function (treeListItem, dropTargetControl, dataBindingMode) {
                            var control = createSimpleControl("XRCheckBox", dropTargetControl);
                            assignBinding(control, dropTargetControl, "CheckState", treeListItem, dataBindingMode);
                            control.text(treeListItem.data.displayName);
                            return control;
                        },
                        size: function (surface) {
                            return DevExpress.Analytics.Elements.Size.fromString("100, 23");
                        }
                    },
                    "List": {
                        drop: function (treeListItem, dropTargetControl, dataBindingMode, size) {
                            var helper = new Internal.FieldListDragDropHelper(dataBindingMode, size);
                            if (treeListItem.data.specifics === "ListSource")
                                return helper.createTableFromListSource(treeListItem, dropTargetControl);
                            return helper.createTableFromItems([treeListItem], dropTargetControl);
                        },
                        size: getUsefulReportWidth,
                        adjustDropTarget: function (dropTarget) {
                            if (dropTarget instanceof Controls.ReportSurface)
                                return dropTarget;
                            var targetSurface = getFirstSurfaceParentByType(dropTarget, _checkBandsType);
                            targetSurface.underCursor().x = 0;
                            return targetSurface;
                        }
                    },
                    "MultiList": {
                        drop: function (treeListItem, dropTargetControl, dataBindingMode, size) {
                            var helper = new Internal.FieldListDragDropHelper(dataBindingMode, size);
                            return helper.createTableFromItems(treeListItem.selectedItems(), dropTargetControl);
                        },
                        size: getUsefulReportWidth,
                        adjustDropTarget: function (dropTarget) {
                            if (dropTarget instanceof Controls.ReportSurface)
                                return dropTarget;
                            var targetSurface = getFirstSurfaceParentByType(dropTarget, _checkBandsType);
                            targetSurface.underCursor().x = 0;
                            return targetSurface;
                        }
                    },
                    "Default": {
                        drop: function (treeListItem, dropTargetControl, dataBindingMode) {
                            var control = createSimpleControl("XRLabel", dropTargetControl);
                            assignBinding(control, dropTargetControl, "Text", treeListItem, dataBindingMode);
                            return control;
                        },
                        size: function (surface) {
                            return DevExpress.Analytics.Elements.Size.fromString("100, 23");
                        }
                    }
                };
                function createSimpleControl(controlType, dropTargetControl) {
                    return dropTargetControl.createChild($.extend({ "@ControlType": controlType }, Utils.controlsFactory.controlsMap[controlType].defaultVal));
                }
                Internal.createSimpleControl = createSimpleControl;
                function assignBinding(control, container, bindingName, item, dataBindingMode) {
                    if (dataBindingMode === Internal.DataBindingMode.Bindings) {
                        var binding = control.dataBindings().findBinding(bindingName);
                        if (item.path.indexOf("Parameters.") === -1) {
                            binding.dataMember(new DevExpress.Analytics.Utils.PathRequest(item.path).path);
                        }
                        else {
                            binding.dataMember(item.data.name);
                            binding.parameter(item.data);
                        }
                    }
                    else {
                        var binding = control.expressionObj.getExpression(bindingName, "BeforePrint");
                        var path = item.data instanceof Data.Parameter ? item.path : new DevExpress.Analytics.Utils.PathRequest(item.path).path;
                        binding.value(getExpressionPath(container, path));
                    }
                    return control;
                }
                Internal.assignBinding = assignBinding;
                function getBandIfItDoesNotContainTOC(reportModel, bandType) {
                    var band = (DevExpress.Analytics.Internal.findFirstItemMatchesCondition(reportModel.bands(), function (item) { return item.controlType === bandType; }));
                    if (band) {
                        return !!Internal.bandControlsSomeXRTableOfContents(band) ? null : band;
                    }
                    return reportModel.createChild({ "@ControlType": bandType });
                }
                Internal.getBandIfItDoesNotContainTOC = getBandIfItDoesNotContainTOC;
                function isList(data) {
                    return data.isList === true || data.specifics === "List" || data.specifics === "ListSource";
                }
                Internal.isList = isList;
                function _disableCanGrowProperty(model) {
                    if (model.controlType === "XRTable") {
                        model.rows().forEach(function (row) { return row.cells().forEach(function (cell) { return _disableCanGrowProperty(cell); }); });
                    }
                    if (model["canGrow"] && model["canGrow"]()) {
                        model["canGrow"](false);
                    }
                }
                function dragDropComponentAdded(model, parent) {
                    if (!(parent instanceof Bands.VerticalBandViewModel))
                        return;
                    _disableCanGrowProperty(model);
                }
                Internal.dragDropComponentAdded = dragDropComponentAdded;
                var SelectionDragDropHandler = (function (_super) {
                    __extends(SelectionDragDropHandler, _super);
                    function SelectionDragDropHandler() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    SelectionDragDropHandler.prototype.getLocation = function (adjustedTarget, item) {
                        var location = _super.prototype.getLocation.call(this, adjustedTarget, item);
                        if (item instanceof Controls.XRSubreportSurface)
                            return item.processLocation(location);
                        return location;
                    };
                    return SelectionDragDropHandler;
                }(DevExpress.Analytics.Internal.SelectionDragDropHandler));
                Internal.SelectionDragDropHandler = SelectionDragDropHandler;
                var FieldListDragDropHandler = (function (_super) {
                    __extends(FieldListDragDropHandler, _super);
                    function FieldListDragDropHandler(surface, selection, _undoEngine, snapHelper, dragHelperContent, _dataSources, onComponentAdded) {
                        var _this = _super.call(this, surface, selection, _undoEngine, snapHelper, dragHelperContent) || this;
                        _this._undoEngine = _undoEngine;
                        _this._dataSources = _dataSources;
                        _this._getKey = function (item) { return (item.data.isList || item.isMultiSelected()) ? "List" : item.data.specifics; };
                        _this._disposables.push(_this.dataBindingMode = ko.computed(function () { return surface() && surface()._control.dataBindingMode || Internal.DataBindingMode.Expressions; }));
                        _this.cursor = 'arrow';
                        _this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                        _this.containment = '.dxrd-designer';
                        _this["cursorAt"] = {
                            top: 0,
                            left: 0
                        };
                        _this["helper"] = function (draggable, event) {
                            _super.prototype.helper.call(_this, draggable);
                            var item = draggable;
                            selectTreeListItem(item, event);
                            _this._setDragHelperContent(Internal.memberControlsMap, _this._getKey(item));
                        };
                        return _this;
                    }
                    FieldListDragDropHandler.prototype._setDragHelperContent = function (memberControlsMap, key) {
                        var size = (memberControlsMap[key] || memberControlsMap["Default"]).size(this.surface());
                        this.recalculateSize(size);
                        this.dragHelperContent.reset();
                        this.dragHelperContent.setContent(new DevExpress.Analytics.Elements.Rectangle(0, 0, this._size.width(), this._size.height()));
                    };
                    FieldListDragDropHandler.prototype._getDropTarget = function (memberControlsMapElement) {
                        return memberControlsMapElement && memberControlsMapElement.adjustDropTarget && memberControlsMapElement.adjustDropTarget(this.selection.dropTarget) || this.selection.dropTarget;
                    };
                    FieldListDragDropHandler.prototype._needToChangeHelperContent = function (dragHelperContent, className) {
                        return dragHelperContent && dragHelperContent.className === className;
                    };
                    FieldListDragDropHandler.prototype._updateInnerControlSize = function (control) {
                        if (!control.rows)
                            return;
                        var cells = control.rows()[0].cells();
                        var innerControls = [];
                        cells.forEach(function (cell) {
                            innerControls = innerControls.concat(cell.controls());
                        });
                        if (innerControls.length === 0)
                            return;
                        var cellWidth = cells[0].width();
                        var cellHeight = cells[0].height();
                        innerControls.forEach(function (control) {
                            control.size.width(cellWidth);
                            control.size.height(cellHeight);
                        });
                    };
                    FieldListDragDropHandler.prototype._addControl = function (control, dropTarget) {
                        if (!control)
                            return;
                        this._undoEngine().start();
                        this.addControl(control, dropTarget, this._size);
                        this._updateInnerControlSize(control);
                        this._undoEngine().end();
                        var parent = dropTarget.getControlModel();
                        dragDropComponentAdded(control, parent);
                        this.onComponentAdded({ parent: parent, model: control });
                    };
                    FieldListDragDropHandler.prototype._isDefaultBindingAssigned = function (control, treeListItem) {
                        if (control["hasDefaultBindingProperty"] && !isList(treeListItem.data)) {
                            if (this.dataBindingMode() === Internal.DataBindingMode.Bindings) {
                                var dataBinding = control.getDefaultBinding();
                                dataBinding.updateBinding(treeListItem.path, this._dataSources.peek());
                            }
                            else {
                                var dataSourceInfo = Internal.getDataSourceDataMember(control);
                                var expression = control.getDefaultBinding();
                                var path = treeListItem.data instanceof Data.Parameter ? treeListItem.path : new DevExpress.Analytics.Utils.PathRequest(treeListItem.path).path;
                                expression.value(getExpressionPath(control, path));
                            }
                            return true;
                        }
                        return false;
                    };
                    FieldListDragDropHandler.prototype.drag = function (event, ui) {
                        if (this.selection.dropTarget) {
                            var element = event.target;
                            var draggable = ko.dataFor(element);
                            var key = this._getKey(draggable), dropTarget = this._getDropTarget(Internal.memberControlsMap[key]);
                            var dropTargetControl = dropTarget.getControlModel();
                            var boundedClass = "dxrd-image-ghost-bounded";
                            var dragHelperContent = this.dragHelperContent.controls()[0];
                            if (dropTargetControl["hasDefaultBindingProperty"] && !isList(draggable.data)) {
                                if (!this._needToChangeHelperContent(dragHelperContent, boundedClass)) {
                                    var rect = new DevExpress.Analytics.Elements.Rectangle(12, 12, 12, 12);
                                    rect.className = boundedClass;
                                    this._size.width(12);
                                    this._size.height(12);
                                    this.dragHelperContent.reset();
                                    this.dragHelperContent.setContent(rect);
                                }
                                $(element).draggable("option", "snap", false);
                                this.snapHelper.deactivateSnapLines();
                                event.altKey = true;
                            }
                            else if (this._needToChangeHelperContent(dragHelperContent, boundedClass)) {
                                this._setDragHelperContent(Internal.memberControlsMap, key);
                            }
                        }
                        _super.prototype.drag.call(this, event, ui);
                    };
                    FieldListDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
                        var _this = this;
                        this.dragHelperContent.reset();
                        if (this.selection.dropTarget) {
                            if (this.selection.dropTarget instanceof Controls.ReportSurface)
                                return;
                            var position = this._getAbsoluteSurfacePosition(ui);
                            this.selection.dropTarget.underCursor().x = position.left - this.selection.dropTarget["absolutePosition"].x();
                            this.selection.dropTarget.underCursor().y = position.top - this.selection.dropTarget["absolutePosition"].y();
                            var item = draggable;
                            var key = item.data.isList ? "List" : item.data.specifics;
                            if (this.surface().isFit(this.selection.dropTarget)) {
                                var dropTarget = this._getDropTarget(Internal.memberControlsMap[key]), dropTargetControl = dropTarget.getControlModel();
                                var isMultiSelect = item.selectedItems().length > 1;
                                if (!isMultiSelect && this._isDefaultBindingAssigned(dropTargetControl, item))
                                    return;
                                dropTarget = dropTargetControl.getMetaData().isContainer ? dropTarget : dropTarget.parent;
                                if (!dropTarget.canDrop())
                                    return;
                                if (!isMultiSelect && !isList(item.data)) {
                                    var control = (Internal.memberControlsMap[key] || Internal.memberControlsMap["Default"]).drop(item, dropTarget.getControlModel(), this.dataBindingMode());
                                    this._addControl(control, dropTarget);
                                    return;
                                }
                                Internal.memberControlsMap[isMultiSelect ? "MultiList" : key]
                                    .drop(item, dropTarget.getControlModel(), this.dataBindingMode(), Internal.memberControlsMap[isMultiSelect ? "MultiList" : key].size(this.surface()))
                                    .done(function (control) {
                                    _this._addControl(control, dropTarget);
                                });
                            }
                        }
                    };
                    return FieldListDragDropHandler;
                }(DevExpress.Analytics.Internal.DragDropHandler));
                Internal.FieldListDragDropHandler = FieldListDragDropHandler;
                var ReportControlsDragDropHelper = (function () {
                    function ReportControlsDragDropHelper(draggable, _undoEngine) {
                        this._undoEngine = _undoEngine;
                        this._draggable = draggable;
                        this._draggableModel = this._getElementViewModel(draggable);
                        this._draggableParent = this._draggableModel.parentModel();
                        this._serializer = new DevExpress.Analytics.Utils.ModelSerializer();
                    }
                    ReportControlsDragDropHelper.prototype._getElementViewModel = function (item) {
                        return item && item.data && item.data["data"];
                    };
                    ReportControlsDragDropHelper.prototype._canReorder = function (currentTarget, draggableData) {
                        var currentModel = this._getElementViewModel(currentTarget);
                        if (Bands.BandViewModel.isReorderingBand(this._draggableModel) && Bands.BandViewModel.isReorderingBand(currentModel))
                            return Designer.Utils._isReorderBand(this._draggableModel.surface, currentModel);
                        return currentTarget.data.specifics === draggableData.specifics ||
                            (this._draggableModel.getMetaData().canDrop(currentModel.surface, this._draggableModel) &&
                                !currentModel.getMetaData().isContainer && !(currentModel instanceof Controls.ReportViewModel));
                    };
                    ReportControlsDragDropHelper.prototype._shiftChildrenCount = function (currentTarget) {
                        var _this = this;
                        return DevExpress.Analytics.Internal.find(this._draggable.parent.items(), function (item) { return item === _this._draggable || item === currentTarget; }) === this._draggable ? 1 : 0;
                    };
                    ReportControlsDragDropHelper.prototype._targetIsClosestOfDraggable = function (target, draggable) {
                        return target === draggable || (target.parent && this._targetIsClosestOfDraggable(target.parent, draggable));
                    };
                    ReportControlsDragDropHelper.prototype._canDrop = function (target, targetModel) {
                        var isReportExplorerTreeListItem = target instanceof DevExpress.Analytics.Widgets.Internal.TreeListItemViewModel && target.data && target.data["data"] instanceof DevExpress.Analytics.Elements.ElementViewModel;
                        if (!isReportExplorerTreeListItem) {
                            return false;
                        }
                        if (["XRTable", "XRTableCell", "XRTableRow"].indexOf(this._draggableModel.controlType) < 0 && ["XRTable", "XRTableRow"].indexOf(targetModel.controlType) > -1)
                            return false;
                        return ((this._draggableParent !== targetModel && !this._targetIsClosestOfDraggable(target, this._draggable)) &&
                            (this._canReorder(target, this._draggable.data) ||
                                (targetModel.getMetaData().isContainer
                                    && targetModel.surface && targetModel.surface.canDrop()
                                    && this._draggableModel.getMetaData().canDrop(targetModel.surface, this._draggableModel))));
                    };
                    ReportControlsDragDropHelper.prototype._removeClass = function (target) {
                        $(target).removeClass("dxrd-treelist-droppable dxrd-drop-approve drop-before drop-after");
                    };
                    ReportControlsDragDropHelper.prototype._insertTableChilds = function (parent, selectedEl, position, weightsCells) {
                        if (weightsCells === void 0) { weightsCells = null; }
                        var newChild, selectedRowHeight = 0;
                        if (selectedEl["@ControlType"] === "XRTableRow") {
                            newChild = new Controls.XRTableRowViewModel(selectedEl, parent);
                            selectedRowHeight = newChild.height.peek();
                        }
                        else if (selectedEl["@ControlType"] === "XRTableCell") {
                            newChild = new Controls.XRTableCellViewModel(selectedEl, parent);
                        }
                        parent.addChild(newChild, position);
                        if (weightsCells) {
                            weightsCells.splice(position, 0, parseFloat(selectedEl["@Weight"]));
                            weightsCells.forEach(function (weight, index) {
                                parent.cells()[index].weight(weight);
                            });
                        }
                        if (selectedRowHeight) {
                            parent.size.height(parent.size.height() + selectedRowHeight);
                        }
                        return newChild.surface;
                    };
                    ReportControlsDragDropHelper.prototype.setNewDropTarget = function (elementModel, element) {
                        if (this._target === elementModel)
                            return;
                        this._removeClass(this._targetElement);
                        var $targetElement;
                        this._target = elementModel;
                        $targetElement = $(element).closest(".dx-treelist-item");
                        this._targetElement = $targetElement.get(0);
                        if ($targetElement && $targetElement.length) {
                            var classToAdd = "dxrd-treelist-droppable";
                            var targetModel = this._getElementViewModel(this._target);
                            if (this._canDrop(this._target, targetModel)) {
                                classToAdd = classToAdd + " dxrd-drop-approve";
                                if (this._canReorder(this._target, this._draggable.data)) {
                                    classToAdd = classToAdd + " " + (this._shiftChildrenCount(this._target) ? "drop-after" : "drop-before");
                                }
                            }
                            $targetElement.addClass(classToAdd);
                        }
                    };
                    ReportControlsDragDropHelper.prototype.doStopDrag = function () {
                        var _this = this;
                        this._removeClass(this._targetElement);
                        var targetModel = this._getElementViewModel(this._target);
                        if (!this._target || !targetModel || !this._canDrop(this._target, targetModel)) {
                            return this._draggableModel.surface;
                        }
                        var draggablePathName = this._draggable.data.name.split(".")[0], siblings = targetModel.parentModel()[draggablePathName], clonedSiblings = siblings && siblings().slice(0);
                        if (Bands.BandViewModel.isReorderingBand(this._draggableModel)) {
                            this._undoEngine && this._undoEngine.start();
                            this._draggableModel["level"](targetModel["level"]());
                            this._undoEngine && this._undoEngine.end();
                        }
                        else {
                            var draggableInfoClone = this._serializer.serialize(this._draggableModel);
                            var weightsCells = null;
                            if (draggableInfoClone["@ControlType"] === "XRTableCell" && targetModel.parentModel() === this._draggableParent) {
                                weightsCells = clonedSiblings.filter(function (cell) {
                                    return cell.name.peek() !== _this._draggableModel.name.peek();
                                }).map(function (cell) { return cell.weight.peek(); });
                            }
                            var shiftChildrenCount = this._shiftChildrenCount(this._target);
                            var draggableData = this._draggable.data;
                            this._draggableParent.removeChild(this._draggableModel);
                            if (this._canReorder(this._target, draggableData)) {
                                if (targetModel.parentModel() instanceof Controls.XRTableControlViewModel || targetModel.parentModel() instanceof Controls.XRTableRowViewModel) {
                                    return this._insertTableChilds(targetModel.parentModel(), draggableInfoClone, siblings.indexOf(targetModel) + shiftChildrenCount, weightsCells);
                                }
                                else {
                                    siblings && siblings.splice(siblings.indexOf(targetModel) + shiftChildrenCount, 0, this._draggableModel);
                                }
                            }
                            else {
                                if (targetModel instanceof Controls.XRTableControlViewModel || targetModel instanceof Controls.XRTableRowViewModel) {
                                    return this._insertTableChilds(targetModel, draggableInfoClone, 0);
                                }
                                else {
                                    var targetRect = targetModel.surface.rect();
                                    var draggableRect = this._draggableModel.surface.rect();
                                    var rect = {};
                                    if (targetRect.width < draggableRect.left + draggableRect.width) {
                                        rect["left"] = targetRect.width - draggableRect.width;
                                        rect["left"] = rect["left"] > 0 ? rect["left"] : 0;
                                    }
                                    if (targetRect.height < draggableRect.top + draggableRect.height) {
                                        rect["top"] = targetRect.height - draggableRect.height;
                                        rect["top"] = rect["top"] > 0 ? rect["top"] : 0;
                                    }
                                    this._draggableModel.surface.rect(rect);
                                    targetModel.addChild(this._draggableModel);
                                }
                            }
                        }
                        return this._draggableModel.surface;
                    };
                    return ReportControlsDragDropHelper;
                }());
                Internal.ReportControlsDragDropHelper = ReportControlsDragDropHelper;
                var ReportSnapLinesCollector = (function (_super) {
                    __extends(ReportSnapLinesCollector, _super);
                    function ReportSnapLinesCollector(_rtl) {
                        var _this = _super.call(this) || this;
                        _this._rtl = _rtl;
                        return _this;
                    }
                    ReportSnapLinesCollector.prototype._getCollection = function (parent) {
                        if (parent["controls"] && parent["controls"]().length > 0) {
                            return parent["controls"]();
                        }
                        else if (parent["rows"]) {
                            return parent["rows"]();
                        }
                        else if (parent["cells"]) {
                            return parent["cells"]();
                        }
                    };
                    ReportSnapLinesCollector.prototype._enumerateBandCollection = function (bandsHolder, parentAbsoluteProsition, callback) {
                        var collection = bandsHolder.bands();
                        for (var i = 0; i < collection.length; i++) {
                            var itemRect = collection[i].getUsefulRect();
                            var itemAbsoluteRect = this._processBandRtl({
                                top: collection[i].absolutePosition.y(),
                                bottom: collection[i].absolutePosition.y() + collection[i].height(),
                                left: itemRect.left + parentAbsoluteProsition.left,
                                right: itemRect.right + parentAbsoluteProsition.left
                            });
                            if (collection[i] instanceof Bands.DetailReportBandSurface) {
                                this._enumerateBandCollection(collection[i].bandsHolder, itemAbsoluteRect, callback);
                            }
                            else {
                                callback(collection[i], itemAbsoluteRect);
                            }
                        }
                        if (bandsHolder.verticalBandsContainer && !bandsHolder.verticalBandsContainer.scrollOffset()) {
                            bandsHolder.verticalBandsContainer.verticalBands().forEach((function (band) {
                                var absoluteRect = {
                                    top: band.absolutePosition.y(),
                                    bottom: band.absolutePosition.y() + band._height(),
                                    left: band.absolutePosition.x() - band.verticalBandsContainer.scrollOffset(),
                                    right: band.absolutePosition.x() + band.rect().width - band.verticalBandsContainer.scrollOffset()
                                };
                                callback(band, absoluteRect);
                            }));
                        }
                    };
                    ReportSnapLinesCollector.prototype._processBandRtl = function (itemAbsoluteRect) {
                        if (this._rtl()) {
                            itemAbsoluteRect.right = itemAbsoluteRect.left;
                            itemAbsoluteRect.left = 0;
                        }
                        return itemAbsoluteRect;
                    };
                    ReportSnapLinesCollector.prototype._enumerateCollection = function (parent, parentAbsoluteProsition, callback) {
                        if (parent.bandsHolder)
                            this._enumerateBandCollection(parent.bandsHolder, parentAbsoluteProsition, callback);
                        _super.prototype._enumerateCollection.call(this, parent, parentAbsoluteProsition, callback);
                    };
                    return ReportSnapLinesCollector;
                }(DevExpress.Analytics.Internal.SnapLinesCollector));
                Internal.ReportSnapLinesCollector = ReportSnapLinesCollector;
                var ReportExplorerDragDropHandler = (function (_super) {
                    __extends(ReportExplorerDragDropHandler, _super);
                    function ReportExplorerDragDropHandler(surface, selection, undoEngine, dragHelperContent) {
                        var _this = _super.call(this, surface, selection, undoEngine, null, dragHelperContent) || this;
                        _this.undoEngine = undoEngine;
                        _this._lastList = null;
                        _this._timeout = null;
                        _this._isStyle = function (item) { return item.data && item.data.specifics === "stylemodel"; };
                        _this._isFormatingRule = function (item) { return item.data && item.data.specifics === "formattingrule"; };
                        _this._isReportControl = function (item) { return !_this._isStyle(item) && !_this._isFormatingRule(item); };
                        _this.reportControlsDragDropHelper = null;
                        _this.cursor = 'arrow';
                        _this.alwaysAlt = true;
                        _this.containment = '.dxrd-designer';
                        _this["cursorAt"] = {
                            top: 0,
                            left: 0
                        };
                        _this.helper = function (draggable, event) {
                            var item = draggable;
                            selectTreeListItem(item, event);
                            if (_this._isReportControl(item)) {
                                var target = $(event.target).closest(".ui-draggable");
                                var rect = new DevExpress.Analytics.Elements.Rectangle(6, 6, null, target.height());
                                rect.className = "dxrd-image-ghost-report";
                                _this.dragHelperContent.reset();
                                dragHelperContent.setContent(rect, {
                                    template: "dxrd-drag-helper-source-reportexplorer",
                                    data: {
                                        imageClassName: item.imageClassName,
                                        imageTemplateName: item.imageTemplateName,
                                        text: item.text
                                    }
                                });
                            }
                            else {
                                var rect = new DevExpress.Analytics.Elements.Rectangle(12, 12, 12, 12);
                                var templateId = "";
                                if (_this._isStyle(item)) {
                                    rect.className = "dxrd-image-ghost-stylemodel";
                                    templateId = "dxrd-svg-reportexplorer-style";
                                }
                                else if (_this._isFormatingRule(item)) {
                                    rect.className = "dxrd-image-ghost-formattingrule";
                                    templateId = "dxrd-svg-reportexplorer-formatting_rule";
                                }
                                _this.dragHelperContent.reset();
                                dragHelperContent.setContent(rect, (templateId ? { template: templateId } : null));
                                _this._size.width(12);
                                _this._size.height(12);
                            }
                        };
                        return _this;
                    }
                    ReportExplorerDragDropHandler.prototype.startDrag = function (draggable) {
                        if (this._isReportControl(draggable)) {
                            this.reportControlsDragDropHelper = new ReportControlsDragDropHelper(draggable, this.undoEngine());
                        }
                        else {
                            this.reportControlsDragDropHelper = null;
                        }
                        _super.prototype.startDrag.call(this, draggable);
                    };
                    ReportExplorerDragDropHandler.prototype.drag = function (event, ui) {
                        var _this = this;
                        if (this.reportControlsDragDropHelper) {
                            var target = event["toElement"] || (ko.dataFor(event.relatedTarget) && event.relatedTarget) || (event.originalEvent && event.originalEvent.target) || null;
                            if (target) {
                                this.reportControlsDragDropHelper.setNewDropTarget(ko.dataFor(target), target);
                            }
                            var _target = this.reportControlsDragDropHelper["_target"];
                            if (_target.hasItems && (_target.collapsed && _target.collapsed())) {
                                if (this._lastList !== _target) {
                                    this._timeout && clearTimeout(this._timeout);
                                    this._lastList = _target;
                                    this._timeout = setTimeout(function () {
                                        _this._lastList.toggleCollapsed();
                                    }, 500);
                                }
                            }
                            else {
                                this._lastList = null;
                                this._timeout && clearTimeout(this._timeout);
                            }
                        }
                        this.selection.dropTarget && this.dragHelperContent.isLocked(this.selection.dropTarget.locked);
                    };
                    ReportExplorerDragDropHandler.prototype.doStopDrag = function (ui, draggable, event) {
                        this.dragHelperContent.reset();
                        if (this.selection.dropTarget && !this.selection.dropTarget.locked) {
                            if (this.selection.dropTarget instanceof Controls.ReportSurface)
                                return;
                            var position = this._getAbsoluteSurfacePosition(ui);
                            this.selection.dropTarget.underCursor().x = position.left - this.selection.dropTarget["absolutePosition"].x();
                            this.selection.dropTarget.underCursor().y = position.top - this.selection.dropTarget["absolutePosition"].y();
                            if (draggable.data && draggable.data.specifics === "stylemodel") {
                                this.selection.dropTarget.getControlModel()["styleName"] && this.selection.dropTarget.getControlModel()["styleName"](draggable.data.displayName);
                            }
                            else if (draggable.data && draggable.data.specifics === "formattingrule") {
                                this.selection.dropTarget.getControlModel()["formattingRuleLinks"] && this.selection.dropTarget.getControlModel()["formattingRuleLinks"].push(Controls.FormattingRuleLink.createNew(draggable.data.data));
                            }
                            ;
                        }
                        else if (this.reportControlsDragDropHelper) {
                            this.selection.initialize(this.reportControlsDragDropHelper.doStopDrag());
                        }
                    };
                    return ReportExplorerDragDropHandler;
                }(DevExpress.Analytics.Internal.DragDropHandler));
                Internal.ReportExplorerDragDropHandler = ReportExplorerDragDropHandler;
                var ReportToolboxDragDropHandler = (function (_super) {
                    __extends(ReportToolboxDragDropHandler, _super);
                    function ReportToolboxDragDropHandler(surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory, onComponentAdded) {
                        var _this = _super.call(this, surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory) || this;
                        _this.onComponentAdded = function (e) { onComponentAdded && onComponentAdded(e); };
                        return _this;
                    }
                    ReportToolboxDragDropHandler.prototype.dispose = function () {
                        this.surface = null;
                        this.dragHelperContent = null;
                        this.snapHelper = null;
                    };
                    ReportToolboxDragDropHandler.prototype.helper = function (draggable) {
                        _super.prototype.helper.call(this, draggable);
                        var toolboxItem = draggable;
                        if (toolboxItem.type === "XRTableOfContents") {
                            var width = this.surface().pageWidth() - (this.surface().margins.right() + this.surface().margins.left());
                            var size = new DevExpress.Analytics.Elements.Size(width, 46);
                            this.recalculateSize(size);
                            this.dragHelperContent.reset();
                            this.dragHelperContent.setContent(new DevExpress.Analytics.Elements.Rectangle(0, 0, width, this._size.height()));
                        }
                    };
                    ReportToolboxDragDropHandler.prototype._processProperty = function (propertyName, target, callback) {
                        if (target instanceof Object && !$.isFunction(target)) {
                            !!target[propertyName] && callback(target);
                            for (var name in target) {
                                if (target[name] instanceof Object && !$.isFunction(target[name])) {
                                    this._processProperty(propertyName, target[name], callback);
                                }
                            }
                        }
                    };
                    ReportToolboxDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
                        var reportSurface = this.surface();
                        var toolboxItem = $.extend(true, {}, draggable);
                        this._processProperty("@Padding", toolboxItem.info, function (target) {
                            var model = DevExpress.Analytics.Elements.PaddingModel.from(target["@Padding"]);
                            DevExpress.Analytics.Elements.PaddingModel.unitProperties.forEach(function (name) {
                                model[name](model[name]() * reportSurface.dpi() / 100);
                            });
                            model.dpi(reportSurface.dpi());
                            target["@Padding"] = model.toString();
                        });
                        _super.prototype.doStopDrag.call(this, ui, toolboxItem);
                    };
                    ReportToolboxDragDropHandler.prototype.addControl = function (control, dropTargetSurface, size) {
                        if (control.controlType === "XRTableOfContents") {
                            var reportSurface = this.surface();
                            var reportModel = reportSurface.getControlModel();
                            var targetBand = getBandIfItDoesNotContainTOC(reportModel, "ReportHeaderBand") || getBandIfItDoesNotContainTOC(reportModel, "ReportFooterBand");
                            if (!targetBand)
                                return;
                            dropTargetSurface = DevExpress.Analytics.Internal.findSurface(targetBand);
                            if (!dropTargetSurface)
                                return;
                            var tocModel = control;
                            tocModel.allLevels().forEach(function (lvl) {
                                lvl.height(recalculateUnit(lvl.height(), targetBand.dpi()));
                            });
                        }
                        _super.prototype.addControl.call(this, control, dropTargetSurface, size);
                        var parent = dropTargetSurface.getControlModel();
                        dragDropComponentAdded(control, parent);
                        this.onComponentAdded({ parent: parent, model: control });
                    };
                    return ReportToolboxDragDropHandler;
                }(DevExpress.Analytics.Internal.ToolboxDragDropHandler));
                Internal.ReportToolboxDragDropHandler = ReportToolboxDragDropHandler;
                Internal.eventArgsTypes = {
                    "EvaluateBinding": "DevExpress.XtraReports.UI.BindingEventArgs",
                    "AfterPrint": "System.EventArgs",
                    "BeforePrint": "System.Drawing.Printing.PrintEventArgs",
                    "PrintOnPage": "DevExpress.XtraReports.UI.PrintOnPageEventArgs",
                    "Draw": "DevExpress.XtraReports.UI.DrawEventArgs",
                    "HtmlItemCreated": "DevExpress.XtraReports.UI.HtmlEventArgs",
                    "LocationChanged": "DevExpress.XtraReports.UI.ChangeEventArgs",
                    "ParentChanged": "DevExpress.XtraReports.UI.ChangeEventArgs",
                    "PreviewClick": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                    "PreviewDoubleClick": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                    "PreviewMouseDown": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                    "PreviewMouseMove": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                    "PreviewMouseUp": "DevExpress.XtraReports.UI.PreviewMouseEventArgs",
                    "SizeChanged": "DevExpress.XtraReports.UI.ChangeEventArgs",
                    "TextChanged": "System.EventArgs",
                    "SummaryCalculated": "DevExpress.XtraReports.UI.TextFormatEventArgs",
                    "SummaryGetResult": "DevExpress.XtraReports.UI.SummaryGetResultEventArgs",
                    "SummaryReset": "System.EventArgs",
                    "SummaryRowChanged": "System.EventArgs",
                    "BandLevelChanged": "System.EventArgs",
                    "SortingSummaryGetResult": "DevExpress.XtraReports.UI.GroupSortingSummaryGetResultEventArgs",
                    "SortingSummaryReset": "System.EventArgs",
                    "SortingSummaryRowChanged": "DevExpress.XtraReports.UI.GroupSortingSummaryRowChangedEventArgs",
                    "DataSourceDemanded": "System.EventArgs",
                    "BandHeightChanged": "DevExpress.XtraReports.UI.BandEventArgs",
                    "DataSourceRowChanged": "DevExpress.XtraReports.UI.DataSourceRowEventArgs",
                    "FillEmptySpace": "DevExpress.XtraReports.UI.BandEventArgs",
                    "PrintProgress": "DevExpress.XtraPrinting.PrintProgressEventArgs",
                    "ParametersRequestBeforeShow": "DevExpress.XtraReports.Parameters.ParametersRequestEventArgs",
                    "ParametersRequestValueChanged": "DevExpress.XtraReports.Parameters.ParametersRequestValueChangedEventArgs",
                    "ParametersRequestSubmit": "DevExpress.XtraReports.Parameters.ParametersRequestEventArgs",
                    "GetValue": "DevExpress.XtraReports.UI.GetValueEventArgs",
                    "FieldValueDisplayText": "DevExpress.XtraReports.UI.PivotGrid.PivotFieldDisplayTextEventArgs",
                    "PrintCell": "DevExpress.XtraReports.UI.PivotGrid.CustomExportCellEventArgs",
                    "PrintFieldValue": "DevExpress.XtraReports.UI.PivotGrid.CustomExportFieldValueEventArgs",
                    "PrintHeader": "DevExpress.XtraReports.UI.PivotGrid.CustomExportHeaderEventArgs",
                    "CustomSummary": "DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomSummaryEventArgs",
                    "CustomGroupInterval": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomGroupIntervalEventArgs",
                    "CustomChartDataSourceData": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomChartDataSourceDataEventArgs",
                    "CustomChartDataSourceRows": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomChartDataSourceRowsEventArgs",
                    "CustomCellDisplayText": "DevExpress.XtraReports.UI.PivotGrid.PivotCellDisplayTextEventArgs",
                    "CustomCellValue": "DevExpress.XtraReports.UI.PivotGrid.PivotCellValueEventArgs",
                    "CustomColumnWidth": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomColumnWidthEventArgs",
                    "CustomFieldSort": "DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomFieldSortEventArgs",
                    "CustomServerModeSort": "DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomServerModeSortEventArgs",
                    "CustomFieldValueCells": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomFieldValueCellsEventArgs",
                    "CustomRowHeight": "DevExpress.XtraReports.UI.PivotGrid.PivotCustomRowHeightEventArgs",
                    "CustomUnboundFieldData": "DevExpress.XtraReports.UI.PivotGrid.CustomFieldDataEventArgs",
                    "PrefilterCriteriaChanged": "System.EventArgs",
                    "CustomDrawSeries": "DevExpress.XtraCharts.CustomDrawSeriesEventArgs",
                    "CustomDrawSeriesPoint": "DevExpress.XtraCharts.CustomDrawSeriesPointEventArgs",
                    "CustomDrawCrosshair": "DevExpress.XtraCharts.CustomDrawCrosshairEventArgs",
                    "CustomDrawAxisLabel": "DevExpress.XtraCharts.CustomDrawAxisLabelEventArgs",
                    "CustomPaint": "DevExpress.XtraCharts.CustomPaintEventArgs",
                    "BoundDataChanged": "System.EventArgs",
                    "PieSeriesPointExploded": "DevExpress.XtraCharts.PieSeriesPointExplodedEventArgs",
                    "AxisScaleChanged": "DevExpress.XtraCharts.AxisScaleChangedEventArgs",
                    "AxisWholeRangeChanged": "DevExpress.XtraCharts.AxisRangeChangedEventArgs",
                    "AxisVisualRangeChanged": "DevExpress.XtraCharts.AxisRangeChangedEventArgs",
                    "SmallChartTextShowing": "System.EventArgs"
                };
                var EDITOR_CLASS = "dx-eventdropdowneditor dx-selectbox", EDITOR_ELLIPSIS_BUTTON_CLASS = "dx-button-normal dx-dropdowneditor-button dxrd-ellipsis-button", EDITOR_ELLIPSIS_BUTTON_ICON_CLASS = "dx-dropdowneditor-icon dxrd-ellipsis-image", EDITOR_ELLIPSIS_BUTTON_ICON_TEMPLATE = "dxrd-svg-ellipsis";
                var dxEventDropDownEditor = (function (_super) {
                    __extends(dxEventDropDownEditor, _super);
                    function dxEventDropDownEditor() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    dxEventDropDownEditor.prototype._getDefaultOptions = function () {
                        return $.extend(_super.prototype._getDefaultOptions.call(this), {
                            openOnFieldClick: false,
                            secondAction: null
                        });
                    };
                    dxEventDropDownEditor.prototype._init = function () {
                        _super.prototype._init.call(this);
                        this._initSecondAction();
                        var $element = $(this["element"]());
                        this._koContext = ko.contextFor($element[0]);
                    };
                    dxEventDropDownEditor.prototype._initSecondAction = function () {
                        this._secondAction = this["_createAction"](this.option("secondAction"));
                    };
                    dxEventDropDownEditor.prototype._render = function () {
                        var $element = $(this["element"]());
                        $element.addClass(EDITOR_CLASS);
                        _super.prototype._render.call(this);
                    };
                    dxEventDropDownEditor.prototype._renderDropDownButton = function () {
                        if (this._$ellipsisButton) {
                            this._$ellipsisButton.remove();
                            this._$ellipsisButton = null;
                        }
                        _super.prototype._renderDropDownButton.call(this);
                        this._$ellipsisButton = this._createEllipsisButton();
                        this._$ellipsisButton.prependTo(this["_buttonsContainer"]());
                        this._attachEllipsisButtonClickHandler();
                    };
                    dxEventDropDownEditor.prototype._createEllipsisButton = function () {
                        var $buttonIcon = $("<div>").addClass(EDITOR_ELLIPSIS_BUTTON_ICON_CLASS).append(DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.templates[EDITOR_ELLIPSIS_BUTTON_ICON_TEMPLATE]);
                        ko.applyBindingsToDescendants(this._koContext, $buttonIcon[0]);
                        var $button = $("<div>").dxButton({
                            focusStateEnabled: false,
                            disabled: this.option("readOnly")
                        }).removeClass("dx-button");
                        $button.addClass(EDITOR_ELLIPSIS_BUTTON_CLASS);
                        $button.append($buttonIcon);
                        $button.find(".dx-button-content").remove();
                        return $button;
                    };
                    dxEventDropDownEditor.prototype._attachEllipsisButtonClickHandler = function () {
                        if (this._$ellipsisButton) {
                            this._$ellipsisButton.dxButton("option", "onClick", this._secondAction.bind(this));
                        }
                    };
                    dxEventDropDownEditor.prototype._optionChanged = function (args) {
                        switch (args.name) {
                            case "secondAction":
                                this._initSecondAction();
                                this._attachEllipsisButtonClickHandler();
                                break;
                            default:
                                _super.prototype._optionChanged.call(this, args);
                        }
                    };
                    return dxEventDropDownEditor;
                }(DevExpress.ui.dxSelectBox));
                Internal.dxEventDropDownEditor = dxEventDropDownEditor;
                DevExpress.registerComponent("dxEventDropDownEditor", dxEventDropDownEditor);
                var LanguageHelper = (function () {
                    function LanguageHelper(report) {
                        this._report = report;
                    }
                    LanguageHelper.prototype.getLanguageMode = function () {
                        if (this._report()) {
                            var scriptLanguage = this._report().scriptLanguage();
                            switch (scriptLanguage) {
                                case "CSharp":
                                    return "ace/mode/csharp";
                                case "VisualBasic":
                                    return "ace/mode/vbscript";
                                default:
                                    return "ace/mode/text";
                            }
                        }
                    };
                    LanguageHelper.prototype.createNewHandler = function (eventName, eventArgsType) {
                        if (this._report()) {
                            var scriptLanguage = this._report().scriptLanguage();
                            switch (scriptLanguage) {
                                case "CSharp":
                                    return "\r\nprivate void " + eventName + "(object sender, " + eventArgsType + " e) {\r\n\r\n}\r\n";
                                case "VisualBasic":
                                    return "\r\nPrivate Sub " + eventName + "(ByVal sender As Object, ByVal e As " + eventArgsType + ")\r\n\r\nEnd Sub\r\n";
                                case "JScript":
                                    return "\r\nprivate final function " + eventName + "(sender : System.Object, e : " + eventArgsType + ") {\r\n\r\n}\r\n";
                            }
                        }
                    };
                    LanguageHelper.prototype.getFunctionNamesFromScript = function (scripts) {
                        if (this._report()) {
                            var keyWords = { 'CSharp': 'void ', 'VisualBasic': 'Sub ', 'JScript': 'function ' };
                            var scriptLanguage = this._report().scriptLanguage();
                            var events = [];
                            if (scripts) {
                                var lines = scripts.match(new RegExp(keyWords[scriptLanguage] + '(([A-Z])|[a-z])\\w+\\(', 'g'));
                                lines && lines.forEach(function (line) {
                                    events.push(line.substring(keyWords[scriptLanguage].length, line.length - 1));
                                });
                            }
                            return events;
                        }
                    };
                    LanguageHelper.prototype.createCompleters = function (editor, bindingContext, viewModel) {
                        return [new ReportCompleter(bindingContext.$root.model, editor, viewModel.guid)];
                    };
                    return LanguageHelper;
                }());
                Internal.LanguageHelper = LanguageHelper;
                var ReportCompleter = (function () {
                    function ReportCompleter(report, editorInstance, guid) {
                        this.completions = [];
                        this.report = report;
                        this.editorInstance = editorInstance;
                        this.guid = guid;
                        this.oldPrefix = null;
                    }
                    ReportCompleter.prototype.__getCompletions = function (editor, session, pos, prefix, callback) {
                        var self = this;
                        ReportScriptService.getCompletions(editor, session, pos, prefix, callback, this.report(), this.editorInstance, this.guid())
                            .done(function (result) {
                            if (result) {
                                if (result.State === 1) {
                                    ReportScriptService.setCodeDom(self.guid(), JSON.stringify({
                                        "XtraReportsLayoutSerializer": ScriptsEditor._createReportDummy(self.report().serialize())
                                    })).done(function (result) {
                                        self.guid(result.Guid);
                                        self.__getCompletions(editor, session, pos, prefix, callback);
                                    });
                                }
                                else {
                                    var errors = [];
                                    if (result.Errors.length > 0) {
                                        var linesCount = editor.getSession().getLength();
                                        result.Errors.forEach(function (error) {
                                            if (error.Line < linesCount && error.Line >= 0) {
                                                errors.push({
                                                    row: error.Line + 1,
                                                    column: error.Column,
                                                    text: error.ErrorNumber + " - " + error.ErrorText,
                                                    type: error.IsWarning ? "warning" : "error"
                                                });
                                            }
                                        });
                                        editor.getSession().setAnnotations(errors);
                                    }
                                    self.completions = result.Completions;
                                    callback(null, result.Completions);
                                }
                            }
                        });
                    };
                    ReportCompleter.prototype.getCompletions = function (editor, session, pos, prefix, callback) {
                        if (!this.oldPrefix || prefix[0] !== this.oldPrefix) {
                            this.oldPrefix = prefix[0];
                            this.__getCompletions(editor, session, pos, prefix, callback);
                        }
                        else if (this.oldPrefix == prefix[0] && this.completions.length > 0) {
                            callback(null, this.completions);
                        }
                    };
                    return ReportCompleter;
                }());
                Internal.ReportCompleter = ReportCompleter;
                var ScriptsEditor = (function (_super) {
                    __extends(ScriptsEditor, _super);
                    function ScriptsEditor(report, allControls) {
                        var _this = _super.call(this) || this;
                        _this._selectionNotEmpty = ko.observable(false);
                        _this._canUndo = ko.observable(false);
                        _this._canRedo = ko.observable(false);
                        _this._cursorPosition = ko.observable().extend({ throttle: 100 });
                        _this.guid = ko.observable(null);
                        _this.editorContainer = ko.observable();
                        _this.editorVisible = ko.observable(false);
                        _this.toolbarItems = [];
                        _this.controls = ko.observableArray([]);
                        _this.selectedControl = ko.observable();
                        _this.events = ko.observable([]);
                        _this.selectedEvent = ko.observable();
                        _this.validateDisabled = ko.observable(false);
                        _this.aceOptions = {
                            enableBasicAutocompletion: true,
                            enableSnippets: true,
                            enableLiveAutocompletion: true,
                            showPrintMargin: false
                        };
                        var self = _this;
                        var cursorPositionChanging = false;
                        _this.languageHelper = new LanguageHelper(report);
                        _this._updateEditorState = function () {
                            if (_this.editorContainer() && _this.editorContainer().getSession()) {
                                _this._canUndo(_this.editorContainer().getSession().getUndoManager().hasUndo());
                                _this._canRedo(_this.editorContainer().getSession().getUndoManager().hasRedo());
                            }
                        };
                        _this.selectionChanged = function (editor) {
                            _this._selectionNotEmpty(!editor.getSelection().isEmpty());
                            _this._updateEditorState();
                            editor.focus();
                        };
                        _this.report = report;
                        _this.scriptsText = ko.pureComputed({
                            read: function () { return _this.report() && _this.report().scriptsSource(); },
                            write: function (newText) { _this.report() && _this.report().scriptsSource(newText); }
                        });
                        _this._initializeToolbar();
                        _this.editorContainer.subscribe(function (editor) {
                            if (editor.getSession()) {
                                editor.getSession().getSelection().on("changeSelection", function () {
                                    _this.selectionChanged(editor);
                                });
                                editor.getSession().getSelection().on("changeCursor", function () {
                                    self._cursorPosition(editor.getCursorPosition());
                                });
                            }
                        });
                        _this._cursorPosition.subscribe(function (currentCursorPosition) {
                            var currentFunctionName = _this._getFunctionName(currentCursorPosition.row), control, event;
                            _this.controls().some(function (ctrl) {
                                control = ctrl;
                                event = _this._getEventByFunction(ctrl, currentFunctionName);
                                return !!event;
                            });
                            if (control && event) {
                                try {
                                    cursorPositionChanging = true;
                                    _this.selectedControl(control);
                                    _this.selectedEvent(event);
                                }
                                finally {
                                    cursorPositionChanging = false;
                                }
                            }
                        });
                        _this._disposables.push(ko.computed(function () {
                            _this.controls(allControls().filter(function (control) { return !!control.scripts && !control.lockedInUserDesigner(); }));
                        }));
                        _this.selectedControl.subscribe(function (newSelectedControl) {
                            var eventsList = [];
                            if (newSelectedControl) {
                                var info = newSelectedControl.getInfo();
                                var scripts = info.filter(function (x) { return x.propertyName === "scripts"; })[0];
                                eventsList = scripts && scripts.info.filter(function (x) { return ko.unwrap(x.visible) !== false && !ko.unwrap(x.disabled); }).map(function (item) {
                                    return item.propertyName.indexOf("on") === 0 ? item.propertyName.substring(2) : item.propertyName;
                                });
                            }
                            _this.selectedEvent("");
                            _this.events(eventsList);
                        });
                        _this._ensureFunction = function (functionName, eventArgsType) {
                            var editorContainer = _this.editorContainer();
                            if (editorContainer) {
                                var editorContent = editorContainer.getValue();
                                if (editorContent.indexOf(functionName) === -1) {
                                    var newEventHandler = _this.languageHelper.createNewHandler(functionName, eventArgsType);
                                    var resultScripts = editorContent.concat(newEventHandler);
                                    _this.report().scriptsSource(resultScripts);
                                    editorContainer.setValue(resultScripts);
                                }
                            }
                        };
                        _this.ensureEvent = function (eventName, functionName, model) {
                            var selectedControl = model;
                            if (!selectedControl) {
                                selectedControl = _this.selectedControl();
                            }
                            functionName = ScriptsEditor.generateFunctionName(selectedControl, eventName, functionName, _this.allFunctionNames);
                            var eventArgsType = ScriptsEditor.getEventArgsType(eventName);
                            _this._ensureFunction(functionName, eventArgsType);
                            _this._changeSelection(functionName);
                            selectedControl.scripts["on" + eventName](functionName);
                            _this.selectedControl(selectedControl);
                            if (_this.controls.indexOf(selectedControl) === -1) {
                                _this.controls.push($.extend({ displayExpr: selectedControl.name }, selectedControl));
                            }
                            _this.selectedEvent(eventName);
                        };
                        _this.selectedEvent.subscribe(function (newEvent) {
                            if (!cursorPositionChanging && newEvent) {
                                var selectedControl = _this.selectedControl();
                                var selectedControlNewEvent = selectedControl && selectedControl.scripts["on" + newEvent];
                                var newEventFunction = selectedControlNewEvent && selectedControlNewEvent();
                                if (!newEventFunction || _this.allFunctionNames.indexOf(newEventFunction) === -1) {
                                    _this.ensureEvent(newEvent);
                                }
                                else {
                                    _this._changeSelection(newEventFunction);
                                }
                            }
                        });
                        return _this;
                    }
                    ScriptsEditor.prototype._changeSelection = function (textToSelect) {
                        var editorContainer = this.editorContainer();
                        if (editorContainer) {
                            editorContainer.find(textToSelect, {
                                backwards: false,
                                wrap: false,
                                caseSensitive: false,
                                wholeWord: true,
                                regExp: false
                            }, true);
                            editorContainer.findNext();
                            editorContainer.findPrevious();
                        }
                    };
                    ScriptsEditor.prototype._initializeToolbar = function () {
                        var _this = this;
                        var self = this, copyText = ko.observable("");
                        this.toolbarItems.push({
                            text: "Cut",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Cut", "AnalyticsCoreStringId.EditCut"); },
                            imageClassName: "dxrd-image-cut",
                            imageTemplateName: "dxrd-svg-toolbar-cut",
                            disabled: ko.pureComputed(function () { return !self.report() || !self._selectionNotEmpty(); }),
                            visible: true,
                            clickAction: function () {
                                copyText(self.editorContainer().getCopyText());
                                self.editorContainer().execCommand("cut");
                            },
                            hotKey: { ctrlKey: true, keyCode: "X".charCodeAt(0) }
                        });
                        this.toolbarItems.push({
                            text: "Copy",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Copy", "AnalyticsCoreStringId.Cmd_Copy"); },
                            imageClassName: "dxrd-image-copy",
                            imageTemplateName: "dxrd-svg-toolbar-copy",
                            disabled: ko.pureComputed(function () { return !self.report() || !self._selectionNotEmpty(); }),
                            visible: true,
                            clickAction: function () {
                                copyText(self.editorContainer().getCopyText());
                            },
                            hotKey: { ctrlKey: true, keyCode: "C".charCodeAt(0) }
                        });
                        this.toolbarItems.push({
                            text: "Paste",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Paste", "AnalyticsCoreStringId.Cmd_Paste"); },
                            imageClassName: "dxrd-image-paste",
                            imageTemplateName: "dxrd-svg-toolbar-paste",
                            disabled: ko.pureComputed(function () { return !self.report() || !copyText(); }),
                            visible: true,
                            clickAction: function () {
                                self.editorContainer().onPaste(copyText());
                            },
                            hotKey: { ctrlKey: true, keyCode: "V".charCodeAt(0) }
                        });
                        this.toolbarItems.push({
                            text: "Delete",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Delete", "AnalyticsCoreStringId.Cmd_Delete"); },
                            imageClassName: "dxrd-image-delete",
                            imageTemplateName: "dxrd-svg-toolbar-delete",
                            disabled: ko.pureComputed(function () { return !self.report() || !self._selectionNotEmpty(); }),
                            visible: true,
                            clickAction: function () {
                                self.editorContainer().execCommand("del");
                            }
                        });
                        this.toolbarItems.push({
                            text: "Undo",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Undo", "AnalyticsCoreStringId.Undo"); },
                            imageClassName: "dxrd-image-undo",
                            imageTemplateName: "dxrd-svg-toolbar-undo",
                            disabled: ko.pureComputed(function () { return !self.report() || !self._canUndo(); }),
                            visible: true,
                            clickAction: function () {
                                self.editorContainer().undo(false);
                                self._updateEditorState();
                            },
                            hotKey: { ctrlKey: true, keyCode: "Z".charCodeAt(0) },
                            hasSeparator: true
                        });
                        this.toolbarItems.push({
                            text: "Redo",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Redo", "AnalyticsCoreStringId.Redo"); },
                            imageClassName: "dxrd-image-redo",
                            imageTemplateName: "dxrd-svg-toolbar-redo",
                            disabled: ko.pureComputed(function () { return !self.report() || !self._canRedo(); }),
                            visible: true,
                            clickAction: function () {
                                self.editorContainer().redo(false);
                                self._updateEditorState();
                            },
                            hotKey: { ctrlKey: true, keyCode: "Y".charCodeAt(0) },
                        });
                        this.toolbarItems.push({
                            text: "Controls",
                            disabled: ko.pureComputed(function () { return !_this.report(); }),
                            visible: this.editorVisible,
                            clickAction: $.noop,
                            control: self.selectedControl,
                            controls: self.controls,
                            displayExpr: function (value) { return DevExpress.Analytics.Internal.getControlFullName(value); },
                            templateName: "dxrd-scripting-controlchooser",
                            hasSeparator: true
                        });
                        this.toolbarItems.push({
                            text: "Events",
                            disabled: ko.pureComputed(function () { return !_this.report(); }),
                            visible: this.editorVisible,
                            clickAction: $.noop,
                            events: self.events,
                            event: self.selectedEvent,
                            templateName: "dxrd-scripting-eventchooser"
                        });
                        this.toolbarItems.push({
                            text: "Validate",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Validate", "ReportStringId.ScriptEditor_Validate"); },
                            imageClassName: "dxrd-image-validate",
                            imageTemplateName: "dxrd-svg-toolbar-validate",
                            disabled: ko.pureComputed(function () {
                                return !self.report() || self.validateDisabled() || !self.editorContainer();
                            }),
                            visible: this.editorVisible,
                            hotKey: { ctrlKey: true, keyCode: "L".charCodeAt(0) },
                            clickAction: function () {
                                self.validateDisabled(true);
                                self._setScriptsText();
                                ReportScriptService.validateScripts(self.report()).done(function (result) {
                                    if (!self.editorContainer())
                                        return;
                                    var errors = [];
                                    result.forEach(function (error) {
                                        var linesCount = self.editorContainer().getSession().getLength();
                                        errors.push({
                                            row: self._getValidIndex(error.Line, linesCount),
                                            column: self._getValidIndex(error.Column, linesCount),
                                            text: error.ErrorNumber + " - " + error.ErrorText,
                                            type: error.IsWarning ? "warning" : "error"
                                        });
                                    });
                                    self.editorContainer().getSession().setAnnotations(errors);
                                    self.validateDisabled(false);
                                    if (errors.length > 0) {
                                        DevExpress.Analytics.Internal.ShowMessage(DevExpress.Analytics.Utils.getLocalization("The script contains error(s).", "ASPxReportsStringId.ReportDesigner_ScriptValidation_Message_ContainsErrors"));
                                    }
                                    else {
                                        DevExpress.Analytics.Internal.ShowMessage(DevExpress.Analytics.Utils.getLocalization("The script is valid.", "ASPxReportsStringId.ReportDesigner_ScriptValidation_Message_ValidScript"), "success");
                                    }
                                })
                                    .fail(function (result) {
                                    DevExpress.Analytics.Internal.ShowMessage(DevExpress.Analytics.Utils.getLocalization("Impossible to validate the script.", "ASPxReportsStringId.ReportDesigner_ScriptValidation_Error"));
                                    self.validateDisabled(false);
                                });
                            },
                            hasSeparator: true
                        });
                        this.toolbarItems.push({
                            text: "Design",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Design", "ReportStringId.RepTabCtl_Designer"); },
                            imageClassName: "dxrd-image-design",
                            imageTemplateName: "dxrd-svg-preview-report_designer",
                            disabled: ko.pureComputed(function () { return !_this.report(); }),
                            visible: this.editorVisible,
                            hotKey: { ctrlKey: true, keyCode: "P".charCodeAt(0) },
                            clickAction: function () {
                                self._setScriptsText();
                                self.editorVisible(false);
                            },
                            hasSeparator: true
                        });
                    };
                    ScriptsEditor.prototype._getValidIndex = function (errorPosition, linesCount) {
                        var position = errorPosition <= linesCount ? Math.max(1, errorPosition) : 1;
                        return Math.max(0, position - 1);
                    };
                    ScriptsEditor.prototype._setScriptsText = function () {
                        var editorContainer = this.editorContainer();
                        if (editorContainer) {
                            this.scriptsText(editorContainer.getValue());
                        }
                    };
                    ScriptsEditor.prototype._getFunctionName = function (row) {
                        var name = '', allLines = this.editorContainer().getSession().getDocument().getAllLines();
                        for (var rowIndex = row; rowIndex >= 0; rowIndex--) {
                            if (name) {
                                break;
                            }
                            for (var index = 0; index < this.allFunctionNames.length; index++) {
                                if (allLines[rowIndex].indexOf(this.allFunctionNames[index]) !== -1) {
                                    name = this.allFunctionNames[index];
                                    break;
                                }
                            }
                            ;
                        }
                        return name;
                    };
                    ScriptsEditor.prototype._getEventByFunction = function (control, currentFunctionName) {
                        var result = "";
                        for (var propertyName in control.scripts) {
                            if (result) {
                                break;
                            }
                            var eventName = propertyName;
                            if (ko.unwrap(control.scripts[eventName]) === currentFunctionName && eventName.indexOf("on") === 0) {
                                result = eventName.substring(2);
                            }
                        }
                        return result;
                    };
                    ScriptsEditor.generateFunctionName = function (control, eventName, functionName, allFunctionNames) {
                        if (allFunctionNames === void 0) { allFunctionNames = []; }
                        if (functionName || ko.unwrap(control.name)) {
                            return DevExpress.Analytics.Internal.replaceInvalidSymbols(functionName || (ko.unwrap(control.name) + "_" + eventName));
                        }
                        else {
                            return DevExpress.Analytics.Internal.getUniqueName(allFunctionNames, eventName);
                        }
                    };
                    ScriptsEditor.getEventArgsType = function (eventName) {
                        return Internal.eventArgsTypes[eventName] || "System.EventArgs";
                    };
                    ScriptsEditor._createReportDummy = function (report) {
                        Object.keys(report).forEach(function (propertyName) {
                            if ($.isPlainObject(report[propertyName])) {
                                ScriptsEditor._createReportDummy(report[propertyName]);
                                if ($.isEmptyObject(report[propertyName]) || (Object.keys(report[propertyName]).length === 1 && report[propertyName]["@Ref"]))
                                    delete report[propertyName];
                            }
                            else if (propertyName !== "@Ref" &&
                                propertyName.indexOf("Item") !== 0 &&
                                propertyName !== "@Name" &&
                                propertyName !== "Name" &&
                                propertyName !== "@ControlType" &&
                                propertyName !== "@ObjectType" &&
                                propertyName !== "@Content" &&
                                propertyName !== "@Type" &&
                                report[propertyName].toString().indexOf("#Ref-") !== 0) {
                                delete report[propertyName];
                            }
                        });
                        return report;
                    };
                    ScriptsEditor.prototype.initialize = function () {
                        var _this = this;
                        var self = this;
                        ReportScriptService.setCodeDom("", JSON.stringify({
                            "XtraReportsLayoutSerializer": ScriptsEditor._createReportDummy(this.report().serialize())
                        })).done(function (result) {
                            _this.guid(result.Guid);
                        });
                    };
                    Object.defineProperty(ScriptsEditor.prototype, "allFunctionNames", {
                        get: function () {
                            return this.scriptsText() ? this.languageHelper.getFunctionNamesFromScript(this.scriptsText()) : [];
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return ScriptsEditor;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.ScriptsEditor = ScriptsEditor;
                var FormatStringService = (function () {
                    function FormatStringService() {
                    }
                    FormatStringService.saveCustomPattern = function (typeString, format) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "formatString", encodeURIComponent(JSON.stringify({ action: "save", typeString: typeString, customFormatString: format })));
                    };
                    FormatStringService.removeCustomPattern = function (typeString, format) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "formatString", encodeURIComponent(JSON.stringify({ action: "remove", typeString: typeString, customFormatString: format })));
                    };
                    FormatStringService.updatePreview = function (value, typeString, format) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "formatStringPreview", encodeURIComponent(JSON.stringify({ value: value, typeString: typeString, formatString: format })));
                    };
                    FormatStringService.actions = { updatePreview: FormatStringService.updatePreview, removeCustomPattern: FormatStringService.removeCustomPattern, saveCustomPattern: FormatStringService.saveCustomPattern };
                    return FormatStringService;
                }());
                Internal.FormatStringService = FormatStringService;
                var ReportDataSourceService = (function () {
                    function ReportDataSourceService() {
                    }
                    ReportDataSourceService.fieldListCallback = function (request) {
                        var requestJson = JSON.stringify(request);
                        var encodedJson = encodeURIComponent(requestJson);
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'fieldList', encodedJson);
                    };
                    ReportDataSourceService.getCustomQueriesPreset = function (dataSource) {
                        return $.Deferred().resolve([]).promise();
                    };
                    ReportDataSourceService.sqlDataSourceFromBase64 = function (base64) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "dataSourceFromBase64", encodeURIComponent(base64));
                    };
                    ReportDataSourceService.getSqlDataSourceBase64 = function (dataSource) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "getDataSourceBase64", encodeURIComponent(JSON.stringify({ sqlDataSourceJSON: JSON.stringify({ SqlDataSource: new DevExpress.Analytics.Utils.ModelSerializer().serialize(dataSource) }) })));
                    };
                    ReportDataSourceService.getJsonDataSourceBase64 = function (dataSource) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "getJsonDataSourceBase64", encodeURIComponent(JSON.stringify({ jsonDataSourceJSON: JSON.stringify({ JsonDataSource: new DevExpress.Analytics.Utils.ModelSerializer().serialize(dataSource) }) })));
                    };
                    ReportDataSourceService.jsonDataSourceFromBase64 = function (base64) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "jsonDataSourceFromBase64", encodeURIComponent(JSON.stringify({ base64: base64 })));
                    };
                    return ReportDataSourceService;
                }());
                Internal.ReportDataSourceService = ReportDataSourceService;
                var ReportPreviewService = (function () {
                    function ReportPreviewService() {
                    }
                    ReportPreviewService.initializePreview = function (report) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "initializePreview", encodeURIComponent(JSON.stringify({ "XtraReportsLayoutSerializer": report.serialize() })), DevExpress.Reporting.Viewer.Internal.PreviewRequestWrapper.getProcessErrorCallback());
                    };
                    return ReportPreviewService;
                }());
                Internal.ReportPreviewService = ReportPreviewService;
                var ReportRenderingService = (function () {
                    function ReportRenderingService() {
                    }
                    ReportRenderingService.getChartImage = function (surface) {
                        return Chart.Internal.ChartRequests.getChartImage(Utils.HandlerUri, new DevExpress.Analytics.Utils.ModelSerializer().serialize(surface._control["chart"], Chart.Internal.chartSerializationsInfo), surface["position"].width(), surface["position"].height());
                    };
                    ReportRenderingService.getShapeImage = function (surface) {
                        var _usefulRect = surface.getUsefulRect();
                        var params = {
                            shapeType: surface._control["Shape"]()["shapeType"] && surface._control["Shape"]()["shapeType"]() || "Ellipse",
                            width: _usefulRect.width,
                            lineWidth: surface._control["lineWidth"](),
                            fillColor: DevExpress.Analytics.Utils.colorToString(surface._control["fillColor"]()),
                            lineStyle: surface._control["lineStyle"] && surface._control["lineStyle"]() || "Solid",
                            height: _usefulRect.height,
                            fillet: surface._control["Shape"]()["fillet"] && surface._control["Shape"]()["fillet"]() || 0,
                            numberOfSides: surface._control["Shape"]()["numberOfSides"] && surface._control["Shape"]()["numberOfSides"]() || 3,
                            angle: surface._control["angle"] && surface._control["angle"]() || 0,
                            arrowHeight: surface._control["Shape"]()["arrowHeight"] && surface._control["Shape"]()["arrowHeight"]() || 20,
                            arrowWidth: surface._control["Shape"]()["arrowWidth"] && surface._control["Shape"]()["arrowWidth"]() || 20,
                            concavity: surface._control["Shape"]()["concavity"] && surface._control["Shape"]()["concavity"]() || 5,
                            starPointCount: surface._control["Shape"]()["starPointCount"] && surface._control["Shape"]()["starPointCount"]() || 3,
                            horizontalLineWidth: surface._control["Shape"]()["horizontalLineWidth"] && surface._control["Shape"]()["horizontalLineWidth"]() || 10,
                            verticalLineWidth: surface._control["Shape"]()["verticalLineWidth"] && surface._control["Shape"]()["verticalLineWidth"]() || 10,
                            tipLength: surface._control["Shape"]()["tipLength"] && surface._control["Shape"]()["tipLength"]() || 30,
                            tailLength: surface._control["Shape"]()["tailLength"] && surface._control["Shape"]()["tailLength"]() || 30,
                            foreColor: DevExpress.Analytics.Utils.colorToString(surface._control["foreColor"] && surface._control["foreColor"]() || "black"),
                            stretch: surface._control["stretch"] && surface._control["stretch"]() || false,
                            padding: surface._control["padding"] && surface._control["padding"]() || DevExpress.Analytics.Elements.PaddingModel.defaultVal,
                            dpi: surface._control["dpi"] && surface._control["dpi"]() || 100
                        };
                        return Utils.HandlerUri + "?actionKey=shapeGlyph&arg=" + encodeURIComponent(JSON.stringify(params));
                    };
                    ReportRenderingService.getRichImage = function (surface, propertyName) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'renderRich', encodeURIComponent(JSON.stringify({
                            layout: JSON.stringify($.extend(new DevExpress.Analytics.Utils.ModelSerializer().serialize(surface._control), {
                                "@Font": surface._control["font"]()
                            })),
                            scale: surface._context.zoom(),
                            text: (surface._control["textRtf"]() || "").replace(/\n/g, "\r\n"),
                            rtf: (surface._control["_rtf"]() || "").replace(/\n/g, "\r\n"),
                            format: surface._control["format"](),
                            base64rtf: surface._control["_serializableRtfString"](),
                            propertyName: propertyName
                        })));
                    };
                    return ReportRenderingService;
                }());
                Internal.ReportRenderingService = ReportRenderingService;
                var ReportScriptService = (function () {
                    function ReportScriptService() {
                    }
                    ReportScriptService.validateScripts = function (report) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'validateScripts', encodeURIComponent(JSON.stringify({
                            report: JSON.stringify({
                                "XtraReportsLayoutSerializer": report.serialize()
                            })
                        })));
                    };
                    ReportScriptService.getCompletions = function (editor, session, pos, prefix, callback, report, editorInstance, guid) {
                        if (guid) {
                            return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "getCompletions", encodeURIComponent(JSON.stringify({
                                Line: pos.row,
                                Column: pos.column,
                                Guid: guid,
                                Script: editorInstance.getValue()
                            })));
                        }
                        else {
                            return $.Deferred().resolve().promise();
                        }
                    };
                    ReportScriptService.setCodeDom = function (key, reportLayout) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "setReportLayout", encodeURIComponent(JSON.stringify({
                            ReportLayout: reportLayout,
                            Key: key
                        })));
                    };
                    return ReportScriptService;
                }());
                Internal.ReportScriptService = ReportScriptService;
                var ReportStorageWeb = (function () {
                    function ReportStorageWeb() {
                    }
                    ReportStorageWeb.getErrorMessageHandler = function (defaultErrorMessage) {
                        return function (messageFromDefaultHandler, jqXHR, textStatus) {
                            var error = DevExpress.Analytics.Internal.getErrorMessage(jqXHR);
                            DevExpress.Analytics.Internal.NotifyAboutWarning(error || defaultErrorMessage || "Internal Server Error", true);
                        };
                    };
                    ReportStorageWeb.getReportByUrl = function (url) {
                        var $deferred = $.Deferred();
                        ReportStorageWeb.getData(url).done(function (result) {
                            if (result) {
                                var model = new Controls.ReportViewModel(JSON.parse(result.reportLayout));
                                updateDataSourceRefs(model, result.dataSourceRefInfo);
                                $deferred.resolve(model);
                            }
                            else {
                                $deferred.reject();
                            }
                        }).fail(function () { return $deferred.reject(); });
                        return $deferred.promise();
                    };
                    ReportStorageWeb.getData = function (url) {
                        if (Internal.reportStorageWebIsRegister) {
                            return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'getData', encodeURIComponent(JSON.stringify({
                                reportUrl: url
                            })), ReportStorageWeb.getErrorMessageHandler());
                        }
                        else {
                            return $.Deferred().promise();
                        }
                    };
                    ReportStorageWeb.setData = function (layout, url) {
                        if (Internal.reportStorageWebIsRegister) {
                            return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'setData', encodeURIComponent(JSON.stringify({
                                reportLayout: JSON.stringify({
                                    "XtraReportsLayoutSerializer": layout
                                }),
                                reportUrl: url
                            })), ReportStorageWeb.getErrorMessageHandler(DevExpress.Analytics.Utils.getLocalization("Cannot save the report.", "ASPxReportsStringId.ReportDesigner_SaveReport_Error")));
                        }
                        else {
                            return $.Deferred().promise();
                        }
                    };
                    ReportStorageWeb.setNewData = function (layout, url) {
                        if (Internal.reportStorageWebIsRegister) {
                            return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'setNewData', encodeURIComponent(JSON.stringify({
                                reportLayout: JSON.stringify({
                                    "XtraReportsLayoutSerializer": layout
                                }),
                                reportUrl: url
                            })), ReportStorageWeb.getErrorMessageHandler(DevExpress.Analytics.Utils.getLocalization("Cannot save the report.", "ASPxReportsStringId.ReportDesigner_SaveReport_Error")));
                        }
                        else {
                            return $.Deferred().promise();
                        }
                    };
                    ReportStorageWeb.getUrls = function (subreports) {
                        if (Internal.reportStorageWebIsRegister) {
                            return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, "getUrls", encodeURIComponent('true'));
                        }
                        else {
                            return $.Deferred().resolve(Reporting.convertMapToKeyValuePair(subreports)).promise();
                        }
                    };
                    return ReportStorageWeb;
                }());
                Internal.ReportStorageWeb = ReportStorageWeb;
                var ReportWizardService = (function () {
                    function ReportWizardService() {
                    }
                    ReportWizardService.createWizardRequest = function (reportWizardModel, state, customizeWizardModelAction, oldReportJSON) {
                        var dataSourceJSON = null;
                        if (reportWizardModel.dataSource) {
                            var dataSourceData = new DevExpress.Analytics.Utils.ModelSerializer().serialize(reportWizardModel.dataSource.data);
                            dataSourceJSON = JSON.stringify(dataSourceData);
                        }
                        var wizardModel = reportWizardModel.useMasterDetailBuilder ? new Wizard.Legacy.RequestXtraReportModel(reportWizardModel) : new Wizard.Legacy.RequestReportModel(reportWizardModel);
                        customizeWizardModelAction && customizeWizardModelAction(wizardModel);
                        var requestJson = JSON.stringify({
                            reportModel: wizardModel,
                            dataSource: dataSourceJSON,
                            oldReport: oldReportJSON,
                            state: state,
                            colorScheme: reportWizardModel.colorScheme && (reportWizardModel.colorScheme.name === 'Custom' ? reportWizardModel.colorScheme.baseColor : reportWizardModel.colorScheme.name)
                        });
                        return encodeURIComponent(requestJson);
                    };
                    ReportWizardService.createNewWizardRequest = function (reportWizardState, requestType, state, customizeWizardModelAction, oldReportJSON) {
                        var dataSourceJSON = null;
                        reportWizardState.dataSource = reportWizardState.dataSource || reportWizardState.newDataSource;
                        if (reportWizardState.dataSource) {
                            dataSourceJSON = JSON.parse(reportWizardState.dataSource).data;
                        }
                        var wizardModel = new requestType(reportWizardState);
                        customizeWizardModelAction && customizeWizardModelAction(wizardModel);
                        var requestJson = JSON.stringify({
                            reportModel: wizardModel,
                            dataSource: dataSourceJSON,
                            oldReport: oldReportJSON,
                            state: state,
                            colorScheme: reportWizardState.colorScheme && (reportWizardState.colorScheme.name === 'Custom' ? reportWizardState.colorScheme.baseColor : reportWizardState.colorScheme.name)
                        });
                        return encodeURIComponent(requestJson);
                    };
                    ReportWizardService.generateReportFromWizardModel = function (reportWizardModel, state, customizeWizardModelAction, oldReportJSON) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'generateReportFromWizardModel', this.createWizardRequest(reportWizardModel, state, customizeWizardModelAction, oldReportJSON));
                    };
                    ReportWizardService.generateReportFromWizardState = function (reportWizardState, requestType, state, customizeWizardModelAction, oldReportJSON) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'generateReportFromWizardModel', this.createNewWizardRequest(reportWizardState, requestType, state, customizeWizardModelAction, oldReportJSON));
                    };
                    ReportWizardService.createDataSource = function (reportWizardModel, state) {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'createDataSource', this.createWizardRequest(reportWizardModel, state, function (wizardModel) { return void 0; }));
                    };
                    ReportWizardService.getLabelReportWizardData = function () {
                        return DevExpress.Analytics.Internal.ajax(Utils.HandlerUri, 'labelReportWizardData', "");
                    };
                    ReportWizardService.createNewJsonDataSource = function (state, createJsonCallback) {
                        var jsonDataSource = DevExpress.Analytics.Wizard._restoreJsonDataSourceFromState(state);
                        var deferred = $.Deferred();
                        Internal.QBRequestWrapper.saveJsonSource(state.newConnectionName, jsonDataSource).done(function (connectionName) {
                            state.jsonSource = null;
                            state.connectionName = connectionName;
                            createJsonCallback(DevExpress.Analytics.Wizard._restoreJsonDataSourceFromState(state))
                                .done(function (result) {
                                result.data = Data.ObjectItem.createNew(result.data);
                                deferred.resolve(Wizard._convertToStateDataSource(result));
                            })
                                .fail(function () { return deferred.reject(); });
                        }).fail(function () { return deferred.reject(); });
                        return deferred.promise();
                    };
                    return ReportWizardService;
                }());
                Internal.ReportWizardService = ReportWizardService;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Wizard) {
                var _ReportWizardOptions = (function (_super) {
                    __extends(_ReportWizardOptions, _super);
                    function _ReportWizardOptions() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.wizardSettings = new Utils.ReportWizardSettings().createDefault();
                        _this.hideDataMemberSubItems = false;
                        return _this;
                    }
                    return _ReportWizardOptions;
                }(DevExpress.Analytics.Wizard._DataSourceWizardOptionsBase));
                Wizard._ReportWizardOptions = _ReportWizardOptions;
            })(Wizard = Designer.Wizard || (Designer.Wizard = {}));
            (function (Internal) {
                Internal._masterDetailWizardHeight = "600";
                Internal._masterDetailWizardWidth = "840";
                Internal._masterDetailScrollViewHeight = "100%";
                function overrideFullscreenDataSourceWizardPageMetadata(factory, pageId, create) {
                    var meta = factory.getMetadata(pageId);
                    meta.canNext = function (page) { return page.canFinish() || page.canNext(); };
                    meta.canFinish = function (page) { return page.canFinish(); };
                    meta.create = create;
                    var oldSetState = meta.setState;
                    meta.setState = function (data, state) {
                        oldSetState(data, state);
                        state.newDataSource = data.newDataSource;
                    };
                    var oldResetState = meta.resetState;
                    meta.resetState = function (state, defaultState) {
                        oldResetState(state, defaultState);
                        state.newDataSource = defaultState.newDataSource;
                    };
                }
                Internal.overrideFullscreenDataSourceWizardPageMetadata = overrideFullscreenDataSourceWizardPageMetadata;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Internal) {
                Internal.CONVERSION_COEEFICIENT = 0.0393701;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Wizard) {
                var ColorScheme = (function () {
                    function ColorScheme(name, localizationId, baseColor) {
                        this._isCustom = false;
                        this.name = name;
                        this.localizationId = localizationId;
                        this.baseColor = baseColor;
                        this.color = DevExpress.Analytics.Utils.colorFromString(baseColor)();
                        this.displayName = DevExpress.Analytics.Utils.getLocalization(this.name, this.localizationId);
                        this.selected = ko.observable(false);
                    }
                    return ColorScheme;
                }());
                Wizard.ColorScheme = ColorScheme;
                var CustomColorScheme = (function (_super) {
                    __extends(CustomColorScheme, _super);
                    function CustomColorScheme(name, localizationId, baseColor) {
                        var _this = _super.call(this, name, localizationId, baseColor) || this;
                        _this.color = DevExpress.Analytics.Utils.colorFromString(baseColor);
                        _this.editorColor = ko.observable(_this.color());
                        _this.popoverVisible = ko.observable(false);
                        return _this;
                    }
                    CustomColorScheme.prototype.applyColor = function () {
                        this.color(this.editorColor());
                        this.baseColor = DevExpress.Analytics.Utils.colorToString(this.editorColor());
                        this.popoverVisible(false);
                    };
                    CustomColorScheme.prototype.resetColor = function () {
                        this.editorColor(this.color());
                        this.popoverVisible(false);
                    };
                    return CustomColorScheme;
                }(ColorScheme));
                Wizard.CustomColorScheme = CustomColorScheme;
                var ReportLayout;
                (function (ReportLayout) {
                    ReportLayout[ReportLayout["stepped"] = 0] = "stepped";
                    ReportLayout[ReportLayout["block"] = 1] = "block";
                    ReportLayout[ReportLayout["outline1"] = 2] = "outline1";
                    ReportLayout[ReportLayout["outline2"] = 3] = "outline2";
                    ReportLayout[ReportLayout["alignLeft1"] = 4] = "alignLeft1";
                    ReportLayout[ReportLayout["alignLeft2"] = 5] = "alignLeft2";
                    ReportLayout[ReportLayout["columnar"] = 6] = "columnar";
                    ReportLayout[ReportLayout["tabular"] = 7] = "tabular";
                    ReportLayout[ReportLayout["justified"] = 8] = "justified";
                })(ReportLayout = Wizard.ReportLayout || (Wizard.ReportLayout = {}));
                var LayoutTypeItem = (function () {
                    function LayoutTypeItem(textValue, textID, layoutType, margin) {
                        this.layoutType = layoutType;
                        this.margin = margin;
                        this.text = DevExpress.Analytics.Utils.getLocalization(textValue, textID);
                    }
                    Object.defineProperty(LayoutTypeItem.prototype, "imageClassName", {
                        get: function () {
                            return "dxrd-report-layout-type-image-" + ReportLayout[this.layoutType].toLowerCase();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return LayoutTypeItem;
                }());
                Wizard.LayoutTypeItem = LayoutTypeItem;
                var PageOrientation;
                (function (PageOrientation) {
                    PageOrientation[PageOrientation["Portrait"] = 0] = "Portrait";
                    PageOrientation[PageOrientation["Landscape"] = 1] = "Landscape";
                })(PageOrientation = Wizard.PageOrientation || (Wizard.PageOrientation = {}));
                var PageOrientationItem = (function () {
                    function PageOrientationItem(textValue, textID, orientation) {
                        this.orientation = orientation;
                        this.text = DevExpress.Analytics.Utils.getLocalization(textValue, textID);
                    }
                    return PageOrientationItem;
                }());
                Wizard.PageOrientationItem = PageOrientationItem;
            })(Wizard = Designer.Wizard || (Designer.Wizard = {}));
            (function (Internal) {
                var MasterDetailInfoBase = (function () {
                    function MasterDetailInfoBase(name, specifics, displayName) {
                        this.name = name;
                        this.specifics = specifics;
                        this.displayName = displayName;
                        if (!this.displayName)
                            this.displayName = this.name;
                    }
                    return MasterDetailInfoBase;
                }());
                Internal.MasterDetailInfoBase = MasterDetailInfoBase;
                var MasterDetailFieldInfo = (function (_super) {
                    __extends(MasterDetailFieldInfo, _super);
                    function MasterDetailFieldInfo(field) {
                        var _this = _super.call(this, field.name, field.specifics, field.displayName) || this;
                        _this.checked = !field.unChecked();
                        return _this;
                    }
                    return MasterDetailFieldInfo;
                }(MasterDetailInfoBase));
                Internal.MasterDetailFieldInfo = MasterDetailFieldInfo;
                var MasterDetailQueryInfo = (function (_super) {
                    __extends(MasterDetailQueryInfo, _super);
                    function MasterDetailQueryInfo(dataMember) {
                        var _this = _super.call(this, dataMember.name, dataMember.specifics, dataMember.displayName) || this;
                        _this._complexFields = [];
                        _this._complexRelations = [];
                        _this.fields = [];
                        _this.relations = [];
                        _this.path = dataMember.path;
                        _this.checked = dataMember.checked();
                        dataMember.children().forEach(function (item) {
                            if (!item.isList || item.isComplex) {
                                if (item.isComplex && item instanceof DevExpress.Analytics.Wizard.Internal.DataMemberTreeNode) {
                                    _this._expandComplexFieds(item);
                                }
                                else {
                                    _this.fields.push(new MasterDetailFieldInfo(item));
                                }
                            }
                            else {
                                _this.relations.push(new MasterDetailQueryInfo(item));
                            }
                        });
                        _this.fields = _this.fields.concat(_this._complexFields);
                        _this.relations = _this.relations.concat(_this._complexRelations);
                        return _this;
                    }
                    MasterDetailQueryInfo.prototype._expandComplexFieds = function (complexField) {
                        var _this = this;
                        complexField.children().forEach(function (child) {
                            var newChild = $.extend({}, child, { name: complexField.name + "." + child.name });
                            if (child instanceof DevExpress.Analytics.Wizard.Internal.FieldTreeNode) {
                                _this._complexFields.push(new MasterDetailFieldInfo(newChild));
                            }
                            if (!child.isComplex && child instanceof DevExpress.Analytics.Wizard.Internal.DataMemberTreeNode) {
                                _this._complexRelations.push(new MasterDetailQueryInfo(newChild));
                            }
                            if (child.isComplex && child instanceof DevExpress.Analytics.Wizard.Internal.DataMemberTreeNode) {
                                _this._expandComplexFieds(newChild);
                            }
                        });
                    };
                    return MasterDetailQueryInfo;
                }(MasterDetailInfoBase));
                Internal.MasterDetailQueryInfo = MasterDetailQueryInfo;
                var DataMemberCustomCheckedTreeNode = (function (_super) {
                    __extends(DataMemberCustomCheckedTreeNode, _super);
                    function DataMemberCustomCheckedTreeNode(name, displayName, specifics, isChecked, path, afterCheckToggled) {
                        var _this = _super.call(this, name, displayName, specifics, isChecked, path, afterCheckToggled) || this;
                        _this.checked = ko.pureComputed({
                            read: function () {
                                var lists = _this.children().filter(function (item) { return DevExpress.Analytics.Internal.isList(item); });
                                if (lists.length === 0) {
                                    return _this._checked();
                                }
                                else {
                                    var checkedChildren = 0;
                                    var partiallySelectedItems = 0;
                                    lists.forEach(function (item) {
                                        if (item.checked() === true) {
                                            checkedChildren++;
                                        }
                                        else if (item.checked() !== false) {
                                            partiallySelectedItems++;
                                        }
                                    });
                                    if (checkedChildren > 0)
                                        _this._checked(true);
                                    if (checkedChildren === lists.length) {
                                        return true;
                                    }
                                    else {
                                        return _this._checked() || partiallySelectedItems > 0 ? undefined : false;
                                    }
                                }
                            }
                        });
                        _this.checked.subscribe(function (item) {
                            afterCheckToggled && afterCheckToggled(_this);
                        });
                        if (isChecked)
                            afterCheckToggled && afterCheckToggled(_this);
                        return _this;
                    }
                    DataMemberCustomCheckedTreeNode.prototype.setChecked = function (value) {
                        if (!value || (!this.unChecked() && value)) {
                            this.children().forEach(function (item) { return Internal.isList(item) && item.setChecked(false); });
                            this._checked(false);
                        }
                        else
                            this._checked(value);
                    };
                    return DataMemberCustomCheckedTreeNode;
                }(DevExpress.Analytics.Wizard.Internal.DataMemberTreeNode));
                Internal.DataMemberCustomCheckedTreeNode = DataMemberCustomCheckedTreeNode;
                var MasterDetailTreeListController = (function (_super) {
                    __extends(MasterDetailTreeListController, _super);
                    function MasterDetailTreeListController(hideDataMemberSubItems) {
                        var _this = _super.call(this) || this;
                        _this.hideDataMemberSubItems = hideDataMemberSubItems || ko.observable(false);
                        return _this;
                    }
                    MasterDetailTreeListController.prototype.canSelect = function (value) {
                        return (value.hasItems && !!value.path) || value.data.specifics === "none";
                    };
                    MasterDetailTreeListController.prototype.hasItems = function (item) {
                        if (this.hideDataMemberSubItems()) {
                            return false;
                        }
                        return _super.prototype.hasItems.call(this, item);
                    };
                    return MasterDetailTreeListController;
                }(DevExpress.Analytics.Widgets.Internal.DataMemberTreeListController));
                Internal.MasterDetailTreeListController = MasterDetailTreeListController;
                var AvailableFieldsTreeListController = (function (_super) {
                    __extends(AvailableFieldsTreeListController, _super);
                    function AvailableFieldsTreeListController(rootItems) {
                        var _this = _super.call(this, null) || this;
                        _this.rootItems = rootItems;
                        return _this;
                    }
                    AvailableFieldsTreeListController.prototype.itemsFilter = function (item) {
                        var visible = false;
                        if (!!item.path && DevExpress.Analytics.Internal.isList(item)) {
                            visible = this.rootItems().map(function (item) { return item["path"]; }).indexOf(item.path) > -1;
                        }
                        else if (item.path) {
                            var stringEndIndex = item.path.lastIndexOf(item.name);
                            var pathParts = item.path.substring(0, stringEndIndex != -1 ? stringEndIndex : undefined).split('.');
                            if (pathParts.length > 0 && !pathParts[pathParts.length - 1])
                                pathParts.splice(pathParts.length - 1, 1);
                            visible = this.rootItems().map(function (item) { return item["path"]; }).indexOf(pathParts.join('.')) > -1;
                        }
                        if (!visible && !item.unChecked()) {
                            item.setChecked(false);
                        }
                        item.visible(visible);
                        return visible;
                    };
                    AvailableFieldsTreeListController.prototype.isDraggable = function (item) {
                        return false;
                    };
                    return AvailableFieldsTreeListController;
                }(Designer.Internal.FieldListController));
                Internal.AvailableFieldsTreeListController = AvailableFieldsTreeListController;
                var SummaryInfo = (function (_super) {
                    __extends(SummaryInfo, _super);
                    function SummaryInfo() {
                        var _this = _super.call(this) || this;
                        _this.field = ko.observable(null);
                        _this.selectedItems = ko.observableArray([]);
                        _this.functionNames = ko.observableArray([]);
                        _this.visible = ko.observable(true);
                        _this.value = {
                            value: _this.functionNames,
                            dataSource: Controls.Metadata.getSummaryFunctionValues(),
                            showDropDownButton: true,
                            selectedItems: _this.selectedItems,
                            displayExpr: function (value) {
                                if (!value)
                                    return value;
                                return DevExpress.Analytics.Utils.getLocalization(value.displayValue, value.localizationId);
                            }
                        };
                        return _this;
                    }
                    SummaryInfo.prototype.getOptions = function (options) { return options; };
                    return SummaryInfo;
                }(DevExpress.Analytics.Utils.Disposable));
                Internal.SummaryInfo = SummaryInfo;
                var SummaryInfoFieldlist = (function (_super) {
                    __extends(SummaryInfoFieldlist, _super);
                    function SummaryInfoFieldlist() {
                        var _this = _super.call(this) || this;
                        _this.selectedPath = ko.observable("");
                        _this._disposables.push(_this.displayName = ko.computed(function () {
                            if (!_this.field())
                                return null;
                            return [_this.field().parent.displayName, _this.field().displayName].join(" - ");
                        }).extend({ rateLimit: 0 }));
                        return _this;
                    }
                    return SummaryInfoFieldlist;
                }(SummaryInfo));
                Internal.SummaryInfoFieldlist = SummaryInfoFieldlist;
                var PageSetupHelper = (function () {
                    function PageSetupHelper() {
                    }
                    PageSetupHelper.mm2px = function (val) { return DevExpress.Analytics.Internal.unitsToPixel(10 * val, "TenthsOfAMillimeter"); };
                    PageSetupHelper.in2px = function (val) { return DevExpress.Analytics.Internal.unitsToPixel(100 * val, "HundredthsOfAnInch"); };
                    PageSetupHelper.px2mm = function (val) { return DevExpress.Analytics.Internal.pixelToUnits(val, "TenthsOfAMillimeter", 1) / 10; };
                    PageSetupHelper.px2in = function (val) { return DevExpress.Analytics.Internal.pixelToUnits(val, "HundredthsOfAnInch", 1) / 100; };
                    PageSetupHelper.mm2in = function (val) { return val * Designer.Internal.CONVERSION_COEEFICIENT; };
                    PageSetupHelper.in2mm = function (val) { return val / Designer.Internal.CONVERSION_COEEFICIENT; };
                    PageSetupHelper.getConverter = function (from, to) {
                        if (from === to)
                            return function (x) { return x; };
                        var unitCode = function (unit) {
                            switch (unit) {
                                case Wizard.GraphicsUnit.Inch:
                                    return "in";
                                case Wizard.GraphicsUnit.Millimeter:
                                    return "mm";
                                case Wizard.GraphicsUnit.Pixel:
                                    return "px";
                            }
                        };
                        var fnName = unitCode(from) + "2" + unitCode(to);
                        return PageSetupHelper[fnName];
                    };
                    return PageSetupHelper;
                }());
                Internal.PageSetupHelper = PageSetupHelper;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Wizard) {
                var ReportStyle;
                (function (ReportStyle) {
                    ReportStyle[ReportStyle["Bold"] = 0] = "Bold";
                    ReportStyle[ReportStyle["Casual"] = 1] = "Casual";
                    ReportStyle[ReportStyle["Compact"] = 2] = "Compact";
                    ReportStyle[ReportStyle["Corporate"] = 3] = "Corporate";
                    ReportStyle[ReportStyle["Formal"] = 4] = "Formal";
                })(ReportStyle = Wizard.ReportStyle || (Wizard.ReportStyle = {}));
                var ReportStyleItem = (function () {
                    function ReportStyleItem(textDefault, textID, reportStyle) {
                        this.reportStyle = reportStyle;
                        this.text = DevExpress.Analytics.Utils.getLocalization(textDefault, textID);
                    }
                    Object.defineProperty(ReportStyleItem.prototype, "className", {
                        get: function () {
                            return 'dxrd-wizard-report-style-image ' + ReportStyle[this.reportStyle].toLowerCase();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return ReportStyleItem;
                }());
                Wizard.ReportStyleItem = ReportStyleItem;
            })(Wizard = Designer.Wizard || (Designer.Wizard = {}));
            (function (Internal) {
                var SummaryOptionsWrapper = (function () {
                    function SummaryOptionsWrapper(name, displayName) {
                        this.avg = ko.observable(false);
                        this.count = ko.observable(false);
                        this.max = ko.observable(false);
                        this.min = ko.observable(false);
                        this.sum = ko.observable(false);
                        this._name = name;
                        this.columnName = displayName;
                    }
                    SummaryOptionsWrapper._getNumber = function (value) {
                        return value ? 1 : 0;
                    };
                    SummaryOptionsWrapper.prototype.getOptions = function () {
                        return {
                            columnName: this._name,
                            flags: SummaryOptionsWrapper._getNumber(this.sum()) << 0 |
                                SummaryOptionsWrapper._getNumber(this.avg()) << 1 |
                                SummaryOptionsWrapper._getNumber(this.min()) << 2 |
                                SummaryOptionsWrapper._getNumber(this.max()) << 3 |
                                SummaryOptionsWrapper._getNumber(this.count()) << 4
                        };
                    };
                    return SummaryOptionsWrapper;
                }());
                Internal.SummaryOptionsWrapper = SummaryOptionsWrapper;
                function getFormattedValueInUnits(value, unit) {
                    var format = unit === Wizard.GraphicsUnit.Inch ? 2 : 1;
                    return value.toFixed(format);
                }
                Internal.getFormattedValueInUnits = getFormattedValueInUnits;
                function _createReportWizard(reportWizardOptions) {
                    if (reportWizardOptions.wizardSettings.useFullscreenWizard && reportWizardOptions.wizardSettings.useMasterDetailWizard)
                        return Wizard._createFullscreenReportWizard(reportWizardOptions);
                    else if (reportWizardOptions.wizardSettings.useMasterDetailWizard)
                        return Wizard._createReportWizard(reportWizardOptions);
                    else
                        return Wizard._createLegacyReportWizard(reportWizardOptions);
                }
                Internal._createReportWizard = _createReportWizard;
                var ListViewModel = (function () {
                    function ListViewModel(caption) {
                        var _this = this;
                        this.caption = caption;
                        this._items = ko.observableArray([]).extend({ deferred: true });
                        this._refreshActiveItem = function (previousActivItemIndex) {
                            if (previousActivItemIndex === void 0) { previousActivItemIndex = -1; }
                            if (_this.isEmpty) {
                                _this.activeItemArray.removeAll();
                            }
                            else if (previousActivItemIndex < 0) {
                                _this.activeItemArray.splice(0, 1, _this._items()[0]);
                            }
                            else {
                                if (previousActivItemIndex >= _this._items().length) {
                                    previousActivItemIndex = _this._items().length - 1;
                                }
                                _this.activeItemArray.splice(0, 1, _this._items()[previousActivItemIndex]);
                            }
                        };
                        this.activeItemArray = ko.observableArray([]).extend({ deferred: true });
                    }
                    Object.defineProperty(ListViewModel.prototype, "items", {
                        get: function () {
                            return this._items();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ListViewModel.prototype, "activeItem", {
                        get: function () {
                            return this.activeItemArray().length === 1 ? this.activeItemArray()[0] : null;
                        },
                        set: function (value) {
                            if (this._items().indexOf(value) > -1) {
                                this.activeItemArray.splice(0, 1, value);
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ListViewModel.prototype.add = function (item) {
                        this._items.push(item);
                        this.activeItemArray.splice(0, 1, item);
                    };
                    ListViewModel.prototype.addRange = function (items) {
                        this.setItems(this._items().concat(items));
                    };
                    ListViewModel.prototype.removeActiveItem = function () {
                        var index = this._items.indexOf(this.activeItemArray()[0]);
                        this._items.remove(this.activeItemArray()[0]);
                        this._refreshActiveItem(index);
                    };
                    ListViewModel.prototype.removeAll = function () {
                        this._items.removeAll();
                        this.activeItemArray.removeAll();
                    };
                    ListViewModel.prototype.setItems = function (items) {
                        this._items(items);
                        this.activeItemArray([this._items()[0]]);
                        this._refreshActiveItem();
                    };
                    ListViewModel.prototype.moveUp = function () {
                        if (this.isMoveUpEnabled()) {
                            var index = this._items.indexOf(this.activeItem);
                            this.activeItemArray.removeAll();
                            this._items.splice(index - 1, 2, this._items()[index], this._items()[index - 1]);
                            this.activeItemArray.splice(0, 1, this._items()[index - 1]);
                        }
                    };
                    ListViewModel.prototype.moveDown = function () {
                        if (this.isMoveDownEnabled()) {
                            var index = this._items.indexOf(this.activeItem);
                            this.activeItemArray.removeAll();
                            this._items.splice(index, 2, this._items()[index + 1], this._items()[index]);
                            this.activeItemArray.splice(0, 1, this._items()[index + 1]);
                        }
                    };
                    Object.defineProperty(ListViewModel.prototype, "isEmpty", {
                        get: function () {
                            return this._items().length === 0;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ListViewModel.prototype.isMoveUpEnabled = function () {
                        return this._items.indexOf(this.activeItemArray()[0]) > 0;
                    };
                    ListViewModel.prototype.isMoveDownEnabled = function () {
                        var index = this._items.indexOf(this.activeItemArray()[0]);
                        return index > -1 && index < this._items().length - 1;
                    };
                    return ListViewModel;
                }());
                Internal.ListViewModel = ListViewModel;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Wizard) {
                var Legacy;
                (function (Legacy) {
                    function isQueryChecked(query) {
                        return query.checked !== false;
                    }
                    var ReportWizardModel = (function (_super) {
                        __extends(ReportWizardModel, _super);
                        function ReportWizardModel(useMasterDetailBuilder, requestWrapper) {
                            if (useMasterDetailBuilder === void 0) { useMasterDetailBuilder = false; }
                            var _this = _super.call(this, requestWrapper) || this;
                            _this.useMasterDetailBuilder = useMasterDetailBuilder;
                            _this._dataSource = null;
                            _this._groups = [];
                            _this._reportTree = [];
                            _this.reportType = Wizard.ReportType.Databound;
                            _this.dataMemberPath = ko.observable(null);
                            _this.dataMember = ko.observable(null);
                            _this.fields = ko.observableArray([]);
                            _this.masterDetailInfoCollection = ko.observableArray([]);
                            _this.getOnlyCheckedQueries = function (queries) {
                                if (queries === void 0) { queries = _this.masterDetailInfoCollection(); }
                                return queries.filter(function (query) { return isQueryChecked(query); });
                            };
                            _this.initPageSetup = function (model) {
                                var unit;
                                var _pageSetupProps = [
                                    model.pageWidth(),
                                    model.pageHeight(),
                                    model.margins.left(),
                                    model.margins.right(),
                                    model.margins.top(),
                                    model.margins.bottom()
                                ];
                                switch (model.measureUnit()) {
                                    case "HundredthsOfAnInch":
                                        _pageSetupProps = _pageSetupProps.map(function (x) { return x / 100; });
                                        unit = Wizard.GraphicsUnit.Inch;
                                        break;
                                    case "TenthsOfAMillimeter":
                                        _pageSetupProps = _pageSetupProps.map(function (x) { return x / 10; });
                                        unit = Wizard.GraphicsUnit.Millimeter;
                                        break;
                                    case "Pixels":
                                        unit = Wizard.GraphicsUnit.Pixel;
                                        break;
                                }
                                _this.portrait = !model.landscape();
                                _this.pageSetup = {
                                    paperKind: model.paperKind(),
                                    unit: unit,
                                    width: _pageSetupProps[0],
                                    height: _pageSetupProps[1],
                                    marginLeft: _pageSetupProps[2],
                                    marginRight: _pageSetupProps[3],
                                    marginTop: _pageSetupProps[4],
                                    marginBottom: _pageSetupProps[5]
                                };
                            };
                            _this.reportTree = function () {
                                return _this._reportTree;
                            };
                            _this.masterDetailGroups = {};
                            _this.summaryOptionsColumns = ko.observableArray([]);
                            _this.masterDetailSummaryOptionsColumns = {};
                            _this.masterDetailSummariesInfo = {};
                            _this.ignoreNullValuesForSummary = false;
                            _this.fitFieldsToPage = true;
                            _this.layout = Wizard.ReportLayout.columnar;
                            _this.portrait = true;
                            _this.style = Wizard.ReportStyle.Bold;
                            _this.reportTitle = "";
                            _this.dataSourceType = DevExpress.Analytics.Wizard.DataSourceType.Sql;
                            _this.dataMemberPath.subscribe(function () {
                                _this.fields([]);
                            });
                            _this.fields.subscribe(function (changes) {
                                var isFieldsChanged = changes.some(function (change, index, array) {
                                    return !change["moved"] && change["moved"] !== 0;
                                });
                                if (isFieldsChanged) {
                                    _this.groups = [];
                                    _this.summaryOptionsColumns([]);
                                }
                            }, null, "arrayChange");
                            _this.summaryOptionsColumns.subscribe(function (changes) {
                                _this.summaryOptions = [];
                            });
                            _this.masterDetailInfoCollection.subscribe(function (changes) {
                                var isFieldsChanged = changes.some(function (change, index, array) {
                                    return !change["moved"] && change["moved"] !== 0;
                                });
                                if (isFieldsChanged) {
                                    _this._reportTree = [];
                                    _this._fillTreeQueries(_this.getOnlyCheckedQueries(), 0);
                                    _this.masterDetailGroups = {};
                                    _this.masterDetailSummaryOptionsColumns = {};
                                    _this.masterDetailSummariesInfo = {};
                                }
                            }, null, "arrayChange");
                            return _this;
                        }
                        ReportWizardModel.prototype._fillTreeQueries = function (queries, level) {
                            var _this = this;
                            var lvl = level;
                            queries.forEach(function (query) {
                                if (isQueryChecked(query)) {
                                    var fields = query.fields.filter(function (field) { return field.checked; }).map((function (value) { return { name: value.name, displayName: value.displayName, specifics: value.specifics }; }));
                                    _this._reportTree.push({ name: query.displayName || query.name, path: query.path, fields: fields, level: level });
                                    if (query.relations.length > 0) {
                                        var newLvl = lvl + 1;
                                        _this._fillTreeQueries(query.relations, newLvl);
                                    }
                                }
                            });
                        };
                        ReportWizardModel.prototype.applyReportViewModel = function (reportModel) {
                            this.initPageSetup(reportModel);
                            this.initDataBindSettings(reportModel);
                        };
                        ReportWizardModel.prototype.initDataBindSettings = function (model) {
                            var modelDS = model.dataSource();
                            this.initialDataSourceInfo = modelDS && modelDS["dataSourceInfo"];
                            this.initialDataMember = model.dataMember() || "";
                        };
                        Object.defineProperty(ReportWizardModel.prototype, "dataSource", {
                            get: function () {
                                return this._dataSource;
                            },
                            set: function (value) {
                                if (this._dataSource != value) {
                                    this.dataMember(null);
                                    this.dataMemberPath(null);
                                    this._dataSource = value;
                                    this.masterDetailInfoCollection([]);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ReportWizardModel.prototype, "groups", {
                            get: function () {
                                return this._groups;
                            },
                            set: function (value) {
                                if (this._groups.length != value.length && (this._groups.length === 0 || value.length === 0)) {
                                    this.layout = value.length > 0 ? Wizard.ReportLayout.stepped : Wizard.ReportLayout.columnar;
                                }
                                this._groups = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        return ReportWizardModel;
                    }(DevExpress.Analytics.Wizard.Legacy.MultiQueryDataSourceWizardModel));
                    Legacy.ReportWizardModel = ReportWizardModel;
                    var DataSourceWizard = (function (_super) {
                        __extends(DataSourceWizard, _super);
                        function DataSourceWizard(dataSources, fieldListsCallback) {
                            var _this = _super.call(this) || this;
                            _this.title = DevExpress.Analytics.Utils.getLocalization("Report Wizard", "ASPxReportsStringId.ReportDesigner_Wizard_Header");
                            var columnsPage = new SelectColumnsPage(_this, fieldListsCallback);
                            columnsPage.actionNext.isDisabled = ko.pureComputed(function () {
                                return true;
                            });
                            _this.steps = [
                                new SelectDataSourcePage(_this, dataSources, ko.observable(false)),
                                new SelectDataMemberPage(_this, fieldListsCallback, Designer.Internal.SqlDataSourceEditor.createSqlDataSourceInfo, true),
                                columnsPage
                            ];
                            return _this;
                        }
                        DataSourceWizard.prototype.start = function () {
                            _super.prototype.start.call(this, new ReportWizardModel(undefined, Designer.Internal.QBRequestWrapper));
                        };
                        return DataSourceWizard;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardViewModel));
                    Legacy.DataSourceWizard = DataSourceWizard;
                    var ReportWizard = (function (_super) {
                        __extends(ReportWizard, _super);
                        function ReportWizard(_dataSources, callbacks, connectionStrings, hideDataMemberSubItems, disableCustomSql, useMasterDetailWizard, _reportModel) {
                            if (hideDataMemberSubItems === void 0) { hideDataMemberSubItems = false; }
                            var _this = _super.call(this) || this;
                            _this._dataSources = _dataSources;
                            _this._reportModel = _reportModel;
                            _this._labelWizardData = null;
                            _this.title = DevExpress.Analytics.Utils.getLocalization("Report Wizard", "ASPxReportsStringId.ReportDesigner_Wizard_Header");
                            _this.labelWizardData = function () {
                                if (!_this._labelWizardData) {
                                    var $def = $.Deferred();
                                    Designer.Internal.ReportWizardService.getLabelReportWizardData().done(function (data) { return $def.resolve(JSON.parse(data)); });
                                    _this._labelWizardData = $def.promise();
                                }
                                return _this._labelWizardData;
                            };
                            _this.container = DevExpress.Analytics.Internal.getParentContainer;
                            if (disableCustomSql !== false)
                                disableCustomSql = true;
                            if (useMasterDetailWizard !== false)
                                _this.isMasterDetailWizard = true;
                            _this.finishCallback = callbacks.finishCallback;
                            _this._selectDataSourcePage = new SelectDataSourcePage(_this, ko.observable([]), ko.pureComputed(function () { return connectionStrings.sql().length > 0; }));
                            if (_this.isMasterDetailWizard) {
                                _this.height(ReportWizard._masterDetailWizardHeight);
                                _this.width(ReportWizard._masterDetailWizardWidth);
                                _this.extendCssClass = "dxrd-master-detail-report-wizard";
                            }
                            var reportWizardSteps = _this.isMasterDetailWizard ?
                                [
                                    new MasterDetailSelectReportDataPage(_this, callbacks.fieldListsCallback, callbacks.createSqlDataSourceInfo, callbacks.createJsonDataSourceInfo, hideDataMemberSubItems),
                                    new MasterDetailAddGroupingLevel(_this),
                                    new MasterDetailChooseSummaryOptions(_this),
                                    new PageSetupPage(_this),
                                    new ColorSchemePage(_this)
                                ]
                                :
                                    [
                                        new SelectDataMemberPage(_this, callbacks.fieldListsCallback, callbacks.createSqlDataSourceInfo, hideDataMemberSubItems),
                                        new SelectColumnsPage(_this, callbacks.fieldListsCallback),
                                        new AddGroupingLevelPage(_this),
                                        new ChooseSummaryOptionsPage(_this),
                                        new ChooseReportLayoutPage(_this),
                                        new ChooseReportStylePage(_this)
                                    ];
                            _this.steps = [
                                new ChooseReportTypePage(_this),
                                new SelectPredefinedLabelsPage(_this),
                                new CustomizeLabelPage(_this),
                                _this._selectDataSourcePage,
                                new ReportWizardSelectConnectionString(_this, connectionStrings.sql),
                                new ReportWizardAddQueriesPage(_this, callbacks, disableCustomSql, false),
                                new ReportWizardConfigureParametersPage(_this),
                                new ReportWizardMasterDetailRelationsPage(_this, callbacks.sqlDataSourceResultSchema)
                            ].concat(reportWizardSteps, [
                                new SetReportTitlePage(_this)
                            ]);
                            return _this;
                        }
                        ReportWizard.prototype.start = function (data, finishCallback, reportModel) {
                            if (reportModel === void 0) { reportModel = null; }
                            this.startWithCustomDataSources(this._dataSources(), data, finishCallback, reportModel);
                        };
                        ReportWizard.prototype.startWithCustomDataSources = function (dataSources, data, finishCallback, reportModel) {
                            this._selectDataSourcePage.availableDataSources(ReportWizard._cloneDataSources(dataSources));
                            var reportWizardModel = data || new ReportWizardModel(this.isMasterDetailWizard, Designer.Internal.QBRequestWrapper);
                            if (reportWizardModel && reportModel) {
                                reportWizardModel.applyReportViewModel(reportModel);
                            }
                            _super.prototype.start.call(this, reportWizardModel, DevExpress.Analytics.Wizard.Legacy.WizardViewModel.chainCallbacks(finishCallback, this.finishCallback));
                        };
                        ReportWizard._masterDetailWizardHeight = Internal._masterDetailWizardHeight;
                        ReportWizard._masterDetailWizardWidth = Internal._masterDetailWizardWidth;
                        ReportWizard._masterDetailScrollViewHeight = Internal._masterDetailScrollViewHeight;
                        ReportWizard._cloneDataSources = function (dataSources) {
                            return dataSources.map(function (item) {
                                var newDS = $.extend({}, item);
                                newDS.data = item.data.clone();
                                return newDS;
                            });
                        };
                        return ReportWizard;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardViewModel));
                    Legacy.ReportWizard = ReportWizard;
                    var AddGroupingLevelPage = (function (_super) {
                        __extends(AddGroupingLevelPage, _super);
                        function AddGroupingLevelPage(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this.template = "dxrd-page-groups";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Create multiple groups, each with a single field value, or define several fields in the same group.", "ASPxReportsStringId.ReportDesigner_Wizard_CreateGroups");
                            _this.fields = new Designer.Internal.ListViewModel(DevExpress.Analytics.Utils.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields"));
                            _this.groups = new Designer.Internal.ListViewModel(DevExpress.Analytics.Utils.getLocalization("Groups", "ASPxReportsStringId.ReportDesigner_Groups"));
                            _this.addNewGroup = function () {
                                if (_this.isCreateGroupEnabled()) {
                                    _this.groups.add({ fields: ko.observableArray([_this.fields.activeItem]) });
                                    _this.fields.removeActiveItem();
                                }
                            };
                            _this.appendFieldsToGroup = function () {
                                if (_this.isAppendToGroupEnabled()) {
                                    _this.groups.activeItem.fields.push(_this.fields.activeItem);
                                    _this.fields.removeActiveItem();
                                }
                            };
                            _this.removeGroup = function () {
                                if (_this.isRemoveGroupEnabled()) {
                                    _this.fields.addRange(_this.groups.activeItem.fields());
                                    _this.groups.removeActiveItem();
                                }
                            };
                            _this.isCreateGroupEnabled = ko.pureComputed(function () {
                                return !!_this.fields.activeItem;
                            });
                            _this.isAppendToGroupEnabled = ko.pureComputed(function () {
                                return _this.fields.activeItem && _this.groups.activeItem && _this.groups.activeItem.fields().length > 0;
                            });
                            _this.isRemoveGroupEnabled = ko.pureComputed(function () {
                                return _this.groups.activeItem && _this.groups.activeItem.fields().length > 0;
                            });
                            _this.moveUp = function () {
                                _this.groups.moveUp();
                            };
                            _this.moveDown = function () {
                                _this.groups.moveDown();
                            };
                            _this.isMoveUpEnabled = ko.pureComputed(function () {
                                return _this.groups.isMoveUpEnabled();
                            });
                            _this.isMoveDownEnabled = ko.pureComputed(function () {
                                return _this.groups.isMoveDownEnabled();
                            });
                            _this.fieldDblClick = function (field) {
                                _this.fields.activeItem = field;
                                _this.addNewGroup();
                            };
                            _this.fieldClick = function (e) {
                                _this.fields.activeItem = e.itemData;
                            };
                            _this.groupDblClick = function (group) {
                                _this.groups.activeItem = group;
                                _this.removeGroup();
                            };
                            _this.groupClick = function (e) {
                                _this.groups.activeItem = e.itemData;
                            };
                            return _this;
                        }
                        AddGroupingLevelPage.prototype._begin = function (data) {
                            var fields = ko.observableArray(data.fields().map(function (value, index, array) { return value.displayName; }));
                            this.groups.setItems(data.groups.map(function (value) {
                                fields.removeAll(value);
                                return { fields: ko.observableArray(value) };
                            }));
                            this.fields.setItems(fields());
                        };
                        AddGroupingLevelPage.prototype.commit = function (data) {
                            data.groups = this.groups.items.map(function (item) {
                                return item.fields();
                            });
                            var summaryColumns = [];
                            if (!this.groups.isEmpty) {
                                this.fields.items.forEach(function (fieldName) {
                                    var field = DevExpress.Analytics.Internal.getFirstItemByPropertyValue(data.fields(), "displayName", fieldName);
                                    if (field.specifics && ["integer", "float", "date"].indexOf(field.specifics.toLowerCase()) > -1) {
                                        summaryColumns.push(field);
                                    }
                                });
                                summaryColumns.sort(function (a, b) { return a.name.localeCompare(b.name); });
                            }
                            data.summaryOptionsColumns(summaryColumns);
                        };
                        return AddGroupingLevelPage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.AddGroupingLevelPage = AddGroupingLevelPage;
                    var ChooseReportLayoutPage = (function (_super) {
                        __extends(ChooseReportLayoutPage, _super);
                        function ChooseReportLayoutPage(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this._isGroupedReport = ko.observable(false);
                            _this._reportLayoutTypes = [
                                new Wizard.LayoutTypeItem("Columnar", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Columnar", Wizard.ReportLayout.columnar, 18),
                                new Wizard.LayoutTypeItem("Tabular", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Tabular", Wizard.ReportLayout.tabular, 18),
                                new Wizard.LayoutTypeItem("Justified", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Justified", Wizard.ReportLayout.justified, 18)
                            ];
                            _this._groupedRreportLayoutsTypes = [
                                new Wizard.LayoutTypeItem("Stepped", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Stepped", Wizard.ReportLayout.stepped, 1),
                                new Wizard.LayoutTypeItem("Outline 1", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline1", Wizard.ReportLayout.outline1, 1),
                                new Wizard.LayoutTypeItem("Outline 2", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline2", Wizard.ReportLayout.outline2, 1),
                                new Wizard.LayoutTypeItem("Align Left 1", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft1", Wizard.ReportLayout.alignLeft1, 1),
                                new Wizard.LayoutTypeItem("Align Left 2", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft2", Wizard.ReportLayout.alignLeft2, 1)
                            ];
                            _this._pageOriantation = Wizard.PageOrientation.Portrait;
                            _this.template = "dxrd-page-reportLayoutType";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("The report layout specifies the manner in which selected data fields are arranged on individual pages.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout");
                            _this.toggleFitFieldsToPage = function () {
                                _this.fitFieldsToPage(!_this.fitFieldsToPage());
                            };
                            _this.selectedLayoutType = ko.observable(null);
                            _this.fitFieldsToPage = ko.observable(true);
                            _this.pageOrientationItems = [
                                new Wizard.PageOrientationItem("Portrait", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait", Wizard.PageOrientation.Portrait),
                                new Wizard.PageOrientationItem("Landscape", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape", Wizard.PageOrientation.Landscape)
                            ];
                            _this.selectedPageOrientation = ko.observable(_this.pageOrientationItems[0]);
                            _this.layoutTypeItems = ko.pureComputed(function () {
                                var items = _this._isGroupedReport() ? _this._groupedRreportLayoutsTypes : _this._reportLayoutTypes;
                                _this.selectedLayoutType(items[0]);
                                return items;
                            });
                            _this.layoutTypeItemClick = function (item) {
                                _this.selectedLayoutType(item);
                            };
                            _this.isSelected = function (item) {
                                return _this.selectedLayoutType() === item;
                            };
                            return _this;
                        }
                        ChooseReportLayoutPage.prototype._begin = function (data) {
                            this._isGroupedReport(data.groups.length > 0);
                            this.selectedLayoutType(DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this.layoutTypeItems(), "layoutType", data.layout));
                            this.fitFieldsToPage(data.fitFieldsToPage);
                            this.selectedPageOrientation(data.portrait ? this.pageOrientationItems[0] : this.pageOrientationItems[1]);
                        };
                        ChooseReportLayoutPage.prototype.commit = function (data) {
                            data.layout = this.selectedLayoutType().layoutType;
                            data.fitFieldsToPage = this.fitFieldsToPage();
                            data.portrait = this.selectedPageOrientation().orientation === Wizard.PageOrientation.Portrait;
                        };
                        return ChooseReportLayoutPage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.ChooseReportLayoutPage = ChooseReportLayoutPage;
                    var ChooseReportStylePage = (function (_super) {
                        __extends(ChooseReportStylePage, _super);
                        function ChooseReportStylePage(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this.template = "dxrd-page-reportStyle";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("The report style specifies the appearance of your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle");
                            _this.reportStyleItems = [
                                new Wizard.ReportStyleItem("Bold", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Bold", Wizard.ReportStyle.Bold),
                                new Wizard.ReportStyleItem("Casual", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Casual", Wizard.ReportStyle.Casual),
                                new Wizard.ReportStyleItem("Corporate", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Corporate", Wizard.ReportStyle.Corporate),
                                new Wizard.ReportStyleItem("Compact", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Compact", Wizard.ReportStyle.Compact),
                                new Wizard.ReportStyleItem("Formal", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Formal", Wizard.ReportStyle.Formal)
                            ];
                            _this.selectedReportStyle = ko.observable(_this.reportStyleItems[0]);
                            return _this;
                        }
                        ChooseReportStylePage.prototype._begin = function (data) {
                            this.selectedReportStyle(DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this.reportStyleItems, "reportStyle", data.style));
                        };
                        ChooseReportStylePage.prototype.commit = function (data) {
                            data.style = this.selectedReportStyle().reportStyle;
                        };
                        return ChooseReportStylePage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.ChooseReportStylePage = ChooseReportStylePage;
                    var ChooseReportTypePage = (function (_super) {
                        __extends(ChooseReportTypePage, _super);
                        function ChooseReportTypePage(wizard, wizardSettings) {
                            var _this = _super.call(this, wizard, wizardSettings) || this;
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Select the report type you wish to create.", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_Message");
                            _this.actionNext.isDisabled = ko.pureComputed(function () {
                                return _this.selectedItem() == null || _this.selectedItem().type === Wizard.ReportType.Empty;
                            });
                            _this.typeItems = [
                                new DevExpress.Analytics.Wizard.TypeItem("Empty Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_EmptyReport", "emptyReport", "dxrd-svg-wizard-EmptyReport", Wizard.ReportType.Empty),
                                new DevExpress.Analytics.Wizard.TypeItem("Table Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_TableReport", "databoundReport", "dxrd-svg-wizard-StandardReport", Wizard.ReportType.Databound),
                                new DevExpress.Analytics.Wizard.TypeItem("Label Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_LabelReport", "labelReport", "dxrd-svg-wizard-LabelReport", Wizard.ReportType.Label)
                            ];
                            _this.actionFinish.isDisabled = ko.pureComputed(function () {
                                return _this.selectedItem() == null || _this.selectedItem().type !== Wizard.ReportType.Empty;
                            });
                            _this.extendCssClass = function (rightPath) { return "dxrd-report-" + rightPath; };
                            return _this;
                        }
                        ChooseReportTypePage.prototype._begin = function (data) {
                            var type = data.reportType || Wizard.ReportType.Databound;
                            this.selectedItem(DevExpress.Analytics.Internal.findFirstItemMatchesCondition(this.typeItems, function (item) { return item.type === type; }));
                        };
                        ChooseReportTypePage.prototype.commit = function (data) {
                            data.reportType = this.selectedItem().type;
                        };
                        return ChooseReportTypePage;
                    }(DevExpress.Analytics.Wizard.Legacy.ChooseDataSourceTypePage));
                    Legacy.ChooseReportTypePage = ChooseReportTypePage;
                    var ExtendChooseReportTypePage = (function (_super) {
                        __extends(ExtendChooseReportTypePage, _super);
                        function ExtendChooseReportTypePage(wizard, wizardSettings) {
                            var _this = _super.call(this, wizard, wizardSettings) || this;
                            _this.typeItems.splice(2, 0, new DevExpress.Analytics.Wizard.TypeItem("Vertical Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_VerticalReport", "verticalReport", "dxrd-svg-wizard-VerticalReport", Wizard.ReportType.Vertical));
                            return _this;
                        }
                        return ExtendChooseReportTypePage;
                    }(ChooseReportTypePage));
                    Legacy.ExtendChooseReportTypePage = ExtendChooseReportTypePage;
                    var ChooseDataSourceTypePage = (function (_super) {
                        __extends(ChooseDataSourceTypePage, _super);
                        function ChooseDataSourceTypePage(wizard, wizardSettings) {
                            var _this = _super.call(this, wizard, wizardSettings) || this;
                            _this.typeItems.push(new DevExpress.Analytics.Wizard.TypeItem("No Data", "DataAccessUIStringId.DSTypeNoData", "nodata", "dxrd-svg-wizard-NoDataSource", DevExpress.Analytics.Wizard.DataSourceType.NoData));
                            return _this;
                        }
                        return ChooseDataSourceTypePage;
                    }(DevExpress.Analytics.Wizard.Legacy.ChooseDataSourceTypePage));
                    Legacy.ChooseDataSourceTypePage = ChooseDataSourceTypePage;
                    var ChooseSummaryOptionsPage = (function (_super) {
                        __extends(ChooseSummaryOptionsPage, _super);
                        function ChooseSummaryOptionsPage(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this._columns = [];
                            _this.template = "dxrd-page-summaryOptions";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("What summary function would you like to calculate?", "ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions");
                            _this.summaryOptions = ko.observableArray([]);
                            _this.ignoreNullValues = ko.observable(false);
                            _this.toggleIgnoreNullValues = function () {
                                _this.ignoreNullValues(!_this.ignoreNullValues());
                            };
                            return _this;
                        }
                        ChooseSummaryOptionsPage.prototype._begin = function (data) {
                            var _this = this;
                            this.isVisible = data.summaryOptionsColumns().length > 0;
                            if (!this.isVisible)
                                return;
                            this.ignoreNullValues(data.ignoreNullValuesForSummary);
                            var changes = ko.utils.compareArrays(data.summaryOptionsColumns(), this._columns);
                            var isColumnsChanged = changes.some(function (change, index, array) { return change.status != "retained"; });
                            if (isColumnsChanged) {
                                this._columns = data.summaryOptionsColumns();
                                this.summaryOptions.removeAll();
                                this._columns.forEach(function (column) {
                                    _this.summaryOptions.push(new Internal.SummaryOptionsWrapper(column.name, column.displayName));
                                });
                            }
                            this.summaryOptions.notifySubscribers();
                        };
                        ChooseSummaryOptionsPage.prototype.commit = function (data) {
                            data.ignoreNullValuesForSummary = this.ignoreNullValues();
                            data.summaryOptions = this.summaryOptions().map(function (value) { return value.getOptions(); });
                        };
                        return ChooseSummaryOptionsPage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.ChooseSummaryOptionsPage = ChooseSummaryOptionsPage;
                    var ColorSchemePage = (function (_super) {
                        __extends(ColorSchemePage, _super);
                        function ColorSchemePage(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this.template = "dxrd-page-colorScheme";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Choose a report color scheme.", "ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme_Description");
                            _this.customColorScheme = new Wizard.CustomColorScheme("Custom", "ReportStringId.Wizard_ReportColorScheme_Custom", "255, 183, 227, 228");
                            _this.lookupData = {
                                scheme: [
                                    new Wizard.ColorScheme("Grey", "ReportStringId.Wizard_ReportColorScheme_Grey", "255, 75,75,75"),
                                    new Wizard.ColorScheme("ColdGrey", "ReportStringId.Wizard_ReportColorScheme_ColdGrey", "255, 93,98,110"),
                                    new Wizard.ColorScheme("Cream", "ReportStringId.Wizard_ReportColorScheme_Cream", "255, 227,202,166"),
                                    new Wizard.ColorScheme("JeansBlue", "ReportStringId.Wizard_ReportColorScheme_JeansBlue", "255, 69,94,178"),
                                    new Wizard.ColorScheme("Blue", "ReportStringId.Wizard_ReportColorScheme_Blue", "255, 23,104,196"),
                                    new Wizard.ColorScheme("Yellow", "ReportStringId.Wizard_ReportColorScheme_Yellow", "255, 255,209,107"),
                                    new Wizard.ColorScheme("LightGreen", "ReportStringId.Wizard_ReportColorScheme_LightGreen", "255, 181,211,142"),
                                    new Wizard.ColorScheme("Mint", "ReportStringId.Wizard_ReportColorScheme_Mint", "255, 46,148,130"),
                                    new Wizard.ColorScheme("LightBlue", "ReportStringId.Wizard_ReportColorScheme_LightBlue", "255, 153,212,246"),
                                    new Wizard.ColorScheme("Azure", "ReportStringId.Wizard_ReportColorScheme_Azure", "255, 57,159,228"),
                                    new Wizard.ColorScheme("Coral", "ReportStringId.Wizard_ReportColorScheme_Coral", "255, 250,128,114"),
                                    new Wizard.ColorScheme("Red", "ReportStringId.Wizard_ReportColorScheme_Red", "255, 196,66,79"),
                                    new Wizard.ColorScheme("Raspberry", "ReportStringId.Wizard_ReportColorScheme_Raspberry", "255, 152,51,91"),
                                    new Wizard.ColorScheme("Violet", "ReportStringId.Wizard_ReportColorScheme_Violet", "255, 113,69,168"),
                                    _this.customColorScheme
                                ]
                            };
                            _this.scheme = ko.observable(null);
                            return _this;
                        }
                        ColorSchemePage.prototype.applyScheme = function (data) {
                            this.scheme() && this.scheme().selected(false);
                            data.selected(true);
                            this.scheme(data);
                        };
                        ColorSchemePage.prototype.reset = function () {
                            _super.prototype.reset.call(this);
                            this.scheme() && this.scheme().selected(false);
                            this.scheme(null);
                        };
                        ColorSchemePage.prototype._begin = function (data) {
                            this.scheme(data.colorScheme);
                        };
                        ColorSchemePage.prototype.commit = function (data) {
                            data.colorScheme = this.scheme();
                        };
                        return ColorSchemePage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.ColorSchemePage = ColorSchemePage;
                    var CustomizeLabelPage = (function (_super) {
                        __extends(CustomizeLabelPage, _super);
                        function CustomizeLabelPage(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this.wizard = wizard;
                            _this._id = ko.observable(0);
                            _this._labelWidth = ko.observable(0);
                            _this._labelHeight = ko.observable(0);
                            _this._horizontalPitch = ko.observable(0);
                            _this._verticalPitch = ko.observable(0);
                            _this._topMargin = ko.observable(0);
                            _this._leftMargin = ko.observable(0);
                            _this._rightMargin = ko.observable(0);
                            _this._bottomMargin = ko.observable(0);
                            _this._rowsCount = ko.pureComputed(function () {
                                return _this._getLabelsCount(_this._pageHeight(), _this._verticalPitch(), _this._labelHeight(), _this._topMargin() + _this._bottomMargin());
                            });
                            _this._columnsCount = ko.pureComputed(function () {
                                return _this._getLabelsCount(_this._pageWidth(), _this._horizontalPitch(), _this._labelWidth(), _this._leftMargin() + _this._rightMargin());
                            });
                            _this._pageHeight = ko.pureComputed(function () {
                                if (_this.selectedPaperSize().unit === _this.unit())
                                    return _this.selectedPaperSize().height;
                                if (_this.selectedPaperSize().unit === Designer.Wizard.GraphicsUnit.Millimeter)
                                    return _this.selectedPaperSize().height * CustomizeLabelPage.CONVERSION_COEEFICIENT;
                                return _this.selectedPaperSize().height / CustomizeLabelPage.CONVERSION_COEEFICIENT;
                            });
                            _this._pageWidth = ko.pureComputed(function () {
                                if (_this.selectedPaperSize().unit === _this.unit())
                                    return _this.selectedPaperSize().width;
                                if (_this.selectedPaperSize().unit === Designer.Wizard.GraphicsUnit.Millimeter)
                                    return _this.selectedPaperSize().width * CustomizeLabelPage.CONVERSION_COEEFICIENT;
                                return _this.selectedPaperSize().width / CustomizeLabelPage.CONVERSION_COEEFICIENT;
                            });
                            _this.template = "dxrd-page-customizeLabel";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("You can adjust the label's parameters here if required.", "ReportBoxDesignerStringId.Wizard_LabelOptions_Description");
                            _this.paperKinds = function () { return (_this.labelData.paperKinds); };
                            _this.selectedPaperSize = ko.observable({ "id": 1, "enumId": 9, "name": "A4", "width": 210.0, "height": 297.0, "unit": 6, "isRollPaper": false });
                            _this.unit = ko.observable();
                            _this.stepUnit = ko.pureComputed(function () { return _this.unit() === Designer.Wizard.GraphicsUnit.Inch ? 0.01 : 0.1; });
                            _this.labelWidth = ko.computed({
                                read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._labelWidth())); },
                                write: function (value) { return _this._labelWidth(value); }
                            });
                            _this.labelHeight = ko.computed({
                                read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._labelHeight())); },
                                write: function (value) { return _this._labelHeight(value); }
                            });
                            _this.horizontalPitch = ko.computed({
                                read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._horizontalPitch())); },
                                write: function (value) { return _this._horizontalPitch(value); }
                            });
                            _this.verticalPitch = ko.computed({
                                read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._verticalPitch())); },
                                write: function (value) { return _this._verticalPitch(value); }
                            });
                            _this.topMargin = ko.computed({
                                read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._topMargin())); },
                                write: function (value) { return _this._topMargin(value); }
                            });
                            _this.leftMargin = ko.computed({
                                read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._leftMargin())); },
                                write: function (value) { return _this._leftMargin(value); }
                            });
                            _this.rightMargin = ko.computed({
                                read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._rightMargin())); },
                                write: function (value) { return _this._rightMargin(value); }
                            });
                            _this.bottomMargin = ko.computed({
                                read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._bottomMargin())); },
                                write: function (value) { return _this._bottomMargin(value); }
                            });
                            _this.labelsCountText = ko.pureComputed(function () {
                                return _this._rowsCount() * _this._columnsCount() + " " + DevExpress.Analytics.Utils.getLocalization("labels on the page", "ASPxReportsStringId.ReportDesigner_Wizard_CustomizeLabelPage_LabelCountText") + ", " + _this._columnsCount() + " x " + _this._rowsCount();
                            });
                            _this.pageSizeText = ko.pureComputed(function () {
                                return CustomizeLabelPage.getPageSizeText(_this._pageWidth(), _this._pageHeight(), _this.unit());
                            });
                            _this.units = [
                                { text: DevExpress.Analytics.Utils.getLocalization("Inch", "AnalyticsCoreStringId.Wizard_Inch"), value: Designer.Wizard.GraphicsUnit.Inch },
                                { text: DevExpress.Analytics.Utils.getLocalization("Millimeter", "AnalyticsCoreStringId.Wizard_Millimeter"), value: Designer.Wizard.GraphicsUnit.Millimeter }
                            ];
                            _this.actionNext.isDisabled(true);
                            _this.unit.subscribe(function (newUnit) {
                                if (newUnit === Designer.Wizard.GraphicsUnit.Inch) {
                                    _this._labelWidth(_this._labelWidth() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._labelHeight(_this._labelHeight() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._horizontalPitch(_this._horizontalPitch() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._verticalPitch(_this._verticalPitch() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._topMargin(_this._topMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._leftMargin(_this._leftMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._rightMargin(_this._rightMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._bottomMargin(_this._bottomMargin() * CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                }
                                else if (newUnit === Designer.Wizard.GraphicsUnit.Millimeter) {
                                    _this._labelWidth(_this._labelWidth() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._labelHeight(_this._labelHeight() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._horizontalPitch(_this._horizontalPitch() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._verticalPitch(_this._verticalPitch() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._topMargin(_this._topMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._leftMargin(_this._leftMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._rightMargin(_this._rightMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                    _this._bottomMargin(_this._bottomMargin() / CustomizeLabelPage.CONVERSION_COEEFICIENT);
                                }
                            });
                            return _this;
                        }
                        CustomizeLabelPage.prototype._getFormattedValueInUnits = function (value) {
                            return Designer.Internal.getFormattedValueInUnits(value, this.unit());
                        };
                        CustomizeLabelPage.prototype._getOtherMarginValue = function (paperDimentionInLabelUnit, labelPitch, labelWidth, margin, labelsCount) {
                            return this._getFormattedValueInUnits(paperDimentionInLabelUnit - (labelsCount * labelPitch) - margin + labelPitch - labelWidth);
                        };
                        CustomizeLabelPage.prototype._getLabelsCount = function (paperDimentionInLabelUnit, labelPitch, labelWidth, margin) {
                            return Math.floor((paperDimentionInLabelUnit - margin + (labelPitch - labelWidth)) / labelPitch);
                        };
                        CustomizeLabelPage.getPageSizeText = function (width, height, unit) {
                            return Designer.Internal.getFormattedValueInUnits(width, unit) + " x " + Designer.Internal.getFormattedValueInUnits(height, unit) + (unit === Designer.Wizard.GraphicsUnit.Inch ? " in" : " mm");
                        };
                        CustomizeLabelPage.prototype.beginAsync = function (data) {
                            var _this = this;
                            this.isVisible = data.reportType === Wizard.ReportType.Label;
                            if (!this.isVisible)
                                return null;
                            return this.wizard.labelWizardData().done(function (labelData) {
                                _this.labelData = labelData;
                                _this._id(data.labelDetails.id);
                                _this.unit(data.labelDetails.unit);
                                _this.selectedPaperSize(DevExpress.Analytics.Internal.findFirstItemMatchesCondition(_this.paperKinds(), function (item) { return item.id === data.labelDetails.paperKindId; }));
                                _this._labelWidth(data.labelDetails.width);
                                _this._labelHeight(data.labelDetails.height);
                                _this._horizontalPitch(data.labelDetails.hPitch);
                                _this._verticalPitch(data.labelDetails.vPitch);
                                _this._topMargin(data.labelDetails.topMargin);
                                _this._leftMargin(data.labelDetails.leftMargin);
                                _this._rightMargin(data.labelDetails.rightMargin);
                                _this._bottomMargin(data.labelDetails.bottomMargin);
                            });
                        };
                        CustomizeLabelPage.prototype.commit = function (data) {
                            if (!data.labelDetails)
                                return;
                            data.labelDetails.width = this._labelWidth();
                            data.labelDetails.height = this._labelHeight();
                            data.labelDetails.hPitch = this._horizontalPitch();
                            data.labelDetails.vPitch = this._verticalPitch();
                            data.labelDetails.topMargin = this._topMargin();
                            data.labelDetails.leftMargin = this._leftMargin();
                            data.labelDetails.rightMargin = this._rightMargin();
                            data.labelDetails.bottomMargin = this._bottomMargin();
                            data.labelDetails.unit = this.unit();
                            data.labelDetails.paperKindId = this.selectedPaperSize().id;
                        };
                        CustomizeLabelPage.CONVERSION_COEEFICIENT = Internal.CONVERSION_COEEFICIENT;
                        return CustomizeLabelPage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.CustomizeLabelPage = CustomizeLabelPage;
                    var MasterDetailAddGroupingLevel = (function (_super) {
                        __extends(MasterDetailAddGroupingLevel, _super);
                        function MasterDetailAddGroupingLevel(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this._availableColumns = {};
                            _this._groupingLevels = {};
                            _this._isModelChanged = ko.observable(false).extend({ deferred: true, notify: 'always' });
                            _this._masterDetailGroups = {};
                            _this.template = "dxrd-page-masterdetail-groups";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Group data in the selected reports. You can specify one or more fields for each group.", "ReportBoxDesignerStringId.Wizard_MasterDetailAddGroupingLevel_Description");
                            _this.addNewGroup = function () {
                                if (_this.isCreateGroupEnabled()) {
                                    _this.currentGroups().add({ fields: ko.observableArray([_this.currentFields().activeItem]) });
                                    _this.currentFields().removeActiveItem();
                                    _this._modelChanged();
                                }
                            };
                            _this.appendFieldsToGroup = function () {
                                if (_this.isAppendToGroupEnabled()) {
                                    _this.currentGroups().activeItem.fields.push(_this.currentFields().activeItem);
                                    _this.currentFields().removeActiveItem();
                                    _this._modelChanged();
                                }
                            };
                            _this.removeGroup = function () {
                                if (_this.isRemoveGroupEnabled()) {
                                    _this.currentFields().addRange(_this.currentGroups().activeItem.fields());
                                    _this.currentGroups().removeActiveItem();
                                    _this._modelChanged();
                                }
                            };
                            _this.isCreateGroupEnabled = ko.pureComputed(function () {
                                return !!_this.currentFields() && !!_this.currentFields().activeItem;
                            });
                            _this.isAppendToGroupEnabled = ko.pureComputed(function () {
                                return !!_this.currentFields() && _this.currentFields().activeItem && !!_this.currentGroups() && _this.currentGroups().activeItem && _this.currentGroups().activeItem.fields().length > 0;
                            });
                            _this.isRemoveGroupEnabled = ko.pureComputed(function () {
                                return !!_this.currentGroups() && _this.currentGroups().activeItem && _this.currentGroups().activeItem.fields().length > 0;
                            });
                            _this.moveUp = function () {
                                !!_this.currentGroups() && _this.currentGroups().moveUp();
                                _this._modelChanged();
                            };
                            _this.moveDown = function () {
                                !!_this.currentGroups() && _this.currentGroups().moveDown();
                                _this._modelChanged();
                            };
                            _this.isMoveUpEnabled = ko.pureComputed(function () {
                                return !!_this.currentGroups() && _this.currentGroups().isMoveUpEnabled();
                            });
                            _this.isMoveDownEnabled = ko.pureComputed(function () {
                                return !!_this.currentGroups() && _this.currentGroups().isMoveDownEnabled();
                            });
                            _this.fieldDblClick = function (field) {
                                _this.currentFields().activeItem = field;
                                _this.addNewGroup();
                            };
                            _this.fieldClick = function (e) {
                                _this.currentFields().activeItem = e.itemData;
                            };
                            _this.groupDblClick = function (group) {
                                _this.currentGroups().activeItem = group;
                                _this.removeGroup();
                            };
                            _this.groupClick = function (e) {
                                _this.currentGroups().activeItem = e.itemData;
                            };
                            _this.currentPath = ko.observable("");
                            _this.currentFields = ko.observable(null).extend({ deferred: true });
                            _this.currentGroups = ko.observable(null).extend({ deferred: true });
                            _this.fieldCaption = DevExpress.Analytics.Utils.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields");
                            _this.groupCaption = DevExpress.Analytics.Utils.getLocalization("Groups", "ASPxReportsStringId.ReportDesigner_Groups");
                            _this.reportTree = ko.observableArray([]);
                            _this.currentPath.subscribe(function (newPath) {
                                _this.currentGroups(_this._groupingLevels[newPath]);
                                _this.currentFields(_this._availableColumns[newPath]);
                            });
                            return _this;
                        }
                        MasterDetailAddGroupingLevel.prototype._modelChanged = function () {
                            this._isModelChanged(true);
                        };
                        MasterDetailAddGroupingLevel.prototype._setData = function (queries) {
                            var _this = this;
                            queries.forEach(function (query) {
                                if (!_this._groupingLevels[query.path] || !_this._availableColumns[query.path]) {
                                    _this._modelChanged();
                                    _this._availableColumns[query.path] = new Designer.Internal.ListViewModel();
                                    _this._groupingLevels[query.path] = new Designer.Internal.ListViewModel();
                                }
                                if (!_this._masterDetailGroups[query.path]) {
                                    _this._modelChanged();
                                    _this._masterDetailGroups[query.path] = [];
                                }
                                var fields = ko.observableArray(query.fields.map(function (value) { return value.displayName; }));
                                _this._groupingLevels[query.path].setItems(_this._masterDetailGroups[query.path].map(function (value) {
                                    fields.removeAll(value);
                                    return { fields: ko.observableArray(value) };
                                }));
                                _this._availableColumns[query.path].setItems(fields());
                            });
                        };
                        MasterDetailAddGroupingLevel.prototype._begin = function (data) {
                            this._isModelChanged(false);
                            this.reportTree(data.reportTree().map(function (item) { return $.extend(true, {}, item); }));
                            this._masterDetailGroups = $.extend(true, {}, data.masterDetailGroups);
                            var firstPath = this.reportTree()[0] && this.reportTree()[0].path;
                            if (firstPath) {
                                this.isVisible = true;
                                this._setData(this.reportTree());
                                this.currentPath(firstPath);
                                if (firstPath === this.currentPath.peek())
                                    this.currentPath.notifySubscribers(firstPath);
                            }
                            else {
                                this.isVisible = false;
                            }
                        };
                        MasterDetailAddGroupingLevel.prototype.commit = function (data) {
                            var _this = this;
                            if (this.isVisible) {
                                if (this._isModelChanged()) {
                                    data.masterDetailGroups = {};
                                    data.masterDetailSummaryOptionsColumns = {};
                                    data.masterDetailSummariesInfo = {};
                                    this.reportTree().forEach(function (query) {
                                        if (_this._groupingLevels[query.path].items.length > 0) {
                                            data.masterDetailGroups[query.path] = _this._groupingLevels[query.path].items.map(function (item) {
                                                return item.fields().map(function (displayName) { return DevExpress.Analytics.Internal.getFirstItemByPropertyValue(query.fields, "displayName", displayName).name; });
                                            });
                                        }
                                        if (_this._availableColumns[query.path]) {
                                            var summaryColumns = [];
                                            data.masterDetailSummaryOptionsColumns[query.path] = ko.observableArray([]);
                                            _this._availableColumns[query.path].items.forEach(function (fieldName) {
                                                var field = DevExpress.Analytics.Internal.getFirstItemByPropertyValue(query.fields, "displayName", fieldName);
                                                if (field.specifics && ["integer", "float", "date"].indexOf(field.specifics.toLowerCase()) > -1) {
                                                    summaryColumns.push(field);
                                                }
                                            });
                                            summaryColumns.sort(function (a, b) { return a.name.localeCompare(b.name); });
                                            if (summaryColumns.length === 0)
                                                delete data.masterDetailSummaryOptionsColumns[query.path];
                                            else
                                                data.masterDetailSummaryOptionsColumns[query.path](summaryColumns);
                                        }
                                    });
                                }
                            }
                        };
                        MasterDetailAddGroupingLevel.prototype.reset = function () {
                            _super.prototype.reset.call(this);
                            this.reportTree([]);
                            this.currentPath("");
                            this.currentFields(null);
                            this.currentGroups(null);
                        };
                        return MasterDetailAddGroupingLevel;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.MasterDetailAddGroupingLevel = MasterDetailAddGroupingLevel;
                    var MasterDetailChooseSummaryOptions = (function (_super) {
                        __extends(MasterDetailChooseSummaryOptions, _super);
                        function MasterDetailChooseSummaryOptions(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this._allColumns = {};
                            _this._masterDetailColumns = {};
                            _this.toggleIgnoreNullValues = function () {
                                _this.ignoreNullValues(!_this.ignoreNullValues());
                            };
                            _this.summaryOptions = ko.observableArray([]);
                            _this.ignoreNullValues = ko.observable(false);
                            _this.template = "dxrd-page-masterdetail-summary";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Choose summary functions to calculate in reports.", "ReportBoxDesignerStringId.Wizard_MasterDetailChooseSummaryOptions_Description");
                            _this.reportTree = ko.observableArray([]);
                            _this.currentPath = ko.observable("");
                            _this.availableFields = ko.observableArray([]);
                            _this.summaryInfos = ko.observableArray([]);
                            _this.selectFieldToSummaryCaption = DevExpress.Analytics.Utils.getLocalization('Select fields and assign summary functions to them', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SelectFieldsAndSummaries');
                            _this.fieldsCaption = DevExpress.Analytics.Utils.getLocalization('Fields', 'DevExpress.XtraReports.UI.XRPivotGrid.Fields');
                            _this.summaryFunctionCaption = DevExpress.Analytics.Utils.getLocalization('Summary Functions', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SummaryFunctions');
                            _this.ignoreNullValuesCaption = DevExpress.Analytics.Utils.getLocalization('Ignore null values', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues');
                            _this.currentPath.subscribe(function (newPath) {
                                _this._changeQuery(newPath);
                            });
                            return _this;
                        }
                        MasterDetailChooseSummaryOptions.prototype._createSummaryInfo = function () {
                            var _this = this;
                            var newItem = new Internal.SummaryInfo();
                            newItem.field.subscribe(function (newValue) {
                                _this._createNewItemIfNeed();
                            });
                            return newItem;
                        };
                        MasterDetailChooseSummaryOptions.prototype._createNewItemIfNeed = function () {
                            var _summaryInfos = this.summaryInfos.peek();
                            if (_summaryInfos.filter(function (item) { return !item.field(); }).length === 0 && _summaryInfos.length < this.availableFields.peek().length)
                                this.summaryInfos.push(this._createSummaryInfo());
                            var fieldNames = this.summaryInfos.peek().filter(function (item) { return !!item.field(); }).map(function (item) { return item.field().name; });
                            this.displayedFields[this.currentPath()] && this.displayedFields[this.currentPath()]().forEach(function (item) { return item.visible(fieldNames.indexOf(item.name) === -1); });
                        };
                        MasterDetailChooseSummaryOptions.prototype._changeQuery = function (path) {
                            this.currentPath(path);
                            this.summaryInfoMapByDataMember[this._currentDataMember] = this.summaryInfos();
                            this._currentDataMember = path;
                            this.availableFields(this._masterDetailColumns[path] && this._masterDetailColumns[path]() || []);
                            this.summaryInfos(this.summaryInfoMapByDataMember[path] || []);
                            this._createNewItemIfNeed();
                        };
                        MasterDetailChooseSummaryOptions.prototype.removeSummaryInfo = function (info) {
                            var index = this.summaryInfos.indexOf(info);
                            if (index === -1)
                                return;
                            this.summaryInfos.splice(index, 1);
                            this._createNewItemIfNeed();
                        };
                        MasterDetailChooseSummaryOptions.prototype._begin = function (data) {
                            var _this = this;
                            this.isVisible = !$.isEmptyObject(data.masterDetailSummaryOptionsColumns);
                            if (!this.isVisible)
                                return;
                            this._masterDetailColumns = $.extend(true, {}, data.masterDetailSummaryOptionsColumns);
                            this.ignoreNullValues(data.ignoreNullValuesForSummary);
                            this.reportTree(data.reportTree().map(function (item) { return $.extend(true, {}, item); }));
                            this._currentDataMember = this.reportTree()[0].path;
                            var allColumnsTest = {};
                            this.reportTree().forEach(function (query) {
                                allColumnsTest[query.path] = data.masterDetailSummaryOptionsColumns[query.path] && data.masterDetailSummaryOptionsColumns[query.path]().map(function (field) { return field.name; });
                            });
                            var changes = [];
                            $.each(allColumnsTest, function (key, value) {
                                changes = changes.concat(ko.utils.compareArrays(_this._allColumns[key], value));
                            });
                            var isColumnsChanged = changes.some(function (change, index, array) { return change.status != "retained"; });
                            if (isColumnsChanged) {
                                this._allColumns = allColumnsTest;
                                this.summaryInfos([]);
                                data.masterDetailSummariesInfo = {};
                                this.summaryInfoMapByDataMember = {};
                                this.displayedFields = {};
                                $.each(this._masterDetailColumns, function (key, value) {
                                    _this.displayedFields[key] = ko.observableArray([]);
                                    _this.displayedFields[key](value().map(function (item) {
                                        return { name: item.name, displayName: item.displayName, visible: ko.observable(true) };
                                    }));
                                });
                            }
                            else {
                                this.summaryInfos(this.summaryInfoMapByDataMember[this._currentDataMember]);
                            }
                            this._changeQuery(this._currentDataMember);
                        };
                        MasterDetailChooseSummaryOptions.prototype.commit = function (data) {
                            if (!this.isVisible)
                                return;
                            this.summaryInfoMapByDataMember[this._currentDataMember] = this.summaryInfos();
                            data.masterDetailSummaryOptionsColumns = this._masterDetailColumns;
                            data.masterDetailSummariesInfo = {};
                            $.each(this.summaryInfoMapByDataMember, function (key, value) {
                                data.masterDetailSummariesInfo[key] = value.filter(function (item) { return !!item.field(); }).map(function (summaryOption) { return ({ column: summaryOption.field(), summaryFunctions: summaryOption.value.value().map(function (item) { return summaryOption.value.dataSource.map(function (option) { return option.value; }).indexOf(item); }) }); });
                            });
                            data.ignoreNullValuesForSummary = this.ignoreNullValues();
                        };
                        MasterDetailChooseSummaryOptions.prototype.reset = function () {
                            _super.prototype.reset.call(this);
                            this.summaryOptions([]);
                            this.reportTree([]);
                            this.currentPath("");
                            this.availableFields([]);
                            this.summaryInfos([]);
                            this.summaryInfoMapByDataMember = {};
                        };
                        return MasterDetailChooseSummaryOptions;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.MasterDetailChooseSummaryOptions = MasterDetailChooseSummaryOptions;
                    var MasterDetailSelectReportDataPage = (function (_super) {
                        __extends(MasterDetailSelectReportDataPage, _super);
                        function MasterDetailSelectReportDataPage(wizard, fieldListItemsCallback, createSqlDataSourceInfo, createJsonDataSourceInfo, hideDataMemberSubItems) {
                            if (hideDataMemberSubItems === void 0) { hideDataMemberSubItems = false; }
                            var _this = _super.call(this, wizard) || this;
                            _this._rootItems = ko.observableArray([]);
                            _this._dataMemberSelectedPath = ko.observable(null);
                            _this._fieldSelectedPath = ko.observable(null);
                            _this._checkedDataMembers = ko.observableArray([]);
                            _this._checkedFields = ko.observableArray([]).extend({ deferred: true });
                            _this._showDataSource = false;
                            _this._resetDataAfterCheck = function () {
                                _this._data.masterDetailGroups = {};
                                _this._data.masterDetailInfoCollection([]);
                                _this._data.masterDetailSummaryOptionsColumns = {};
                                _this._data.masterDetailSummariesInfo = {};
                            };
                            _this._afterCheckToggled = function (node) {
                                _this._resetDataAfterCheck();
                                if (!DevExpress.Analytics.Internal.isList(node))
                                    return;
                                if (!node.unChecked()) {
                                    if (_this._checkedDataMembers.indexOf(node) === -1) {
                                        _this._checkedDataMembers.push(node);
                                        _this._fieldSelectedPath(node.path);
                                    }
                                }
                                else
                                    _this._checkedDataMembers.remove(node);
                            };
                            _this._afterCheckToggledFields = function (node) {
                                _this._resetDataAfterCheck();
                                _this._processNode(node);
                            };
                            _this._createMasterDetailTreeNode = function (item, isChecked, path) {
                                return new DevExpress.Analytics.Wizard.Internal.DataMemberTreeNode(item.name, item.displayName, item.specifics, isChecked, path, _this._afterCheckToggledFields);
                            };
                            _this._createMasterDetailFirstTabTreeNode = function (item, isChecked, path) {
                                var checked = isChecked || (_this._showDataSource ? [_this.dataSourcePath, _this.initialFullDataMember].join(".") : _this.initialFullDataMember) === path;
                                return new Internal.DataMemberCustomCheckedTreeNode(item.name, item.displayName, item.specifics, checked, path, _this._afterCheckToggled);
                            };
                            _this._createMasterDetailLeafTreeNode = function (item, isChecked, path) {
                                return new DevExpress.Analytics.Wizard.Internal.FieldTreeNode(item.name, item.displayName, item.specifics, isChecked, path, _this._afterCheckToggledFields);
                            };
                            _this.template = "dxrd-page-masterdetail-select-reportdata";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Select data members to assign to the report and its detail reports and fields to display in these reports.", "ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_Description");
                            _this.showFirstLevelDataMembers = ko.observable(false);
                            _this.selectDataMembersCaption = DevExpress.Analytics.Utils.getLocalization('Select data members', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_SelectDataMembers');
                            _this.selectDataFieldsCaption = DevExpress.Analytics.Utils.getLocalization('Select data fields', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_SelectDataFields');
                            _this.actionNext.isDisabled = ko.pureComputed(function () {
                                return !_this._fieldMemberItemsProvider.hasCheckedItems();
                            });
                            _this._fieldListCallBack = fieldListItemsCallback;
                            _this._createSqlDataSourceInfo = createSqlDataSourceInfo;
                            _this._createJsonDataSourceInfo = createJsonDataSourceInfo;
                            _this._hideDataMemberSubItems = hideDataMemberSubItems;
                            var fieldListProvider = new DevExpress.Analytics.Internal.FieldListProvider(_this._wrapFieldListCallback(fieldListItemsCallback), ko.observableArray([]));
                            _this._dataMemberItemsProvider = new DevExpress.Analytics.Wizard.Internal.TreeNodeItemsProvider(fieldListProvider, _this._rootItems, _this._createMasterDetailFirstTabTreeNode, _this._createMasterDetailLeafTreeNode);
                            _this._fieldMemberItemsProvider = new DevExpress.Analytics.Wizard.Internal.TreeNodeItemsProvider(fieldListProvider, _this._rootItems, _this._createMasterDetailTreeNode, _this._createMasterDetailLeafTreeNode);
                            _this._availableFieldsController = new Internal.AvailableFieldsTreeListController(_this._checkedDataMembers);
                            ko.computed(function () {
                                var item = _this._availableFieldsController.selectedItem;
                                item && item.collapsed.peek() && item.toggleCollapsed();
                            });
                            _this.dataMemberFieldListModel = {
                                itemsProvider: _this._dataMemberItemsProvider,
                                selectedPath: _this._dataMemberSelectedPath,
                                treeListController: new Internal.MasterDetailTreeListController(_this.showFirstLevelDataMembers),
                                templateName: "dxrd-treelist-with-checkbox"
                            };
                            _this.fieldMemberFieldListModel = {
                                itemsProvider: _this._fieldMemberItemsProvider,
                                selectedPath: _this._fieldSelectedPath,
                                treeListController: _this._availableFieldsController,
                                templateName: "dxrd-treelist-with-checkbox"
                            };
                            return _this;
                        }
                        MasterDetailSelectReportDataPage.prototype._wrapFieldListCallback = function (itemsCallback) {
                            var _this = this;
                            return function (pathRequest) {
                                if (_this._hideDataMemberSubItems) {
                                    return $.Deferred().resolve([]).promise();
                                }
                                else {
                                    return itemsCallback(new DevExpress.Analytics.Utils.PathRequest(_this._showDataSource ? pathRequest.fullPath : _this.dataSourcePath + '.' + pathRequest.fullPath), _this._dataSource);
                                }
                            };
                        };
                        Object.defineProperty(MasterDetailSelectReportDataPage.prototype, "dataSourcePath", {
                            get: function () {
                                return (this._dataSource.id || this._dataSource.ref);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MasterDetailSelectReportDataPage.prototype.getDataMemberSelectedPath = function (data) {
                            if (data.masterDetailInfoCollection().length > 0)
                                return null;
                            var dataMember = data.dataMember() || data.dataMember() || data.initialDataMember;
                            return dataMember || null;
                        };
                        MasterDetailSelectReportDataPage.prototype._beginInternal = function (data) {
                            var _this = this;
                            this._dataSource = data.dataSource;
                            var dataMember = this.getDataMemberSelectedPath(data);
                            this.initialFullDataMember = data.initialDataMember;
                            if (data.masterDetailInfoCollection().length === 0) {
                                return this._fieldListCallBack(new DevExpress.Analytics.Utils.PathRequest(this.dataSourcePath), this._dataSource)
                                    .done(function (fields) {
                                    _this._fieldSelectedPath(null);
                                    _this._checkedDataMembers([]);
                                    _this._showDataSource = false;
                                    if (Designer.Internal.includeNonListItem(fields)) {
                                        _this._dataMemberSelectedPath([_this.dataSourcePath, dataMember].join("."));
                                        _this._showDataSource = true;
                                        _this._rootItems([{
                                                name: _this.dataSourcePath,
                                                displayName: _this._dataSource.name,
                                                specifics: "List"
                                            }]);
                                    }
                                    else {
                                        _this._dataMemberSelectedPath(dataMember);
                                        _this._rootItems(fields.map(function (value) {
                                            return {
                                                name: value.name,
                                                displayName: value.displayName || value.name,
                                                specifics: "List"
                                            };
                                        }));
                                    }
                                });
                            }
                            else if (this.isVisible) {
                                return $.Deferred().resolve().promise();
                            }
                        };
                        MasterDetailSelectReportDataPage.prototype._processFields = function (node) {
                            if (!node.unChecked()) {
                                if (this._checkedFields.indexOf(node) === -1) {
                                    this._checkedFields.push(node);
                                }
                            }
                            else
                                this._checkedFields.remove(node);
                        };
                        MasterDetailSelectReportDataPage.prototype._processNode = function (node) {
                            var _this = this;
                            if (DevExpress.Analytics.Internal.isList(node)) {
                                node.children().forEach(function (item) {
                                    if (DevExpress.Analytics.Internal.isList(item)) {
                                        _this._processNode(item);
                                    }
                                    else {
                                        _this._processFields(item);
                                    }
                                });
                            }
                            else {
                                this._processFields(node);
                            }
                        };
                        MasterDetailSelectReportDataPage.prototype.beginAsync = function (data) {
                            var _this = this;
                            this._data = data;
                            if (!data.dataSource) {
                                var deferred = $.Deferred();
                                var dataSourcePromise = !!data.jsonDataSource ?
                                    this._createJsonDataSourceInfo(data.jsonDataSource) :
                                    this._createSqlDataSourceInfo(data.sqlDataSourceWizardModel.sqlDataSource);
                                dataSourcePromise.done(function (result) {
                                    result.data = Data.ObjectItem.createNew(result.data);
                                    data.dataSource = result;
                                    _this._beginInternal(data)
                                        .done(deferred.resolve)
                                        .fail(deferred.reject);
                                }).fail(deferred.reject);
                                return deferred.promise();
                            }
                            else {
                                return this._beginInternal(data);
                            }
                        };
                        MasterDetailSelectReportDataPage.prototype.commit = function (data) {
                            var _this = this;
                            if (data.masterDetailInfoCollection().length === 0) {
                                data.masterDetailInfoCollection(this._fieldMemberItemsProvider.getRootItems().filter(function (item) { return item.isList && !item.isComplex; }).map(function (item) {
                                    if (_this._showDataSource)
                                        item = $.extend({}, item, { name: "" });
                                    return new Internal.MasterDetailQueryInfo(item);
                                }));
                            }
                        };
                        MasterDetailSelectReportDataPage.prototype.reset = function () {
                            _super.prototype.reset.call(this);
                            this._resetDataAfterCheck();
                        };
                        return MasterDetailSelectReportDataPage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.MasterDetailSelectReportDataPage = MasterDetailSelectReportDataPage;
                    var PageSetupPage = (function (_super) {
                        __extends(PageSetupPage, _super);
                        function PageSetupPage(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this.template = "dxrd-page-pageSetup";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Specify report page settings.", "ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Description");
                            _this.lookupData = {
                                paperKind: Controls.Metadata.paperKind.valuesArray
                                    .map(function (x) { return { value: x.value, displayName: DevExpress.Analytics.Utils.getLocalization(x.displayValue, x.localizationId) }; })
                                    .sort(function (a, b) { return a.value === 'Custom' ? 1 : b.value === 'Custom' ? -1 : a.displayName.localeCompare(b.displayName); }),
                                unit: [
                                    { value: Wizard.GraphicsUnit.Inch, displayName: DevExpress.Analytics.Utils.getLocalization("Inch", "AnalyticsCoreStringId.Wizard_Inch") },
                                    { value: Wizard.GraphicsUnit.Millimeter, displayName: DevExpress.Analytics.Utils.getLocalization("Millimeter", "AnalyticsCoreStringId.Wizard_Millimeter") },
                                    { value: Wizard.GraphicsUnit.Pixel, displayName: DevExpress.Analytics.Utils.getLocalization("Pixel", "ASPxReportsStringId.ReportDesigner_Wizard_Pixel") }
                                ]
                            };
                            _this.paperKind = ko.observable(Controls.Metadata.paperKind.defaultVal);
                            _this.landscape = ko.observable(false);
                            _this.width = ko.observable(DevExpress.Analytics.Internal.papperKindMapper[Controls.Metadata.paperKind.defaultVal].width / 100);
                            _this.height = ko.observable(DevExpress.Analytics.Internal.papperKindMapper[Controls.Metadata.paperKind.defaultVal].height / 100);
                            _this.fixedSize = ko.computed(function () { return _this.paperKind() !== 'Custom'; });
                            _this.marginTop = ko.observable(1);
                            _this.marginRight = ko.observable(1);
                            _this.marginBottom = ko.observable(1);
                            _this.marginLeft = ko.observable(1);
                            _this._unit = ko.observable(Wizard.GraphicsUnit.Inch);
                            _this.unit = ko.computed({
                                read: function () { return _this._unit(); },
                                write: function (newVal) {
                                    var converter = Internal.PageSetupHelper.getConverter(_this._unit(), newVal);
                                    [_this.width, _this.height, _this.marginTop, _this.marginRight, _this.marginBottom, _this.marginLeft].forEach(function (x) { x(converter(x())); });
                                    _this._unit(newVal);
                                }
                            });
                            _this.paperKind.subscribe(function (newVal) {
                                var _a;
                                if (newVal !== 'Custom') {
                                    var convert = Internal.PageSetupHelper.getConverter(Wizard.GraphicsUnit.Inch, _this._unit());
                                    var width = convert(DevExpress.Analytics.Internal.papperKindMapper[newVal].width / 100);
                                    var height = convert(DevExpress.Analytics.Internal.papperKindMapper[newVal].height / 100);
                                    if (_this.landscape())
                                        _a = [height, width], width = _a[0], height = _a[1];
                                    _this.width(width);
                                    _this.height(height);
                                }
                            });
                            _this.landscape.subscribe(function (newVal) {
                                var _a;
                                var width = _this.height();
                                var height = _this.width();
                                _this.width(width);
                                _this.height(height);
                                var t = _this.marginTop(), r = _this.marginRight(), b = _this.marginBottom(), l = _this.marginLeft();
                                _a = newVal
                                    ? [l, t, r, b]
                                    : [r, b, l, t], t = _a[0], r = _a[1], b = _a[2], l = _a[3];
                                _this.marginTop(t);
                                _this.marginRight(r);
                                _this.marginBottom(b);
                                _this.marginLeft(l);
                            });
                            _this.previewAreaWidth = ko.observable(200);
                            _this.previewAreaHeight = ko.observable(292);
                            var previewRatio = ko.pureComputed(function () { return Math.min(_this.previewAreaWidth() / _this.width(), _this.previewAreaHeight() / _this.height()); });
                            _this.previewPageHeight = ko.pureComputed(function () { return _this.height() * previewRatio(); });
                            _this.previewPageWidth = ko.pureComputed(function () { return Math.round(_this.width() * previewRatio()); });
                            _this.previewPageTop = ko.pureComputed(function () { return Math.round((_this.previewAreaHeight() - _this.previewPageHeight()) / 2); });
                            _this.previewPageLeft = ko.pureComputed(function () { return Math.round((_this.previewAreaWidth() - _this.previewPageWidth()) / 2); });
                            _this.previewTopMargin = ko.pureComputed(function () { return Math.round(_this.marginTop() * previewRatio()); });
                            _this.previewRightMargin = ko.pureComputed(function () { return Math.round(_this.marginRight() * previewRatio()); });
                            _this.previewBottomMargin = ko.pureComputed(function () { return Math.round(_this.marginBottom() * previewRatio()); });
                            _this.previewLeftMargin = ko.pureComputed(function () { return Math.round(_this.marginLeft() * previewRatio()); });
                            _this.valueFormat = ko.pureComputed(function () {
                                switch (_this._unit()) {
                                    case Wizard.GraphicsUnit.Inch:
                                        return '#0.00 "';
                                    case Wizard.GraphicsUnit.Millimeter:
                                        return '#0.0 mm';
                                    case Wizard.GraphicsUnit.Pixel:
                                        return '#0 px';
                                }
                            });
                            return _this;
                        }
                        PageSetupPage.prototype.reset = function () {
                            _super.prototype.reset.call(this);
                            this.paperKind(Controls.Metadata.paperKind.defaultVal);
                            this.landscape(false);
                            this._unit(Wizard.GraphicsUnit.Inch);
                            this.width(DevExpress.Analytics.Internal.papperKindMapper[Controls.Metadata.paperKind.defaultVal].width / 100);
                            this.height(DevExpress.Analytics.Internal.papperKindMapper[Controls.Metadata.paperKind.defaultVal].height / 100);
                            this.marginLeft(1);
                            this.marginRight(1);
                            this.marginTop(1);
                            this.marginBottom(1);
                        };
                        PageSetupPage.prototype._begin = function (data) {
                            if (data.pageSetup) {
                                this.paperKind(data.pageSetup.paperKind);
                                this.landscape(!data.portrait);
                                this.unit(data.pageSetup.unit);
                                this.width(data.pageSetup.width);
                                this.height(data.pageSetup.height);
                                this.marginLeft(data.pageSetup.marginLeft);
                                this.marginRight(data.pageSetup.marginRight);
                                this.marginTop(data.pageSetup.marginTop);
                                this.marginBottom(data.pageSetup.marginBottom);
                            }
                        };
                        PageSetupPage.prototype.commit = function (data) {
                            data.pageSetup = {
                                paperKind: this.paperKind(),
                                unit: this.unit(),
                                width: this.width(),
                                height: this.height(),
                                marginLeft: this.marginLeft(),
                                marginRight: this.marginRight(),
                                marginTop: this.marginTop(),
                                marginBottom: this.marginBottom()
                            };
                            data.portrait = !this.landscape();
                        };
                        return PageSetupPage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.PageSetupPage = PageSetupPage;
                    var parametersViewModelConverter = {
                        createParameterViewModel: function (parameter) { return new DataSourceParameterWrapper(parameter); },
                        getParameterFromViewModel: function (parameterViewModel) { return parameterViewModel.parameter; }
                    };
                    var DataSourceParameterWrapper = (function () {
                        function DataSourceParameterWrapper(parameter) {
                            this.parameter = parameter;
                            this.name = parameter.name;
                            this.value = parameter.value;
                            this.type = parameter.type;
                            this.isValid = parameter["isValid"];
                        }
                        Object.defineProperty(DataSourceParameterWrapper.prototype, "specifics", {
                            get: function () {
                                return this.parameter.specifics;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DataSourceParameterWrapper.prototype.getInfo = function () {
                            var infoClone = $.extend(true, [], this.parameter.getInfo());
                            var valueInfo = DevExpress.Analytics.Internal.find(infoClone, function (property) { return property.propertyName === "value"; });
                            if (valueInfo.editor.header === DevExpress.Analytics.Widgets.editorTemplates.expressionEditor.header) {
                                valueInfo.editor.extendedOptions = $.extend({}, valueInfo.editor.extendedOptions, { fieldListProvider: DataSourceParameterWrapper._itemsProvider });
                            }
                            return infoClone;
                        };
                        DataSourceParameterWrapper._itemsProvider = {
                            getItems: function () { return $.Deferred().resolve([]).promise(); }
                        };
                        return DataSourceParameterWrapper;
                    }());
                    Legacy.DataSourceParameterWrapper = DataSourceParameterWrapper;
                    var ReportWizardConfigureParametersPage = (function (_super) {
                        __extends(ReportWizardConfigureParametersPage, _super);
                        function ReportWizardConfigureParametersPage(wizard) {
                            var _this = _super.call(this, wizard, parametersViewModelConverter) || this;
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Manage parameters that are used in queries and/or stored procedures.", "AnalyticsCoreStringId.SqlDSWizard_PageConfigureParameters");
                            _this.actionFinish.isDisabled(true);
                            _this.scrollViewHeight = ReportWizard._masterDetailScrollViewHeight;
                            return _this;
                        }
                        ReportWizardConfigureParametersPage.prototype.beginAsync = function (data) {
                            if (data.sqlDataSourceWizardModel) {
                                this.isVisible = true;
                                var result = _super.prototype.beginAsync.call(this, data.sqlDataSourceWizardModel);
                                this.actionNext.isDisabled(false);
                                return result;
                            }
                            else {
                                this.isVisible = false;
                            }
                        };
                        ReportWizardConfigureParametersPage.prototype.commit = function (data) {
                            if (data.sqlDataSourceWizardModel) {
                                return _super.prototype.commit.call(this, data.sqlDataSourceWizardModel);
                            }
                        };
                        return ReportWizardConfigureParametersPage;
                    }(DevExpress.Analytics.Wizard.Legacy.MultiQueryConfigureParametersPage));
                    Legacy.ReportWizardConfigureParametersPage = ReportWizardConfigureParametersPage;
                    var SelectColumnsPage = (function (_super) {
                        __extends(SelectColumnsPage, _super);
                        function SelectColumnsPage(wizard, getFieldListItems) {
                            var _this = _super.call(this, wizard) || this;
                            _this._selectedPath = null;
                            _this._fields = [];
                            _this.template = "dxrd-page-columns";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Select the columns you want to display within your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseColumns");
                            _this.availableFields = new Designer.Internal.ListViewModel(DevExpress.Analytics.Utils.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields"));
                            _this.selectedFields = new Designer.Internal.ListViewModel(DevExpress.Analytics.Utils.getLocalization("Selected fields", "ASPxReportsStringId.ReportDesigner_Wizard_SelectedFields"));
                            _this.isSelectEnable = ko.pureComputed(function () {
                                return !!_this.availableFields.activeItem;
                            });
                            _this.isUnselectEnable = ko.pureComputed(function () {
                                return !!_this.selectedFields.activeItem;
                            });
                            _this.select = function () {
                                _this.selectedFields.add(_this.availableFields.activeItem);
                                _this.availableFields.removeActiveItem();
                            };
                            _this.selectAll = function () {
                                _this.selectedFields.setItems(_this._fields.slice(0));
                                _this.availableFields.removeAll();
                            };
                            _this.unselect = function () {
                                _this.availableFields.add(_this.selectedFields.activeItem);
                                _this.selectedFields.removeActiveItem();
                            };
                            _this.unselectAll = function () {
                                _this.availableFields.setItems(_this._fields.slice(0));
                                _this.selectedFields.removeAll();
                            };
                            _this.availableFieldDblClick = function (field) {
                                _this.availableFields.activeItem = field;
                                _this.select();
                            };
                            _this.availableFieldClick = function (e) {
                                _this.availableFields.activeItem = e.itemData;
                            };
                            _this.selectedFieldDblClick = function (field) {
                                _this.selectedFields.activeItem = field;
                                _this.unselect();
                            };
                            _this.selectedFieldClick = function (e) {
                                _this.selectedFields.activeItem = e.itemData;
                            };
                            _this.actionNext.isDisabled = ko.pureComputed(function () {
                                return _this.selectedFields.isEmpty;
                            });
                            _this._fieldListsCallback = getFieldListItems;
                            _this.actionFinish.isDisabled(false);
                            return _this;
                        }
                        SelectColumnsPage.prototype.beginAsync = function (data) {
                            var _this = this;
                            this.selectedFields.setItems(data.fields().slice(0));
                            if (this._selectedPath != data.dataMemberPath()) {
                                return this._fieldListsCallback(new DevExpress.Analytics.Utils.PathRequest(data.dataMemberPath()), data.dataSource)
                                    .done(function (fields) {
                                    _this._fields = fields.filter(function (item) {
                                        return (item.specifics !== "List" && item.specifics !== "ListSource" && item.isList !== true);
                                    });
                                    _this._selectedPath = data.dataMemberPath();
                                    _this.availableFields.setItems(_this._fields.filter(function (value) {
                                        return _this.selectedFields.items.indexOf(value) === -1;
                                    }));
                                });
                            }
                            else {
                                this.availableFields.setItems(this._fields.filter(function (value) {
                                    return _this.selectedFields.items.indexOf(value) === -1;
                                }));
                            }
                        };
                        SelectColumnsPage.prototype.commit = function (data) {
                            data.fields(this.selectedFields.items);
                        };
                        SelectColumnsPage.prototype.selectedPath = function () {
                            return this._selectedPath;
                        };
                        SelectColumnsPage.prototype.reset = function () {
                            this._selectedPath = null;
                        };
                        return SelectColumnsPage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.SelectColumnsPage = SelectColumnsPage;
                    var DataMemberPageTreeListController = (function (_super) {
                        __extends(DataMemberPageTreeListController, _super);
                        function DataMemberPageTreeListController() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        DataMemberPageTreeListController.prototype.canSelect = function (value) {
                            return (this.hasItems(value.data) && !!value.path) || value.data.specifics === "none";
                        };
                        return DataMemberPageTreeListController;
                    }(DevExpress.Analytics.Widgets.Internal.DataMemberTreeListController));
                    var SelectDataMemberPage = (function (_super) {
                        __extends(SelectDataMemberPage, _super);
                        function SelectDataMemberPage(wizard, fieldListItemsCallback, createSqlDataSourceInfo, hideDataMemberSubItems) {
                            if (hideDataMemberSubItems === void 0) { hideDataMemberSubItems = false; }
                            var _this = _super.call(this, wizard) || this;
                            _this._rootItems = ko.observableArray([]);
                            _this._selectedPath = ko.observable(null);
                            _this.template = "dxrd-page-dataMember";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("The table or view you choose determines wich columns will be available in your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataMember");
                            _this.actionNext.isDisabled = _this.actionFinish.isDisabled = ko.pureComputed(function () {
                                return _this._selectedPath() === null || _this._selectedPath() === undefined;
                            });
                            _this._fieldListCallBack = fieldListItemsCallback;
                            _this._createSqlDataSourceInfo = createSqlDataSourceInfo;
                            _this._hideDataMemberSubItems = hideDataMemberSubItems;
                            _this.scrollViewHeight = ReportWizard._masterDetailScrollViewHeight;
                            _this.fieldListModel = {
                                itemsProvider: new DevExpress.Analytics.Internal.FieldListProvider(_this._wrapFieldListCallback(fieldListItemsCallback), _this._rootItems),
                                selectedPath: _this._selectedPath,
                                treeListController: new DataMemberPageTreeListController()
                            };
                            return _this;
                        }
                        SelectDataMemberPage.prototype._getSelectedDataMember = function () {
                            if (this.isVisible) {
                                return this.fieldListModel.treeListController.selectedItem && this.fieldListModel.treeListController.selectedItem.data;
                            }
                            if (this._dataSource) {
                                return {
                                    name: this._selectedPath() ? this.dataSourcePath : "",
                                    displayName: this._dataSource.name,
                                    isList: true,
                                    specifics: this._dataSource.specifics || "ListSource"
                                };
                            }
                        };
                        SelectDataMemberPage.prototype._wrapFieldListCallback = function (itemsCallback) {
                            var _this = this;
                            return function (pathRequest) {
                                if (_this._hideDataMemberSubItems) {
                                    var deferred = $.Deferred();
                                    deferred.resolve([]);
                                    return deferred.promise();
                                }
                                else {
                                    return itemsCallback(new DevExpress.Analytics.Utils.PathRequest(_this.dataSourcePath + '.' + pathRequest.fullPath), _this._dataSource);
                                }
                            };
                        };
                        Object.defineProperty(SelectDataMemberPage.prototype, "dataSourcePath", {
                            get: function () {
                                return (this._dataSource.id || this._dataSource.ref);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SelectDataMemberPage.prototype._beginInternal = function (data) {
                            var _this = this;
                            this._dataSource = data.dataSource;
                            if (data.dataMemberPath() === null) {
                                return this._fieldListCallBack(new DevExpress.Analytics.Utils.PathRequest(this.dataSourcePath), this._dataSource).done(function (fields) {
                                    _this._selectedPath(null);
                                    _this.isVisible = fields.length > 0 && !fields.some(function (item) {
                                        return (item.specifics !== "List" && item.specifics !== "ListSource" && item.isList !== true);
                                    });
                                    _this._rootItems(fields.map(function (value) {
                                        return {
                                            name: value.displayName,
                                            id: value.name,
                                            specifics: "List",
                                            dataSerializer: null,
                                            data: {}
                                        };
                                    }));
                                });
                            }
                            else if (this.isVisible) {
                                this._selectedPath(data.dataMemberPath().replace(this.dataSourcePath + ".", ""));
                            }
                        };
                        SelectDataMemberPage.prototype.beginAsync = function (data) {
                            var _this = this;
                            if (!data.dataSource) {
                                var deferred = $.Deferred();
                                this._createSqlDataSourceInfo(data.sqlDataSourceWizardModel.sqlDataSource)
                                    .done(function (result) {
                                    result.data = Data.ObjectItem.createNew(result.data);
                                    data.dataSource = result;
                                    _this._beginInternal(data)
                                        .done(deferred.resolve)
                                        .fail(deferred.reject);
                                }).fail(deferred.reject);
                                return deferred.promise();
                            }
                            else {
                                return this._beginInternal(data);
                            }
                        };
                        SelectDataMemberPage.prototype.commit = function (data) {
                            data.dataMemberPath(DevExpress.Analytics.Internal.getFullPath(this.dataSourcePath, this._selectedPath()));
                            data.dataMember(this._getSelectedDataMember());
                        };
                        return SelectDataMemberPage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.SelectDataMemberPage = SelectDataMemberPage;
                    var SelectDataSourcePage = (function (_super) {
                        __extends(SelectDataSourcePage, _super);
                        function SelectDataSourcePage(wizard, availableDataSources, isDataSourceCreationAvailable) {
                            var _this = _super.call(this, wizard, availableDataSources, isDataSourceCreationAvailable) || this;
                            var isMasterDetailWizard = wizard instanceof ReportWizard && wizard.isMasterDetailWizard;
                            _this.dataSourcesListHeight = ko.pureComputed(function () {
                                if (_this.isDataSourceCreationAvailable())
                                    return isMasterDetailWizard ? 282 : 221;
                                else
                                    return isMasterDetailWizard ? parseInt(ReportWizard._masterDetailScrollViewHeight) : parseInt(DevExpress.Analytics.Wizard.Legacy.WizardViewModel.WIZARD_DEFAULT_SCROLLVIEW_HEIGHT);
                            });
                            return _this;
                        }
                        SelectDataSourcePage.prototype._getSelectedDataSource = function (data) {
                            var availableDataSources = this.availableDataSources() || [];
                            if (data.dataSource) {
                                return [data.dataSource];
                            }
                            else if (availableDataSources.length === 0) {
                                return [];
                            }
                            else if (data.initialDataSourceInfo) {
                                var ds = availableDataSources.filter(function (ds) { return ds.id === data.initialDataSourceInfo.id || ds.ref === data.initialDataSourceInfo.ref; })[0];
                                return ds ? [ds] : [];
                            }
                            else {
                                return [availableDataSources[0]];
                            }
                        };
                        SelectDataSourcePage.prototype._begin = function (data) {
                            _super.prototype._begin.call(this, data);
                        };
                        SelectDataSourcePage.prototype.commit = function (data) {
                            if (this.selectedDataSourceOperation().createNewDataSource) {
                                data.dataSource = null;
                                data.sqlDataSourceWizardModel = data.sqlDataSourceWizardModel || new DevExpress.Analytics.Wizard.Legacy.MultiQueryDataSourceWizardModel(Designer.Internal.QBRequestWrapper);
                            }
                            else {
                                data.dataSource = this.selectedDataSource()[0];
                                data.sqlDataSourceWizardModel = null;
                            }
                        };
                        SelectDataSourcePage.prototype.getSelectedDataSource = function (data) {
                            return this._getSelectedDataSource(data);
                        };
                        Object.defineProperty(SelectDataSourcePage.prototype, "createNewDataSourceOperationText", {
                            get: function () {
                                return DevExpress.Analytics.Utils.getLocalization("No, I'd like to create a new SQL data source", "ASPxReportsStringId.ReportDesigner_Wizard_CreateNewDataSource");
                            },
                            enumerable: true,
                            configurable: true
                        });
                        return SelectDataSourcePage;
                    }(DevExpress.Analytics.Wizard.Legacy.SelectOptionalConnectionString));
                    Legacy.SelectDataSourcePage = SelectDataSourcePage;
                    var SelectPredefinedLabelsPage = (function (_super) {
                        __extends(SelectPredefinedLabelsPage, _super);
                        function SelectPredefinedLabelsPage(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this.wizard = wizard;
                            _this.template = "dxrd-page-selectPredefinedLabels";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Select one of the predefined labels by specifying the Product and its ID.", "ReportBoxDesignerStringId.Wizard_LabelInformation_Description");
                            _this.selectedLabelProduct = ko.observable();
                            _this.selectedLabelDetails = ko.observable();
                            _this.labelDetails = ko.observable();
                            _this.selectedPaperSize = ko.computed({
                                read: function () {
                                    return DevExpress.Analytics.Internal.findFirstItemMatchesCondition(_this.labelData.paperKinds, function (item) { return item.id === _this.selectedLabelDetails().paperKindId; });
                                },
                                deferEvaluation: true
                            });
                            _this.width = ko.pureComputed(function () { return Designer.Internal.getFormattedValueInUnits(_this.selectedLabelDetails().width, _this.selectedPaperSize().unit) + (_this.selectedPaperSize().unit === Wizard.GraphicsUnit.Inch ? " in" : " mm"); });
                            _this.height = ko.pureComputed(function () { return Designer.Internal.getFormattedValueInUnits(_this.selectedLabelDetails().height, _this.selectedPaperSize().unit) + (_this.selectedPaperSize().unit === Wizard.GraphicsUnit.Inch ? " in" : " mm"); });
                            _this.paperType = ko.pureComputed(function () { return _this.selectedPaperSize().name; });
                            _this.pageSizeText = ko.pureComputed(function () { return Designer.Internal.getFormattedValueInUnits(_this.selectedPaperSize().width, _this.selectedPaperSize().unit) + " x " + Designer.Internal.getFormattedValueInUnits(_this.selectedPaperSize().height, _this.selectedPaperSize().unit) + (_this.selectedPaperSize().unit === Wizard.GraphicsUnit.Inch ? " in" : " mm"); });
                            _this.selectedLabelProduct.subscribe(function (newProductsType) {
                                var labelDetails = _this.labelData.labelDetails.filter(function (item) { return item.productId === newProductsType.id; });
                                _this.selectedLabelDetails(labelDetails[0]);
                                _this.labelDetails({
                                    store: labelDetails,
                                    paginate: labelDetails.length > 200,
                                    pageSize: 100
                                });
                            });
                            return _this;
                        }
                        SelectPredefinedLabelsPage.prototype.beginAsync = function (data) {
                            var _this = this;
                            this.isVisible = data.reportType === Wizard.ReportType.Label;
                            if (!this.isVisible)
                                return null;
                            return this.wizard.labelWizardData().done(function (labelData) {
                                _this.labelData = labelData;
                                if (data.labelDetails) {
                                    if (!_this.selectedLabelProduct() || _this.selectedLabelProduct().id !== data.labelDetails.productId) {
                                        _this.selectedLabelProduct(DevExpress.Analytics.Internal.findFirstItemMatchesCondition(_this.labelData.labelProducts, function (item) { return item.id === data.labelDetails.productId; }));
                                    }
                                    _this.selectedLabelDetails(DevExpress.Analytics.Internal.findFirstItemMatchesCondition(_this.labelData.labelDetails, function (item) { return item.id === data.labelDetails.id; }));
                                }
                                else {
                                    _this.selectedLabelProduct(_this.labelData.labelProducts[0]);
                                }
                            });
                        };
                        SelectPredefinedLabelsPage.prototype.commit = function (data) {
                            if (this.selectedLabelDetails() && (!data.labelDetails || data.labelDetails.id !== this.selectedLabelDetails().id)) {
                                data.labelDetails = $.extend({}, this.selectedLabelDetails());
                            }
                        };
                        return SelectPredefinedLabelsPage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.SelectPredefinedLabelsPage = SelectPredefinedLabelsPage;
                    var SetReportTitlePage = (function (_super) {
                        __extends(SetReportTitlePage, _super);
                        function SetReportTitlePage(wizard) {
                            var _this = _super.call(this, wizard) || this;
                            _this.template = "dxrd-page-reportTitle";
                            _this.description = DevExpress.Analytics.Utils.getLocalization("We have all the information needed to process the report.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportComplete_Description");
                            _this.reportTitle = ko.observable("");
                            _this.actionNext.isDisabled(true);
                            return _this;
                        }
                        SetReportTitlePage.prototype._begin = function (data) {
                            this.reportTitle(data.reportTitle ? data.reportTitle : "");
                        };
                        SetReportTitlePage.prototype.commit = function (data) {
                            data.reportTitle = this.reportTitle();
                        };
                        return SetReportTitlePage;
                    }(DevExpress.Analytics.Wizard.Legacy.WizardPage));
                    Legacy.SetReportTitlePage = SetReportTitlePage;
                    var ReportWizardSelectConnectionString = (function (_super) {
                        __extends(ReportWizardSelectConnectionString, _super);
                        function ReportWizardSelectConnectionString(wizard, connectionStrings) {
                            var _this = _super.call(this, wizard, connectionStrings) || this;
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Select one of the available data connections.", "AnalyticsCoreStringId.SqlDSWizard_PageChooseConnection");
                            _this.actionPrevious.isVisible(true);
                            return _this;
                        }
                        ReportWizardSelectConnectionString.prototype.beginAsync = function (data) {
                            if (data.sqlDataSourceWizardModel) {
                                this.isVisible = true;
                                return _super.prototype.beginAsync.call(this, data.sqlDataSourceWizardModel);
                            }
                            else {
                                this.isVisible = false;
                            }
                        };
                        ReportWizardSelectConnectionString.prototype.commit = function (data) {
                            if (data.sqlDataSourceWizardModel) {
                                return _super.prototype.commit.call(this, data.sqlDataSourceWizardModel);
                            }
                        };
                        return ReportWizardSelectConnectionString;
                    }(DevExpress.Analytics.Wizard.Legacy.SelectConnectionString));
                    Legacy.ReportWizardSelectConnectionString = ReportWizardSelectConnectionString;
                    var ReportWizardAddQueriesPage = (function (_super) {
                        __extends(ReportWizardAddQueriesPage, _super);
                        function ReportWizardAddQueriesPage(wizard, callbacks, disableCustomSql, rtl) {
                            var _this = _super.call(this, wizard, callbacks, disableCustomSql, rtl) || this;
                            _this.subscribeCheckedItems = ko.observable().extend({ notify: 'always', deferred: true });
                            _this.actionNext.isDisabled = _this.actionFinish.isDisabled;
                            _this.actionFinish.isDisabled = ko.computed(function () { return true; });
                            _this.scrollViewHeight = ReportWizard._masterDetailScrollViewHeight;
                            _this.customResetOptions = function () {
                                _this._reportData.dataSource = null;
                                _this._reportData.masterDetailInfoCollection([]);
                            };
                            var getItemsAfterCheck = function (node) {
                                return $.when.apply($, node.children.peek().map(function (item) {
                                    return _this["_itemsProvider"]().getItems(new DevExpress.Analytics.Utils.PathRequest(node.name + "." + item.name));
                                }));
                            };
                            _this.subscribeCheckedItems.subscribe(function (newVal) {
                                _this.isDataLoadingInProcess(false);
                            });
                            _this.getItemsAfterCheck = function (node) {
                                _this.isDataLoadingInProcess(true);
                                _this["_resetDataSourceResult"]();
                                if (node.checked.peek() && node.isList) {
                                    if (node.name === "tables" || node.name === "views") {
                                        _this["_itemsProvider"]().getItems(new DevExpress.Analytics.Utils.PathRequest(node.name)).done(function () {
                                            if (node.isList && node.children.peek().length > 0) {
                                                getItemsAfterCheck(node).always(function () {
                                                    return _this.subscribeCheckedItems.notifySubscribers();
                                                });
                                            }
                                            else {
                                                _this.subscribeCheckedItems.notifySubscribers();
                                            }
                                        }).fail(function () {
                                            _this.subscribeCheckedItems.notifySubscribers();
                                        });
                                    }
                                    else if (node.specifics === "table" || node.specifics === "view") {
                                        _this["_itemsProvider"]().getItems(new DevExpress.Analytics.Utils.PathRequest(node.specifics + "." + node.name))
                                            .always(function () { return _this.subscribeCheckedItems.notifySubscribers(); });
                                    }
                                    else if (node.name === "procedures") {
                                        _this["_itemsProvider"]().getItems(new DevExpress.Analytics.Utils.PathRequest(node.name))
                                            .always(function () { return _this.subscribeCheckedItems.notifySubscribers(); });
                                    }
                                    else {
                                        _this.subscribeCheckedItems.notifySubscribers();
                                    }
                                }
                                else {
                                    _this.subscribeCheckedItems.notifySubscribers();
                                }
                            };
                            return _this;
                        }
                        ReportWizardAddQueriesPage.prototype.beginAsync = function (data) {
                            this._reportData = data;
                            if (data.sqlDataSourceWizardModel) {
                                this.isVisible = true;
                                return _super.prototype.beginAsync.call(this, data.sqlDataSourceWizardModel);
                            }
                            else {
                                this.isVisible = false;
                            }
                        };
                        ReportWizardAddQueriesPage.prototype.commit = function (data) {
                            if (data.sqlDataSourceWizardModel) {
                                return _super.prototype.commit.call(this, data.sqlDataSourceWizardModel);
                            }
                        };
                        return ReportWizardAddQueriesPage;
                    }(DevExpress.Analytics.Wizard.Legacy.MultiQueryConfigurePage));
                    Legacy.ReportWizardAddQueriesPage = ReportWizardAddQueriesPage;
                    var ReportWizardMasterDetailRelationsPage = (function (_super) {
                        __extends(ReportWizardMasterDetailRelationsPage, _super);
                        function ReportWizardMasterDetailRelationsPage(wizard, sqlDataSourceResultSchema) {
                            var _this = _super.call(this, wizard, sqlDataSourceResultSchema) || this;
                            _this.subscribeVisible = ko.observable(true);
                            _this.description = DevExpress.Analytics.Utils.getLocalization("Specify master-detail relationships between required queries.", "AnalyticsCoreStringId.SqlDSWizard_PageConfigureMasterDetailRelations");
                            _this.actionNext.isVisible(true);
                            _this.actionNext.isDisabled(false);
                            _this.actionFinish.isDisabled(true);
                            _this.customResetOptions = function () {
                                _this._reportData.dataSource = null;
                                _this._reportData.masterDetailInfoCollection([]);
                            };
                            return _this;
                        }
                        ReportWizardMasterDetailRelationsPage.prototype.beginAsync = function (data) {
                            if (data.sqlDataSourceWizardModel) {
                                this._reportData = data;
                                this.isVisible = data.sqlDataSourceWizardModel.sqlDataSource.queries().length > 1;
                                return _super.prototype.beginAsync.call(this, data.sqlDataSourceWizardModel);
                            }
                            else {
                                this.isVisible = false;
                            }
                        };
                        ReportWizardMasterDetailRelationsPage.prototype.commit = function (data) {
                            if (data.sqlDataSourceWizardModel) {
                                return _super.prototype.commit.call(this, data.sqlDataSourceWizardModel);
                            }
                        };
                        return ReportWizardMasterDetailRelationsPage;
                    }(DevExpress.Analytics.Wizard.Legacy.MasterDetailRelationsPage));
                    Legacy.ReportWizardMasterDetailRelationsPage = ReportWizardMasterDetailRelationsPage;
                })(Legacy = Wizard.Legacy || (Wizard.Legacy = {}));
            })(Wizard = Designer.Wizard || (Designer.Wizard = {}));
            var Tools;
            (function (Tools) {
                var ReportDialogBase = (function (_super) {
                    __extends(ReportDialogBase, _super);
                    function ReportDialogBase() {
                        var _this = _super.call(this) || this;
                        _this._visible = ko.observable(false);
                        _this.width = ko.observable(690);
                        _this.height = ko.observable(420);
                        _this.template = ko.observable("");
                        _this.model = ko.observable(null);
                        _this.tab = ko.observable(null);
                        _this.disabled = ko.observable(false);
                        _this.visible = ko.computed({
                            read: function () {
                                return _this._visible();
                            },
                            write: function (newVal) {
                                if (_this.disabled())
                                    return;
                                _this._visible(newVal);
                                if (!newVal)
                                    _this.tab(null);
                            }
                        });
                        _this.container = function (element) { return DevExpress.Analytics.Internal.getParentContainer(element); };
                        _this._disposables.push(_this.visible);
                        return _this;
                    }
                    ReportDialogBase.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.tab(null);
                    };
                    ReportDialogBase.prototype.show = function (tab) {
                        if (tab) {
                            this.tab(tab);
                            this.model().setUrl(tab.context().url());
                        }
                        this.model().onShow(tab);
                        this.visible(true);
                    };
                    ReportDialogBase.prototype.customize = function (template, model) {
                        this.template(template);
                        this.model(model);
                        this.buttons = model.popupButtons;
                    };
                    ReportDialogBase.prototype.cancel = function () {
                        this.visible(false);
                    };
                    return ReportDialogBase;
                }(DevExpress.Analytics.Utils.Disposable));
                Tools.ReportDialogBase = ReportDialogBase;
                var OpenReportDialogModelBase = (function () {
                    function OpenReportDialogModelBase(popup, urls) {
                        var _this = this;
                        this.urls = urls;
                        this.searchValue = ko.observable("");
                        this.searchPlaceholder = function () { return DevExpress.Analytics.Utils.getLocalization("Enter text to search...", "AnalyticsCoreStringId.QueryBuilder_SearchBox_EmptyText"); };
                        this.reportUrl = ko.observable("");
                        this.noDataText = DevExpress.Analytics.Internal.noDataText();
                        var self = this;
                        this.popupButtons = [
                            {
                                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                    text: DevExpress.Analytics.Utils.getLocalization('Open', 'ASPxReportsStringId.SidePanel_Open'), disabled: popup.disabled, onClick: function () {
                                        popup.open(self.reportUrl());
                                    }
                                }, disabled: ko.pureComputed(function () { return !_this.reportUrl(); })
                            },
                            {
                                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                    text: DevExpress.Analytics.Utils.getLocalization("Cancel", 'AnalyticsCoreStringId.SearchDialog_Cancel'), disabled: popup.disabled, onClick: function () {
                                        popup.cancel();
                                    }
                                }
                            }
                        ];
                    }
                    OpenReportDialogModelBase.prototype.onShow = function (tab) {
                        var self = this;
                        this.searchValue("");
                        Internal.ReportStorageWeb.getUrls().done(function (result) { self.urls(result); });
                    };
                    OpenReportDialogModelBase.prototype.getUrl = function () {
                        return this.reportUrl();
                    };
                    OpenReportDialogModelBase.prototype.setUrl = function (url) {
                        this.reportUrl(url);
                    };
                    return OpenReportDialogModelBase;
                }());
                Tools.OpenReportDialogModelBase = OpenReportDialogModelBase;
                var OpenReportDialog = (function (_super) {
                    __extends(OpenReportDialog, _super);
                    function OpenReportDialog(subreports, navigateByReports, callbacks) {
                        var _this = _super.call(this) || this;
                        _this.title = "Open Report";
                        _this.onOpening = function (e) { callbacks.reportOpening && callbacks.reportOpening(e); };
                        _this.onOpened = function (e) { callbacks.reportOpened && callbacks.reportOpened(e); };
                        _this.navigateByReports = navigateByReports;
                        _this.customize("dxrd-openreport-dialog-content", new OpenReportDialogModelBase(_this, subreports));
                        _this.title = DevExpress.Analytics.Utils.getLocalization("Open Report", 'ReportStringId.RibbonXRDesign_OpenFile_STipTitle');
                        return _this;
                    }
                    OpenReportDialog.prototype.open = function (url) {
                        var self = this;
                        var args = { url: url, cancel: false };
                        self.onOpening(args);
                        if (args.cancel)
                            return;
                        Internal.ReportStorageWeb.getReportByUrl(url).done(function (result) {
                            self.navigateByReports.addTab(result, ko.observable(url));
                            self.visible(false);
                        });
                    };
                    return OpenReportDialog;
                }(ReportDialogBase));
                Tools.OpenReportDialog = OpenReportDialog;
                var SaveAsReportDialogModelBase = (function () {
                    function SaveAsReportDialogModelBase(popup, urls) {
                        this.noDataText = DevExpress.Analytics.Internal.noDataText();
                        this.reportNamePlaceholder = function () { return DevExpress.Analytics.Utils.getLocalization("Enter a report name to save...", "ASPxReportsStringId.ReportDesigner_SaveAs_NamePlaceholder"); };
                        this.urls = urls;
                        this.reportUrl = ko.observable("");
                        this.reportName = ko.observable("");
                        var self = this;
                        this.popupButtons = [
                            {
                                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                    text: DevExpress.Analytics.Utils.getLocalization('Save', 'AnalyticsCoreStringId.MenuButtons_Save'), disabled: ko.computed(function () { return !self.reportName() || popup.disabled(); }), onClick: function () {
                                        popup.save(self.reportName());
                                    }
                                }
                            },
                            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { disabled: popup.disabled, text: DevExpress.Analytics.Utils.getLocalization('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'), onClick: function () { popup.cancel(); } } }
                        ];
                    }
                    SaveAsReportDialogModelBase.prototype.onShow = function (tab) {
                        var _this = this;
                        var self = this;
                        Internal.ReportStorageWeb.getUrls().done(function (result) { self.urls(result); });
                        var displayName = this.urls() && this.urls().filter(function (item) { return item.Key === _this.reportUrl(); })[0];
                        this.reportName(displayName && displayName["Value"] || tab.displayName());
                    };
                    SaveAsReportDialogModelBase.prototype.getUrl = function () {
                        return this.reportUrl();
                    };
                    SaveAsReportDialogModelBase.prototype.setUrl = function (url) {
                        this.reportUrl(url);
                    };
                    return SaveAsReportDialogModelBase;
                }());
                Tools.SaveAsReportDialogModelBase = SaveAsReportDialogModelBase;
                var SaveAsReportDialog = (function (_super) {
                    __extends(SaveAsReportDialog, _super);
                    function SaveAsReportDialog(subreports, callbacks) {
                        var _this = _super.call(this) || this;
                        _this.closeAfterSave = ko.observable(false);
                        _this.title = "Save Report";
                        _this.onSaving = function (e) { callbacks.reportSaving && callbacks.reportSaving(e); };
                        _this.onSaved = function (e) { callbacks.reportSaved && callbacks.reportSaved(e); };
                        _this.template("dxrd-savereport-dialog-content");
                        _this.customize("dxrd-savereport-dialog-content", new SaveAsReportDialogModelBase(_this, subreports));
                        _this.title = DevExpress.Analytics.Utils.getLocalization("Save Report", 'ReportStringId.RibbonXRDesign_SaveFile_STipTitle');
                        return _this;
                    }
                    SaveAsReportDialog.prototype.show = function (tab) {
                        this.closeAfterSave(false);
                        _super.prototype.show.call(this, tab);
                    };
                    SaveAsReportDialog.prototype.save = function (url) {
                        var self = this;
                        if (Internal.reportStorageWebIsRegister) {
                            var data = self.tab().context().report.serialize();
                            var args = { report: self.tab().context().report, url: url, cancel: false };
                            self.onSaving(args);
                            if (args.cancel) {
                                self.tab().close && self.tab().close.reject();
                                this.visible(false);
                                return;
                            }
                            self.disabled(true);
                            Internal.ReportStorageWeb.setNewData(data, url)
                                .done(function (result) {
                                self.onSaved({ report: self.tab().context().report, url: result });
                                var url = result;
                                self.tab().context().url(result);
                                self.tab().isDirty(false);
                                DevExpress.Analytics.Internal.ShowMessage(DevExpress.Analytics.Utils.getLocalization("The report has been successfully saved.", "ASPxReportsStringId.ReportDesigner_SaveReport_Message_OK"), DevExpress.Analytics.Internal.NotifyType.success);
                                if (self.closeAfterSave()) {
                                    self.tab().close.resolve();
                                }
                                Internal.ReportStorageWeb.getUrls().done(function (result) { self.model()["urls"] && self.model()["urls"](result); });
                            }).always(function () {
                                self.disabled(false);
                                self.visible(false);
                            });
                        }
                        else {
                            self.tab().context().report.save();
                            if (self.closeAfterSave()) {
                                self.tab().close.resolve();
                            }
                            else {
                                self.tab().close && self.tab().close.reject();
                            }
                            this.visible(false);
                        }
                    };
                    return SaveAsReportDialog;
                }(ReportDialogBase));
                Tools.SaveAsReportDialog = SaveAsReportDialog;
                var SaveReportDialogModelBase = (function () {
                    function SaveReportDialogModelBase(popup) {
                        this.reportUrl = ko.observable("");
                        this.saveText = ko.observable("");
                        var self = this;
                        this.popupButtons = [
                            {
                                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                    disabled: popup.disabled,
                                    text: DevExpress.Analytics.Utils.getLocalization('Yes', 'AnalyticsCoreStringId.ParametersPanel_True'), onClick: function () {
                                        popup.save(self.reportUrl());
                                    }
                                }
                            },
                            {
                                toolbar: 'bottom', location: 'after', widget: 'dxButton', disabled: popup.disabled, options: {
                                    disabled: popup.disabled,
                                    text: DevExpress.Analytics.Utils.getLocalization("No", "AnalyticsCoreStringId.ParametersPanel_False"), onClick: function () {
                                        popup.notSave();
                                    }
                                }
                            },
                            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { disabled: popup.disabled, text: DevExpress.Analytics.Utils.getLocalization('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'), onClick: function () { popup.cancel(); } } }
                        ];
                    }
                    SaveReportDialogModelBase.prototype.onShow = function (tab) {
                        this.saveText(DevExpress.Analytics.Utils.getLocalization('"{0}" has been changed. Do you want to save changes ?', 'ReportStringId.UD_Msg_MdiReportChanged').replace("{0}", tab.displayName()));
                    };
                    SaveReportDialogModelBase.prototype.getUrl = function () {
                        return this.reportUrl();
                    };
                    SaveReportDialogModelBase.prototype.setUrl = function (url) {
                        this.reportUrl(url);
                    };
                    return SaveReportDialogModelBase;
                }());
                Tools.SaveReportDialogModelBase = SaveReportDialogModelBase;
                var SaveReportDialog = (function (_super) {
                    __extends(SaveReportDialog, _super);
                    function SaveReportDialog(saveReportDialog, callbacks) {
                        var _this = _super.call(this) || this;
                        _this.title = "Save Report";
                        _this.saveReportDialog = saveReportDialog;
                        _this.onSaving = function (e) { callbacks.reportSaving && callbacks.reportSaving(e); };
                        _this.onSaved = function (e) { callbacks.reportSaved && callbacks.reportSaved(e); };
                        _this.width('auto');
                        _this.height(260);
                        _this.customize("dxrd-savereport-dialog-content-light", new SaveReportDialogModelBase(_this));
                        _this.title = DevExpress.Analytics.Utils.getLocalization("Save Report", 'ReportStringId.RibbonXRDesign_SaveFile_STipTitle');
                        return _this;
                    }
                    SaveReportDialog.prototype.save = function (url) {
                        var self = this;
                        if (Internal.reportStorageWebIsRegister) {
                            if (url) {
                                var args = { report: self.tab().context().report, url: url, cancel: false };
                                self.onSaving(args);
                                if (args.cancel) {
                                    self.tab().close && self.tab().close.reject();
                                    return;
                                }
                                Internal.ReportStorageWeb.setData(self.tab().context().report.serialize(), url)
                                    .done(function (jsonResult) {
                                    self.onSaved({ report: self.tab().context().report, url: url });
                                    self.tab().undoEngine.clearHistory();
                                    self.tab().close.resolve();
                                    self.visible(false);
                                });
                            }
                            else {
                                self.saveReportDialog.show(self.tab());
                                self.saveReportDialog.closeAfterSave(true);
                                self.visible(false);
                            }
                        }
                        else {
                            self.tab().context().report.save();
                            self.tab().close && self.tab().close.resolve();
                        }
                    };
                    SaveReportDialog.prototype.notSave = function () {
                        this.tab().close.resolve();
                        this.visible(false);
                    };
                    SaveReportDialog.prototype.cancel = function () {
                        this.tab().close && this.tab().close.reject();
                        _super.prototype.cancel.call(this);
                    };
                    return SaveReportDialog;
                }(ReportDialogBase));
                Tools.SaveReportDialog = SaveReportDialog;
            })(Tools = Designer.Tools || (Designer.Tools = {}));
            (function (Internal) {
                function isHeaderOrFooterBandType(band) {
                    return (band.controlType === "ReportHeaderBand" || band.controlType === "ReportFooterBand") && (band.parentModel() instanceof Controls.ReportViewModel);
                }
                Internal.isHeaderOrFooterBandType = isHeaderOrFooterBandType;
                function bandContainsToc(reportModel, bandType) {
                    var band = (DevExpress.Analytics.Internal.findFirstItemMatchesCondition(reportModel.bands(), function (item) { return item.controlType === bandType; }));
                    return band && bandControlsSomeXRTableOfContents(band);
                }
                Internal.bandContainsToc = bandContainsToc;
                function bandControlsSomeXRTableOfContents(band) {
                    return band.controls().some(function (item) { return item.controlType === "XRTableOfContents"; });
                }
                Internal.bandControlsSomeXRTableOfContents = bandControlsSomeXRTableOfContents;
                var ChartFieldListExtender = (function () {
                    function ChartFieldListExtender() {
                    }
                    ChartFieldListExtender.prototype.beforeItemsFilled = function (request, items) {
                        if (request.ref !== "PivotGrid" && request.id !== "PivotGrid")
                            return false;
                        switch (request.path) {
                            case "dataMember": return true;
                            case "seriesDataMember":
                                {
                                    items.push({ name: "Arguments", displayName: "Arguments", specifics: "String" }, { name: "Series", displayName: DevExpress.Analytics.Utils.getLocalization("Series", 'DevExpress.XtraReports.UI.XRChart.Series'), specifics: "String" }, { name: "Values", displayName: DevExpress.Analytics.Utils.getLocalization("Values", 'DevExpress.XtraCharts.SeriesPoint.Values'), specifics: "Integer" });
                                    return true;
                                }
                                ;
                            case "valueDataMembers": {
                                items.push({ name: "Values", displayName: DevExpress.Analytics.Utils.getLocalization("Values", 'DevExpress.XtraCharts.SeriesPoint.Values'), specifics: "Integer" });
                                return true;
                            }
                        }
                    };
                    return ChartFieldListExtender;
                }());
                Internal.ChartFieldListExtender = ChartFieldListExtender;
                Internal.createChartDesignerOptions = function (designerModel, dataSourceHelper, model, parameters, chartValueBindingProvider) {
                    var chartDesignerOptionsVisible = ko.observable(false);
                    var chartIsDirty;
                    var currentChart = ko.observable(null);
                    var disposables = [];
                    var chartDisposables = [];
                    disposables.push(chartDesignerOptionsVisible.subscribe(function (newVal) {
                        if (newVal) {
                            currentChart().designTime(true);
                            designerModel.undoEngine().start();
                        }
                        else {
                            chartDisposables.forEach(function (x) { return x.dispose(); });
                            chartDisposables = [];
                            designerModel.undoEngine().end();
                            var isDirty = chartIsDirty();
                            chartDesignerOptions.options.data.chart(null);
                            if (isDirty) {
                                var undoEngine = designerModel.undoEngine();
                                undoEngine.undo();
                                undoEngine.redoEnabled(false);
                                undoEngine._observers.pop();
                            }
                            currentChart().designTime(false);
                            currentChart(null);
                        }
                    }));
                    var chartDesignerOptions = {
                        dispose: function () {
                            chartDisposables.forEach(function (x) { return x.dispose(); });
                            disposables.forEach(function (x) { return x.dispose(); });
                            chartDisposables = [];
                            disposables = [];
                        },
                        options: null,
                        visible: chartDesignerOptionsVisible,
                        buttons: [{
                                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                    text: DevExpress.Analytics.Utils.getLocalization('OK', 'PivotGridStringId.FilterOk'), onClick: function () {
                                        chartIsDirty(false);
                                        chartDesignerOptionsVisible(false);
                                    }
                                }
                            },
                            {
                                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                                    text: DevExpress.Analytics.Utils.getLocalization("Cancel", "AnalyticsCoreStringId.SearchDialog_Cancel"), onClick: function () {
                                        chartDesignerOptionsVisible(false);
                                    }
                                }
                            }],
                        run: function (chartSurface) {
                            var xrChart = chartSurface._control;
                            currentChart(chartSurface);
                            if (!chartDesignerOptions.options) {
                                chartDesignerOptions.options = {
                                    callbacks: {
                                        customizeActions: function (actions) {
                                            for (var i = 0; i < actions.length; i++) {
                                                if (actions[i].id === DevExpress.Analytics.Tools.ActionId.Undo || actions[i].id === DevExpress.Analytics.Tools.ActionId.Redo) {
                                                    actions[i].hasSeparator = false;
                                                }
                                                else {
                                                    actions[i].visible = false;
                                                    actions[i].hasSeparator = false;
                                                }
                                            }
                                        },
                                        init: function (chartModel) {
                                            chartDisposables.push(chartIsDirty = ko.computed({
                                                read: function () {
                                                    return chartModel.undoEngine().isDirty();
                                                },
                                                write: function (newVal) {
                                                    chartModel.undoEngine().isDirty(newVal);
                                                }
                                            }));
                                            chartModel.displayNameProvider = designerModel.displayNameProvider;
                                            chartModel.dataSourceHelper = dataSourceHelper;
                                            chartDisposables.push(chartModel.reportParameters = ko.computed(function () { return parameters().parameters(); }));
                                            chartDisposables.push(chartModel.reportDataSource = ko.computed(function () { return dataSourceHelper().findDataSourceInfo(model() && model().dataSource()); }));
                                            chartModel.reportDataBindingsProvider = chartValueBindingProvider;
                                            chartDisposables.push(chartDesignerOptionsVisible.subscribe(function (newVal) {
                                                if (newVal) {
                                                    chartModel.updateSurfaceSize();
                                                }
                                            }));
                                        }
                                    },
                                    data: {
                                        chart: ko.observable(xrChart.chartModel),
                                        availableChartDataSources: designerModel.chartDataSources,
                                        width: 500,
                                        height: 500
                                    },
                                    rtl: designerModel.rtl,
                                    fieldListProvider: designerModel.dataBindingsProvider
                                };
                            }
                            else {
                                chartDesignerOptions.options.data.chart(xrChart.chartModel);
                            }
                            chartDesignerOptions.visible(true);
                        },
                        container: function (element) { return DevExpress.Analytics.Internal.getParentContainer(element, ".dx-designer"); }
                    };
                    return chartDesignerOptions;
                };
                var dataFilterReportPropertiesSerializationsInfo = [{ propertyName: "dataMember", modelName: "@DataMember" }, { propertyName: "dataSource", modelName: "@DataSource", link: true }], valueDataBinding = { propertyName: "value", displayName: "Value Data Members", editor: Widgets.editorTemplates.chartValueBinding, localizationId: 'DevExpress.XtraCharts.SeriesBase.ValueDataMembers' };
                var dataFilterReportSerializationFakeInfo = [
                    { propertyName: "misc", displayName: "Misc", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: Chart.Internal.Models.dataFilterSerializationsInfo, localizationId: 'ChartStringId.PropertyGridCategory_Misc' },
                    { propertyName: "report", displayName: "Report Data", localizationId: "ReportStringId.CatReportData", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor, info: [valueDataBinding] }
                ];
                var DataFilterModelReport = (function (_super) {
                    __extends(DataFilterModelReport, _super);
                    function DataFilterModelReport(model, serializer) {
                        var _this = _super.call(this, model, serializer) || this;
                        _this.misc = _this._mapObject(Chart.Internal.Models.dataFilterSerializationsInfo);
                        _this.misc.isPropertyDisabled = function (propertyName) {
                            return propertyName === "value" && _this.dataMember() != null;
                        };
                        _this.report = _this._createReportDataProperty();
                        return _this;
                    }
                    DataFilterModelReport.prototype.getInfo = function () {
                        return [].concat([].concat(Chart.Internal.Models.dataFilterSerializationsInfo, dataFilterReportPropertiesSerializationsInfo)
                            .map(function (x) { return { propertyName: x.propertyName, modelName: x.modelName, link: x.link }; }), dataFilterReportSerializationFakeInfo);
                    };
                    DataFilterModelReport.prototype._createReportDataProperty = function () {
                        var _this = this;
                        return {
                            updateValue: function (pathRequest, parameters) {
                                if (!!pathRequest.fullPath) {
                                    if (pathRequest.fullPath.indexOf("Parameters") === 0) {
                                        var parameterName = pathRequest.fullPath.split('.').pop();
                                        _this.dataSource(parameters.filter(function (x) { return x.name === parameterName; })[0]);
                                        _this.dataMember("Value");
                                    }
                                    else {
                                        _this.dataMember(pathRequest.path);
                                        _this.dataSource(null);
                                    }
                                }
                                else {
                                    _this.dataMember(null);
                                    _this.dataSource(null);
                                }
                            },
                            displayValue: function (reportDataSource) {
                                if (_this.dataSource()) {
                                    return ["Parameters", _this.dataSource().name].join(" - ");
                                }
                                else {
                                    if (_this.dataMember()) {
                                        return [reportDataSource.name, _this.dataMember()].join(" - ");
                                    }
                                    return "";
                                }
                            },
                            calculatePath: function (reportDataSource) {
                                if (_this.dataSource()) {
                                    return ["Parameters", _this.dataSource().name].join('.');
                                }
                                else {
                                    if (_this.dataMember()) {
                                        return [reportDataSource.ref || reportDataSource.id, _this.dataMember()].join('.');
                                    }
                                    return "";
                                }
                            },
                            getInfo: function () { return [valueDataBinding]; },
                            value: this._mapObject(dataFilterReportPropertiesSerializationsInfo)
                        };
                    };
                    DataFilterModelReport.prototype._mapObject = function (info) {
                        var _this = this;
                        var obj = { getInfo: function () { return info; } };
                        for (var i = 0; i < info.length; i++) {
                            var propertyName = info[i].propertyName;
                            obj[propertyName] = this[propertyName];
                        }
                        obj["getPath"] = function (propertyName) {
                            return _this["getPath"](propertyName);
                        };
                        return obj;
                    };
                    return DataFilterModelReport;
                }(Chart.Internal.Models.DataFilterModel));
                Internal.DataFilterModelReport = DataFilterModelReport;
                Chart.Internal.Models.DefaultDataFilterModel = DataFilterModelReport;
                function subreportControlCollector(target, subreportControls) {
                    if (subreportControls === void 0) { subreportControls = []; }
                    var visitor = function (target) {
                        if (target instanceof Controls.XRSubreportViewModel) {
                            subreportControls.push(target);
                            subreportControlCollector(target["reportSource"], subreportControls);
                        }
                    };
                    visitor(target);
                    DevExpress.Analytics.Internal.collectionsVisitor(target, function (collection) {
                        collection().forEach(visitor);
                    }, ["controls", "bands"]);
                    return subreportControls;
                }
                Internal.subreportControlCollector = subreportControlCollector;
                var TableCalculationProvider = (function () {
                    function TableCalculationProvider(_table) {
                        this._table = _table;
                        this._tableOffset = {
                            width: null,
                            left: null
                        };
                        this._calculationStarted = false;
                        this._calculationTimeout = null;
                        this._calculationNodes = [];
                    }
                    TableCalculationProvider.prototype._resetState = function () {
                        this._calculationNodes = [];
                        this._tableOffset.width = null;
                        this._tableOffset.left = null;
                        this._calculationStarted = false;
                    };
                    TableCalculationProvider.prototype._startCalculation = function (calculationNodes) {
                        if (calculationNodes === void 0) { calculationNodes = this._calculationNodes; }
                        this._calculationStarted = true;
                        var rows = this._table.rows().map(function (row, rowIndex) {
                            return row.cells().map(function (cell, cellIndex) {
                                var modifiedCell = calculationNodes.filter(function (x) { return x.column === cellIndex && x.row === rowIndex; })[0];
                                var weight = cell.weight();
                                return modifiedCell ? modifiedCell.calc : function () { return cell.weight(weight); };
                            });
                        });
                        this._tableOffset.left && this._table.location.x(this._table.location.x() + this._tableOffset.left);
                        this._tableOffset.width && this._table.size.width(this._table.size.width() + this._tableOffset.width);
                        rows.forEach(function (r) { return r.forEach(function (c) { return c(); }); });
                        this._calculationStarted = false;
                    };
                    TableCalculationProvider.prototype.addTableOffset = function (width, left) {
                        this._tableOffset.width = width;
                        this._tableOffset.left = left;
                    };
                    TableCalculationProvider.prototype.addCalculationNode = function (node) {
                        var _this = this;
                        if (this._calculationStarted)
                            return;
                        this._calculationNodes.push(node);
                        this._calculationTimeout && clearTimeout(this._calculationTimeout);
                        this._calculationTimeout = setTimeout(function () {
                            var undo = DevExpress.Analytics.Utils.UndoEngine.tryGetUndoEngine(_this._table);
                            undo && undo.start();
                            _this._startCalculation();
                            _this._resetState();
                            undo && undo.end();
                        }, 1);
                    };
                    TableCalculationProvider.prototype.hasCalculationNode = function (rowIndex, cellIndex) {
                        return this._calculationNodes.some(function (x) { return x.column === cellIndex && x.row === rowIndex; });
                    };
                    return TableCalculationProvider;
                }());
                Internal.TableCalculationProvider = TableCalculationProvider;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Controls) {
                var PivotGrid;
                (function (PivotGrid) {
                    var SortBySummaryInfoCondition = (function () {
                        function SortBySummaryInfoCondition(model, fieldsProvider, serializer) {
                            this._fieldsProvider = fieldsProvider;
                            serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                            serializer.deserialize(this, model);
                        }
                        SortBySummaryInfoCondition.prototype.getInfo = function () {
                            var fields = this._fieldsProvider.fieldsAvailableForCondition();
                            if (fields.length < 1) {
                                return Metadata.sortBySummaryConditionInfo;
                            }
                            var conditionInfoClone = Metadata.sortBySummaryConditionInfo.slice(0), fieldComponentName = DevExpress.Analytics.Internal.find(Metadata.sortBySummaryConditionInfo, function (item) { return item.modelName === "@FieldComponentName"; }), fieldComponentNameClone = $.extend(true, {}, fieldComponentName);
                            fields.forEach(function (fieldName) { fieldComponentNameClone.valuesArray.push({ value: fieldName, displayValue: fieldName }); });
                            conditionInfoClone.splice(conditionInfoClone.indexOf(fieldComponentName), 1, fieldComponentNameClone);
                            return conditionInfoClone;
                        };
                        SortBySummaryInfoCondition.createNew = function (parent, serializer) {
                            return new SortBySummaryInfoCondition({}, parent, serializer);
                        };
                        return SortBySummaryInfoCondition;
                    }());
                    PivotGrid.SortBySummaryInfoCondition = SortBySummaryInfoCondition;
                    var SortBySummaryInfo = (function () {
                        function SortBySummaryInfo(model, field, serializer) {
                            var _this = this;
                            this._field = field;
                            serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                            serializer.deserialize(this, model, Metadata.sortBySummaryInfo);
                            this.conditions = DevExpress.Analytics.Utils.deserializeArray(model["Conditions"] || {}, function (item) { return new SortBySummaryInfoCondition(item, _this, serializer); });
                        }
                        SortBySummaryInfo.prototype._pivotGridFields = function () {
                            return this._field.parentModel().fields;
                        };
                        SortBySummaryInfo.prototype.getInfo = function () {
                            var _this = this;
                            var fields = this._pivotGridFields();
                            if (!fields) {
                                return Metadata.sortBySummaryInfo;
                            }
                            var sortBySummaryInfoClone = Metadata.sortBySummaryInfo.slice(0), fieldComponentName = DevExpress.Analytics.Internal.find(Metadata.sortBySummaryInfo, function (item) { return item.modelName === "@FieldComponentName"; }), fieldComponentNameClone = $.extend(true, {}, fieldComponentName);
                            fields().forEach(function (field) {
                                if (field.name() !== _this._field.name()) {
                                    fieldComponentNameClone.valuesArray.push({ value: field.name(), displayValue: field.name() });
                                }
                            });
                            sortBySummaryInfoClone.splice(Metadata.sortBySummaryInfo.indexOf(fieldComponentName), 1, fieldComponentNameClone);
                            return sortBySummaryInfoClone;
                        };
                        SortBySummaryInfo.prototype.fieldsAvailableForCondition = function () {
                            var _this = this;
                            var fields = this._pivotGridFields();
                            if (!fields) {
                                return [];
                            }
                            var result = [];
                            fields().forEach(function (field) {
                                var condition = DevExpress.Analytics.Internal.find(_this.conditions(), function (item) { return item.fieldComponentName() === field.name(); });
                                if (!condition) {
                                    result.push(field.name());
                                }
                            });
                            return result;
                        };
                        ;
                        SortBySummaryInfo.from = function (model, serializer) {
                            return model;
                        };
                        SortBySummaryInfo.toJSON = function (viewModel, serializer, refs) {
                            return (serializer || new DevExpress.Analytics.Utils.ModelSerializer()).serialize(viewModel, Metadata.sortBySummaryInfo, refs);
                        };
                        return SortBySummaryInfo;
                    }());
                    PivotGrid.SortBySummaryInfo = SortBySummaryInfo;
                    var Metadata;
                    (function (Metadata) {
                        Metadata.summaryTypeValues = [
                            { value: "Count", displayValue: "Count", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Count" },
                            { value: "Sum", displayValue: "Sum", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Sum" },
                            { value: "Min", displayValue: "Min", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Min" },
                            { value: "Max", displayValue: "Max", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Max" },
                            { value: "Average", displayValue: "Average", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Average" },
                            { value: "StdDev", displayValue: "Standard Deviation", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.StdDev" },
                            { value: "StdDevp", displayValue: "Standard Deviation for Entire Population", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.StdDevp" },
                            { value: "Var", displayValue: "Variation", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Var" },
                            { value: "Varp", displayValue: "Variation for Entire Population", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Varp" },
                            { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryType.Custom" }
                        ];
                        Metadata.summaryType = {
                            propertyName: "summaryType", modelName: "@SummaryType", displayName: "Summary Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SummaryType",
                            defaultVal: "Sum", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Metadata.summaryTypeValues
                        };
                        Metadata.fieldComponentName = {
                            propertyName: "fieldComponentName", modelName: "@FieldComponentName", displayName: "Field", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.Field",
                            defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "", displayValue: "(none)", localizationId: 'ChartStringId.WizNoBackImage' }]
                        };
                        Metadata.conditions = {
                            propertyName: "conditions", modelName: "Conditions", displayName: "Conditions", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.Conditions", array: true,
                            template: "#dxrd-commonCollectionItem",
                            editor: { custom: "dxrd-pivot-sortBySummaryInfo-conditions" }
                        };
                        Metadata.field = { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.FieldName", defaultVal: null, editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                        Metadata.customTotalSummaryType = {
                            propertyName: "customTotalSummaryType", modelName: "@CustomTotalSummaryType", displayName: "Custom Total Summary Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.CustomTotalSummaryType",
                            defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "", displayValue: "(none)", localizationId: 'ChartStringId.WizNoBackImage' }].concat(Metadata.summaryTypeValues)
                        };
                        Metadata.sortBySummaryInfo = [Metadata.conditions, Metadata.customTotalSummaryType, Metadata.fieldComponentName, Metadata.field, Metadata.summaryType];
                        Metadata.sortBySummaryConditionInfo = [
                            Metadata.fieldComponentName,
                            { modelName: "@Value", propertyName: "value", displayName: "Value", editor: DevExpress.Analytics.Widgets.editorTemplates.text, localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' },
                            {
                                modelName: "@Value_type", propertyName: "valueType", displayName: "Type", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "<Null>", valuesArray: [
                                    { value: "System.String", displayValue: "String", localizationId: "UtilsUIStringId.Parameter_Type_String" },
                                    { value: "System.Byte", displayValue: "Number (8 bit integer)", localizationId: "DataAccessStringId.Type_SByte" },
                                    { value: "System.Int16", displayValue: "Number (16 bit integer)", localizationId: "UtilsUIStringId.Parameter_Type_Int16" },
                                    { value: "System.Int32", displayValue: "Number (32 bit integer)", localizationId: "UtilsUIStringId.Parameter_Type_Int32" },
                                    { value: "System.Int64", displayValue: "Number (64 bit integer)", localizationId: "UtilsUIStringId.Parameter_Type_Int64" },
                                    { value: "System.Single", displayValue: "Number (floating-point)", localizationId: "UtilsUIStringId.Parameter_Type_Float" },
                                    { value: "System.Double", displayValue: "Number (double-precision floating-point)", localizationId: "UtilsUIStringId.Parameter_Type_Double" },
                                    { value: "System.Decimal", displayValue: "Number (decimal)", localizationId: "UtilsUIStringId.Parameter_Type_Decimal" },
                                    { value: "System.Boolean", displayValue: "Boolean", localizationId: "UtilsUIStringId.Parameter_Type_Boolean" },
                                    { value: "System.Char", displayValue: "Char", localizationId: "DataAccessStringId.Type_Char" },
                                    { value: "System.DateTime", displayValue: "Date", localizationId: "UtilsUIStringId.Parameter_Type_DateTime" },
                                    { value: "<Null>", displayValue: "<Null>" }
                                ],
                                localizationId: 'DevExpress.XtraPrinting.XlEncryptionOptions.Type'
                            }
                        ];
                    })(Metadata = PivotGrid.Metadata || (PivotGrid.Metadata = {}));
                })(PivotGrid = Controls.PivotGrid || (Controls.PivotGrid = {}));
                var stylesProperties = ["foreColor", "borderColor", "borderWidth", "backColor", "borders", "borderDashStyle", "padding", "textAlignment", "font"];
                var XRReportElementViewModel = (function (_super) {
                    __extends(XRReportElementViewModel, _super);
                    function XRReportElementViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        _this.initialize();
                        _this.formattingRuleLinks = DevExpress.Analytics.Utils.deserializeArray(model.FormattingRuleLinks, function (item) { return new Controls.FormattingRuleLink(item, serializer); });
                        var _generateProperty = function (propertyName, stylePriorityName) {
                            _this["_" + propertyName] = ko.observable(_this[propertyName]());
                            _this._disposables.push(_this[propertyName] = ko.computed({
                                read: function () { return _this._getStyleProperty(propertyName, stylePriorityName, _this.root); },
                                write: function (val) {
                                    if (_this._getStyleProperty(propertyName, stylePriorityName, _this.root) !== val) {
                                        if (_this.stylePriority && _this.stylePriority[stylePriorityName]) {
                                            _this.stylePriority[stylePriorityName](false);
                                        }
                                        _this["_" + propertyName](val);
                                    }
                                }
                            }));
                        };
                        _this.dsHelperProvider = function () { return _this.root["dataSourceHelper"] && _this.root["dataSourceHelper"](); };
                        _this.initBindings();
                        _this.getStyleProperty = function (propertyName, stylePriorityName) { return _this._getStyleProperty(propertyName, stylePriorityName, _this.root); };
                        for (var i = 0; i < stylesProperties.length; i++) {
                            if (_this[stylesProperties[i]]) {
                                var stylePriorityName = _this._getStylePriorityPropertyName(stylesProperties[i]);
                                _generateProperty(stylesProperties[i], stylePriorityName);
                            }
                        }
                        ;
                        if (_this.padding) {
                            _this._createPaddingDependencies();
                        }
                        _this.toggleUseStyle = function (propertyName) {
                            var styleName = _this._getStylePriorityPropertyName(propertyName);
                            _this.stylePriority[styleName](!_this.stylePriority[styleName]());
                        };
                        _this.actions.push({ action: _this.toggleUseStyle, title: DevExpress.Analytics.Utils.getLocalization("Style Priority", "DevExpress.XtraReports.UI.XRControl.StylePriority"), visible: function (name) { return _this.isStyleProperty(name); } });
                        _this._disposables.push(_this.lockedInUserDesigner = ko.computed({
                            read: function () {
                                var parent = _this.parentModel(), parentLocked = (parent && parent["lockedInUserDesigner"]) ? parent["lockedInUserDesigner"]() : false;
                                return _this._lockedInUserDesigner() || parentLocked;
                            },
                            write: function (newValue) { return _this._lockedInUserDesigner(newValue); }
                        }));
                        return _this;
                    }
                    XRReportElementViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.dataBindings);
                        this.resetObservableArray(this.formattingRuleLinks);
                        this.resetObservableArray(this.dataBindings);
                    };
                    XRReportElementViewModel.prototype._getStylePriorityPropertyName = function (propertyName) {
                        propertyName = propertyName === "paddingObj" ? "padding" : propertyName;
                        return "use" + propertyName.charAt(0).toUpperCase() + propertyName.substr(1);
                    };
                    XRReportElementViewModel.prototype._getStyle = function (root) {
                        var styleName = this.styleName && this.styleName(), style = styleName && root && root.findStyle && root.findStyle(styleName);
                        return style;
                    };
                    XRReportElementViewModel.prototype._checkModify = function (target, propertyName) {
                        var property = target && (target["_" + propertyName] || target[propertyName]);
                        return ko.unwrap(property) && target.isPropertyModified(propertyName);
                    };
                    XRReportElementViewModel.prototype._getStyleProperty = function (propertyName, stylePriorityName, root) {
                        if (this.stylePriority && this.stylePriority[stylePriorityName] && this.stylePriority[stylePriorityName]() || !this._checkModify(this, propertyName)) {
                            var style = this._getStyle(root);
                            if (this._checkModify(style, propertyName)) {
                                return style[propertyName]();
                            }
                        }
                        if (this._checkModify(this, propertyName)) {
                            return this["_" + propertyName]();
                        }
                        var defaultValue = this.getPropertyDefaultValue(propertyName);
                        if (defaultValue && !(defaultValue instanceof Object)) {
                            return defaultValue;
                        }
                        var parent = this.parentModel();
                        if (parent) {
                            return parent.getStyleProperty(propertyName, stylePriorityName);
                        }
                    };
                    XRReportElementViewModel.prototype._zOrderChange = function (bringToFront) {
                        var parent = this.parentModel(), controlContainer = parent && parent[this.getControlContainerName()];
                        if (controlContainer) {
                            var itemIndex = controlContainer().indexOf(this);
                            controlContainer.splice(itemIndex, 1);
                            controlContainer.splice((bringToFront ? 0 : controlContainer().length), 0, this);
                        }
                    };
                    XRReportElementViewModel.prototype._createPaddingDependencies = function () {
                        var _this = this;
                        this.paddingObj = new DevExpress.Analytics.Elements.PaddingModel();
                        this._disposables.push(this.paddingObj);
                        this.paddingObj.applyFromString(this["padding"]());
                        this._disposables.push(this.paddingObj.dpi = ko.computed(function () { return _this.dpi && _this.dpi(); }));
                        var lock = new Internal.Locker().lock;
                        this._disposables.push(this.padding.subscribe(function (newVal) { return lock(function () { return _this.paddingObj.applyFromString(newVal); }); }));
                        ["left", "right", "top", "bottom"].forEach(function (name) {
                            _this._disposables.push(_this.paddingObj[name].subscribe(function (newVal) {
                                if (_this.root["isModelReady"] && _this.root["isModelReady"]() || !_this.root["isModelReady"])
                                    lock(function () { return _this.padding(_this.paddingObj.toString()); });
                            }));
                        });
                        this._disposables.push(this.paddingObj.dpi.subscribe(function (newVal) { return lock(function () {
                            if (_this["_padding"]())
                                _this["_padding"](_this.paddingObj.toString());
                        }); }));
                        this.paddingObj["resetValue"] = function () {
                            lock(function () {
                                ["left", "right", "top", "bottom"].forEach(function (name) { return _this.paddingObj[name](null); });
                                _this.padding(_this.paddingObj.toString());
                                _this.paddingObj.applyFromString(_this.padding());
                            });
                        };
                    };
                    XRReportElementViewModel.prototype.getControlFactory = function () {
                        return Utils.controlsFactory;
                    };
                    XRReportElementViewModel.prototype.addChild = function (control) {
                        if (control.controlType === "XRTableOfContents") {
                            var band;
                            if (Internal.isHeaderOrFooterBandType(this)) {
                                var tocAlreadyExists = Internal.bandControlsSomeXRTableOfContents(this);
                                if (tocAlreadyExists) {
                                    throw new Error("Only one TOC can be added!!!");
                                }
                            }
                            else if (band = XRControlViewModel.getNearestBand(this)) {
                                if (Internal.isHeaderOrFooterBandType(band)) {
                                    band.addChild(control);
                                }
                                return;
                            }
                            else {
                                throw new Error("TOC can be added only to ReportHeaderBand or ReportFooterBand!!!");
                            }
                        }
                        _super.prototype.addChild.call(this, control);
                    };
                    XRReportElementViewModel.prototype.initDataBindingProperties = function () {
                        var _this = this;
                        var bindingInfos = this.getInfo().filter(function (info) { return "bindingName" in info; });
                        bindingInfos.forEach(function (info) {
                            _this[info.propertyName] = _this.dataBindings()["findBinding"](info["bindingName"]);
                        });
                    };
                    XRReportElementViewModel.prototype.initExpressionProperties = function () {
                        var _this = this;
                        if (!this.expressionBindings)
                            return;
                        var path = ko.pureComputed(function () {
                            return _this.getPath("expression");
                        });
                        this._disposables.push(path);
                        this.expressionObj = this.getControlFactory()._createExpressionObject(this.controlType, this.expressionBindings, path, function (name) { return _this["Summary"] && _this["Summary"]["Running"] && _this.getControlInfo().defaultBindingName === name && ko.computed(function () {
                            return _this["Summary"]["Running"]() != "None";
                        }); });
                        if (!this.expressionObj)
                            return;
                        this._disposables.push(this.expressionObj);
                        var expressionInfos = this.getInfo().filter(function (info) { return "expressionName" in info; });
                        expressionInfos.forEach(function (info) {
                            var expression = _this.expressionObj.getExpression(info["expressionName"], "BeforePrint");
                            if (expression)
                                _this[info.propertyName] = expression;
                        });
                    };
                    XRReportElementViewModel.prototype.initBindings = function () {
                        this.initDataBindingProperties();
                        this.initExpressionProperties();
                    };
                    XRReportElementViewModel.prototype.isStyleProperty = function (propertyName) {
                        var _this = this;
                        propertyName = propertyName === "paddingObj" ? "padding" : propertyName;
                        return this.stylePriority && Metadata.stylePrioritySerializationInfo.some(function (info) { return info.propertyName == _this._getStylePriorityPropertyName(propertyName); });
                    };
                    XRReportElementViewModel.prototype.isResettableProperty = function (propertyName) {
                        return _super.prototype.isResettableProperty.call(this, propertyName) && propertyName !== "dataBindings";
                    };
                    XRReportElementViewModel.prototype.getActionClassName = function (propertyName) {
                        var result = "";
                        if (this.isStyleProperty(propertyName)) {
                            result += this.stylePriority[this._getStylePriorityPropertyName(propertyName)]() ? " dxrd-editormenu-usestyle" : "";
                        }
                        if (this.isPropertyModified(propertyName)) {
                            result += " dxrd-editormenu-modified";
                        }
                        return result;
                    };
                    XRReportElementViewModel.prototype.className = function () {
                        return this.controlType.toLowerCase();
                    };
                    XRReportElementViewModel.prototype.initialize = function () {
                        if (!this.size) {
                            this.size = new DevExpress.Analytics.Elements.Size(0, 0);
                        }
                    };
                    XRReportElementViewModel.prototype.getPath = function (propertyName) {
                        if (propertyName === "expression" && this.dsHelperProvider()) {
                            var firstParentWithDS = Designer.Internal.findFirstParentWithPropertyName(this, "dataSource");
                            var rootDataSourceName = this.dsHelperProvider().getDataSourcePath(ko.unwrap(firstParentWithDS["dataSource"]));
                            var rootDataMember = ko.unwrap(firstParentWithDS["dataMember"]) || "";
                            if (!!rootDataSourceName) {
                                return !!rootDataMember ? [rootDataSourceName, rootDataMember].join('.') : rootDataSourceName;
                            }
                            else {
                                return "";
                            }
                        }
                        return "";
                    };
                    XRReportElementViewModel.prototype.isPropertyDisabled = function (name) {
                        return this.lockedInUserDesigner();
                    };
                    XRReportElementViewModel.prototype.isPropertyVisible = function (name) {
                        if (this.dataBindingMode !== Internal.DataBindingMode.Bindings) {
                            return name !== "dataBindings"
                                && name !== "formattingRuleLinks"
                                && name !== "formattingRuleSheet"
                                && name.indexOf("popularDataBinding") !== 0;
                        }
                        else {
                            return name.indexOf("popularExpression") !== 0;
                        }
                    };
                    XRReportElementViewModel.prototype.sendToBack = function () {
                        this._zOrderChange(false);
                    };
                    XRReportElementViewModel.prototype.bringToFront = function () {
                        this._zOrderChange(true);
                    };
                    XRReportElementViewModel.prototype.getControlContainerName = function () { return "controls"; };
                    Object.defineProperty(XRReportElementViewModel.prototype, "dataBindingMode", {
                        get: function () {
                            return this.root !== this ? this.root.dataBindingMode : Internal.DataBindingMode.Expressions;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(XRReportElementViewModel.prototype, "dpi", {
                        get: function () {
                            return this.root !== this ? this.root.dpi : this._innerDpi;
                        },
                        set: function (value) {
                            this._innerDpi = value;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    XRReportElementViewModel.prototype.rtl = function () {
                        var rtl = ko.unwrap(this["rightToLeft"]);
                        if (rtl === "Yes")
                            return true;
                        if (this.parentModel() && (!rtl || rtl === "Inherit"))
                            return this.parentModel().rtl();
                        return false;
                    };
                    return XRReportElementViewModel;
                }(DevExpress.Analytics.Elements.ElementViewModel));
                Controls.XRReportElementViewModel = XRReportElementViewModel;
                var XRControlViewModel = (function (_super) {
                    __extends(XRControlViewModel, _super);
                    function XRControlViewModel(control, parent, serializer) {
                        var _a;
                        var _this = _super.call(this, control, parent, serializer) || this;
                        if (_this.text) {
                            _this.textArea = _this.text;
                        }
                        _this.controls = DevExpress.Analytics.Internal.deserializeChildArray(control.Controls, _this, function (childControl) { return _this.createControl(childControl, serializer); });
                        if (_this.anchorVertical || _this.anchorHorizontal) {
                            _this.anchoring(parent);
                            _this._disposables.push(_this.parentModel.subscribe(function (newParent) {
                                if (_this.vertAnchoring && _this.horAnchoring && newParent) {
                                    _this.vertAnchoring.start(newParent.size.height, _this);
                                    _this.horAnchoring.start(newParent.size.width, _this);
                                }
                                else {
                                    _this.anchoring(newParent);
                                }
                            }));
                        }
                        if (_this.interactiveSorting) {
                            _this.interactiveSorting = new Controls.SortingOptions(control["InteractiveSorting"], _this.root, serializer);
                            _this._disposables.push(_this.interactiveSorting);
                        }
                        _this._disposables.push(_this.hasBindings = ko.pureComputed(function () {
                            var bindings = _this.dataBindings && _this.dataBindings();
                            return !!bindings && bindings.filter(function (dataBinding) { return !dataBinding.isEmpty(); }).length > 0 || _this.hasExpressionBindings();
                        }));
                        var stylesObject = Designer.Internal.createObjectFromInfo(_this, Metadata.stylesInfo);
                        ;
                        if (stylesObject) {
                            _this[Metadata.stylesObj.propertyName] = stylesObject;
                        }
                        if (_this["Summary"])
                            _this["Summary"].isPropertyVisible = function (propertyName) {
                                return propertyName === "Func" ? _this.isPropertyVisible("dataBindings") : true;
                            };
                        if (_this.textFormatString) {
                            var binding = _this["dataBindings"] && _this["dataBindings"]().filter(function (binding) { return binding.propertyName() === "Text"; })[0];
                            var summaryFormatString = null;
                            var bindingFormatString = null;
                            _this["_textFormatString"] = ko.observable(_this.textFormatString.peek());
                            _a = [_this["Summary"], binding].map(function (obj) {
                                if (obj && obj["formatString"]) {
                                    obj["_formatString"] = ko.observable(obj["formatString"].peek());
                                    _this._disposables.push(obj["formatString"] = ko.computed({
                                        read: function () {
                                            return _this["_textFormatString"]() ||
                                                obj["_formatString"]();
                                        },
                                        write: function (x) { _this.textFormatString(x); }
                                    }));
                                    return obj["_formatString"];
                                }
                            }), summaryFormatString = _a[0], bindingFormatString = _a[1];
                            _this._disposables.push(_this.textFormatString = ko.computed({
                                read: function () {
                                    return _this["_textFormatString"]() ||
                                        summaryFormatString && summaryFormatString() ||
                                        bindingFormatString && bindingFormatString();
                                },
                                write: function (x) {
                                    _this["_textFormatString"](x);
                                    summaryFormatString && summaryFormatString(null);
                                    bindingFormatString && bindingFormatString(null);
                                }
                            }));
                        }
                        _this.dataBindingsAreValid = ko.observable(true);
                        _this._disposables.push(ko.computed(function () {
                            var _a;
                            var bindings = _this.dataBindings && _this.dataBindings();
                            if (bindings) {
                                if (bindings.length === 0)
                                    _this.dataBindingsAreValid(true);
                                else {
                                    var report = _this.root;
                                    if (!report || !(report instanceof Controls.ReportViewModel))
                                        return;
                                    var dsHelper = report.dsHelperProvider();
                                    var parameters = report.parameters();
                                    var fieldListProvider = report.getControlFactory().fieldListProvider();
                                    if (!dsHelper || !parameters || !fieldListProvider)
                                        return;
                                    var defaultDataSourceInfo = dsHelper.findDataSourceInfo(ko.unwrap(Designer.Internal.findFirstParentWithPropertyName(_this, "dataSource").dataSource));
                                    var reqFinished = 0;
                                    var reqCount = bindings.length;
                                    var reqResult = true;
                                    var deferred = $.Deferred();
                                    for (var i = 0; i < bindings.length; i++) {
                                        var binding = bindings[i], parameter = binding.parameter(), dataMember = binding.dataMember(), dataSource = binding.dataSource();
                                        if (parameter) {
                                            if (dataSource)
                                                reqResult = false;
                                            else
                                                reqResult = reqResult && parameters.some(function (x) { return x.name === parameter.name; });
                                            reqFinished++;
                                        }
                                        else if (dataMember) {
                                            var dsInfo = null;
                                            if (dataSource) {
                                                dsInfo = dataSource["dataSourceInfo"];
                                                if (dsHelper.usedDataSources().indexOf(dsInfo) < 0) {
                                                    reqResult = false;
                                                    reqFinished++;
                                                }
                                            }
                                            else {
                                                dsInfo = defaultDataSourceInfo;
                                            }
                                            if (dsInfo) {
                                                var lastPart = dataMember.slice(dataMember.lastIndexOf(".") + 1);
                                                fieldListProvider.getItems(new DevExpress.Analytics.Utils.PathRequest((_a = [dsInfo.id || dsInfo.ref]).concat.apply(_a, dataMember.split(".").slice(0, -1)).join(".")))
                                                    .done(function (result) { if (result.every(function (x) { return x.isList || x.name !== lastPart; }))
                                                    reqResult = false; })
                                                    .fail(function () { reqResult = false; })
                                                    .always(function () { if (++reqFinished === reqCount)
                                                    deferred.resolve(reqResult); });
                                            }
                                            else {
                                                reqResult = false;
                                                reqFinished++;
                                            }
                                        }
                                        else if (dataSource) {
                                            reqResult = false;
                                            reqFinished++;
                                        }
                                        else
                                            reqFinished++;
                                        if (!reqResult) {
                                            reqFinished += reqCount - 1 - i;
                                            break;
                                        }
                                    }
                                    if (reqFinished === reqCount)
                                        deferred.resolve(reqResult);
                                    deferred.done(function (result) { _this.dataBindingsAreValid(result); });
                                }
                            }
                        }));
                        return _this;
                    }
                    XRControlViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.controls);
                        this.resetObservableArray(this.controls);
                    };
                    XRControlViewModel.getNearestBand = function (target) {
                        var bandModel = null;
                        var model = target;
                        do {
                            if (model instanceof Bands.BandViewModel)
                                bandModel = model;
                            model = model.parentModel();
                        } while (!bandModel && model);
                        return bandModel;
                    };
                    XRControlViewModel.prototype.anchoring = function (parent) {
                        if (parent) {
                            this.vertAnchoring = new Controls.VerticalAcnhoring(parent.size.height, this, this.anchorVertical);
                            this.horAnchoring = new Controls.HorizontalAnchoring(parent.size.width, this, this.anchorHorizontal);
                            this._disposables.push(this.vertAnchoring);
                            this._disposables.push(this.horAnchoring);
                        }
                    };
                    XRControlViewModel.prototype.getNearestParent = function (target) {
                        if (["XRPageBreak", "XRPivotGrid", "XRSubreport", "XRTableOfContents"].indexOf(this.controlType) !== -1) {
                            return XRControlViewModel.getNearestBand(target);
                        }
                        else {
                            return _super.prototype.getNearestParent.call(this, target);
                        }
                    };
                    XRControlViewModel.prototype.isPropertyDisabled = function (name) {
                        if (name === "textFitMode") {
                            return this["canGrow"]() || this["canShrink"]() || (this.controlType === "XRLabel" && this["autoWidth"]());
                        }
                        else if (name === "processNullValues") {
                            return this["Summary"] && ko.unwrap(this["Summary"]["Running"]) !== "None";
                        }
                        else if (name === "allowMarkupText") {
                            return this["textEditOptions"] && ko.unwrap(this["textEditOptions"]["enabled"]);
                        }
                        else if (name === "textEditOptions") {
                            return this["allowMarkupText"] && ko.unwrap(this["allowMarkupText"]);
                        }
                        return _super.prototype.isPropertyDisabled.call(this, name);
                    };
                    XRControlViewModel.prototype.isPropertyVisible = function (name) {
                        if (this.multiline && this.multiline()) {
                            if (name === "text")
                                return false;
                        }
                        else {
                            if (name === "textArea")
                                return false;
                        }
                        return _super.prototype.isPropertyVisible.call(this, name);
                    };
                    XRControlViewModel.prototype.hasExpressionBindings = function () {
                        return !!(this.expressionBindings && this.expressionBindings().filter(function (binding) { return !!binding.expression(); })[0]);
                    };
                    XRControlViewModel.prototype.hasDataBindingByName = function (property) {
                        if (property === void 0) { property = "Text"; }
                        var bindings = this.dataBindings && this.dataBindings() && this.dataBindings().filter(function (dataBinding) { return !dataBinding.isEmpty(); });
                        if (!!bindings && bindings.length > 0) {
                            var binding = this.dataBindings()["findBinding"](property);
                            return !!binding && !binding.isEmpty();
                        }
                        return !!(this.expressionBindings && this.expressionBindings().filter(function (binding) { return binding.propertyName() === property; }).length > 0);
                    };
                    Object.defineProperty(XRControlViewModel.prototype, "hasDefaultBindingProperty", {
                        get: function () {
                            return !!this.getControlInfo().defaultBindingName;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    XRControlViewModel.prototype.getExpressionBinding = function (property, event) {
                        if (property === void 0) { property = "Text"; }
                        if (event === void 0) { event = "BeforePrint"; }
                        if (!this.expressionBindings)
                            return null;
                        var binding = this.expressionBindings().filter(function (binding) { return binding.propertyName() === property && binding.eventName() === event; })[0];
                        return binding && binding.expression();
                    };
                    XRControlViewModel.prototype.setExpressionBinding = function (value, property, event) {
                        if (property === void 0) { property = "Text"; }
                        if (event === void 0) { event = "BeforePrint"; }
                        if (!this.expressionBindings)
                            return;
                        var binding = this.expressionBindings().filter(function (binding) { return binding.propertyName() === property && binding.eventName() === event; })[0];
                        binding && binding.expression(value);
                    };
                    XRControlViewModel.prototype.getControlInfo = function () {
                        return _super.prototype.getControlInfo.call(this);
                    };
                    XRControlViewModel.prototype.getDefaultBinding = function () {
                        var bindingName = this.getControlInfo().defaultBindingName;
                        if (this.dataBindingMode !== Internal.DataBindingMode.Bindings) {
                            return this.expressionObj.getExpression(bindingName, "BeforePrint");
                        }
                        else {
                            return this.dataBindings().filter(function (x) { return x.propertyName() === bindingName; })[0];
                        }
                    };
                    return XRControlViewModel;
                }(XRReportElementViewModel));
                Controls.XRControlViewModel = XRControlViewModel;
                var XRControlSurfaceBase = (function (_super) {
                    __extends(XRControlSurfaceBase, _super);
                    function XRControlSurfaceBase(control, context, unitProperties) {
                        var _this = _super.call(this, control, context, unitProperties) || this;
                        _this.delta = 0.5;
                        _this.template = "dxrd-control";
                        _this.selectiontemplate = "dxrd-control-selection";
                        _this.contenttemplate = "dxrd-control-content";
                        _this.displayNameParameters = ko.pureComputed(function () {
                            var control = _this.getControlModel();
                            var parameters = {
                                text: null,
                                isExpression: true,
                                dataSource: null,
                                dataMember: null,
                                dataMemberOffset: null,
                                allowMarkupText: false,
                                wordWrap: false,
                                fontSize: 0,
                                fontUnit: null
                            };
                            if (control["controls"] && control["controls"]().length !== 0) {
                                parameters.text = "";
                                return parameters;
                            }
                            parameters.text = control["getExpressionBinding"] && control["getExpressionBinding"]();
                            parameters.isExpression = !!parameters.text;
                            parameters.allowMarkupText = control["allowMarkupText"] && control["allowMarkupText"]();
                            parameters.wordWrap = control["wordWrap"] && control["wordWrap"]();
                            if (control["font"]) {
                                var _font = new DevExpress.Analytics.Widgets.Internal.FontModel(control["font"]);
                                parameters.fontSize = _font.size();
                                parameters.fontUnit = _font.unit();
                            }
                            if (parameters.isExpression) {
                                parameters.dataMember = control["getPath"] && control["getPath"]("expression") || "";
                                return parameters;
                            }
                            if (_this.hasBindings) {
                                var textBinding = DevExpress.Analytics.Internal.getFirstItemByPropertyValue(control["dataBindings"](), "propertyName", "Text");
                                if (textBinding && textBinding.dataMember()) {
                                    var dataMember = textBinding.dataMember();
                                    var dataSource = textBinding.dataSource();
                                    var parentWithDS = Designer.Internal.findFirstParentWithPropertyName(control, "dataSource");
                                    var rootDataMember = parentWithDS["dataMember"] && parentWithDS["dataMember"]() || "";
                                    var rootDataSource = parentWithDS["dataSource"] && parentWithDS["dataSource"]() || null;
                                    if ((!dataSource || dataSource === rootDataSource) && dataMember.indexOf(rootDataMember) === 0 && dataMember.charAt(rootDataMember.length) === ".") {
                                        parameters.dataMemberOffset = rootDataMember;
                                        parameters.dataMember = dataMember.substr(rootDataMember.length + 1);
                                    }
                                    else {
                                        parameters.dataMemberOffset = "";
                                        parameters.dataMember = textBinding.dataMember();
                                    }
                                    parameters.dataSource = dataSource || rootDataSource;
                                    return parameters;
                                }
                            }
                            parameters.text = _this.displayText();
                            return parameters;
                        });
                        _this.displayName = ko.pureComputed(function () {
                            var parameters = _this.displayNameParameters();
                            return parameters.dataMember ? ("[" + parameters.dataMember + "]") : (parameters.text || "");
                        });
                        _this._disposables.push(_this.contentSizes = ko.pureComputed(function () { return _this.cssCalculator.contentSizeCss(_this.rect().width, _this.rect().height, _this._context.zoom()); }));
                        _this._disposables.push(_this.contentHeightWithoutZoom = ko.pureComputed(function () { return _this.contentSizes().height / _this._context.zoom(); }));
                        _this._disposables.push(_this.contentWidthWithoutZoom = ko.pureComputed(function () { return _this.contentSizes().width / _this._context.zoom(); }));
                        _this._disposables.push(_this.borderCss = ko.pureComputed(function () {
                            return (!control["borders"] || control["borders"]() === "None") ? { "border": "solid 1px Silver" } : _this.cssCalculator.borderCss(_this._context.zoom());
                        }));
                        _this._disposables.push(_this.isIntersect = ko.pureComputed(function () {
                            return _this.isThereIntersectionWithUsefulArea() ||
                                _this.isThereIntersectionWithCrossBandControls() ||
                                _this.isThereIntersectionWithControls();
                        }));
                        _this._disposables.push(_this.adorntemplate = ko.computed(function () { return _this.getAdornTemplate(); }));
                        _this._disposables.push(_this.displayNameParameters);
                        _this._disposables.push(_this.displayName);
                        return _this;
                    }
                    XRControlSurfaceBase.prototype._isThereIntersectionWithUsefulArea = function (useFullWidth) {
                        var right = ko.unwrap(this.getRoot().rtl) && this.container() ? (this.container().rect().width - this.rect().left) : this.rect().right;
                        return right > useFullWidth && Math.abs(right - useFullWidth) > this.delta;
                    };
                    XRControlSurfaceBase._appendValue = function (accumulator, value, needToAppend) {
                        if (needToAppend === void 0) { needToAppend = true; }
                        if (needToAppend) {
                            accumulator += accumulator ? (" " + value) : value;
                        }
                        return accumulator;
                    };
                    Object.defineProperty(XRControlSurfaceBase.prototype, "_unitAbsoluteRect", {
                        get: function () {
                            var parentAbsoluteRect = this.parent && this.parent["_unitAbsoluteRect"];
                            if (parentAbsoluteRect) {
                                return {
                                    top: parentAbsoluteRect.top + this._unitRect.top,
                                    left: parentAbsoluteRect.left + this._unitRect.left,
                                    right: parentAbsoluteRect.left + this._unitRect.left + this._unitRect.width,
                                    bottom: parentAbsoluteRect.top + this._unitRect.top + this._unitRect.height,
                                    width: this._unitRect.width,
                                    height: this._unitRect.height
                                };
                            }
                            else {
                                return this._unitRect;
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(XRControlSurfaceBase.prototype, "_unitRect", {
                        get: function () {
                            var location = this._control["location"] || new DevExpress.Analytics.Elements.Point(0, 0), size = this._control["size"] || new DevExpress.Analytics.Elements.Size(0, 0);
                            return {
                                top: location.y(),
                                left: location.x(),
                                right: location.x() + size.width(),
                                bottom: location.y() + size.height(),
                                width: size.width(),
                                height: size.height()
                            };
                        },
                        enumerable: true,
                        configurable: true
                    });
                    XRControlSurfaceBase.prototype.checkParent = function (surfaceParent) {
                        var thisParent = this.parent instanceof Bands.BandSurface || this.parent instanceof Controls.ReportSurface ? null : this.parent;
                        var anotherParent = surfaceParent instanceof Bands.BandSurface || this.parent instanceof Controls.ReportSurface ? null : surfaceParent;
                        return thisParent === anotherParent;
                    };
                    XRControlSurfaceBase.prototype.isThereIntersection = function (rect1, rect2) {
                        var rect1Right = rect1.right || rect1.left + rect1.width, rect2Right = rect2.right || rect2.left + rect2.width, rect1Bottom = rect1.bottom || rect1.top + rect1.height, rect2Bottom = rect2.bottom || rect2.top + rect2.height;
                        return rect1Right > rect2.left && Math.abs(rect1Right - rect2.left) >= 0.01 &&
                            rect2Right > rect1.left && Math.abs(rect2Right - rect1.left) >= 0.01 &&
                            rect1Bottom > rect2.top && Math.abs(rect1Bottom - rect2.top) >= 0.01 &&
                            rect2Bottom > rect1.top && Math.abs(rect2Bottom - rect1.top) >= 0.01;
                    };
                    XRControlSurfaceBase.prototype.isThereIntersectionWithParent = function (parentRect, childRect) {
                        var rectWidhtElement = childRect.right || childRect.left + childRect.width, rectHeightElement = childRect.bottom || childRect.top + childRect.height;
                        return rectWidhtElement > parentRect.width && Math.abs(rectWidhtElement - parentRect.width) > this.delta ||
                            rectHeightElement > parentRect.height && Math.abs(rectHeightElement - parentRect.height) > this.delta;
                    };
                    XRControlSurfaceBase.prototype.isThereIntersectionWithUsefulArea = function () {
                        var _container = this.container();
                        if (_container instanceof Bands.BandSurface && _container["getUsefulRect"] && _container["getUsefulRect"]()) {
                            return this._isThereIntersectionWithUsefulArea(this.container()["getUsefulRect"]().width);
                        }
                        else if (_container instanceof Bands.VerticalBandSurface) {
                            return false;
                        }
                        else {
                            var root = this.getRoot(), usefulPageWidth = root.pageWidth() - root.margins.left() - root.margins.right();
                            return this._isThereIntersectionWithUsefulArea(usefulPageWidth);
                        }
                    };
                    XRControlSurfaceBase.prototype.isThereIntersectionWithCrossBandControls = function (currentRect) {
                        if (currentRect === void 0) { currentRect = this._unitAbsoluteRect; }
                        if (!currentRect)
                            return false;
                        var isThereIntersection = false, crossBandControls = this.getRoot()["crossBandControls"]();
                        if (this.isThereIntersectionWithNeighborsCollection(currentRect, crossBandControls.filter(function (control) { return control.visible() && control.getControlModel().controlType === "XRCrossBandLine"; }), "_unitAbsoluteRect")) {
                            return true;
                        }
                        var crossBandBoxControls = crossBandControls.filter(function (control) { return control.visible() && control.getControlModel().controlType === "XRCrossBandBox"; });
                        for (var crossbandIndex = 0; crossbandIndex < crossBandBoxControls.length; crossbandIndex++) {
                            var rects = crossBandBoxControls[crossbandIndex]._getCrossBandBoxSides();
                            for (var rectIndex = 0; rectIndex < rects.length; rectIndex++) {
                                if (this !== crossBandBoxControls[crossbandIndex] && this.isThereIntersection(currentRect, rects[rectIndex])) {
                                    isThereIntersection = true;
                                    break;
                                }
                            }
                            ;
                            if (isThereIntersection)
                                break;
                        }
                        ;
                        return isThereIntersection;
                    };
                    XRControlSurfaceBase.prototype.isThereIntersectionWithControls = function () {
                        var collectionControls = this.parent && this.parent.getChildrenCollection() && this.parent.getChildrenCollection()().filter(function (control) { return !control.isIntersectionDeny; }) || [];
                        return this.isThereIntersectionWithParentCollection(this._unitRect)
                            || this.isThereIntersectionWithChildCollection()
                            || this.isThereIntersectionWithNeighborsCollection(this._unitRect, collectionControls);
                    };
                    XRControlSurfaceBase.prototype.isThereIntersectionWithParentCollection = function (currentRect, controlRectProperty) {
                        if (controlRectProperty === void 0) { controlRectProperty = "_unitRect"; }
                        return this.parent && this.parent instanceof Controls.XRControlSurfaceBase &&
                            this.parent[controlRectProperty] && this.isThereIntersectionWithParent(this.parent[controlRectProperty], currentRect);
                    };
                    XRControlSurfaceBase.prototype.isThereIntersectionWithChildCollection = function (controlRectProperty) {
                        if (controlRectProperty === void 0) { controlRectProperty = "_unitRect"; }
                        return this["controls"] && this["controls"]().length > 0 &&
                            this.isThereIntersectionWithChildControls(this["controls"](), controlRectProperty);
                    };
                    XRControlSurfaceBase.prototype.isThereIntersectionWithNeighborsCollection = function (currentRect, collectionControls, controlRectProperty) {
                        if (controlRectProperty === void 0) { controlRectProperty = "_unitRect"; }
                        for (var i = 0; i < collectionControls.length; i++) {
                            if (this !== collectionControls[i] && this.isThereIntersection(currentRect, collectionControls[i][controlRectProperty])) {
                                return true;
                            }
                        }
                        return false;
                    };
                    XRControlSurfaceBase.prototype.isThereIntersectionWithChildControls = function (collectionControls, controlRectProperty) {
                        if (controlRectProperty === void 0) { controlRectProperty = "_unitRect"; }
                        var currentRect = this[controlRectProperty];
                        for (var i = 0; i < collectionControls.length; i++) {
                            if (this !== collectionControls[i] && this.isThereIntersectionWithParent(currentRect, collectionControls[i][controlRectProperty])) {
                                return true;
                            }
                        }
                        return false;
                    };
                    XRControlSurfaceBase.prototype.getAdornTemplate = function () {
                        var result = XRControlSurface._appendValue("", "dxrd-intersect", this.isIntersect());
                        result = XRControlSurface._appendValue(result, "dxrd-control-rtl", this._control.rtl());
                        if (this.hasBindings) {
                            if (this._context["validationMode"] && this._context["validationMode"]() && !this.bindingsIsValid)
                                result = XRControlSurface._appendValue(result, "dxrd-image-surface-bounded-notvalid", true);
                            else
                                result = XRControlSurface._appendValue(result, "dxrd-image-surface-bounded", true);
                        }
                        return result;
                    };
                    XRControlSurfaceBase.prototype.hasDataBindingByName = function (propertyName) {
                        return !!(this._control["hasDataBindingByName"] && this._control["hasDataBindingByName"](propertyName));
                    };
                    Object.defineProperty(XRControlSurfaceBase.prototype, "hasBindings", {
                        get: function () { return !!(this._control["hasBindings"] && this._control["hasBindings"]()); },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(XRControlSurfaceBase.prototype, "bindingsIsValid", {
                        get: function () {
                            var bindingsValid = this._control["dataBindingsAreValid"]();
                            if (this._control["dataBindingMode"] !== "Bindings") {
                                if (!!this._control["expressionBindings"]) {
                                    return this._control["expressionObj"].validateExpression();
                                }
                                return true;
                            }
                            else {
                                return bindingsValid;
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    XRControlSurfaceBase.prototype.displayText = function () {
                        if (this._control.controlType == "XRPanel")
                            return DevExpress.Analytics.Utils.getLocalization("Place controls here to keep them together", "ReportStringId.PanelDesignMsg");
                        var text = this._control["text"] && this._control["text"]() ? this._control["text"]() : "";
                        if (this._control["multiline"] && !this._control["multiline"]()) {
                            text = text.replace(/\r/g, "").replace(/\n/g, "");
                        }
                        return text;
                    };
                    return XRControlSurfaceBase;
                }(DevExpress.Analytics.Elements.SurfaceElementBase));
                Controls.XRControlSurfaceBase = XRControlSurfaceBase;
                var XRControlSurface = (function (_super) {
                    __extends(XRControlSurface, _super);
                    function XRControlSurface(control, context) {
                        var _this = _super.call(this, control, context, XRControlSurface._unitProperties) || this;
                        _this["multiline"] = control["multiline"] || false;
                        _this.getUsefulRect = function () {
                            var borderWidth = ko.unwrap(control["borderWidth"]), borderFlags = control["borders"]();
                            var rect = { top: 0, left: 0, width: _this.rect().width, height: _this.rect().height };
                            if (borderWidth) {
                                if (borderFlags === "All") {
                                    rect.height -= 2 * borderWidth;
                                    rect.width -= 2 * borderWidth;
                                }
                                else {
                                    if (borderFlags.indexOf("Top") >= 0)
                                        rect.height -= borderWidth;
                                    if (borderFlags.indexOf("Right") >= 0)
                                        rect.width -= borderWidth;
                                    if (borderFlags.indexOf("Bottom") >= 0)
                                        rect.height -= borderWidth;
                                    if (borderFlags.indexOf("Left") >= 0)
                                        rect.width -= borderWidth;
                                }
                            }
                            return rect;
                        };
                        return _this;
                    }
                    XRControlSurface.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.controls);
                        this.resetObservableArray(this.controls);
                    };
                    XRControlSurface._unitProperties = {
                        _height: function (o) {
                            return o.size.height;
                        },
                        _width: function (o) {
                            return o.size.width;
                        },
                        _x: function (o) {
                            return o.location.x;
                        },
                        _y: function (o) {
                            return o.location.y;
                        }
                    };
                    return XRControlSurface;
                }(XRControlSurfaceBase));
                Controls.XRControlSurface = XRControlSurface;
                var Metadata;
                (function (Metadata) {
                    Metadata.panelSerializationsInfo = [
                        Metadata.canGrow, Metadata.canShrink, Metadata.keepTogether, Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.controlScripts,
                        Data.Metadata.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
                        { propertyName: "controls", modelName: "Controls", array: true },
                        Metadata.rtl
                    ].concat(Metadata.sizeLocation, Metadata.commonControlProperties, Metadata.navigationGroup);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                (function (PivotGrid) {
                    var PivotGridFieldViewModel = (function (_super) {
                        __extends(PivotGridFieldViewModel, _super);
                        function PivotGridFieldViewModel(model, parent, serializer) {
                            var _this = _super.call(this, DevExpress.Analytics.Internal.cutRefs(model), parent, serializer) || this;
                            _this.controlType = "PivotGridField";
                            _this.areaIndexEditable = ko.pureComputed({
                                read: function () { return _this.areaIndex(); },
                                write: function (newValue) {
                                    if (newValue >= 0) {
                                        var fields = parent["getFieldsFromArea"](_this.area());
                                        if (newValue >= fields.length)
                                            return;
                                        var currentValue = _this.areaIndex(), delta = newValue < currentValue ? 1 : -1, min = Math.min(newValue, currentValue), max = Math.max(newValue, currentValue);
                                        fields.forEach(function (field) {
                                            var fieldAreaIndex = field.areaIndex();
                                            if (min <= fieldAreaIndex && fieldAreaIndex <= max)
                                                field.areaIndex(fieldAreaIndex + delta);
                                        });
                                        _this.areaIndex(newValue);
                                    }
                                }
                            });
                            _this._disposables.push(_this.area.subscribe(function (newValue) {
                                _this.areaIndex(parent["getFieldsFromArea"](_this.area()).length - 1);
                            }));
                            _this.sortBySummaryInfo = new PivotGrid.SortBySummaryInfo(_this.sortBySummaryInfo || {}, _this, serializer);
                            return _this;
                        }
                        PivotGridFieldViewModel.createNew = function (parent) {
                            return function () {
                                return new PivotGridFieldViewModel({}, ko.unwrap(parent), null);
                            };
                        };
                        PivotGridFieldViewModel.prototype.getInfo = function () {
                            return this.getControlFactory().controlsMap["PivotGridField"].info;
                        };
                        PivotGridFieldViewModel.prototype.getControlFactory = function () {
                            return Utils.controlsFactory;
                        };
                        PivotGridFieldViewModel.prototype.getPath = function (propertyName) {
                            return DevExpress.Analytics.Internal.getFullPath(this.parentModel()["getPath"](""), this.parentModel()["dataMember"]());
                        };
                        PivotGridFieldViewModel.prototype.getDisplayName = function () {
                            return this.caption() || this.fieldName() || this.name() || this["displayName"] && this["displayName"]();
                        };
                        PivotGridFieldViewModel.fieldHeight = 20;
                        return PivotGridFieldViewModel;
                    }(DevExpress.Analytics.Elements.ElementViewModel));
                    PivotGrid.PivotGridFieldViewModel = PivotGridFieldViewModel;
                    var PivotGridFieldSurface = (function (_super) {
                        __extends(PivotGridFieldSurface, _super);
                        function PivotGridFieldSurface(control, context) {
                            var _this = _super.call(this, control, context, null) || this;
                            _this.isIntersect = ko.computed(function () { return false; });
                            _this.displayText = function () {
                                return control.caption() || control.fieldName() || (control["displayName"]() || "");
                            };
                            _this._disposables.push(ko.computed(function () {
                                _this._width(control["width"]() * context.zoom());
                                _this._height(PivotGridFieldViewModel.fieldHeight * context.zoom());
                            }));
                            _this.template = "dxrd-pivotgrid-field";
                            _this.selectiontemplate = "dxrd-pivotgrid-field-selection";
                            _this.area = control.area;
                            _this.areaIndex = control.areaIndex;
                            _this._disposables.push(_this.minWidth = ko.pureComputed(function () {
                                return _this.area() === "ColumnArea" || _this.area() === "FilterArea" ? 100 : 0;
                            }));
                            _this._disposables.push(_this.positionWidthWithoutZoom = ko.pureComputed(function () {
                                return _this["position"].width() / _this._context.zoom();
                            }));
                            return _this;
                        }
                        return PivotGridFieldSurface;
                    }(Controls.XRControlSurfaceBase));
                    PivotGrid.PivotGridFieldSurface = PivotGridFieldSurface;
                    var Metadata;
                    (function (Metadata) {
                        Metadata.caption = { displayName: "Caption", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.Caption", propertyName: "caption", modelName: "@Caption", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                        Metadata.index = { displayName: "Index", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField.Index", propertyName: "index", modelName: "@Index", defaultVal: 0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                        Metadata.fieldName = { propertyName: "fieldName", modelName: "@FieldName", displayName: "Data Column Name", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.FieldName", editor: DevExpress.Analytics.Widgets.editorTemplates.field };
                        Metadata.minWidth = { displayName: "Min Width", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.MinWidth", propertyName: "minWidth", modelName: "@MinWidth", defaultVal: 20, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                        Metadata.width = { displayName: "Width", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.Width", propertyName: "width", modelName: "@Width", defaultVal: 100, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                        Metadata.area = {
                            displayName: "Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.Area", propertyName: "area", modelName: "@Area", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "FilterArea",
                            valuesArray: [
                                { value: "RowArea", displayValue: "Row Area", localizationId: "DevExpress.XtraPivotGrid.PivotArea.RowArea" },
                                { value: "ColumnArea", displayValue: "Column Area", localizationId: "DevExpress.XtraPivotGrid.PivotArea.ColumnArea" },
                                { value: "FilterArea", displayValue: "Filter Area", localizationId: "DevExpress.XtraPivotGrid.PivotArea.FilterArea" },
                                { value: "DataArea", displayValue: "Data Area", localizationId: "DevExpress.XtraPivotGrid.PivotArea.DataArea" },
                            ]
                        };
                        Metadata.allowedAreas = {
                            propertyName: "allowedAreas", modelName: "@AllowedAreas", displayName: "Allowed Areas", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.AllowedAreas", defaultVal: "All", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "All", displayValue: "All", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.All" },
                                { value: "RowArea", displayValue: "Row Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.RowArea" },
                                { value: "ColumnArea", displayValue: "Column Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.ColumnArea" },
                                { value: "FilterArea", displayValue: "Filter Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.FilterArea" },
                                { value: "DataArea", displayValue: "Data Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridAllowedAreas.DataArea" }
                            ]
                        };
                        Metadata.areaIndex = { propertyName: "areaIndex", modelName: "@AreaIndex", defaultVal: -1 };
                        Metadata.areaIndexEditable = { propertyName: "areaIndexEditable", displayName: "Area Index", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.AreaIndex", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                        Metadata.unboundType = {
                            propertyName: "unboundType", modelName: "@UnboundType", displayName: "Unbound Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundType", defaultVal: "Bound", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "Bound", displayValue: "Bound", localizationId: "DevExpress.Data.UnboundColumnType.Bound" },
                                { value: "Integer", displayValue: "Integer", localizationId: "DevExpress.Data.UnboundColumnType.Integer" },
                                { value: "Decimal", displayValue: "Decimal", localizationId: "DevExpress.Data.UnboundColumnType.Decimal" },
                                { value: "DateTime", displayValue: "DateTime", localizationId: "DevExpress.XtraTreeList.Data.UnboundColumnType.DateTime" },
                                { value: "String", displayValue: "String", localizationId: "DevExpress.Data.UnboundColumnType.String" },
                                { value: "Boolean", displayValue: "Boolean", localizationId: "DevExpress.Data.UnboundColumnType.Boolean" },
                                { value: "Object", displayValue: "Object", localizationId: "DevExpress.Data.UnboundColumnType.Object" }
                            ]
                        };
                        Metadata.unboundFieldName = { propertyName: "unboundFieldName", modelName: "@UnboundFieldName", displayName: "Unbound Field Name", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundFieldName", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                        Metadata.unboundExpression = { propertyName: "unboundExpression", modelName: "@UnboundExpression", displayName: "Unbound Expression", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundExpression", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                        Metadata.topValueType = {
                            propertyName: "topValueType", modelName: "@TopValueType", displayName: "Top Value Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TopValueType", defaultVal: "Absolute", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "Absolute", displayValue: "Absolute", localizationId: "DevExpress.XtraPivotGrid.PivotTopValueType.Absolute" },
                                { value: "Percent", displayValue: "Percent", localizationId: "DevExpress.XtraPivotGrid.PivotTopValueType.Percent" },
                                { value: "Sum", displayValue: "Sum", localizationId: "DevExpress.XtraPivotGrid.PivotTopValueType.Sum" }
                            ]
                        };
                        Metadata.topValueShowOthers = { propertyName: "topValueShowOthers", modelName: "@TopValueShowOthers", displayName: "Top Value Show Others", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TopValueShowOthers", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                        Metadata.topValueCount = { propertyName: "topValueCount", modelName: "@TopValueCount", displayName: "Top Value Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TopValueCount", defaultVal: 0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                        Metadata.summaryDisplayType = {
                            propertyName: "summaryDisplayType", modelName: "@SummaryDisplayType", displayName: "Summary Display Type", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SummaryDisplayType", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "Default", displayValue: "Default", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.Default" },
                                { value: "AbsoluteVariation", displayValue: "Absolute Variation", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.AbsoluteVariation" },
                                { value: "PercentVariation", displayValue: "Percent Variation", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentVariation" },
                                { value: "PercentOfColumn", displayValue: "Percent Of Column", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfColumn" },
                                { value: "PercentOfRow", displayValue: "Percent Of Row", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfRow" },
                                { value: "PercentOfColumnGrandTotal", displayValue: "Percent Of Column Grand Total", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfColumnGrandTotal" },
                                { value: "PercentOfRowGrandTotal", displayValue: "Percent Of Row Grand Total", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfRowGrandTotal" },
                                { value: "PercentOfGrandTotal", displayValue: "Percent Of Grand Total", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfGrandTotal" },
                                { value: "RankInColumnSmallestToLargest", displayValue: "Rank In Column Smallest To Largest", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInColumnSmallestToLargest" },
                                { value: "RankInRowSmallestToLargest", displayValue: "Rank In Row Smallest To Largest", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInRowSmallestToLargest" },
                                { value: "RankInColumnLargestToSmallest", displayValue: "Rank In Column Largest To Smallest", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInColumnLargestToSmallest" },
                                { value: "RankInRowLargestToSmallest", displayValue: "Rank In Row Largest To Smallest", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInRowLargestToSmallest" },
                                { value: "Index", displayValue: "Index", localizationId: "DevExpress.Data.PivotGrid.PivotSummaryDisplayType.Index" }
                            ]
                        };
                        Metadata.sortOrder = {
                            propertyName: "sortOrder", modelName: "@SortOrder", displayName: "Sort Order", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SortOrder", defaultVal: "Ascending", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "Ascending", displayValue: "Ascending", localizationId: "DevExpress.XtraPivotGrid.PivotSortOrder.Ascending" }, { value: "Descending", displayValue: "Descending", localizationId: "DevExpress.XtraPivotGrid.PivotSortOrder.Descending" }
                            ]
                        };
                        Metadata.sortMode = {
                            propertyName: "sortMode", modelName: "@SortMode", displayName: "Sort Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SortMode", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.Default" },
                                { value: "Value", displayValue: "Value", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.Value" },
                                { value: "DisplayText", displayValue: "DisplayText", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.DisplayText" },
                                { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.Custom" },
                                { value: "Key", displayValue: "Key", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.Key" },
                                { value: "ID", displayValue: "ID", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.ID" },
                                { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPivotGrid.PivotSortMode.None" }
                            ]
                        };
                        Metadata.showNewValues = { propertyName: "showNewValues", modelName: "@ShowNewValues", displayName: "Show New Values", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.ShowNewValues", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                        Metadata.runningTotal = { propertyName: "runningTotal", modelName: "@RunningTotal", displayName: "Running Total", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.RunningTotal", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                        Metadata.rowValueLineCount = { propertyName: "rowValueLineCount", modelName: "@RowValueLineCount", displayName: "Row Value Line Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridField.RowValueLineCount", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                        Metadata.groupIntervalNumericRange = { propertyName: "groupIntervalNumericRange", modelName: "@GroupIntervalNumericRange", displayName: "Group Interval Numeric Range", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.GroupIntervalNumericRange", defaultVal: 10, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                        Metadata.groupInterval = {
                            propertyName: "groupInterval", modelName: "@GroupInterval", displayName: "Group Interval", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField.GroupInterval", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Default" },
                                { value: "Date", displayValue: "Date", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Date" },
                                { value: "DateDay", displayValue: "DateDay", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateDay" },
                                { value: "DateDayOfWeek", displayValue: "Day Of Week", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateDayOfWeek" },
                                { value: "DateDayOfYear", displayValue: "Day Of Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateDayOfYear" },
                                { value: "DateWeekOfMonth", displayValue: "Week Of Month", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateWeekOfMonth" },
                                { value: "DateWeekOfYear", displayValue: "Week Of Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateWeekOfYear" },
                                { value: "DateMonth", displayValue: "Month", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonth" },
                                { value: "DateQuarter", displayValue: "Quarter", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarter" },
                                { value: "DateYear", displayValue: "Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateYear" },
                                { value: "YearAge", displayValue: "Year Age", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.YearAge" },
                                { value: "MonthAge", displayValue: "Month Age", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.MonthAge" },
                                { value: "WeekAge", displayValue: "Week Age", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.WeekAge" },
                                { value: "DayAge", displayValue: "Day Age", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DayAge" },
                                { value: "Alphabetical", displayValue: "Alphabetical", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Alphabetical" },
                                { value: "Numeric", displayValue: "Numeric", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Numeric" },
                                { value: "Hour", displayValue: "Hour", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Hour" },
                                { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Custom" },
                                { value: "Minute", displayValue: "Minute", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Minute" },
                                { value: "Second", displayValue: "Second", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.Second" },
                                { value: "DateMonthYear", displayValue: "Month-Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonthYear" },
                                { value: "DateQuarterYear", displayValue: "Quarter-Year", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarterYear" },
                                { value: "DateHour", displayValue: "Date-Hour", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateHour" },
                                { value: "DateHourMinute", displayValue: "Date-Hour-Minute", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateHourMinute" },
                                { value: "DateHourMinuteSecond", displayValue: "Date-Hour-Minute-Second", localizationId: "DevExpress.XtraPivotGrid.PivotGroupInterval.DateHourMinuteSecond" }
                            ]
                        };
                        Metadata.grandTotalText = { propertyName: "grandTotalText", modelName: "@GrandTotalText", displayName: "Grand Total Text", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.GrandTotalText", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                        Metadata.expandedInFieldsGroup = { propertyName: "expandedInFieldsGroup", modelName: "@ExpandedInFieldsGroup", displayName: "Expanded In Fields Group", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.ExpandedInFieldsGroup", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                        Metadata.emptyValueText = { propertyName: "emptyValueText", modelName: "@EmptyValueText", displayName: "Empty Value Text", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.EmptyValueText", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                        Metadata.emptyCellText = { propertyName: "emptyCellText", modelName: "@EmptyCellText", displayName: "Empty Cell Text", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.EmptyCellText", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                        Metadata.displayFolder = { propertyName: "displayFolder", modelName: "@DisplayFolder", displayName: "Display Folder", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.DisplayFolder", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text };
                        Metadata.columnValueLineCount = { propertyName: "columnValueLineCount", modelName: "@ColumnValueLineCount", displayName: "Column Value Line Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridField.ColumnValueLineCount", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                        Metadata.totalsVisibility = {
                            propertyName: "totalsVisibility", modelName: "@TotalsVisibility", displayName: "Totals Visibility", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalsVisibility", defaultVal: "AutomaticTotals", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "AutomaticTotals", displayValue: "Automatic Totals", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsVisibility.AutomaticTotals" },
                                { value: "CustomTotals", displayValue: "Custom Totals", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsVisibility.CustomTotals" },
                                { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsVisibility.None" }
                            ]
                        };
                        Metadata.useNativeFormat = { propertyName: "useNativeFormat", modelName: "@UseNativeFormat", displayName: "Export As Numbers To Excel", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UseNativeFormat", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray };
                        Metadata.KPIGraphic = {
                            propertyName: "KPIGraphic", modelName: "@KPIGraphic", displayName: "KPI Graphic", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.KPIGraphic", defaultVal: "ServerDefined", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.None" },
                                { value: "ServerDefined", displayValue: "Server Defined", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ServerDefined" },
                                { value: "Shapes", displayValue: "Shapes", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Shapes" },
                                { value: "TrafficLights", displayValue: "Traffic Lights", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.TrafficLights" },
                                { value: "RoadSigns", displayValue: "Road Signs", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.RoadSigns" },
                                { value: "Gauge", displayValue: "Gauge", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Gauge" },
                                { value: "ReversedGauge", displayValue: "Reversed Gauge", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedGauge" },
                                { value: "Thermometer", displayValue: "Thermometer", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Thermometer" },
                                { value: "ReversedThermometer", displayValue: "Reversed Thermometer", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedThermometer" },
                                { value: "Cylinder", displayValue: "Cylinder", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Cylinder" },
                                { value: "ReversedCylinder", displayValue: "Reversed Cylinder", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedCylinder" },
                                { value: "Faces", displayValue: "Faces", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.Faces" },
                                { value: "VarianceArrow", displayValue: "Variance Arrow", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.VarianceArrow" },
                                { value: "StandardArrow", displayValue: "Standard Arrow", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.StandardArrow" },
                                { value: "StatusArrow", displayValue: "Status Arrow", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.StatusArrow" },
                                { value: "ReversedStatusArrow", displayValue: "Reversed Status Arrow", localizationId: "DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedStatusArrow" }
                            ]
                        };
                        var formatType = {
                            propertyName: "formatType", modelName: "@FormatType", displayName: "Format Type", localizationId: "DevExpress.Utils.FormatInfo.FormatType", defaultVal: "None", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "None", displayValue: "None", localizationId: "DevExpress.Utils.FormatType.None" },
                                { value: "Numeric", displayValue: "Numeric", localizationId: "DevExpress.Utils.FormatType.Numeric" },
                                { value: "DateTime", displayValue: "DateTime", localizationId: "DevExpress.Utils.FormatType.DateTime" },
                                { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.Utils.FormatType.Custom" }
                            ]
                        }, formatString = { propertyName: "formatString", modelName: "@FormatString", displayName: "Format String", localizationId: "DevExpress.Utils.FormatInfo.FormatString", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.formatEditor };
                        var formatInfo = [formatType, formatString];
                        Metadata.cellFormat = { propertyName: "cellFormat", modelName: "CellFormat", displayName: "Cell Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.CellFormat", info: formatInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        Metadata.totalCellFormat = { propertyName: "totalCellFormat", modelName: "TotalCellFormat", displayName: "Total Cell Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalCellFormat", info: formatInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        Metadata.grandTotalCellFormat = { propertyName: "grandTotalCellFormat", modelName: "GrandTotalCellFormat", displayName: "Grand Total Cell Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.GrandTotalCellFormat", info: formatInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        Metadata.valueFormat = { propertyName: "valueFormat", modelName: "ValueFormat", displayName: "Value Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.ValueFormat", info: formatInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        Metadata.totalValueFormat = { propertyName: "totalValueFormat", modelName: "TotalValueFormat", displayName: "Total Value Format", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalValueFormat", info: formatInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        var textHorizontalAlignment = {
                            propertyName: "textHorizontalAlignment", modelName: "@HAlignment", displayName: "Text Horizontal Alignment", localizationId: "DevExpress.PivotGrid.Printing.PrintTextOptions.HAlignment", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "Default", displayValue: "Default", localizationId: "DevExpress.Utils.HorzAlignment.Default" },
                                { value: "Near", displayValue: "Near", localizationId: "DevExpress.Utils.HorzAlignment.Near" },
                                { value: "Center", displayValue: "Center", localizationId: "DevExpress.Utils.HorzAlignment.Center" },
                                { value: "Far", displayValue: "Far", localizationId: "DevExpress.Utils.HorzAlignment.Far" }
                            ]
                        }, textVerticalAlignment = {
                            propertyName: "textVerticalAlignment", modelName: "@VAlignment", displayName: "Text Vertical Alignment", localizationId: "DevExpress.PivotGrid.Printing.PrintTextOptions.VAlignment", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: [
                                { value: "Default", displayValue: "Default", localizationId: "DevExpress.Utils.VertAlignment.Default" },
                                { value: "Top", displayValue: "Top", localizationId: "DevExpress.Utils.VertAlignment.Top" },
                                { value: "Center", displayValue: "Center", localizationId: "DevExpress.Utils.VertAlignment.Center" },
                                { value: "Bottom", displayValue: "Bottom", localizationId: "DevExpress.Utils.VertAlignment.Bottom" }
                            ]
                        }, trimming = {
                            propertyName: "trimming", modelName: "@Trimming", displayName: "Trimming", localizationId: "DevExpress.PivotGrid.Printing.PrintTextOptions.Trimming", defaultVal: "None", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: [
                                { value: "None", displayValue: "None", localizationId: "System.Drawing.StringTrimming.None" },
                                { value: "Character", displayValue: "Character", localizationId: "System.Drawing.StringTrimming.Character" },
                                { value: "Word", displayValue: "Word", localizationId: "System.Drawing.StringTrimming.Word" },
                                { value: "EllipsisCharacter", displayValue: "EllipsisCharacter", localizationId: "System.Drawing.StringTrimming.EllipsisCharacter" },
                                { value: "EllipsisWord", displayValue: "EllipsisWord", localizationId: "System.Drawing.StringTrimming.EllipsisWord" },
                                { value: "EllipsisPath", displayValue: "EllipsisPath", localizationId: "System.Drawing.StringTrimming.EllipsisPath" }
                            ]
                        }, appearanceWordWrap = {
                            propertyName: "wordWrap", modelName: "@WordWrap", displayName: "Word Wrap", localizationId: "DevExpress.PivotGrid.Printing.PrintTextOptions.WordWrap", defaultVal: "NoWrap", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: [
                                { value: "NoWrap", displayValue: "No Wrap", localizationId: "DevExpress.Utils.WordWrap.NoWrap" },
                                { value: "Wrap", displayValue: "Wrap", localizationId: "DevExpress.Utils.WordWrap.Wrap" }
                            ]
                        };
                        var textOptionsInfo = [textHorizontalAlignment, textVerticalAlignment, trimming, appearanceWordWrap], textOptions = { propertyName: "textOptions", modelName: "TextOptions", displayName: "Text Options", localizationId: "DevExpress.XtraReports.UI.XRAppearanceObject.TextOptions", info: textOptionsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        Metadata.appearanceInfo = [Controls.Metadata.backColor, Controls.Metadata.borderColor, Controls.Metadata.foreColor, Controls.Metadata.font, textOptions];
                        var cellAppearance = { propertyName: "cellAppearance", modelName: "Cell", displayName: "Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Cell", info: Metadata.appearanceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor }, totalCellAppearance = { propertyName: "totalCellAppearance", modelName: "TotalCell", displayName: "Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.TotalCell", info: Metadata.appearanceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor }, customTotalCellAppearance = { propertyName: "customTotalCellAppearance", modelName: "CustomTotalCell", displayName: "Custom Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.CustomTotalCell", info: Metadata.appearanceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor }, grandTotalCellAppearance = { propertyName: "grandTotalCellAppearance", modelName: "GrandTotalCell", displayName: "Grand Total Cell", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.GrandTotalCell", info: Metadata.appearanceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor }, fieldValueAppearance = { propertyName: "fieldValueAppearance", modelName: "FieldValue", displayName: "Field Value", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValue", info: Metadata.appearanceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor }, fieldValueTotalAppearance = { propertyName: "fieldValueTotalAppearance", modelName: "FieldValueTotal", displayName: "Field Value Total", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValueTotal", info: Metadata.appearanceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor }, fieldValueGrandTotalAppearance = { propertyName: "fieldValueGrandTotalAppearance", modelName: "FieldValueGrandTotal", displayName: "Field Value Grand Total", localizationId: "DevExpress.XtraPivotGrid.PivotGridAppearancesBase.FieldValueGrandTotal", info: Metadata.appearanceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor }, fieldHeaderAppearance = { propertyName: "fieldHeaderAppearance", modelName: "FieldHeader", displayName: "Field Header", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldHeader", info: Metadata.appearanceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        Metadata.appearancesInfo = [cellAppearance, totalCellAppearance, customTotalCellAppearance, grandTotalCellAppearance, fieldHeaderAppearance, fieldValueAppearance, fieldValueGrandTotalAppearance, fieldValueTotalAppearance];
                        var appearances = { propertyName: "appearances", modelName: "Appearance", displayName: "Appearance", localizationId: "DevExpress.XtraPivotGrid.PivotGridField.Appearance", info: Metadata.appearancesInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        var allowDrag = { propertyName: "allowDrag", modelName: "@AllowDrag", displayName: "Allow Drag", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowDrag", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, allowDragInCustomizationForm = { propertyName: "@allowDragInCustomizationForm", modelName: "AllowDragInCustomizationForm", displayName: "Allow Drag In Customization Form", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray, localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsCustomization.AllowDragInCustomizationForm' }, allowExpand = { propertyName: "allowExpand", modelName: "@AllowExpand", displayName: "Allow Expand", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowExpand", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, allowFilter = { propertyName: "allowFilter", modelName: "@AllowFilter", displayName: "Allow Filter", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowFilter", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, allowFilterBySummary = { propertyName: "allowFilterBySummary", modelName: "@AllowFilterBySummary", displayName: "Allow Filter By Summary", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowFilterBySummary", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, allowRunTimeSummaryChange = { propertyName: "allowRunTimeSummaryChange", modelName: "@AllowRunTimeSummaryChange", displayName: "Allow Run Time Summary Change", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowRunTimeSummaryChange", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, allowSort = { propertyName: "allowSort", modelName: "@AllowSort", displayName: "Allow Sort", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowSort", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, allowSortBySummary = { propertyName: "allowSortBySummary", modelName: "@AllowSortBySummary", displayName: "Allow Sort By Summary", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowSortBySummary", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, groupFilterMode = { propertyName: "groupFilterMode", modelName: "@GroupFilterMode", displayName: "Group Filter Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.GroupFilterMode", defaultVal: null, editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "List", displayValue: "List", localizationId: "DevExpress.XtraPivotGrid.PivotGroupFilterMode.List" }, { value: "Tree", displayValue: "Tree", localizationId: "DevExpress.XtraPivotGrid.PivotGroupFilterMode.Tree" }] }, hideEmptyVariationItems = { propertyName: "hideEmptyVariationItems", modelName: "@HideEmptyVariationItems", displayName: "Hide Empty Variation Items", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.HideEmptyVariationItems", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showCustomTotals = { propertyName: "showCustomTotals", modelName: "@ShowCustomTotals", displayName: "Show Custom Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowCustomTotals", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showGrandTotal = { propertyName: "showGrandTotal", modelName: "@ShowGrandTotal", displayName: "Show Grand Total", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowGrandTotal", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showSummaryTypeName = { propertyName: "showSummaryTypeName", modelName: "@ShowSummaryTypeName", displayName: "Show Summary Type Name", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowSummaryTypeName", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showTotals = { propertyName: "showTotals", modelName: "@ShowTotals", displayName: "Show Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowTotals", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showValues = { propertyName: "showValues", modelName: "@ShowValues", displayName: "Show Values", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowValues", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                        Metadata.unboundExpressionMode = {
                            propertyName: "unboundExpressionMode", modelName: "@UnboundExpressionMode", displayName: "Unbound Expression Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundExpressionMode", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "UseSummaryValues", displayValue: "Use Summary Values", localizationId: "DevExpress.XtraPivotGrid.UnboundExpressionMode.UseSummaryValues" },
                                { value: "DataSource", displayValue: "Data Source", localizationId: "DevExpress.XtraPivotGrid.UnboundExpressionMode.DataSource" },
                                { value: "UseAggregateFunctions", displayValue: "Use Aggregate Functions", localizationId: "DevExpress.XtraPivotGrid.UnboundExpressionMode.UseAggregateFunctions" },
                                { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.UnboundExpressionMode.Default" }
                            ]
                        };
                        var optionsInfo = [allowDrag, allowDragInCustomizationForm, allowExpand, allowFilter, allowFilterBySummary, allowRunTimeSummaryChange, allowSort, allowSortBySummary, groupFilterMode,
                            hideEmptyVariationItems, showCustomTotals, showGrandTotal, showSummaryTypeName, showTotals, showValues];
                        Metadata.options = { propertyName: "options", modelName: "Options", displayName: "Options", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.Options", info: optionsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        Metadata.sortBySummary = { propertyName: "sortBySummaryInfo", modelName: "SortBySummaryInfo", displayName: "Sort By Summary Info", localizationId: "DevExpress.XtraPivotGrid.PivotGridFieldBase.SortBySummaryInfo", from: PivotGrid.SortBySummaryInfo.from, toJsonObject: PivotGrid.SortBySummaryInfo.toJSON, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                        Metadata.pivotGridFieldSerializationsInfo = [
                            appearances,
                            Metadata.allowedAreas, Metadata.area, Metadata.areaIndex, Metadata.areaIndexEditable,
                            Metadata.caption, Metadata.cellFormat, Metadata.columnValueLineCount,
                            Metadata.displayFolder, Metadata.emptyCellText, Metadata.emptyValueText, Metadata.expandedInFieldsGroup,
                            Metadata.fieldName, Metadata.summaryType, Metadata.topValueCount, Metadata.topValueShowOthers,
                            Metadata.grandTotalCellFormat, Metadata.grandTotalText, Metadata.groupInterval, Metadata.groupIntervalNumericRange,
                            Metadata.index, Metadata.KPIGraphic, Metadata.minWidth, Metadata.width, Metadata.rowValueLineCount, Metadata.runningTotal,
                            Metadata.showNewValues, Metadata.sortMode, Metadata.sortOrder, Metadata.summaryDisplayType,
                            Metadata.topValueType, Metadata.totalCellFormat, Metadata.totalValueFormat, Metadata.totalsVisibility,
                            Metadata.unboundExpression, Metadata.unboundExpressionMode, Metadata.unboundFieldName, Metadata.unboundType, Metadata.useNativeFormat,
                            Metadata.valueFormat, Metadata.options, Metadata.sortBySummary
                        ].concat(Controls.Metadata.baseControlProperties);
                        Metadata.popularPropertiesPivotGridField = ["area", "areaIndexEditable", "fieldName", "caption", "groupInterval", "summaryType", "summaryDisplayType", "unboundType", "unboundExpression"];
                        Metadata.pivotGridFieldsSerializable = { displayName: "Fields", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.Fields", propertyName: "fields", modelName: "Fields", array: true, editor: Widgets.editorTemplates.pivotGridFields, template: "#dxrd-collectionItemWithAccordion", };
                    })(Metadata = PivotGrid.Metadata || (PivotGrid.Metadata = {}));
                })(PivotGrid = Controls.PivotGrid || (Controls.PivotGrid = {}));
                var XRTextControlSurfaceBase = (function (_super) {
                    __extends(XRTextControlSurfaceBase, _super);
                    function XRTextControlSurfaceBase(control, context, units) {
                        if (units === void 0) { units = XRControlSurface._unitProperties; }
                        var _this = _super.call(this, control, context, units) || this;
                        _this._$element = ko.observable(null);
                        _this._font = null;
                        _this.contenttemplate = "dxrd-textcontrol-content";
                        _this["multiline"] = control["multiline"] || false;
                        _this._disposables.push(_this._font = new DevExpress.Analytics.Widgets.Internal.FontModel(control["font"]));
                        var canGrow = function () { return control["canGrow"] && control["canGrow"](); };
                        var textElementSizeHelper = new Internal.TextElementSizeHelper();
                        _this.fitTextToBoundsAction = new Actions.FitTextToBoundsAction(_this, textElementSizeHelper);
                        _this.fitBoundsToTextAction = new Actions.FitBoundsToTextAction(_this, textElementSizeHelper);
                        _this._disposables.push(_this.characterHeight = ko.computed(function () {
                            return textElementSizeHelper.getTextContainerSize("a", {
                                "font-size": _this._font.size() + _this._font.unit(),
                                "font-family": _this._font.family(),
                                "height": "auto",
                                "width": "auto"
                            }).height;
                        }));
                        _this._disposables.push(ko.computed(function () {
                            if (_this._$element()) {
                                _this._$element().height('auto');
                                var text = _this._control["text"]();
                                var characterHeight = _this.characterHeight();
                                var contentHeight = _this._$element().height();
                                if (contentHeight > _this.rect().height && !canGrow()) {
                                    var visibleHeight = Math.floor(_this.rect().height / characterHeight) * characterHeight;
                                    if (visibleHeight)
                                        _this._$element().height(visibleHeight + 'px');
                                }
                            }
                        }));
                        return _this;
                    }
                    XRTextControlSurfaceBase.prototype.getAlignments = function () {
                        var textAlignment = this._control["textAlignment"]();
                        var vertical = "";
                        var horizontal = "";
                        for (var i = 0; i < textAlignment.length; i++) {
                            if (textAlignment[i] === textAlignment[i].toLocaleUpperCase()) {
                                if (vertical === "") {
                                    vertical += textAlignment[i];
                                }
                                else if (vertical !== "") {
                                    horizontal += textAlignment[i];
                                }
                            }
                            else {
                                if (horizontal !== "") {
                                    horizontal += textAlignment[i];
                                }
                                else {
                                    vertical += textAlignment[i];
                                }
                            }
                        }
                        return {
                            vertical: vertical,
                            horizontal: horizontal
                        };
                    };
                    XRTextControlSurfaceBase.prototype.getWordWrap = function () {
                        return this._control["wordWrap"] && this._control["wordWrap"]();
                    };
                    XRTextControlSurfaceBase.prototype.getCssContent = function (content) {
                        if (content === void 0) { content = {}; }
                        return DevExpress.Analytics.Internal.extend({}, this.contentCss(), {
                            "box-sizing": "border-box",
                            "height": "auto",
                            "display": "inline-block",
                            "width": "auto",
                            "transform": "scale(" + this._context.zoom() + ")"
                        }, content);
                    };
                    XRTextControlSurfaceBase.prototype.getContentSize = function () {
                        return this.contentSizes();
                    };
                    XRTextControlSurfaceBase.prototype.getText = function () {
                        return this.displayText();
                    };
                    XRTextControlSurfaceBase.prototype.getFontModel = function () {
                        return this._font;
                    };
                    XRTextControlSurfaceBase.prototype.setFontSize = function (size) {
                        this._font.size(size);
                    };
                    XRTextControlSurfaceBase.prototype.cacheElementContent = function ($element) {
                        this._$element(null);
                        this._$element($element);
                    };
                    XRTextControlSurfaceBase.prototype.fitTextToBounds = function () {
                        this.fitTextToBoundsAction.fit();
                    };
                    XRTextControlSurfaceBase.prototype.fitWidthToText = function () {
                        this.fitBoundsToTextAction.fitWidth();
                    };
                    XRTextControlSurfaceBase.prototype.fitHeightToText = function () {
                        this.fitBoundsToTextAction.fitHeight();
                    };
                    XRTextControlSurfaceBase.prototype.fitBoundsToText = function () {
                        this.fitBoundsToTextAction.fitBounds();
                    };
                    return XRTextControlSurfaceBase;
                }(XRControlSurfaceBase));
                Controls.XRTextControlSurfaceBase = XRTextControlSurfaceBase;
                (function (Metadata) {
                    Metadata.labelSerializationsInfo = [
                        Metadata.textEditOptions,
                        Metadata.allowMarkupText, Metadata.autoWidth, Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.labelScripts, Metadata.textTrimming,
                        Data.Metadata.dataBindings(["Text", "NavigateUrl", "Tag", "Bookmark"])
                    ].concat(Internal.createSinglePopularBindingInfos("Text"), Metadata.sizeLocation, Metadata.labelGroup);
                    Metadata.popularPropertiesLabel = ["text", "textArea", "popularDataBinding", "popularExpression", "textFormatString", "Summary", "angle", "bookmark", "bookmarkParent", "autoWidth", "canGrow", "canShrink", "multiline", "wordWrap"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
            })(Controls = Designer.Controls || (Designer.Controls = {}));
            (function (Internal) {
                var TableActionDirection;
                (function (TableActionDirection) {
                    TableActionDirection[TableActionDirection["vertical"] = 0] = "vertical";
                    TableActionDirection[TableActionDirection["horizontal"] = 1] = "horizontal";
                })(TableActionDirection = Internal.TableActionDirection || (Internal.TableActionDirection = {}));
                var TableComponentSurface = (function (_super) {
                    __extends(TableComponentSurface, _super);
                    function TableComponentSurface() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    TableComponentSurface.prototype._getNeededProperties = function (rect) {
                        if (this.direction === TableActionDirection.vertical) {
                            return {
                                positionProperty: rect.top === undefined ? this.rect().top : rect.top,
                                secondaryPositionProperty: rect.bottom,
                                sizeProperty: rect.height
                            };
                        }
                        else {
                            return {
                                positionProperty: rect.left === undefined ? this.rect().left : rect.left,
                                secondaryPositionProperty: rect.right,
                                sizeProperty: rect.width
                            };
                        }
                    };
                    TableComponentSurface.prototype._generateRect = function (rect, result) {
                        if (this.direction === TableActionDirection.vertical) {
                            rect.top = result.positionProperty === undefined ? rect.top : result.positionProperty;
                            rect.bottom = result.secondaryPositionProperty === undefined ? rect.bottom : result.secondaryPositionProperty;
                            rect.height = result.sizeProperty === undefined ? rect.height : result.sizeProperty;
                        }
                        else {
                            rect.left = result.positionProperty === undefined ? rect.left : result.positionProperty;
                            rect.right = result.secondaryPositionProperty === undefined ? rect.right : result.secondaryPositionProperty;
                            rect.width = result.sizeProperty === undefined ? rect.width : result.sizeProperty;
                            delete rect.height;
                        }
                        return rect;
                    };
                    TableComponentSurface.prototype.beforeRectUpdated = function (rect) {
                        var incomingRect = this._getNeededProperties(rect);
                        var currentRect = this._getNeededProperties(this.rect());
                        var model = this.getControlModel();
                        var parentModel = this.parent.getControlModel();
                        if (incomingRect.secondaryPositionProperty !== undefined) {
                            incomingRect.positionProperty = currentRect.positionProperty;
                            incomingRect.sizeProperty = incomingRect.secondaryPositionProperty < incomingRect.positionProperty ? 0
                                : incomingRect.secondaryPositionProperty - incomingRect.positionProperty;
                        }
                        if (incomingRect.positionProperty > currentRect.secondaryPositionProperty) {
                            incomingRect.positionProperty = currentRect.secondaryPositionProperty;
                            return this._generateRect(rect, incomingRect);
                        }
                        if (incomingRect.sizeProperty === undefined) {
                            incomingRect.sizeProperty = currentRect.sizeProperty + currentRect.positionProperty - incomingRect.positionProperty;
                        }
                        var childCollectionName = this.parent._getChildrenHolderName();
                        var positionRedused = parseInt(currentRect.positionProperty) > incomingRect.positionProperty;
                        var sizeIncreased = parseInt(currentRect.sizeProperty) < incomingRect.sizeProperty && !positionRedused;
                        var position = parentModel[childCollectionName]().indexOf(model);
                        if (position !== 0 && positionRedused) {
                            var prevElementRect = this._getNeededProperties(parentModel[childCollectionName]()[position - 1].surface.rect());
                            if (prevElementRect.positionProperty > incomingRect.positionProperty) {
                                incomingRect.sizeProperty -= (prevElementRect.positionProperty - incomingRect.positionProperty);
                                incomingRect.positionProperty = prevElementRect.positionProperty;
                            }
                        }
                        if (sizeIncreased && position !== parentModel[childCollectionName]().length - 1) {
                            var nextElementRect = this._getNeededProperties(parentModel[childCollectionName]()[position + 1].surface.rect());
                            if (nextElementRect.secondaryPositionProperty < incomingRect.positionProperty + incomingRect.sizeProperty) {
                                incomingRect.sizeProperty = nextElementRect.secondaryPositionProperty - incomingRect.positionProperty;
                            }
                        }
                        return this._generateRect(rect, incomingRect);
                    };
                    return TableComponentSurface;
                }(Controls.XRTextControlSurfaceBase));
                Internal.TableComponentSurface = TableComponentSurface;
                var TodoControlSurface = (function (_super) {
                    __extends(TodoControlSurface, _super);
                    function TodoControlSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this["controlTypeClass"] = "dxrd-image-todo-" + control.controlType.slice(2).toLowerCase();
                        _this["controlTypeIconTemplate"] = "dxrd-svg-todo-" + control.controlType.slice(2).toLowerCase();
                        _this.template = "dxrd-todocontrol";
                        return _this;
                    }
                    return TodoControlSurface;
                }(Controls.XRControlSurface));
                Internal.TodoControlSurface = TodoControlSurface;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Controls) {
                var XRBarCodeViewModel = (function (_super) {
                    __extends(XRBarCodeViewModel, _super);
                    function XRBarCodeViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        _this.symbology(_this.createBarcode(_this.symbology() || {}, serializer));
                        _this.barcodeFake = {
                            type: ko.pureComputed({
                                read: function () {
                                    return _this.symbology()["name"]();
                                },
                                write: function (val) {
                                    _this.symbology(_this.createBarcode({ "@Name": val }, serializer));
                                }
                            }),
                            content: _this.symbology
                        };
                        _this._disposables.push(_this.barcodeFake.type);
                        return _this;
                    }
                    XRBarCodeViewModel.prototype.createBarcode = function (model, serializer) {
                        if (serializer === void 0) { serializer = null; }
                        var name = model && model["@Name"] || "Code1";
                        var barcodeInfo = Metadata.barCodesMap[name];
                        var newBarcode = { "name": ko.observable(name), "getInfo": function () { return barcodeInfo; } };
                        (serializer || new DevExpress.Analytics.Utils.ModelSerializer()).deserialize(newBarcode, model);
                        return newBarcode;
                    };
                    XRBarCodeViewModel.unitProperties = ["module"];
                    XRBarCodeViewModel.barCodesTypes = [
                        { value: "Codabar", displayValue: "Codabar" },
                        { value: "Code11", displayValue: "Code11" },
                        { value: "Code128", displayValue: "Code128" },
                        { value: "Code39", displayValue: "Code39" },
                        { value: "Code39Extended", displayValue: "Code39Extended" },
                        { value: "Code93", displayValue: "Code93" },
                        { value: "Code93Extended", displayValue: "Code93Extended" },
                        { value: "CodeMSI", displayValue: "CodeMSI" },
                        { value: "DataBar", displayValue: "DataBar" },
                        { value: "DataMatrix", displayValue: "DataMatrix" },
                        { value: "DataMatrixGS1", displayValue: "DataMatrixGS1" },
                        { value: "EAN128", displayValue: "EAN128" },
                        { value: "EAN13", displayValue: "EAN13" },
                        { value: "EAN8", displayValue: "EAN8" },
                        { value: "Industrial2of5", displayValue: "Industrial2of5" },
                        { value: "IntelligentMail", displayValue: "IntelligentMail" },
                        { value: "IntelligentMailPackage", displayValue: "IntelligentMailPackage" },
                        { value: "Interleaved2of5", displayValue: "Interleaved2of5" },
                        { value: "ITF14", displayValue: "ITF14" },
                        { value: "Matrix2of5", displayValue: "Matrix2of5" },
                        { value: "PDF417", displayValue: "PDF417" },
                        { value: "PostNet", displayValue: "PostNet" },
                        { value: "QRCode", displayValue: "QRCode" },
                        { value: "UPCA", displayValue: "UPCA" },
                        { value: "UPCE0", displayValue: "UPCE0" },
                        { value: "UPCE1", displayValue: "UPCE1" },
                        { value: "UPCSupplemental2", displayValue: "UPCSupplemental2" },
                        { value: "UPCSupplemental5", displayValue: "UPCSupplemental5" }
                    ];
                    return XRBarCodeViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRBarCodeViewModel = XRBarCodeViewModel;
                var XRBarcodeSurface = (function (_super) {
                    __extends(XRBarcodeSurface, _super);
                    function XRBarcodeSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.contenttemplate = "dxrd-barcode-content";
                        return _this;
                    }
                    return XRBarcodeSurface;
                }(Controls.XRControlSurface));
                Controls.XRBarcodeSurface = XRBarcodeSurface;
                var Metadata;
                (function (Metadata) {
                    var defaultCodeSerializationInfo = { propertyName: "name", modelName: "@Name" };
                    var calcCheckSum = { propertyName: "calcCheckSum", modelName: "@CalcCheckSum", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, displayName: "Calculate a Checksum", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeGeneratorBase.CalcCheckSum" };
                    var code93SerializationInfo = [defaultCodeSerializationInfo, calcCheckSum];
                    var wideNarrowRation = { propertyName: "wideNarrowRation", modelName: "@WideNarrowRatio", defaultVal: 2.5, from: DevExpress.Analytics.Utils.floatFromModel, displayName: "Wide Narrow Ratio", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarGenerator.WideNarrowRatio", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    var codabarStartStopSymbolValues = [
                        { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.None" },
                        { value: "A", displayValue: "A", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.A" },
                        { value: "B", displayValue: "B", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.B" },
                        { value: "C", displayValue: "C", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.C" },
                        { value: "D", displayValue: "D", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.D" },
                    ];
                    var codaBarStartSymbol = {
                        propertyName: "startSymbol", modelName: "@StartSymbol", defaultVal: "A",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Start Symbol", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarGenerator.StartSymbol",
                        valuesArray: codabarStartStopSymbolValues
                    };
                    var codaBarStopSymbol = {
                        propertyName: "stopSymbol", modelName: "@StopSymbol", defaultVal: "A",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Stop Symbol", localizationId: "DevExpress.XtraPrinting.BarCode.CodabarGenerator.StopSymbol",
                        valuesArray: codabarStartStopSymbolValues
                    };
                    var codabarSerializationInfo = [
                        defaultCodeSerializationInfo,
                        codaBarStartSymbol,
                        codaBarStopSymbol,
                        wideNarrowRation
                    ];
                    var charset = {
                        propertyName: "characterSet",
                        modelName: "@CharacterSet", defaultVal: "CharsetA", displayName: "Character Set", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Generator.CharacterSet", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "CharsetAuto", displayValue: "CharsetAuto", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetAuto" },
                            { value: "CharsetA", displayValue: "CharsetA", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetA" },
                            { value: "CharsetB", displayValue: "CharsetB", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetB" },
                            { value: "CharsetC", displayValue: "CharsetC", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetC" }
                        ]
                    };
                    var addLeadingZero = { propertyName: "addLeadingZero", displayName: "Add Leading Zero", localizationId: "DevExpress.XtraPrinting.BarCode.Code128Generator.AddLeadingZero", modelName: "@AddLeadingZero", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    var code128SerializationInfo = [defaultCodeSerializationInfo, addLeadingZero, charset];
                    var code39SerializationInfo = [wideNarrowRation].concat(code93SerializationInfo);
                    var codeMSISerializationInfo = [
                        defaultCodeSerializationInfo,
                        {
                            propertyName: "msiCheckSum",
                            modelName: "@MSICheckSum", defaultVal: "Modulo10", displayName: "MSI Checksum", localizationId: "DevExpress.XtraPrinting.BarCode.CodeMSIGenerator.MSICheckSum", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: [
                                { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPrinting.BarCode.MSICheckSum.None" },
                                { value: "Modulo10", displayValue: "Modulo10", localizationId: "DevExpress.XtraPrinting.BarCode.MSICheckSum.Modulo10" },
                                { value: "DoubleModulo10", displayValue: "DoubleModulo10", localizationId: "DevExpress.XtraPrinting.BarCode.MSICheckSum.DoubleModulo10" }
                            ]
                        }
                    ];
                    var fnc1Substitute = { propertyName: "fNC1Substitute", modelName: "@FNC1Substitute", defaultVal: "#", editor: DevExpress.Analytics.Widgets.editorTemplates.text, displayName: "FNC1 Functional Character", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarGenerator.FNC1Substitute" };
                    var dataBarSerializationInfo = [
                        defaultCodeSerializationInfo,
                        fnc1Substitute,
                        { propertyName: "segmentsInRow", modelName: "@SegmentsInRow", defaultVal: 20, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Segments In Row", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarGenerator.SegmentsInRow" },
                        {
                            propertyName: "type",
                            modelName: "@Type", defaultVal: "Omnidirectional", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            displayName: "Type", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarGenerator.Type", valuesArray: [
                                { value: "Omnidirectional", displayValue: "Omnidirectional", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Omnidirectional" },
                                { value: "Truncated", displayValue: "Truncated", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Truncated" },
                                { value: "Stacked", displayValue: "Stacked", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Stacked" },
                                { value: "StackedOmnidirectional", displayValue: "StackedOmnidirectional", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.StackedOmnidirectional" },
                                { value: "Limited", displayValue: "Limited", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Limited" },
                                { value: "Expanded", displayValue: "Expanded", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.Expanded" },
                                { value: "ExpandedStacked", displayValue: "ExpandedStacked", localizationId: "DevExpress.XtraPrinting.BarCode.DataBarType.ExpandedStacked" }
                            ]
                        }
                    ];
                    var matrixSize = {
                        propertyName: "matrixSize",
                        modelName: "@MatrixSize", defaultVal: "MatrixAuto", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        displayName: "Matrix Size", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixGenerator.MatrixSize", valuesArray: [
                            { value: "MatrixAuto", displayValue: "MatrixAuto", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.MatrixAuto" },
                            { value: "Matrix10x10", displayValue: "Matrix10x10", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix10x10" },
                            { value: "Matrix12x12", displayValue: "Matrix12x12", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix12x12" },
                            { value: "Matrix14x14", displayValue: "Matrix14x14", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix14x14" },
                            { value: "Matrix16x16", displayValue: "Matrix16x16", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix16x16" },
                            { value: "Matrix18x18", displayValue: "Matrix18x18", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix18x18" },
                            { value: "Matrix20x20", displayValue: "Matrix20x20", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix20x20" },
                            { value: "Matrix22x22", displayValue: "Matrix22x22", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix22x22" },
                            { value: "Matrix24x24", displayValue: "Matrix24x24", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix24x24" },
                            { value: "Matrix26x26", displayValue: "Matrix26x26", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix26x26" },
                            { value: "Matrix32x32", displayValue: "Matrix32x32", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix32x32" },
                            { value: "Matrix36x36", displayValue: "Matrix36x36", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix36x36" },
                            { value: "Matrix40x40", displayValue: "Matrix40x40", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix40x40" },
                            { value: "Matrix44x44", displayValue: "Matrix44x44", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix44x44" },
                            { value: "Matrix48x48", displayValue: "Matrix48x48", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix48x48" },
                            { value: "Matrix52x52", displayValue: "Matrix52x52", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix52x52" },
                            { value: "Matrix64x64", displayValue: "Matrix64x64", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix64x64" },
                            { value: "Matrix72x72", displayValue: "Matrix72x72", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix72x72" },
                            { value: "Matrix80x80", displayValue: "Matrix80x80", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix80x80" },
                            { value: "Matrix88x88", displayValue: "Matrix88x88", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix88x88" },
                            { value: "Matrix96x96", displayValue: "Matrix96x96", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix96x96" },
                            { value: "Matrix104x104", displayValue: "Matrix104x104", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix104x104" },
                            { value: "Matrix120x120", displayValue: "Matrix120x120", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix120x120" },
                            { value: "Matrix132x132", displayValue: "Matrix132x132", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix132x132" },
                            { value: "Matrix144x144", displayValue: "Matrix144x144", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix144x144" },
                            { value: "Matrix8x18", displayValue: "Matrix8x18", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix8x18" },
                            { value: "Matrix8x32", displayValue: "Matrix8x32", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix8x32" },
                            { value: "Matrix12x26", displayValue: "Matrix12x26", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix12x26" },
                            { value: "Matrix12x36", displayValue: "Matrix12x36", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix12x36" },
                            { value: "Matrix16x36", displayValue: "Matrix16x36", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix16x36" },
                            { value: "Matrix16x48", displayValue: "Matrix16x48", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix16x48" }
                        ]
                    };
                    var dataMatrixSerializationInfo = [
                        defaultCodeSerializationInfo,
                        matrixSize,
                        {
                            propertyName: "compactionMode",
                            modelName: "@CompactionMode", defaultVal: "ASCII", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            displayName: "Compaction Mode", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixGenerator.CompactionMode", valuesArray: [
                                { value: "ASCII", displayValue: "ASCII", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.ASCII" },
                                { value: "C40", displayValue: "C40", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.C40" },
                                { value: "Text", displayValue: "Text", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.Text" },
                                { value: "X12", displayValue: "X12", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.X12" },
                                { value: "Edifact", displayValue: "Edifact", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.Edifact" },
                                { value: "Binary", displayValue: "Binary", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.Binary" }
                            ]
                        }
                    ];
                    var humanReadableText = { propertyName: "humanReadableText", modelName: "@HumanReadableText", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, displayName: "Human-Readable Text", localizationId: "DevExpress.XtraPrinting.BarCode.DataMatrixGS1Generator.HumanReadableText", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    var dataMatrixGS1SerializationInfo = [
                        defaultCodeSerializationInfo,
                        matrixSize,
                        fnc1Substitute,
                        humanReadableText
                    ];
                    var EAN128SerializationInfo = [
                        defaultCodeSerializationInfo,
                        charset,
                        fnc1Substitute,
                        humanReadableText
                    ];
                    var Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo = [defaultCodeSerializationInfo, calcCheckSum, wideNarrowRation];
                    var PDF417SerializationInfo = [
                        defaultCodeSerializationInfo,
                        { propertyName: "columns", modelName: "@Columns", defaultVal: 1, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Columns", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.Columns" },
                        {
                            propertyName: "compactionMode1",
                            modelName: "@CompactionMode", defaultVal: "Text", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Compaction Mode", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.CompactionMode",
                            valuesArray: [
                                { value: "Binary", displayValue: "Binary", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417CompactionMode.Binary" },
                                { value: "Text", displayValue: "Text", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417CompactionMode.Text" }
                            ]
                        },
                        {
                            propertyName: "errorCorrectionLevel",
                            modelName: "@ErrorCorrectionLevel", defaultVal: "Level2", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Error Correction Level", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.ErrorCorrectionLevel",
                            valuesArray: [
                                { value: "Level0", displayValue: "Level0", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level0" },
                                { value: "Level1", displayValue: "Level1", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level1" },
                                { value: "Level2", displayValue: "Level2", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level2" },
                                { value: "Level3", displayValue: "Level3", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level3" },
                                { value: "Level4", displayValue: "Level4", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level4" },
                                { value: "Level5", displayValue: "Level5", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level5" },
                                { value: "Level6", displayValue: "Level6", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level6" },
                                { value: "Level7", displayValue: "Level7", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level7" },
                                { value: "Level8", displayValue: "Level8", localizationId: "DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level8" }
                            ]
                        },
                        { propertyName: "rows", modelName: "@Rows", defaultVal: 0, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Rows", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.Rows" },
                        { propertyName: "yToXRatio", modelName: "@YToXRatio", defaultVal: 3, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Y to X Ratio", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.YToXRatio" },
                        { propertyName: "truncateSymbol", modelName: "@TruncateSymbol", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, displayName: "Truncate Symbol", localizationId: "DevExpress.XtraPrinting.BarCode.PDF417Generator.TruncateSymbol" }
                    ];
                    var QRCodeSerializationInfo = [
                        defaultCodeSerializationInfo,
                        {
                            propertyName: "compactionMode2",
                            modelName: "@CompactionMode", defaultVal: "AlphaNumeric", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Compaction Mode", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeGenerator.CompactionMode",
                            valuesArray: [
                                { value: "Numeric", displayValue: "Numeric", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeCompactionMode.Numeric" },
                                { value: "AlphaNumeric", displayValue: "AlphaNumeric", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeCompactionMode.AlphaNumeric" },
                                { value: "Byte", displayValue: "Byte", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeCompactionMode.Byte" }
                            ]
                        },
                        {
                            propertyName: "errorCorrectionLevel1",
                            modelName: "@ErrorCorrectionLevel", defaultVal: "L", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Error Correction Level", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeGenerator.ErrorCorrectionLevel",
                            valuesArray: [
                                { value: "M", displayValue: "M", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.M" },
                                { value: "L", displayValue: "L", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.L" },
                                { value: "H", displayValue: "H", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.H" },
                                { value: "Q", displayValue: "Q", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.Q" }
                            ]
                        },
                        {
                            propertyName: "logo",
                            modelName: "@Logo",
                            editor: { header: "dxrd-image-loadfile", editorType: DevExpress.Analytics.Widgets.Editor },
                            displayName: "Logo",
                            localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeGenerator.Logo",
                            from: function (val) { return ko.observable(DevExpress.Reporting.ImageSource.parse(val)); },
                            toJsonObject: DevExpress.Reporting.ImageSource.toString,
                            defaultVal: null
                        },
                        {
                            propertyName: "version",
                            modelName: "@Version", defaultVal: "Version1", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Version", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeGenerator.Version",
                            valuesArray: [
                                { value: "AutoVersion", displayValue: "AutoVersion", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.AutoVersion" },
                                { value: "Version1", displayValue: "Version1", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version1" },
                                { value: "Version2", displayValue: "Version2", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version2" },
                                { value: "Version3", displayValue: "Version3", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version3" },
                                { value: "Version4", displayValue: "Version4", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version4" },
                                { value: "Version5", displayValue: "Version5", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version5" },
                                { value: "Version6", displayValue: "Version6", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version6" },
                                { value: "Version7", displayValue: "Version7", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version7" },
                                { value: "Version8", displayValue: "Version8", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version8" },
                                { value: "Version9", displayValue: "Version9", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version9" },
                                { value: "Version10", displayValue: "Version10", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version10" },
                                { value: "Version11", displayValue: "Version11", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version11" },
                                { value: "Version12", displayValue: "Version12", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version12" },
                                { value: "Version13", displayValue: "Version13", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version13" },
                                { value: "Version14", displayValue: "Version14", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version14" },
                                { value: "Version15", displayValue: "Version15", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version15" },
                                { value: "Version16", displayValue: "Version16", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version16" },
                                { value: "Version17", displayValue: "Version17", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version17" },
                                { value: "Version18", displayValue: "Version18", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version18" },
                                { value: "Version19", displayValue: "Version19", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version19" },
                                { value: "Version20", displayValue: "Version20", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version20" },
                                { value: "Version21", displayValue: "Version21", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version21" },
                                { value: "Version22", displayValue: "Version22", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version22" },
                                { value: "Version23", displayValue: "Version23", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version23" },
                                { value: "Version24", displayValue: "Version24", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version24" },
                                { value: "Version25", displayValue: "Version25", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version25" },
                                { value: "Version26", displayValue: "Version26", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version26" },
                                { value: "Version27", displayValue: "Version27", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version27" },
                                { value: "Version28", displayValue: "Version28", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version28" },
                                { value: "Version29", displayValue: "Version29", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version29" },
                                { value: "Version30", displayValue: "Version30", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version30" },
                                { value: "Version31", displayValue: "Version31", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version31" },
                                { value: "Version32", displayValue: "Version32", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version32" },
                                { value: "Version33", displayValue: "Version33", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version33" },
                                { value: "Version34", displayValue: "Version34", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version34" },
                                { value: "Version35", displayValue: "Version35", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version35" },
                                { value: "Version36", displayValue: "Version36", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version36" },
                                { value: "Version37", displayValue: "Version37", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version37" },
                                { value: "Version38", displayValue: "Version38", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version38" },
                                { value: "Version39", displayValue: "Version39", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version39" },
                                { value: "Version40", displayValue: "Version40", localizationId: "DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version40" },
                            ]
                        }
                    ];
                    Metadata.autoModule = { propertyName: "autoModule", modelName: "@AutoModule", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, displayName: "Auto-Module", localizationId: "DevExpress.XtraReports.UI.XRBarCode.AutoModule" };
                    Metadata.barCodeOrientation = {
                        propertyName: "barCodeOrientation",
                        modelName: "@BarCodeOrientation", defaultVal: "Normal",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        displayName: "Orientation", localizationId: "DevExpress.XtraReports.UI.XRBarCode.BarCodeOrientation", valuesArray: [
                            { value: "Normal", displayValue: "Normal", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeOrientation.Normal" },
                            { value: "UpsideDown", displayValue: "UpsideDown", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeOrientation.UpsideDown" },
                            { value: "RotateLeft", displayValue: "RotateLeft", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeOrientation.RotateLeft" },
                            { value: "RotateRight", displayValue: "RotateRight", localizationId: "DevExpress.XtraPrinting.BarCode.BarCodeOrientation.RotateRight" }
                        ]
                    };
                    Metadata.moduleInfo = { propertyName: "module", modelName: "@Module", defaultVal: 2, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Module", localizationId: "DevExpress.XtraReports.UI.XRBarCode.Module" };
                    Metadata.showText = { propertyName: "showText", modelName: "@ShowText", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, displayName: "Show Text", localizationId: "DevExpress.XtraReports.UI.XRBarCode.ShowText" };
                    Metadata.symbology = { propertyName: "symbology", modelName: "Symbology" };
                    Metadata.barcodeFake = { propertyName: "barcodeFake", valuesArray: XRBarCodeViewModel.barCodesTypes, editor: Widgets.editorTemplates.contentByType, displayName: "Symbology", localizationId: "DevExpress.XtraReports.UI.XRBarCode.Symbology" };
                    Metadata.alignment = {
                        propertyName: "alignment",
                        modelName: "@Alignment", displayName: "Alignment", localizationId: "DevExpress.XtraReports.UI.XRBarCode.Alignment", defaultVal: "TopLeft",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: Metadata.textAlignmentValues
                    };
                    Metadata.barCodesMap = {
                        "Codabar": codabarSerializationInfo,
                        "Code11": [defaultCodeSerializationInfo],
                        "Code128": code128SerializationInfo,
                        "Code39": code39SerializationInfo,
                        "Code39Extended": code39SerializationInfo,
                        "Code93": code93SerializationInfo,
                        "Code93Extended": code93SerializationInfo,
                        "CodeMSI": codeMSISerializationInfo,
                        "DataBar": dataBarSerializationInfo,
                        "DataMatrix": dataMatrixSerializationInfo,
                        "DataMatrixGS1": dataMatrixGS1SerializationInfo,
                        "EAN128": EAN128SerializationInfo,
                        "EAN13": [defaultCodeSerializationInfo],
                        "EAN8": [defaultCodeSerializationInfo],
                        "Industrial2of5": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                        "IntelligentMail": [defaultCodeSerializationInfo],
                        "IntelligentMailPackage": [defaultCodeSerializationInfo, fnc1Substitute],
                        "Interleaved2of5": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                        "ITF14": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                        "Matrix2of5": Industrial2of5Interleaved2of5ITF14Matrix2of5SerializationInfo,
                        "PDF417": PDF417SerializationInfo,
                        "PostNet": [defaultCodeSerializationInfo],
                        "QRCode": QRCodeSerializationInfo,
                        "UPCA": [defaultCodeSerializationInfo],
                        "UPCE0": [defaultCodeSerializationInfo],
                        "UPCE1": [defaultCodeSerializationInfo],
                        "UPCSupplemental2": [defaultCodeSerializationInfo],
                        "UPCSupplemental5": [defaultCodeSerializationInfo]
                    };
                    Metadata.barcodeSerializationsInfo = [
                        Metadata.alignment, Metadata.autoModule, Metadata.barCodeOrientation, Metadata.moduleInfo, Metadata.showText, Metadata.symbology, Metadata.text, Metadata.textFormatString, Metadata.keepTogether, Metadata.anchorVertical, Metadata.anchorHorizontal,
                        $.extend({}, Metadata.textAlignment, { defaultVal: "BottomLeft" }),
                        Metadata.textControlScripts, Metadata.barcodeFake,
                        Data.Metadata.dataBindings(["Bookmark", "NavigateUrl", "Tag", "Text"]),
                    ].concat(Internal.createSinglePopularBindingInfos("Text"), Metadata.sizeLocation, Metadata.commonControlProperties, Metadata.fontGroup, Metadata.navigationGroup, Metadata.processGroup);
                    Metadata.popularPropertiesBarCode = ["barcodeFake", "module", "autoModule", "barCodeOrientation", "text", "popularDataBinding", "popularExpression", "textFormatString", "bookmark", "bookmarkParent", "showText"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRCharacterComb = (function (_super) {
                    __extends(XRCharacterComb, _super);
                    function XRCharacterComb(control, parent, serializer) {
                        var _this = _super.call(this, control, parent, serializer) || this;
                        var _originalCellWidth = _this.cellWidth;
                        var _originalCellHeight = _this.cellHeight;
                        _this._disposables.push(_this.cellWidth = _this._createCellSideFromOriginalSide(_originalCellWidth, false));
                        _this._disposables.push(_this.cellHeight = _this._createCellSideFromOriginalSide(_originalCellHeight, true));
                        var fontModel = new DevExpress.Analytics.Widgets.Internal.FontModel(_this.font);
                        var borderWidth = ko.computed(function () {
                            if (_this["borders"]() && _this["borders"]() !== "None") {
                                return _this["borderWidth"]();
                            }
                            else {
                                return 0;
                            }
                        });
                        _this._disposables.push(borderWidth);
                        var textSizeHelper = new Internal.TextElementSizeHelper();
                        _this.autoCellSide = ko.observable(_this.cellHeight());
                        _this._disposables.push(ko.computed(function () {
                            if (_this.sizeMode() !== "Custom") {
                                var characterHeight = textSizeHelper.getTextContainerSize("a", {
                                    "font-size": fontModel.size() + fontModel.unit(),
                                    "font-family": fontModel.family(),
                                    "height": "auto",
                                    "width": "auto"
                                }, 0).height;
                                var side = characterHeight * 1.5 + 2 * borderWidth();
                                if (_this.parentModel()) {
                                    side = DevExpress.Analytics.Internal.pixelToUnits(side, _this.parentModel().root["measureUnit"](), 1);
                                }
                                _this.autoCellSide(side);
                            }
                        }));
                        return _this;
                    }
                    XRCharacterComb.prototype.isPropertyDisabled = function (name) {
                        if (name === "cellWidth") {
                            return this.sizeMode() === "AutoSize" || this.sizeMode() === "AutoWidth";
                        }
                        if (name === "cellHeight") {
                            return this.sizeMode() === "AutoSize" || this.sizeMode() === "AutoHeight";
                        }
                        return _super.prototype.isPropertyDisabled.call(this, name);
                    };
                    XRCharacterComb.prototype._createCellSideFromOriginalSide = function (originalCellSide, isHeight) {
                        var _this = this;
                        return ko.pureComputed({
                            read: function () {
                                switch (_this.sizeMode()) {
                                    case "AutoSize":
                                        return null;
                                    case "AutoWidth":
                                        return isHeight ? originalCellSide() : null;
                                        ;
                                    case "AutoHeight":
                                        return !isHeight ? originalCellSide() : null;
                                    case "Custom":
                                        return originalCellSide();
                                }
                            },
                            write: function (val) { originalCellSide(val); }
                        });
                    };
                    XRCharacterComb.prototype.roundSize = function () {
                        this.size.width(Math.ceil(this.size.width()));
                        this.size.height(Math.ceil(this.size.height()));
                    };
                    XRCharacterComb.unitProperties = ["cellWidth", "cellHeight", "verticalSpacing", "horizontalSpacing"];
                    return XRCharacterComb;
                }(Controls.XRControlViewModel));
                Controls.XRCharacterComb = XRCharacterComb;
                var XRCharacterCombSurface = (function (_super) {
                    __extends(XRCharacterCombSurface, _super);
                    function XRCharacterCombSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.cells = ko.observableArray([]);
                        _this._disposables.push(_this.borderWidth = ko.computed(function () {
                            return control["borderWidth"]() === undefined ? 1 : control["borderWidth"]();
                        }));
                        _this.rtl = function () { return control.rtl(); };
                        _this.borders = control["borders"];
                        _this.template = "dxrd-charactercomb";
                        _this.contenttemplate = "dxrd-charactercomb-content";
                        _this._disposables.push(control.textAlignment.subscribe(function (newVal) {
                            _this._updateCellsText(newVal);
                        }));
                        _this._disposables.push(_this.verticalSpacing = ko.computed(function () {
                            return DevExpress.Analytics.Internal.unitsToPixel(control.verticalSpacing(), context.measureUnit(), 1);
                        }));
                        _this._disposables.push(_this.horizontalSpacing = ko.computed(function () {
                            return DevExpress.Analytics.Internal.unitsToPixel(control.horizontalSpacing(), context.measureUnit(), 1);
                        }));
                        _this.cellSize = {
                            width: ko.computed(function () {
                                return DevExpress.Analytics.Internal.unitsToPixel(control.cellWidth() || control.autoCellSide(), context.measureUnit(), 1);
                            }),
                            height: ko.computed(function () {
                                return DevExpress.Analytics.Internal.unitsToPixel(control.cellHeight() || control.autoCellSide(), context.measureUnit(), 1);
                            }),
                            isPropertyDisabled: function (name) { return false; }
                        };
                        _this._disposables.push(_this.cellSize.width);
                        _this._disposables.push(_this.cellSize.height);
                        _this._disposables.push(_this.fullCellHeight = ko.computed(function () {
                            var _verticalSpacing = _this.verticalSpacing();
                            var fullCellHeight = _this.cellSize.height();
                            if (!!_this.verticalSpacing()) {
                                fullCellHeight += _this.verticalSpacing();
                            }
                            return fullCellHeight - _this._getBorderWidthBySpacing(_verticalSpacing);
                        }));
                        _this._disposables.push(_this.fullCellWidth = ko.computed(function () {
                            var _horizontalSpacing = _this.horizontalSpacing.peek();
                            var fullCellWidth = _this.cellSize.width();
                            if (!!_this.horizontalSpacing()) {
                                fullCellWidth += _this.horizontalSpacing();
                            }
                            return fullCellWidth - _this._getBorderWidthBySpacing(_horizontalSpacing);
                        }));
                        _this._disposables.push(_this.vertical = ko.computed(function () {
                            var _borderWidth = _this._getBorderWidthBySpacing(_this.verticalSpacing()) * context.zoom();
                            var fullCellHeight = _this.fullCellHeight() * context.zoom();
                            var vertical = Math.floor(_this._roundingTwoDecimals((_this.rect().height - _borderWidth) / fullCellHeight));
                            if (_this._roundingTwoDecimals(_this.rect().height - (vertical * fullCellHeight + _borderWidth)) >= _this._roundingTwoDecimals(_this.cellSize.height() * context.zoom() - _borderWidth)) {
                                vertical += 1;
                            }
                            return vertical;
                        }));
                        _this._disposables.push(_this.horizontal = ko.computed(function () {
                            var _borderWidth = _this._getBorderWidthBySpacing(_this.horizontalSpacing()) * context.zoom();
                            var fullCellWidth = _this.fullCellWidth() * context.zoom();
                            var horizontal = Math.floor(_this._roundingTwoDecimals((_this.rect().width - _borderWidth) / fullCellWidth));
                            if (_this._roundingTwoDecimals(_this.rect().width - (horizontal * fullCellWidth + _borderWidth)) >= _this._roundingTwoDecimals(_this.cellSize.width() * context.zoom() - _borderWidth)) {
                                horizontal += 1;
                            }
                            return horizontal;
                        }));
                        _this._disposables.push(_this.topEmptySpace = ko.computed(function () {
                            var _verticalSpacing = _this.verticalSpacing();
                            var _borderWidth = _this._getBorderWidthBySpacing(_verticalSpacing);
                            var _emptySpace = _this.rect().height / context.zoom() - (_this.fullCellHeight() * _this.vertical() - _verticalSpacing + _borderWidth);
                            return Internal.CharacterCombHelper.distributionEmptySpace(_emptySpace, true, _this.getControlModel().textAlignment());
                        }));
                        _this._disposables.push(_this.leftEmptySpace = ko.computed(function () {
                            var _horizontalSpacing = _this.horizontalSpacing();
                            var _borderWidth = _this._getBorderWidthBySpacing(_horizontalSpacing);
                            var _emptySpace = _this.rect().width / context.zoom() - (_this.fullCellWidth() * _this.horizontal() - _horizontalSpacing + _borderWidth);
                            return Internal.CharacterCombHelper.distributionEmptySpace(_emptySpace, false, _this.getControlModel().textAlignment());
                        }));
                        _this._disposables.push(_this.css = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.foreColorCss(), _this.cssCalculator.backGroundCss());
                        }));
                        _this._disposables.push(_this.borderCss = ko.pureComputed(function () {
                            return _this.cssCalculator.borderCss();
                        }));
                        _this._disposables.push(ko.computed(function () {
                            _this.updateArray(_this.vertical() * _this.horizontal());
                            _this._updateCellsText(control.textAlignment.peek());
                        }));
                        _this._disposables.push(control.text.subscribe(function (newVal) {
                            _this._updateCellsText(control.textAlignment.peek());
                        }));
                        return _this;
                    }
                    XRCharacterCombSurface.prototype._createCell = function (text, position) {
                        var _this = this;
                        return {
                            text: ko.observable(text),
                            left: ko.computed(function () {
                                var _horizontalSpacing = _this.horizontalSpacing();
                                var borderWidth = _this._getBorderWidthBySpacing(_horizontalSpacing);
                                var line = Math.floor((position) / _this.horizontal());
                                var column = position - (_this.horizontal() * line);
                                if (_this.rtl()) {
                                    column = (_this.horizontal() * (line + 1)) - (position + 1);
                                }
                                return column * (_this.cellSize.width() + _horizontalSpacing - borderWidth) + _this.leftEmptySpace();
                            }),
                            top: ko.computed(function () {
                                var _verticalSpacing = _this.verticalSpacing();
                                var borderWidth = _this._getBorderWidthBySpacing(_verticalSpacing);
                                var line = Math.floor((position) / _this.horizontal());
                                return line * (_this.cellSize.height() + _verticalSpacing - borderWidth) + _this.topEmptySpace();
                            }),
                            size: this.cellSize,
                            isEmpty: false
                        };
                    };
                    XRCharacterCombSurface.prototype._updateCellsText = function (textAlignment) {
                        var _this = this;
                        var alignments = Internal.CharacterCombHelper.getAlignments(textAlignment);
                        var texts = Internal.CharacterCombHelper.getLines(this.displayText(), this.horizontal.peek(), this._control.multiline(), this._control["wordWrap"] && this._control["wordWrap"]());
                        Internal.CharacterCombHelper.setText(texts, this.cells.peek(), function (texts, position) {
                            return Internal.CharacterCombHelper.getTextOffset(texts, position, alignments.vertical, alignments.horizontal, _this.vertical.peek(), _this.horizontal.peek());
                        });
                    };
                    XRCharacterCombSurface.prototype._roundingTwoDecimals = function (val) {
                        return Math.round(val * 100) / 100;
                    };
                    XRCharacterCombSurface.prototype._getBorderWidthBySpacing = function (spacing) {
                        return (!spacing && this.borders() && this.borders() !== "None") ? this.borderWidth() : 0;
                    };
                    XRCharacterCombSurface.prototype._applyBounds = function (newRect, newHorizontal, newVertical, multiline, wordwrap) {
                        if (newVertical <= this.vertical()) {
                            var notEmptyCells = this.cells().filter(function (cell) { return !cell.isEmpty; });
                            var cellLefts = notEmptyCells.map(function (cell) { return cell.left(); });
                            newRect.top += notEmptyCells[0].top();
                            if (newHorizontal <= this.horizontal())
                                newRect.left += Math.min.apply(Math, cellLefts);
                        }
                        else if (newHorizontal <= this.horizontal()) {
                            var newCells = [];
                            this.updateArray(newVertical * newHorizontal, newCells);
                            var alignments = Internal.CharacterCombHelper.getAlignments(this.getControlModel()["textAlignment"]());
                            var texts = Internal.CharacterCombHelper.getLines(this.displayText(), newHorizontal, multiline, wordwrap);
                            Internal.CharacterCombHelper.setText(texts, newCells, function (texts, position) {
                                return Internal.CharacterCombHelper.getTextOffset(texts, position, alignments.vertical, alignments.horizontal, newVertical, newHorizontal);
                            });
                            var newCellsLefts = newCells.filter(function (cell) { return !cell.isEmpty; }).map(function (cell) { return cell.left(); });
                            newRect.left += Math.min.apply(Math, newCellsLefts);
                        }
                        newRect.height = (this.cellSize.height() + this.verticalSpacing()) * newVertical - this.verticalSpacing() - DevExpress.Analytics.Internal.unitsToPixel(this._getBorderWidthBySpacing(this.verticalSpacing()) * (newVertical - 1), this._context.measureUnit(), 1);
                        newRect.width = (this.cellSize.width() + this.horizontalSpacing()) * newHorizontal - this.horizontalSpacing() - DevExpress.Analytics.Internal.unitsToPixel(this._getBorderWidthBySpacing(this.horizontalSpacing()) * (newHorizontal - 1), this._context.measureUnit(), 1);
                    };
                    XRCharacterCombSurface.prototype.updateArray = function (cellsCount, array) {
                        var cells = array || this.cells.peek();
                        if (cells.length > cellsCount) {
                            cells.splice(cellsCount, cells.length - cellsCount);
                        }
                        else if (cells.length < cellsCount) {
                            for (var i = cells.length; i < cellsCount; i++) {
                                cells.push(this._createCell("", i));
                            }
                        }
                        if (!array)
                            this.cells.valueHasMutated();
                    };
                    XRCharacterCombSurface.prototype.fitBoundsToText = function () {
                        var _multiline = this._control["multiline"] && this._control["multiline"]();
                        var _wordwrap = this._control["wordWrap"] && this._control["wordWrap"]();
                        var zoom = this._context.zoom();
                        var oldRect = this.rect();
                        var newRect = {};
                        Object.keys(oldRect).forEach(function (propertyName) {
                            newRect[propertyName] = oldRect[propertyName] / zoom;
                        });
                        var newHorizVert = Internal.CharacterCombHelper.getHorizontalVerticalByText(_multiline, _wordwrap, this.displayText(), this.horizontal() || 1, this.vertical() || 1);
                        this._applyBounds(newRect, newHorizVert.horizontal, newHorizVert.vertical, _multiline, _wordwrap);
                        if (newRect.top !== oldRect.top || newRect.height !== oldRect.height || newRect.left !== oldRect.left || newRect.width !== oldRect.width) {
                            this.rect({ top: Math.round(newRect.top * zoom), height: newRect.height * zoom, left: Math.round(newRect.left * zoom), width: newRect.width * zoom });
                            this.getControlModel().roundSize();
                        }
                    };
                    XRCharacterCombSurface.prototype.getText = function () {
                        return this.displayText();
                    };
                    return XRCharacterCombSurface;
                }(Controls.XRControlSurface));
                Controls.XRCharacterCombSurface = XRCharacterCombSurface;
                (function (Metadata) {
                    Metadata.cellVerticalSpacing = { propertyName: "verticalSpacing", modelName: "@CellVerticalSpacing", defaultVal: 0, displayName: "Cell Vertical Spacing", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellVerticalSpacing", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    Metadata.cellHorizontalSpacing = { propertyName: "horizontalSpacing", modelName: "@CellHorizontalSpacing", defaultVal: 0, displayName: "Cell Horizontal Spacing", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellHorizontalSpacing", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    Metadata.cellWidth = {
                        propertyName: "cellWidth", modelName: "@CellWidth", defaultVal: 25, displayName: "Cell Width", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellWidth", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, editorOptions: { placeholder: ko.observable(DevExpress.Analytics.Utils.getLocalization("(Auto)", "ASPxReportsStringId.ReportDesigner_PropertyGrid_AutoValueString")) }
                    };
                    Metadata.cellHeight = {
                        propertyName: "cellHeight", modelName: "@CellHeight", defaultVal: 25, displayName: "Cell Height", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellHeight", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, editorOptions: { placeholder: ko.observable(DevExpress.Analytics.Utils.getLocalization("(Auto)", "ASPxReportsStringId.ReportDesigner_PropertyGrid_AutoValueString")) }
                    };
                    Metadata.cellSizeMode = {
                        propertyName: "sizeMode", modelName: "@CellSizeMode", displayName: "Cell Size Mode", localizationId: "DevExpress.XtraReports.UI.XRCharacterComb.CellSizeMode", defaultVal: "AutoSize", editor: Widgets.editorTemplates.comboboxUndo,
                        valuesArray: [
                            { value: "Custom", displayValue: "Custom", localizationId: "DevExpress.XtraPrinting.SizeMode.Custom" },
                            { value: "AutoWidth", displayValue: "Auto Width", localizationId: "DevExpress.XtraPrinting.SizeMode.AutoWidth" },
                            { value: "AutoHeight", displayValue: "Auto Height", localizationId: "DevExpress.XtraPrinting.SizeMode.AutoHeight" },
                            { value: "AutoSize", displayValue: "Auto Size", localizationId: "DevExpress.XtraPrinting.SizeMode.AutoSize" }
                        ]
                    };
                    var wordWrap = { propertyName: "wordWrap", modelName: "@WordWrap", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, displayName: "Word Wrap", localizationId: "DevExpress.XtraReports.UI.XRControl.WordWrap", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.characterCombFont = { propertyName: "font", modelName: "@Font", displayName: "Font", localizationId: "DevExpress.XtraReports.UI.XRControl.Font", editor: Widgets.editorTemplates.fontUndo };
                    Metadata.characterCombBorders = { propertyName: "borders", modelName: "@Borders", displayName: "Borders", localizationId: "DevExpress.XtraReports.UI.XRControl.Borders", defaultVal: "All", editor: DevExpress.Analytics.Widgets.editorTemplates.borders };
                    Metadata.characterCombBorderDashStyle = $.extend({}, Metadata.borderDashStyle, { valuesArray: Metadata.borderDashStyleValues });
                    Metadata.characterCombSerializationsInfo = [
                        Metadata.styleName, Metadata.evenStyleName, Metadata.oddStyleName, Metadata.stylePriority, Metadata.canPublish, Metadata.backColor, Metadata.autoWidth,
                        Metadata.formattingRuleLinks, Metadata.cellSizeMode, wordWrap, Metadata.cellWidth, Metadata.cellHeight, Metadata.cellVerticalSpacing, Metadata.cellHorizontalSpacing, Data.Metadata.dataBindings(["Text"]),
                        Metadata.textAlignment, Metadata.text, Metadata.textFormatString, Metadata.textArea, Metadata.nullValueText, Metadata.keepTogetherDefaultValueFalse, Metadata.summary, Metadata.multiline, wordWrap,
                        Metadata.xlsxFormatString, Metadata.rtl, Metadata.characterCombBorders, Metadata.borderWidth, Metadata.characterCombBorderDashStyle, Metadata.borderColor, Metadata.characterCombFont, Metadata.foreColor, Metadata.editOptions, Metadata.interactiveSorting
                    ].concat(Internal.createSinglePopularBindingInfos("Text"), Metadata.baseControlProperties, Metadata.navigationGroup, Metadata.canGrowShrinkGroup, Metadata.processGroup, Metadata.sizeLocation);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRChartViewModel = (function (_super) {
                    __extends(XRChartViewModel, _super);
                    function XRChartViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        ["seriesDataMember", "dataMember"].forEach(function (val) {
                            _this[val] = ko.computed({
                                read: function () {
                                    return _this.chart.dataContainer[val]();
                                }, write: function (newVal) {
                                    _this.chart.dataContainer[val](newVal);
                                }
                            });
                        });
                        ["appearanceName", "paletteName"].forEach(function (val) {
                            _this[val] = ko.computed({
                                read: function () {
                                    return _this.chart[val]();
                                }, write: function (newVal) {
                                    _this.chart[val](newVal);
                                }
                            });
                        });
                        _this.pivotGridDataSourceOptions = ko.computed(function () {
                            return _this.chart.dataContainer.pivotGridDataSourceOptions;
                        });
                        _this.isPivotGridDataSource = ko.observable(_this.dataSource() instanceof XRPivotGridViewModel);
                        _this.isPivotGridDataSource.subscribe(function (newVal) {
                            XRChartViewModel.setDataMembers(_this.chart, newVal);
                        });
                        _this.realDataSource = ko.computed(function () {
                            _this.isPivotGridDataSource(_this.dataSource() instanceof XRPivotGridViewModel);
                            var rootSource = _this.root && _this.root["dataSource"] && _this.root["dataSource"]();
                            return _this.dataSource() || rootSource;
                        });
                        _this._disposables.push(ko.computed(function () {
                            var dataSources = _this.root && _this.root.dsHelperProvider && _this.root.dsHelperProvider() && _this.root.dsHelperProvider().usedDataSources().map(function (ds) { return ds.data; });
                            if (dataSources && !_this.isPivotGridDataSource() && dataSources.indexOf(_this.dataSource()) === -1)
                                _this.dataSource(null);
                        }));
                        _this.chartModel = _this._createChartModel();
                        _this.isPivotGridDataSource.subscribe(function (newVal) {
                            XRChartViewModel.setDataMembers(_this.chart, newVal);
                        });
                        return _this;
                    }
                    XRChartViewModel.assignValueDataMembers = function (chart, str) {
                        var valueDataMembers = chart.dataContainer.seriesTemplate.valueDataMembers();
                        var assign = function (array) {
                            array.forEach(function (property) { valueDataMembers[property](str); });
                        };
                        if (valueDataMembers instanceof Chart.Internal.DataMembers.CommonValueDataMembers) {
                            assign(["value"]);
                        }
                        else if (valueDataMembers instanceof Chart.Internal.DataMembers.ValueWeightDataMembers) {
                            assign(["value", "weight"]);
                        }
                        else if (valueDataMembers instanceof Chart.Internal.DataMembers.Value1Value2DataMembers) {
                            assign(["value1", "value2"]);
                        }
                        else if (valueDataMembers instanceof Chart.Internal.DataMembers.StockValueDataMembers) {
                            assign(["open", "close", "hight", "low"]);
                        }
                    };
                    XRChartViewModel.setDataMembers = function (chart, isPivotGrid) {
                        if (isPivotGrid) {
                            XRChartViewModel.assignValueDataMembers(chart, "Values");
                            chart.dataContainer.seriesTemplate.argumentDataMember("Arguments");
                            chart.dataContainer.seriesDataMember("Series");
                        }
                        else {
                            XRChartViewModel.assignValueDataMembers(chart, null);
                            chart.dataContainer.seriesTemplate.argumentDataMember(null);
                            chart.dataContainer.seriesDataMember(null);
                        }
                    };
                    XRChartViewModel.prototype._createChartModel = function () {
                        var _this = this;
                        var model = new Chart.Internal.ChartControlViewModel({
                            chart: this.chart,
                            dataSource: this.dataSource
                        });
                        model.isSeriesPropertyDisabled = function (propertyName) {
                            if (!_this.realDataSource() || (_this.realDataSource() instanceof XRPivotGridViewModel)) {
                                return propertyName === "argumentDataMember" || propertyName === "valueDataMembers" || propertyName === "colorDataMember";
                            }
                        };
                        model.isSeriesTemplatePropertyDisabled = function (propertyName) {
                            if (!_this.realDataSource() || (_this.realDataSource() instanceof XRPivotGridViewModel && model.chart.dataContainer.pivotGridDataSourceOptions.autoBindingSettingsEnabled())) {
                                return propertyName === "argumentDataMember" || propertyName === "valueDataMembers" || propertyName === "valueScaleType" || propertyName === "argumentScaleType";
                            }
                        };
                        model.getPath = function (propertyName) {
                            if (_this.realDataSource() instanceof XRPivotGridViewModel || propertyName === "dataMember")
                                return _this.getPath(propertyName);
                            if (propertyName === "seriesDataMember") {
                                return DevExpress.Analytics.Internal.getFullPath(_this.getPath("dataMember"), model.dataMember());
                            }
                        };
                        model.isPropertyDisabled = function (propertyName) {
                            return _this.isPropertyDisabled(propertyName);
                        };
                        return model;
                    };
                    XRChartViewModel.prototype.isPropertyDisabled = function (name) {
                        if (!this.realDataSource() || (this.realDataSource() instanceof XRPivotGridViewModel && this.pivotGridDataSourceOptions()["autoBindingSettingsEnabled"]())) {
                            return name === "seriesDataMember" || name === "dataMember";
                        }
                        else if (!this.realDataSource() || this.realDataSource() instanceof XRPivotGridViewModel) {
                            return name === "dataMember";
                        }
                        return _super.prototype.isPropertyDisabled.call(this, name);
                    };
                    XRChartViewModel.prototype.getPath = function (propertyName) {
                        if (this.dataSource() instanceof XRPivotGridViewModel) {
                            return ["PivotGrid", propertyName].join('.');
                        }
                        var dsHelperProvider = this.dsHelperProvider();
                        var dataSourceName = dsHelperProvider && dsHelperProvider.getDataSourcePath(this.realDataSource());
                        if (propertyName === "seriesDataMember") {
                            return DevExpress.Analytics.Internal.getFullPath(dataSourceName, this.dataMember());
                        }
                        else if (propertyName === "dataMember") {
                            return dataSourceName;
                        }
                    };
                    return XRChartViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRChartViewModel = XRChartViewModel;
                var XRChartSurface = (function (_super) {
                    __extends(XRChartSurface, _super);
                    function XRChartSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.designTime = ko.observable(false);
                        _this.isLoading = ko.observable(false);
                        _this.imageSrc = ko.observable("");
                        _this.template = "dxrd-shape";
                        _this.contenttemplate = "dxrd-shape-content";
                        _this.selectiontemplate = "dxrd-chart-selection";
                        _this._disposables.push(ko.computed(function () {
                            if (!_this.designTime()) {
                                var _self = _this;
                                if (Utils.HandlerUri) {
                                    _self.isLoading(true);
                                    Internal.ReportRenderingService.getChartImage(_this).done(function (result) {
                                        _self.isLoading(false);
                                        _self.imageSrc("data:image/x;base64," + result.Image);
                                    }).fail(function (jqXHR) {
                                        _self.isLoading(false);
                                        DevExpress.Analytics.Internal.NotifyAboutWarning("Impossible to get chart image.");
                                    });
                                }
                            }
                        }));
                        return _this;
                    }
                    XRChartSurface.prototype.runDesignerButtonText = function () {
                        return DevExpress.Analytics.Utils.getLocalization('Run Designer', 'ReportStringId.Verb_RunDesigner');
                    };
                    return XRChartSurface;
                }(Controls.XRControlSurface));
                Controls.XRChartSurface = XRChartSurface;
                (function (Metadata) {
                    Metadata.chart = { propertyName: "chart", modelName: "Chart", from: Chart.Internal.chart.from, toJsonObject: Chart.Internal.chart.toJsonObject };
                    Metadata.xrChartSerializationInfo = [Chart.Internal.appearanceName, Chart.Internal.paletteName, Metadata.chart, Metadata.stylePriority, Chart.Internal.chartDataSource, Metadata.imageType, Metadata.chartScripts,
                        { propertyName: "dataMember", displayName: "Data Member", localizationId: "DevExpress.XtraReports.UI.XRChart.DataMember", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.dataMember }
                    ].concat(Metadata.baseControlProperties, Metadata.sizeLocation, Metadata.bordersProperties);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRCheckBoxViewModel = (function (_super) {
                    __extends(XRCheckBoxViewModel, _super);
                    function XRCheckBoxViewModel(control, parent, serializer) {
                        var _this = _super.call(this, control, parent, serializer) || this;
                        var lock = new Internal.Locker().lock;
                        _this._disposables.push(_this.checkState.subscribe(function (val) {
                            lock(function () {
                                if (val === "Unchecked") {
                                    _this.checked(false);
                                }
                                else {
                                    _this.checked(true);
                                }
                            });
                        }));
                        _this._disposables.push(_this.checked.subscribe(function (val) {
                            lock(function () {
                                if (val) {
                                    _this.checkState("Checked");
                                }
                                else {
                                    _this.checkState("Unchecked");
                                }
                            });
                        }));
                        if (_this.checkState() !== "Unchecked") {
                            _this.checkState.valueHasMutated();
                        }
                        else if (_this.checked() !== false) {
                            _this.checked.valueHasMutated();
                        }
                        if (_this.glyphOptions && ko.isObservable(_this.glyphOptions.alignment))
                            _this.glyphAlignment = _this.glyphOptions.alignment;
                        return _this;
                    }
                    return XRCheckBoxViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRCheckBoxViewModel = XRCheckBoxViewModel;
                var XRCheckBoxSurface = (function (_super) {
                    __extends(XRCheckBoxSurface, _super);
                    function XRCheckBoxSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.checkStateWidthContainer = ko.observable();
                        _this.visibleText = ko.observable(true);
                        _this.contenttemplate = "dxrd-checkbox-content";
                        _this._disposables.push(_this.checkStateWidth = ko.computed(function () {
                            return DevExpress.Analytics.Internal.unitsToPixel(control.glyphOptions.size.width(), context.measureUnit(), 1);
                        }));
                        _this._disposables.push(_this.checkStateHeight = ko.computed(function () {
                            return DevExpress.Analytics.Internal.unitsToPixel(control.glyphOptions.size.height(), context.measureUnit(), 1);
                        }));
                        _this._disposables.push(_this.checkStateClass = ko.pureComputed(function () {
                            return "dxrd-checkbox-checkstate-" + control["checkState"]().toLowerCase();
                        }));
                        _this._disposables.push(_this.customGlyphStyleCss = ko.pureComputed(function () {
                            return Reporting.Viewer.Editing.createCustomGlyphStyleCss(control.glyphOptions.customGlyphs[control["checkState"]()]());
                        }));
                        _this._disposables.push(_this.checkStateStyleIcon = ko.pureComputed(function () {
                            return Reporting.Viewer.Editing.getCheckBoxTemplate(control.glyphOptions.style(), control["checkState"](), _this.customGlyphStyleCss());
                        }));
                        _this.leftPadding = function () {
                            var padding = ko.unwrap(control["paddingObj"]) || DevExpress.Analytics.Elements.PaddingModel.from(DevExpress.Analytics.Elements.PaddingModel.defaultVal);
                            return DevExpress.Analytics.Internal.unitsToPixel(padding.left(), context.measureUnit());
                        };
                        _this._disposables.push(_this.textWidth = ko.pureComputed(function () {
                            return _this.contentWidthWithoutZoom() - _this.checkStateWidth() - _this.leftPadding();
                        }));
                        _this._disposables.push(_this.visibleText = ko.pureComputed(function () {
                            return control["glyphAlignment"]() !== "Center";
                        }));
                        _this._disposables.push(_this.checkStateWidthContainer = ko.pureComputed(function () {
                            return _this.visibleText() ? _this.checkStateWidth() + "px" : "100%";
                        }));
                        _this.isGlyphAlignmentNear = ko.pureComputed(function () {
                            return _this._control.rtl() ? control["glyphAlignment"]() === "Far" : control["glyphAlignment"]() === "Near";
                        });
                        _this._disposables.push(_this.css = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.backGroundCss(), _this.cssCalculator.foreColorCss(), _this.cssCalculator.textAlignmentCss(), _this.cssCalculator.paddingsCss());
                        }));
                        return _this;
                    }
                    return XRCheckBoxSurface;
                }(Controls.XRTextControlSurfaceBase));
                Controls.XRCheckBoxSurface = XRCheckBoxSurface;
                (function (Metadata) {
                    Metadata.checkState = {
                        propertyName: "checkState",
                        modelName: "@CheckState", displayName: "Check State", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.CheckState", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        defaultVal: "Unchecked",
                        valuesArray: [
                            { value: "Unchecked", displayValue: "Unchecked", localizationId: "StringId.CheckUnchecked" },
                            { value: "Checked", displayValue: "Checked", localizationId: "StringId.CheckChecked" },
                            { value: "Indeterminate", displayValue: "Indeterminate", localizationId: "StringId.CheckIndeterminate" }
                        ]
                    };
                    Metadata.checked = { propertyName: "checked", modelName: "@Checked", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, displayName: "Checked", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.Checked", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.glyphOptions = {
                        propertyName: "glyphOptions",
                        modelName: "GlyphOptions",
                        displayName: "Glyph Options",
                        localizationId: 'DevExpress.XtraReports.UI.XRCheckBox.GlyphOptions',
                        editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor,
                        from: function (model, serializer) { return new Controls.GlyphOptions(model, serializer); },
                        toJsonObject: function (value, serializer) { return serializer.serialize(value); }
                    };
                    Metadata.checkEditOptions = $.extend({}, Metadata.editOptions, {
                        propertyName: "checkEditOptions",
                        from: function (model, serializer) { return new Controls.CheckEditOptions(model, serializer); }
                    });
                    Metadata.checkboxSerializationsInfo = [
                        Metadata.checkState, Metadata.checked, Metadata.text, Metadata.textFormatString, Metadata.wordWrap, Metadata.keepTogether, Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.glyphOptions,
                        $.extend({}, Metadata.textAlignment, { defaultVal: "MiddleLeft" }),
                        Metadata.textControlScripts, Metadata.textTrimming, Metadata.xlsxFormatString,
                        Data.Metadata.dataBindings(["Text", "NavigateUrl", "Tag", "Bookmark", "CheckState"]),
                        Metadata.rtl,
                        Metadata.checkEditOptions
                    ].concat(Internal.createPopularBindingInfos({ propertyName: "CheckState", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.CheckState" }), Internal.createPopularBindingInfos({ propertyName: "Text", localizationId: "DevExpress.XtraReports.UI.XRCheckBox.Text" }), Metadata.sizeLocation, Metadata.commonControlProperties, Metadata.fontGroup, Metadata.navigationGroup);
                    Metadata.popularPropertiesCheckBox = ["checkState", "popularDataBindingCheckState", "popularExpressionCheckState", "text", "popularDataBindingText", "popularExpressionText", "glyphOptions", "bookmark", "bookmarkParent"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                function findBandByPositionY(bandsHolder, position) {
                    var result = null;
                    bandsHolder.bands().forEach(function (band) {
                        if (band.absolutePosition.y.peek() <= position) {
                            if (band) {
                                result = findBandByPositionY(band.bandsHolder, position) || band;
                                return false;
                            }
                        }
                    });
                    return result;
                }
                var XRCrossBandControlViewModel = (function (_super) {
                    __extends(XRCrossBandControlViewModel, _super);
                    function XRCrossBandControlViewModel(control, parent, serializer) {
                        var _this = _super.call(this, control, parent, serializer) || this;
                        _this.isCrossbandShow = ko.computed(function () {
                            return !!(_this.startBand() && _this.endBand());
                        });
                        var originalEndBand = _this.endBand;
                        _this._disposables.push(_this.endPoint.x = ko.pureComputed({
                            read: function () {
                                return _this.startPoint.x();
                            },
                            write: function (val) {
                                if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                    _this.startPoint.x(val);
                                }
                            }
                        }));
                        _this._disposables.push(_this.locationF.x = ko.pureComputed({
                            read: function () {
                                return _this.startPoint.x();
                            },
                            write: function (val) {
                                if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                    _this.startPoint.x(val);
                                }
                            }
                        }));
                        _this._disposables.push(_this.locationF.y = ko.pureComputed({
                            read: function () {
                                return _this.startPoint.y();
                            },
                            write: function (val) {
                                if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                    _this.startPoint.y(val);
                                }
                            }
                        }));
                        if (_this.parentModel()) {
                            _this._subscribeBands(_this.parentModel());
                        }
                        else {
                            _this._disposables.push(_this.parentModel.subscribe(function (report) {
                                if (report)
                                    _this._subscribeBands(report);
                            }));
                        }
                        _this._disposables.push(_this.isCrossbandShow);
                        return _this;
                    }
                    XRCrossBandControlViewModel.prototype._subscribeBands = function (report) {
                        var _this = this;
                        this._disposables.push(report.bands.subscribe(function (changes) {
                            for (var i = 0; i < changes.length; i++) {
                                var change = changes[i];
                                if (change.status === "deleted") {
                                    if (change.value === _this.startBand() && change.value === _this.endBand()) {
                                        report.crossBandControls.remove(_this);
                                    }
                                    else if (change.value === _this.endBand()) {
                                        _this.endBand(report.bands()[change.index - 1]);
                                        _this.endPoint.y(report.bands()[change.index - 1].height());
                                    }
                                    else if (change.value === _this.startBand()) {
                                        var saveEndBand = _this.endBand(), saveEndPointY = _this.endPoint.y();
                                        _this.startBand(report.bands()[change.index]);
                                        _this.startPoint.y(0);
                                        _this.endBand(saveEndBand);
                                        _this.endPoint.y(saveEndPointY);
                                    }
                                }
                            }
                        }, null, "arrayChange"));
                    };
                    XRCrossBandControlViewModel.prototype.getNearestParent = function (target) {
                        var result = target;
                        while (result.parentModel()) {
                            result = result.parentModel();
                        }
                        return result;
                    };
                    XRCrossBandControlViewModel.prototype.isResettableProperty = function (propertyName) {
                        return _super.prototype.isResettableProperty.call(this, propertyName) && ["startPoint", "endPoint", "startBand", "endBand"].indexOf(propertyName) === -1;
                    };
                    XRCrossBandControlViewModel.prototype.isPropertyVisible = function (name) {
                        if (name === "size")
                            return false;
                        return _super.prototype.isPropertyVisible.call(this, name);
                    };
                    XRCrossBandControlViewModel.prototype.getControlContainerName = function () { return "crossBandControls"; };
                    XRCrossBandControlViewModel.unitProperties = ["width"];
                    return XRCrossBandControlViewModel;
                }(Controls.XRReportElementViewModel));
                Controls.XRCrossBandControlViewModel = XRCrossBandControlViewModel;
                var XRCrossBandSurface = (function (_super) {
                    __extends(XRCrossBandSurface, _super);
                    function XRCrossBandSurface(control, context) {
                        var _this = _super.call(this, control, context, XRCrossBandSurface._unitProperties) || this;
                        _this.edgeUnderCursor = ko.observable({ isOver: false, x: 0, y: 0, isNotDropTarget: true });
                        _this.underCursor = ko.observable({ isOver: false, x: 0, y: 0, isNotDropTarget: true });
                        _this._disposables.push(_this["_x"].subscribe(function (newVal) {
                            _this["_endX"](newVal);
                        }));
                        _this.visible = control.isCrossbandShow;
                        var currentAbsoluteStartY = _this["_startY"]();
                        var currentAbsoluteEndY = _this["_endY"]();
                        _this._disposables.push(ko.computed(function () {
                            if (control.startBand()) {
                                var startBandSurface = DevExpress.Analytics.Internal.findSurface(control.startBand.peek());
                                currentAbsoluteStartY = _this._isBandCollapsed(startBandSurface) ? startBandSurface.absolutePosition.y() : _this["_startY"]() + startBandSurface.absolutePosition.y();
                            }
                            _this["_y"](currentAbsoluteStartY);
                        }));
                        _this._disposables.push(ko.computed(function () {
                            if (control.endBand()) {
                                var endBandSurface = DevExpress.Analytics.Internal.findSurface(control.endBand.peek());
                                currentAbsoluteEndY = _this._isBandCollapsed(endBandSurface) ? endBandSurface.absolutePosition.y() : _this["_endY"]() + endBandSurface.absolutePosition.y();
                            }
                            _this["_height"](currentAbsoluteEndY - currentAbsoluteStartY);
                        }));
                        _this._disposables.push(ko.computed(function () {
                            var absoluteStartY = _this["_y"]();
                            if (absoluteStartY < 0) {
                                _this["_y"](0);
                                return;
                            }
                            if (absoluteStartY !== currentAbsoluteStartY) {
                                var startBandSurface = findBandByPositionY(_this.parent.bandsHolder, absoluteStartY);
                                control.startBand(startBandSurface.getControlModel());
                                currentAbsoluteStartY = absoluteStartY;
                                _this["_startY"](currentAbsoluteStartY - startBandSurface.absolutePosition.y());
                                _this._updateEndPoint(_this["_height"](), currentAbsoluteEndY, currentAbsoluteStartY);
                            }
                        }));
                        _this._disposables.push(ko.computed(function () {
                            var height = _this["_height"]();
                            if (height !== currentAbsoluteEndY - currentAbsoluteStartY) {
                                _this._updateEndPoint(height, currentAbsoluteEndY, currentAbsoluteStartY);
                            }
                        }));
                        _this.template = control.controlType === "XRCrossBandLine" ? "dxrd-crossband-line" : "dxrd-crossband";
                        if (_this.getControlModel().controlType === "XRCrossBandLine") {
                            _this._disposables.push(_this.lineCss = ko.pureComputed(function () {
                                return $.extend({}, _this.cssCalculator.stroke(), _this.cssCalculator.strokeWidthWithWidth(), _this.cssCalculator.strokeDashArrayWithWidth());
                            }));
                            _this._disposables.push(_this.lineWidthCss = ko.pureComputed(function () {
                                return $.extend({}, _this.cssCalculator.strokeWidthWithWidth());
                            }));
                        }
                        else {
                            _this._disposables.push(_this.leftCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Left"); }));
                            _this._disposables.push(_this.rightCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Right"); }));
                            _this._disposables.push(_this.topCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Top"); }));
                            _this._disposables.push(_this.bottomCss = ko.pureComputed(function () { return _this.cssCalculator.crossBandBorder("Bottom"); }));
                        }
                        _this._disposables.push(control.startBand.subscribe(function (newBand) {
                            if (newBand) {
                                var bandSurface = DevExpress.Analytics.Internal.findSurface(newBand);
                                _this["_y"](bandSurface.absolutePosition.y());
                            }
                        }));
                        _this._disposables.push(control.endBand.subscribe(function (newBand) {
                            if (newBand) {
                                var bandSurface = DevExpress.Analytics.Internal.findSurface(newBand);
                                var newHeight = bandSurface.absolutePosition.y() - _this["_y"]();
                                if (control.startBand() === newBand) {
                                    newHeight += _this["_endY"]();
                                }
                                _this["_height"](newHeight);
                            }
                        }));
                        _this._disposables.push(_this.borderWidth = ko.pureComputed(function () {
                            return control["borderWidth"] && Math.floor(control["borderWidth"]());
                        }));
                        return _this;
                    }
                    XRCrossBandSurface.prototype._isBandCollapsed = function (bandSurface) {
                        return bandSurface && (bandSurface.collapsed() || bandSurface.isSomeParentCollapsed());
                    };
                    XRCrossBandSurface.prototype._updateEndPoint = function (height, currentAbsoluteEndY, currentAbsoluteStartY) {
                        currentAbsoluteEndY = currentAbsoluteStartY + height;
                        var endBandSurface = findBandByPositionY(this.parent.bandsHolder, currentAbsoluteEndY);
                        if (!endBandSurface) {
                            return;
                        }
                        if (endBandSurface.absolutePosition.y.peek() + endBandSurface.height.peek() < currentAbsoluteEndY) {
                            endBandSurface["_height"](currentAbsoluteEndY - endBandSurface.absolutePosition.y.peek());
                        }
                        this._control.endBand(endBandSurface.getControlModel());
                        this["_endY"](currentAbsoluteEndY - endBandSurface.absolutePosition.y());
                    };
                    XRCrossBandSurface.prototype._getAllBands = function (band) {
                        var _this = this;
                        var bands = band.bandsHolder.bands(), innerBands = [];
                        bands.forEach(function (band) {
                            innerBands = innerBands.concat(_this._getAllBands(band));
                        });
                        return [].concat(bands, innerBands);
                    };
                    XRCrossBandSurface.prototype._getIntersectionBands = function (currentRect, bands) {
                        var _this = this;
                        var bandSurfaces = bands.filter(function (band) { return _this.isThereIntersection(currentRect, band.absoluteRect()); }), intersectionBands = [].concat(bandSurfaces);
                        bandSurfaces.forEach(function (band) {
                            intersectionBands = intersectionBands.concat(_this._getAllBands(band));
                        });
                        intersectionBands = intersectionBands.filter(function (band) {
                            return band.controls && band.controls().length > 0;
                        });
                        return intersectionBands;
                    };
                    XRCrossBandSurface.prototype._getCrossBandBoxSides = function () {
                        var currentRect = this._unitAbsoluteRect, borderWidth = this.getControlModel()["borderWidth"]();
                        return [{ top: currentRect.top, left: currentRect.left, height: borderWidth, width: currentRect.width },
                            { top: currentRect.bottom - borderWidth, left: currentRect.left, height: borderWidth, width: currentRect.width },
                            { top: currentRect.top, left: currentRect.left, height: currentRect.height, width: borderWidth },
                            { top: currentRect.top, left: currentRect.right - borderWidth, height: currentRect.height, width: borderWidth }];
                    };
                    Object.defineProperty(XRCrossBandSurface.prototype, "_unitAbsoluteRect", {
                        get: function () {
                            var startBandSurface = this._control.startBand().surface, endBandSurface = this._control.endBand().surface;
                            var top = startBandSurface["_unitAbsoluteRect"].top + this._control.startPoint.y(), bottom = endBandSurface["_unitAbsoluteRect"].top + this._control.endPoint.y();
                            return {
                                top: top, left: this._control.startPoint.x(),
                                right: this._control.startPoint.x() + this._control.width(), bottom: bottom,
                                width: this._control.width(), height: bottom - top
                            };
                        },
                        enumerable: true,
                        configurable: true
                    });
                    XRCrossBandSurface.prototype.isThereIntersectionWithControls = function () {
                        var isThereIntersection = false, currentRect = this._unitAbsoluteRect, intersectionBands = this._getIntersectionBands(currentRect, this.parent && this.parent.getChildrenCollection()()), rectangles = this.getControlModel().controlType === "XRCrossBandBox" ? this._getCrossBandBoxSides() : [currentRect];
                        for (var bandIndex = 0; bandIndex < intersectionBands.length; bandIndex++) {
                            for (var rectIndex = 0; rectIndex < rectangles.length; rectIndex++) {
                                if (this.isThereIntersectionWithNeighborsCollection(rectangles[rectIndex], intersectionBands[bandIndex].controls().filter(function (control) { return !control.isIntersectionDeny; }), "_unitAbsoluteRect")) {
                                    isThereIntersection = true;
                                    break;
                                }
                            }
                            if (isThereIntersection)
                                break;
                        }
                        ;
                        return isThereIntersection;
                    };
                    XRCrossBandSurface.prototype.updateAbsolutePosition = function () {
                        this.absolutePosition.x(this["_endX"]());
                        this.absolutePosition.y(this["_y"]());
                        this.afterUpdateAbsolutePosition();
                    };
                    XRCrossBandSurface.prototype.isThereIntersectionWithCrossBandControls = function () {
                        if (this.getControlModel().controlType === "XRCrossBandBox") {
                            var isThereIntersection = false;
                            var rects = this._getCrossBandBoxSides() || [];
                            for (var rectIndex = 0; rectIndex < rects.length; rectIndex++) {
                                if (_super.prototype.isThereIntersectionWithCrossBandControls.call(this, rects[rectIndex])) {
                                    isThereIntersection = true;
                                    break;
                                }
                            }
                            return isThereIntersection;
                        }
                        else {
                            return _super.prototype.isThereIntersectionWithCrossBandControls.call(this);
                        }
                    };
                    XRCrossBandSurface.prototype.container = function () {
                        if (this._control.isCrossbandShow()) {
                            return DevExpress.Analytics.Internal.findSurface(this.getControlModel().startBand());
                        }
                        else {
                            return null;
                        }
                    };
                    XRCrossBandSurface.prototype._getChildrenHolderName = function () {
                        return null;
                    };
                    XRCrossBandSurface._unitProperties = {
                        _x: function (o) {
                            return o.startPoint.x;
                        },
                        _width: function (o) {
                            return o.width;
                        },
                        _startY: function (o) {
                            return o.startPoint.y;
                        },
                        _endX: function (o) {
                            return o.endPoint.x;
                        },
                        _endY: function (o) {
                            return o.endPoint.y;
                        }
                    };
                    return XRCrossBandSurface;
                }(Controls.XRControlSurfaceBase));
                Controls.XRCrossBandSurface = XRCrossBandSurface;
                (function (Metadata) {
                    Metadata.crossBandLineWidth = { propertyName: "width", modelName: "@WidthF", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Width", localizationId: "DevExpress.XtraReports.UI.XRControl.Width", from: DevExpress.Analytics.Utils.floatFromModel };
                    Metadata.startPoint = { propertyName: "startPoint", modelName: "@StartPointFloat", from: DevExpress.Analytics.Elements.Point.fromString, displayName: "Start Point", localizationId: "DevExpress.XtraReports.UI.XRCrossBandControl.StartPoint", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.endPoint = { propertyName: "endPoint", modelName: "@EndPointFloat", from: DevExpress.Analytics.Elements.Point.fromString, displayName: "End Point", localizationId: "DevExpress.XtraReports.UI.XRCrossBandControl.EndPoint", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.startBand = { propertyName: "startBand", modelName: "@StartBand", link: true, displayName: "Start Band", localizationId: "DevExpress.XtraReports.UI.XRCrossBandControl.StartBand", editor: Widgets.editorTemplates.bands };
                    Metadata.endBand = { propertyName: "endBand", modelName: "@EndBand", link: true, displayName: "End Band", localizationId: "DevExpress.XtraReports.UI.XRCrossBandControl.EndBand", editor: Widgets.editorTemplates.bands };
                    Metadata.borderDashStyleCrossband = {
                        propertyName: "borderDashStyleCrossband", modelName: "@BorderDashStyle",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Border Dash Style", localizationId: "DevExpress.XtraReports.UI.XRControl.BorderDashStyle", valuesArray: Metadata.borderDashStyleValues
                    };
                    Metadata.width = { propertyName: "width", modelName: "@WidthF", defaultVal: 0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Width", localizationId: "DevExpress.XtraReports.UI.XRControl.Width", from: DevExpress.Analytics.Utils.floatFromModel };
                    Metadata.crossBandBoxControlSerializationsInfo = [
                        Metadata.startPoint, Metadata.startBand, Metadata.endPoint, Metadata.endBand, Metadata.width,
                        Metadata.borderColor, Metadata.borderDashStyleCrossband, Metadata.canPublish,
                        $.extend({}, Metadata.borders, { defaultVal: "All" }),
                        $.extend({}, Metadata.borderWidth, { defaultVal: 2 }),
                        { propertyName: "locationF", modelName: "@LocationFloat", from: DevExpress.Analytics.Elements.Point.fromString },
                    ].concat(Metadata.baseControlProperties);
                    Metadata.crossBandLineControlSerializationsInfo = [
                        Metadata.startPoint, Metadata.startBand, Metadata.endPoint, Metadata.endBand, Metadata.width,
                        Metadata.foreColor, Metadata.lineStyle, Metadata.crossBandLineWidth, Metadata.canPublish,
                        { propertyName: "locationF", modelName: "@LocationFloat", from: DevExpress.Analytics.Elements.Point.fromString, }
                    ].concat(Metadata.baseControlProperties);
                    Metadata.popularPropertiesCrossLine = ["lineStyle"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRGaugeViewModel = (function (_super) {
                    __extends(XRGaugeViewModel, _super);
                    function XRGaugeViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        _this._disposables.push(_this.viewType.subscribe(function (val) {
                            return _this.viewStyle(val === "Circular" ? Metadata.circularValues[0].value : Metadata.linearValues[0].value);
                        }));
                        return _this;
                    }
                    XRGaugeViewModel.prototype.getInfo = function () {
                        var serializationInfo = $.extend(true, [], _super.prototype.getInfo.call(this));
                        var viewStyleProperty = serializationInfo.filter(function (info) { return info.propertyName === "viewStyle"; })[0];
                        viewStyleProperty.defaultVal = this.viewType && (this.viewType() === "Linear") ? "Horizontal" : "Half";
                        return serializationInfo;
                    };
                    XRGaugeViewModel.bindings = ["ActualValue", "Maximum", "Minimum", "TargetValue"];
                    return XRGaugeViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRGaugeViewModel = XRGaugeViewModel;
                (function (Metadata) {
                    Metadata.circularValues = [
                        { displayValue: "Half", value: "Half", localizationId: "GaugesPresetsStringId.ShapeHalf" },
                        { displayValue: "Full", value: "Full", localizationId: "GaugesPresetsStringId.ShapeFull" },
                        { displayValue: "QuarterLeft", value: "QuarterLeft", localizationId: "GaugesPresetsStringId.ShapeQuarterLeft" },
                        { displayValue: "QuarterRight", value: "QuarterRight", localizationId: "GaugesPresetsStringId.ShapeQuarterRight" },
                        { displayValue: "ThreeFourth", value: "ThreeFourth", localizationId: "GaugesPresetsStringId.ShapeThreeFourth" }
                    ];
                    Metadata.linearValues = [
                        { displayValue: "Horizontal", value: "Horizontal", localizationId: "GaugesPresetsStringId.ShapeHorizontal" },
                        { displayValue: "Vertical", value: "Vertical", localizationId: "GaugesPresetsStringId.ShapeVertical" }
                    ];
                    Metadata.actualValue = { propertyName: "actualValue", defaultVal: null, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Actual Value", localizationId: "DevExpress.XtraReports.UI.XRGauge.ActualValue", modelName: "@ActualValue" };
                    Metadata.maximum = { propertyName: "maximum", defaultVal: null, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Maximum", localizationId: "DevExpress.XtraReports.UI.XRGauge.Maximum", modelName: "@Maximum" };
                    Metadata.minimum = { propertyName: "minimum", modelName: "@Minimum", defaultVal: null, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Minimum", localizationId: "DevExpress.XtraReports.UI.XRGauge.Minimum" };
                    Metadata.tickmarkCount = { propertyName: "tickmarkCount", modelName: "@TickmarkCount", defaultVal: 11, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Tickmark Count", localizationId: "DevExpress.XtraReports.UI.XRGauge.TickmarkCount" };
                    Metadata.targetValue = { propertyName: "targetValue", modelName: "@TargetValue", defaultVal: null, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Target Value", localizationId: "DevExpress.XtraReports.UI.XRGauge.TargetValue" };
                    Metadata.viewStyle = { propertyName: "viewStyle", modelName: "@ViewStyle", displayName: "View Style", localizationId: "DevExpress.XtraReports.UI.XRGauge.ViewStyle", editor: Widgets.editorTemplates.viewStyle };
                    Metadata.viewTheme = {
                        propertyName: "viewTheme", modelName: "@ViewTheme",
                        defaultVal: "FlatLight", displayName: "View Theme", localizationId: "DevExpress.XtraReports.UI.XRGauge.ViewTheme", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "FlatLight", displayValue: "FlatLight", localizationId: "GaugesPresetsStringId.ThemeFlatLight" },
                            { value: "FlatDark", displayValue: "FlatDark", localizationId: "GaugesPresetsStringId.ThemeFlatDark" }
                        ]
                    };
                    Metadata.viewType = {
                        propertyName: "viewType", modelName: "@ViewType",
                        defaultVal: "Circular", displayName: "View Type", localizationId: "DevExpress.XtraReports.UI.XRGauge.ViewType", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "Circular", displayValue: "Circular", localizationId: "ASPxReportsStringId.ReportDesigner_GaugeViewType_Circular" },
                            { value: "Linear", displayValue: "Linear", localizationId: "ASPxReportsStringId.ReportDesigner_GaugeViewType_Linear" }
                        ]
                    };
                    Metadata.xrGaugeSerializationInfo = [
                        Metadata.viewStyle, Metadata.viewTheme, Metadata.viewType, Metadata.actualValue, Metadata.tickmarkCount, Metadata.maximum, Metadata.minimum, Metadata.targetValue, Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.controlScripts, Metadata.imageType,
                        Data.Metadata.dataBindings(["ActualValue", "Bookmark", "Maximum", "Minimum", "NavigateUrl", "Tag", "TargetValue"])
                    ].concat(XRGaugeViewModel.bindings
                        .map(function (name) {
                        return Internal.createPopularBindingInfos({ propertyName: name, localizationId: "DevExpress.XtraReports.UI.XRGauge." + name });
                    })
                        .reduce(function (a, b) { return a.concat(b); }))
                        .concat(Metadata.sizeLocation, Metadata.commonControlProperties, Metadata.navigationGroup);
                    Metadata.popularPropertiesGauge = ["viewType", "viewStyle", "viewTheme", "actualValue", "popularDataBindingActualValue", "popularExpressionActualValue", "targetValue", "popularDataBindingTargetValue", "popularExpressionTargetValue",
                        "minimum", "popularDataBindingMinimum", "popularExpressionMinimum", "maximum", "popularDataBindingMaximum", "popularExpressionMaximum"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRLineSurface = (function (_super) {
                    __extends(XRLineSurface, _super);
                    function XRLineSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this["lineWidth"] = control["lineWidth"];
                        _this["lineStyle"] = control["lineStyle"];
                        _this["lineDirection"] = control["lineDirection"];
                        _this.selectiontemplate = "dxrd-control-selection";
                        _this.contenttemplate = "dxrd-line-content";
                        _this._disposables.push(_this.linePosition = ko.pureComputed(function () {
                            var result = {}, rect = _this.rect();
                            if (_this["lineDirection"]() === "Horizontal") {
                                result["x1"] = 0;
                                result["x2"] = rect.width;
                                result["y1"] = rect.height / 2;
                                result["y2"] = rect.height / 2;
                            }
                            if (_this["lineDirection"]() === "Vertical") {
                                result["x1"] = rect.width / 2;
                                result["x2"] = rect.width / 2;
                                result["y1"] = 0;
                                result["y2"] = rect.height;
                            }
                            if (_this["lineDirection"]() === "BackSlant") {
                                result["x1"] = 0;
                                result["x2"] = rect.width;
                                result["y1"] = 0;
                                result["y2"] = rect.height;
                            }
                            if (_this["lineDirection"]() === "Slant") {
                                result["x1"] = 0;
                                result["x2"] = rect.width;
                                result["y1"] = rect.height;
                                result["y2"] = 0;
                            }
                            return result;
                        }));
                        _this._disposables.push(_this.contentCss = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.stroke(), _this.cssCalculator.strokeDashArray(), _this.cssCalculator.strokeWidth());
                        }));
                        return _this;
                    }
                    return XRLineSurface;
                }(Controls.XRControlSurface));
                Controls.XRLineSurface = XRLineSurface;
                (function (Metadata) {
                    Metadata.lineDirection = {
                        propertyName: "lineDirection",
                        modelName: "@LineDirection",
                        defaultVal: "Horizontal",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        displayName: "Line Direction", localizationId: "DevExpress.XtraReports.UI.XRLine.LineDirection",
                        valuesArray: [
                            { value: "Horizontal", displayValue: "Horizontal", localizationId: "DevExpress.XtraReports.UI.LineDirection.Horizontal" },
                            { value: "Vertical", displayValue: "Vertical", localizationId: "DevExpress.XtraReports.UI.LineDirection.Vertical" },
                            { value: "Slant", displayValue: "Slant", localizationId: "DevExpress.XtraReports.UI.LineDirection.Slant" },
                            { value: "BackSlant", displayValue: "BackSlant", localizationId: "DevExpress.XtraReports.UI.LineDirection.BackSlant" }
                        ]
                    };
                    Metadata.lineSerializationsInfo = [
                        Metadata.foreColor, Metadata.keepTogether, Metadata.anchorVertical, Metadata.anchorHorizontal,
                        Metadata.lineWidth, Metadata.lineDirection, Metadata.lineStyle, Metadata.controlScripts,
                        Data.Metadata.dataBindings(["Tag"])
                    ].concat(Metadata.sizeLocation, Metadata.commonControlProperties);
                    Metadata.popularPropertiesLine = ["lineDirection", "lineStyle", "lineWidth", "anchorVertical", "anchorHorizontal"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRPageBreakSurface = (function (_super) {
                    __extends(XRPageBreakSurface, _super);
                    function XRPageBreakSurface(control, context) {
                        var _this = _super.call(this, control, context, XRPageBreakSurface._unitProperties) || this;
                        _this._disposables.push(_this._width);
                        _this.template = "dxrd-pagebreak";
                        _this.contenttemplate = "dxrd-line-content";
                        _this.selectiontemplate = "dxrd-pagebreak-selection";
                        _this._disposables.push(_this.linePosition = ko.pureComputed(function () {
                            var rect = _this.rect();
                            return {
                                "x1": 0,
                                "x2": rect.width,
                                "y1": rect.height / 2,
                                "y2": rect.height / 2
                            };
                        }));
                        _this.contentCss = ko.observable({
                            'stroke': 'black',
                            'strokeWidth': 1,
                            'strokeDasharray': '4px, 4px'
                        });
                        _this._disposables.push(_this.lineHeight = ko.pureComputed(function () {
                            return _this["position"].lineHeight() / _this._context.zoom();
                        }));
                        _this.css = ko.observable({});
                        _this._disposables.push(_this.isIntersect = ko.pureComputed(function () { return false; }));
                        return _this;
                    }
                    XRPageBreakSurface.prototype.preInitProperties = function (control, context) {
                        this._width = ko.pureComputed({
                            read: function () {
                                return context.pageWidth() - context.margins.right() - context.margins.left();
                            },
                            write: function () { }
                        });
                    };
                    Object.defineProperty(XRPageBreakSurface.prototype, "isIntersectionDeny", {
                        get: function () { return true; },
                        enumerable: true,
                        configurable: true
                    });
                    XRPageBreakSurface._unitProperties = {
                        _x: function (o) {
                            return ko.observable(0);
                        },
                        _y: function (o) {
                            return o.location.y;
                        },
                        _height: function (o) {
                            return ko.observable(2);
                        }
                    };
                    return XRPageBreakSurface;
                }(Controls.XRControlSurfaceBase));
                Controls.XRPageBreakSurface = XRPageBreakSurface;
                (function (Metadata) {
                    Metadata.pageBreakSerializationsInfo = [Metadata.location, Metadata.formattingRuleLinks, Metadata.truncatedControlScripts].concat(Metadata.baseControlProperties);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRPageInfoSurface = (function (_super) {
                    __extends(XRPageInfoSurface, _super);
                    function XRPageInfoSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.displayText = function () {
                            var format = control["textFormatString"] && control.textFormatString();
                            if (format)
                                return format;
                            var value = control["pageInfo"](), info = pageInfoValuesMap.filter(function (item) { return item.value === value; })[0];
                            if (info)
                                return info.displayValue;
                            return value;
                        };
                        return _this;
                    }
                    return XRPageInfoSurface;
                }(Controls.XRControlSurface));
                Controls.XRPageInfoSurface = XRPageInfoSurface;
                var XRPageInfoViewModel = (function (_super) {
                    __extends(XRPageInfoViewModel, _super);
                    function XRPageInfoViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        var format = _this["_model"]["@Format"];
                        if (format) {
                            if (!_this.textFormatString()) {
                                _this.textFormatString(format);
                            }
                            delete _this["_model"]["@Format"];
                        }
                        return _this;
                    }
                    return XRPageInfoViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRPageInfoViewModel = XRPageInfoViewModel;
                var pageInfoValuesMap = [
                    { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPrinting.PageInfo.None" },
                    { value: "Number", displayValue: "Page Number", localizationId: "DevExpress.XtraPrinting.PageInfo.Number" },
                    { value: "NumberOfTotal", displayValue: "'Current of Total' Page Numbers", localizationId: "DevExpress.XtraPrinting.PageInfo.NumberOfTotal" },
                    { value: "RomLowNumber", displayValue: "Page Number (Roman, Lowercase)", localizationId: "DevExpress.XtraPrinting.PageInfo.RomLowNumber" },
                    { value: "RomHiNumber", displayValue: "Page Number (Roman, Uppercase)", localizationId: "DevExpress.XtraPrinting.PageInfo.RomHiNumber" },
                    { value: "DateTime", displayValue: "Current Date and Time", localizationId: "DevExpress.XtraPrinting.PageInfo.DateTime" },
                    { value: "UserName", displayValue: "User Name", localizationId: "DevExpress.XtraPrinting.PageInfo.UserName" },
                    { value: "Total", displayValue: "Page Count", localizationId: "DevExpress.XtraPrinting.PageInfo.Total" }
                ];
                (function (Metadata) {
                    Metadata.pageInfo = {
                        propertyName: "pageInfo",
                        modelName: "@PageInfo", defaultVal: "NumberOfTotal", displayName: "Page Information", localizationId: "DevExpress.XtraReports.UI.XRPageInfo.PageInfo",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: pageInfoValuesMap
                    };
                    Metadata.startPageNumber = {
                        propertyName: "startPageNumber",
                        modelName: "@StartPageNumber", displayName: "Start Page Number", localizationId: "DevExpress.XtraReports.UI.XRPageInfo.StartPageNumber", defaultVal: 1, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric
                    };
                    Metadata.runningBand = {
                        propertyName: "runningBand", modelName: "@RunningBand", link: true, displayName: "Running Band", localizationId: "DevExpress.XtraReports.UI.XRPageInfo.RunningBand", editor: Widgets.editorTemplates.runningBand
                    };
                    Metadata.pageInfoSerializationsInfo = [
                        Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.textAlignment, Metadata.wordWrap, Metadata.textFormatString, Metadata.pageInfo, Metadata.startPageNumber, Metadata.runningBand, Metadata.textControlScripts, Metadata.rtl,
                        Data.Metadata.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
                    ].concat(Metadata.sizeLocation, Metadata.commonControlProperties, Metadata.fontGroup, Metadata.navigationGroup);
                    Metadata.popularPropertiesPageInfo = ["pageInfo", "startPageNumber", "textFormatString", "runningBand", "anchorVertical"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRPictureBoxViewModel = (function (_super) {
                    __extends(XRPictureBoxViewModel, _super);
                    function XRPictureBoxViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        _this.format = ko.observable(null);
                        var originalImageWidth = ko.observable(), originalImageHeight = ko.observable(), imageHeight = ko.observable(_this.size.height()), imageWidth = ko.observable(_this.size.width());
                        _this._sizing = ko.observable(_this.sizing());
                        _this.size["_width"] = _this.size.width;
                        _this.size["_height"] = _this.size.height;
                        _this.size.isPropertyDisabled = function (propertyName) {
                            return _this._sizing() === "AutoSize";
                        };
                        if (!_this.imageSource() && model["@Image"]) {
                            _this.imageSource(new DevExpress.Reporting.ImageSource('img', model["@Image"]));
                            delete _this["_model"]["@Image"];
                        }
                        var oldSizingValue = _this._sizing();
                        _this._disposables.push(_this.sizing = ko.computed({
                            read: function () {
                                return _this._sizing();
                            },
                            write: function (value) {
                                var undo = DevExpress.Analytics.Utils.UndoEngine.tryGetUndoEngine(_this);
                                undo && undo.start();
                                if (oldSizingValue === "AutoSize") {
                                    _this.size["_width"](imageWidth());
                                    _this.size["_height"](imageHeight());
                                }
                                oldSizingValue = value;
                                _this._sizing(value);
                                if (value === "CenterImage")
                                    _this.imageAlignment("MiddleCenter");
                                undo && undo.end();
                            }
                        }));
                        _this._disposables.push(_this.size.width = ko.pureComputed({
                            read: function () {
                                return _this.isAutoSize ? imageWidth() : _this.size["_width"]();
                            },
                            write: function (value) {
                                if (!_this.isAutoSize) {
                                    _this.size["_width"](value);
                                }
                            }
                        }));
                        _this._disposables.push(_this.size.height = ko.pureComputed({
                            read: function () {
                                return _this.isAutoSize ? imageHeight() : _this.size["_height"]();
                            },
                            write: function (value) {
                                if (!_this.isAutoSize) {
                                    _this.size["_height"](value);
                                }
                            }
                        }));
                        _this._disposables.push(ko.computed(function () {
                            var img = new Image();
                            img.onload = function () {
                                var report = _this.root;
                                _this._disposables.push(ko.computed(function () {
                                    originalImageWidth(DevExpress.Analytics.Internal.pixelToUnits(img.width, report.measureUnit(), 1));
                                    originalImageHeight(DevExpress.Analytics.Internal.pixelToUnits(img.height, report.measureUnit(), 1));
                                }));
                            };
                            var imageSource = _this.imageSource();
                            if (imageSource) {
                                img.src = imageSource.getDataUrl(_this.format);
                            }
                        }));
                        var toPixel = function (value) {
                            return DevExpress.Analytics.Internal.unitsToPixel(value, _this.root["measureUnit"]());
                        };
                        _this._disposables.push(ko.computed(function () {
                            if (_this.isAutoSize && _this.imageSource.peek()) {
                                var borders = new DevExpress.Analytics.Internal.BordersModel({ value: _this["borders"] }), borderWidth = _this["borderWidth"]() || 0, top, bottom, left, right, paddings = (_this["paddingObj"]);
                                top = borders.top() ? borderWidth : 0;
                                bottom = borders.bottom() ? borderWidth : 0;
                                left = borders.left() ? borderWidth : 0;
                                right = borders.right() ? borderWidth : 0;
                                imageWidth(originalImageWidth() + right + left + toPixel(paddings.left()) + toPixel(paddings.right()));
                                imageHeight(originalImageHeight() + top + bottom + toPixel(paddings.top()) + toPixel(paddings.bottom()));
                            }
                        }));
                        _this._disposables.push(_this.isSmallerImage = ko.pureComputed(function () {
                            return originalImageWidth() <= _this.size.width() && originalImageHeight() <= _this.size.height();
                        }));
                        _this._disposables.push(_this.imageUrl.subscribe(function (newVal) {
                            if (newVal) {
                                _this.imageSource(null);
                            }
                        }));
                        _this._disposables.push(_this.imageSource.subscribe(function (newVal) {
                            if (newVal) {
                                _this.imageUrl(Metadata.imageUrl.defaultVal);
                            }
                        }));
                        return _this;
                    }
                    XRPictureBoxViewModel.prototype.isAlignmentDisabled = function () {
                        return ["Tile", "StretchImage", "AutoSize"].indexOf(this._sizing()) !== -1;
                    };
                    XRPictureBoxViewModel.prototype.isPropertyDisabled = function (propertyName) {
                        if (propertyName === "imageAlignment")
                            return this.isAlignmentDisabled();
                        return _super.prototype.isPropertyDisabled.call(this, propertyName);
                    };
                    Object.defineProperty(XRPictureBoxViewModel.prototype, "isAutoSize", {
                        get: function () {
                            return this._sizing() === "AutoSize";
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return XRPictureBoxViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRPictureBoxViewModel = XRPictureBoxViewModel;
                var backgroundSizeCss = ["-o-background-size", "mozBackgroundSize", "backgroundSize"];
                var backgroundOriginCss = ["background-origin", "-webkit-background-origin", " -o-background-origin", "mozBackgroundOrigin", "backgroundOrigin"];
                var XRPictureBoxSurface = (function (_super) {
                    __extends(XRPictureBoxSurface, _super);
                    function XRPictureBoxSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.selectiontemplate = "dxrd-picturebox-selection";
                        var control = _this.getControlModel();
                        _this.contentHeightWithoutZoom.dispose();
                        _this.contentWidthWithoutZoom.dispose();
                        _this.contentSizes.dispose();
                        _this._disposables.push(_this.contentSizes = ko.pureComputed(function () { return _this.cssCalculator.contentSizeCss(_this.rect().width, _this.rect().height, _this._context.zoom(), _this._control["borders"](), _this._control.paddingObj); }));
                        _this._disposables.push(_this.contentHeightWithoutZoom = ko.pureComputed(function () { return _this.contentSizes().height / _this._context.zoom(); }));
                        _this._disposables.push(_this.contentWidthWithoutZoom = ko.pureComputed(function () { return _this.contentSizes().width / _this._context.zoom(); }));
                        _this._disposables.push(_this.css = ko.pureComputed(function () { return {}; }));
                        _this._disposables.push(_this.contentCss = ko.pureComputed(function () {
                            var imageSource = control.imageSource();
                            var urlContent = imageSource
                                ? imageSource.getDataUrl(control.format)
                                : control.imageUrl();
                            return $.extend({}, _this._createBackimage(control["backColor"](), urlContent, control.sizing(), control.isSmallerImage()), _this._createBackgroundOrigin(), control.isAlignmentDisabled() ? {} : _this._createBackgroundPosition(control.imageAlignment()), _this.cssCalculator.createVerticalAlignment("Top"));
                        }));
                        return _this;
                    }
                    XRPictureBoxSurface.prototype._createBackgroundPosition = function (alignment) {
                        var x = "0%";
                        var y = "0%";
                        if (alignment.indexOf("Middle") !== -1)
                            y = "50%";
                        if (alignment.indexOf("Bottom") !== -1)
                            y = "100%";
                        if (alignment.indexOf("Center") !== -1)
                            x = "50%";
                        if (alignment.indexOf("Right") !== -1)
                            x = "100%";
                        return {
                            backgroundPosition: [x, y].join(" ")
                        };
                    };
                    XRPictureBoxSurface.prototype._createBackimage = function (background, urlContent, sizing, isSmallerImage) {
                        var backgroundResult = {};
                        if (urlContent) {
                            backgroundResult = { background: background + " url(" + urlContent + ") no-repeat" };
                            if (sizing) {
                                if (sizing === "Squeeze") {
                                    sizing = isSmallerImage ? "CenterImage" : "ZoomImage";
                                }
                                switch (sizing) {
                                    case "StretchImage":
                                        for (var i = 0; i < backgroundSizeCss.length; i++) {
                                            backgroundResult[backgroundSizeCss[i]] = "100% 100%";
                                        }
                                        break;
                                    case "ZoomImage":
                                        for (var i = 0; i < backgroundSizeCss.length; i++) {
                                            backgroundResult[backgroundSizeCss[i]] = "contain";
                                        }
                                        backgroundResult["backgroundPosition"] = "center center";
                                        break;
                                    case "AutoSize":
                                        for (var i = 0; i < backgroundSizeCss.length; i++) {
                                            backgroundResult[backgroundSizeCss[i]] = "100% 100%";
                                        }
                                        break;
                                    case "Tile":
                                        backgroundResult["backgroundRepeat"] = "repeat";
                                }
                            }
                            return backgroundResult;
                        }
                        backgroundResult = { background: background };
                        return backgroundResult;
                    };
                    XRPictureBoxSurface.prototype._createBackgroundOrigin = function () {
                        var result = {};
                        for (var i = 0; i < backgroundOriginCss.length; i++) {
                            result[backgroundOriginCss[i]] = "content-box";
                        }
                        ;
                        result["width"] = this.contentWidthWithoutZoom() + "px";
                        result["height"] = this.contentHeightWithoutZoom() + "px";
                        return result;
                    };
                    XRPictureBoxSurface.prototype.getResizeOptions = function (resizeHandler) {
                        var _this = this;
                        if (!this.resizeOptions && resizeHandler) {
                            var resizeDisabled = ko.computed(function () {
                                return resizeHandler.disabled && resizeHandler.disabled() || _this._control.sizing() === "AutoSize";
                            });
                            this.resizeOptions = {
                                disabled: resizeDisabled,
                                snapHelper: resizeHandler.snapHelper,
                                starting: resizeHandler.starting,
                                stopped: resizeHandler.stopped
                            };
                            this._disposables.push(resizeDisabled);
                        }
                        return this.resizeOptions;
                    };
                    XRPictureBoxSurface.prototype.getAdornTemplate = function () {
                        var superAdornTemplate = _super.prototype.getAdornTemplate.call(this), placeholder = this.hasBindings || !this.getControlModel().imageSource() ? "dxrd-image-surface-picturebox_placeholder" : "";
                        return superAdornTemplate + (superAdornTemplate && placeholder ? " " : "") + placeholder;
                    };
                    return XRPictureBoxSurface;
                }(Controls.XRControlSurface));
                Controls.XRPictureBoxSurface = XRPictureBoxSurface;
                (function (Metadata) {
                    Metadata.imageUrl = { propertyName: "imageUrl", modelName: "@ImageUrl", editor: DevExpress.Analytics.Widgets.editorTemplates.text, defaultVal: "", displayName: "Image Url", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageUrl" };
                    Metadata.imageSource = {
                        propertyName: "imageSource",
                        modelName: "@ImageSource",
                        editor: { header: "dxrd-image-loadfile", editorType: DevExpress.Analytics.Widgets.Editor },
                        displayName: "Image Source",
                        localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageSource",
                        from: function (val) { return ko.observable(DevExpress.Reporting.ImageSource.parse(val)); },
                        toJsonObject: DevExpress.Reporting.ImageSource.toString,
                        defaultVal: null
                    };
                    Metadata.sizing = {
                        propertyName: "sizing", modelName: "@Sizing", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Sizing", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.Sizing", defaultVal: "Normal", from: DevExpress.Analytics.Utils.fromEnum, valuesArray: [
                            { value: "Normal", displayValue: "Normal", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.Normal" },
                            { value: "StretchImage", displayValue: "Stretch Image", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.StretchImage" },
                            { value: "AutoSize", displayValue: "Auto-Size", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.AutoSize" },
                            { value: "CenterImage", displayValue: "Center Image", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.CenterImage" },
                            { value: "ZoomImage", displayValue: "Zoom Image", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.ZoomImage" },
                            { value: "Squeeze", displayValue: "Squeeze", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.Squeeze" },
                            { value: "Tile", displayValue: "Tile", localizationId: "DevExpress.XtraPrinting.ImageSizeMode.Tile" }
                        ]
                    };
                    Metadata.imageAlignment = {
                        propertyName: "imageAlignment", modelName: "@ImageAlignment", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Alignment", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.Alignment", defaultVal: "Default", from: DevExpress.Analytics.Utils.fromEnum, valuesArray: [
                            { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPrinting.ImageAlignment.Default" },
                            { value: "TopLeft", displayValue: "Top Left", localizationId: "DevExpress.XtraPrinting.ImageAlignment.TopLeft" },
                            { value: "TopCenter", displayValue: "Top Center", localizationId: "DevExpress.XtraPrinting.ImageAlignment.TopCenter" },
                            { value: "TopRight", displayValue: "Top Right", localizationId: "DevExpress.XtraPrinting.ImageAlignment.TopRight" },
                            { value: "MiddleLeft", displayValue: "Middle Left", localizationId: "DevExpress.XtraPrinting.ImageAlignment.MiddleLeft" },
                            { value: "MiddleCenter", displayValue: "Middle Center", localizationId: "DevExpress.XtraPrinting.ImageAlignment.MiddleCenter" },
                            { value: "MiddleRight", displayValue: "Middle Right", localizationId: "DevExpress.XtraPrinting.ImageAlignment.MiddleRight" },
                            { value: "BottomLeft", displayValue: "Bottom Left", localizationId: "DevExpress.XtraPrinting.ImageAlignment.BottomLeft" },
                            { value: "BottomCenter", displayValue: "Bottom Center", localizationId: "DevExpress.XtraPrinting.ImageAlignment.BottomCenter" },
                            { value: "BottomRight", displayValue: "Bottom Right", localizationId: "DevExpress.XtraPrinting.ImageAlignment.BottomRight" }
                        ]
                    };
                    Metadata.imageEditOptions = $.extend({}, Metadata.editOptions, {
                        propertyName: "imageEditOptions",
                        from: function (model, serializer) { return new Controls.ImageEditOptions(model, serializer); }
                    });
                    Metadata.pictureBoxSerializationsInfo = [
                        Metadata.imageUrl, Metadata.imageSource, Metadata.sizing, Metadata.imageAlignment, Metadata.keepTogether, Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.controlScripts,
                        Data.Metadata.dataBindings(["Bookmark", "Image", "ImageSource", "ImageUrl", "NavigateUrl", "Tag"]),
                        Metadata.imageEditOptions,
                        { propertyName: "format" }
                    ].concat(Internal.createPopularBindingInfos({ propertyName: "ImageUrl", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageUrl" }), Internal.createPopularBindingInfos({ propertyName: "ImageSource", localizationId: "DevExpress.XtraReports.UI.XRPictureBox.ImageSource" }), Metadata.sizeLocation, Metadata.commonControlProperties, Metadata.navigationGroup, Metadata.processGroup);
                    Metadata.popularPropertiesPicture = ["imageSource", "popularDataBindingImageSource", "popularExpressionImageSource", "imageUrl", "popularDataBindingImageUrl", "popularExpressionImageUrl", "sizing", "imageAlignment", "bookmark", "bookmarkParent", "format"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                function comparerFields(firstField, secondField) {
                    return firstField.areaIndex() - secondField.areaIndex();
                }
                var XRPivotGridViewModel = (function (_super) {
                    __extends(XRPivotGridViewModel, _super);
                    function XRPivotGridViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        _this.fields = DevExpress.Analytics.Utils.deserializeArray(model && model.Fields || [], function (item) { return new Controls.PivotGrid.PivotGridFieldViewModel(item, _this, serializer); });
                        _this._disposables.push(_this.fields.subscribe(function () {
                            ["FilterArea", "DataArea", "ColumnArea", "RowArea"].forEach(function (area) {
                                var areaFields = _this.getFieldsFromArea(area);
                                for (var index = 0; index < areaFields.length; index++) {
                                    areaFields[index].areaIndex(index);
                                }
                            });
                        }));
                        _this.addFieldToArea = function (area) {
                            if (_this.lockedInUserDesigner())
                                return;
                            var newField = new Controls.PivotGrid.PivotGridFieldViewModel({ "@ControlType": "PivotGridField", "@Area": area }, _this, serializer);
                            newField.index(_this.fields().length);
                            newField.areaIndex(_this.getFieldsFromArea(area).length);
                            _this.fields.push(newField);
                        };
                        _this._initCriteriaString();
                        return _this;
                    }
                    XRPivotGridViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.fields);
                        this.resetObservableArray(this.fields);
                    };
                    XRPivotGridViewModel.prototype._initCriteriaString = function () {
                        var _this = this;
                        this.prefilter.criteriaString = new DevExpress.Analytics.Widgets.FilterStringOptions(this.prefilter._criteriaString);
                        this.prefilter.criteriaString.helper.canChoiceParameters = false;
                        this.prefilter.criteriaString.helper.canChoiceProperty = false;
                        this.prefilter.criteriaString.helper.getDisplayPropertyName = function (path, name) {
                            var field = DevExpress.Analytics.Internal.find(_this.fields.peek(), function (f) { return f.name() === name; });
                            return $.Deferred()
                                .resolve(field ? field.getDisplayName() : name)
                                .promise();
                        };
                        this.prefilter.parent = this;
                    };
                    XRPivotGridViewModel.prototype.removeChild = function (selectedField) {
                        this.fields.splice(this.fields().indexOf(selectedField), 1);
                    };
                    XRPivotGridViewModel.prototype.getFieldsFromArea = function (area) {
                        var result = [];
                        result.push.apply(result, this.fields().filter(function (field) { return field.area() === area; }));
                        return result.sort(comparerFields);
                    };
                    XRPivotGridViewModel.prototype.getPath = function (propertyName) {
                        return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
                    };
                    return XRPivotGridViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRPivotGridViewModel = XRPivotGridViewModel;
                var XRPivotGridSurface = (function (_super) {
                    __extends(XRPivotGridSurface, _super);
                    function XRPivotGridSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.contenttemplate = "dxrd-pivotgrid-content";
                        _this.selectiontemplate = "dxrd-pivotgrid-selection";
                        _this._disposables.push(_this.filterFields = ko.pureComputed(function () {
                            return _this.getAreaFields("FilterArea");
                        }));
                        _this._disposables.push(_this.dataFields = ko.pureComputed(function () {
                            return _this.getAreaFields("DataArea");
                        }));
                        _this._disposables.push(_this.columnFields = ko.pureComputed(function () {
                            return _this.getAreaFields("ColumnArea");
                        }));
                        _this._disposables.push(_this.rowFields = ko.pureComputed(function () {
                            return _this.getAreaFields("RowArea");
                        }));
                        _this._disposables.push(_this.totalsHeight = ko.pureComputed(function () {
                            return _this.columnFields().length > 0 ? _this.columnFields().length * Controls.PivotGrid.PivotGridFieldViewModel.fieldHeight : Controls.PivotGrid.PivotGridFieldViewModel.fieldHeight;
                        }));
                        _this._disposables.push(_this.rowHeaderHeight = ko.pureComputed(function () {
                            return _this.totalsHeight() + (_this.dataFields().length > 0 ? Controls.PivotGrid.PivotGridFieldViewModel.fieldHeight : 0) + 8;
                        }));
                        _this._disposables.push(_this.totalsDataFieldWidth = ko.pureComputed(function () {
                            return _this.getTotalsAreaFieldWidth("DataArea", context.zoom());
                        }));
                        _this._disposables.push(_this.totalsRowFieldWidth = ko.pureComputed(function () {
                            return _this.getTotalsAreaFieldWidth("RowArea", context.zoom());
                        }));
                        return _this;
                    }
                    XRPivotGridSurface.prototype._getChildrenHolderName = function () { return "fields"; };
                    XRPivotGridSurface.prototype.getAreaFields = function (area) {
                        return this.fields().filter(function (field) { return field.area() === area; }).sort(comparerFields);
                    };
                    XRPivotGridSurface.prototype.getTotalsAreaFieldWidth = function (area, zoom) {
                        var total = 0, areaFields = this.getAreaFields(area);
                        areaFields.forEach(function (field) { total += field.rect().width; });
                        return areaFields.length > 0 ? total / zoom : 100;
                    };
                    XRPivotGridSurface.prototype.getAdornTemplate = function () {
                        return this.isIntersect() ? "dxrd-intersect" : "";
                    };
                    XRPivotGridSurface.prototype.isThereIntersectionWithChildCollection = function () {
                        return false;
                    };
                    return XRPivotGridSurface;
                }(Controls.XRControlSurface));
                Controls.XRPivotGridSurface = XRPivotGridSurface;
                (function (Metadata) {
                    var linesAppearance = { propertyName: "linesAppearance", modelName: "Lines", displayName: "Lines", localizationId: "DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Lines", info: Controls.PivotGrid.Metadata.appearanceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.pivotGridAppearances = { propertyName: "appearances", modelName: "Appearance", displayName: "Appearance", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.Appearance", info: Controls.PivotGrid.Metadata.appearancesInfo.concat(linesAppearance), editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var criteriaString = { propertyName: "_criteriaString", modelName: "@CriteriaString" };
                    var criteriaStringEditable = { propertyName: "criteriaString", displayName: "Criteria", localizationId: "DevExpress.XtraPivotGrid.Prefilter.Criteria", defaultVal: "", editor: Widgets.editorTemplates.pivotCriteria };
                    var enabled = { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", localizationId: "DevExpress.XtraPivotGrid.PrefilterBase.Enabled", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                    var prefilterSerializationsInfo = [criteriaString, criteriaStringEditable, enabled];
                    Metadata.prefilter = { propertyName: "prefilter", modelName: "Prefilter", displayName: "Prefilter", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.Prefilter", info: prefilterSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var autoTransposeChart = { propertyName: "autoTransposeChart", modelName: "@AutoTransposeChart", displayName: "Auto Transpose Chart", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.AutoTransposeChart", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, dataProvideMode = {
                        propertyName: "dataProvideMode", modelName: "@DataProvideMode", displayName: "Data Provide Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.DataProvideMode", defaultVal: "ProvideLastLevelData", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "ProvideLastLevelData", displayValue: "Provide Last Level Data", localizationId: "DevExpress.XtraPivotGrid.PivotChartDataProvideMode.ProvideLastLevelData" },
                            { value: "UseCustomSettings", displayValue: "Use Custom Settings", localizationId: "DevExpress.XtraPivotGrid.PivotChartDataProvideMode.UseCustomSettings" }
                        ]
                    }, dataProvidePriority = {
                        propertyName: "dataProvidePriority", modelName: "@DataProvidePriority", displayName: "Data Provide Priority", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.DataProvidePriority", defaultVal: "Rows", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "Columns", displayValue: "Columns", localizationId: "DevExpress.XtraPivotGrid.PivotChartDataProvidePriority.Columns" },
                            { value: "Rows", displayValue: "Rows", localizationId: "DevExpress.XtraPivotGrid.PivotChartDataProvidePriority.Rows" }
                        ]
                    }, fieldValuesProvideMode = {
                        propertyName: "fieldValuesProvideMode", modelName: "@FieldValuesProvideMode", displayName: "Field Values Provide Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.FieldValuesProvideMode", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.PivotChartFieldValuesProvideMode.Default" },
                            { value: "DisplayText", displayValue: "Display Text", localizationId: "DevExpress.XtraPivotGrid.PivotChartFieldValuesProvideMode.DisplayText" },
                            { value: "Value", displayValue: "Value", localizationId: "DevExpress.XtraPivotGrid.PivotChartFieldValuesProvideMode.Value" }
                        ]
                    }, maxAllowedPointCountInSeries = { propertyName: "maxAllowedPointCountInSeries", modelName: "@MaxAllowedPointCountInSeries", displayName: "Max Allowed Point Count In Series", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.MaxAllowedPointCountInSeries", defaultVal: 100, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, maxAllowedSeriesCount = { propertyName: "maxAllowedSeriesCount", modelName: "@MaxAllowedSeriesCount", displayName: "Max Allowed Series Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.MaxAllowedSeriesCount", defaultVal: 10, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, provideColumnCustomTotals = { propertyName: "provideColumnCustomTotals", modelName: "@ProvideColumnCustomTotals", displayName: "Provide Column Custom Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideColumnCustomTotals", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, provideColumnGrandTotals = { propertyName: "provideColumnGrandTotals", modelName: "@ProvideColumnGrandTotals", displayName: "Provide Column Grand Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideColumnGrandTotals", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, provideColumnTotals = { propertyName: "provideColumnTotals", modelName: "@ProvideColumnTotals", displayName: "Provide Column Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideColumnTotals", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, provideDataByColumns = { propertyName: "provideDataByColumns", modelName: "@ProvideDataByColumns", displayName: "Provide Data By Columns", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideDataByColumns", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, provideDataFieldsOnSeries = { propertyName: "provideDataFieldsOnSeries", modelName: "@ProvideDataFieldsOnSeries", displayName: "Provide Data Fields On Series", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideDataFieldsOnSeries", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, provideEmptyCells = { propertyName: "provideEmptyCells", modelName: "@ProvideEmptyCells", displayName: "Provide Empty Cells", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideEmptyCells", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, provideRowCustomTotals = { propertyName: "provideRowCustomTotals", modelName: "@ProvideRowCustomTotals", displayName: "Provide Row Custom Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideRowCustomTotals", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, provideRowGrandTotals = { propertyName: "provideRowGrandTotals", modelName: "@ProvideRowGrandTotals", displayName: "Provide Row Grand Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideRowGrandTotals", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, provideRowTotals = { propertyName: "provideRowTotals", modelName: "@ProvideRowTotals", displayName: "Provide Row Totals", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideRowTotals", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, optionsChartDataSourceInfo = [autoTransposeChart, dataProvideMode, dataProvidePriority, fieldValuesProvideMode, maxAllowedPointCountInSeries,
                        maxAllowedSeriesCount, provideColumnCustomTotals, provideColumnGrandTotals, provideColumnTotals, provideDataByColumns, provideDataFieldsOnSeries, provideEmptyCells,
                        provideRowCustomTotals, provideRowGrandTotals, provideRowTotals], optionsChartDataSource = { propertyName: "optionsChartDataSource", modelName: "OptionsChartDataSource", displayName: "Options Chart Data Source", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsChartDataSource", info: optionsChartDataSourceInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var allowCrossGroupVariation = { propertyName: "allowCrossGroupVariation", modelName: "@AllowCrossGroupVariation", displayName: "Allow Cross Group Variation", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.AllowCrossGroupVariation", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, autoExpandGroups = { propertyName: "autoExpandGroups", modelName: "@AutoExpandGroups", displayName: "Aut oExpand Groups", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.AutoExpandGroups", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, caseSensitive = { propertyName: "caseSensitive", modelName: "@CaseSensitive", displayName: "Case Sensitive", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.CaseSensitive", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, dataFieldUnboundExpressionMode = {
                        propertyName: "dataFieldUnboundExpressionMode", modelName: "@DataFieldUnboundExpressionMode", displayName: "Data Field Unbound Expression Mode", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.DataFieldUnboundExpressionMode", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.DataFieldUnboundExpressionMode.Default" },
                            { value: "UseSummaryValues", displayValue: "Use Summary Values", localizationId: "DevExpress.XtraPivotGrid.DataFieldUnboundExpressionMode.UseSummaryValues" }
                        ]
                    }, drillDownMaxRowCount = { propertyName: "DrillDownMaxRowCount", modelName: "@DrillDownMaxRowCount", displayName: "Drill Down Max Row Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.DrillDownMaxRowCount", defaultVal: -1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, filterByVisibleFieldsOnly = { propertyName: "filterByVisibleFieldsOnly", modelName: "@FilterByVisibleFieldsOnly", displayName: "Filter By Visible Fields Only", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.FilterByVisibleFieldsOnly", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, dataProcessingEngine = {
                        propertyName: "dataProcessingEngine", modelName: "@DataProcessingEngine", displayName: "Data Processing Engine", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsData.DataProcessingEngine", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "Default", displayValue: "Default", localizationId: "DevExpress.XtraPivotGrid.PivotDataProcessingEngine.Default" },
                            { value: "Legacy", displayValue: "Legacy", localizationId: "DevExpress.XtraPivotGrid.PivotDataProcessingEngine.Legacy" },
                            { value: "LegacyOptimized", displayValue: "Legacy Optimized", localizationId: "DevExpress.XtraPivotGrid.PivotDataProcessingEngine.LegacyOptimized" }
                        ]
                    }, optionsDataInfo = [allowCrossGroupVariation, autoExpandGroups, caseSensitive, dataFieldUnboundExpressionMode, drillDownMaxRowCount, filterByVisibleFieldsOnly, dataProcessingEngine], optionsData = { propertyName: "optionsData", modelName: "OptionsData", displayName: "Data Options", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsData", info: optionsDataInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var area = {
                        propertyName: "area", modelName: "@Area", displayName: "Area", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataField.Area", defaultVal: "None", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "None", displayValue: "None", localizationId: "DevExpress.XtraPivotGrid.PivotDataArea.None" },
                            { value: "ColumnArea", displayValue: "Column Area", localizationId: "DevExpress.XtraPivotGrid.PivotDataArea.ColumnArea" },
                            { value: "RowArea", displayValue: "Row Area", localizationId: "DevExpress.XtraPivotGrid.PivotDataArea.RowArea" }
                        ]
                    }, areaIndex = { propertyName: "areaIndex", modelName: "@AreaIndex", displayName: "Area Index", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataField.AreaIndex", defaultVal: -1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, columnValueLineCount = { propertyName: "columnValueLineCount", modelName: "@ColumnValueLineCount", displayName: "Column Value Line Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataFieldEx.ColumnValueLineCount", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, fieldNaming = {
                        propertyName: "fieldNaming", modelName: "@FieldNaming", displayName: "Field Naming", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataField.FieldNaming", defaultVal: "FieldName", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "FieldName", displayValue: "Field Name", localizationId: "DevExpress.XtraPivotGrid.DataFieldNaming.FieldName" },
                            { value: "Name", displayValue: "Name", localizationId: "DevExpress.XtraPivotGrid.DataFieldNaming.Name" }
                        ]
                    }, rowHeaderWidth = { propertyName: "rowHeaderWidth", modelName: "@RowHeaderWidth", displayName: "Row Header Width", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataField.RowHeaderWidth", defaultVal: 100, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, rowValueLineCount = { propertyName: "rowValueLineCount", modelName: "@RowValueLineCount", displayName: "Row Value Line Count", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsDataFieldEx.RowValueLineCount", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, optionsDataFieldInfo = [area, areaIndex, Controls.PivotGrid.Metadata.caption, columnValueLineCount, fieldNaming, rowHeaderWidth, rowValueLineCount], optionsDataField = { propertyName: "optionsDataField", modelName: "OptionsDataField", displayName: "Data Field Options", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsDataField", info: optionsDataFieldInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var columnFieldValueSeparator = { propertyName: "columnFieldValueSeparator", modelName: "@ColumnFieldValueSeparator", displayName: "Column Field Value Separator", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.ColumnFieldValueSeparator", defaultVal: 0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, columnHeaderPaddingBottom = { propertyName: "columnHeaderPaddingBottom", modelName: "@ColumnHeaderPaddingBottom", displayName: "Column Header Padding Bottom", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.ColumnHeaderPaddingBottom", defaultVal: -1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, filterSeparatorBarPadding = { propertyName: "filterSeparatorBarPadding", modelName: "@FilterSeparatorBarPadding", displayName: "Filter Separator Bar Padding", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.FilterSeparatorBarPadding", defaultVal: -1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, mergeColumnFieldValues = { propertyName: "mergeColumnFieldValues", modelName: "@MergeColumnFieldValues", displayName: "Merge Column Field Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.MergeColumnFieldValues", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, mergeRowFieldValues = { propertyName: "mergeRowFieldValues", modelName: "@MergeRowFieldValues", displayName: "Merge Row Field Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.MergeRowFieldValues", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, printColumnFieldValues = { propertyName: "printColumnFieldValues", modelName: "@PrintColumnFieldValues", displayName: "Print Column FieldValues", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintColumnFieldValues", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, printColumnHeaders = { propertyName: "printColumnHeaders", modelName: "@PrintColumnHeaders", displayName: "Print Column Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintColumnHeaders", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, printDataHeaders = { propertyName: "printDataHeaders", modelName: "@PrintDataHeaders", displayName: "Print Data Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintDataHeaders", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, printFilterHeaders = { propertyName: "printFilterHeaders", modelName: "@PrintFilterHeaders", displayName: "Print Filter Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintFilterHeaders", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, printHeadersOnEveryPage = { propertyName: "printHeadersOnEveryPage", modelName: "@PrintHeadersOnEveryPage", displayName: "Print Headers on Every Page", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintHeadersOnEveryPage", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, printColumnAreaOnEveryPage = { propertyName: "printColumnAreaOnEveryPage", modelName: "@PrintColumnAreaOnEveryPage", displayName: "Print Column Area on Every Page", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintColumnAreaOnEveryPage", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, printRowAreaOnEveryPage = { propertyName: "printRowAreaOnEveryPage", modelName: "@PrintRowAreaOnEveryPage", displayName: "Print Row Area on Every Page", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintRowAreaOnEveryPage", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, printHorzLines = { propertyName: "printHorzLines", modelName: "@PrintHorzLines", displayName: "Print Horizontal Lines", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintHorzLines", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, printRowFieldValues = { propertyName: "printRowFieldValues", modelName: "@PrintRowFieldValues", displayName: "Print Row FieldValues", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintRowFieldValues", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, printRowHeaders = { propertyName: "printRowHeaders", modelName: "@PrintRowHeaders", displayName: "Print Row Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintRowHeaders", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, printUnusedFilterFields = { propertyName: "printUnusedFilterFields", modelName: "@PrintUnusedFilterFields", displayName: "Print Unused Filter Fields", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintUnusedFilterFields", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, printVertLines = { propertyName: "printVertLines", modelName: "@PrintVertLines", displayName: "Print Vertical Lines", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintVertLines", defaultVal: "Default", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: Controls.Metadata.defaultBooleanValuesArray }, rowFieldValueSeparator = { propertyName: "rowFieldValueSeparator", modelName: "@RowFieldValueSeparator", displayName: "Row Field Value Separator", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.RowFieldValueSeparator", defaultVal: 0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, usePrintAppearance = { propertyName: "usePrintAppearance", modelName: "@UsePrintAppearance", displayName: "Use Print Appearance", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.UsePrintAppearance", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, optionsPrintInfo = [columnFieldValueSeparator, columnHeaderPaddingBottom, filterSeparatorBarPadding, mergeColumnFieldValues, mergeRowFieldValues, printColumnAreaOnEveryPage, printColumnFieldValues, printColumnHeaders, printDataHeaders, printFilterHeaders,
                        printHeadersOnEveryPage, printHorzLines, printRowFieldValues, printRowHeaders, printRowAreaOnEveryPage, printUnusedFilterFields, printVertLines, rowFieldValueSeparator, usePrintAppearance], optionsPrint = { propertyName: "optionsPrint", modelName: "OptionsPrint", displayName: "Print Options", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsPrint", info: optionsPrintInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var columnTotalsLocation = { propertyName: "columnTotalsLocation", modelName: "@ColumnTotalsLocation", displayName: "Column Totals Location", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ColumnTotalsLocation", defaultVal: "Far", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [{ value: "Near", displayValue: "Near", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsLocation.Near" }, { value: "Far", displayValue: "Far ", localizationId: "DevExpress.XtraPivotGrid.PivotTotalsLocation.Far" }] }, groupFieldsInCustomizationWindow = { propertyName: "groupFieldsInCustomizationWindow", modelName: "@GroupFieldsInCustomizationWindow", displayName: "Group Fields in the Customization Window", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsView.GroupFieldsInCustomizationWindow", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, rowTotalsLocation = {
                        propertyName: "rowTotalsLocation", modelName: "@RowTotalsLocation", displayName: "Row Totals Location", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.RowTotalsLocation", defaultVal: "Far", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "Near", displayValue: "Near", localizationId: "DevExpress.XtraPivotGrid.PivotRowTotalsLocation.Near" },
                            { value: "Far", displayValue: "Far", localizationId: "DevExpress.XtraPivotGrid.PivotRowTotalsLocation.Far" },
                            { value: "Tree", displayValue: "Tree", localizationId: "DevExpress.XtraPivotGrid.PivotRowTotalsLocation.Tree" }
                        ]
                    }, rowTreeOffset = { propertyName: "rowTreeOffset", modelName: "@RowTreeOffset", displayName: "Row Tree Offset", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.RowTreeOffset", defaultVal: 21, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, rowTreeWidth = { propertyName: "rowTreeWidth", modelName: "@RowTreeWidth", displayName: "Row Tree Width", localizationId: "DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.RowTreeWidth", defaultVal: 100, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, showColumnGrandTotalHeader = { propertyName: "showColumnGrandTotalHeader", modelName: "@ShowColumnGrandTotalHeader", displayName: "Show Column Grand Total Header", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnGrandTotalHeader", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showColumnGrandTotals = { propertyName: "showColumnGrandTotals", modelName: "@ShowColumnGrandTotals", displayName: "Show Column Grand Totals", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnGrandTotals", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showColumnHeaders = { propertyName: "showColumnHeaders", modelName: "@ShowColumnHeaders", displayName: "Show Column Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnHeaders", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showColumnTotals = { propertyName: "showColumnTotals", modelName: "@ShowColumnTotals", displayName: "Show Column Totals", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnTotals", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showCustomTotalsForSingleValues = { propertyName: "showCustomTotalsForSingleValues", modelName: "@ShowCustomTotalsForSingleValues", displayName: "Show Custom Totals For Single Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowCustomTotalsForSingleValues", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showDataHeaders = { propertyName: "showDataHeaders", modelName: "@ShowDataHeaders", displayName: "Show Data Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowDataHeaders", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showFilterHeaders = { propertyName: "showFilterHeaders", modelName: "@ShowFilterHeaders", displayName: "Show Filter Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowFilterHeaders", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showFilterSeparatorBar = { propertyName: "showFilterSeparatorBar", modelName: "@ShowFilterSeparatorBar", displayName: "Show Filter Separator Bar", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowFilterSeparatorBar", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showGrandTotalsForSingleValues = { propertyName: "showGrandTotalsForSingleValues", modelName: "@ShowGrandTotalsForSingleValues", displayName: "Show Grand Totals For Single Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowGrandTotalsForSingleValues", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showHorzLines = { propertyName: "showHorzLines", modelName: "@ShowHorzLines", displayName: "Show Horz Lines", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowHorzLines", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showRowGrandTotalHeader = { propertyName: "showRowGrandTotalHeader", modelName: "@ShowRowGrandTotalHeader", displayName: "Show Row Grand Total Header", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowGrandTotalHeader", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showRowGrandTotals = { propertyName: "showRowGrandTotals", modelName: "@ShowRowGrandTotals", displayName: "Show Row Grand Totals", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowGrandTotals", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showRowHeaders = { propertyName: "showRowHeaders", modelName: "@ShowRowHeaders", displayName: "Show Row Headers", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowHeaders", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showRowTotals = { propertyName: "showRowTotals", modelName: "@ShowRowTotals", displayName: "Show Row Totals", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowTotals", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showTotalsForSingleValues = { propertyName: "showTotalsForSingleValues", modelName: "@ShowTotalsForSingleValues", displayName: "Show Totals For Single Values", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowTotalsForSingleValues", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, showVertLines = { propertyName: "showVertLines", modelName: "@ShowVertLines", displayName: "Show Vert Lines", localizationId: "DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowVertLines", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool }, optionsViewInfo = [columnTotalsLocation, groupFieldsInCustomizationWindow, rowTotalsLocation, rowTreeOffset, rowTreeWidth, showColumnGrandTotalHeader, showColumnGrandTotals, showColumnHeaders, showColumnTotals, showCustomTotalsForSingleValues,
                        showDataHeaders, showFilterHeaders, showFilterSeparatorBar, showGrandTotalsForSingleValues, showHorzLines, showRowGrandTotalHeader, showRowGrandTotals, showRowHeaders, showRowTotals,
                        showTotalsForSingleValues, showVertLines], optionsView = { propertyName: "optionsView", modelName: "OptionsView", displayName: "View Options", localizationId: "DevExpress.XtraReports.UI.XRPivotGrid.OptionsView", info: optionsViewInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.pivotGridOptions = [optionsChartDataSource, optionsDataField, optionsData, optionsPrint, optionsView];
                    Metadata.pivotGridSerializationsInfo = [
                        Metadata.pivotGridAppearances,
                        Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.dataSource, Metadata.dataMember, Metadata.prefilter,
                        Metadata.keepTogether,
                        Controls.PivotGrid.Metadata.pivotGridFieldsSerializable, Metadata.pivotScripts, Metadata.rtl
                    ].concat(Metadata.baseControlProperties, Metadata.sizeLocation, Metadata.bookmarkGroup, Metadata.pivotGridStyles, Metadata.pivotGridOptions);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var ReportViewModel = (function (_super) {
                    __extends(ReportViewModel, _super);
                    function ReportViewModel(report, serializer) {
                        var _this = this;
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        report = report.XtraReportsLayoutSerializer || report;
                        _this = _super.call(this, report, null, serializer) || this;
                        if (_this.pageWidth() === Metadata.pageWidth.defaultVal) {
                            _this.pageWidth(ReportViewModel.defaultPageSize.width);
                        }
                        if (_this.pageHeight() === Metadata.pageHeight.defaultVal) {
                            _this.pageHeight(ReportViewModel.defaultPageSize.height);
                        }
                        _this._dataBindingMode = ko.observable("");
                        _this._update = ko.observable(false);
                        _this._disposables.push(_this.isModelReady = ko.pureComputed(function () { return !_this._update(); }));
                        _this._disposables.push(_this.key = ko.pureComputed(function () { return _this.name(); }));
                        _this._disposables.push(_this["displayName"] = ko.pureComputed({
                            read: function () { return _this.displayNameObject(); },
                            write: function (newValue) { _this.displayNameObject(newValue); }
                        }));
                        _this.dataSourceRefs = [];
                        _this.dataSourceHelper = ko.observable();
                        _this.parameterHelper = new ReportParameterHelper();
                        _this._disposables.push(_this.measureUnit.subscribe(function (val) {
                            _this._update(true);
                            _this._recalculateUnits(val);
                            _this._update(false);
                        }));
                        _this._disposables.push(_this.landscape.subscribe(function (newVal) {
                            var width = _this.pageWidth();
                            _this.pageWidth(_this.pageHeight());
                            _this.pageHeight(width);
                        }));
                        _this._disposables.push(_this.dataSource.subscribe(function (newVal) {
                            if (!newVal) {
                                _this.dataMember(null);
                            }
                        }));
                        _this.styles = DevExpress.Analytics.Utils.deserializeArray(report.StyleSheet, function (item) { return new Controls.StyleModel(item, serializer); });
                        _this.objectStorage = DevExpress.Analytics.Utils.deserializeArray(report.ObjectStorage, function (item) { return Data.ObjectItem.createNew(item, _this.dsHelperProvider, serializer); });
                        _this.componentStorage = DevExpress.Analytics.Utils.deserializeArray(report.ComponentStorage, function (item) { return Data.ObjectItem.createNew(item, _this.dsHelperProvider, serializer); });
                        _this.objectStorage.push.apply(_this.objectStorage, _this.componentStorage().filter(function (item) { return ReportViewModel.availableDataSourceTypes.some(function (x) { return item.objectType().indexOf(x) !== -1; }); }));
                        _this.componentStorage.remove(function (item) { return ReportViewModel.availableDataSourceTypes.some(function (x) { return item.objectType().indexOf(x) !== -1; }); });
                        _this.objectsStorageHelper = new Data.ObjectsStorage(_this.objectStorage, _this.dsHelperProvider);
                        _this._disposables.push(_this.objectsStorageHelper);
                        _this.parameters = DevExpress.Analytics.Utils.deserializeArray(report.Parameters, function (item) { return new Data.Parameter(item, _this, _this.objectsStorageHelper, _this.parameterHelper, serializer); });
                        _this.objectStorage().forEach(function (objectStorage) {
                            if (objectStorage instanceof Data.UniversalDataSource) {
                                objectStorage["tableInfoCollection"]().forEach(function (tableInfoCollection) {
                                    tableInfoCollection.filterString().helper.parameters = _this.parameters;
                                });
                            }
                        });
                        _this.bands = DevExpress.Analytics.Utils.deserializeArray(report.Bands, function (item) { return _this.createControl(item, serializer); });
                        Bands.BandViewModel.initLevels(_this.bands());
                        _this.bands().sort(Bands.Internal.sortBands);
                        _this.extensions = DevExpress.Analytics.Utils.deserializeArray(report.Extensions, function (item) { return new Controls.ExtensionModel(item, serializer); });
                        _this.crossBandControls = DevExpress.Analytics.Utils.deserializeArray(report.CrossBandControls, function (item) { return _this.createControl(item, serializer); });
                        _this.calculatedFields = DevExpress.Analytics.Utils.deserializeArray(report.CalculatedFields, function (item) { return new Data.CalculatedField(item, serializer); });
                        _this._initializeBands();
                        _this.formattingRuleSheet = DevExpress.Analytics.Utils.deserializeArray(report.FormattingRuleSheet, function (item) { return new Controls.FormattingRule(item, _this, serializer); });
                        _this.components = ko.observableArray([]);
                        _this._disposables.push(_this.formattingRuleSheet.subscribe(function (args) {
                            args.forEach(function (rule) {
                                if (!rule.value.name()) {
                                    rule.value.name(DevExpress.Analytics.Internal.getUniqueNameForNamedObjectsArray(_this.formattingRuleSheet(), "formattingRule"));
                                }
                                if (!rule.value.parent) {
                                    rule.value.parent = _this;
                                }
                            });
                        }, null, "arrayChange"));
                        _this._disposables.push(_this.margins.left.subscribe(function (newVal) {
                            if (_this.isModelReady() && newVal > _this.pageWidth() - _this.margins.right()) {
                                _this.margins.right(_this.pageWidth() - _this.margins.left());
                            }
                        }));
                        _this._disposables.push(_this.margins.right.subscribe(function (newVal) {
                            if (_this.isModelReady() && newVal > _this.pageWidth() - _this.margins.left()) {
                                _this.margins.left(_this.pageWidth() - _this.margins.right());
                            }
                        }));
                        _this._disposables.push(_this.paperKind.subscribe(function (newVal) {
                            if (newVal !== "Custom") {
                                var size = DevExpress.Analytics.Internal.papperKindMapper[newVal];
                                _this.pageHeight(Math.round((_this.landscape() ? size.width : size.height) * (_this._innerDpi.peek() / 100) * 100) / 100);
                                _this.pageWidth(Math.round((_this.landscape() ? size.height : size.width) * (_this._innerDpi.peek() / 100) * 100) / 100);
                            }
                        }));
                        var dataMember = ko.pureComputed(function () {
                            return DevExpress.Analytics.Internal.getFullPath(_this.getPath("dataMember"), _this.dataMember());
                        });
                        var dataSource = _this.dataSource;
                        var disabled = ko.pureComputed(function () { return !dataSource(); });
                        var filterString = new DevExpress.Analytics.Widgets.FilterStringOptions(_this["_filterString"], dataMember, disabled);
                        _this._disposables.push(dataMember);
                        _this._disposables.push(disabled);
                        filterString.helper.parameters = _this.parameters;
                        _this["filterString"] = filterString;
                        _this._scriptReferencesString = ko.observable(_this.scriptReferencesString());
                        _this._disposables.push(_this.scriptReferencesString = ko.pureComputed({
                            read: function () { return _this._scriptReferencesString(); },
                            write: function (newVal) { _this._scriptReferencesString(newVal.replace(/\n/g, "\r\n")); }
                        }));
                        return _this;
                    }
                    ReportViewModel.prototype._getDpi = function (unitType) {
                        switch (unitType) {
                            case "HundredthsOfAnInch": return 100;
                            case "TenthsOfAMillimeter": return 254;
                            case "Pixels": return 96;
                        }
                    };
                    ReportViewModel.prototype._recalculateUnits = function (unitType) {
                        var newDpi = this._getDpi(unitType), oldDpi = this._innerDpi(), coef = newDpi / oldDpi;
                        DevExpress.Analytics.Internal.objectsVisitor(this, function (target) {
                            if (target && target["constructor"] && target["constructor"].unitProperties) {
                                for (var i = 0; i < target["constructor"].unitProperties.length; i++) {
                                    var propertyName = target["constructor"].unitProperties[i];
                                    var property = target["_" + propertyName] || target[propertyName];
                                    !!ko.unwrap(property) && property(Math.round(ko.unwrap(property) * coef * 100) / 100);
                                }
                                ;
                            }
                        });
                        this._innerDpi(newDpi);
                    };
                    ReportViewModel.prototype.findStyle = function (styleName) {
                        var result = null;
                        for (var i = 0; i < this.styles().length; i++) {
                            if (this.styles()[i].name() === styleName) {
                                return this.styles()[i];
                            }
                        }
                        ;
                        return result;
                    };
                    ReportViewModel.prototype._initializeBands = function () {
                        var traverse = function (xs) { return xs.reduce(function (res, x) { res.push.apply(res, [x].concat(traverse(ko.unwrap(x["bands"]) || []))); return res; }, []); };
                        var bandNames = traverse(this.bands()).map(function (x) { return x.name(); });
                        if (this.bands().length === 0) {
                            this.createChild({ "@ControlType": "DetailBand", "@Name": "Detail1" });
                        }
                        else if (DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this.bands(), "controlType", "DetailBand") === null && DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this.bands(), "controlType", "VerticalDetailBand") === null) {
                            this.createChild({ "@ControlType": "DetailBand", "@Name": DevExpress.Analytics.Internal.getUniqueName(bandNames, "Detail") });
                        }
                        if (DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this.bands(), "controlType", "TopMarginBand") === null) {
                            this.createChild({ "@ControlType": "TopMarginBand", "@Name": DevExpress.Analytics.Internal.getUniqueName(bandNames, "TopMargin") });
                        }
                        if (DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this.bands(), "controlType", "BottomMarginBand") === null) {
                            this.createChild({ "@ControlType": "BottomMarginBand", "@Name": DevExpress.Analytics.Internal.getUniqueName(bandNames, "BottomMargin") });
                        }
                    };
                    ReportViewModel.prototype.isPropertyDisabled = function (name) {
                        if (name === "pageWidth" || name === "pageHeight") {
                            return this.paperKind() !== "Custom";
                        }
                        else if (name === "dataMember") {
                            return this.dataSource() === null;
                        }
                        return _super.prototype.isPropertyDisabled.call(this, name);
                    };
                    ReportViewModel.prototype.getSubreportUrls = function () {
                    };
                    ReportViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.parameters);
                        this.disposeObservableArray(this.calculatedFields);
                        this.disposeObservableArray(this.crossBandControls);
                        this.disposeObservableArray(this.formattingRuleSheet);
                        this.disposeObservableArray(this.bands);
                        this.disposeObservableArray(this.objectStorage);
                        this.disposeObservableArray(this.styles);
                        this.resetObservableArray(this.componentStorage);
                        this.resetObservableArray(this.extensions);
                        this.resetObservableArray(this.objectStorage);
                        this.resetObservableArray(this.parameters);
                        this.resetObservableArray(this.calculatedFields);
                        this.resetObservableArray(this.crossBandControls);
                        this.resetObservableArray(this.formattingRuleSheet);
                        this.resetObservableArray(this.bands);
                        this.resetObservableArray(this.styles);
                        this.resetObservableArray(this.components);
                    };
                    ReportViewModel.prototype.preInitProperties = function () {
                        this.controlType = "DevExpress.XtraReports.UI.XtraReport";
                    };
                    ReportViewModel.prototype.initialize = function () {
                        _super.prototype.initialize.call(this);
                        this.size.height = this.pageHeight;
                        this.size.width = this.pageWidth;
                    };
                    ReportViewModel.prototype.getNearestParent = function (target) {
                        return this;
                    };
                    ReportViewModel.prototype.addChild = function (control) {
                        if (control instanceof XRCrossBandControlViewModel) {
                            control.parentModel(this);
                            control.startBand(this.bands()[0]);
                            control.endBand(this.bands()[0]);
                            this.crossBandControls.push(control);
                        }
                        else if (control instanceof Bands.BandViewModel) {
                            Bands.DetailReportBand.addBandToContainer(this, control);
                        }
                        else {
                            DevExpress.Analytics.Internal.NotifyAboutWarning("Attempt to add wrong child control.");
                        }
                    };
                    ReportViewModel.prototype.removeChild = function (control) {
                        if (control instanceof XRCrossBandControlViewModel) {
                            this.crossBandControls.splice(this.crossBandControls().indexOf(control), 1);
                        }
                        else if (control instanceof Bands.BandViewModel) {
                            if (this.bands().length > 1) {
                                this.bands.splice(this.bands().indexOf(control), 1);
                            }
                        }
                        else {
                            DevExpress.Analytics.Internal.NotifyAboutWarning("Attempt to remove wrong child control.");
                        }
                    };
                    ReportViewModel.prototype.serialize = function () {
                        return (new DevExpress.Analytics.Utils.ModelSerializer()).serialize(this);
                    };
                    ReportViewModel.prototype.save = function () {
                        var data = this.serialize();
                        if (this.onSave) {
                            this.onSave(data);
                        }
                        return data;
                    };
                    ReportViewModel.prototype.getPath = function (propertyName) {
                        var helper = ko.unwrap(this.dataSourceHelper);
                        if (!helper)
                            return;
                        var path = helper.getDataSourcePath(this.dataSource());
                        if (propertyName === "expression" && this.dataMember())
                            path += '.' + this.dataMember();
                        return path;
                    };
                    ReportViewModel.prototype.clone = function () {
                        var _this = this;
                        var dataSourceRefs = this.objectStorage().reduce(function (result, objectStorageItem, index) {
                            var dataSourceRef = _this.dataSourceRefs.filter(function (x) { return x.ref === objectStorageItem["_model"]["@Ref"]; })[0];
                            if (dataSourceRef) {
                                result.push({
                                    index: index,
                                    dataSourceRef: $.extend(true, {}, dataSourceRef)
                                });
                            }
                            return result;
                        }, []);
                        var report = new ReportViewModel(this.save());
                        report.dataSourceRefs = [];
                        dataSourceRefs.forEach(function (item) {
                            item.dataSourceRef.ref = report.objectStorage()[item.index]["_model"]["@Ref"];
                            report.dataSourceRefs.push(item.dataSourceRef);
                        });
                        return report;
                    };
                    ReportViewModel.prototype.isStyleProperty = function (propertyName) { return false; };
                    Object.defineProperty(ReportViewModel.prototype, "dataBindingMode", {
                        get: function () {
                            return this._dataBindingMode();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ReportViewModel.availableDataSourceTypes = ["DataSource", "ObjectSource"];
                    ReportViewModel.bandsTypeOrdering = ["TopMarginBand", "ReportHeaderBand", "PageHeaderBand", "GroupHeaderBand", "DetailBand", "DetailReportBand", "GroupFooterBand", "ReportFooterBand", "PageFooterBand", "BottomMarginBand"];
                    ReportViewModel.unitProperties = ["snapGridSize"];
                    ReportViewModel.defaultPageSize = {
                        width: 850,
                        height: 1100
                    };
                    return ReportViewModel;
                }(Controls.XRReportElementViewModel));
                Controls.ReportViewModel = ReportViewModel;
                var ReportSurface = (function (_super) {
                    __extends(ReportSurface, _super);
                    function ReportSurface(report, zoom) {
                        if (zoom === void 0) { zoom = ko.observable(1); }
                        var _this = _super.call(this, report, {
                            measureUnit: report.measureUnit, zoom: zoom
                        }, ReportSurface._unitProperties) || this;
                        _this.allowMultiselect = false;
                        _this.locked = false;
                        _this.focused = ko.observable(false);
                        _this.selected = ko.observable(false);
                        _this.templateName = ko.observable("dxrd-report");
                        _this.underCursor = ko.observable(new DevExpress.Analytics.Internal.HoverInfo());
                        _this.crossBandControls = ko.observableArray();
                        _this.minHeight = ko.observable();
                        _this.maxMarkerWidth = ko.observable();
                        _this.validationMode = ko.observable(false);
                        _this.parent = null;
                        _this.zoom = zoom;
                        _this.dpi = report.dpi;
                        _this._disposables.push(_this.rtl = ko.pureComputed(function () { return report.rtl() && report.rtlLayout() === "Yes"; }));
                        _this.measureUnit = report.measureUnit;
                        _this._context = _this;
                        _this._watermarkImageNaturalSize = ko.observable({ width: 0, height: 0 });
                        _this.drawWatermark = report.drawWatermark;
                        _this.watermark = report.watermark;
                        _this._disposables.push(report.watermark.image.subscribe(function (val) {
                            _this._updateWatermarkImageNaturalSize(val);
                        }));
                        _this._updateWatermarkImageNaturalSize(report.watermark.image.peek());
                        _this._disposables.push(_this._watermarkTextRenderingResult = ko.pureComputed(function () {
                            var canvas = document.createElement('canvas');
                            var originalWidthPx = DevExpress.Analytics.Internal.unitsToPixel(report.pageWidth(), _this.measureUnit());
                            var originalHeightPx = DevExpress.Analytics.Internal.unitsToPixel(report.pageHeight(), _this.measureUnit());
                            canvas.width = originalWidthPx;
                            canvas.height = originalHeightPx;
                            var context = canvas.getContext('2d');
                            context.translate(originalWidthPx / 2, originalHeightPx / 2);
                            switch (report.watermark.textDirection()) {
                                case 'Vertical':
                                    context.rotate(-Math.PI / 2);
                                    break;
                                case 'ForwardDiagonal':
                                    context.rotate(-50 * Math.PI / 180);
                                    break;
                                case 'BackwardDiagonal':
                                    context.rotate(50 * Math.PI / 180);
                            }
                            context.textAlign = 'center';
                            context.textBaseline = 'middle';
                            var font = new DevExpress.Analytics.Internal.CssCalculator(report.watermark, ko.observable(false)).fontCss();
                            context.font = [font.fontStyle.toLowerCase(), font.fontWeight.toLowerCase(), font.fontSize, font.fontFamily].filter(function (x) { return x; }).join(' ');
                            context.fillStyle = report.watermark.foreColor();
                            context.fillText(report.watermark.text(), 0, 0);
                            return canvas.toDataURL('image/png');
                        }));
                        _this._disposables.push(_this._width = ko.pureComputed({
                            read: function () {
                                return _this["pageWidth"]();
                            }
                        }));
                        _this._disposables.push(_this._height = ko.pureComputed({
                            read: function () {
                                return _this["pageHeight"]();
                            }
                        }));
                        _this.margins = {
                            bottom: _this["_bottom"],
                            left: _this._createMargin("_left", "_right"),
                            right: _this._createMargin("_right", "_left"),
                            top: _this["_top"]
                        };
                        _this._disposables.push(_this.pageWidthWithoutMargins = ko.computed(function () {
                            return _this.pageWidth() - _this.margins.left() - _this.margins.right();
                        }));
                        _this._disposables.push(_this.margins.left);
                        _this._disposables.push(_this.margins.right);
                        _this._disposables.push(_this.bandsHolder = new Bands.Internal.BandsHolder(_this));
                        _this.bandsHolder.initialize(report.bands);
                        _this._disposables.push(ko.computed(function () {
                            var levelCount = Bands.Internal.getLevelCount(_this.bandsHolder);
                            Bands.Internal.setMarkerWidth(_this.bandsHolder, levelCount, 0);
                            _this.maxMarkerWidth(Bands.BandSurface.collapsedHeight * levelCount + 22);
                        }));
                        _this._disposables.push(_this.effectiveHeight = ko.pureComputed(function () {
                            var minHeight = _this.bandsHolder.getHeight();
                            _this.minHeight(minHeight);
                            return minHeight;
                        }));
                        _this._disposables.push(DevExpress.Analytics.Internal.createObservableArrayMapCollection(report.crossBandControls, _this.crossBandControls, _this._createSurface));
                        _this._disposables.push(_this.ghostContainerOffset = ko.pureComputed(function () {
                            return _this.rtl() ? 0 : _this.margins.left();
                        }));
                        var marginOptions = new SurfaceMarginResizeOptions(_this.margins, _this.rtl, _this.pageWidth);
                        _this._disposables.push(marginOptions);
                        _this.rightMarginOffset = marginOptions.rightMarginOffset;
                        _this.leftMarginOffset = marginOptions.leftMarginOffset;
                        _this.rightMarginResizableOffset = marginOptions.rightMarginResizableOffset;
                        _this.leftMarginResizableOffset = marginOptions.leftMarginResizableOffset;
                        _this.leftMarginResizeOptions = marginOptions.leftMarginOptions;
                        _this.rightMarginResizeOptions = marginOptions.rightMarginOptions;
                        return _this;
                    }
                    ReportSurface.prototype._createMargin = function (side, oppositeSide) {
                        var _this = this;
                        return ko.pureComputed({
                            read: function () { return _this.rtl() ? _this[oppositeSide]() : _this[side](); },
                            write: function (value) {
                                _this.rtl() ? _this[oppositeSide](value) : _this[side](value);
                            }
                        });
                    };
                    ReportSurface.prototype._updateWatermarkImageNaturalSize = function (val) {
                        var _this = this;
                        if (!val)
                            return;
                        var image = new Image();
                        image.src = 'data:image/png;base64,' + val;
                        image.onload = function (e) {
                            _this._watermarkImageNaturalSize({ width: image.naturalWidth, height: image.naturalHeight });
                            image.onload = null;
                        };
                    };
                    Object.defineProperty(ReportSurface.prototype, "_unitAbsoluteRect", {
                        get: function () {
                            return {
                                top: 0, left: 0,
                                right: this._control.size.width(), bottom: this._control.size.height(),
                                width: this._control.size.width(), height: this._control.size.height(),
                            };
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ReportSurface.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.crossBandControls);
                        this.resetObservableArray(this.crossBandControls);
                    };
                    ReportSurface.prototype.getChildrenCollection = function () {
                        return this.bandsHolder.bands;
                    };
                    ReportSurface.prototype.isFit = function (dropTarget) {
                        return dropTarget.underCursor().y >= -0.1
                            && dropTarget.underCursor().x >= 0
                            && ((this === dropTarget) ? this.effectiveHeight() : dropTarget.rect().height) > dropTarget.underCursor().y
                            && (this.pageWidth() - this.margins.left()) > dropTarget.underCursor().x;
                    };
                    ReportSurface.prototype.canDrop = function () { return true; };
                    ReportSurface.prototype.wrapRtlProperty = function (data, undoEngine, element) {
                        var _this = this;
                        var wrapper = ko.computed({
                            read: data.value,
                            write: function (newValue) {
                                undoEngine.peek().start();
                                var prevValue = _this.rtl.peek();
                                data.value(newValue);
                                if (prevValue !== _this.rtl.peek()) {
                                    var report = _this.getControlModel();
                                    var left = report.margins.left();
                                    report.margins.left(report.margins.right());
                                    report.margins.right(left);
                                }
                                undoEngine.peek().end();
                            }
                        });
                        DevExpress.Analytics.Internal.addDisposeCallback(element, function () { wrapper.dispose(); });
                        return $.extend({}, data, { value: wrapper });
                    };
                    ReportSurface.prototype.checkParent = function (surfaceParent) { return false; };
                    ReportSurface._unitProperties = {
                        _width: function (o) { return o.size.width; },
                        _height: function (o) { return o.size.height; },
                        pageWidth: function (o) { return o.size.width; },
                        pageHeight: function (o) { return o.size.height; },
                        snapGridSize: function (o) {
                            return o.snapGridSize;
                        },
                        _bottom: function (o) { return o.margins.bottom; },
                        _left: function (o) { return o.margins.left; },
                        _right: function (o) { return o.margins.right; },
                        _top: function (o) { return o.margins.top; }
                    };
                    return ReportSurface;
                }(DevExpress.Analytics.Elements.SurfaceElementArea));
                Controls.ReportSurface = ReportSurface;
                var SurfaceMarginResizeOptions = (function (_super) {
                    __extends(SurfaceMarginResizeOptions, _super);
                    function SurfaceMarginResizeOptions(margins, rtl, pageWidth) {
                        var _this = _super.call(this) || this;
                        _this.rtl = rtl;
                        _this.handle = "w";
                        _this.oppositeHandle = "e";
                        var elements = [];
                        _this._disposables.push(rtl.subscribe(function (value) {
                            $(elements).find(".ui-resizable-e, .ui-resizable-w")
                                .removeClass("ui-resizable-" + (value ? _this.handle : _this.oppositeHandle))
                                .addClass("ui-resizable-" + (value ? _this.oppositeHandle : _this.handle));
                        }));
                        var rightOptions = null;
                        var leftOptions = null;
                        _this._disposables.push(_this.rightMarginOffset = ko.pureComputed(function () {
                            return rtl() ? 0 : pageWidth() - margins.left() - margins.right();
                        }));
                        _this._disposables.push(_this.leftMarginOffset = ko.pureComputed(function () {
                            return rtl() ? pageWidth() - margins.left() : 0;
                        }));
                        _this._disposables.push(_this.rightMarginResizableOffset = ko.pureComputed(function () {
                            return rtl() ? margins.right() : _this.rightMarginOffset();
                        }));
                        _this._disposables.push(_this.leftMarginResizableOffset = ko.pureComputed(function () {
                            return rtl() ? margins.right() : 0;
                        }));
                        _this.rightMarginOptions = function (undoEngine, element) {
                            if (!rightOptions) {
                                var margin = margins.right();
                                var maxRightMargin = pageWidth() - margins.left() - 1;
                                rightOptions = _this._createOptions(undoEngine, function (ui) {
                                    margin = margins.right();
                                    maxRightMargin = pageWidth() - margins.left() - 1;
                                    $(ui.element).resizable("option", "minWidth", 0);
                                    $(ui.element).resizable("option", "maxWidth", maxRightMargin);
                                }, function (ui) {
                                    margins.right(Math.min(Math.max(0, ui.size.width - ui.originalSize.width + margin), maxRightMargin));
                                    if (!ui.element.hasClass("dxrd-ruler-shadow")) {
                                        $(ui.element).css({ left: _this.rightMarginResizableOffset(), width: 0 });
                                    }
                                    else {
                                        $(ui.element).css({ left: _this.rightMarginOffset() });
                                    }
                                });
                                _this._disposables.push(rightOptions);
                            }
                            elements.push(element);
                            return rightOptions;
                        };
                        _this.leftMarginOptions = function (undoEngine, element) {
                            if (!leftOptions) {
                                leftOptions = _this._createOptions(undoEngine, function (ui) {
                                    $(ui.element).resizable("option", "minWidth", 0);
                                    $(ui.element).resizable("option", "maxWidth", pageWidth() - margins.right() - 1);
                                }, function (ui) {
                                    margins.left(pageWidth() - Math.max(0, ui.size.width) - margins.right());
                                    $(ui.element).css({ left: _this.leftMarginResizableOffset(), width: (pageWidth() - margins.left() - margins.right()) });
                                });
                                _this._disposables.push(leftOptions);
                            }
                            elements.push(element);
                            return leftOptions;
                        };
                        return _this;
                    }
                    SurfaceMarginResizeOptions.prototype._createOptions = function (undoEngine, startDelegate, resizeDelegate) {
                        var _this = this;
                        return ko.computed(function () {
                            return {
                                handles: _this.rtl() ? _this.oppositeHandle : _this.handle,
                                start: function (e, ui) {
                                    startDelegate(ui);
                                    undoEngine().start();
                                },
                                resize: function (e, ui) {
                                    resizeDelegate(ui);
                                },
                                stop: function (e, ui) {
                                    undoEngine().end();
                                },
                                disabled: DevExpress.Analytics.Internal.DragDropHandler.started
                            };
                        });
                    };
                    return SurfaceMarginResizeOptions;
                }(DevExpress.Analytics.Utils.Disposable));
                (function (Metadata) {
                    Metadata.paperKind = {
                        propertyName: "paperKind", modelName: "@PaperKind", defaultVal: "Letter", displayName: "Paper Kind", localizationId: "DevExpress.XtraReports.UI.XtraReport.PaperKind",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "A2", displayValue: "A2", localizationId: "System.Drawing.Printing.PaperKind.A2" },
                            { value: "A3", displayValue: "A3", localizationId: "System.Drawing.Printing.PaperKind.A3" },
                            { value: "A3Extra", displayValue: "A3Extra", localizationId: "System.Drawing.Printing.PaperKind.A3Extra" },
                            { value: "A3ExtraTransverse", displayValue: "A3ExtraTransverse", localizationId: "System.Drawing.Printing.PaperKind.A3ExtraTransverse" },
                            { value: "A3Rotated", displayValue: "A3Rotated", localizationId: "System.Drawing.Printing.PaperKind.A3Rotated" },
                            { value: "A3Transverse", displayValue: "A3Transverse", localizationId: "System.Drawing.Printing.PaperKind.A3Transverse" },
                            { value: "A4", displayValue: "A4", localizationId: "System.Drawing.Printing.PaperKind.A4" },
                            { value: "A4Extra", displayValue: "A4Extra", localizationId: "System.Drawing.Printing.PaperKind.A4Extra" },
                            { value: "A4Plus", displayValue: "A4Plus", localizationId: "System.Drawing.Printing.PaperKind.A4Plus" },
                            { value: "A4Rotated", displayValue: "A4Rotated", localizationId: "System.Drawing.Printing.PaperKind.A4Rotated" },
                            { value: "A4Small", displayValue: "A4Small", localizationId: "System.Drawing.Printing.PaperKind.A4Small" },
                            { value: "A4Transverse", displayValue: "A4Transverse", localizationId: "System.Drawing.Printing.PaperKind.A4Transverse" },
                            { value: "A5", displayValue: "A5", localizationId: "System.Drawing.Printing.PaperKind.A5" },
                            { value: "A5Extra", displayValue: "A5Extra", localizationId: "System.Drawing.Printing.PaperKind.A5Extra" },
                            { value: "A5Rotated", displayValue: "A5Rotated", localizationId: "System.Drawing.Printing.PaperKind.A5Rotated" },
                            { value: "A5Transverse", displayValue: "A5Transverse", localizationId: "System.Drawing.Printing.PaperKind.A5Transverse" },
                            { value: "A6", displayValue: "A6", localizationId: "System.Drawing.Printing.PaperKind.A6" },
                            { value: "A6Rotated", displayValue: "A6Rotated", localizationId: "System.Drawing.Printing.PaperKind.A6Rotated" },
                            { value: "APlus", displayValue: "APlus", localizationId: "System.Drawing.Printing.PaperKind.APlus" },
                            { value: "B4", displayValue: "B4", localizationId: "System.Drawing.Printing.PaperKind.B4" },
                            { value: "B4Envelope", displayValue: "B4Envelope", localizationId: "System.Drawing.Printing.PaperKind.B4Envelope" },
                            { value: "B4JisRotated", displayValue: "B4JisRotated", localizationId: "System.Drawing.Printing.PaperKind.B4JisRotated" },
                            { value: "B5", displayValue: "B5", localizationId: "System.Drawing.Printing.PaperKind.B5" },
                            { value: "B5Envelope", displayValue: "B5Envelope", localizationId: "System.Drawing.Printing.PaperKind.B5Envelope" },
                            { value: "B5Extra", displayValue: "B5Extra", localizationId: "System.Drawing.Printing.PaperKind.B5Extra" },
                            { value: "B5JisRotated", displayValue: "B5JisRotated", localizationId: "System.Drawing.Printing.PaperKind.B5JisRotated" },
                            { value: "B5Transverse", displayValue: "B5Transverse", localizationId: "System.Drawing.Printing.PaperKind.B5Transverse" },
                            { value: "B6Envelope", displayValue: "B6Envelope", localizationId: "System.Drawing.Printing.PaperKind.B6Envelope" },
                            { value: "B6Jis", displayValue: "B6Jis", localizationId: "System.Drawing.Printing.PaperKind.B6Jis" },
                            { value: "B6JisRotated", displayValue: "B6JisRotated", localizationId: "System.Drawing.Printing.PaperKind.B6JisRotated" },
                            { value: "BPlus", displayValue: "BPlus", localizationId: "System.Drawing.Printing.PaperKind.BPlus" },
                            { value: "C3Envelope", displayValue: "C3Envelope", localizationId: "System.Drawing.Printing.PaperKind.C3Envelope" },
                            { value: "C4Envelope", displayValue: "C4Envelope", localizationId: "System.Drawing.Printing.PaperKind.C4Envelope" },
                            { value: "C5Envelope", displayValue: "C5Envelope", localizationId: "System.Drawing.Printing.PaperKind.C5Envelope" },
                            { value: "C65Envelope", displayValue: "C65Envelope", localizationId: "System.Drawing.Printing.PaperKind.C65Envelope" },
                            { value: "C6Envelope", displayValue: "C6Envelope", localizationId: "System.Drawing.Printing.PaperKind.C6Envelope" },
                            { value: "CSheet", displayValue: "CSheet", localizationId: "System.Drawing.Printing.PaperKind.CSheet" },
                            { value: "Custom", displayValue: "Custom", localizationId: "System.Drawing.Printing.PaperKind.Custom" },
                            { value: "DLEnvelope", displayValue: "DLEnvelope", localizationId: "System.Drawing.Printing.PaperKind.DLEnvelope" },
                            { value: "DSheet", displayValue: "DSheet", localizationId: "System.Drawing.Printing.PaperKind.DSheet" },
                            { value: "ESheet", displayValue: "ESheet", localizationId: "System.Drawing.Printing.PaperKind.ESheet" },
                            { value: "Executive", displayValue: "Executive", localizationId: "System.Drawing.Printing.PaperKind.Executive" },
                            { value: "Folio", displayValue: "Folio", localizationId: "System.Drawing.Printing.PaperKind.Folio" },
                            { value: "GermanLegalFanfold", displayValue: "GermanLegalFanfold", localizationId: "System.Drawing.Printing.PaperKind.GermanLegalFanfold" },
                            { value: "GermanStandardFanfold", displayValue: "GermanStandardFanfold", localizationId: "System.Drawing.Printing.PaperKind.GermanStandardFanfold" },
                            { value: "InviteEnvelope", displayValue: "InviteEnvelope", localizationId: "System.Drawing.Printing.PaperKind.InviteEnvelope" },
                            { value: "IsoB4", displayValue: "IsoB4", localizationId: "System.Drawing.Printing.PaperKind.IsoB4" },
                            { value: "ItalyEnvelope", displayValue: "ItalyEnvelope", localizationId: "System.Drawing.Printing.PaperKind.ItalyEnvelope" },
                            { value: "JapaneseDoublePostcard", displayValue: "JapaneseDoublePostcard", localizationId: "System.Drawing.Printing.PaperKind.JapaneseDoublePostcard" },
                            { value: "JapaneseDoublePostcardRotated", displayValue: "JapaneseDoublePostcardRotated", localizationId: "System.Drawing.Printing.PaperKind.JapaneseDoublePostcardRotated" },
                            { value: "JapanesePostcard", displayValue: "JapanesePostcard", localizationId: "System.Drawing.Printing.PaperKind.JapanesePostcard" },
                            { value: "Ledger", displayValue: "Ledger", localizationId: "System.Drawing.Printing.PaperKind.Ledger" },
                            { value: "Legal", displayValue: "Legal", localizationId: "System.Drawing.Printing.PaperKind.Legal" },
                            { value: "LegalExtra", displayValue: "LegalExtra", localizationId: "System.Drawing.Printing.PaperKind.LegalExtra" },
                            { value: "Letter", displayValue: "Letter", localizationId: "System.Drawing.Printing.PaperKind.Letter" },
                            { value: "LetterExtra", displayValue: "LetterExtra", localizationId: "System.Drawing.Printing.PaperKind.LetterExtra" },
                            { value: "LetterExtraTransverse", displayValue: "LetterExtraTransverse", localizationId: "System.Drawing.Printing.PaperKind.LetterExtraTransverse" },
                            { value: "LetterPlus", displayValue: "LetterPlus", localizationId: "System.Drawing.Printing.PaperKind.LetterPlus" },
                            { value: "LetterRotated", displayValue: "LetterRotated", localizationId: "System.Drawing.Printing.PaperKind.LetterRotated" },
                            { value: "LetterSmall", displayValue: "LetterSmall", localizationId: "System.Drawing.Printing.PaperKind.LetterSmall" },
                            { value: "LetterTransverse", displayValue: "LetterTransverse", localizationId: "System.Drawing.Printing.PaperKind.LetterTransverse" },
                            { value: "MonarchEnvelope", displayValue: "MonarchEnvelope", localizationId: "System.Drawing.Printing.PaperKind.MonarchEnvelope" },
                            { value: "Note", displayValue: "Note", localizationId: "System.Drawing.Printing.PaperKind.Note" },
                            { value: "Number10Envelope", displayValue: "Number10Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number10Envelope" },
                            { value: "Number11Envelope", displayValue: "Number11Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number11Envelope" },
                            { value: "Number12Envelope", displayValue: "Number12Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number12Envelope" },
                            { value: "Number14Envelope", displayValue: "Number14Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number14Envelope" },
                            { value: "Number9Envelope", displayValue: "Number9Envelope", localizationId: "System.Drawing.Printing.PaperKind.Number9Envelope" },
                            { value: "PersonalEnvelope", displayValue: "PersonalEnvelope", localizationId: "System.Drawing.Printing.PaperKind.PersonalEnvelope" },
                            { value: "Prc16K", displayValue: "Prc16K", localizationId: "System.Drawing.Printing.PaperKind.Prc16K" },
                            { value: "Prc16KRotated", displayValue: "Prc16KRotated", localizationId: "System.Drawing.Printing.PaperKind.Prc16KRotated" },
                            { value: "Prc32K", displayValue: "Prc32K", localizationId: "System.Drawing.Printing.PaperKind.Prc32K" },
                            { value: "Prc32KBig", displayValue: "Prc32KBig", localizationId: "System.Drawing.Printing.PaperKind.Prc32KBig" },
                            { value: "Prc32KBigRotated", displayValue: "Prc32KBigRotated", localizationId: "System.Drawing.Printing.PaperKind.Prc32KBigRotated" },
                            { value: "Prc32KRotated", displayValue: "Prc32KRotated", localizationId: "System.Drawing.Printing.PaperKind.Prc32KRotated" },
                            { value: "PrcEnvelopeNumber1", displayValue: "PrcEnvelopeNumber1", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber1" },
                            { value: "PrcEnvelopeNumber10", displayValue: "PrcEnvelopeNumber10", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber10" },
                            { value: "PrcEnvelopeNumber10Rotated", displayValue: "PrcEnvelopeNumber10Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber10Rotated" },
                            { value: "PrcEnvelopeNumber1Rotated", displayValue: "PrcEnvelopeNumber1Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber1Rotated" },
                            { value: "PrcEnvelopeNumber2", displayValue: "PrcEnvelopeNumber2", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber2" },
                            { value: "PrcEnvelopeNumber2Rotated", displayValue: "PrcEnvelopeNumber2Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber2Rotated" },
                            { value: "PrcEnvelopeNumber3", displayValue: "PrcEnvelopeNumber3", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber3" },
                            { value: "PrcEnvelopeNumber3Rotated", displayValue: "PrcEnvelopeNumber3Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber3Rotated" },
                            { value: "PrcEnvelopeNumber4", displayValue: "PrcEnvelopeNumber4", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber4" },
                            { value: "PrcEnvelopeNumber4Rotated", displayValue: "PrcEnvelopeNumber4Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber4Rotated" },
                            { value: "PrcEnvelopeNumber5", displayValue: "PrcEnvelopeNumber5", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber5" },
                            { value: "PrcEnvelopeNumber5Rotated", displayValue: "PrcEnvelopeNumber5Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber5Rotated" },
                            { value: "PrcEnvelopeNumber6", displayValue: "PrcEnvelopeNumber6", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber6" },
                            { value: "PrcEnvelopeNumber6Rotated", displayValue: "PrcEnvelopeNumber6Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber6Rotated" },
                            { value: "PrcEnvelopeNumber7", displayValue: "PrcEnvelopeNumber7", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber7" },
                            { value: "PrcEnvelopeNumber7Rotated", displayValue: "PrcEnvelopeNumber7Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber7Rotated" },
                            { value: "PrcEnvelopeNumber8", displayValue: "PrcEnvelopeNumber8", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber8" },
                            { value: "PrcEnvelopeNumber8Rotated", displayValue: "PrcEnvelopeNumber8Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber8Rotated" },
                            { value: "PrcEnvelopeNumber9", displayValue: "PrcEnvelopeNumber9", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber9" },
                            { value: "PrcEnvelopeNumber9Rotated", displayValue: "PrcEnvelopeNumber9Rotated", localizationId: "System.Drawing.Printing.PaperKind.PrcEnvelopeNumber9Rotated" },
                            { value: "Quarto", displayValue: "Quarto", localizationId: "System.Drawing.Printing.PaperKind.Quarto" },
                            { value: "Standard10x11", displayValue: "Standard10x11", localizationId: "System.Drawing.Printing.PaperKind.Standard10x11" },
                            { value: "Standard10x14", displayValue: "Standard10x14", localizationId: "System.Drawing.Printing.PaperKind.Standard10x14" },
                            { value: "Standard11x17", displayValue: "Standard11x17", localizationId: "System.Drawing.Printing.PaperKind.Standard11x17" },
                            { value: "Standard12x11", displayValue: "Standard12x11", localizationId: "System.Drawing.Printing.PaperKind.Standard12x11" },
                            { value: "Standard15x11", displayValue: "Standard15x11", localizationId: "System.Drawing.Printing.PaperKind.Standard15x11" },
                            { value: "Standard9x11", displayValue: "Standard9x11", localizationId: "System.Drawing.Printing.PaperKind.Standard9x11" },
                            { value: "Statement", displayValue: "Statement", localizationId: "System.Drawing.Printing.PaperKind.Statement" },
                            { value: "Tabloid", displayValue: "Tabloid", localizationId: "System.Drawing.Printing.PaperKind.Tabloid" },
                            { value: "TabloidExtra", displayValue: "TabloidExtra", localizationId: "System.Drawing.Printing.PaperKind.TabloidExtra" },
                            { value: "USStandardFanfold", displayValue: "USStandardFanfold", localizationId: "System.Drawing.Printing.PaperKind.USStandardFanfold" }
                        ]
                    };
                    Metadata.landscape = { propertyName: "landscape", modelName: "@Landscape", displayName: "Landscape", localizationId: "DevExpress.XtraReports.UI.XtraReport.Landscape", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.margins = { propertyName: "margins", modelName: "@Margins", from: DevExpress.Analytics.Elements.Margins.fromString, displayName: "Margins", localizationId: "DevExpress.XtraReports.UI.XtraReport.Analytics.Elements.Margins", editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.pageColor = { propertyName: "pageColor", modelName: "@PageColor", defaultVal: "White", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, displayName: "Page Color", localizationId: "DevExpress.XtraReports.UI.XtraReport.PageColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor };
                    Metadata.measureUnit = {
                        propertyName: "measureUnit",
                        modelName: "@ReportUnit", defaultVal: "HundredthsOfAnInch", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, displayName: "Measure Units", localizationId: "DevExpress.XtraReports.UI.XtraReport.ReportUnit", from: DevExpress.Analytics.Utils.fromEnum,
                        valuesArray: [
                            { value: "HundredthsOfAnInch", displayValue: "Hundredths of an Inch", localizationId: "DevExpress.XtraReports.UI.ReportUnit.HundredthsOfAnInch" },
                            { value: "TenthsOfAMillimeter", displayValue: "Tenths of a Millimeter", localizationId: "DevExpress.XtraReports.UI.ReportUnit.TenthsOfAMillimeter" },
                            { value: "Pixels", displayValue: "Pixels", localizationId: "DevExpress.XtraReports.UI.ReportUnit.Pixels" }
                        ]
                    };
                    Metadata.snapGridSize = { propertyName: "snapGridSize", modelName: "@SnapGridSize", defaultVal: 12.5, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Snap Grid Size", localizationId: "DevExpress.XtraReports.UI.XtraReport.SnapGridSize" };
                    Metadata.drawWatermark = { propertyName: "drawWatermark", modelName: "@DrawWatermark", displayName: "Draw the Watermark", localizationId: "DevExpress.XtraReports.UI.XtraReport.DrawWatermark", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.showPreviewMarginLines = { propertyName: "showPreviewMarginLines", modelName: "@ShowPreviewMarginLines", displayName: "Show Margin Lines in Preview", localizationId: "DevExpress.XtraReports.UI.XtraReport.ShowPreviewMarginLines", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.verticalContentSplitting = {
                        propertyName: "verticalContentSplitting",
                        modelName: "@VerticalContentSplitting", displayName: "Vertical Content Splitting", localizationId: "DevExpress.XtraReports.UI.XtraReport.VerticalContentSplitting", defaultVal: "Exact", from: DevExpress.Analytics.Utils.fromEnum,
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "Exact", displayValue: "Exact", localizationId: "DevExpress.XtraPrinting.VerticalContentSplitting.Exact" },
                            { value: "Smart", displayValue: "Smart", localizationId: "DevExpress.XtraPrinting.VerticalContentSplitting.Smart" }
                        ]
                    };
                    Metadata.reportExportOptionsSerializationInfo = { propertyName: "exportOptions", modelName: "ExportOptions", displayName: "Export Options", localizationId: "DevExpress.XtraReports.UI.XtraReport.ExportOptions", from: Reporting.Export.ExportOptions.from, toJsonObject: Reporting.Export.ExportOptions.toJson, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.foreColorWatermark = $.extend({}, Metadata.foreColor, { defaultVal: "Red" });
                    Metadata.fontWatermark = $.extend({}, Metadata.font, { defaultVal: "Verdana, 36pt" });
                    Metadata.watermarkSerializationsInfo = [
                        Metadata.fontWatermark, Metadata.foreColorWatermark,
                        { propertyName: "textTransparency", modelName: "@TextTransparency", displayName: "Text Transparency", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.TextTransparency", defaultVal: 50, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric },
                        {
                            propertyName: "text", modelName: "@Text", displayName: "Text", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.Text", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.comboboxEditable,
                            valuesArray: [{ value: "ASAP", displayValue: "ASAP", localizationId: 'PreviewStringId.WMForm_Watermark_Asap' }, { value: "CONFIDENTIAL", displayValue: "CONFIDENTIAL", localizationId: 'PreviewStringId.WMForm_Watermark_Confidential' }, { value: "COPY", displayValue: "COPY", localizationId: 'PreviewStringId.WMForm_Watermark_Copy' }, { value: "DO NOT COPY", displayValue: "DO NOT COPY", localizationId: 'PreviewStringId.WMForm_Watermark_DoNotCopy' }, { value: "DRAFT", displayValue: "DRAFT", localizationId: 'PreviewStringId.WMForm_Watermark_Draft' }, { value: "EVALUATION", displayValue: "EVALUATION", localizationId: 'PreviewStringId.WMForm_Watermark_Evaluation' }, { value: "ORIGINAL", displayValue: "ORIGINAL", localizationId: 'PreviewStringId.WMForm_Watermark_Original' }, { value: "PERSONAL", displayValue: "PERSONAL", localizationId: 'PreviewStringId.WMForm_Watermark_Personal' }, { value: "SAMPLE", displayValue: "SAMPLE", localizationId: 'PreviewStringId.WMForm_Watermark_Sample' }, { value: "TOP SECRET", displayValue: "TOP SECRET", localizationId: 'PreviewStringId.WMForm_Watermark_TopSecret' }, { value: "URGENT", displayValue: "URGENT", localizationId: 'PreviewStringId.WMForm_Watermark_Urgent' }]
                        },
                        {
                            propertyName: "textDirection", modelName: "@TextDirection", displayName: "Text Direction", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.TextDirection", defaultVal: "ForwardDiagonal", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: [
                                { value: "Horizontal", displayValue: "Horizontal", localizationId: "DevExpress.XtraPrinting.Drawing.DirectionMode.Horizontal" },
                                { value: "ForwardDiagonal", displayValue: "ForwardDiagonal", localizationId: "DevExpress.XtraPrinting.Drawing.DirectionMode.ForwardDiagonal" },
                                { value: "BackwardDiagonal", displayValue: "BackwardDiagonal", localizationId: "DevExpress.XtraPrinting.Drawing.DirectionMode.BackwardDiagonal" },
                                { value: "Vertical", displayValue: "Vertical", localizationId: "DevExpress.XtraPrinting.Drawing.DirectionMode.Vertical" }
                            ]
                        },
                        { propertyName: "image", modelName: "@Image", displayName: "Image", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.Image", editor: DevExpress.Analytics.Widgets.editorTemplates.image },
                        { propertyName: "imageTransparency", modelName: "@ImageTransparency", displayName: "Image Transparency", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ImageTransparency", defaultVal: 0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric },
                        { propertyName: "imageTiling", modelName: "@ImageTiling", displayName: "Image Tiling", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ImageTiling", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool },
                        {
                            propertyName: "imageAlign", modelName: "@ImageAlign", displayName: "Image Alignment", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ImageAlign", defaultVal: "MiddleCenter", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: [
                                { value: "TopLeft", displayValue: "TopLeft", localizationId: "System.Drawing.ContentAlignment.TopLeft" },
                                { value: "TopCenter", displayValue: "TopCenter", localizationId: "System.Drawing.ContentAlignment.TopCenter" },
                                { value: "TopRight", displayValue: "TopRight", localizationId: "System.Drawing.ContentAlignment.TopRight" },
                                { value: "MiddleLeft", displayValue: "MiddleLeft", localizationId: "System.Drawing.ContentAlignment.MiddleLeft" },
                                { value: "MiddleCenter", displayValue: "MiddleCenter", localizationId: "System.Drawing.ContentAlignment.MiddleCenter" },
                                { value: "MiddleRight", displayValue: "MiddleRight", localizationId: "System.Drawing.ContentAlignment.MiddleRight" },
                                { value: "BottomLeft", displayValue: "BottomLeft", localizationId: "System.Drawing.ContentAlignment.BottomLeft" },
                                { value: "BottomCenter", displayValue: "BottomCenter", localizationId: "System.Drawing.ContentAlignment.BottomCenter" },
                                { value: "BottomRight", displayValue: "BottomRight", localizationId: "System.Drawing.ContentAlignment.BottomRight" }
                            ]
                        },
                        {
                            propertyName: "imageViewMode", modelName: "@ImageViewMode", displayName: "Image View Mode", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ImageViewMode", defaultVal: "Clip", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                                { value: "Clip", displayValue: "Clip", localizationId: "DevExpress.XtraPrinting.Drawing.ImageViewMode.Clip" },
                                { value: "Stretch", displayValue: "Stretch", localizationId: "DevExpress.XtraPrinting.Drawing.ImageViewMode.Stretch" },
                                { value: "Zoom", displayValue: "Zoom", localizationId: "DevExpress.XtraPrinting.Drawing.ImageViewMode.Zoom" }
                            ]
                        },
                        { propertyName: "pageRange", modelName: "@PageRange", displayName: "Page Range", localizationId: "DevExpress.XtraPrinting.Drawing.Watermark.PageRange", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.text },
                        { propertyName: "showBehind", modelName: "@ShowBehind", defaultVal: true, from: DevExpress.Analytics.Utils.parseBool, displayName: "Show Behind", localizationId: "DevExpress.XtraPrinting.Drawing.PageWatermark.ShowBehind", editor: DevExpress.Analytics.Widgets.editorTemplates.bool }
                    ];
                    Metadata.watermark = { propertyName: "watermark", modelName: "Watermark", displayName: "Watermark", localizationId: "DevExpress.XtraReports.UI.XtraReport.Watermark", info: Metadata.watermarkSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.rollPaper = { propertyName: "rollPaper", modelName: "@RollPaper", displayName: "Roll Paper", localizationId: "DevExpress.XtraReports.UI.XtraReport.RollPaper", defaultVal: false, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                    Metadata.requestParameters = { propertyName: "requestParameters", modelName: "@RequestParameters", displayName: "Request Parameters", localizationId: "DevExpress.XtraReports.UI.XtraReport.RequestParameters", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                    Metadata.formattingRuleSheet = { propertyName: "formattingRuleSheet", modelName: "FormattingRuleSheet", displayName: "Formatting Rule Sheet", localizationId: "DevExpress.XtraReports.UI.XtraReport.FormattingRuleSheet", array: true };
                    Metadata.pageWidth = { propertyName: "pageWidth", modelName: "@PageWidth", displayName: "Page Width", localizationId: "DevExpress.XtraReports.UI.XtraReport.PageWidth", defaultVal: -1, from: DevExpress.Analytics.Utils.floatFromModel, toJsonObject: DevExpress.Analytics.Utils.saveAsInt, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    Metadata.pageHeight = { propertyName: "pageHeight", modelName: "@PageHeight", displayName: "Page Height", localizationId: "DevExpress.XtraReports.UI.XtraReport.PageHeight", defaultVal: -1, from: DevExpress.Analytics.Utils.floatFromModel, toJsonObject: DevExpress.Analytics.Utils.saveAsInt, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    Metadata.scriptLanguage = {
                        propertyName: "scriptLanguage", modelName: "@ScriptLanguage", displayName: "Script Language", localizationId: "DevExpress.XtraReports.UI.XtraReport.ScriptLanguage", defaultVal: "CSharp", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "CSharp", displayValue: "C#", localizationId: "DevExpress.XtraReports.ScriptLanguage.CSharp" },
                            { value: "VisualBasic", displayValue: "Visual Basic", localizationId: "DevExpress.XtraReports.ScriptLanguage.VisualBasic" },
                            { value: "JScript", displayValue: "JScript", localizationId: "DevExpress.XtraReports.ScriptLanguage.JScript" }
                        ]
                    };
                    Metadata.scriptReferencesString = { propertyName: "scriptReferencesString", modelName: "@ScriptReferencesString", defaultVal: "", displayName: "Script References", localizationId: "DevExpress.XtraReports.UI.XtraReport.ScriptReferences", editor: DevExpress.Analytics.Widgets.editorTemplates.stringArray };
                    Metadata.calculatedFields = {
                        propertyName: "calculatedFields", modelName: "CalculatedFields", displayName: "Calculated Fields", localizationId: "DevExpress.XtraReports.UI.XtraReport.CalculatedFields", array: true,
                        template: "#dxrd-collectionItemWithAccordion",
                        editor: Widgets.editorTemplates.calculatedFields
                    };
                    Metadata.parametersInfo = {
                        propertyName: "parameters", modelName: "Parameters", displayName: "Parameters", localizationId: "DevExpress.XtraReports.UI.XtraReport.Parameters", array: true,
                        template: "#dxrd-collectionItemWithAccordion",
                        editor: Widgets.editorTemplates.parameters
                    };
                    Metadata.bookmarkDuplicateSuppress = { propertyName: "bookmarkDuplicateSuppress", modelName: "@BookmarkDuplicateSuppress", displayName: "Bookmark Duplicate Suppress", localizationId: "DevExpress.XtraReports.UI.XtraReport.BookmarkDuplicateSuppress", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                    Metadata.horizontalContentSplitting = {
                        propertyName: "horizontalContentSplitting", modelName: "@HorizontalContentSplitting", displayName: "Horizontal Content Splitting", localizationId: "DevExpress.XtraReports.UI.XtraReport.HorizontalContentSplitting", defaultVal: "Exact", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "Exact", displayValue: "Exact", localizationId: "DevExpress.XtraPrinting.HorizontalContentSplitting.Exact" },
                            { value: "Smart", displayValue: "Smart", localizationId: "DevExpress.XtraPrinting.HorizontalContentSplitting.Smart" }
                        ]
                    };
                    Metadata.rtlLayout = {
                        propertyName: "rtlLayout", modelName: "@RightToLeftLayout", displayName: "Right To Left Layout", localizationId: "DevExpress.XtraReports.UI.XtraReport.RightToLeftLayout", defaultVal: "No", editor: Widgets.editorTemplates.reportRtlProperty,
                        valuesArray: [
                            { value: "No", displayValue: "No", localizationId: "DevExpress.XtraReports.UI.RightToLeftLayout.No" },
                            { value: "Yes", displayValue: "Yes", localizationId: "DevExpress.XtraReports.UI.RightToLeftLayout.Yes" }
                        ]
                    };
                    Metadata.rtlReport = $.extend({}, Metadata.rtl, { defaultVal: "No", editor: Widgets.editorTemplates.reportRtlProperty });
                    Metadata.reportSerializationInfo = [
                        $.extend({}, Metadata.backColor, { defaultVal: "transparent" }),
                        $.extend({}, Metadata.foreColor, { defaultVal: "Black" }),
                        $.extend({}, Metadata.borderColor, { defaultVal: "Black" }),
                        $.extend({}, Metadata.font, { defaultVal: "Times New Roman, 9pt" }),
                        $.extend({}, Metadata.textAlignment, { defaultVal: "TopLeft" }),
                        $.extend({}, Metadata.borderWidth, { defaultVal: 1 }),
                        $.extend({}, Metadata.borderDashStyle, { defaultVal: "Solid" }),
                        $.extend({}, Metadata.borders, { defaultVal: "None" }),
                        { propertyName: "size", visible: false },
                        Metadata.landscape,
                        Metadata.paperKind,
                        Metadata.pageColor,
                        Metadata.bookmark,
                        Metadata.margins, Metadata.rollPaper, Metadata.requestParameters,
                        Metadata.measureUnit,
                        Metadata.snapGridSize,
                        Metadata.drawWatermark,
                        Metadata.watermark,
                        Metadata.displayName, Metadata.verticalContentSplitting, Metadata.showPreviewMarginLines,
                        Metadata.calculatedFields,
                        { propertyName: "scriptsSource", modelName: "@ScriptsSource" },
                        Metadata.pageWidth,
                        Metadata.pageHeight,
                        {
                            propertyName: "bands",
                            modelName: "Bands",
                            array: true
                        },
                        { propertyName: "crossBandControls", modelName: "CrossBandControls", array: true },
                        { propertyName: "styles", modelName: "StyleSheet", array: true },
                        { propertyName: "objectStorage", modelName: "ObjectStorage", array: true },
                        { propertyName: "componentStorage", modelName: "ComponentStorage", array: true },
                        { propertyName: "extensions", modelName: "Extensions", array: true },
                        Metadata.formattingRuleSheet,
                        Metadata.formattingRuleLinks,
                        Metadata.parametersInfo,
                        { propertyName: "version", modelName: "@Version" },
                        Metadata.reportExportOptionsSerializationInfo, Metadata.reportScripts, Metadata.scriptLanguage, Metadata.scriptReferencesString,
                        Metadata.rtlReport, Metadata.rtlLayout, Metadata.bookmarkDuplicateSuppress, Metadata.horizontalContentSplitting
                    ].concat(Metadata.baseControlProperties, Metadata.datasourcePrintOptionsGroup, Metadata.paddingGroup);
                    Metadata.popularPropertiesReport = ["dataSource", "dataMember", "filterString", "measureUnit"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRRichTextStreamType;
                (function (XRRichTextStreamType) {
                    XRRichTextStreamType[XRRichTextStreamType["RtfText"] = 0] = "RtfText";
                    XRRichTextStreamType[XRRichTextStreamType["PlainText"] = 1] = "PlainText";
                    XRRichTextStreamType[XRRichTextStreamType["HtmlText"] = 2] = "HtmlText";
                    XRRichTextStreamType[XRRichTextStreamType["XmlText"] = 3] = "XmlText";
                })(XRRichTextStreamType = Controls.XRRichTextStreamType || (Controls.XRRichTextStreamType = {}));
                var XRRichViewModel = (function (_super) {
                    __extends(XRRichViewModel, _super);
                    function XRRichViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        _this.format = ko.observable(XRRichTextStreamType.RtfText);
                        _this.textRtf = ko.observable("");
                        _this._rtf = ko.observable("");
                        var nameSubscribe = ko.computed(function () {
                            var newVal = _this.name();
                            if (!_this.textRtf() && newVal) {
                                _this.textRtf(newVal);
                                nameSubscribe && nameSubscribe.dispose();
                            }
                        }).extend({ rateLimit: { method: "notifyWhenChangesStop", timeout: 1 } });
                        _this._disposables.push(nameSubscribe);
                        return _this;
                    }
                    Object.defineProperty(XRRichViewModel.prototype, "textEditableProperty", {
                        get: function () { return this.textRtf; },
                        enumerable: true,
                        configurable: true
                    });
                    return XRRichViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRRichViewModel = XRRichViewModel;
                var XRRichSurface = (function (_super) {
                    __extends(XRRichSurface, _super);
                    function XRRichSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this._lastRequest = ko.observable(null);
                        _this._innerUpdate = ko.observable(false);
                        _this.imageSrc = ko.observable("");
                        _this.isLoading = ko.observable(false);
                        _this.template = "dxrd-shape";
                        _this.contenttemplate = "dxrd-shape-content";
                        _this._sendCallback();
                        _this._disposables.push(control.textRtf.subscribe(function (newVal) { _this._sendCallback("textRtf"); }));
                        _this._disposables.push(control._rtf.subscribe(function () { _this._sendCallback("rtf"); }));
                        _this._disposables.push(control.font.subscribe(function () { _this._sendCallback("font"); }));
                        _this._disposables.push(control.foreColor.subscribe(function () { _this._sendCallback("foreColor"); }));
                        _this._disposables.push(_this["position"]["width"].subscribe(function (newValue) { _this._sendCallback("width"); }));
                        _this._disposables.push(_this["position"]["height"].subscribe(function (newValue) { _this._sendCallback("height"); }));
                        _this._disposables.push(control._serializableRtfString.subscribe(function () { _this._sendCallback("base64rtf"); }));
                        return _this;
                    }
                    XRRichSurface.prototype._sendCallback = function (propertyName) {
                        if (propertyName === void 0) { propertyName = null; }
                        if (!this._innerUpdate()) {
                            this._lastRequest(propertyName);
                            var self = this;
                            var selfControl = this._control;
                            this.isLoading(true);
                            Internal.ReportRenderingService.getRichImage(this, propertyName).done(function (result) {
                                self.isLoading(false);
                                if (propertyName === self._lastRequest()) {
                                    selfControl.root && selfControl.root["_update"] && selfControl.root["_update"](true);
                                    if (propertyName !== "height" && propertyName !== "width") {
                                        self._innerUpdate(true);
                                        if (propertyName !== "textRtf") {
                                            selfControl.textRtf(result.Text);
                                        }
                                        selfControl._rtf(result.Rtf);
                                        selfControl._serializableRtfString(result.SerializableRtfString);
                                        self._innerUpdate(false);
                                    }
                                    self.imageSrc("data:image/x;base64," + result.Img);
                                    selfControl.root && selfControl.root["_update"] && selfControl.root["_update"](false);
                                }
                            }).fail(function (jqXHR) {
                                self.isLoading(false);
                                DevExpress.Analytics.Internal.NotifyAboutWarning("It is impossible to get richText");
                            });
                        }
                    };
                    return XRRichSurface;
                }(Controls.XRControlSurface));
                Controls.XRRichSurface = XRRichSurface;
                (function (Metadata) {
                    Metadata.rtf = { propertyName: "_rtf", defaultVal: "", displayName: "RTF", editor: DevExpress.Analytics.Widgets.editorTemplates.stringArray, localizationId: 'ASPxReportsStringId.ExportName_rtf' };
                    Metadata.textRtf = { propertyName: "textRtf", defaultVal: "", displayName: "Text", localizationId: "DevExpress.XtraReports.UI.XRRichTextBase.RtfText", editor: DevExpress.Analytics.Widgets.editorTemplates.stringArray };
                    Metadata.serializableRtfString = { propertyName: "_serializableRtfString", modelName: "@SerializableRtfString", displayName: "Load file", localizationId: "DevExpress.XtraReports.UI.XRRichText.SerializableRtfString", editor: Widgets.editorTemplates.richTextLoad };
                    Metadata.richTextSerializationsInfo = [
                        Metadata.serializableRtfString,
                        Metadata.rtf, Metadata.textRtf,
                        Metadata.nullValueText, Metadata.keepTogetherDefaultValueFalse, Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.textControlScripts,
                        Data.Metadata.dataBindings(["Bookmark", "Html", "NavigateUrl", "Rtf", "Tag"]),
                        Utils.createPopularBindingInfo({ bindingName: "Html", propertyName: "popularDataBindingHtml", displayName: "Html", localizationId: "ReportStringId.STag_Name_HtmlDataBinding" }, false),
                        Utils.createPopularBindingInfo({ bindingName: "Html", propertyName: "popularExpressionHtml", displayName: "Html", localizationId: "ReportStringId.STag_Name_HtmlExpressionBinding" }),
                        Utils.createPopularBindingInfo({ bindingName: "Rtf", propertyName: "popularDataBindingRtf", displayName: "Rtf", localizationId: "ReportStringId.STag_Name_RtfDataBinding" }, false),
                        Utils.createPopularBindingInfo({ bindingName: "Rtf", propertyName: "popularExpressionRtf", displayName: "Rtf", localizationId: "ReportStringId.STag_Name_RtfExpressionBinding" }),
                    ].concat(Metadata.sizeLocation, Metadata.fontGroup, Metadata.commonControlProperties, Metadata.navigationGroup, Metadata.processGroup, Metadata.canGrowShrinkGroup);
                    Metadata.popularPropertiesRichText = ["rtf", "popularDataBindingRtf", "popularExpressionRtf", "html", "popularDataBindingHtml", "popularExpressionHtml", "bookmark", "bookmarkParent", "canGrow", "canShrink"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRShapeViewModel = (function (_super) {
                    __extends(XRShapeViewModel, _super);
                    function XRShapeViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        _this.Shape(XRShapeViewModel.createShape(_this.Shape() || {}, serializer));
                        _this.shapeFake = {
                            type: ko.pureComputed({
                                read: function () {
                                    return _this.Shape()["shapeType"]();
                                },
                                write: function (val) {
                                    var selectedShape = XRShapeViewModel.shapes.filter(function (shape) { return shape["displayName"] === val; })[0];
                                    var shape = XRShapeViewModel.createShape($.extend({ "@ShapeName": selectedShape["type"] }, selectedShape["val"]), serializer);
                                    if (selectedShape["angle"] !== void 0) {
                                        _this["angle"](selectedShape["angle"]);
                                    }
                                    if (XRShapeViewModel.timeout === 0) {
                                        _this.Shape(shape);
                                    }
                                    else {
                                        setTimeout(function () {
                                            _this.Shape(shape);
                                        }, XRShapeViewModel.timeout);
                                    }
                                }
                            }),
                            content: _this.Shape
                        };
                        _this._disposables.push(_this.shapeFake.type);
                        return _this;
                    }
                    XRShapeViewModel.createShape = function (model, serializer) {
                        if (serializer === void 0) { serializer = null; }
                        var type = model && model["@ShapeName"] || "Ellipse";
                        var shapeInfo = Metadata.shapesMap[type];
                        var newShape = { "shapeType": ko.observable(type), "getInfo": function () { return shapeInfo; } };
                        (serializer || new DevExpress.Analytics.Utils.ModelSerializer()).deserialize(newShape, model);
                        return newShape;
                    };
                    XRShapeViewModel.timeout = 1;
                    XRShapeViewModel.shapes = [
                        {
                            displayName: "Rectangle",
                            type: "Rectangle"
                        },
                        {
                            displayName: "Ellipse"
                        },
                        {
                            displayName: "Top Arrow",
                            angle: 0,
                            type: "Arrow"
                        },
                        {
                            displayName: "Right Arrow",
                            angle: 270,
                            type: "Arrow"
                        },
                        {
                            displayName: "Bottom Arrow",
                            angle: 180,
                            type: "Arrow"
                        },
                        {
                            displayName: "Left Arrow",
                            angle: 90,
                            type: "Arrow"
                        },
                        {
                            displayName: "Triangle",
                            type: "Polygon"
                        },
                        {
                            displayName: "Square",
                            val: {
                                "@NumberOfSides": 4
                            },
                            type: "Polygon"
                        },
                        {
                            displayName: "Pentagon",
                            val: {
                                "@NumberOfSides": 5
                            },
                            type: "Polygon"
                        },
                        {
                            displayName: "Hexagon",
                            val: {
                                "@NumberOfSides": 6
                            },
                            type: "Polygon"
                        },
                        {
                            displayName: "Octagon",
                            val: {
                                "@NumberOfSides": 8
                            },
                            type: "Polygon"
                        },
                        {
                            displayName: "3-Point Star",
                            type: "Star"
                        },
                        {
                            displayName: "4-Point Star",
                            val: {
                                "@StarPointCount": 4
                            },
                            type: "Star"
                        },
                        {
                            displayName: "5-Point Star",
                            val: {
                                "@StarPointCount": 5
                            },
                            type: "Star"
                        },
                        {
                            displayName: "6-Point Star",
                            val: {
                                "@StarPointCount": 6
                            },
                            type: "Star"
                        },
                        {
                            displayName: "8-Point Star",
                            val: {
                                "@StarPointCount": 8
                            },
                            type: "Star"
                        },
                        {
                            displayName: "Vertical Line",
                            type: "Line"
                        },
                        {
                            displayName: "Horizontal Line",
                            angle: 90,
                            type: "Line"
                        },
                        {
                            displayName: "Slant Line",
                            angle: 45,
                            type: "Line"
                        },
                        {
                            displayName: "Backslant Line",
                            angle: 315,
                            type: "Line"
                        },
                        {
                            displayName: "Cross",
                            type: "Cross"
                        },
                        {
                            displayName: "Bracket",
                            type: "Bracket"
                        },
                        {
                            displayName: "Brace",
                            type: "Brace"
                        }
                    ];
                    return XRShapeViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRShapeViewModel = XRShapeViewModel;
                var XRShapeControlSurface = (function (_super) {
                    __extends(XRShapeControlSurface, _super);
                    function XRShapeControlSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        var func = null;
                        _this._disposables.push(_this.imageSrc = ko.pureComputed(function () {
                            return Internal.ReportRenderingService.getShapeImage(_this);
                        }));
                        _this.template = "dxrd-shape";
                        _this.contenttemplate = "dxrd-shape-content";
                        return _this;
                    }
                    return XRShapeControlSurface;
                }(Controls.XRControlSurface));
                Controls.XRShapeControlSurface = XRShapeControlSurface;
                (function (Metadata) {
                    var shapes = {
                        "Rectangle": "Rectangle",
                        "Ellipse": "Ellipse",
                        "Top Arrow": "Top Arrow",
                        "Right Arrow": "Right Arrow",
                        "Bottom Arrow": "Bottom Arrow",
                        "Left Arrow": "Left Arrow",
                        "Triangle": "Triangle",
                        "Square": "Square",
                        "Pentagon": "Pentagon",
                        "Hexagon": "Hexagon",
                        "Octagon": "Octagon",
                        "3-Point Star": "3-Point Star",
                        "4-Point Star": "4-Point Star",
                        "5-Point Star": "5-Point Star",
                        "6-Point Star": "6-Point Star",
                        "8-Point Star": "8-Point Star",
                        "Vertical Line": "Vertical Line",
                        "Horizontal Line": "Horizontal Line",
                        "Slant Line": "Slant Line",
                        "Backslant Line": "Backslant Line",
                        "Cross": "Cross",
                        "Bracket": "Bracket",
                        "Brace": "Brace"
                    };
                    Metadata.shapeType = { propertyName: "shapeType", modelName: "@ShapeName", defaultVal: "Ellipse" };
                    Metadata.stretch = { propertyName: "stretch", modelName: "@Stretch", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, displayName: "Stretch", localizationId: "DevExpress.XtraReports.UI.XRShape.Stretch" };
                    Metadata.fillColor = { propertyName: "fillColor", modelName: "@FillColor", defaultVal: "transparent", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor, from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, displayName: "Fill Color", localizationId: "DevExpress.XtraReports.UI.XRShape.FillColor" };
                    Metadata.Shape = { propertyName: "Shape", modelName: "Shape" };
                    Metadata.shapeFake = { propertyName: "shapeFake", editor: Widgets.editorTemplates.contentByType, displayName: "Shape", values: shapes, localizationId: "DevExpress.XtraReports.UI.XRShape.Shape" };
                    Metadata.shapeElementSerializationsInfo = [Metadata.shapeType];
                    var fillet = { propertyName: "fillet", modelName: "@Fillet", defaultVal: 0, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Fillet", localizationId: "DevExpress.XtraPrinting.Shape.FilletShapeBase.Fillet" };
                    var shapeRectangleSerializationsInfo = [Metadata.shapeType, fillet];
                    var shapeStarSerializationsInfo = [
                        Metadata.shapeType,
                        { propertyName: "concavity", modelName: "@Concavity", defaultVal: 50, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Concavity", localizationId: "DevExpress.XtraPrinting.Shape.ShapeStar.Concavity" },
                        { propertyName: "starPointCount", modelName: "@StarPointCount", defaultVal: 3, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Count of Star Points", localizationId: "DevExpress.XtraPrinting.Shape.ShapeStar.StarPointCount" },
                        fillet
                    ];
                    var shapeBraceSerializationsInfo = [
                        Metadata.shapeType,
                        { propertyName: "fillet", modelName: "@Fillet", defaultVal: 50, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Fillet", localizationId: "DevExpress.XtraPrinting.Shape.ShapeBrace.Fillet" },
                        { propertyName: "tailLength", modelName: "@TailLength", defaultVal: 20, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Tail\'s Length", localizationId: "DevExpress.XtraPrinting.Shape.ShapeBrace.TailLength" },
                        { propertyName: "tipLength", modelName: "@TipLength", defaultVal: 20, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Tip\'s Length", localizationId: "DevExpress.XtraPrinting.Shape.ShapeBracket.TipLength" }
                    ];
                    var shapeBracketSerializationsInfo = [
                        Metadata.shapeType,
                        { propertyName: "tipLength", modelName: "@TipLength", defaultVal: 20, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Tip\'s Length", localizationId: "DevExpress.XtraPrinting.Shape.ShapeBracket.TipLength" }
                    ];
                    var shapePolygonSerializationsInfo = [
                        Metadata.shapeType, fillet,
                        { propertyName: "numberOfSides", modelName: "@NumberOfSides", defaultVal: 3, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Number of Sides", localizationId: "DevExpress.XtraPrinting.Shape.ShapePolygon.NumberOfSides" },
                    ];
                    var shapeArrowSerializationsInfo = [
                        Metadata.shapeType,
                        { propertyName: "arrowHeight", modelName: "@ArrowHeight", defaultVal: 50, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Arrow Height", localizationId: "DevExpress.XtraPrinting.Shape.ShapeArrow.ArrowHeight" },
                        { propertyName: "arrowWidth", modelName: "@ArrowWidth", defaultVal: 50, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Arrow Width", localizationId: "DevExpress.XtraPrinting.Shape.ShapeArrow.ArrowWidth" },
                        fillet
                    ];
                    var shapeCrossSerializationsInfo = [
                        Metadata.shapeType, fillet,
                        { propertyName: "horizontalLineWidth", modelName: "@HorizontalLineWidth", defaultVal: 50, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Horizontal Line Width", localizationId: "DevExpress.XtraPrinting.Shape.ShapeCross.HorizontalLineWidth" },
                        { propertyName: "verticalLineWidth", modelName: "@VerticalLineWidth", defaultVal: 50, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Vertical Line Width", localizationId: "DevExpress.XtraPrinting.Shape.ShapeCross.VerticalLineWidth" }
                    ];
                    Metadata.shapesMap = {
                        "Rectangle": shapeRectangleSerializationsInfo,
                        "Arrow": shapeArrowSerializationsInfo,
                        "Ellipse": Metadata.shapeElementSerializationsInfo,
                        "Polygon": shapePolygonSerializationsInfo,
                        "Star": shapeStarSerializationsInfo,
                        "Line": Metadata.shapeElementSerializationsInfo,
                        "Bracket": shapeBracketSerializationsInfo,
                        "Cross": shapeCrossSerializationsInfo,
                        "Brace": shapeBraceSerializationsInfo
                    };
                    Metadata.shapeSerializationsInfo = [
                        Metadata.lineWidth, Metadata.lineStyle, Metadata.foreColor, Metadata.Shape, Metadata.fillColor, Metadata.stretch, Metadata.angle, Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.controlScripts, Metadata.shapeFake,
                        Data.Metadata.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
                    ].concat(Metadata.sizeLocation, Metadata.commonControlProperties, Metadata.navigationGroup);
                    Metadata.popularPropertiesShape = ["stretch", "fillColor", "lineWidth", "angle", "bookmark", "bookmarkParent", "shapeFake"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRSparklineViewModel = (function (_super) {
                    __extends(XRSparklineViewModel, _super);
                    function XRSparklineViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        _this.view(_this.createView(_this.view() || {}, serializer));
                        _this.sparklineFake = {
                            type: ko.pureComputed({
                                read: function () {
                                    return _this.view().type();
                                },
                                write: function (val) {
                                    _this.view(_this.createView({ "@Type": val }, serializer));
                                }
                            }),
                            content: _this.view
                        };
                        _this._disposables.push(_this.sparklineFake.type);
                        return _this;
                    }
                    XRSparklineViewModel.prototype.createView = function (model, serializer) {
                        if (serializer === void 0) { serializer = null; }
                        var type = model && model["@Type"] || "Line";
                        var viewTypeSerialization = Metadata.sparklineViewMap[type];
                        var newView = { "type": ko.observable(type), "getInfo": function () { return viewTypeSerialization; } };
                        (serializer || new DevExpress.Analytics.Utils.ModelSerializer()).deserialize(newView, model);
                        return newView;
                    };
                    XRSparklineViewModel.prototype.getPath = function (propertyName) {
                        if (propertyName === "dataMember") {
                            return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
                        }
                        else if (propertyName === "valueMember") {
                            return DevExpress.Analytics.Internal.getFullPath(this.getPath("dataMember"), this.dataMember());
                        }
                        return _super.prototype.getPath.call(this, propertyName);
                    };
                    XRSparklineViewModel.spartlineTypes = [
                        { value: "Line", displayValue: "Line", localizationId: "DevExpress.Sparkline.SparklineViewType.Line" },
                        { value: "Bar", displayValue: "Bar", localizationId: "DevExpress.Sparkline.SparklineViewType.Bar" },
                        { value: "WinLoss", displayValue: "WinLoss", localizationId: "DevExpress.Sparkline.SparklineViewType.WinLoss" },
                        { value: "Area", displayValue: "Area", localizationId: "DevExpress.Sparkline.SparklineViewType.Area" }
                    ];
                    return XRSparklineViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRSparklineViewModel = XRSparklineViewModel;
                var XRSparkLineSurface = (function (_super) {
                    __extends(XRSparkLineSurface, _super);
                    function XRSparkLineSurface(control, context) {
                        return _super.call(this, control, context) || this;
                    }
                    return XRSparkLineSurface;
                }(Internal.TodoControlSurface));
                Controls.XRSparkLineSurface = XRSparkLineSurface;
                (function (Metadata) {
                    Metadata.valueMember = { propertyName: "valueMember", modelName: "@ValueMember", displayName: "Value Member", localizationId: "DevExpress.XtraReports.UI.XRSparkline.ValueMember", editor: DevExpress.Analytics.Widgets.editorTemplates.field };
                    var highlightMinPoint = { modelName: "@HighlightMinPoint", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, propertyName: "highlightMinPoint", displayName: "Highlight Min Point", localizationId: "DevExpress.Sparkline.SparklineViewBase.HighlightMinPoint", editor: DevExpress.Analytics.Widgets.editorTemplates.bool }, highlightMaxPoint = { modelName: "@HighlightMaxPoint", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, propertyName: "highlightMaxPoint", displayName: "Highlight Max Point", localizationId: "DevExpress.Sparkline.SparklineViewBase.HighlightMaxPoint", editor: DevExpress.Analytics.Widgets.editorTemplates.bool }, highlightStartPoint = { modelName: "@HighlightStartPoint", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, propertyName: "highlightStartPoint", displayName: "Highlight Start Point", localizationId: "DevExpress.Sparkline.SparklineViewBase.HighlightStartPoint", editor: DevExpress.Analytics.Widgets.editorTemplates.bool }, highlightEndPoint = { modelName: "@HighlightEndPoint", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, propertyName: "highlightEndPoint", displayName: "Highlight End Point", localizationId: "DevExpress.Sparkline.SparklineViewBase.HighlightEndPoint", editor: DevExpress.Analytics.Widgets.editorTemplates.bool }, highlightNegativePoints = { modelName: "@HighlightNegativePoints", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, propertyName: "highlightNegativePoints", displayName: "Highlight Negative Points", localizationId: "DevExpress.Sparkline.LineSparklineView.HighlightNegativePoints", editor: DevExpress.Analytics.Widgets.editorTemplates.bool }, color = { modelName: "@Color", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, propertyName: "color", displayName: "Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.Color", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor }, maxPointColor = { modelName: "@MaxPointColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, propertyName: "maxPointColor", displayName: "Max Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.MaxPointColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor }, minPointColor = { modelName: "@MinPointColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, propertyName: "minPointColor", displayName: "Min Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.MinPointColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor }, startPointColor = { modelName: "@StartPointColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, propertyName: "startPointColor", displayName: "Start Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.StartPointColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor }, negativePointColor = { modelName: "@NegativePointColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, propertyName: "negativePointColor", displayName: "Negative Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.NegativePointColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor }, endPointColor = { modelName: "@EndPointColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, propertyName: "endPointColor", displayName: "End Point Color", localizationId: "DevExpress.Sparkline.SparklineViewBase.EndPointColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor }, sparklineViewType = {
                        modelName: "@Type", propertyName: "type"
                    }, enableAntialiasing = { modelName: "@EnableAntialiasing", propertyName: "enableAntialiasing", displayName: "Enable Antialiasing", localizationId: "DevExpress.Sparkline.LineSparklineView.EnableAntialiasing", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, defaultVal: true }, maxPointMarkerSize = { modelName: "@MaxPointMarkerSize", defaultVal: 5, propertyName: "maxPointMarkerSize", displayName: "Max Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.MaxPointMarkerSize", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, minPointMarkerSize = { modelName: "@MinPointMarkerSize", defaultVal: 5, propertyName: "minPointMarkerSize", displayName: "Min Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.MinPointMarkerSize", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, startPointMarkerSize = { modelName: "@StartPointMarkerSize", defaultVal: 5, propertyName: "startPointMarkerSize", displayName: "Start Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.StartPointMarkerSize", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, negativePointMarkerSize = { modelName: "@NegativePointMarkerSize", defaultVal: 5, propertyName: "negativePointMarkerSize", displayName: "Negative Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.NegativePointMarkerSize", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, endPointMarkerSize = { modelName: "@EndPointMarkerSize", defaultVal: 5, propertyName: "endPointMarkerSize", displayName: "End Point Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.EndPointMarkerSize", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, markerSize = { modelName: "@MarkerSize", propertyName: "markerSize", defaultVal: 5, displayName: "Marker Size", localizationId: "DevExpress.Sparkline.LineSparklineView.MarkerSize", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, showMarkers = { modelName: "@ShowMarkers", propertyName: "showMarkers", displayName: "Show Markers", localizationId: "DevExpress.Sparkline.LineSparklineView.ShowMarkers", from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool, defaultVal: false }, markerColor = { modelName: "@MarkerColor", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, propertyName: "markerColor", displayName: "Marker Color", localizationId: "DevExpress.Sparkline.LineSparklineView.MarkerColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor };
                    var barDistance = { modelName: "@BarDistance", propertyName: "barDistance", defaultVal: 2, displayName: "Bar Distance", localizationId: "DevExpress.Sparkline.BarSparklineViewBase.BarDistance", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    var areaOpacity = { modelName: "@AreaOpacity", propertyName: "areaOpacity", defaultVal: 135, displayName: "Area Opacity", localizationId: "DevExpress.Sparkline.AreaSparklineView.AreaOpacity", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    var commonSparklineViewProperties = [highlightStartPoint, highlightEndPoint, highlightMaxPoint, highlightMinPoint, color, maxPointColor, minPointColor, startPointColor, endPointColor, negativePointColor, sparklineViewType];
                    var viewLineSerializationsInfo = [].concat(commonSparklineViewProperties, [highlightNegativePoints, enableAntialiasing, negativePointMarkerSize, endPointMarkerSize, startPointMarkerSize, minPointMarkerSize, maxPointMarkerSize, markerSize, showMarkers, Metadata.lineWidth, markerColor]);
                    var viewWinLoseSerializationsInfo = [].concat(commonSparklineViewProperties, [barDistance]);
                    var viewBarSerializationsInfo = [].concat(commonSparklineViewProperties, [barDistance, highlightNegativePoints]);
                    var viewAreaSerializationsInfo = [].concat(commonSparklineViewProperties, [enableAntialiasing, areaOpacity, negativePointMarkerSize, Metadata.lineWidth, highlightNegativePoints, showMarkers, markerSize, maxPointMarkerSize, markerColor, minPointMarkerSize, endPointMarkerSize, startPointMarkerSize]);
                    Metadata.sparklineViewMap = {
                        "Line": viewLineSerializationsInfo,
                        "Bar": viewBarSerializationsInfo,
                        "WinLoss": viewWinLoseSerializationsInfo,
                        "Area": viewAreaSerializationsInfo
                    };
                    var limit1 = { propertyName: "limit1", modelName: "@Limit1", displayName: "Limit 1", localizationId: "DevExpress.Sparkline.SparklineRange.Limit1", defaultVal: 0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, limit2 = { propertyName: "limit2", modelName: "@Limit2", displayName: "Limit 2", localizationId: "DevExpress.Sparkline.SparklineRange.Limit2", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric }, isAuto = { propertyName: "isAuto", modelName: "@IsAuto", displayName: "Is Auto", localizationId: "DevExpress.Sparkline.SparklineRange.IsAuto", defaultVal: true, editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.valueRange = { propertyName: "valueRange", modelName: "ValueRange", displayName: "Value Range", localizationId: "DevExpress.XtraReports.UI.XRSparkline.ValueRange", info: [limit1, limit2, isAuto], editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    var sparklineView = { propertyName: "view", modelName: "View" };
                    Metadata.sparklineFake = { propertyName: "sparklineFake", editor: Widgets.editorTemplates.contentByType, valuesArray: XRSparklineViewModel.spartlineTypes, displayName: "View", localizationId: "DevExpress.XtraReports.UI.XRSparkline.View" };
                    Metadata.sparklineSerializationsInfo = [
                        Metadata.sparklineFake, sparklineView, Metadata.valueMember, Metadata.valueRange, Metadata.imageType, Metadata.anchorVertical, Metadata.anchorHorizontal, Data.Metadata.dataBindings(["Bookmark", "NavigateUrl", "Tag"]),
                        Metadata.dataAdapter, Metadata.dataMember, Metadata.dataSource, Metadata.controlScripts
                    ].concat(Metadata.commonControlProperties, Metadata.sizeLocation, Metadata.navigationGroup);
                    Metadata.popularPropertiesSparkline = ["dataSource", "dataMember", "dataAdapter", "valueMemberEditable", "sparklineFake"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var SubreportViewModel = (function (_super) {
                    __extends(SubreportViewModel, _super);
                    function SubreportViewModel(model, serializer) {
                        var _this = _super.call(this, model, serializer) || this;
                        _this.isAllSufficient = false;
                        return _this;
                    }
                    SubreportViewModel.prototype._initializeBands = function () {
                        if (this.bands().length === 0) {
                            this.createChild({ "@ControlType": "DetailBand", "@Name": "Detail1" });
                        }
                    };
                    SubreportViewModel.from = function (model, serializer) {
                        return model ? new SubreportViewModel(model, serializer) : null;
                    };
                    SubreportViewModel.toJson = function (value, serializer, refs) {
                        return serializer.serialize(value, Metadata.reportSerializationInfo, refs);
                    };
                    SubreportViewModel.prototype.getInfo = function () {
                        if (!this.isAllSufficient) {
                            var newSerializationInfo = $.extend(true, [], _super.prototype.getInfo.call(this));
                            var index = newSerializationInfo.indexOf(newSerializationInfo.filter(function (item) { return item.propertyName === "objectStorage"; })[0]);
                            newSerializationInfo.splice(index, 1);
                            return newSerializationInfo;
                        }
                        return _super.prototype.getInfo.call(this);
                    };
                    SubreportViewModel.prototype.serialize = function () {
                        this.isAllSufficient = true;
                        var result = _super.prototype.serialize.call(this);
                        this.isAllSufficient = false;
                        return result;
                    };
                    SubreportViewModel.defaultReport = {
                        "@ControlType": "DevExpress.XtraReports.UI.XtraReport",
                        "@PageWidth": "850",
                        "@PageHeight": "1100",
                        "@Version": "19.1",
                        "@Font": "Arial,9pt",
                        "@Dpi": "100",
                        "Bands": {
                            "Item1": {
                                "@ControlType": "TopMarginBand",
                                "@HeightF": "100"
                            },
                            "Item2": {
                                "@ControlType": "DetailBand",
                                "@HeightF": "100"
                            },
                            "Item3": {
                                "@ControlType": "BottomMarginBand",
                                "@HeightF": "100"
                            }
                        }
                    };
                    return SubreportViewModel;
                }(ReportViewModel));
                Controls.SubreportViewModel = SubreportViewModel;
                var ParameterBinding = (function (_super) {
                    __extends(ParameterBinding, _super);
                    function ParameterBinding(model, parent, serializer) {
                        var _this = _super.call(this, model, serializer) || this;
                        _this.visible = ko.observable(true);
                        _this.subreportControl = ko.observable();
                        var _self = _this;
                        _this.fakeBinding = _this;
                        _this._disposables.push(_this._reportDataSource = ko.computed(function () {
                            var control = _this.subreportControl();
                            return control && control.root["dataSource"] && control.root["dataSource"]() || null;
                        }));
                        var _dataSource = ko.observable(_this.dataSource());
                        _this._disposables.push(_this.dataSource = ko.pureComputed({
                            read: function () {
                                return _dataSource() || _this._reportDataSource();
                            },
                            write: function (newValue) {
                                _dataSource(newValue);
                            }
                        }));
                        _this._disposables.push(_this.dataSource.subscribe(function (newValue) {
                            if (!newValue) {
                                _this.dataMember(null);
                            }
                        }));
                        var subscribe = _this.subreportControl.subscribe(function (newValue) {
                            if (newValue) {
                                subscribe.dispose();
                                _self._disposables.push(newValue.root["parameters"].subscribe(function (newParameters) {
                                    if (!newParameters.some(function (parameter) { return parameter === _self.parameter(); })) {
                                        _self.parameter(null);
                                    }
                                }));
                            }
                        });
                        _this._disposables.push(subscribe);
                        _this.subreportControl(parent);
                        return _this;
                    }
                    ParameterBinding.createNew = function () {
                        return new ParameterBinding({}, null);
                    };
                    ParameterBinding.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.subreportControl(null);
                    };
                    ParameterBinding.prototype.getInfo = function () {
                        if (this.subreportControl && this.subreportControl() && this.subreportControl().subreportParameters().length > 0) {
                            var serializationInfo = $.extend(true, [], Metadata.parameterBindingSerializationInfo);
                            var parameterNameInfo = serializationInfo.filter(function (info) { return info.propertyName === "parameterName"; })[0];
                            parameterNameInfo.valuesArray = this.subreportControl().subreportParameters().map(function (parameter) { return { value: parameter.name, displayValue: parameter.displayName }; });
                            var dataSourceInfo = serializationInfo.filter(function (info) { return info.propertyName === "dataSource"; })[0];
                            dataSourceInfo.defaultVal = this._reportDataSource();
                            return serializationInfo;
                        }
                        return Metadata.parameterBindingSerializationInfo;
                    };
                    ParameterBinding.prototype.updateParameter = function (pathRequest, dataSources) {
                        _super.prototype.updateParameter.call(this, pathRequest, dataSources);
                        this.dataMember(null);
                    };
                    ParameterBinding.prototype.refresh = function () {
                        var _this = this;
                        if (!this.subreportControl().subreportParameters().some(function (parameter) { return parameter.name === _this.parameterName(); })) {
                            this.parameterName("");
                        }
                    };
                    return ParameterBinding;
                }(Data.DataBindingBase));
                Controls.ParameterBinding = ParameterBinding;
                var XRSubreportViewModel = (function (_super) {
                    __extends(XRSubreportViewModel, _super);
                    function XRSubreportViewModel(model, parent, serializer) {
                        var _this = _super.call(this, XRSubreportViewModel._patchModel(model), parent, serializer) || this;
                        _this.needProcessLocation = false;
                        _this.subreportParameters = ko.observableArray();
                        var _self = _this;
                        var _width = ko.observable(_this.size.width());
                        _this.size["_width"] = _width;
                        _this._disposables.push(_this.key = ko.pureComputed(function () {
                            var key = _this.parentModel() && _this.parentModel().root && _this.parentModel().root["key"];
                            return (key ? (key() + ".") : "") + _this.name();
                        }));
                        _this._generateOwnPages = ko.observable(_this.generateOwnPages());
                        var oldgenerateOwnPagesIsActive = _this._generateOwnPages();
                        _this._disposables.push(_this.generateOwnPages = ko.pureComputed({
                            read: function () {
                                return _this._generateOwnPages();
                            },
                            write: function (newVal) {
                                if (_this.isPropertyDisabled("generateOwnPages"))
                                    return;
                                var undo = DevExpress.Analytics.Utils.UndoEngine.tryGetUndoEngine(_this.parentModel());
                                undo && undo.start();
                                _this._generateOwnPages(newVal);
                                undo && undo.end();
                                oldgenerateOwnPagesIsActive = _this._getCurrentGenerateOwnPagesIsActive();
                            }
                        }), _this.generateOwnPagesIsActive = ko.computed(function () {
                            return _this._getCurrentGenerateOwnPagesIsActive();
                        }), _this.generateOwnPagesIsActive.subscribe(function (newVal) {
                            _this._calculateSubreportPosition(newVal);
                        }), _this.size.width = ko.computed({
                            read: function () {
                                if (_this.generateOwnPagesIsActive())
                                    return _this.parentModel()["size"].width();
                                return _width();
                            },
                            write: function (newVal) {
                                _width(newVal);
                            }
                        }));
                        _this._disposables.push(_this.parentModel.subscribe(function (newVal) {
                            _this.needProcessLocation = oldgenerateOwnPagesIsActive !== _this._getCurrentGenerateOwnPagesIsActive() || (oldgenerateOwnPagesIsActive && _this._getCurrentGenerateOwnPagesIsActive());
                            oldgenerateOwnPagesIsActive = _this._getCurrentGenerateOwnPagesIsActive();
                        }));
                        _this.size.isPropertyDisabled = function (propertyName) {
                            if (propertyName === "width")
                                return _this.generateOwnPagesIsActive();
                            return false;
                        };
                        if (_this.reportSource) {
                            _this.reportSource.key = _this.key;
                            if (parent) {
                                var objectStorage = parent.root["objectStorage"]().concat(_this.reportSource.objectStorage());
                                parent.root["objectStorage"](objectStorage);
                                _this.reportSource.objectStorage(objectStorage);
                            }
                            else {
                                var subscribe = _this.parentModel.subscribe(function (newValue) {
                                    if (newValue) {
                                        subscribe.dispose();
                                        _this.reportSource.objectStorage(newValue.root["objectStorage"]());
                                    }
                                });
                                _this._disposables.push(subscribe);
                            }
                        }
                        _this.parameterBindings = DevExpress.Analytics.Utils.deserializeArray(model.ParameterBindings, function (item) { return new ParameterBinding(item, _this, serializer); });
                        _this.updateParameters();
                        _this._disposables.push(_this.parameterBindings.subscribe(function (changes) {
                            for (var index = 0; index < changes.length; index++) {
                                if (changes[index].status === "added") {
                                    changes[index].value.subreportControl(_self);
                                }
                            }
                            ;
                        }, null, "arrayChange"));
                        _this._disposables.push(_this.reportSourceUrl.subscribe(function (newVal) {
                            _this.reportSource && _this.reportSource.dispose();
                            if (!newVal)
                                _this.reportSource = new SubreportViewModel(SubreportViewModel.defaultReport, serializer);
                            _this.updateParameters();
                        }));
                        _this.actions.push({ action: function () { _this.root["getSubreportUrls"](); }, title: DevExpress.Analytics.Utils.getLocalization("Update", "PivotGridStringId.CustomizationFormUpdate"), visible: function (name) { return name === "reportSourceUrl"; } });
                        return _this;
                    }
                    XRSubreportViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.parameterBindings);
                        this.reportSource && this.reportSource.dispose();
                        this.resetObservableArray(this.parameterBindings);
                    };
                    XRSubreportViewModel.prototype.getInfo = function () {
                        var serializationInfo = $.extend(true, [], _super.prototype.getInfo.call(this));
                        if (this.reportSourceUrl && this.reportSourceUrl()) {
                            var property = serializationInfo.filter(function (item) { return item.propertyName === "reportSource"; })[0];
                            serializationInfo.splice(serializationInfo.indexOf(property), 1);
                        }
                        return serializationInfo;
                    };
                    XRSubreportViewModel._patchModel = function (model) {
                        if (model["@ReportSourceUrl"]) {
                            delete model["ReportSource"];
                        }
                        return model;
                    };
                    XRSubreportViewModel.prototype._getCurrentGenerateOwnPagesIsActive = function () {
                        return this.generateOwnPages() && !this.isPropertyDisabled("generateOwnPages");
                    };
                    XRSubreportViewModel.prototype._calculateSubreportPosition = function (generateOwnPagesIsActive) {
                        var offset = generateOwnPagesIsActive ? 0 : DevExpress.Analytics.Internal.pixelToUnits(5, this.root.measureUnit(), 1);
                        this.size.width(this.parentModel()["size"].width() - offset * 2);
                        this.location.x(offset);
                    };
                    XRSubreportViewModel.prototype.refreshParameterBindings = function () {
                        this.parameterBindings().forEach(function (x) { return x.refresh(); });
                    };
                    XRSubreportViewModel.prototype.isPropertyDisabled = function (propertyName) {
                        if (propertyName === "generateOwnPages")
                            return this.parentModel()
                                && ["ReportHeaderBand", "ReportFooterBand", "GroupHeaderBand", "GroupFooterBand", "DetailBand"].indexOf(this.parentModel().controlType) === -1;
                        return _super.prototype.isPropertyDisabled.call(this, propertyName);
                    };
                    XRSubreportViewModel.prototype.updateParameters = function () {
                        var _this = this;
                        if (this.reportSourceUrl()) {
                            Internal.ReportStorageWeb.getData(this.reportSourceUrl()).done(function (result) {
                                var parametersJSON = JSON.parse(result.reportLayout).XtraReportsLayoutSerializer.Parameters;
                                var parameters = [];
                                if (parametersJSON) {
                                    Object.keys(parametersJSON).forEach(function (propertyName) {
                                        parameters.push({
                                            name: parametersJSON[propertyName]["@Name"],
                                            displayName: parametersJSON[propertyName]["@Description"]
                                        });
                                    });
                                }
                                _this.subreportParameters(parameters);
                                _this.refreshParameterBindings();
                            });
                        }
                        else if (this.reportSource) {
                            this.subreportParameters(this.reportSource.parameters().map(function (x) { return { name: x.name, displayName: x.displayName || x.name }; }));
                            this.refreshParameterBindings();
                        }
                    };
                    XRSubreportViewModel.prototype.cloneReportSource = function () {
                        return this.reportSource.clone();
                    };
                    return XRSubreportViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRSubreportViewModel = XRSubreportViewModel;
                var XRSubreportSurface = (function (_super) {
                    __extends(XRSubreportSurface, _super);
                    function XRSubreportSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.template = "dxrd-subreport";
                        _this.selectiontemplate = "dxrd-subreport-selection";
                        _this.displayText = function () { return control.name(); };
                        return _this;
                    }
                    XRSubreportSurface.prototype.getAdornTemplate = function () {
                        return this.isIntersect() ? "dxrd-intersect" : "";
                    };
                    XRSubreportSurface.prototype.getResizableOptions = function (resizeHandler) {
                        return $.extend(true, {}, resizeHandler, {
                            handles: this._control.generateOwnPagesIsActive() ? "s,n" : "all"
                        });
                    };
                    XRSubreportSurface.prototype.processLocation = function (location) {
                        if (this._control.needProcessLocation) {
                            this._control.needProcessLocation = false;
                            return { top: location.top };
                        }
                        return location;
                    };
                    return XRSubreportSurface;
                }(Controls.XRControlSurface));
                Controls.XRSubreportSurface = XRSubreportSurface;
                (function (Metadata) {
                    Metadata.reportSourceUrl = { propertyName: "reportSourceUrl", modelName: "@ReportSourceUrl", defaultVal: "", editor: Widgets.editorTemplates.reportSourceUrl, displayName: "Report Source Url", localizationId: "DevExpress.XtraReports.UI.XRSubreport.ReportSourceUrl" };
                    Metadata.reportSource = { propertyName: "reportSource", modelName: "ReportSource", from: SubreportViewModel.from, toJsonObject: SubreportViewModel.toJson };
                    Metadata.parameterBindingSerializationInfo = Data.Metadata.dataBindingBaseSerializationInfo.concat([
                        { propertyName: "parameterName", modelName: "@ParameterName", displayName: "Parameter Name", localizationId: "DevExpress.XtraReports.UI.ParameterBinding.ParameterName", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox },
                        { propertyName: "fakeBinding", displayName: "Binding", localizationId: "DevExpress.XtraReports.Design.DataBinding.Binding", link: true, editor: { header: "dxrd-dataBinding", editorType: DevExpress.Analytics.Widgets.FieldListEditor } }
                    ]);
                    Metadata.parameterBindings = { propertyName: "parameterBindings", modelName: "ParameterBindings", displayName: "Parameter Bindings", localizationId: "DevExpress.XtraReports.UI.XRSubreport.ParameterBindings", array: true, editor: DevExpress.Analytics.Widgets.editorTemplates.commonCollection, addHandler: ParameterBinding.createNew, template: '#dxrd-commonCollectionItem' };
                    Metadata.generateOwnPages = { propertyName: "generateOwnPages", defaultVal: false, modelName: "@GenerateOwnPages", displayName: "Generate Own Pages", localizationId: "DevExpress.XtraReports.UI.XRSubreport.GenerateOwnPages", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool };
                    Metadata.subreportSerializationsInfo = [
                        Metadata.reportSource, Metadata.reportSourceUrl, Metadata.subreportScripts, Metadata.parameterBindings, Metadata.bookmarkParent, Metadata.canShrink, Metadata.generateOwnPages
                    ].concat(Metadata.sizeLocation, Metadata.baseControlProperties);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRTableControlViewModel = (function (_super) {
                    __extends(XRTableControlViewModel, _super);
                    function XRTableControlViewModel(control, parent, serializer) {
                        var _this = _super.call(this, control, parent, serializer) || this;
                        _this.rows = ko.observableArray();
                        _this._disposables.push(_this.rowsTotalWeight = ko.pureComputed(function () {
                            var result = 0;
                            _this.rows().forEach(function (row) {
                                result += row.weight();
                            });
                            return result;
                        }));
                        _this._disposables.push(_this.pixelHeightWeight = ko.pureComputed(function () {
                            return _this.size.height() !== 0 ? _this.rowsTotalWeight() / _this.size.height() : 0;
                        }));
                        var deserializedRows = DevExpress.Analytics.Utils.deserializeArray(control.Rows, function (item) { return new XRTableRowViewModel(item, _this, serializer); });
                        _this.rows(deserializedRows());
                        _this.tableCalculationProvider = new Internal.TableCalculationProvider(_this);
                        return _this;
                    }
                    XRTableControlViewModel.prototype._getAdjacentCells = function (condition) {
                        var adjacentCells = [];
                        this.rows().forEach(function (row) {
                            row.cells().filter(function (cell) { return condition(cell); }).forEach(function (cell) {
                                adjacentCells.push(cell);
                            });
                        });
                        return adjacentCells;
                    };
                    XRTableControlViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.rows);
                        this.resetObservableArray(this.rows);
                    };
                    XRTableControlViewModel.prototype.updateRowLocation = function (row, deltaHeight) {
                        var oldHeight = row.height();
                        var rowIndex = this.rows().indexOf(row);
                        if (rowIndex > 0) {
                            var topRowHeight = this.rows()[rowIndex - 1].height;
                            var topHeight = topRowHeight() - deltaHeight;
                            topRowHeight(topHeight > 0 ? topHeight : 0);
                        }
                        else {
                            var deltaWeight = (row.weight() / oldHeight) * deltaHeight;
                            row.weight(row.weight() + deltaWeight);
                            this.location.y(this.location.y() - deltaHeight);
                            this.size.height(this.size.height() + deltaHeight);
                        }
                    };
                    XRTableControlViewModel.prototype.addChild = function (control, position, onComponentAdded) {
                        if (control instanceof XRTableRowViewModel) {
                            if (this.rows().indexOf(control) === -1) {
                                control.parentModel(this);
                                if (position != null) {
                                    this.rows.splice(position, 0, control);
                                }
                                else {
                                    this.rows.push(control);
                                }
                                if ($.isFunction(onComponentAdded))
                                    onComponentAdded({ parent: this, model: control });
                            }
                        }
                        else {
                            throw new Error("Trying to add non a row to the table.");
                        }
                    };
                    XRTableControlViewModel.prototype.insertRow = function (selectedRow, isRowAbove, onComponentAdded) {
                        var selectedRowHeight = selectedRow.height(), newRow = new XRTableRowViewModel({
                            "@ControlType": "XRTableRow",
                            "@Weight": selectedRow.weight(),
                            "@HeightF": selectedRowHeight,
                        }, this), indexSelectedRow = this.rows.indexOf(selectedRow);
                        selectedRow.cells().forEach(function (cell) {
                            newRow.createChild({ "@ControlType": "XRTableCell", "@Weight": cell.weight(), "@Padding": "2,2,0,0,100", "@Multiline": "true" });
                        });
                        this.addChild(newRow, indexSelectedRow + (isRowAbove ? 0 : 1), onComponentAdded);
                        this.size.height(this.size.height() + selectedRowHeight);
                    };
                    XRTableControlViewModel.prototype.removeChild = function (selectedRow) {
                        if (this.rows().length > 0 && this.rows().indexOf(selectedRow) !== -1) {
                            var index = this.rows().indexOf(selectedRow);
                            this.size.height(this.size.height() - selectedRow.height());
                            this.rows.splice(index, 1);
                        }
                        if (this.rows().length === 0) {
                            this.parentModel().removeChild(this);
                        }
                    };
                    XRTableControlViewModel.prototype.insertColumn = function (selectedCell, isRight, onComponentAdded) {
                        var selectedCellX = selectedCell.surface.rect().left, selectedCellRight = selectedCell.surface.rect().left + selectedCell.surface.rect().width, adjacentCells = this._getAdjacentCells(function (cell) { return isRight ? ((cell.surface.rect().left + cell.surface.rect().width) === selectedCellRight) : (cell.surface.rect().left === selectedCellX); });
                        adjacentCells.forEach(function (cell) {
                            cell.parentModel().insertCellCopy(cell, isRight, onComponentAdded);
                        });
                    };
                    XRTableControlViewModel.prototype.addColumnToCalculation = function (diff, last) {
                        if (last === void 0) { last = false; }
                        var rows = this.rows();
                        for (var i = 0; i < rows.length; i++) {
                            rows[i].addCellToCalculation(last ? rows[i].cells().length - 1 : 0, diff);
                        }
                    };
                    return XRTableControlViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRTableControlViewModel = XRTableControlViewModel;
                var XRTableSurface = (function (_super) {
                    __extends(XRTableSurface, _super);
                    function XRTableSurface(control, context) {
                        var _this = _super.call(this, control, context, XRTableSurface._unitProperties) || this;
                        _this._isUpdating = false;
                        _this.template = "dxrd-table";
                        _this.selectiontemplate = "dxrd-table-selection";
                        _this._disposables.push(_this.css = ko.pureComputed(function () {
                            return {};
                        }));
                        _this._disposables.push(_this.contentCss = ko.pureComputed(function () {
                            return {};
                        }));
                        return _this;
                    }
                    XRTableSurface.prototype._getChildrenHolderName = function () { return "rows"; };
                    XRTableSurface.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.rows);
                        this.resetObservableArray(this.rows);
                    };
                    XRTableSurface.prototype._isCellInColumn = function (cell, locationStart, locationEnd) {
                        return Math.abs(cell.rect().left - locationStart) < 0.01 && Math.abs(cell.rect().left + cell.rect().width - locationEnd) < 0.01;
                    };
                    XRTableSurface.prototype.selectColumn = function (selection, cellSurface) {
                        var _this = this;
                        selection.initialize(this);
                        var locationStart = cellSurface.rect().left, locationEnd = locationStart + cellSurface.rect().width;
                        selection.selecting({ control: cellSurface, cancel: false });
                        this.rows().forEach(function (rowSurface) {
                            rowSurface.cells().forEach(function (cellSurface) {
                                if (_this._isCellInColumn(cellSurface, locationStart, locationEnd)) {
                                    selection.selecting({ control: cellSurface, cancel: false });
                                    return true;
                                }
                            });
                        });
                    };
                    XRTableSurface.prototype.isThereIntersectionWithChildCollection = function () {
                        return false;
                    };
                    XRTableSurface._unitProperties = {
                        _x: function (o) {
                            return o.location.x;
                        },
                        _y: function (o) {
                            return o.location.y;
                        },
                        _width: function (o) {
                            return o.size.width;
                        },
                        _height: function (o) {
                            return o.size.height;
                        }
                    };
                    return XRTableSurface;
                }(Controls.XRControlSurfaceBase));
                Controls.XRTableSurface = XRTableSurface;
                (function (Metadata) {
                    Metadata.processHiddenCellMode = {
                        propertyName: "processHiddenCellMode",
                        modelName: "@ProcessHiddenCellMode",
                        displayName: "Process Hidden Cell Mode",
                        valuesArray: [
                            { value: "LeaveEmptySpace", displayValue: "Leave Empty Space" },
                            { value: "ResizeCellsEqually", displayValue: "Resize Cells Equally" },
                            { value: "ResizeCellsProportionally", displayValue: "Resize Cells Proportionally" },
                            { value: "StretchPreviousCell", displayValue: "Stretch Previous Cell" },
                            { value: "StretchNextCell", displayValue: "Stretch Next Cell" },
                            { value: "DecreaseTableWidth", displayValue: "Decrease Table Width" }
                        ],
                        defaultVal: "LeaveEmptySpace",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        localizationId: 'DevExpress.XtraReports.UI.XRTable.ProcessHiddenCellMode'
                    };
                    Metadata.tableSerializationsInfo = [
                        Metadata.font, Metadata.foreColor, Metadata.keepTogetherDefaultValueFalse, Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.commonScripts,
                        { propertyName: "rows", modelName: "Rows", array: true },
                        Data.Metadata.dataBindings(["Bookmark", "Tag"]),
                        Metadata.rtl,
                        Metadata.textAlignment,
                        Metadata.processHiddenCellMode,
                    ].concat(Metadata.sizeLocation, Metadata.commonControlProperties, Metadata.bookmarkGroup);
                    Metadata.popularPropertiesTable = ["bookmark", "bookmarkParent"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRTableCellViewModel = (function (_super) {
                    __extends(XRTableCellViewModel, _super);
                    function XRTableCellViewModel(model, parent, serializer) {
                        var _this = _super.call(this, model, parent, serializer) || this;
                        _this._disposables.push(_this.width = ko.pureComputed({
                            read: function () {
                                var result = parent.width() * _this.weight() / parent.cellsTotalWeight();
                                return Math.round(result * 100) / 100;
                            },
                            write: function (newWidth) {
                                var currentIndex = parent.cells().indexOf(_this);
                                if (parent.hasCalculationNode(currentIndex))
                                    return;
                                var diff = newWidth - _this.width();
                                if (currentIndex < parent.cells().length - 1) {
                                    parent.addCellToCalculation(currentIndex, diff);
                                    parent.addCellToCalculation(currentIndex + 1, diff * -1);
                                }
                                else {
                                    parent.addColumnToCalculation(diff, true);
                                    parent.addTableOffset(diff);
                                }
                            }
                        }));
                        _this.height = parent.height;
                        _this.size = new DevExpress.Analytics.Elements.Size(0, 0);
                        _this.size.isPropertyDisabled = function (name) { return name === "height"; };
                        _this._disposables.push(_this.size.height = ko.pureComputed({ read: function () { return _this.height(); }, write: function (newVal) { if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                _this.height(newVal);
                            } } }));
                        _this._disposables.push(_this.size.width = ko.pureComputed({ read: function () { return _this.width(); }, write: function (newVal) { if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                _this.width(newVal);
                            } } }));
                        _this._disposables.push(_this.left = ko.pureComputed({
                            read: function () {
                                var index = parent.cells().indexOf(_this);
                                if (index > 0) {
                                    var previousCell = parent.cells()[index - 1];
                                    return previousCell.left() + previousCell.width();
                                }
                                else {
                                    return 0;
                                }
                            },
                            write: function (val) {
                                if (val === _this.left())
                                    return;
                                var index = parent.cells().indexOf(_this);
                                var diff = val - _this.left();
                                if (index > 0) {
                                    parent.addCellToCalculation(index - 1, diff);
                                    parent.addCellToCalculation(index, diff * -1);
                                }
                                else {
                                    parent.addColumnToCalculation(diff * -1);
                                    parent.addTableOffset(diff * -1, diff);
                                }
                            }
                        }));
                        return _this;
                    }
                    XRTableCellViewModel.unitProperties = [];
                    return XRTableCellViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRTableCellViewModel = XRTableCellViewModel;
                var XRTableCellSurface = (function (_super) {
                    __extends(XRTableCellSurface, _super);
                    function XRTableCellSurface(control, context) {
                        var _this = _super.call(this, control, context, XRTableCellSurface._unitProperties) || this;
                        _this._row = _this.parent.getControlModel();
                        _this._table = _this._row.parentModel();
                        _this._cellIndex = function () { return _this._row.cells().indexOf(_this.getControlModel()); };
                        _this._rowIndex = function () { return _this._table.rows().indexOf(_this._row); };
                        _this.direction = Internal.TableActionDirection.horizontal;
                        _this["multiline"] = control["multiline"];
                        _this._disposables.push(_this.contentSizes = ko.pureComputed(function () {
                            if (_this._isShowBorder("Left")) {
                                return _this.cssCalculator.contentSizeCss(_this.rect().width, _this.heightWithRowSpan(), _this._context.zoom());
                            }
                            var bordersArray = control.borders().indexOf("All") === -1 ? control.borders().split(/\s*,\s*/g) : ["Left", "Top", "Right", "Bottom"];
                            var index = bordersArray.indexOf("Left");
                            var width = _this.rect().width;
                            if (index !== -1) {
                                bordersArray.splice(index, 1);
                                width += 1;
                            }
                            return _this.cssCalculator.contentSizeCss(width, _this.heightWithRowSpan(), _this._context.zoom(), bordersArray.join(","));
                        }));
                        _this._disposables.push(_this.css = ko.pureComputed(function () {
                            var bottom = _this.cssCalculator.cellBorder("Bottom", _this._context.zoom());
                            var right = _this.cssCalculator.cellBorder("Right", _this._context.zoom());
                            var left = _this._isShowBorder("Left") ? _this.cssCalculator.cellBorder("Left", _this._context.zoom()) : _this.cssCalculator.createControlBorder("", 0, "transparent", ["Left"], "Left");
                            var top = _this._isShowBorder("Top") ? _this.cssCalculator.cellBorder("Top", _this._context.zoom()) : { borderTop: "" };
                            return $.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.backGroundCss(), right, bottom, top, left, _this.cssCalculator.foreColorCss(), _this.cssCalculator.textAlignmentCss());
                        }));
                        _this._disposables.push(_this.rowSpan = ko.pureComputed(function () {
                            if (_this.controls().length > 0) {
                                return 1;
                            }
                            for (var i = 1; i <= _this._rowIndex() && _this._rowIndex() - i >= 0; i++) {
                                var cell = _this._getAdjacentCellByRowIndex(_this._rowIndex() - i);
                                if (cell && cell.surface.rowSpan() > i)
                                    return 0;
                            }
                            var rowSpan = control["rowSpan"]();
                            var lastRowSpan = 1;
                            var rowCount = _this._table.rows().length;
                            for (var i = 1; i < rowSpan && i + _this._rowIndex() < rowCount; i++, lastRowSpan++) {
                                var nextCell = _this._getAdjacentCellByRowIndex(_this._rowIndex() + i);
                                if (nextCell && (nextCell.width() != control.width() || nextCell["rowSpan"]() > 1 || nextCell.controls().length > 0)) {
                                    return lastRowSpan;
                                }
                            }
                            return lastRowSpan;
                        }));
                        _this._disposables.push(_this.heightWithRowSpan = ko.pureComputed(function () {
                            var _height = _this.rect().height;
                            if (_this.rowSpan() > 1) {
                                for (var i = 1; i < _this.rowSpan(); i++) {
                                    var cell = _this._getAdjacentCellByRowIndex(_this._rowIndex() + i);
                                    if (cell && cell.surface)
                                        _height += cell.surface.rect().height;
                                }
                            }
                            else if (_this.rowSpan() === 0) {
                                return 0;
                            }
                            return _height;
                        }));
                        _this.offsetZIndex = function () {
                            var hasRowSpan = _this.rowSpan() > 1;
                            return hasRowSpan && (_this.selected() || _this.focused()) && 2 || hasRowSpan && 1 || null;
                        };
                        _this.getUsefulRect = function () {
                            var borderWidth = ko.unwrap(control["borderWidth"]), borderFlags = control.borders();
                            var rect = { top: 0, left: 0, width: _this.rect().width, height: _this.rect().height };
                            if (borderWidth) {
                                var allBorders = borderFlags === "All";
                                if ((allBorders || borderFlags.indexOf("Top") >= 0) && _this._isShowBorder("Top")) {
                                    rect.top += borderWidth;
                                    rect.height -= borderWidth;
                                }
                                if (allBorders || borderFlags.indexOf("Right") >= 0)
                                    rect.width -= borderWidth;
                                if (allBorders || borderFlags.indexOf("Bottom") >= 0)
                                    rect.height -= borderWidth;
                                if ((allBorders || borderFlags.indexOf("Left") >= 0) && _this._isShowBorder("Left")) {
                                    rect.left += borderWidth;
                                    rect.width -= borderWidth;
                                }
                            }
                            return rect;
                        };
                        return _this;
                    }
                    XRTableCellSurface.prototype._getAdjacentCellByRowIndex = function (rowIndex) {
                        var nextRow = this._table.rows()[rowIndex];
                        return nextRow && nextRow.cells && nextRow.cells()[this._cellIndex()];
                    };
                    XRTableCellSurface.prototype._isShowBorder = function (side) {
                        if (side === "Top") {
                            var prevCell = this._getAdjacentCellByRowIndex(this._rowIndex() - 1);
                            var borders = prevCell && prevCell["borders"]();
                            return (this._rowIndex() === 0) || (borders && borders !== "All" && borders.indexOf("Bottom") === -1);
                        }
                        if (side === "Left") {
                            var prevCell = this._row.cells()[this._cellIndex() - 1], borders = prevCell && prevCell.borders();
                            return (this._cellIndex() === 0) || (borders && borders !== "All" && borders.indexOf("Right") === -1);
                        }
                    };
                    XRTableCellSurface.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.controls);
                        this.resetObservableArray(this.controls);
                    };
                    XRTableCellSurface.prototype.selectColumn = function (selection) {
                        (this.parent.parent).selectColumn(selection, this);
                    };
                    XRTableCellSurface.prototype.checkParent = function (surfaceParent) {
                        return this.parent.parent === surfaceParent;
                    };
                    XRTableCellSurface.prototype.isThereIntersectionWithUsefulArea = function () {
                        return false;
                    };
                    XRTableCellSurface.prototype.isThereIntersectionWithCrossBandControls = function () {
                        return false;
                    };
                    XRTableCellSurface.prototype.isThereIntersectionWithNeighborsCollection = function () {
                        return false;
                    };
                    XRTableCellSurface.prototype.isThereIntersectionWithParentCollection = function () {
                        return false;
                    };
                    XRTableCellSurface.prototype.beforeRectUpdated = function (rect) {
                        var _rowSpan = this.rowSpan.peek();
                        for (var i = 1; i < _rowSpan; i++) {
                            var nextCell = this._getAdjacentCellByRowIndex(this._rowIndex() + i);
                            ;
                            nextCell && nextCell.surface.rect(rect);
                        }
                        return _super.prototype.beforeRectUpdated.call(this, rect);
                    };
                    XRTableCellSurface.prototype.canDrop = function () {
                        return _super.prototype.canDrop.call(this) && this.rowSpan() === 1;
                    };
                    XRTableCellSurface._unitProperties = {
                        _height: function (o) {
                            return o.height;
                        },
                        _width: function (o) {
                            return o.width;
                        },
                        _x: function (o) {
                            return o.left;
                        }
                    };
                    return XRTableCellSurface;
                }(Internal.TableComponentSurface));
                Controls.XRTableCellSurface = XRTableCellSurface;
                (function (Metadata) {
                    Metadata.weight = { propertyName: "weight", modelName: "@Weight", defaultVal: 0, from: DevExpress.Analytics.Utils.floatFromModel };
                    Metadata.rowSpan = { propertyName: "rowSpan", modelName: "@RowSpan", displayName: "Row Span", localizationId: "DevExpress.XtraReports.UI.XRTableCell.RowSpan", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric };
                    Metadata.tableCellSerializationsInfo = [
                        Metadata.weight, Metadata.labelScripts, Metadata.rowSpan, Metadata.textTrimming,
                        { propertyName: "width", displayName: "Width", localizationId: "DevExpress.XtraReports.UI.XRControl.Width" },
                        { propertyName: "controls", modelName: "Controls", array: true },
                        Data.Metadata.dataBindings(["Text", "NavigateUrl", "Tag", "Bookmark"]),
                        Metadata.textEditOptions, Metadata.allowMarkupText
                    ].concat(Internal.createSinglePopularBindingInfos("Text"), Metadata.labelGroup);
                    Metadata.popularPropertiesTableCell = ["text", "textArea", "popularDataBinding", "popularExpression", "textFormatString", "Summary", "canGrow", "canShrink", "multiline", "wordWrap"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var TableOfContentsLevel = (function (_super) {
                    __extends(TableOfContentsLevel, _super);
                    function TableOfContentsLevel(model, parent, serializer, isTitle) {
                        if (isTitle === void 0) { isTitle = false; }
                        var _this = _super.call(this, $.extend({ "@ControlType": "TableOfContentsLevel", isTitle: isTitle }, model), parent, serializer) || this;
                        _this.borderWidth = parent.borderWidth;
                        _this.borderColor = parent.borderColor;
                        _this.borders = parent.borders;
                        _this.dpi = parent.dpi;
                        if (_this.padding) {
                            _this._createPaddingDependencies();
                        }
                        _this.borderDashStyle = parent.borderDashStyle;
                        _this.borderDefault = parent.borderDefault;
                        _this._disposables.push(_this._levelIndex = ko.pureComputed(function () { return parent.allLevels().indexOf(_this); }));
                        _this._disposables.push(_this._indentFactor = ko.pureComputed(function () { return Internal.recalculateUnit(60, _this.parentModel().dpi()); }));
                        _this.indent = _this.indent || ko.observable(0);
                        _this._disposables.push(_this.left = ko.pureComputed({
                            read: function () {
                                if (!_this.indent)
                                    return 0;
                                if (_this.indent() !== null && _this.indent() !== undefined)
                                    return _this.indent();
                                return _this._levelIndex() === 0 ? 0 : (_this._levelIndex() - 1) * _this._indentFactor();
                            },
                            write: $.noop
                        }));
                        _this._disposables.push(_this.width = ko.pureComputed({
                            read: function () { return parent.size.width() - _this.left(); },
                            write: $.noop
                        }));
                        _this._disposables.push(_this.name = ko.pureComputed(function () {
                            if (_this.isTitle)
                                return null;
                            if (_this._levelIndex() == parent.allLevels().length - 1)
                                return "Level (Default)";
                            return "Level " + _this._levelIndex();
                        }));
                        _this._disposables.push(_this.top = ko.computed({
                            read: function () {
                                var previousLevel = parent.allLevels()[_this._levelIndex() - 1];
                                return previousLevel ? previousLevel.top() + previousLevel.height() : 0;
                            },
                            write: $.noop,
                            deferEvaluation: true
                        }));
                        _this.lockedInUserDesigner = parent.lockedInUserDesigner;
                        return _this;
                    }
                    TableOfContentsLevel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.parentModel(null);
                    };
                    TableOfContentsLevel.createNew = function (parent) {
                        return new TableOfContentsLevel({ "@Height": Internal.recalculateUnit(levelDefaultHeight, parent.dpi()) }, parent);
                    };
                    TableOfContentsLevel.prototype._createPaddingDependencies = function () {
                        var _this = this;
                        this.paddingObj = new DevExpress.Analytics.Elements.PaddingModel();
                        this._disposables.push(this.paddingObj);
                        this.paddingObj.applyFromString(this["padding"]());
                        this.paddingObj.dpi = ko.computed(function () { return _this.dpi && _this.dpi(); });
                        var lock = new Internal.Locker().lock;
                        this._disposables.push(this.padding.subscribe(function (newVal) { return lock(function () { return _this.paddingObj.applyFromString(newVal); }); }));
                        ["left", "right", "top", "bottom"].forEach(function (name) {
                            _this._disposables.push(_this.paddingObj[name].subscribe(function (newVal) {
                                if (_this.root["isModelReady"] && _this.root["isModelReady"]() || !_this.root["isModelReady"])
                                    lock(function () { return _this.padding(_this.paddingObj.toString()); });
                            }));
                        });
                        this._disposables.push(this.paddingObj.dpi.subscribe(function (newVal) { return lock(function () {
                            if (_this.padding())
                                _this.padding(_this.paddingObj.toString());
                        }); }));
                        this.paddingObj["resetValue"] = function () {
                            lock(function () {
                                ["left", "right", "top", "bottom"].forEach(function (name) { return _this.paddingObj[name](null); });
                                _this.padding(_this.paddingObj.toString());
                                _this.paddingObj.applyFromString(_this.padding());
                            });
                        };
                    };
                    TableOfContentsLevel.prototype.preInitProperties = function (model) {
                        this.isTitle = model.isTitle;
                        delete model["isTitle"];
                    };
                    TableOfContentsLevel.prototype.getInfo = function () {
                        return this.isTitle ? Metadata.tocTitleSerializationsInfo : Metadata.tocLevelSerializationsInfo;
                    };
                    TableOfContentsLevel.prototype.isPropertyModified = function (name) {
                        return false;
                    };
                    TableOfContentsLevel.prototype.getControlFactory = function () {
                        return Utils.controlsFactory;
                    };
                    TableOfContentsLevel.prototype.rtl = function () {
                        return this.parentModel() && this.parentModel().rtl();
                    };
                    TableOfContentsLevel.unitProperties = ["height", "indent"];
                    return TableOfContentsLevel;
                }(DevExpress.Analytics.Elements.ElementViewModel));
                Controls.TableOfContentsLevel = TableOfContentsLevel;
                var TableOfContentsLevelSurface = (function (_super) {
                    __extends(TableOfContentsLevelSurface, _super);
                    function TableOfContentsLevelSurface(control, context) {
                        var _this = _super.call(this, control, context, TableOfContentsLevelSurface._unitProperties) || this;
                        _this._leaderSymbolWidth = ko.pureComputed(function () {
                            if (!TableOfContentsLevelSurface._$leaderSymbol)
                                TableOfContentsLevelSurface._$leaderSymbol = $("<span />").hide().appendTo("body");
                            TableOfContentsLevelSurface._$leaderSymbol.html(_this.getControlModel().leaderSymbol()).css(_this.contentCss());
                            return TableOfContentsLevelSurface._$leaderSymbol.width();
                        });
                        _this.leaderSymbols = ko.pureComputed(function () {
                            var elementWidth = _this.contentWidthWithoutZoom();
                            if (elementWidth <= 0)
                                return "";
                            var symbolsCount = elementWidth / _this._leaderSymbolWidth();
                            var symbol = _this.getControlModel().leaderSymbol();
                            var a = [];
                            while (a.length < symbolsCount) {
                                a.push(symbol);
                            }
                            return a.join('');
                        });
                        _this._disposables.push(_this.isIntersect = ko.computed(function () { return false; }));
                        _this._disposables.push(_this.leaderSymbols);
                        _this.text = control.text;
                        _this.template = "dxrd-table-of-contents-level";
                        return _this;
                    }
                    TableOfContentsLevelSurface.prototype.resizable = function (resizeHandler, element) {
                        return $.extend({}, resizeHandler, {
                            handles: 's',
                            $selectedNodes: $(element),
                            minimumHeight: 10
                        });
                    };
                    TableOfContentsLevelSurface.prototype.rtlLayout = function () {
                        return this._control.rtl();
                    };
                    TableOfContentsLevelSurface._unitProperties = {
                        _height: function (o) {
                            return o.height;
                        },
                        _width: function (o) {
                            return o.width;
                        },
                        _x: function (o) {
                            return o.left;
                        },
                        _y: function (o) {
                            return o.top;
                        },
                    };
                    return TableOfContentsLevelSurface;
                }(Controls.XRControlSurfaceBase));
                Controls.TableOfContentsLevelSurface = TableOfContentsLevelSurface;
                var levelDefaultHeight = 23;
                (function (Metadata) {
                    var font = { propertyName: "font", modelName: "@Font", defaultVal: "Times New Roman, 9.75pt", displayName: "Font", localizationId: "DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font", editor: DevExpress.Analytics.Widgets.editorTemplates.font };
                    var backColor = { propertyName: "backColor", modelName: "@BackColor", defaultVal: "Transparent", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, displayName: "Background Color", localizationId: "DevExpress.XtraReports.UI.XRControl.BackColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor };
                    var foreColor = { propertyName: "foreColor", modelName: "@ForeColor", defaultVal: "Black", from: DevExpress.Analytics.Utils.colorFromString, toJsonObject: DevExpress.Analytics.Utils.colorToString, displayName: "Foreground Color", localizationId: "DevExpress.XtraReports.UI.XRControl.ForeColor", editor: DevExpress.Analytics.Widgets.editorTemplates.customColorEditor };
                    Metadata.baseTocLevelSerializationsInfo = [
                        backColor,
                        font,
                        foreColor,
                        { propertyName: "height", modelName: "@Height", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: levelDefaultHeight, displayName: "Height", localizationId: "DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Height", from: DevExpress.Analytics.Utils.floatFromModel, editorOptions: { min: 10 } }
                    ].concat(Metadata.paddingGroup);
                    Metadata.tocLevelSerializationsInfo = [
                        { propertyName: "leaderSymbol", modelName: "@LeaderSymbol", editor: DevExpress.Analytics.Widgets.editorTemplates.text, defaultVal: ".", displayName: "Leader Symbol", localizationId: "DevExpress.XtraReports.UI.XRTableOfContentsLevel.LeaderSymbol", editorOptions: { maxLength: 1 } },
                        { propertyName: "indent", modelName: "@Indent", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, defaultVal: null, displayName: "Indent", localizationId: "DevExpress.XtraReports.UI.XRTableOfContentsLevel.Indent", from: DevExpress.Analytics.Utils.floatFromModel }
                    ].concat(Metadata.baseTocLevelSerializationsInfo);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRTableOfContentsViewModel = (function (_super) {
                    __extends(XRTableOfContentsViewModel, _super);
                    function XRTableOfContentsViewModel(control, parent, serializer) {
                        var _this = _super.call(this, control, parent, serializer) || this;
                        _this.borderDefault = ko.pureComputed(function () { return "none"; });
                        _this._disposables.push(_this.levelTitle = new TableOfContentsLevel(control["LevelTitle"], _this, serializer, true));
                        _this.levelTitleText = _this.levelTitle.text;
                        _this._disposables.push(_this.levelDefault = new TableOfContentsLevel(control["LevelDefault"], _this, serializer));
                        _this.levels = DevExpress.Analytics.Utils.deserializeArray(control["Levels"], function (item) { return new TableOfContentsLevel(item, _this, serializer); });
                        _this._disposables.push(_this.allLevels = ko.computed(function () {
                            var array = [_this.levelTitle];
                            Array.prototype.push.apply(array, _this.levels());
                            array.push(_this.levelDefault);
                            return array;
                        }));
                        _this._disposables.push(_this.size.height = ko.computed({
                            read: function () { return _this.levelDefault.top() + _this.levelDefault.height(); },
                            write: $.noop
                        }));
                        _this._disposables.push(_this.size.width = ko.computed({
                            read: function () { return (_this.parentModel() ? _this.parentModel().size.width() : 0); },
                            write: $.noop
                        }));
                        _this._disposables.push(_this.location.x = ko.computed({
                            read: function () { return 0; },
                            write: function () { }
                        }));
                        _this._disposables.push(_this.borderDefault);
                        return _this;
                    }
                    XRTableOfContentsViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.levels);
                        this.resetObservableArray(this.levels);
                    };
                    Object.defineProperty(XRTableOfContentsViewModel.prototype, "textEditableProperty", {
                        get: function () { return this.levelTitleText; },
                        enumerable: true,
                        configurable: true
                    });
                    return XRTableOfContentsViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRTableOfContentsViewModel = XRTableOfContentsViewModel;
                var XRTableOfContentsSurface = (function (_super) {
                    __extends(XRTableOfContentsSurface, _super);
                    function XRTableOfContentsSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.levels = ko.observableArray();
                        _this._disposables.push(_this.levelTitle = new TableOfContentsLevelSurface(control.levelTitle, context));
                        _this._disposables.push(_this.levelDefault = new TableOfContentsLevelSurface(control.levelDefault, context));
                        _this._disposables.push(DevExpress.Analytics.Internal.createObservableArrayMapCollection(control.levels, _this.levels, function (item) { return new TableOfContentsLevelSurface(item, context); }));
                        _this.template = "dxrd-table-of-contents";
                        _this.selectiontemplate = "dxrd-table-of-contents-selected";
                        return _this;
                    }
                    XRTableOfContentsSurface.prototype.isThereIntersectionWithChildCollection = function () {
                        return false;
                    };
                    XRTableOfContentsSurface.prototype.isThereIntersectionWithUsefulArea = function () {
                        return false;
                    };
                    XRTableOfContentsSurface.prototype.isThereIntersectionWithParentCollection = function () {
                        return false;
                    };
                    return XRTableOfContentsSurface;
                }(Controls.XRControlSurface));
                Controls.XRTableOfContentsSurface = XRTableOfContentsSurface;
                (function (Metadata) {
                    var size = { propertyName: "size", modelName: "@SizeF", from: DevExpress.Analytics.Elements.Size.fromString };
                    var formattingRuleLinks = {
                        propertyName: "formattingRuleLinks", modelName: "FormattingRuleLinks"
                    };
                    Metadata.tocTitleSerializationsInfo = [Metadata.text, $.extend({}, Metadata.textAlignment, { defaultVal: "TopLeft" })].concat(Metadata.baseTocLevelSerializationsInfo);
                    Metadata.tocTitle = { propertyName: "levelTitle", modelName: "LevelTitle", displayName: "Level Title", localizationId: "DevExpress.XtraReports.UI.XRTableOfContents.LevelTitle", info: Metadata.tocTitleSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.tocLevelDefault = { propertyName: "levelDefault", modelName: "LevelDefault", displayName: "Level Default", localizationId: "DevExpress.XtraReports.UI.XRTableOfContents.LevelDefault", info: Metadata.tocLevelSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.maxNestingLevel = { propertyName: "maxNestingLevel", modelName: "@MaxNestingLevel", defaultVal: 0, displayName: "Max Nesting Level", localizationId: "DevExpress.XtraReports.UI.XRTableOfContents.MaxNestingLevel", editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, editorOptions: { min: 0 } };
                    Metadata.tocLevels = {
                        propertyName: "levels",
                        modelName: "Levels",
                        displayName: "Levels", localizationId: "DevExpress.XtraReports.UI.XRTableOfContents.Levels",
                        array: true,
                        editor: Widgets.editorTemplates.toclevel,
                        template: "#dxrd-collectionItemWithAccordion"
                    };
                    var tocProperties = Metadata.commonControlProperties.filter(function (item) { return item !== Metadata.canPublish; });
                    Metadata.tocSerializationsInfo = [formattingRuleLinks, size, Metadata.location, Metadata.tocTitle, Metadata.tocLevels, Metadata.tocLevelDefault, Metadata.maxNestingLevel, Metadata.rtl].concat(tocProperties);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRTableRowViewModel = (function (_super) {
                    __extends(XRTableRowViewModel, _super);
                    function XRTableRowViewModel(control, parent, serializer) {
                        var _this = _super.call(this, control, parent, serializer) || this;
                        _this.top = ko.observable(0);
                        _this.width = parent.size.width;
                        _this.cells = ko.observableArray();
                        _this._disposables.push(_this.cellsTotalWeight = ko.pureComputed(function () {
                            var result = 0;
                            _this.cells().forEach(function (cell) {
                                result += cell.weight();
                            });
                            return result;
                        }));
                        _this._disposables.push(_this.pixelWidthWeight = ko.pureComputed(function () {
                            return parent.size.width() !== 0 ? _this.cellsTotalWeight() / parent.size.width() : 0;
                        }));
                        _this._disposables.push(_this.height = ko.pureComputed({
                            read: function () {
                                var result = parent.size.height() * _this.weight() / parent.rowsTotalWeight();
                                return Math.round(result * 100) / 100;
                            },
                            write: function (newHeight) {
                                var dHeight = newHeight - _this.height(), newWeight = parent.pixelHeightWeight() * newHeight, dWeight = newWeight - _this.weight(), thisRowIndex = parent.rows().indexOf(_this);
                                _this.weight(newWeight);
                                if (thisRowIndex < parent.rows().length - 1) {
                                    parent.rows()[thisRowIndex + 1].weight(parent.rows()[thisRowIndex + 1].weight() - dWeight);
                                }
                                else {
                                    parent.size.height(parent.size.height() + dHeight);
                                }
                            }
                        }));
                        _this.size = new DevExpress.Analytics.Elements.Size(0, 0);
                        _this._disposables.push(_this.size.height = ko.pureComputed({ read: function () { return _this.height(); }, write: function (newVal) { if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                _this.height(newVal);
                            } } }));
                        _this._disposables.push(_this.size.width = ko.pureComputed({ read: function () { return _this.width(); }, write: function (newVal) { if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                _this.width(newVal);
                            } } }));
                        var deserializedCells = DevExpress.Analytics.Utils.deserializeArray(control.Cells, function (item) { return _this.getControlFactory().createControl(item, _this, serializer); });
                        _this.cells(deserializedCells());
                        var _top = ko.observable(null);
                        _this._disposables.push(_this.top = ko.pureComputed({
                            read: function () {
                                var index = parent.rows().indexOf(_this);
                                if (index > 0) {
                                    var previousRow = parent.rows()[index - 1];
                                    _top(previousRow.top() + previousRow.height());
                                }
                                else {
                                    _top(0);
                                }
                                return _top();
                            },
                            write: function (val) {
                                parent.updateRowLocation(_this, _top() - val);
                                _top(val);
                            }
                        }));
                        return _this;
                    }
                    XRTableRowViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.cells);
                        this.resetObservableArray(this.cells);
                    };
                    XRTableRowViewModel.prototype.hasCalculationNode = function (cellIndex) {
                        return this.parentModel().tableCalculationProvider.hasCalculationNode(this.parentModel().rows().indexOf(this), cellIndex);
                    };
                    XRTableRowViewModel.prototype.addCellToCalculation = function (cellIndex, delta) {
                        var cell = this.cells()[cellIndex];
                        var newWeight = this.pixelWidthWeight() * (cell.width() + delta);
                        this.parentModel().tableCalculationProvider.addCalculationNode({
                            column: cellIndex,
                            row: this.parentModel().rows().indexOf(this),
                            calc: function () {
                                cell.weight(newWeight);
                            }
                        });
                    };
                    XRTableRowViewModel.prototype.addColumnToCalculation = function (diff, last) {
                        this.parentModel().addColumnToCalculation(diff, last);
                    };
                    XRTableRowViewModel.prototype.addTableOffset = function (width, left) {
                        this.parentModel().tableCalculationProvider.addTableOffset(width, left);
                    };
                    XRTableRowViewModel.prototype.addChild = function (control, position, onComponentAdded) {
                        if (control instanceof XRTableCellViewModel) {
                            if (this.cells().indexOf(control) === -1) {
                                control.parentModel(this);
                                if (position != null) {
                                    this.cells.splice(position, 0, control);
                                }
                                else {
                                    this.cells.push(control);
                                }
                                if ($.isFunction(onComponentAdded))
                                    onComponentAdded({ parent: this, model: control });
                            }
                        }
                        else {
                            throw new Error("Trying to add non a cell to the table row.");
                        }
                    };
                    XRTableRowViewModel.prototype.insertCellCopy = function (selectedCell, isRight, onComponentAdded) {
                        var newCellWeight = selectedCell.weight() / 2, newCell = new XRTableCellViewModel({ "@ControlType": "XRTableCell", "@Weight": newCellWeight, "@Padding": selectedCell.padding(), "@Multiline": "true" }, this), indexSelectedCell = this.cells.indexOf(selectedCell);
                        this.addChild(newCell, indexSelectedCell + (isRight ? 1 : 0), onComponentAdded);
                        if (newCell["text"]) {
                            newCell["text"](newCell.name());
                        }
                        selectedCell.weight(newCellWeight);
                    };
                    XRTableRowViewModel.prototype.removeChild = function (selectedCell) {
                        if (this.cells().length > 0 && this.cells().indexOf(selectedCell) !== -1) {
                            var index = this.cells().indexOf(selectedCell), selectedCellWeight = selectedCell.weight();
                            this.cells.splice(index, 1);
                            if (this.cells()[index]) {
                                this.cells()[index].weight(this.cells()[index].weight() + selectedCellWeight);
                            }
                            else if (this.cells()[index - 1]) {
                                this.cells()[index - 1].weight(this.cells()[index - 1].weight() + selectedCellWeight);
                            }
                            if (this.cells().length === 0) {
                                this.parentModel().removeChild(this);
                            }
                        }
                    };
                    XRTableRowViewModel.unitProperties = [];
                    return XRTableRowViewModel;
                }(Controls.XRControlViewModel));
                Controls.XRTableRowViewModel = XRTableRowViewModel;
                var XRTableRowSurface = (function (_super) {
                    __extends(XRTableRowSurface, _super);
                    function XRTableRowSurface(control, context) {
                        var _this = _super.call(this, control, context, XRTableRowSurface._unitProperties) || this;
                        _this.direction = Internal.TableActionDirection.vertical;
                        _this._disposables.push(_this.css = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.backGroundCss());
                        }));
                        _this._disposables.push(_this.contentCss = ko.pureComputed(function () {
                            return {};
                        }));
                        return _this;
                    }
                    XRTableRowSurface.prototype._getChildrenHolderName = function () { return "cells"; };
                    XRTableRowSurface.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.cells);
                        this.resetObservableArray(this.cells);
                    };
                    XRTableRowSurface.prototype.getAdornTemplate = function () {
                        return XRTableRowSurface._appendValue("", "dxrd-image-surface-bounded", this.hasBindings);
                    };
                    XRTableRowSurface._unitProperties = {
                        _height: function (o) {
                            return o.height;
                        },
                        _width: function (o) {
                            return o.width;
                        },
                        _y: function (o) {
                            return o.top;
                        }
                    };
                    return XRTableRowSurface;
                }(Internal.TableComponentSurface));
                Controls.XRTableRowSurface = XRTableRowSurface;
                (function (Metadata) {
                    Metadata.tableRowSerializationsInfo = [
                        Metadata.weight, Metadata.textAlignment, Metadata.keepTogether, Metadata.controlScripts,
                        { propertyName: "height", displayName: "Height", localizationId: "DevExpress.XtraReports.UI.XRControl.Height" },
                        { propertyName: "cells", modelName: "Cells", array: true },
                    ].concat(Metadata.commonControlProperties, Metadata.fontGroup);
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
                var XRZipCodeSurface = (function (_super) {
                    __extends(XRZipCodeSurface, _super);
                    function XRZipCodeSurface(control, context) {
                        var _this = _super.call(this, control, context) || this;
                        _this.displayText = function () {
                            var text = control.text();
                            text = text && text.replace(/[^\d]/g, "_") || "0".replace(/[^\d]/g, "_");
                            return text;
                        };
                        _this.fontSize = ko.pureComputed(function () {
                            return DevExpress.Analytics.Internal.unitsToPixel(control["size"]["height"](), context.measureUnit());
                        });
                        _this.letterSpacing = ko.pureComputed(function () {
                            return Math.ceil(_this.fontSize() / 10);
                        });
                        _this.css = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.zipCodeFontCss(_this.fontSize()), _this.cssCalculator.backGroundCss(), _this.cssCalculator.zipCodeAlignment(), _this.cssCalculator.foreColorCss());
                        });
                        _this.contentCss = ko.pureComputed(function () {
                            return $.extend({}, _this.cssCalculator.zipCodeAlignment(), _this.cssCalculator.paddingsCss(), { 'letterSpacing': _this.letterSpacing() + "px" }, { 'lineHeight': 'inherit' });
                        });
                        return _this;
                    }
                    return XRZipCodeSurface;
                }(Controls.XRControlSurface));
                Controls.XRZipCodeSurface = XRZipCodeSurface;
                (function (Metadata) {
                    Metadata.segmentWidth = { propertyName: "segmentWidth", modelName: "@SegmentWidth", defaultVal: 4, from: DevExpress.Analytics.Utils.floatFromModel, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Segment Width", localizationId: "DevExpress.XtraReports.UI.XRZipCode.SegmentWidth" };
                    Metadata.zipCodeSerializationInfo = [
                        Metadata.foreColor, Metadata.segmentWidth, Metadata.keepTogether, Metadata.anchorVertical, Metadata.anchorHorizontal, Metadata.textControlScripts,
                        $.extend({}, Metadata.text, { defaultVal: "0" }), Metadata.textFormatString,
                        Data.Metadata.dataBindings(["Bookmark", "NavigateUrl", "Tag", "Text"])
                    ].concat(Internal.createSinglePopularBindingInfos("Text"), Metadata.sizeLocation, Metadata.commonControlProperties, Metadata.navigationGroup);
                    Metadata.popularPropertiesZipCode = ["text", "popularDataBinding", "popularExpression", "segmentWidth", "bookmark", "bookmarkParent"];
                })(Metadata = Controls.Metadata || (Controls.Metadata = {}));
            })(Controls = Designer.Controls || (Designer.Controls = {}));
            (function (Bands) {
                var Internal;
                (function (Internal) {
                    Internal.bandsWeight = {
                        "TopMarginBand": 100,
                        "ReportHeaderBand": 200,
                        "PageHeaderBand": 300,
                        "GroupHeaderBand": 400,
                        "DetailBand": 500,
                        "VerticalHeaderBand": 500,
                        "VerticalDetailBand": 600,
                        "VerticalTotalBand": 700,
                        "DetailReportBand": 800,
                        "GroupFooterBand": 900,
                        "ReportFooterBand": 1000,
                        "PageFooterBand": 1100,
                        "BottomMarginBand": 1200
                    };
                })(Internal = Bands.Internal || (Bands.Internal = {}));
                var GroupFieldModel = (function (_super) {
                    __extends(GroupFieldModel, _super);
                    function GroupFieldModel(model, serializer) {
                        var _this = _super.call(this) || this;
                        serializer = serializer || new DevExpress.Analytics.Utils.ModelSerializer();
                        serializer.deserialize(_this, model);
                        _this.changeSortOrder = function () {
                            var sortOrderValue = _this.sortOrder();
                            if (sortOrderValue === "Ascending") {
                                _this.sortOrder("Descending");
                            }
                            else if (sortOrderValue === "None") {
                                _this.sortOrder("Ascending");
                            }
                            else {
                                _this.sortOrder("None");
                            }
                        };
                        _this._disposables.push(_this.sortOrderClass = ko.pureComputed(function () {
                            var orderString = _this.sortOrder().toLowerCase();
                            orderString = orderString === "none" ? "unsorted" : orderString;
                            return { class: "dxrd-image-" + orderString, template: "dxrd-svg-operations-" + orderString };
                        }));
                        return _this;
                    }
                    GroupFieldModel.prototype.getInfo = function () {
                        return groupFieldSerializationInfo;
                    };
                    GroupFieldModel.createNew = function () {
                        return new GroupFieldModel({});
                    };
                    return GroupFieldModel;
                }(DevExpress.Analytics.Utils.Disposable));
                Bands.GroupFieldModel = GroupFieldModel;
                var groupFieldSerializationInfo = [
                    { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", localizationId: "DevExpress.XtraReports.UI.GroupField.FieldName", editor: Widgets.editorTemplates.dataBinding },
                    { propertyName: "sortOrder", modelName: "@SortOrder", displayName: "Sort Order", localizationId: "DevExpress.XtraReports.UI.GroupField.SortOrder", defaultVal: "Ascending" }
                ];
                var Metadata;
                (function (Metadata) {
                    Metadata.groupFields = {
                        propertyName: "groupFields",
                        modelName: "GroupFields", displayName: "Group Fields", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.GroupFields", array: true, editor: DevExpress.Analytics.Widgets.editorTemplates.commonCollection,
                        addHandler: GroupFieldModel.createNew, template: '#dxrd-collection-item-group',
                        getChildCaption: function (index) {
                            if (index === 0)
                                return DevExpress.Analytics.Utils.getLocalization('Group By', 'DataAccessUIStringId.QueryBuilderColumns_GroupBy');
                            return DevExpress.Analytics.Utils.getLocalization('Then By', 'ASPxReportsStringId.ReportDesigner_SortFields_ThenBy');
                        }
                    };
                    Metadata.sortFields = {
                        propertyName: "sortFields",
                        modelName: "SortFields", displayName: "Sort Fields", localizationId: "DevExpress.XtraReports.UI.DetailBand.SortFields", array: true, editor: DevExpress.Analytics.Widgets.editorTemplates.commonCollection,
                        addHandler: GroupFieldModel.createNew, template: '#dxrd-collection-item-group',
                        getChildCaption: function (index) {
                            if (index === 0)
                                return DevExpress.Analytics.Utils.getLocalization('Sort By', 'ASPxReportsStringId.ReportDesigner_SortFields_SortBy');
                            return DevExpress.Analytics.Utils.getLocalization('Then By', 'ASPxReportsStringId.ReportDesigner_SortFields_ThenBy');
                        }
                    };
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                var MultiColumn = (function (_super) {
                    __extends(MultiColumn, _super);
                    function MultiColumn(model, pageWidth, margins, serializer) {
                        var _this = _super.call(this, model || {}, serializer, multiColumnSerializationsInfo) || this;
                        _this.grayAreaWidth = ko.observable(0);
                        _this._disposables.push(_this.realColumnWidth = ko.pureComputed(function () {
                            var bandWidth = pageWidth() - margins.left() - margins.right(), result = bandWidth;
                            _this.grayAreaWidth(0);
                            if (_this.mode() === "UseColumnWidth") {
                                if (_this.columnWidth() > bandWidth) {
                                    _this.grayAreaWidth(0);
                                    result = bandWidth - _this.columnSpacing();
                                }
                                else if (_this.columnWidth() > 0) {
                                    _this.grayAreaWidth(bandWidth - _this.columnWidth() - _this.columnSpacing());
                                    result = _this.columnWidth();
                                }
                            }
                            else if (_this.mode() === "UseColumnCount" && _this.columnCount() > 1) {
                                result = (bandWidth - _this.columnSpacing() * (_this.columnCount() - 1)) / _this.columnCount();
                                _this.grayAreaWidth(bandWidth - result - _this.columnSpacing());
                            }
                            return result;
                        }));
                        _this._disposables.push(_this.columnWidth.subscribe(function (newVal) { _this.mode("UseColumnWidth"); }));
                        _this._disposables.push(_this.columnCount.subscribe(function (newVal) { _this.mode("UseColumnCount"); }));
                        return _this;
                    }
                    MultiColumn.unitProperties = ["columnWidth", "columnSpacing"];
                    return MultiColumn;
                }(DevExpress.Analytics.Elements.SerializableModel));
                Bands.MultiColumn = MultiColumn;
                var multiColumnSerializationsInfo = [
                    { propertyName: "columnCount", modelName: "@ColumnCount", displayName: "Column Count", localizationId: "DevExpress.XtraReports.UI.MultiColumn.ColumnCount", defaultVal: 1, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, from: DevExpress.Analytics.Utils.floatFromModel },
                    { propertyName: "columnWidth", modelName: "@ColumnWidth", displayName: "Column Width", localizationId: "DevExpress.XtraReports.UI.MultiColumn.ColumnWidth", defaultVal: 0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, from: DevExpress.Analytics.Utils.floatFromModel },
                    { propertyName: "columnSpacing", modelName: "@ColumnSpacing", displayName: "Column Spacing", localizationId: "DevExpress.XtraReports.UI.MultiColumn.ColumnSpacing", defaultVal: 0, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, from: DevExpress.Analytics.Utils.floatFromModel },
                    {
                        propertyName: "layout", modelName: "@Layout", displayName: "Layout", localizationId: "DevExpress.XtraReports.UI.MultiColumn.Layout", defaultVal: "DownThenAcross", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "DownThenAcross", displayValue: "DownThenAcross", localizationId: "DevExpress.XtraPrinting.ColumnLayout.DownThenAcross" },
                            { value: "AcrossThenDown", displayValue: "AcrossThenDown", localizationId: "DevExpress.XtraPrinting.ColumnLayout.AcrossThenDown" }
                        ]
                    }, {
                        propertyName: "mode", modelName: "@Mode", displayName: "Mode", localizationId: "DevExpress.XtraReports.UI.MultiColumn.Mode", defaultVal: "None", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, valuesArray: [
                            { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.MultiColumnMode.None" },
                            { value: "UseColumnCount", displayValue: "UseColumnCount", localizationId: "DevExpress.XtraReports.UI.MultiColumnMode.UseColumnCount" },
                            { value: "UseColumnWidth", displayValue: "UseColumnWidth", localizationId: "DevExpress.XtraReports.UI.MultiColumnMode.UseColumnWidth" }
                        ]
                    }
                ];
                (function (Metadata) {
                    Metadata.multiColumn = { propertyName: "multiColumn", modelName: "MultiColumn", displayName: "Multi-Column Options", localizationId: "DevExpress.XtraReports.UI.DetailBand.MultiColumn", info: multiColumnSerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                var MultiColumnSurface = (function (_super) {
                    __extends(MultiColumnSurface, _super);
                    function MultiColumnSurface(multiColumn, context) {
                        var _this = _super.call(this) || this;
                        _this._disposables.push(_this.grayAreaWidth = ko.pureComputed(function () {
                            return DevExpress.Analytics.Internal.unitsToPixel(multiColumn.grayAreaWidth(), context.measureUnit(), context.zoom());
                        }), _this.columnWidth = ko.pureComputed(function () {
                            return DevExpress.Analytics.Internal.unitsToPixel(multiColumn.realColumnWidth(), context.measureUnit(), context.zoom());
                        }), _this.columnSpacing = ko.pureComputed(function () {
                            return DevExpress.Analytics.Internal.unitsToPixel(multiColumn.columnSpacing(), context.measureUnit(), context.zoom());
                        }), _this.columnSpacingLeft = ko.pureComputed(function () {
                            var columnWidth = _this.columnWidth();
                            return !context.rtl() ? columnWidth : context.margins.right() + _this.grayAreaWidth();
                        }), _this.grayAreaLeft = ko.pureComputed(function () {
                            var columnWidth = _this.columnWidth();
                            return !context.rtl() ? columnWidth + _this.columnSpacing() : context.margins.right();
                        }), _this.haveColumns = ko.pureComputed(function () {
                            return multiColumn.columnCount() > 1 && multiColumn.mode() !== "None";
                        }));
                        return _this;
                    }
                    return MultiColumnSurface;
                }(DevExpress.Analytics.Utils.Disposable));
                Bands.MultiColumnSurface = MultiColumnSurface;
                (function (Internal) {
                    var BandsHolder = (function (_super) {
                        __extends(BandsHolder, _super);
                        function BandsHolder(_container) {
                            var _this = _super.call(this) || this;
                            _this._container = _container;
                            _this.bands = ko.observableArray();
                            if (_container instanceof Controls.ReportSurface || _container instanceof DetailReportBandSurface)
                                _this._disposables.push(_this.verticalBandsContainer = new Internal.VerticalBandsContainerSurface(_container));
                            _this._disposables.push(_this.multiColumn = ko.computed(function () {
                                var containerMultiColumn = _container["multiColumn"] && _container["multiColumn"]();
                                if (containerMultiColumn && containerMultiColumn.haveColumns()) {
                                    return containerMultiColumn;
                                }
                                else {
                                    var detailBand = _this.bands().filter(function (item) { return item instanceof DetailBandSurface; })[0];
                                    if (detailBand && detailBand.multiColumn() && detailBand.multiColumn().haveColumns())
                                        return detailBand.multiColumn();
                                    else
                                        return null;
                                }
                            }));
                            return _this;
                        }
                        BandsHolder.prototype.dispose = function () {
                            _super.prototype.dispose.call(this);
                            this.disposeObservableArray(this.bands);
                            this.resetObservableArray(this.bands);
                        };
                        BandsHolder.prototype._createBandsMapCollection = function (elementModels, callbacks) {
                            var position = 0;
                            elementModels.peek().forEach(function (item) { return callbacks.addItem(callbacks.createItem(item), position++); });
                            callbacks.callMutated();
                            return elementModels.subscribe(function (args) {
                                args.forEach(function (changeSet) {
                                    if (changeSet.status === "deleted") {
                                        callbacks.removeItem(changeSet.value.surface);
                                    }
                                });
                                args.forEach(function (changeSet) {
                                    if (changeSet.status === "added") {
                                        callbacks.addItem(callbacks.createItem(changeSet.value), changeSet.index);
                                    }
                                });
                                callbacks.callMutated();
                            }, null, "arrayChange");
                        };
                        BandsHolder.prototype._addHorizontalBand = function (item, index) {
                            var verticalBandsPosition = this.verticalBandsContainer && this.verticalBandsContainer.bandPosition();
                            if (index === undefined)
                                return this.bands().push(item);
                            if (verticalBandsPosition > 0 && index > verticalBandsPosition) {
                                index -= this.verticalBandsContainer.verticalBands().length;
                            }
                            this.bands().splice(index, 0, item);
                        };
                        BandsHolder.prototype._addVerticalBand = function (item, index) {
                            this.verticalBandsContainer.verticalBands().splice(index > 0 ? index : 0, 0, item);
                        };
                        BandsHolder.prototype.initialize = function (bands) {
                            var _this = this;
                            var isVerticalChanged = false;
                            var isHorizontalChanged = false;
                            this._disposables.push(this._createBandsMapCollection(bands, {
                                addItem: function (item, index) {
                                    if (item instanceof VerticalBandSurface) {
                                        _this._addVerticalBand(item, index - _this.verticalBandsContainer.bandPosition());
                                        isVerticalChanged = true;
                                    }
                                    else {
                                        isHorizontalChanged = true;
                                        _this._addHorizontalBand(item, index);
                                    }
                                },
                                callMutated: function () {
                                    isHorizontalChanged && _this.bands.valueHasMutated();
                                    isVerticalChanged && _this.verticalBandsContainer && _this.verticalBandsContainer.verticalBands.valueHasMutated();
                                    isHorizontalChanged = false;
                                    isVerticalChanged = false;
                                },
                                createItem: function (item) { return _this._container._createSurface(item); },
                                removeItem: function (item) {
                                    if (item instanceof VerticalBandSurface) {
                                        _this.verticalBandsContainer.verticalBands().splice(_this.verticalBandsContainer.verticalBands().indexOf(item), 1);
                                        isVerticalChanged = true;
                                    }
                                    else {
                                        _this.bands().splice(_this.bands().indexOf(item), 1);
                                        isHorizontalChanged = true;
                                    }
                                }
                            }));
                        };
                        BandsHolder.prototype.getHeight = function () {
                            var minHeight = (this.verticalBandsContainer && this.verticalBandsContainer.height()) || 0;
                            this.bands().forEach(function (band) { minHeight += band.height(); });
                            return minHeight;
                        };
                        BandsHolder.prototype.getTotalHeight = function () {
                            var height = this.verticalBandsContainer && this.verticalBandsContainer._height() || 0;
                            return height + (this.bands() || []).reduce(function (acc, x) { return acc + x._totalHeight(); }, 0);
                        };
                        BandsHolder.prototype.getBandAbsolutePositionY = function (band) {
                            var newY = 0;
                            var bandIndex;
                            var parentBands = ko.unwrap(this.bands);
                            if (parentBands && parentBands.length !== 0) {
                                bandIndex = parentBands.indexOf(band);
                                if (bandIndex === -1)
                                    return newY;
                                if (bandIndex > 0 && parentBands[bandIndex - 1]) {
                                    newY = parentBands[bandIndex - 1].absolutePosition.y() + parentBands[bandIndex - 1].height();
                                }
                                else if (bandIndex === 0 && this._container["absolutePosition"]) {
                                    newY = this._container["absolutePosition"].y();
                                }
                                if (this.verticalBandsContainer) {
                                    if (bandIndex === this.verticalBandsContainer.getBandPosition()) {
                                        newY = this.verticalBandsContainer.topOffset() + this.verticalBandsContainer.height();
                                    }
                                }
                            }
                            return newY;
                        };
                        BandsHolder.prototype.checkUnderCursor = function () {
                            var isOver = false;
                            [this.bands(), this.verticalBandsContainer.verticalBands()].forEach(function (collection) {
                                for (var i = 0; i < collection.length; i++) {
                                    isOver = collection[i].underCursor().isOver;
                                    if (isOver)
                                        return isOver;
                                }
                                ;
                            });
                            return isOver;
                        };
                        return BandsHolder;
                    }(DevExpress.Analytics.Utils.Disposable));
                    Internal.BandsHolder = BandsHolder;
                })(Internal = Bands.Internal || (Bands.Internal = {}));
                (function (Metadata) {
                    Metadata.drillDownDetailReportExpanded = { propertyName: "drillDownDetailReportExpanded", modelName: "@DrillDownExpanded", displayName: "Drill-Down Expanded", localizationId: "DevExpress.XtraReports.UI.Band.DrillDownExpanded", editor: DevExpress.Analytics.Widgets.editorTemplates.bool, from: DevExpress.Analytics.Utils.parseBool, defaultVal: true }, Metadata.drillDownControl = { propertyName: "drillDownControl", modelName: "@DrillDownControl", displayName: "Drill-Down Control", localizationId: "DevExpress.XtraReports.UI.Band.DrillDownControl", link: true, defaultVal: null, editor: Widgets.editorTemplates.drillDownControls };
                    Metadata.printAtBottom = { propertyName: "printAtBottom", modelName: "@PrintAtBottom", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, displayName: "Print at Bottom", localizationId: "DevExpress.XtraReports.UI.ReportFooterBand.PrintAtBottom", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.level = { propertyName: "level", modelName: "@Level", displayName: "Level", localizationId: "DevExpress.XtraReports.UI.GroupBand.Level", defaultVal: 0, from: DevExpress.Analytics.Utils.floatFromModel, editor: Widgets.editorTemplates.numericUndo };
                    Metadata.repeatEveryPage = { propertyName: "repeatEveryPage", modelName: "@RepeatEveryPage", displayName: "Repeat Every Page", localizationId: "DevExpress.XtraReports.UI.GroupBand.RepeatEveryPage", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.pageBreak = {
                        propertyName: "pageBreak",
                        modelName: "@PageBreak", displayName: "Page Break", localizationId: "DevExpress.XtraReports.UI.Band.PageBreak", defaultVal: "None", from: DevExpress.Analytics.Utils.fromEnum,
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.PageBreak.None" },
                            { value: "BeforeBand", displayValue: "Before the Band", localizationId: "DevExpress.XtraReports.UI.PageBreak.BeforeBand" },
                            { value: "BeforeBandExceptFirstEntry", displayValue: "Before the Band, Except for the First Entry", localizationId: "DevExpress.XtraReports.UI.PageBreak.BeforeBandExceptFirstEntry" },
                            { value: "AfterBand", displayValue: "After the Band", localizationId: "DevExpress.XtraReports.UI.PageBreak.AfterBand" },
                            { value: "AfterBandExceptLastEntry", displayValue: "After the Band, Except for the Last Entry", localizationId: "DevExpress.XtraReports.UI.PageBreak.AfterBandExceptLastEntry" }
                        ]
                    };
                    Metadata.keepTogetherWithDetailReports = { propertyName: "keepTogetherWithDetailReports", modelName: "@KeepTogetherWithDetailReports", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, displayName: "Keep Together with Detail Reports", localizationId: "DevExpress.XtraReports.UI.DetailBand.KeepTogetherWithDetailReports", editor: DevExpress.Analytics.Widgets.editorTemplates.bool };
                    Metadata.height = { propertyName: "height", modelName: "@HeightF", defaultVal: 100, displayName: "Height", localizationId: "DevExpress.XtraReports.UI.Band.Height", from: DevExpress.Analytics.Utils.floatFromModel };
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                var BandViewModel = (function (_super) {
                    __extends(BandViewModel, _super);
                    function BandViewModel(band, parent, serializer) {
                        var _this = _super.call(this, band, parent, serializer) || this;
                        _this.preInit(band, parent, serializer);
                        _this.createChildsArray(band, serializer);
                        _this.initHeight();
                        _this.size.height = _this.height;
                        if (_this.level) {
                            _this._level = ko.observable(_this.level.peek());
                            _this._disposables.push(_this.level = ko.pureComputed({
                                read: function () { return _this._level(); },
                                write: function (newVal) {
                                    var parentBands = _this.parentModel() && _this.parentModel().bands;
                                    var groupArray = BandViewModel.generateArray(parentBands(), _this.controlType, newVal);
                                    var target = groupArray[newVal];
                                    groupArray.splice(newVal, 0, groupArray.splice(_this._level(), 1)[0]);
                                    _this._level(newVal);
                                    if (!!target) {
                                        for (var i = newVal + 1; i < groupArray.length; i++) {
                                            if (!groupArray[i] || groupArray[i]._level() === i)
                                                break;
                                            groupArray[i]._level(i);
                                        }
                                        for (var i = newVal - 1; i >= 0; i--) {
                                            if (!groupArray[i] || groupArray[i]._level() === i)
                                                break;
                                            groupArray[i]._level(i);
                                        }
                                    }
                                    BandViewModel.replaceArrays((_this.controlType === "GroupHeaderBand" ? groupArray.reverse() : groupArray).filter(function (x) { return !!x; }), parentBands, _this);
                                }
                            }));
                        }
                        var stylesObject = Designer.Internal.createObjectFromInfo(_this, Controls.Metadata.stylesInfo);
                        if (stylesObject) {
                            _this[Controls.Metadata.stylesObj.propertyName] = stylesObject;
                        }
                        return _this;
                    }
                    BandViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.bands);
                        this.disposeObservableArray(this.controls);
                        this.resetObservableArray(this.bands);
                        this.resetObservableArray(this.controls);
                    };
                    BandViewModel.initLevels = function (bands) {
                        ["GroupHeaderBand", "GroupFooterBand", "DetailReportBand"].map(function (type) {
                            return type === "GroupHeaderBand" ?
                                bands.filter(function (b) { return b.controlType === type; }).sort(Internal.sortBands).reverse() :
                                bands.filter(function (b) { return b.controlType === type; }).sort(Internal.sortBands);
                        }).forEach(function (items) {
                            for (var i = 0; i < items.length; i++) {
                                if (items[i]._level() === 0) {
                                    items[i]._level(i);
                                }
                            }
                        });
                    };
                    BandViewModel.generateArray = function (allbands, controlType, newLevel) {
                        var array = allbands.filter(function (x) { return x.controlType === controlType; });
                        newLevel = newLevel || array.length - 1;
                        array = controlType === "GroupHeaderBand" ? array.reverse() : array;
                        var length = (array.length > 0 && array[array.length - 1].level() > newLevel ? array[array.length - 1].level() : newLevel) + 1;
                        var j = 0;
                        var fakeArray = [];
                        for (var i = 0; i < length; i++) {
                            if (j < array.length && array[j]._level() === i) {
                                fakeArray.push(array[j]);
                                j++;
                            }
                            else {
                                fakeArray.push(undefined);
                            }
                        }
                        return fakeArray;
                    };
                    BandViewModel.replaceArrays = function (newArray, target, band) {
                        if (newArray.length > 0) {
                            var currentArray = target().filter(function (b) { return b.controlType === band.controlType; });
                            var inc = target().indexOf(currentArray[0]);
                            var from = currentArray.indexOf(band);
                            var to = newArray.indexOf(band);
                            target.splice(to + inc, 0, target.splice(inc + from, 1)[0]);
                        }
                    };
                    BandViewModel.prototype.createChildsArray = function (band, serializer) {
                        var _this = this;
                        var subBands = [];
                        if (band.SubBands) {
                            for (var key in band.SubBands) {
                                subBands.push(new SubBandViewModel(band.SubBands[key], this, serializer));
                            }
                        }
                        this.bands = ko.observableArray(subBands);
                        this.controls = DevExpress.Analytics.Internal.deserializeChildArray(band.Controls, this, function (control) { return _this.createControl(control, serializer); });
                    };
                    BandViewModel.prototype.initHeight = function () {
                        var _this = this;
                        var _heightFromControls = 0;
                        this._disposables.push(this.heightFromControls = ko.pureComputed(function () {
                            _heightFromControls = 0;
                            if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                for (var i = 0; i < _this.controls().length; i++) {
                                    if (!_this.controls()[i].update()) {
                                        var controlY = _this.controls()[i].anchorVertical && _this.controls()[i].anchorVertical() === "Bottom" && _this.controls()[i].vertAnchoring.state !== Controls.Anchoring.states.fromControls ? 0 : _this.controls()[i].location.y(), controlHeight = _this.controls()[i].anchorVertical && _this.controls()[i].anchorVertical() === "Both" && _this.controls()[i].vertAnchoring.state !== Controls.Anchoring.states.fromControls ? 1 : _this.controls()[i].size.height(), controlBottom = controlY + controlHeight;
                                        if (controlBottom > _heightFromControls) {
                                            _heightFromControls = controlBottom;
                                        }
                                    }
                                }
                                ;
                                _heightFromControls = Math.round(_heightFromControls * 100) / 100;
                                _this.height(Math.max(_heightFromControls, _this.height()));
                                _heightFromControls = _heightFromControls > 0 ? _heightFromControls : 0;
                            }
                            return _heightFromControls;
                        }));
                    };
                    BandViewModel.prototype.preInit = function (band, parent, serializer) {
                    };
                    BandViewModel.prototype.addChild = function (control) {
                        if (control instanceof SubBandViewModel) {
                            this.bands.push(control);
                        }
                        else {
                            _super.prototype.addChild.call(this, control);
                        }
                    };
                    BandViewModel.prototype.getPath = function (propertyName) {
                        if (propertyName === "dataMember") {
                            return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this["dataSource"]());
                        }
                        else if (propertyName === "groupFields") {
                            return DevExpress.Analytics.Internal.getFullPath(this.parentModel().getPath("dataMember"), this.parentModel()["dataMember"]());
                        }
                        return _super.prototype.getPath.call(this, propertyName);
                    };
                    BandViewModel.prototype.initSize = function () {
                        var _this = this;
                        this.size.height = this.height;
                        this._disposables.push(this.size.width = ko.computed({
                            read: function () {
                                return _this.root.size.width() - (_this.root["margins"] ? ((_this.root["margins"].left && _this.root["margins"].left()) + (_this.root["margins"].right && _this.root["margins"].right())) : 0);
                            }, write: function (newVal) { return void 0; }
                        }));
                        this.size.isPropertyDisabled = function (name) { return name === "width" || name === "height" && ko.unwrap(Utils.controlsFactory.getPropertyInfo("DetailBand", "Height").disabled); };
                        this.size.isPropertyVisible = function (name) { return name !== "height" || ko.unwrap(Utils.controlsFactory.getPropertyInfo("DetailBand", "Height").visible) !== false; };
                    };
                    BandViewModel.prototype.initialize = function () {
                        _super.prototype.initialize.call(this);
                        this.initSize();
                    };
                    BandViewModel.prototype.removeChild = function (control) {
                        if (control instanceof BandViewModel) {
                            if (this.bands().indexOf(control) !== -1) {
                                this.bands.splice(this.bands().indexOf(control), 1);
                            }
                        }
                        else {
                            _super.prototype.removeChild.call(this, control);
                        }
                    };
                    BandViewModel.isReorderingBand = function (control) {
                        return ["GroupHeaderBand", "GroupFooterBand", "DetailReportBand"].indexOf(control.controlType) > -1;
                    };
                    BandViewModel.insertBand = function (bands, newBand) {
                        if (newBand.controlType === "GroupHeaderBand" || newBand.controlType === "GroupFooterBand" || newBand.controlType === "DetailReportBand") {
                            var array = BandViewModel.generateArray(bands(), newBand.controlType);
                            var level = array.length;
                            for (var i = 0; i < array.length; i++) {
                                if (!array[i]) {
                                    level = i;
                                    break;
                                }
                            }
                            newBand._level(level);
                        }
                        BandViewModel.insertBandSorted(bands, newBand);
                    };
                    BandViewModel.insertBandSorted = function (bands, newBand) {
                        if (newBand) {
                            var cloneBands = bands().slice(0);
                            var previousBandIndex = bands().indexOf(newBand);
                            if (previousBandIndex === -1) {
                                cloneBands.push(newBand);
                            }
                            cloneBands.sort(Internal.sortBands);
                            var index = cloneBands.indexOf(newBand);
                            if (previousBandIndex !== -1) {
                                bands.splice(previousBandIndex, 1);
                            }
                            bands.splice(index, 0, newBand);
                        }
                    };
                    BandViewModel.prototype.isPropertyDisabled = function (name) {
                        if (name === "dataMember" && this["dataSource"]) {
                            return this["dataSource"]() === null;
                        }
                        else {
                            return _super.prototype.isPropertyDisabled.call(this, name);
                        }
                    };
                    BandViewModel.getBandWeight = function (band) {
                        if (band.controlType === "GroupHeaderBand") {
                            return Internal.bandsWeight[band.controlType] - (band["level"]() || 0);
                        }
                        if (band.controlType === "GroupFooterBand") {
                            return Internal.bandsWeight[band.controlType] + (band["level"]() || 0);
                        }
                        if (band.controlType === "DetailReportBand") {
                            return Internal.bandsWeight[band.controlType] + (band["level"]() || -1);
                        }
                        return Internal.bandsWeight[band.controlType];
                    };
                    return BandViewModel;
                }(Controls.XRReportElementViewModel));
                Bands.BandViewModel = BandViewModel;
                var BandSurface = (function (_super) {
                    __extends(BandSurface, _super);
                    function BandSurface(band, context, unitProperties) {
                        if (unitProperties === void 0) { unitProperties = BandSurface._unitProperties; }
                        var _this = _super.call(this, band, context, unitProperties) || this;
                        _this.isSomeParentCollapsed = ko.observable(false);
                        _this._resize = function (delta, oldDelta) {
                            _this._height(_this._height() + delta - oldDelta);
                            return delta;
                        };
                        _this.showMarker = true;
                        _this.templateName = "dxrd-band";
                        _this.selectionTemplate = "dxrd-band-selection";
                        _this.vrulerTemplate = "dxrd-band-vruler";
                        _this.contentSelectionTemplate = "dxrd-bandselection-content";
                        _this.leftMarginTemplate = "dxrd-band-coordinate-grid";
                        _this.leftMarginSelectionTemplate = "dxrd-band-coordinate-grid-selection";
                        _this.allowMultiselect = false;
                        _this.markerWidth = ko.observable(BandSurface.collapsedHeight);
                        _this.collapsed = ko.observable(false);
                        _this._disposables.push(ko.computed(function () {
                            _this._width(context.pageWidth() - context.margins.left());
                        }));
                        _this._disposables.push(_this.collapsed = ko.pureComputed({
                            read: function () {
                                return !band.expanded();
                            },
                            write: function (newVal) {
                                band.expanded(!newVal);
                            }
                        }));
                        _this._disposables.push(_this._totalHeight = ko.pureComputed(function () { return _this.getTotalHeight(); }));
                        _this.name = band.name;
                        var subBandsHeight = 0;
                        _this._disposables.push(_this.subBandsHeight = ko.pureComputed(function () { return _this.bandsHolder.getHeight(); }));
                        _this._disposables.push(_this.heightWithoutSubBands = ko.pureComputed(function () {
                            return _this.height() - _this.subBandsHeight();
                        }));
                        _this._disposables.push(_this.height = ko.pureComputed(function () { return _this.getHeight(); }));
                        _this._initMultiColumn();
                        _this.createChildCollection(band);
                        _this.createUnderCursor();
                        _this._disposables.push(_this.hasOwnRuler = ko.pureComputed(function () { return _this.getHasOwnRuler(); }));
                        _this._disposables.push(_this.rulerHeight = ko.pureComputed(function () {
                            return _this.collapsed() ? BandSurface.collapsedHeight : (_this.heightWithoutSubBands());
                        }));
                        var root = _this.getControlModel().root;
                        var nearMarginWidth = function () { return root.margins.right() + root.margins.left(); };
                        _this.coordinateGridOptions = {
                            left: ko.pureComputed(function () {
                                return _this.rtlLayout() ? _this._context.margins.right() : 0;
                            }),
                            height: _this.getControlModel().height,
                            snapGridSize: root.snapGridSize,
                            zoom: context.zoom,
                            measureUnit: context.measureUnit,
                            width: ko.pureComputed(function () {
                                return root.pageWidth() - nearMarginWidth();
                            }),
                            flip: context.rtl
                        };
                        var oldDelta = 0;
                        _this["resize"] = function (params) {
                            oldDelta = _this._resize(params.delta.dh, oldDelta);
                        };
                        _this["resizeTheBand"] = function (params) {
                            oldDelta = _this._resize(params.delta.dh, oldDelta);
                        };
                        _this["stopResize"] = function () {
                            oldDelta = 0;
                        };
                        _this._disposables.push(_this["markerClass"] = ko.pureComputed(function () {
                            var cssClass = "dxrd-band-marker-body";
                            if (band.controlType.toLowerCase().indexOf("header") !== -1 || band.controlType === "TopMarginBand") {
                                cssClass = "dxrd-band-marker-header";
                            }
                            else if (band.controlType.toLowerCase().indexOf("footer") !== -1 || band.controlType === "BottomMarginBand") {
                                cssClass = "dxrd-band-marker-footer";
                            }
                            if (_this.focused()) {
                                return cssClass += "-focused";
                            }
                            return cssClass;
                        }));
                        _this._disposables.push(_this["leftMargin"] = ko.pureComputed(function () {
                            return 0 - (context["margins"] && context.margins.left() || 0) + 10;
                        }));
                        _this._disposables.push(_this.canResize = ko.computed(function () {
                            return _this.selected() && !_this.locked && !_this.collapsed() && !DevExpress.Analytics.Internal.DragDropHandler.started();
                        }));
                        _this._disposables.push(_this.minHeight = ko.computed(function () {
                            var minHeight = (_this.heightFromControls && _this.heightFromControls() || 0) + _this.subBandsHeight();
                            return minHeight || 1;
                        }));
                        _this.getUsefulRect = function () {
                            var usefulWidth = _this.rect().width;
                            var margins = _this.getControlModel().root["margins"];
                            usefulWidth -= _this._getMarginWidth(margins, _this._context.rtl());
                            if (_this.multiColumn && _this.multiColumn()) {
                                usefulWidth -= _this.multiColumn().grayAreaWidth() + (_this.multiColumn().columnSpacing() || 0);
                            }
                            if (_this.rtlLayout()) {
                                var nearMarginWidth = _this._getMarginWidth(margins, _this._context.rtl(), false);
                                var left = _this.container().rect().width - usefulWidth - nearMarginWidth;
                                return { top: 0, left: left, right: usefulWidth + nearMarginWidth, bottom: _this.height(), width: usefulWidth, height: _this.height() };
                            }
                            else {
                                return { top: 0, left: 0, right: usefulWidth, bottom: _this.height(), width: usefulWidth, height: _this.height() };
                            }
                        };
                        _this._disposables.push(_this.backgroundRect = ko.pureComputed(function () { return _this.getBackgroundRect(); }));
                        return _this;
                    }
                    BandSurface.prototype._getMarginWidth = function (margins, rtl, isFarMargin) {
                        if (isFarMargin === void 0) { isFarMargin = true; }
                        var marginWidht = margins ? (isFarMargin && this._context.rtl() ? margins.left && margins.left() : margins.right && margins.right()) || 0 : 0;
                        return DevExpress.Analytics.Internal.unitsToPixel(marginWidht, this._context.measureUnit(), this._context.zoom());
                    };
                    BandSurface.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.controls);
                        this.resetObservableArray(this.controls);
                    };
                    BandSurface.prototype._getUnitPositionInParent = function () {
                        var isVerticalBandTakenIntoAccount = false;
                        var neighbors = this._control.parentModel().bands();
                        var absoluteY = neighbors
                            .slice(0, neighbors.indexOf(this._control))
                            .reduce(function (sum, currentBandModel) {
                            if (currentBandModel instanceof VerticalBandViewModel && isVerticalBandTakenIntoAccount)
                                return sum;
                            else if (currentBandModel instanceof VerticalBandViewModel)
                                isVerticalBandTakenIntoAccount = true;
                            return sum + currentBandModel.size.height();
                        }, 0);
                        return new DevExpress.Analytics.Elements.Point(0, absoluteY);
                    };
                    BandSurface._getUnitAbsoluteRect = function (bandSurface, getPositionInParent) {
                        var parentAbsoluteRect = bandSurface.parent && bandSurface.parent["_unitAbsoluteRect"];
                        if (parentAbsoluteRect) {
                            var _unitPosition = getPositionInParent();
                            return {
                                top: parentAbsoluteRect.top + _unitPosition.y(), left: parentAbsoluteRect.left + _unitPosition.x(),
                                right: parentAbsoluteRect.left + _unitPosition.x() + bandSurface._control.size.width(), bottom: parentAbsoluteRect.top + _unitPosition.y() + bandSurface._control.size.height(),
                                width: bandSurface._control.size.width(), height: bandSurface._control.size.height()
                            };
                        }
                        else {
                            return {
                                top: 0, left: 0,
                                right: bandSurface._control.size.width(), bottom: bandSurface._control.size.height(),
                                width: bandSurface._control.size.width(), height: bandSurface._control.size.height()
                            };
                        }
                    };
                    Object.defineProperty(BandSurface.prototype, "_unitAbsoluteRect", {
                        get: function () {
                            var _this = this;
                            return BandSurface._getUnitAbsoluteRect(this, function () { return _this._getUnitPositionInParent(); });
                        },
                        enumerable: true,
                        configurable: true
                    });
                    BandSurface.prototype.createChildCollection = function (band) {
                        this._disposables.push(this.bandsHolder = new Internal.BandsHolder(this));
                        this.bandsHolder.initialize(band.bands);
                    };
                    BandSurface.prototype.createUnderCursor = function () {
                        var _this = this;
                        var _underCursor = ko.observable(new DevExpress.Analytics.Internal.HoverInfo());
                        this._disposables.push(this.underCursor = ko.pureComputed({
                            read: function () {
                                _underCursor().isOver = _underCursor().x > _this._context.margins.left();
                                return _underCursor();
                            },
                            write: function (val) { _underCursor(val); }
                        }));
                    };
                    BandSurface.prototype.getTotalHeight = function () {
                        return this._height() + this.bandsHolder.getTotalHeight();
                    };
                    BandSurface.prototype.getHeight = function () {
                        if (this.collapsed())
                            return BandSurface.collapsedHeight;
                        else
                            return this._height() + this.subBandsHeight();
                    };
                    BandSurface.prototype.getHasOwnRuler = function () {
                        return true;
                    };
                    BandSurface.prototype.getBackgroundRect = function () {
                        var top = 0, bottom, height = this._height();
                        var parent = this.parent;
                        if (!parent) {
                            return { top: top, bottom: bottom, height: height };
                        }
                        var parentBands = ko.unwrap(parent.bandsHolder.bands);
                        var parentBackgroundRect = ko.unwrap(parent.backgroundRect);
                        if (parentBackgroundRect) {
                            top += parentBackgroundRect.top;
                            bottom = parentBackgroundRect.bottom;
                        }
                        else {
                            var pageHeight = parent.pageHeight();
                            var bottomMargin = parent.margins.bottom();
                            var footer = parentBands.filter(function (x) { return x._control.controlType === "PageFooterBand"; })[0];
                            bottom = pageHeight - bottomMargin;
                            if (footer)
                                bottom -= footer._totalHeight();
                        }
                        var bandIndex = parentBands.indexOf(this);
                        if (parent.bandsHolder.verticalBandsContainer.visible && parent.bandsHolder.verticalBandsContainer.bandPosition() <= bandIndex) {
                            top += parent.bandsHolder.verticalBandsContainer._height();
                        }
                        for (var i = 0; i < bandIndex; i++) {
                            top += parentBands[i]._totalHeight();
                        }
                        if (top > bottom)
                            height = 0;
                        else if (top + height > bottom)
                            height = bottom - top;
                        return { top: top, bottom: bottom, height: height };
                    };
                    BandSurface.prototype._initMultiColumn = function () {
                        var _this = this;
                        this._disposables.push(this.multiColumn = ko.computed(function () {
                            var currentMultiColumn = _this.parent && _this.parent.bandsHolder.multiColumn();
                            var parentMultiColumn = _this.parent && !(_this.parent instanceof Controls.ReportSurface) && _this.parent.parent.bandsHolder.multiColumn();
                            if (parentMultiColumn && parentMultiColumn.haveColumns())
                                return parentMultiColumn;
                            else if (currentMultiColumn && currentMultiColumn.haveColumns()
                                && (_this.getControlModel().controlType === "GroupHeaderBand" ||
                                    _this.getControlModel().controlType === "GroupFooterBand" ||
                                    _this.getControlModel().controlType === "DetailReportBand")) {
                                return currentMultiColumn;
                            }
                        }));
                    };
                    BandSurface.prototype.getAbsolutePositionY = function () {
                        return this.parent.bandsHolder.getBandAbsolutePositionY(this);
                    };
                    BandSurface.prototype.updateAbsolutePosition = function () {
                        if (!this.parent)
                            return;
                        var newY = 0;
                        var parent = this.parent;
                        this.absolutePosition.x(0);
                        if (ko.unwrap(parent["collapsed"])) {
                            this.absolutePosition.y(parent["absolutePosition"].y());
                            return;
                        }
                        this.absolutePosition.y(this.getAbsolutePositionY());
                    };
                    BandSurface.prototype.markerClick = function (selection) {
                        if (selection.expectClick) {
                            selection.expectClick = false;
                            return;
                        }
                        if (!this.focused()) {
                            selection.initialize(this);
                        }
                        else {
                            this.collapsed(!this.collapsed());
                        }
                    };
                    BandSurface.prototype.canDrop = function () { return _super.prototype.canDrop.call(this) && !this.collapsed(); };
                    Object.defineProperty(BandSurface.prototype, "zoom", {
                        get: function () { return this.getRoot().zoom; },
                        enumerable: true,
                        configurable: true
                    });
                    BandSurface.prototype.checkParent = function (surfaceParent) {
                        return false;
                    };
                    BandSurface.collapsedHeight = 27;
                    BandSurface._unitProperties = {
                        _height: function (o) { return o.height; },
                        heightFromControls: function (o) { return o.heightFromControls; }
                    };
                    return BandSurface;
                }(DevExpress.Analytics.Elements.SurfaceElementBase));
                Bands.BandSurface = BandSurface;
                (function (Metadata) {
                    Metadata.expanded = { propertyName: "expanded", modelName: "@Expanded", from: DevExpress.Analytics.Utils.parseBool, defaultVal: true };
                    Metadata.commonBandSerializationInfo = [
                        Controls.Metadata.textAlignment, Metadata.expanded,
                        { propertyName: "controls", modelName: "Controls", array: true },
                        { propertyName: "bands", modelName: "SubBands", array: true },
                    ].concat(Controls.Metadata.commonBandProperties, Controls.Metadata.fontGroup);
                    Metadata.bandSerializationInfo = [
                        Controls.Metadata.styleName, Controls.Metadata.stylesObj, Controls.Metadata.stylePriority, Metadata.height,
                    ].concat(Metadata.commonBandSerializationInfo);
                    Metadata.reportHeaderBandSerializationInfo = [Controls.Metadata.keepTogetherDefaultValueFalse, Metadata.pageBreak, Controls.Metadata.commonBandScripts].concat(Metadata.bandSerializationInfo);
                    Metadata.reportFooterBandSerializationInfo = [Metadata.printAtBottom].concat(Metadata.reportHeaderBandSerializationInfo);
                    Metadata.popularPropertiesReportHeader = ["pageBreak", "keepTogether"];
                    Metadata.popularPropertiesReportFooter = ["pageBreak", "keepTogether", "printAtBottom"];
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                var DetailBand = (function (_super) {
                    __extends(DetailBand, _super);
                    function DetailBand(band, parent, serializer) {
                        var _this = _super.call(this, band, parent, serializer) || this;
                        _this.hierarchyPrintOptions.isPropertyDisabled = function (propertyName) {
                            if (propertyName === "keyFieldName" || propertyName === "parentFieldName")
                                return !!this.childListFieldName();
                            else if (propertyName === "childListFieldName") {
                                return !!this.keyFieldName() || !!this.parentFieldName();
                            }
                        };
                        _this.hierarchyPrintOptions.getPath = function () {
                            return _this.getPath("groupFields");
                        };
                        return _this;
                    }
                    DetailBand.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.sortFields);
                        this.resetObservableArray(this.sortFields);
                    };
                    DetailBand.prototype.preInit = function (band, parent, serializer) {
                        this.multiColumn = new MultiColumn(band["MultiColumn"], this.root["pageWidth"] || ko.observable(0), this.root["margins"] || DevExpress.Analytics.Elements.Margins.fromString());
                        this._disposables.push(this.multiColumn);
                        this.sortFields = DevExpress.Analytics.Utils.deserializeArray(band.SortFields, function (field) { return new GroupFieldModel(field, serializer); });
                    };
                    DetailBand.prototype.hasHierarchyPrintOptions = function () {
                        return !(DevExpress.Analytics.Internal.isNullOrEmptyString(this.hierarchyPrintOptions.childListFieldName()) &&
                            (DevExpress.Analytics.Internal.isNullOrEmptyString(this.hierarchyPrintOptions.keyFieldName()) ||
                                DevExpress.Analytics.Internal.isNullOrEmptyString(this.hierarchyPrintOptions.parentFieldName())));
                    };
                    return DetailBand;
                }(BandViewModel));
                Bands.DetailBand = DetailBand;
                var DetailBandSurface = (function (_super) {
                    __extends(DetailBandSurface, _super);
                    function DetailBandSurface() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    DetailBandSurface.prototype._initMultiColumn = function () {
                        var _this = this;
                        var multiColumn = new MultiColumnSurface(this._control.multiColumn, this._context);
                        this._disposables.push(multiColumn);
                        this._disposables.push(this.multiColumn = ko.computed(function () {
                            var parentMultiColumn = _this.parent["multiColumn"] && _this.parent["multiColumn"]();
                            if (parentMultiColumn)
                                return parentMultiColumn;
                            return multiColumn;
                        }));
                    };
                    return DetailBandSurface;
                }(BandSurface));
                Bands.DetailBandSurface = DetailBandSurface;
                (function (Metadata) {
                    var hierarchyPrintOptionsSerializationsInfo = [
                        {
                            propertyName: "childListFieldName",
                            modelName: "@ChildListFieldName",
                            defaultVal: "",
                            localizationId: "DevExpress.XtraReports.UI.HierarchyPrintOptions.ChildListFieldName",
                            displayName: "Child List Field Name",
                            editor: DevExpress.Analytics.Widgets.editorTemplates.field
                        }, {
                            propertyName: "keyFieldName",
                            modelName: "@KeyFieldName",
                            defaultVal: "",
                            localizationId: "DevExpress.XtraReports.UI.HierarchyPrintOptions.KeyFieldName",
                            displayName: "Key Field Name",
                            editor: DevExpress.Analytics.Widgets.editorTemplates.field
                        }, {
                            propertyName: "parentFieldName",
                            modelName: "@ParentFieldName",
                            defaultVal: "",
                            localizationId: "DevExpress.XtraReports.UI.HierarchyPrintOptions.ParentFieldName",
                            displayName: "Parent Field Name",
                            editor: DevExpress.Analytics.Widgets.editorTemplates.field
                        }, {
                            propertyName: "indent",
                            localizationId: "DevExpress.XtraReports.UI.HierarchyPrintOptions.Indent",
                            modelName: "@Indent",
                            defaultVal: 20,
                            displayName: "Indent",
                            editor: DevExpress.Analytics.Widgets.editorTemplates.numeric
                        }, {
                            propertyName: "keepTogetherWithFirstChild",
                            modelName: "@KeepTogetherWithFirstChild",
                            defaultVal: true,
                            displayName: "Keep Together With First Child",
                            localizationId: "DevExpress.XtraReports.UI.HierarchyPrintOptions.KeepTogetherWithFirstChild",
                            editor: DevExpress.Analytics.Widgets.editorTemplates.bool,
                            from: DevExpress.Analytics.Utils.parseBool
                        }
                    ];
                    Metadata.hierarchyPrintOptions = {
                        modelName: "HierarchyPrintOptions",
                        propertyName: "hierarchyPrintOptions",
                        info: hierarchyPrintOptionsSerializationsInfo,
                        localizationId: "DevExpress.XtraReports.UI.DetailBand.HierarchyPrintOptions",
                        displayName: "Hierarchy Print Options",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor
                    };
                    Metadata.detailBandSerializationInfo = [
                        Controls.Metadata.evenStyleName, Controls.Metadata.oddStyleName,
                        Controls.Metadata.keepTogetherDefaultValueFalse,
                        Metadata.drillDownDetailReportExpanded,
                        Metadata.hierarchyPrintOptions,
                        Metadata.drillDownControl,
                        Metadata.keepTogetherWithDetailReports, Metadata.sortFields, Metadata.pageBreak, Controls.Metadata.commonBandScripts
                    ].concat(Metadata.bandSerializationInfo);
                    Metadata.popularPropertiesDetail = ["sortFields", "pageBreak", "keepTogether", "keepTogetherWithDetailReports"];
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                var DetailReportBand = (function (_super) {
                    __extends(DetailReportBand, _super);
                    function DetailReportBand(band, parent, serializer) {
                        var _this = _super.call(this, band, parent, serializer) || this;
                        _this._disposables.push(_this.dataSource.subscribe(function (newVal) {
                            if (!newVal) {
                                _this.dataMember(null);
                            }
                        }));
                        var dataMember = ko.pureComputed(function () {
                            return DevExpress.Analytics.Internal.getFullPath(_this.getPath("dataMember"), _this.dataMember());
                        });
                        var disabled = ko.pureComputed(function () { return !_this.dataSource(); });
                        _this.filterString = new DevExpress.Analytics.Widgets.FilterStringOptions(_this._filterString, dataMember, disabled);
                        _this._disposables.push(dataMember);
                        _this._disposables.push(disabled);
                        _this.filterString.helper.parameters = _this.root["parameters"];
                        return _this;
                    }
                    DetailReportBand.addBandToContainer = function (container, control) {
                        control.parentModel(container);
                        if (control instanceof DetailBand) {
                            container.bands().filter(function (x) { return x instanceof VerticalBandViewModel; }).forEach(function (x) { return container.removeChild(x); });
                        }
                        else if (control instanceof VerticalBandViewModel) {
                            if (container.bands().every(function (x) { return !(x instanceof VerticalBandViewModel); })) {
                                var detailBand = container.bands().filter(function (x) { return x instanceof DetailBand; })[0];
                                detailBand && container.removeChild(detailBand);
                                if (control.controlType !== "VerticalDetailBand")
                                    container.createChild({ "@ControlType": "VerticalDetailBand", "@HeightF": container.root.dpi() });
                            }
                            else {
                                var band = container.bands().filter(function (x) { return x instanceof VerticalBandViewModel; })[0];
                                if (band)
                                    control.height(band.height());
                            }
                        }
                        BandViewModel.insertBand(container.bands, control);
                    };
                    DetailReportBand.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.bands);
                        this.resetObservableArray(this.bands);
                    };
                    DetailReportBand.prototype.initHeight = function () {
                        var _this = this;
                        this._disposables.push(this.height = ko.pureComputed({
                            read: function () {
                                if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                    var verticalBand = _this.bands().filter(function (x) { return x instanceof VerticalBandViewModel; })[0];
                                    var height = 0;
                                    if (verticalBand)
                                        height = verticalBand.height();
                                    return _this.bands().filter(function (x) { return !(x instanceof VerticalBandViewModel); }).reduce(function (sum, b) { return sum + b.height(); }, height);
                                }
                                return 0;
                            },
                            write: function (newHeight) {
                                var deltaHeight = newHeight - _this.height.peek(), oldHeight = _this.bands()[_this.bands().length - 1].height.peek();
                                _this.bands()[_this.bands().length - 1].height(oldHeight + deltaHeight);
                            }
                        }));
                    };
                    DetailReportBand.prototype.createChildsArray = function (band, serializer) {
                        var bands = [];
                        if (band.Bands) {
                            var factory = this.getControlFactory();
                            for (var key in band.Bands) {
                                bands.push(new (factory.controlsMap[band.Bands[key]["@ControlType"]].type || BandViewModel)(band.Bands[key], this, serializer));
                            }
                            BandViewModel.initLevels(bands);
                            bands.sort(Internal.sortBands);
                        }
                        this.bands = ko.observableArray(bands);
                        if (this.bands().length === 0)
                            this.createChild({ "@ControlType": "DetailBand", "@HeightF": this.height() });
                    };
                    DetailReportBand.prototype.addChild = function (control) {
                        if (control instanceof BandViewModel && !(control instanceof SubBandViewModel)) {
                            DetailReportBand.addBandToContainer(this, control);
                        }
                    };
                    return DetailReportBand;
                }(BandViewModel));
                Bands.DetailReportBand = DetailReportBand;
                var DetailReportBandSurface = (function (_super) {
                    __extends(DetailReportBandSurface, _super);
                    function DetailReportBandSurface(band, context) {
                        var _this = _super.call(this, band, context, {
                            _height: function (o) { return o.height; }
                        }) || this;
                        _this.templateName = "dxrd-detailreportband";
                        _this.selectionTemplate = "dxrd-detailreportband-selection";
                        _this.leftMarginTemplate = "dxrd-detail-report-band-coordinate-grid";
                        _this._disposables.push(ko.computed(function () {
                            var isSomeParentCollapsed = _this.collapsed() || _this.isSomeParentCollapsed();
                            _this.bandsHolder.bands().forEach(function (band) {
                                band.isSomeParentCollapsed(isSomeParentCollapsed);
                            });
                        }));
                        return _this;
                    }
                    DetailReportBandSurface.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                    };
                    DetailReportBandSurface.prototype.getChildrenCollection = function () {
                        return this.bandsHolder.bands;
                    };
                    DetailReportBandSurface.prototype.createUnderCursor = function () {
                        var _this = this;
                        var _underCursor = ko.observable(new DevExpress.Analytics.Internal.HoverInfo());
                        this._disposables.push(this.underCursor = ko.pureComputed({
                            read: function () {
                                _underCursor().isOver = _this.bandsHolder.checkUnderCursor();
                                return _underCursor();
                            },
                            write: function (val) { _underCursor(val); }
                        }));
                    };
                    DetailReportBandSurface.prototype.getTotalHeight = function () {
                        return this.bandsHolder.getTotalHeight();
                    };
                    DetailReportBandSurface.prototype.getHeight = function () {
                        if (this.collapsed()) {
                            return BandSurface.collapsedHeight;
                        }
                        else {
                            return this.bandsHolder.getHeight();
                        }
                    };
                    DetailReportBandSurface.prototype.getHasOwnRuler = function () {
                        return this.collapsed();
                    };
                    return DetailReportBandSurface;
                }(BandSurface));
                Bands.DetailReportBandSurface = DetailReportBandSurface;
                (function (Metadata) {
                    Metadata.detailReportBandSerializationInfo = [
                        Metadata.level, Metadata.height, Metadata.pageBreak, Controls.Metadata.detailReportBandScripts,
                        Controls.Metadata.keepTogetherDefaultValueFalse,
                        Metadata.drillDownDetailReportExpanded,
                        Metadata.drillDownControl,
                        Metadata.keepTogetherWithDetailReports
                    ].concat(Metadata.commonBandSerializationInfo, Controls.Metadata.datasourcePrintOptionsGroup).filter(function (x) { return x.propertyName !== "bands"; }).concat([{
                            propertyName: "bands",
                            modelName: "Bands",
                            array: true
                        }]);
                    Metadata.popularPropertiesDetailReport = ["dataSource", "dataMember", "dataAdapter", "filterString"];
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                var GroupHeaderBand = (function (_super) {
                    __extends(GroupHeaderBand, _super);
                    function GroupHeaderBand(band, parent, serializer) {
                        var _this = _super.call(this, band, parent, serializer) || this;
                        _this.groupFields = DevExpress.Analytics.Utils.deserializeArray(band.GroupFields, function (field) { return new GroupFieldModel(field, serializer); });
                        _this.sortingSummary.getPath = function (propertyName) {
                            if (propertyName === "fieldName") {
                                return _this.getPath("groupFields");
                            }
                        };
                        return _this;
                    }
                    GroupHeaderBand.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.groupFields);
                        this.resetObservableArray(this.groupFields);
                    };
                    return GroupHeaderBand;
                }(BandViewModel));
                Bands.GroupHeaderBand = GroupHeaderBand;
                (function (Metadata) {
                    Metadata.groupUnion = {
                        propertyName: "groupUnion",
                        modelName: "@GroupUnion", displayName: "Group Union", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.GroupUnion", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "None", from: DevExpress.Analytics.Utils.fromEnum,
                        valuesArray: [
                            { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.GroupUnion.None" },
                            { value: "WholePage", displayValue: "Whole Page", localizationId: "DevExpress.XtraReports.UI.GroupUnion.WholePage" },
                            { value: "WithFirstDetail", displayValue: "With First Detail", localizationId: "DevExpress.XtraReports.UI.GroupUnion.WithFirstDetail" }
                        ]
                    };
                    Metadata.groupFooterUnion = {
                        propertyName: "groupFooterUnion",
                        modelName: "@GroupUnion", displayName: "Group Union", localizationId: "DevExpress.XtraReports.UI.GroupFooterBand.GroupUnion", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox, defaultVal: "None", from: DevExpress.Analytics.Utils.fromEnum,
                        valuesArray: [
                            { value: "None", displayValue: "None", localizationId: "DevExpress.XtraReports.UI.GroupFooterUnion.None" },
                            { value: "WithLastDetail", displayValue: "With Last Detail", localizationId: "DevExpress.XtraReports.UI.GroupFooterUnion.WithLastDetail" }
                        ]
                    };
                    var groupBand = [Controls.Metadata.keepTogetherDefaultValueFalse, Metadata.level, Metadata.pageBreak, Metadata.repeatEveryPage].concat(Metadata.bandSerializationInfo);
                    var sortingSummarySerializationsInfo = [
                        { propertyName: "enabled", modelName: "@Enabled", displayName: "Enabled", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.Enabled", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool },
                        {
                            propertyName: "Function", modelName: "@Function", displayName: "Function", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.Function", defaultVal: "Sum", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: Controls.Metadata.getSummaryFunctionValues()
                        },
                        { propertyName: "fieldName", modelName: "@FieldName", displayName: "Field Name", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.FieldName", defaultVal: "", editor: DevExpress.Analytics.Widgets.editorTemplates.field },
                        { propertyName: "ignoreNullValues", modelName: "@IgnoreNullValues", displayName: "Ignore Null Values", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.IgnoreNullValues", defaultVal: false, from: DevExpress.Analytics.Utils.parseBool, editor: DevExpress.Analytics.Widgets.editorTemplates.bool },
                        {
                            propertyName: "sortOrder", modelName: "@SortOrder", displayName: "SortOrder", localizationId: "DevExpress.XtraReports.UI.XRGroupSortingSummary.SortOrder", defaultVal: "Ascending", editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                            valuesArray: [
                                { value: "Ascending", displayValue: "Ascending", localizationId: "DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending" },
                                { value: "Descending", displayValue: "Descending", localizationId: "DevExpress.XtraReports.UI.XRColumnSortOrder.Descending" }
                            ]
                        },
                    ];
                    Metadata.sortingSummary = { propertyName: "sortingSummary", modelName: "SortingSummary", displayName: "Sorting Summary", localizationId: "DevExpress.XtraReports.UI.GroupHeaderBand.SortingSummary", info: sortingSummarySerializationsInfo, editor: DevExpress.Analytics.Widgets.editorTemplates.objecteditor };
                    Metadata.groupHeaderBandSerializationInfo = [Metadata.groupFields, Metadata.groupUnion, Metadata.sortingSummary, Metadata.drillDownDetailReportExpanded,
                        Metadata.drillDownControl, Controls.Metadata.groupHeaderBandScripts].concat(groupBand);
                    Metadata.groupFooterBandSerializationInfo = [Metadata.groupFooterUnion, Metadata.printAtBottom, Controls.Metadata.groupBandScripts].concat(groupBand);
                    Metadata.popularPropertiesGroupFooter = ["groupFooterUnion", "pageBreak", "keepTogether", "repeatEveryPage", "printAtBottom"];
                    Metadata.popularPropertiesGroupHeader = ["groupFields", "groupUnion", "level", "pageBreak", "keepTogether", "repeatEveryPage"];
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                var TopMarginBand = (function (_super) {
                    __extends(TopMarginBand, _super);
                    function TopMarginBand() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    TopMarginBand.prototype.initHeight = function () {
                        this.height = this.parentModel() && this.root.margins.top || ko.observable(0);
                        _super.prototype.initHeight.call(this);
                    };
                    return TopMarginBand;
                }(BandViewModel));
                Bands.TopMarginBand = TopMarginBand;
                var BottomMarginBand = (function (_super) {
                    __extends(BottomMarginBand, _super);
                    function BottomMarginBand() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    BottomMarginBand.prototype.initHeight = function () {
                        this.height = this.parentModel() && this.root.margins.bottom || ko.observable(0);
                        _super.prototype.initHeight.call(this);
                    };
                    return BottomMarginBand;
                }(BandViewModel));
                Bands.BottomMarginBand = BottomMarginBand;
                var BottomMarginSurface = (function (_super) {
                    __extends(BottomMarginSurface, _super);
                    function BottomMarginSurface() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    BottomMarginSurface.prototype.getBackgroundRect = function () {
                        var top = this.parent.pageHeight() - this._height(), bottom, height = this._height();
                        return { top: top, bottom: bottom, height: height };
                    };
                    return BottomMarginSurface;
                }(BandSurface));
                Bands.BottomMarginSurface = BottomMarginSurface;
                var PageFooterSurface = (function (_super) {
                    __extends(PageFooterSurface, _super);
                    function PageFooterSurface() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    PageFooterSurface.prototype.getBackgroundRect = function () {
                        var top = 0, bottom, height = this._height();
                        top = this.parent.pageHeight() - this._totalHeight() - this.parent.margins.bottom();
                        return { top: top, bottom: bottom, height: height };
                    };
                    return PageFooterSurface;
                }(BandSurface));
                Bands.PageFooterSurface = PageFooterSurface;
                (function (Metadata) {
                    Metadata.printOn = {
                        propertyName: "printOn",
                        modelName: "@PrintOn", displayName: "Print On", localizationId: "DevExpress.XtraReports.UI.PageBand.PrintOn", defaultVal: "AllPages",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "AllPages", displayValue: "All Pages", localizationId: "DevExpress.XtraReports.UI.PrintOnPages.AllPages" },
                            { value: "NotWithReportHeader", displayValue: "Not with Report Header", localizationId: "DevExpress.XtraReports.UI.PrintOnPages.NotWithReportHeader" },
                            { value: "NotWithReportFooter", displayValue: "Not with Report Footer", localizationId: "DevExpress.XtraReports.UI.PrintOnPages.NotWithReportFooter" },
                            { value: "NotWithReportHeaderAndReportFooter", displayValue: "Not with Report Header and Report Footer", localizationId: "DevExpress.XtraReports.UI.PrintOnPages.NotWithReportHeaderAndReportFooter" }
                        ]
                    };
                    Metadata.pageBandSerializationInfo = [Metadata.printOn, Controls.Metadata.commonBandScripts].concat(Metadata.bandSerializationInfo);
                    Metadata.popularPropertiesPageHeader = ["printOn"];
                    Metadata.popularPropertiesPageFooter = ["printOn"];
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                var SubBandViewModel = (function (_super) {
                    __extends(SubBandViewModel, _super);
                    function SubBandViewModel(band, parent, serializer) {
                        return _super.call(this, band, parent, serializer) || this;
                    }
                    return SubBandViewModel;
                }(BandViewModel));
                Bands.SubBandViewModel = SubBandViewModel;
                var SubBandSurface = (function (_super) {
                    __extends(SubBandSurface, _super);
                    function SubBandSurface() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.leftMarginTemplate = "dxrd-sub-band-coordinate-grid";
                        return _this;
                    }
                    SubBandSurface.prototype.getAbsolutePositionY = function () {
                        var y = _super.prototype.getAbsolutePositionY.call(this);
                        if (this.parent.bandsHolder.bands().indexOf(this) === 0) {
                            return y + (this.parent.heightWithoutSubBands());
                        }
                        return y;
                    };
                    SubBandSurface.prototype.getBackgroundRect = function () {
                        var top = 0, bottom, height = this._height();
                        var parent = this.parent;
                        var parentBands = ko.unwrap(parent.bandsHolder.bands);
                        var parentBackgroundRect = ko.unwrap(parent.backgroundRect);
                        top += (parentBackgroundRect.top + parentBackgroundRect.height);
                        bottom = parentBackgroundRect.bottom;
                        var bandIndex = parentBands.indexOf(this);
                        for (var i = 0; i < bandIndex; i++) {
                            top += parentBands[i]._totalHeight();
                        }
                        if (top > bottom)
                            height = 0;
                        else if (top + height > bottom)
                            height = bottom - top;
                        return { top: top, bottom: bottom, height: height };
                    };
                    SubBandSurface.prototype._initMultiColumn = function () {
                        var _this = this;
                        this._disposables.push(this.multiColumn = ko.computed(function () {
                            if (_this.parent.multiColumn && _this.parent.multiColumn() && _this.parent.multiColumn().haveColumns()) {
                                return _this.parent.multiColumn();
                            }
                        }));
                    };
                    return SubBandSurface;
                }(BandSurface));
                Bands.SubBandSurface = SubBandSurface;
                var VerticalBandViewModel = (function (_super) {
                    __extends(VerticalBandViewModel, _super);
                    function VerticalBandViewModel(band, parent, serializer) {
                        var _this = _super.call(this, band, parent, serializer) || this;
                        _this.preInit(band, parent, serializer);
                        var _widthFromControls = 0;
                        _this._disposables.push(_this.widthFromControls = ko.pureComputed(function () {
                            _widthFromControls = 0;
                            if (DevExpress.Analytics.Internal.checkModelReady(_this.root)) {
                                _widthFromControls = _this.controls().length > 0 ? Math.max.apply(Math, _this.controls().filter(function (x) { return !x.update(); }).map(function (x) { return x.location.x() + x.size.width(); })) : 1;
                                _widthFromControls = Math.round(_widthFromControls * 100) / 100;
                                _this.width(Math.max(_widthFromControls, _this.width()));
                                _widthFromControls = _widthFromControls > 0 ? _widthFromControls : 0;
                            }
                            return _widthFromControls;
                        }));
                        _this._disposables.push(_this.height.subscribe(function (newValue) {
                            if (_this.update())
                                return;
                            var verticalBands = _this.parentModel() && (_this.parentModel()["bands"]() || []).filter(function (x) { return x instanceof VerticalBandViewModel; });
                            var minValue = Math.max.apply(Math, verticalBands.map(function (x) { return x.heightFromControls(); }));
                            if (newValue < minValue)
                                newValue = minValue;
                            verticalBands.forEach(function (x) {
                                x.update(true);
                                x.height(newValue);
                                x.update(false);
                            });
                        }));
                        return _this;
                    }
                    VerticalBandViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.controls);
                        this.resetObservableArray(this.controls);
                    };
                    VerticalBandViewModel.prototype.initSize = function () {
                        this.size.height = this.height;
                        this.size.width = this.width;
                    };
                    VerticalBandViewModel.prototype.preInit = function (band, parent, serializer) {
                    };
                    return VerticalBandViewModel;
                }(BandViewModel));
                Bands.VerticalBandViewModel = VerticalBandViewModel;
                var VerticalBandSurface = (function (_super) {
                    __extends(VerticalBandSurface, _super);
                    function VerticalBandSurface(band, context, unitProperties) {
                        if (unitProperties === void 0) { unitProperties = VerticalBandSurface._unitProperties; }
                        var _this = _super.call(this, band, context, unitProperties) || this;
                        _this.isSomeParentCollapsed = ko.observable(false);
                        _this._resize = function (delta, oldDelta) {
                            var width = Math.max(_this._width() + delta - oldDelta, _this.minimumWidth());
                            _this._width(width);
                            return delta;
                        };
                        _this.resizeHandles = ko.computed(function () {
                            return _this.rtlLayout() ? 'w' : 'e';
                        });
                        _this.templateName = "dxrd-vertical-band";
                        _this.selectiontemplate = "dxrd-vertical-band-selection";
                        _this.contentSelectionTemplate = "dxrd-vertical-band-selection-content";
                        _this._disposables.push(_this.collapsed = ko.pureComputed({
                            read: function () {
                                return !band.expanded();
                            },
                            write: function (newVal) {
                                band.expanded(!newVal);
                            }
                        }));
                        _this.coordinateGridOptions = {
                            height: band.height,
                            snapGridSize: band.root.snapGridSize,
                            width: band.width,
                            zoom: context.zoom,
                            measureUnit: context.measureUnit,
                            flip: context.rtl
                        };
                        _this.name = band.name;
                        _this.height = ko.pureComputed(function () {
                            if (_this.collapsed())
                                return BandSurface.collapsedHeight;
                            return _this._height() + VerticalBandSurface.markerHeight;
                        });
                        _this._disposables.push(_this.backgroundRect = ko.pureComputed(function () {
                            var top = _this.verticalBandsContainer._getTopOffset();
                            return {
                                top: top,
                                left: _this.absolutePosition.x(),
                                height: _this._height(),
                                width: _this._width()
                            };
                        }));
                        var oldDelta = 0;
                        _this["resize"] = function (params) {
                            if (_this.rtlLayout() && params.delta.dx) {
                                oldDelta = _this._resize(-1 * params.delta.dx, oldDelta);
                            }
                            else if (params.delta.dh) {
                                oldDelta = _this.verticalBandsContainer["_resize"](params.delta.dh, oldDelta);
                            }
                            else {
                                oldDelta = _this._resize(params.delta.dw, oldDelta);
                            }
                        };
                        _this["stopResize"] = function () {
                            oldDelta = 0;
                        };
                        _this._disposables.push(_this.canResize = ko.computed(function () {
                            return _this.selected() && !_this.locked && !DevExpress.Analytics.Internal.DragDropHandler.started();
                        }));
                        _this.getUsefulRect = function () {
                            return {
                                top: 0,
                                left: 0,
                                right: _this._width(),
                                bottom: _this._height(),
                                width: _this._width(),
                                height: _this._height()
                            };
                        };
                        var x = _this.underCursor().x;
                        var self = _this;
                        var createCursor = function (newCursor) {
                            var cursor = $.extend(true, {}, newCursor);
                            delete cursor.x;
                            Object.defineProperty(cursor, "x", {
                                get: function () {
                                    return x;
                                },
                                set: function (newVal) {
                                    x = newVal + self.verticalBandsContainer.scrollOffset();
                                },
                                configurable: true
                            });
                            return cursor;
                        };
                        var underCursor = createCursor(_this.underCursor());
                        _this.underCursor = (function (newVal) {
                            if (!newVal)
                                return underCursor;
                            x = newVal.x;
                            underCursor = createCursor(newVal);
                        });
                        _this._disposables.push(_this.resizeHandles);
                        return _this;
                    }
                    VerticalBandSurface.prototype._getRtlAbsolutePositionX = function (bandIndex, bands) {
                        var allBandsWidth = this.verticalBandsContainer.getBandsWidth(bands);
                        if (bandIndex !== 0) {
                            return bands[bandIndex - 1].absolutePosition.x() - bands[bandIndex]._width();
                        }
                        else if (allBandsWidth > this.verticalBandsContainer.width()) {
                            return bands.reduce(function (acc, band, index) { return acc += (index === 0 ? 0 : band._width()); }, 0);
                        }
                        else {
                            return this.verticalBandsContainer.width() - bands[bandIndex]._width();
                        }
                    };
                    VerticalBandSurface.prototype._getUnitPositionInParent = function () {
                        var neighbors = this._control.parentModel().bands();
                        var position = neighbors
                            .slice(0, neighbors.indexOf(this._control))
                            .reduce(function (previousValue, currentBand) {
                            if (currentBand instanceof VerticalBandViewModel)
                                previousValue.x += currentBand.size.width();
                            else
                                previousValue.y += currentBand.size.height();
                            return previousValue;
                        }, { x: 0, y: 0 });
                        return new DevExpress.Analytics.Elements.Point(position.x, position.y);
                    };
                    Object.defineProperty(VerticalBandSurface.prototype, "_unitAbsoluteRect", {
                        get: function () {
                            var _this = this;
                            return BandSurface._getUnitAbsoluteRect(this, function () { return _this._getUnitPositionInParent(); });
                        },
                        enumerable: true,
                        configurable: true
                    });
                    VerticalBandSurface.prototype.getAbsolutePositionX = function () {
                        var newX = 0;
                        var bandIndex;
                        var parentBands = ko.unwrap(this.verticalBandsContainer.verticalBands);
                        if (parentBands && parentBands.length !== 0) {
                            bandIndex = parentBands.indexOf(this);
                            if (bandIndex === -1)
                                return 0;
                            if (this.rtlLayout()) {
                                newX = this._getRtlAbsolutePositionX(bandIndex, parentBands);
                            }
                            else if (bandIndex > 0 && parentBands[bandIndex - 1])
                                newX = parentBands[bandIndex - 1].absolutePosition.x() + parentBands[bandIndex - 1]._width();
                        }
                        return newX;
                    };
                    VerticalBandSurface.prototype.updateAbsolutePosition = function () {
                        if (!this.parent)
                            return;
                        this.absolutePosition.x(this.getAbsolutePositionX());
                        this.absolutePosition.y(this.verticalBandsContainer.topOffset() + VerticalBandSurface.markerHeight);
                    };
                    VerticalBandSurface.prototype.minimumHeight = function () {
                        return this.verticalBandsContainer.minHeight && this.verticalBandsContainer.minHeight();
                    };
                    VerticalBandSurface.prototype.minimumWidth = function () {
                        return this.widthFromControls && this.widthFromControls();
                    };
                    Object.defineProperty(VerticalBandSurface.prototype, "verticalBandsContainer", {
                        get: function () {
                            return this.parent.bandsHolder.verticalBandsContainer;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    VerticalBandSurface.markerHeight = 29;
                    VerticalBandSurface._unitProperties = {
                        _width: function (x) { return x.width; },
                        _height: function (x) { return x.height; },
                        heightFromControls: function (o) { return o.heightFromControls; },
                        widthFromControls: function (o) { return o.widthFromControls; }
                    };
                    return VerticalBandSurface;
                }(DevExpress.Analytics.Elements.SurfaceElementBase));
                Bands.VerticalBandSurface = VerticalBandSurface;
                (function (Metadata) {
                    var width = { propertyName: "width", modelName: "@WidthF", defaultVal: 300, editor: DevExpress.Analytics.Widgets.editorTemplates.numeric, displayName: "Width", localizationId: "DevExpress.XtraReports.UI.XRControl.Width", from: DevExpress.Analytics.Utils.floatFromModel };
                    Metadata.commonVerticalBandProperties = [width, Controls.Metadata.keepTogetherDefaultValueFalse].concat(Metadata.bandSerializationInfo);
                    Metadata.bandLayout = {
                        propertyName: "bandLayout",
                        modelName: "@BandLayout",
                        displayName: "Band Layout",
                        localizationId: "DevExpress.XtraReports.UI.VerticalDetailBand.BandLayout",
                        editor: DevExpress.Analytics.Widgets.editorTemplates.combobox,
                        valuesArray: [
                            { value: "AcrossOnly", displayValue: "Across Only", localizationId: "DevExpress.XtraReports.UI.VerticalBandLayout.AcrossOnly" },
                            { value: "AcrossThenDown", displayValue: "Across Then Down", localizationId: "DevExpress.XtraReports.UI.VerticalBandLayout.AcrossThenDown" }
                        ],
                        defaultVal: "AcrossOnly"
                    };
                    Metadata.verticalHeaderBandSerializationInfo = [Metadata.repeatEveryPage].concat(Metadata.commonVerticalBandProperties);
                    Metadata.popularPropertiesVerticalHeaderBand = ["repeatEveryPage"];
                    Metadata.verticalTotalBandSerializationInfo = [].concat(Metadata.commonVerticalBandProperties);
                    Metadata.popularPropertiesVerticalTotalBand = [];
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                var VerticalDetailBandViewModel = (function (_super) {
                    __extends(VerticalDetailBandViewModel, _super);
                    function VerticalDetailBandViewModel() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    VerticalDetailBandViewModel.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this.sortFields);
                        this.resetObservableArray(this.sortFields);
                    };
                    VerticalDetailBandViewModel.prototype.preInit = function (band, parent, serializer) {
                        this.sortFields = DevExpress.Analytics.Utils.deserializeArray(band.SortFields, function (field) { return new GroupFieldModel(field, serializer); });
                    };
                    return VerticalDetailBandViewModel;
                }(VerticalBandViewModel));
                Bands.VerticalDetailBandViewModel = VerticalDetailBandViewModel;
                (function (Metadata) {
                    Metadata.verticalDetailBandSerializationInfo = [Metadata.bandLayout, Metadata.sortFields].concat(Metadata.commonVerticalBandProperties);
                    Metadata.popularPropertiesVerticalDetailBand = ["sortFields", "bandLayout"];
                })(Metadata = Bands.Metadata || (Bands.Metadata = {}));
                (function (Internal) {
                    var VerticalBandsContainerSurface = (function (_super) {
                        __extends(VerticalBandsContainerSurface, _super);
                        function VerticalBandsContainerSurface(_parent) {
                            var _this = _super.call(this) || this;
                            _this._parent = _parent;
                            _this.markerWidth = ko.observable(BandSurface.collapsedHeight);
                            _this.name = "Vertical Bands";
                            _this.bandOffset = 29;
                            _this.templateName = "dxrd-vertical-bands-container";
                            _this.selectionTemplate = "dxrd-vertical-bands-container-selection";
                            _this.vrulerTemplate = "dxrd-vertical-bands-container-vruler";
                            _this.leftMarginTemplate = "dxrd-vertical-bands-leftMargin";
                            _this.leftMarginSelectionTemplate = "dxrd-vertical-bands-leftMargin-selection";
                            _this.verticalBands = ko.observableArray();
                            _this.scrollOffset = ko.observable(0);
                            _this._disposables.push(_this.bandPosition = ko.computed(function () {
                                return _this.getBandPosition();
                            }), _this.topOffset = ko.computed(function () {
                                var offset = 0;
                                if (_this.bandPosition() > 0) {
                                    var prevBand = _this._parent.bandsHolder.bands()[_this.bandPosition() - 1];
                                    if (prevBand) {
                                        return prevBand.absolutePosition.y() + prevBand.height();
                                    }
                                }
                                if (_this._parent instanceof DetailReportBandSurface) {
                                    return _this._parent["absolutePosition"].y();
                                }
                                else
                                    return 0;
                            }), _this.collapsed = ko.computed({
                                read: function () { return _this.verticalBands().some(function (x) { return x.collapsed(); }); },
                                write: function (newVal) { return _this.verticalBands().forEach(function (x) { return x.collapsed(newVal); }); }
                            }), _this.selected = ko.computed(function () {
                                return _this.verticalBands().some(function (x) { return x.selected(); });
                            }), _this.canResize = ko.computed(function () {
                                return _this.selected() && !_this.isLocked() && !_this.collapsed() && !DevExpress.Analytics.Internal.DragDropHandler.started();
                            }), _this.width = ko.computed(function () { return _parent._context.pageWidth() - _parent._context.margins.left() - (!_this.collapsed() ? _parent._context.margins.right() : 0); }), _this.leftMargin = ko.pureComputed(function () { return 0 - (_parent._context.margins && _parent._context.margins.left() || 0) + 10; }), _this.height = ko.computed({
                                read: function () {
                                    return _this.verticalBands()[0] && _this.verticalBands()[0].height() || 0;
                                },
                                write: function (newVal) { return _this.verticalBands().forEach((function (x) { return x._height(newVal - VerticalBandSurface.markerHeight); })); }
                            }), _this._height = ko.computed(function () { return _this.verticalBands()[0] && _this.verticalBands()[0]._height() || 0; }), _this.focused = ko.computed(function () {
                                return _this.verticalBands().some(function (x) { return x.focused(); });
                            }), _this.leftOffset = ko.computed(function () { return _parent.rtlLayout() ? _parent._context.margins.right() : 0; }), _this.grayAreaWidth = ko.computed(function () {
                                return Math.max(0, _this.width() - _this.getBandsWidth(_this.verticalBands()));
                            }), _this.grayAreaLeft = ko.computed(function () {
                                var bands = _this.verticalBands();
                                if (!bands.length)
                                    return 0;
                                var band = bands[bands.length - 1];
                                return band.absolutePosition.x() + band._width();
                            }), _this.minHeight = ko.pureComputed(function () {
                                return Math.max.apply(Math, _this.verticalBands().map(function (x) { return (x.heightFromControls && x.heightFromControls()) || 1; })) + VerticalBandSurface.markerHeight;
                            }), _this.locked = ko.computed(function () { return _this.isLocked(); }));
                            var oldDelta = 0;
                            _this["_resize"] = function (delta, oldDelta) {
                                var firstBand = _this.verticalBands()[0];
                                firstBand._height(firstBand._height() + delta - oldDelta);
                                return delta;
                            };
                            _this["resize"] = function (params) {
                                oldDelta = _this["_resize"](params.delta.dh, oldDelta);
                            };
                            _this["stopResize"] = function () {
                                oldDelta = 0;
                            };
                            return _this;
                        }
                        VerticalBandsContainerSurface.prototype.dispose = function () {
                            _super.prototype.dispose.call(this);
                            this.disposeObservableArray(this.verticalBands);
                            this.resetObservableArray(this.verticalBands);
                        };
                        VerticalBandsContainerSurface.prototype.getBandPosition = function () {
                            if (this.visible)
                                return this._parent.getControlModel().bands().indexOf(this.verticalBands()[0]._control);
                            return -1;
                        };
                        VerticalBandsContainerSurface.prototype.isLocked = function () {
                            return this.verticalBands().some(function (x) { return x.locked; });
                        };
                        VerticalBandsContainerSurface.prototype.createScrollViewOptions = function (target, selection) {
                            return {
                                direction: 'horizontal',
                                showScrollbar: 'always',
                                useNative: false,
                                scrollByContent: false,
                                scrollByThumb: true,
                                onStart: function () {
                                    selection["disabled"](true);
                                },
                                onScroll: function (e) {
                                    target.scrollOffset(e.scrollOffset.left);
                                },
                                onEnd: function () {
                                    selection["disabled"](false);
                                }
                            };
                        };
                        VerticalBandsContainerSurface.prototype.markerClick = function (selection) {
                            if (selection.expectClick) {
                                selection.expectClick = false;
                                return;
                            }
                            if (!this.focused()) {
                                selection.initialize(this.verticalBands()[0]);
                            }
                            else {
                                this.collapsed(!this.collapsed());
                            }
                        };
                        VerticalBandsContainerSurface.prototype.getBandsWidth = function (bands) {
                            return bands.reduce(function (acc, band, index) { return acc += band._width(); }, 0);
                        };
                        VerticalBandsContainerSurface.prototype._getTopOffset = function () {
                            var top = 0;
                            if (this._parent instanceof DetailReportBandSurface) {
                                top = this._parent["backgroundRect"]().top;
                            }
                            if (this.bandPosition() > 0) {
                                for (var i = 0; i < this.bandPosition(); i++) {
                                    top += this._parent.bandsHolder.bands()[i]._totalHeight();
                                }
                                ;
                            }
                            return top;
                        };
                        Object.defineProperty(VerticalBandsContainerSurface.prototype, "visible", {
                            get: function () {
                                return this.verticalBands().length > 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(VerticalBandsContainerSurface.prototype, "zoom", {
                            get: function () { return this._parent.zoom; },
                            enumerable: true,
                            configurable: true
                        });
                        return VerticalBandsContainerSurface;
                    }(DevExpress.Analytics.Utils.Disposable));
                    Internal.VerticalBandsContainerSurface = VerticalBandsContainerSurface;
                })(Internal = Bands.Internal || (Bands.Internal = {}));
            })(Bands = Designer.Bands || (Designer.Bands = {}));
            (function (Wizard) {
                Wizard.LegacyReportWizardPageId = {
                    ChooseDataMemberPage: "chooseDataMemberPage",
                    SelectColumnsPage: "selectColumnsPage",
                    AddGroupingLevelPage: "addGroupingLevelPage",
                    ChooseSummaryOptionsPage: "chooseSummaryOptionsPage",
                    ChooseReportLayoutPage: "chooseReportLayoutPage",
                    ChooseReportStylePage: "chooseReportStylePage"
                };
                Wizard.ReportWizardPageId = {
                    SelectReportTypePage: "selectReportTypePage",
                    ChooseAvailableDataSourcePage: "chooseAvailableDataSourcePage",
                    SelectLabelTypePage: "selectLabelTypePage",
                    CustomizeLabelPage: "customizeLabelPage",
                    SelectDataMembersPage: "selectDataMembersPage",
                    AddGroupingLevelPage: "addGroupingLevelPage",
                    ChooseSummaryOptionsPage: "chooseSummaryOptionsPage",
                    ConfigureReportPageSettingsPage: "configureReportPageSettingsPage",
                    ChooseReportColorSchemePage: "chooseReportColorSchemePage",
                    SetReportTitlePage: "setReportTitlePage",
                };
                Wizard.FullscreenReportWizardPageId = {
                    SelectReportTypePage: Wizard.ReportWizardPageId.SelectReportTypePage,
                    SelectDataSourcePage: "selectDataSourcePage",
                    SpecifySqlDataSourceSettingsPage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardPageId.SpecifySqlDataSourceSettingsPage,
                    SpecifyJsonDataSourceSettingsPage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardPageId.SpecifyJsonDataSourceSettingsPage,
                    DefineReportLayoutPage: "defineReportLayoutPage",
                    SpecifyPageSettingsPage: "specifyPageSettingsPage",
                    SpecifyLabelSettingsPage: "specifyLabelSettingsPage"
                };
                Wizard.FullscreenReportWizardSectionId = {
                    ChooseAvailableDataSourcePage: Wizard.ReportWizardPageId.ChooseAvailableDataSourcePage,
                    SelectLabelTypePage: Wizard.ReportWizardPageId.SelectLabelTypePage,
                    CustomizeLabelPage: Wizard.ReportWizardPageId.CustomizeLabelPage,
                    SelectDataMembersPage_Members: "selectDataMembersPage_Members",
                    SelectDataMembersPage_Fields: "selectDataMembersPage_Fields",
                    AddGroupFieldsPage: Wizard.ReportWizardPageId.AddGroupingLevelPage,
                    AddSummaryFieldsPage: Wizard.ReportWizardPageId.ChooseSummaryOptionsPage,
                    ConfigurePageSettingsPage: Wizard.ReportWizardPageId.ConfigureReportPageSettingsPage,
                    SpecifyReportTitlePage: Wizard.ReportWizardPageId.SetReportTitlePage,
                    ChooseDataSourceTypePage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardPageId.ChooseDataSourceTypePage,
                    ChooseJsonSchemaPage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardSectionId.ChooseJsonSchemaPage,
                    SpecifyJsonConnectionPage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardSectionId.SpecifyJsonConnectionPage,
                    ConfigureMasterDetailRelationshipsPage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardSectionId.ConfigureMasterDetailRelationshipsPage,
                    ConfigureQueryParametersPage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardSectionId.ConfigureQueryParametersPage,
                    ChooseSqlConnectionPage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardSectionId.ChooseSqlConnectionPage,
                    ConfigureQueryPage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardSectionId.ConfigureQueryPage,
                    ChooseJsonSourcePage: DevExpress.Analytics.Wizard.FullscreenDataSourceWizardSectionId.ChooseJsonSourcePage
                };
            })(Wizard = Designer.Wizard || (Designer.Wizard = {}));
            (function (Internal) {
                var CommonRequestModel = (function () {
                    function CommonRequestModel(state) {
                        if (state.reportType === Wizard.ReportType.Label) {
                            this.CustomLabelInformation = {
                                Height: state.labelDetails.height,
                                HorizontalPitch: state.labelDetails.hPitch,
                                LeftMargin: state.labelDetails.leftMargin,
                                RightMargin: state.labelDetails.rightMargin,
                                PaperKindDataId: state.labelDetails.paperKindId,
                                TopMargin: state.labelDetails.topMargin,
                                BottomMargin: state.labelDetails.bottomMargin,
                                Unit: state.labelDetails.unit === Wizard.GraphicsUnit.Inch ? Wizard.GraphicsUnit.Inch : Wizard.GraphicsUnit.Millimeter,
                                VerticalPitch: state.labelDetails.vPitch,
                                Width: state.labelDetails.width
                            };
                            this.LabelProductId = state.labelDetails.productId;
                            this.LabelProductDetailId = state.labelDetails.id;
                        }
                        this.IgnoreNullValuesForSummary = state.ignoreNullValuesForSummary;
                        this.ReportTitle = state.reportTitle;
                        this.ReportType = state.reportType;
                    }
                    return CommonRequestModel;
                }());
                Internal.CommonRequestModel = CommonRequestModel;
                var MasterDetailRequestModel = (function (_super) {
                    __extends(MasterDetailRequestModel, _super);
                    function MasterDetailRequestModel(state) {
                        var _this = _super.call(this, state) || this;
                        _this._masterRelationMap = function (query, path) {
                            var newInfo = {
                                Name: query.name,
                                DisplayName: query.displayName,
                                CheckedState: query.checked,
                                Fields: query.fields.map(function (field) {
                                    return {
                                        Name: field.name,
                                        DisplayName: field.displayName,
                                        Checked: field.checked,
                                    };
                                }),
                                Relations: query.relations.map(function (relation) { return _this._masterRelationMap(relation, relation.path); })
                            };
                            _this._collectionByPath[path] = newInfo;
                            return newInfo;
                        };
                        _this._collectionByPath = {};
                        _this.UseMasterDetailBuilder = true;
                        var dataSource = state.dataSource || state.newDataSource;
                        _this.DataSourceName = dataSource && JSON.parse(dataSource).name;
                        _this.MasterDetailInfo = state.masterDetailInfoCollection.map(function (info) {
                            return _this._masterRelationMap(info, info.path);
                        });
                        _this.MasterDetailGroupsInfo = $.map(state.masterDetailGroups, function (array, key) { return ({
                            "Key": _this._collectionByPath[key],
                            "Value": (array || []).map(function (item) { return ((item || [])); })
                        }); });
                        _this.MasterDetailSummariesInfo = $.map(state.masterDetailSummariesInfo, function (value, key) { return ({
                            "Key": _this._collectionByPath[key],
                            "Value": (value || []).map(function (item) {
                                return {
                                    Column: {
                                        Name: item.column.name,
                                        DisplayName: item.column.displayName
                                    },
                                    SummaryFunctions: item.summaryFunctions
                                };
                            })
                        }); });
                        if (state.pageSetup) {
                            _this.PaperKind = Utils.PaperKind[state.pageSetup.paperKind];
                            _this.PaperSize = {
                                width: state.pageSetup.width,
                                height: state.pageSetup.height
                            };
                            _this.Margins = {
                                Left: state.pageSetup.marginLeft,
                                Right: state.pageSetup.marginRight,
                                Top: state.pageSetup.marginTop,
                                Bottom: state.pageSetup.marginBottom
                            };
                            _this.Portrait = !state.pageSetup.landscape;
                            _this.Unit = state.pageSetup.unit;
                        }
                        return _this;
                    }
                    return MasterDetailRequestModel;
                }(CommonRequestModel));
                Internal.MasterDetailRequestModel = MasterDetailRequestModel;
                var ReportWizardStateHelper = (function () {
                    function ReportWizardStateHelper() {
                    }
                    ReportWizardStateHelper.applyDataBindings = function (state, model) {
                        var modelDS = model.dataSource();
                        var dataSourceInfo = modelDS && modelDS["dataSourceInfo"];
                        state.dataSource = dataSourceInfo && Wizard._convertToStateDataSource(dataSourceInfo);
                        state.dataMember = model.dataMember() || "";
                    };
                    ReportWizardStateHelper.applyPageSetup = function (state, model) {
                        var unit;
                        var _pageSetupProps = [
                            model.pageWidth(),
                            model.pageHeight(),
                            model.margins.left(),
                            model.margins.right(),
                            model.margins.top(),
                            model.margins.bottom()
                        ];
                        switch (model.measureUnit()) {
                            case "HundredthsOfAnInch":
                                _pageSetupProps = _pageSetupProps.map(function (x) { return x / 100; });
                                unit = Wizard.GraphicsUnit.Inch;
                                break;
                            case "TenthsOfAMillimeter":
                                _pageSetupProps = _pageSetupProps.map(function (x) { return x / 10; });
                                unit = Wizard.GraphicsUnit.Millimeter;
                                break;
                            case "Pixels":
                                unit = Wizard.GraphicsUnit.Pixel;
                                break;
                        }
                        state.pageSetup = {
                            paperKind: model.paperKind(),
                            unit: unit,
                            width: _pageSetupProps[0],
                            height: _pageSetupProps[1],
                            marginLeft: _pageSetupProps[2],
                            marginRight: _pageSetupProps[3],
                            marginTop: _pageSetupProps[4],
                            marginBottom: _pageSetupProps[5],
                            landscape: model.landscape()
                        };
                    };
                    return ReportWizardStateHelper;
                }());
                Internal.ReportWizardStateHelper = ReportWizardStateHelper;
                var LegacyReportRequestModel = (function (_super) {
                    __extends(LegacyReportRequestModel, _super);
                    function LegacyReportRequestModel(state) {
                        var _this = _super.call(this, state) || this;
                        if (state.reportType === Wizard.ReportType.Databound) {
                            _this.AdjustFieldWidth = state.fitFieldsToPage;
                            if (state.fields.length) {
                                _this.Columns = state.fields.map(function (value) { return value.name; });
                                _this.ColumnInfo = state.fields.map(function (value) {
                                    return {
                                        Name: value.name,
                                        DisplayName: value.displayName,
                                        TypeSpecifics: 0
                                    };
                                });
                            }
                            else {
                                _this.Columns = null;
                                _this.ColumnInfo = null;
                            }
                            if (state.dataMember !== null || state.dataMemberPath !== null) {
                                _this.DataMemberName = {
                                    DisplayName: state.dataMemberInfo.displayName,
                                    Name: state.dataMemberInfo.name,
                                    DataMemberType: 0
                                };
                                if (state.dataMemberInfo.name) {
                                    var index = state.dataMemberPath.indexOf('.');
                                    _this.DataMemberName.Name = index > 0 ? state.dataMemberPath.substr(index + 1) : state.dataMemberPath;
                                }
                            }
                            else {
                                _this.DataMemberName = null;
                            }
                            _this.DataSourceName = null;
                            _this.GroupingLevels = state.groups;
                            _this.Layout = state.layout;
                            _this.Portrait = state.portrait;
                            _this.ReportStyleId = state.style;
                            _this.SummaryOptions = (state.summaryOptions || []).map(function (item) {
                                return {
                                    ColumnName: item.columnName,
                                    Flags: item.flags
                                };
                            });
                            if (state.pageSetup) {
                                _this.PaperKind = Utils.PaperKind[state.pageSetup.paperKind];
                                _this.PaperSize = {
                                    width: state.pageSetup.width,
                                    height: state.pageSetup.height
                                };
                                _this.Margins = {
                                    Left: state.pageSetup.marginLeft,
                                    Right: state.pageSetup.marginRight,
                                    Top: state.pageSetup.marginTop,
                                    Bottom: state.pageSetup.marginBottom
                                };
                                _this.Unit = state.pageSetup.unit;
                            }
                        }
                        return _this;
                    }
                    return LegacyReportRequestModel;
                }(CommonRequestModel));
                Internal.LegacyReportRequestModel = LegacyReportRequestModel;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Wizard) {
                var ReportType;
                (function (ReportType) {
                    ReportType[ReportType["Empty"] = 3] = "Empty";
                    ReportType[ReportType["Databound"] = 0] = "Databound";
                    ReportType[ReportType["Vertical"] = 1] = "Vertical";
                    ReportType[ReportType["Label"] = 2] = "Label";
                })(ReportType = Wizard.ReportType || (Wizard.ReportType = {}));
                var GraphicsUnit;
                (function (GraphicsUnit) {
                    GraphicsUnit[GraphicsUnit["World"] = 0] = "World";
                    GraphicsUnit[GraphicsUnit["Display"] = 1] = "Display";
                    GraphicsUnit[GraphicsUnit["Pixel"] = 2] = "Pixel";
                    GraphicsUnit[GraphicsUnit["Point"] = 3] = "Point";
                    GraphicsUnit[GraphicsUnit["Inch"] = 4] = "Inch";
                    GraphicsUnit[GraphicsUnit["Document"] = 5] = "Document";
                    GraphicsUnit[GraphicsUnit["Millimeter"] = 6] = "Millimeter";
                })(GraphicsUnit = Wizard.GraphicsUnit || (Wizard.GraphicsUnit = {}));
                Wizard.defaultPageSetupState = {
                    paperKind: Controls.Metadata.paperKind.defaultVal,
                    landscape: false,
                    marginTop: 1,
                    marginRight: 1,
                    marginBottom: 1,
                    marginLeft: 1,
                    width: DevExpress.Analytics.Internal.papperKindMapper[Controls.Metadata.paperKind.defaultVal].width / 100,
                    height: DevExpress.Analytics.Internal.papperKindMapper[Controls.Metadata.paperKind.defaultVal].height / 100,
                    unit: GraphicsUnit.Inch
                };
                Wizard.defaultReportWizardState = {
                    masterDetailInfoCollection: [],
                    pageSetup: $.extend(true, {}, Wizard.defaultPageSetupState),
                    colorScheme: {},
                    ignoreNullValuesForSummary: false
                };
                function createReportWizardState(reportViewModel) {
                    var state = $.extend(true, {}, Wizard.defaultReportWizardState, DevExpress.Analytics.Wizard._createDefaultDataSourceWizardState());
                    if (reportViewModel) {
                        Internal.ReportWizardStateHelper.applyDataBindings(state, reportViewModel);
                        Internal.ReportWizardStateHelper.applyPageSetup(state, reportViewModel);
                    }
                    return state;
                }
                Wizard.createReportWizardState = createReportWizardState;
                var ReportWizard = (function (_super) {
                    __extends(ReportWizard, _super);
                    function ReportWizard(pageFactory, _reportWizardOptions) {
                        var _this = _super.call(this, pageFactory, _reportWizardOptions.callbacks.finishCallback) || this;
                        _this._reportWizardOptions = _reportWizardOptions;
                        _this._requestModelType = Designer.Internal.MasterDetailRequestModel;
                        _this.title = DevExpress.Analytics.Utils.getLocalization("Report Wizard", "ASPxReportsStringId.ReportDesigner_Wizard_Header");
                        _this.height(Internal._masterDetailWizardHeight);
                        _this.width(Internal._masterDetailWizardWidth);
                        _this._extendCssClass = "dxrd-master-detail-report-wizard";
                        return _this;
                    }
                    ReportWizard.prototype._callBeforeFinishHandler = function (state, wizardModel) { };
                    ReportWizard.prototype._callAfterFinishHandler = function (state, result) {
                        this.events.call("afterFinish", { state: state, wizardResult: result });
                    };
                    ReportWizard.prototype.initialize = function (state) {
                        var _this = this;
                        if (state === void 0) { state = createReportWizardState(); }
                        if (this._reportWizardOptions.sqlDataSourceAvailable || !DevExpress.Analytics.Internal.isEmptyObject(state.sqlDataSourceWizard)) {
                            state.dataSourceType = DevExpress.Analytics.Wizard.DataSourceType.Sql;
                        }
                        else if (this._reportWizardOptions.jsonDataSourceAvailable || state.jsonDataSourceWizard.jsonSource) {
                            state.dataSourceType = DevExpress.Analytics.Wizard.DataSourceType.Json;
                        }
                        else {
                            state.dataSourceType = DevExpress.Analytics.Wizard.DataSourceType.NoData;
                        }
                        _super.prototype.initialize.call(this, state, function (pageFactory, stateManager) { return new ReportWizardPageIterator(pageFactory, stateManager, _this._reportWizardOptions); });
                    };
                    ReportWizard.prototype.start = function (finishCallback) {
                        if (finishCallback)
                            this["_finishCallback"] = finishCallback;
                        _super.prototype.start.call(this);
                    };
                    return ReportWizard;
                }(DevExpress.Analytics.Wizard.PopupWizard));
                Wizard.ReportWizard = ReportWizard;
                var ReportWizardPageIterator = (function (_super) {
                    __extends(ReportWizardPageIterator, _super);
                    function ReportWizardPageIterator(pagesFactory, stateManager, _reportWizardOptions) {
                        var _this = _super.call(this, pagesFactory, stateManager, _reportWizardOptions) || this;
                        _this._reportWizardOptions = _reportWizardOptions;
                        return _this;
                    }
                    ReportWizardPageIterator.prototype.getNextPageId = function (pageId) {
                        if (!pageId)
                            return Wizard.ReportWizardPageId.SelectReportTypePage;
                        if (pageId === Wizard.ReportWizardPageId.SelectReportTypePage && this._getCurrentState().reportType === Wizard.ReportType.Label) {
                            return Wizard.ReportWizardPageId.SelectLabelTypePage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.SelectLabelTypePage) {
                            return Wizard.ReportWizardPageId.CustomizeLabelPage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.SelectReportTypePage && this._reportWizardOptions.dataSources().length === 0) {
                            return _super.prototype.getNextPageId.call(this);
                        }
                        else if (pageId === Wizard.ReportWizardPageId.SelectReportTypePage) {
                            return Wizard.ReportWizardPageId.ChooseAvailableDataSourcePage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.ChooseAvailableDataSourcePage && !this._getCurrentState().dataSource) {
                            return _super.prototype.getNextPageId.call(this);
                        }
                        else if (_super.prototype.getNextPageId.call(this, pageId)) {
                            return _super.prototype.getNextPageId.call(this, pageId);
                        }
                        else if (pageId === Wizard.ReportWizardPageId.ChooseAvailableDataSourcePage && this._getCurrentState().dataSource) {
                            return Wizard.ReportWizardPageId.SelectDataMembersPage;
                        }
                        else if ((pageId === DevExpress.Analytics.Wizard.DataSourceWizardPageId.ConfigureMasterDetailRelationshipsPage ||
                            pageId === DevExpress.Analytics.Wizard.SqlDataSourceWizardPageId.MultiQueryConfigurePage ||
                            pageId === DevExpress.Analytics.Wizard.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage ||
                            pageId === DevExpress.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseJsonSchemaPage)) {
                            return Wizard.ReportWizardPageId.SelectDataMembersPage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.SelectDataMembersPage && !$.isEmptyObject(this.stateManager.getCurrentState().masterDetailInfoCollection) && this.stateManager.getCurrentState().masterDetailInfoCollection.some(function (item) { return item.checked !== false; })) {
                            return Wizard.ReportWizardPageId.AddGroupingLevelPage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.AddGroupingLevelPage && !$.isEmptyObject(this._getCurrentState().masterDetailSummaryOptionsColumns)) {
                            return Wizard.ReportWizardPageId.ChooseSummaryOptionsPage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.AddGroupingLevelPage || pageId === Wizard.ReportWizardPageId.ChooseSummaryOptionsPage) {
                            return Wizard.ReportWizardPageId.ConfigureReportPageSettingsPage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.ConfigureReportPageSettingsPage) {
                            return Wizard.ReportWizardPageId.ChooseReportColorSchemePage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.ChooseReportColorSchemePage) {
                            return Wizard.ReportWizardPageId.SetReportTitlePage;
                        }
                    };
                    return ReportWizardPageIterator;
                }(DevExpress.Analytics.Wizard.MultiQueryDataSourceWizardPageIterator));
                Wizard.ReportWizardPageIterator = ReportWizardPageIterator;
                function _registerCommonReportWizardPages(factory, reportWizardOptions) {
                    Wizard._registerSelectLabelTypePage(factory);
                    _registerCustomizeLabelPage(factory);
                    Wizard._registerChooseAvailableDataSourcePage(factory, reportWizardOptions);
                    Wizard._registerSetReportTitlePage(factory);
                    DevExpress.Analytics.Wizard._registerMultiQueryDataSourcePages(factory, reportWizardOptions);
                    Wizard._registerChooseJsonSchemaPage(factory, reportWizardOptions.callbacks);
                    Wizard._registerConfigureMasterDetailRelationshipsPage(factory, reportWizardOptions.callbacks);
                    Wizard._registerMultiQueryConfigurePage(factory, reportWizardOptions);
                    Wizard._registerMultiQueryConfigureParametersPage(factory, reportWizardOptions.callbacks);
                }
                Wizard._registerCommonReportWizardPages = _registerCommonReportWizardPages;
                function _registerReportWizardPages(factory, reportWizardOptions) {
                    _registerCommonReportWizardPages(factory, reportWizardOptions);
                    _registerSelectReportTypePage(factory, {
                        showVertical: false,
                        canCreateDatabound: function () {
                            return reportWizardOptions.dataSources().length > 0 ||
                                reportWizardOptions.connectionStrings.sql().length > 0 ||
                                reportWizardOptions.connectionStrings.json().length > 0 ||
                                (reportWizardOptions.canCreateNewJsonDataSource && reportWizardOptions.wizardSettings.enableJsonDataSource);
                        }
                    });
                    Wizard._registerSelectDataMembersPage(factory, reportWizardOptions);
                    Wizard._registerAddGroupingLevelPage(factory);
                    Wizard._registerChooseSummaryOptionsPage(factory);
                    Wizard._registerConfigureReportPageSettingsPage(factory);
                    Wizard._registerChooseReportColorSchemePage(factory);
                }
                Wizard._registerReportWizardPages = _registerReportWizardPages;
                function _createReportWizard(reportWizardOptions) {
                    var factory = new DevExpress.Analytics.Wizard.PageFactory();
                    _registerReportWizardPages(factory, reportWizardOptions);
                    return new ReportWizard(factory, reportWizardOptions);
                }
                Wizard._createReportWizard = _createReportWizard;
                var SelectReportTypePage = (function (_super) {
                    __extends(SelectReportTypePage, _super);
                    function SelectReportTypePage(_options) {
                        var _this = _super.call(this, {}) || this;
                        _this._options = _options;
                        _this._extendCssClass = function (rightPath) { return "dxrd-report-" + rightPath; };
                        _this.typeItems = [
                            new DevExpress.Analytics.Wizard.TypeItem("Empty Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_EmptyReport", "emptyReport", "dxrd-svg-wizard-EmptyReport", Wizard.ReportType.Empty),
                            new DevExpress.Analytics.Wizard.TypeItem("Label Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_LabelReport", "labelReport", "dxrd-svg-wizard-LabelReport", Wizard.ReportType.Label)
                        ];
                        if (_this._options.canCreateDatabound) {
                            _this._addDataboundReportType();
                        }
                        return _this;
                    }
                    SelectReportTypePage.prototype._addDataboundReportType = function () {
                        this.typeItems.splice(1, 0, new DevExpress.Analytics.Wizard.TypeItem("Table Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_TableReport", "databoundReport", "dxrd-svg-wizard-StandardReport", Wizard.ReportType.Databound));
                        if (this._options.showVertical) {
                            this.typeItems.splice(2, 0, new DevExpress.Analytics.Wizard.TypeItem("Vertical Report", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_Vertical", "verticalReport", "dxrd-svg-wizard-VerticalReport", Wizard.ReportType.Vertical));
                        }
                    };
                    SelectReportTypePage.prototype.canNext = function () {
                        return this.selectedItem() !== null && this.selectedItem().type !== Wizard.ReportType.Empty;
                    };
                    SelectReportTypePage.prototype.canFinish = function () {
                        return this.selectedItem() !== null && this.selectedItem().type === Wizard.ReportType.Empty;
                    };
                    SelectReportTypePage.prototype.commit = function () {
                        return $.Deferred().resolve({ reportType: this.selectedItem().type }).promise();
                    };
                    SelectReportTypePage.prototype.initialize = function (state) {
                        var type = state.reportType || Wizard.ReportType.Databound;
                        var item = DevExpress.Analytics.Internal.findFirstItemMatchesCondition(this.typeItems, function (item) { return item.type === type; });
                        this.selectedItem(item || this.typeItems[0]);
                        return $.Deferred().resolve().promise();
                    };
                    return SelectReportTypePage;
                }(DevExpress.Analytics.Wizard.ChooseDataSourceTypePage));
                Wizard.SelectReportTypePage = SelectReportTypePage;
                var ChooseDataSourceTypePage = (function (_super) {
                    __extends(ChooseDataSourceTypePage, _super);
                    function ChooseDataSourceTypePage(dataSourceWizardOptions) {
                        var _this = _super.call(this, dataSourceWizardOptions) || this;
                        _this.typeItems.push(new DevExpress.Analytics.Wizard.TypeItem("No Data", "ReportDesignerStringId.ReportWizard_ChooseDataSourceTypePage_DataSourceNoData_Name", "nodata", "dxrd-svg-wizard-NoDataSource", DevExpress.Analytics.Wizard.DataSourceType.NoData));
                        return _this;
                    }
                    return ChooseDataSourceTypePage;
                }(DevExpress.Analytics.Wizard.ChooseDataSourceTypePage));
                Wizard.ChooseDataSourceTypePage = ChooseDataSourceTypePage;
                function _registerSelectReportTypePage(factory, options) {
                    factory.registerMetadata(Wizard.FullscreenReportWizardPageId.SelectReportTypePage, {
                        setState: function (data, state) {
                            state.reportType = data.reportType;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.reportType = defaultState.reportType;
                        },
                        create: function () {
                            var canCreateDatabound = "function" === typeof (options.canCreateDatabound) ? options.canCreateDatabound() : options.canCreateDatabound;
                            return new SelectReportTypePage({
                                canCreateDatabound: canCreateDatabound,
                                showVertical: options.showVertical
                            });
                        },
                        description: DevExpress.Analytics.Utils.getLocalization("Select the report type you wish to create.", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_Message"),
                        template: "dxrd-page-choose-datasource-type",
                        navigationPanelText: DevExpress.Analytics.Utils.getLocalization("Select Report Type", "ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType")
                    });
                }
                Wizard._registerSelectReportTypePage = _registerSelectReportTypePage;
                function _registerChooseDataSourceTypePage(factory, dataSourceWizardOptions) {
                    factory.registerMetadata(DevExpress.Analytics.Wizard.DataSourceWizardPageId.ChooseDataSourceTypePage, {
                        setState: function (data, state) {
                            state.dataSourceType = data.dataSourceType;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.dataSourceType = defaultState.dataSourceType;
                        },
                        create: function () {
                            return new ChooseDataSourceTypePage(dataSourceWizardOptions);
                        },
                        description: DevExpress.Analytics.Utils.getLocalization("Select the data source type.", "AnalyticsCoreStringId.Wizard_SelectDataSourceType_Description"),
                        template: "dxrd-page-choose-datasource-type"
                    });
                }
                Wizard._registerChooseDataSourceTypePage = _registerChooseDataSourceTypePage;
                var CustomizeLabelPage = (function (_super) {
                    __extends(CustomizeLabelPage, _super);
                    function CustomizeLabelPage() {
                        var _a;
                        var _this = _super.call(this) || this;
                        _this._id = ko.observable(0);
                        _this._labelWidth = ko.observable(0);
                        _this._labelHeight = ko.observable(0);
                        _this._horizontalPitch = ko.observable(0);
                        _this._verticalPitch = ko.observable(0);
                        _this._topMargin = ko.observable(0);
                        _this._leftMargin = ko.observable(0);
                        _this._rightMargin = ko.observable(0);
                        _this._bottomMargin = ko.observable(0);
                        _this._rowsCount = ko.pureComputed(function () {
                            return _this._getLabelsCount(_this._pageHeight(), _this._verticalPitch(), _this._labelHeight(), _this._topMargin() + _this._bottomMargin());
                        });
                        _this._columnsCount = ko.pureComputed(function () {
                            return _this._getLabelsCount(_this._pageWidth(), _this._horizontalPitch(), _this._labelWidth(), _this._leftMargin() + _this._rightMargin());
                        });
                        _this._pageHeight = ko.pureComputed(function () {
                            if (_this._selectedPaperSize().unit === _this.unit())
                                return _this._selectedPaperSize().height;
                            if (_this._selectedPaperSize().unit === GraphicsUnit.Millimeter)
                                return _this._selectedPaperSize().height * CustomizeLabelPage._CONVERSION_COEEFICIENT;
                            return _this._selectedPaperSize().height / CustomizeLabelPage._CONVERSION_COEEFICIENT;
                        });
                        _this._pageWidth = ko.pureComputed(function () {
                            if (_this._selectedPaperSize().unit === _this.unit())
                                return _this._selectedPaperSize().width;
                            if (_this._selectedPaperSize().unit === GraphicsUnit.Millimeter)
                                return _this._selectedPaperSize().width * CustomizeLabelPage._CONVERSION_COEEFICIENT;
                            return _this._selectedPaperSize().width / CustomizeLabelPage._CONVERSION_COEEFICIENT;
                        });
                        _this.paperKinds = function () { return (_this._labelData.paperKinds); };
                        _this._selectedPaperSize = ko.observable({ "id": 1, "enumId": 9, "name": "A4", "width": 210.0, "height": 297.0, "unit": 6, "isRollPaper": false });
                        _this.unit = ko.observable();
                        _this._stepUnit = ko.pureComputed(function () { return _this.unit() === GraphicsUnit.Inch ? 0.01 : 0.1; });
                        _this.labelWidth = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._labelWidth())); },
                            write: function (value) { return _this._labelWidth(value); }
                        });
                        _this.labelHeight = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._labelHeight())); },
                            write: function (value) { return _this._labelHeight(value); }
                        });
                        _this.horizontalPitch = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._horizontalPitch())); },
                            write: function (value) { return _this._horizontalPitch(value); }
                        });
                        _this.verticalPitch = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._verticalPitch())); },
                            write: function (value) { return _this._verticalPitch(value); }
                        });
                        _this.topMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._topMargin())); },
                            write: function (value) { return _this._topMargin(value); }
                        });
                        _this.leftMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._leftMargin())); },
                            write: function (value) { return _this._leftMargin(value); }
                        });
                        _this.rightMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._rightMargin())); },
                            write: function (value) { return _this._rightMargin(value); }
                        });
                        _this.bottomMargin = ko.computed({
                            read: function () { return parseFloat(_this._getFormattedValueInUnits(_this._bottomMargin())); },
                            write: function (value) { return _this._bottomMargin(value); }
                        });
                        _this._labelsCountText = ko.pureComputed(function () {
                            return _this._rowsCount() * _this._columnsCount() + " " + DevExpress.Analytics.Utils.getLocalization("labels on the page", "ASPxReportsStringId.ReportDesigner_Wizard_CustomizeLabelPage_LabelCountText") + ", " + _this._columnsCount() + " x " + _this._rowsCount();
                        });
                        _this._pageSizeText = ko.pureComputed(function () {
                            return CustomizeLabelPage._getPageSizeText(_this._pageWidth(), _this._pageHeight(), _this.unit());
                        });
                        _this._units = [
                            { text: DevExpress.Analytics.Utils.getLocalization("Inch", "AnalyticsCoreStringId.Wizard_Inch"), value: GraphicsUnit.Inch },
                            { text: DevExpress.Analytics.Utils.getLocalization("Millimeter", "AnalyticsCoreStringId.Wizard_Millimeter"), value: GraphicsUnit.Millimeter }
                        ];
                        _this._disposables.push(_this._rowsCount, _this._columnsCount, _this._pageHeight, _this._pageWidth);
                        _this._disposables.push(_this.unit.subscribe(function (newUnit) {
                            if (newUnit === GraphicsUnit.Inch) {
                                _this._labelWidth(_this._labelWidth() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._labelHeight(_this._labelHeight() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._horizontalPitch(_this._horizontalPitch() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._verticalPitch(_this._verticalPitch() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._topMargin(_this._topMargin() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._leftMargin(_this._leftMargin() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._rightMargin(_this._rightMargin() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._bottomMargin(_this._bottomMargin() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                            }
                            else if (newUnit === GraphicsUnit.Millimeter) {
                                _this._labelWidth(_this._labelWidth() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._labelHeight(_this._labelHeight() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._horizontalPitch(_this._horizontalPitch() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._verticalPitch(_this._verticalPitch() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._topMargin(_this._topMargin() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._leftMargin(_this._leftMargin() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._rightMargin(_this._rightMargin() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                                _this._bottomMargin(_this._bottomMargin() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                            }
                        }));
                        (_a = _this._disposables).push.apply(_a, DevExpress.Analytics.Wizard.Internal.subscribeProperties([
                            _this._labelWidth,
                            _this._labelHeight,
                            _this._horizontalPitch,
                            _this._verticalPitch,
                            _this._topMargin,
                            _this._leftMargin,
                            _this._rightMargin,
                            _this._bottomMargin,
                            _this.unit,
                            _this._selectedPaperSize
                        ], function () { return _this._onChange(); }));
                        _this._disposables.push(_this._stepUnit, _this.labelWidth, _this.labelHeight, _this.horizontalPitch, _this.verticalPitch, _this.topMargin, _this.leftMargin, _this.rightMargin, _this.bottomMargin, _this._labelsCountText, _this._pageSizeText);
                        return _this;
                    }
                    CustomizeLabelPage.prototype._getFormattedValueInUnits = function (value) {
                        return Internal.getFormattedValueInUnits(value, this.unit());
                    };
                    CustomizeLabelPage.prototype._getLabelsCount = function (paperDimentionInLabelUnit, labelPitch, labelWidth, margin) {
                        return Math.floor((paperDimentionInLabelUnit - margin + (labelPitch - labelWidth)) / labelPitch);
                    };
                    CustomizeLabelPage.prototype.canNext = function () {
                        return false;
                    };
                    CustomizeLabelPage.prototype.canFinish = function () {
                        return true;
                    };
                    CustomizeLabelPage.prototype.initialize = function (labelDetails) {
                        var _this = this;
                        Internal.initializeLabelReportWizardPromise();
                        return Internal.labelReportWizardPromise.done(function (labelData) {
                            _this._labelData = labelData;
                            _this._id(labelDetails.id);
                            _this.unit(labelDetails.unit);
                            _this._selectedPaperSize(DevExpress.Analytics.Internal.findFirstItemMatchesCondition(_this.paperKinds(), function (item) { return item.id === labelDetails.paperKindId; }));
                            _this._labelWidth(labelDetails.width);
                            _this._labelHeight(labelDetails.height);
                            _this._horizontalPitch(labelDetails.hPitch);
                            _this._verticalPitch(labelDetails.vPitch);
                            _this._topMargin(labelDetails.topMargin);
                            _this._leftMargin(labelDetails.leftMargin);
                            _this._rightMargin(labelDetails.rightMargin);
                            _this._bottomMargin(labelDetails.bottomMargin);
                        });
                    };
                    CustomizeLabelPage.prototype.commit = function () {
                        var labelDetails = {};
                        labelDetails.width = this._labelWidth();
                        labelDetails.height = this._labelHeight();
                        labelDetails.hPitch = this._horizontalPitch();
                        labelDetails.vPitch = this._verticalPitch();
                        labelDetails.topMargin = this._topMargin();
                        labelDetails.leftMargin = this._leftMargin();
                        labelDetails.rightMargin = this._rightMargin();
                        labelDetails.bottomMargin = this._bottomMargin();
                        labelDetails.unit = this.unit();
                        labelDetails.paperKindId = this._selectedPaperSize().id;
                        return $.Deferred().resolve(labelDetails).promise();
                    };
                    CustomizeLabelPage._getPageSizeText = function (width, height, unit) {
                        return Internal.getFormattedValueInUnits(width, unit) + " x " + Internal.getFormattedValueInUnits(height, unit) + (unit === GraphicsUnit.Inch ? " in" : " mm");
                    };
                    CustomizeLabelPage._CONVERSION_COEEFICIENT = Internal.CONVERSION_COEEFICIENT;
                    return CustomizeLabelPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.CustomizeLabelPage = CustomizeLabelPage;
                function _registerCustomizeLabelPage(factory) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.CustomizeLabelPage, {
                        setState: function (labelDetails, state) {
                            state.width = labelDetails.width;
                            state.height = labelDetails.height;
                            state.hPitch = labelDetails.hPitch;
                            state.vPitch = labelDetails.vPitch;
                            state.topMargin = labelDetails.topMargin;
                            state.leftMargin = labelDetails.leftMargin;
                            state.rightMargin = labelDetails.rightMargin;
                            state.bottomMargin = labelDetails.bottomMargin;
                            state.unit = labelDetails.unit;
                            state.paperKindId = labelDetails.paperKindId;
                        },
                        getState: function (state) {
                            return state.labelDetails;
                        },
                        resetState: function (state, defaultState) {
                            state.width = defaultState.width;
                            state.height = defaultState.height;
                            state.hPitch = defaultState.hPitch;
                            state.vPitch = defaultState.vPitch;
                            state.topMargin = defaultState.topMargin;
                            state.leftMargin = defaultState.leftMargin;
                            state.rightMargin = defaultState.rightMargin;
                            state.bottomMargin = defaultState.bottomMargin;
                            state.unit = defaultState.unit;
                            state.paperKindId = defaultState.paperKindId;
                        },
                        create: function () {
                            return new CustomizeLabelPage();
                        },
                        template: "dxrd-page-customizeLabel",
                        description: DevExpress.Analytics.Utils.getLocalization("Choose the page size and customize the label's parameters.", "ASPxReportsStringId.ReportDesigner_Wizard_LabelPageSize")
                    });
                }
                Wizard._registerCustomizeLabelPage = _registerCustomizeLabelPage;
            })(Wizard = Designer.Wizard || (Designer.Wizard = {}));
            (function (Internal) {
                Internal.labelReportWizardPromise = null;
                function initializeLabelReportWizardPromise() {
                    if (!Designer.Internal.labelReportWizardPromise) {
                        var $def = $.Deferred();
                        Reporting.Designer.Internal.ReportWizardService.getLabelReportWizardData().done(function (data) { return $def.resolve(JSON.parse(data)); });
                        Designer.Internal.labelReportWizardPromise = $def.promise();
                    }
                }
                Internal.initializeLabelReportWizardPromise = initializeLabelReportWizardPromise;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Wizard) {
                var SelectLabelTypePage = (function (_super) {
                    __extends(SelectLabelTypePage, _super);
                    function SelectLabelTypePage() {
                        var _this = _super.call(this) || this;
                        _this._selectedPaperSize = ko.computed({
                            read: function () {
                                return DevExpress.Analytics.Internal.findFirstItemMatchesCondition(_this._labelData.paperKinds, function (item) { return item.id === _this._selectedLabelDetails().paperKindId; });
                            },
                            deferEvaluation: true
                        });
                        _this._selectedLabelProduct = ko.observable();
                        _this._selectedLabelDetails = ko.observable();
                        _this._labelDetails = ko.observable();
                        _this._width = ko.pureComputed(function () { return Internal.getFormattedValueInUnits(_this._selectedLabelDetails().width, _this._selectedPaperSize().unit) + (_this._selectedPaperSize().unit === Wizard.GraphicsUnit.Inch ? " in" : " mm"); });
                        _this._height = ko.pureComputed(function () { return Internal.getFormattedValueInUnits(_this._selectedLabelDetails().height, _this._selectedPaperSize().unit) + (_this._selectedPaperSize().unit === Wizard.GraphicsUnit.Inch ? " in" : " mm"); });
                        _this._paperType = ko.pureComputed(function () { return _this._selectedPaperSize().name; });
                        _this._pageSizeText = ko.pureComputed(function () { return Internal.getFormattedValueInUnits(_this._selectedPaperSize().width, _this._selectedPaperSize().unit) + " x " + Internal.getFormattedValueInUnits(_this._selectedPaperSize().height, _this._selectedPaperSize().unit) + (_this._selectedPaperSize().unit === Wizard.GraphicsUnit.Inch ? " in" : " mm"); });
                        _this._disposables.push(_this._selectedLabelProduct.subscribe(function (newProductsType) {
                            var labelDetails = _this._labelData.labelDetails.filter(function (item) { return item.productId === newProductsType.id; });
                            _this._selectedLabelDetails(labelDetails[0]);
                            _this._labelDetails({
                                store: labelDetails,
                                paginate: labelDetails.length > 200,
                                pageSize: 100
                            });
                        }));
                        _this._disposables.push(_this._selectedLabelDetails.subscribe(function () { return _this._onChange(); }));
                        _this._disposables.push(_this._selectedPaperSize, _this._width, _this._height, _this._paperType, _this._pageSizeText);
                        return _this;
                    }
                    SelectLabelTypePage.prototype.initialize = function (state) {
                        var _this = this;
                        Internal.initializeLabelReportWizardPromise();
                        return Internal.labelReportWizardPromise.done(function (labelData) {
                            _this._labelData = labelData;
                            if (state.labelDetails) {
                                if (!_this._selectedLabelProduct() || _this._selectedLabelProduct().id !== state.labelDetails.productId) {
                                    _this._selectedLabelProduct(DevExpress.Analytics.Internal.findFirstItemMatchesCondition(_this._labelData.labelProducts, function (item) { return item.id === state.labelDetails.productId; }));
                                }
                                _this._selectedLabelDetails(DevExpress.Analytics.Internal.findFirstItemMatchesCondition(_this._labelData.labelDetails, function (item) { return item.id === state.labelDetails.id; }));
                            }
                            else {
                                _this._selectedLabelProduct(_this._labelData.labelProducts[0]);
                            }
                        });
                    };
                    SelectLabelTypePage.prototype.canNext = function () {
                        return !!this._selectedLabelDetails();
                    };
                    SelectLabelTypePage.prototype.canFinish = function () {
                        return !!this._selectedLabelDetails();
                    };
                    SelectLabelTypePage.prototype.commit = function () {
                        var labelDetails = this._selectedLabelDetails() ? $.extend({}, this._selectedLabelDetails()) : null;
                        return $.Deferred().resolve({ labelDetails: labelDetails }).promise();
                    };
                    return SelectLabelTypePage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.SelectLabelTypePage = SelectLabelTypePage;
                function _registerSelectLabelTypePage(factory) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.SelectLabelTypePage, {
                        setState: function (data, state) {
                            if (data && (!state.labelDetails || data.labelDetails.id !== state.labelDetails.id))
                                state.labelDetails = data.labelDetails;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.labelDetails = defaultState.labelDetails;
                        },
                        create: function () {
                            return new SelectLabelTypePage();
                        },
                        template: "dxrd-page-selectPredefinedLabels",
                        description: DevExpress.Analytics.Utils.getLocalization("Select the label type.", "ASPxReportsStringId.ReportDesigner_Wizard_SelectLabelType")
                    });
                }
                Wizard._registerSelectLabelTypePage = _registerSelectLabelTypePage;
                function _convertToStateDataSource(dataSource) {
                    var objStorageItem = new DevExpress.Analytics.Utils.ModelSerializer().serialize(dataSource.data);
                    return JSON.stringify($.extend(true, {}, dataSource, { data: JSON.stringify(objStorageItem) }));
                }
                Wizard._convertToStateDataSource = _convertToStateDataSource;
                function _restoreDataSourceFromState(dataSource) {
                    var dataSource = JSON.parse(dataSource);
                    if (dataSource)
                        dataSource.data = Designer.Data.ObjectStorageItem.createNew(JSON.parse(dataSource.data));
                    return dataSource;
                }
                Wizard._restoreDataSourceFromState = _restoreDataSourceFromState;
                var ChooseAvailableDataSourcePage = (function (_super) {
                    __extends(ChooseAvailableDataSourcePage, _super);
                    function ChooseAvailableDataSourcePage() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    ChooseAvailableDataSourcePage.prototype.commit = function () {
                        return $.Deferred().resolve({
                            sqlDataSourceWizard: {},
                            jsonDataSourceWizard: {},
                            dataSource: this.selectedOperation().createNew ? null : _convertToStateDataSource(this.selectedItems()[0])
                        }).promise();
                    };
                    ChooseAvailableDataSourcePage.prototype._getSelectedItem = function (state) {
                        var availableDataSources = this.items() || [];
                        if (state.dataSource) {
                            var dataSource = _restoreDataSourceFromState(state.dataSource);
                            return availableDataSources.filter(function (x) { return x.id === dataSource.id || x.ref === dataSource.ref; })[0];
                        }
                        else if (availableDataSources.length === 0) {
                            return null;
                        }
                        else {
                            return availableDataSources[0];
                        }
                    };
                    Object.defineProperty(ChooseAvailableDataSourcePage.prototype, "createNewOperationText", {
                        get: function () {
                            return DevExpress.Analytics.Utils.getLocalization("No, I'd like to create a new data source", "AnalyticsCoreStringId.Wizard_CreateNewDataSource");
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return ChooseAvailableDataSourcePage;
                }(DevExpress.Analytics.Wizard.ChooseAvailableItemPage));
                Wizard.ChooseAvailableDataSourcePage = ChooseAvailableDataSourcePage;
                function _registerChooseAvailableDataSourcePage(factory, reportWizardOptions) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.ChooseAvailableDataSourcePage, {
                        setState: function (data, state) {
                            state.dataSource = data.dataSource;
                            state.sqlDataSourceWizard = data.sqlDataSourceWizard;
                            state.jsonDataSourceWizard = data.jsonDataSourceWizard;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.sqlDataSourceWizard = defaultState.sqlDataSourceWizard;
                            state.jsonDataSourceWizard = defaultState.jsonDataSourceWizard;
                            state.dataSource = defaultState.dataSource;
                        },
                        create: function () {
                            return new ChooseAvailableDataSourcePage(reportWizardOptions.dataSources, reportWizardOptions.jsonDataSourceAvailable || reportWizardOptions.sqlDataSourceAvailable);
                        },
                        template: "dxrd-page-selectitems",
                        description: DevExpress.Analytics.Utils.getLocalization("Do you want to use an existing data source?", "ASPxReportsStringId.ReportDesigner_Wizard_UseExisting_DataSource")
                    });
                }
                Wizard._registerChooseAvailableDataSourcePage = _registerChooseAvailableDataSourcePage;
                var SelectDataMembersPage = (function (_super) {
                    __extends(SelectDataMembersPage, _super);
                    function SelectDataMembersPage(_fieldListCallBack, _hideDataMemberSubItems) {
                        if (_hideDataMemberSubItems === void 0) { _hideDataMemberSubItems = false; }
                        var _this = _super.call(this) || this;
                        _this._fieldListCallBack = _fieldListCallBack;
                        _this._hideDataMemberSubItems = _hideDataMemberSubItems;
                        _this._rootItems = ko.observableArray([]);
                        _this._dataMemberSelectedPath = ko.observable(null);
                        _this._fieldSelectedPath = ko.observable(null);
                        _this._checkedDataMembers = ko.observableArray([]);
                        _this._checkedFields = ko.observableArray([]);
                        _this._showDataSource = false;
                        _this._afterCheckToggled = function (node) {
                            if (!DevExpress.Analytics.Internal.isList(node))
                                return;
                            if (!node.unChecked()) {
                                if (_this._checkedDataMembers.indexOf(node) === -1) {
                                    if (!_this._multiSelectMode) {
                                        _this._checkedDataMembers()[0] && _this._checkedDataMembers()[0].setChecked(false);
                                        _this._checkedDataMembers([node]);
                                    }
                                    else {
                                        _this._checkedDataMembers.push(node);
                                    }
                                    _this._fieldSelectedPath(node.path);
                                }
                            }
                            else
                                _this._checkedDataMembers.remove(node);
                            _this._onChange();
                        };
                        _this._afterCheckToggledFields = function (node) {
                            _this._processNode(node);
                            _this._onChange();
                        };
                        _this._createMasterDetailTreeNode = function (item, isChecked, path) {
                            return new DevExpress.Analytics.Wizard.Internal.DataMemberTreeNode(item.name, item.displayName, item.specifics, isChecked, path, _this._afterCheckToggledFields);
                        };
                        _this._createMasterDetailFirstTabTreeNode = function (item, isChecked, path) {
                            var checked = isChecked || (_this._showDataSource ? [_this.dataSourcePath, _this.initialFullDataMember].join(".") : _this.initialFullDataMember) === path;
                            return new Internal.DataMemberCustomCheckedTreeNode(item.name, item.displayName, item.specifics, checked, path, _this._afterCheckToggled);
                        };
                        _this._createMasterDetailLeafTreeNode = function (item, isChecked, path) {
                            return new DevExpress.Analytics.Wizard.Internal.FieldTreeNode(item.name, item.displayName, item.specifics, isChecked, path, _this._afterCheckToggledFields);
                        };
                        _this._showFirstLevelDataMembers = ko.observable(false);
                        _this._multiSelectMode = true;
                        _this._selectDataMembersCaption = DevExpress.Analytics.Utils.getLocalization('Select data members', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_SelectDataMembers');
                        _this._selectDataFieldsCaption = DevExpress.Analytics.Utils.getLocalization('Select data fields', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_SelectDataFields');
                        var fieldListProvider = new DevExpress.Analytics.Internal.FieldListProvider(_this._wrapFieldListCallback(_this._fieldListCallBack), ko.observableArray([]));
                        _this._disposables.push(_this._dataMemberItemsProvider = new DevExpress.Analytics.Wizard.Internal.TreeNodeItemsProvider(fieldListProvider, _this._rootItems, _this._createMasterDetailFirstTabTreeNode, _this._createMasterDetailLeafTreeNode));
                        _this._disposables.push(_this._fieldMemberItemsProvider = new DevExpress.Analytics.Wizard.Internal.TreeNodeItemsProvider(fieldListProvider, _this._rootItems, _this._createMasterDetailTreeNode, _this._createMasterDetailLeafTreeNode));
                        _this._availableFieldsController = new Internal.AvailableFieldsTreeListController(_this._checkedDataMembers);
                        _this._disposables.push(ko.computed(function () {
                            var item = _this._availableFieldsController.selectedItem;
                            item && item.collapsed.peek() && item.toggleCollapsed();
                        }));
                        _this._dataMemberFieldListModel = {
                            itemsProvider: _this._dataMemberItemsProvider,
                            selectedPath: _this._dataMemberSelectedPath,
                            treeListController: new Internal.MasterDetailTreeListController(_this._showFirstLevelDataMembers),
                            templateName: "dxrd-treelist-with-checkbox"
                        };
                        _this._fieldMemberFieldListModel = {
                            itemsProvider: _this._fieldMemberItemsProvider,
                            selectedPath: _this._fieldSelectedPath,
                            treeListController: _this._availableFieldsController,
                            templateName: "dxrd-treelist-with-checkbox"
                        };
                        return _this;
                    }
                    SelectDataMembersPage.prototype._wrapFieldListCallback = function (itemsCallback) {
                        var _this = this;
                        return function (pathRequest) {
                            if (_this._hideDataMemberSubItems) {
                                return $.Deferred().resolve([]).promise();
                            }
                            else {
                                return itemsCallback(new DevExpress.Analytics.Utils.PathRequest(_this._showDataSource ? pathRequest.fullPath : _this.dataSourcePath + '.' + pathRequest.fullPath), _this._dataSource);
                            }
                        };
                    };
                    Object.defineProperty(SelectDataMembersPage.prototype, "dataSourcePath", {
                        get: function () {
                            return (this._dataSource.id || this._dataSource.ref);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SelectDataMembersPage.prototype.getDataMemberSelectedPath = function (state) {
                        if (state.masterDetailInfoCollection.length > 0)
                            return null;
                        return state.dataMember;
                    };
                    SelectDataMembersPage.prototype._beginInternal = function (state) {
                        var _this = this;
                        if (state.reportType === Wizard.ReportType.Vertical) {
                            this._multiSelectMode = false;
                            this._showFirstLevelDataMembers(true);
                        }
                        this._dataSource = _restoreDataSourceFromState(state.newDataSource || state.dataSource);
                        var dataMember = this.getDataMemberSelectedPath(state);
                        this.initialFullDataMember = state.dataMember;
                        if (state.masterDetailInfoCollection.length === 0) {
                            return this._fieldListCallBack(new DevExpress.Analytics.Utils.PathRequest(this.dataSourcePath), this._dataSource)
                                .done(function (fields) {
                                _this._fieldSelectedPath(null);
                                _this._checkedDataMembers([]);
                                _this._showDataSource = false;
                                if (Designer.Internal.includeNonListItem(fields)) {
                                    _this._dataMemberSelectedPath([_this.dataSourcePath, dataMember].join("."));
                                    _this._showDataSource = true;
                                    _this._rootItems([{
                                            name: _this.dataSourcePath,
                                            displayName: _this._dataSource.name,
                                            specifics: "List"
                                        }]);
                                }
                                else {
                                    _this._dataMemberSelectedPath(dataMember);
                                    _this._rootItems(fields.map(function (value) {
                                        return {
                                            name: value.name,
                                            displayName: value.displayName || value.name,
                                            specifics: "List"
                                        };
                                    }));
                                }
                            });
                        }
                        else {
                            return $.Deferred().resolve().promise();
                        }
                    };
                    SelectDataMembersPage.prototype._processFields = function (node) {
                        if (!node.unChecked()) {
                            if (this._checkedFields.indexOf(node) === -1) {
                                this._checkedFields.push(node);
                            }
                        }
                        else
                            this._checkedFields.remove(node);
                        this._onChange();
                    };
                    SelectDataMembersPage.prototype._processNode = function (node) {
                        var _this = this;
                        if (DevExpress.Analytics.Internal.isList(node)) {
                            node.children().forEach(function (item) {
                                if (DevExpress.Analytics.Internal.isList(item)) {
                                    _this._processNode(item);
                                }
                                else {
                                    _this._processFields(item);
                                }
                            });
                        }
                        else {
                            this._processFields(node);
                        }
                    };
                    SelectDataMembersPage.prototype.canNext = function () {
                        return this._fieldMemberItemsProvider.hasCheckedItems();
                    };
                    SelectDataMembersPage.prototype.canFinish = function () {
                        return true;
                    };
                    SelectDataMembersPage.prototype.selectDataMember = function (dataMemberPath) {
                        var _this = this;
                        this._dataMemberItemsProvider.selectItemByPath(dataMemberPath).always(function () { return _this._onChange(); });
                    };
                    SelectDataMembersPage.prototype.selectAllDataMembers = function () {
                        var _this = this;
                        this._dataMemberItemsProvider.selectAllItems(false).always(function () { return _this._onChange(); });
                    };
                    SelectDataMembersPage.prototype.selectDataField = function (dataFieldPath) {
                        var _this = this;
                        var pathParts = dataFieldPath.split('.');
                        pathParts.pop();
                        this._dataMemberItemsProvider.selectItemByPath(pathParts.join('.')).always(function () {
                            return _this._fieldMemberItemsProvider.selectItemByPath(dataFieldPath).always(function () { return _this._onChange(); });
                        });
                    };
                    SelectDataMembersPage.prototype.selectDataFields = function (dataMemberPath) {
                        var _this = this;
                        this._dataMemberItemsProvider.selectItemByPath(dataMemberPath).always(function () {
                            _this._fieldMemberItemsProvider.selectItemsByPath(dataMemberPath).always(function () { return _this._onChange(); });
                        });
                    };
                    SelectDataMembersPage.prototype.selectAllDataFields = function () {
                        var _this = this;
                        this._dataMemberItemsProvider.selectAllItems(false).always(function () {
                            return _this._fieldMemberItemsProvider.selectAllItems().always(function () { return _this._onChange(); });
                        });
                    };
                    SelectDataMembersPage.prototype.initialize = function (state) {
                        return this._beginInternal(state);
                    };
                    SelectDataMembersPage.prototype._haveCheckedFields = function () {
                        return this._checkedFields().length !== 0;
                    };
                    SelectDataMembersPage.prototype.commit = function () {
                        var _this = this;
                        return $.Deferred().resolve({
                            masterDetailInfoCollection: (this._fieldMemberItemsProvider.getRootItems().filter(function (item) { return item.isList && !item.isComplex; }).map(function (item) {
                                if (_this._showDataSource)
                                    item = $.extend({}, item, { name: "" });
                                return new Internal.MasterDetailQueryInfo(item);
                            }))
                        }).promise();
                    };
                    return SelectDataMembersPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.SelectDataMembersPage = SelectDataMembersPage;
                function _registerSelectDataMembersPage(factory, reportWizardOptions, pageId) {
                    if (pageId === void 0) { pageId = Wizard.ReportWizardPageId.SelectDataMembersPage; }
                    factory.registerMetadata(pageId, {
                        create: function () {
                            return new SelectDataMembersPage(reportWizardOptions.callbacks.fieldListsCallback, reportWizardOptions.hideDataMemberSubItems);
                        },
                        description: DevExpress.Analytics.Utils.getLocalization("Select data members to assign to the report and its detail reports and fields to display in these reports.", "ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_Description"),
                        template: "dxrd-page-masterdetail-select-reportdata",
                        getState: function (state) { return state; },
                        setState: function (data, state) { return state.masterDetailInfoCollection = data.masterDetailInfoCollection; },
                        resetState: function (state, defaultState) { return state.masterDetailInfoCollection = defaultState.masterDetailInfoCollection; }
                    });
                }
                Wizard._registerSelectDataMembersPage = _registerSelectDataMembersPage;
                function _fillTreeQueries(reportTree, queries, level, parentDisplayName) {
                    var lvl = level;
                    queries.forEach(function (query) {
                        if (query.checked !== false) {
                            var fields = query.fields.filter(function (field) { return field.checked; }).map((function (value) { return { name: value.name, displayName: value.displayName, specifics: value.specifics }; }));
                            var name = query.displayName || query.name;
                            var displayName = parentDisplayName ? [parentDisplayName, name].join('.') : name;
                            reportTree.push({
                                name: name,
                                displayName: displayName,
                                path: query.path,
                                fields: fields,
                                isList: true,
                                level: level
                            });
                            if (query.relations.length > 0) {
                                var newLvl = lvl + 1;
                                _fillTreeQueries(reportTree, query.relations, newLvl, displayName);
                            }
                        }
                    });
                    return reportTree;
                }
                Wizard._fillTreeQueries = _fillTreeQueries;
                var AddGroupingLevelPage = (function (_super) {
                    __extends(AddGroupingLevelPage, _super);
                    function AddGroupingLevelPage() {
                        var _this = _super.call(this) || this;
                        _this._availableColumns = {};
                        _this._groupingLevels = {};
                        _this._masterDetailGroups = {};
                        _this._addNewGroup = function () {
                            if (_this._isCreateGroupEnabled()) {
                                _this._currentGroups().add({ fields: ko.observableArray([_this._currentFields().activeItem]) });
                                _this._currentFields().removeActiveItem();
                                _this._onChange();
                            }
                        };
                        _this._appendFieldsToGroup = function () {
                            if (_this._isAppendToGroupEnabled()) {
                                _this._currentGroups().activeItem.fields.push(_this._currentFields().activeItem);
                                _this._currentFields().removeActiveItem();
                                _this._onChange();
                            }
                        };
                        _this._removeGroup = function () {
                            if (_this._isRemoveGroupEnabled()) {
                                _this._currentFields().addRange(_this._currentGroups().activeItem.fields());
                                _this._currentGroups().removeActiveItem();
                                _this._onChange();
                            }
                        };
                        _this._moveUp = function () {
                            !!_this._currentGroups() && _this._currentGroups().moveUp();
                            _this._onChange();
                        };
                        _this._moveDown = function () {
                            !!_this._currentGroups() && _this._currentGroups().moveDown();
                            _this._onChange();
                        };
                        _this._fieldDblClick = function (field) {
                            _this._currentFields().activeItem = field;
                            _this._addNewGroup();
                        };
                        _this._fieldClick = function (e) {
                            _this._currentFields().activeItem = e.itemData;
                        };
                        _this._groupDblClick = function (group) {
                            _this._currentGroups().activeItem = group;
                            _this._removeGroup();
                        };
                        _this._groupClick = function (e) {
                            _this._currentGroups().activeItem = e.itemData;
                        };
                        _this._currentPath = ko.observable("");
                        _this._currentFields = ko.observable(null);
                        _this._currentGroups = ko.observable(null);
                        _this._fieldCaption = DevExpress.Analytics.Utils.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields");
                        _this._groupCaption = DevExpress.Analytics.Utils.getLocalization("Groups", "ASPxReportsStringId.ReportDesigner_Groups");
                        _this._reportTree = ko.observableArray([]);
                        _this._disposables.push(_this._currentPath.subscribe(function (newPath) {
                            _this._currentGroups(_this._groupingLevels[newPath]);
                            _this._currentFields(_this._availableColumns[newPath]);
                        }));
                        return _this;
                    }
                    AddGroupingLevelPage.prototype._setData = function (queries) {
                        var _this = this;
                        queries.forEach(function (query) {
                            if (!_this._groupingLevels[query.path] || !_this._availableColumns[query.path]) {
                                _this._availableColumns[query.path] = new Internal.ListViewModel();
                                _this._groupingLevels[query.path] = new Internal.ListViewModel();
                            }
                            if (!_this._masterDetailGroups[query.path]) {
                                _this._masterDetailGroups[query.path] = [];
                            }
                            var fields = ko.observableArray(query.fields.map(function (value) { return value.displayName; }));
                            _this._groupingLevels[query.path].setItems(_this._masterDetailGroups[query.path].map(function (value) {
                                fields.removeAll(value);
                                return { fields: ko.observableArray(value) };
                            }));
                            _this._availableColumns[query.path].setItems(fields());
                        });
                    };
                    AddGroupingLevelPage.prototype.canFinish = function () {
                        return true;
                    };
                    AddGroupingLevelPage.prototype._isCreateGroupEnabled = function () {
                        return !!this._currentFields() && !!this._currentFields().activeItem;
                    };
                    ;
                    AddGroupingLevelPage.prototype._isAppendToGroupEnabled = function () {
                        return !!this._currentFields() && this._currentFields().activeItem && !!this._currentGroups() && this._currentGroups().activeItem && this._currentGroups().activeItem.fields().length > 0;
                    };
                    ;
                    AddGroupingLevelPage.prototype._isRemoveGroupEnabled = function () {
                        return !!this._currentGroups() && this._currentGroups().activeItem && this._currentGroups().activeItem.fields().length > 0;
                    };
                    ;
                    AddGroupingLevelPage.prototype._isMoveUpEnabled = function () {
                        return !!this._currentGroups() && this._currentGroups().isMoveUpEnabled();
                    };
                    ;
                    AddGroupingLevelPage.prototype._isMoveDownEnabled = function () {
                        return !!this._currentGroups() && this._currentGroups().isMoveDownEnabled();
                    };
                    ;
                    AddGroupingLevelPage.prototype.initialize = function (state) {
                        this._reportTree(_fillTreeQueries([], state.masterDetailInfoCollection, 0).map(function (item) { return $.extend(true, {}, item); }));
                        this._masterDetailGroups = $.extend(true, {}, state.masterDetailGroups);
                        var firstPath = this._reportTree()[0] && this._reportTree()[0].path;
                        if (firstPath) {
                            this._setData(this._reportTree());
                            this._currentPath(firstPath);
                            if (firstPath === this._currentPath.peek())
                                this._currentPath.notifySubscribers(firstPath);
                        }
                        return $.Deferred().resolve().promise();
                    };
                    AddGroupingLevelPage.prototype.commit = function () {
                        var _this = this;
                        var masterDetailGroups = {};
                        var masterDetailSummaryOptionsColumns = {};
                        this._reportTree().forEach(function (query) {
                            if (_this._groupingLevels[query.path].items.length > 0) {
                                masterDetailGroups[query.path] = _this._groupingLevels[query.path].items.map(function (item) {
                                    return item.fields().map(function (displayName) { return DevExpress.Analytics.Internal.getFirstItemByPropertyValue(query.fields, "displayName", displayName).name; });
                                });
                            }
                            if (_this._availableColumns[query.path]) {
                                var summaryColumns = [];
                                masterDetailSummaryOptionsColumns[query.path] = [];
                                _this._availableColumns[query.path].items.forEach(function (fieldName) {
                                    var field = DevExpress.Analytics.Internal.getFirstItemByPropertyValue(query.fields, "displayName", fieldName);
                                    if (field.specifics && ["integer", "float", "date"].indexOf(field.specifics.toLowerCase()) > -1) {
                                        summaryColumns.push(field);
                                    }
                                });
                                summaryColumns.sort(function (a, b) { return a.name.localeCompare(b.name); });
                                if (summaryColumns.length === 0)
                                    delete masterDetailSummaryOptionsColumns[query.path];
                                else
                                    masterDetailSummaryOptionsColumns[query.path] = summaryColumns;
                            }
                        });
                        return $.Deferred().resolve({
                            masterDetailGroups: masterDetailGroups,
                            masterDetailSummaryOptionsColumns: masterDetailSummaryOptionsColumns
                        }).promise();
                    };
                    return AddGroupingLevelPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.AddGroupingLevelPage = AddGroupingLevelPage;
                function _registerAddGroupingLevelPage(factory) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.AddGroupingLevelPage, {
                        create: function () {
                            return new AddGroupingLevelPage();
                        },
                        getState: function (state) { return state; },
                        setState: function (data, state) {
                            state.masterDetailGroups = data.masterDetailGroups;
                            state.masterDetailSummaryOptionsColumns = data.masterDetailSummaryOptionsColumns;
                        },
                        description: DevExpress.Analytics.Utils.getLocalization("Group data in the selected reports. You can specify one or more fields for each group.", "ReportBoxDesignerStringId.Wizard_MasterDetailAddGroupingLevel_Description"),
                        template: "dxrd-page-masterdetail-groups",
                        resetState: function (state, defaultState) {
                            state.masterDetailGroups = defaultState.masterDetailGroups;
                            state.masterDetailSummaryOptionsColumns = defaultState.masterDetailSummaryOptionsColumns;
                        }
                    });
                }
                Wizard._registerAddGroupingLevelPage = _registerAddGroupingLevelPage;
                var _GroupsFieldStore = (function (_super) {
                    __extends(_GroupsFieldStore, _super);
                    function _GroupsFieldStore(query, _onChange) {
                        var _this = _super.call(this) || this;
                        _this._onChange = _onChange;
                        _this.groups = ko.observableArray();
                        _this.addGroupText = function () { return DevExpress.Analytics.Utils.getLocalization("Add Group", "ASPxReportsStringId.ReportDesigner_Wizard_AddGroup_Text"); };
                        _this.path = query.path;
                        _this.displayName = query.displayName;
                        _this.dataSource = ko.observableArray(query.fields.map(function (x) {
                            return $.extend(true, {}, x, { visible: ko.observable(true) });
                        }));
                        return _this;
                    }
                    _GroupsFieldStore.prototype.dispose = function () {
                        this.disposeObservableArray(this.groups);
                    };
                    _GroupsFieldStore.prototype.getSelectedFieldsFlat = function () {
                        return [].concat.apply([], [[]].concat(this.getSelectedFields()));
                    };
                    _GroupsFieldStore.prototype.getSelectedFields = function () {
                        return this.groups().filter(function (x) { return x.fields().length > 0; }).map(function (x) { return x.fields(); });
                    };
                    _GroupsFieldStore.prototype.isCreateGroupEnabled = function () {
                        var groupsWithoutFields = this.groups().filter(function (x) { return x.fields().length === 0; }).length;
                        var newAvailableGroupsCount = this.dataSource().length - this.getSelectedFieldsFlat().length;
                        return newAvailableGroupsCount - groupsWithoutFields > 0;
                    };
                    _GroupsFieldStore.prototype.add = function () {
                        this.groups.push(new _GroupField(this, this._onChange));
                        this._onChange();
                    };
                    _GroupsFieldStore.prototype.remove = function (index) {
                        this.groups()[index].dispose();
                        this.groups.splice(index, 1);
                        this._onChange();
                    };
                    _GroupsFieldStore.prototype.moveUpDisabled = function (index) {
                        return index === 0;
                    };
                    _GroupsFieldStore.prototype.moveDownDisabled = function (index) {
                        return index === this.groups().length - 1;
                    };
                    _GroupsFieldStore.prototype.moveup = function (index) {
                        var groups = this.groups();
                        groups.splice(index - 1, 2, groups[index], groups[index - 1]);
                        this.groups.valueHasMutated();
                        this._onChange();
                    };
                    _GroupsFieldStore.prototype.movedown = function (index) {
                        var groups = this.groups();
                        groups.splice(index, 2, groups[index + 1], groups[index]);
                        this.groups.valueHasMutated();
                        this._onChange();
                    };
                    return _GroupsFieldStore;
                }(DevExpress.Analytics.Utils.Disposable));
                Wizard._GroupsFieldStore = _GroupsFieldStore;
                var _GroupField = (function (_super) {
                    __extends(_GroupField, _super);
                    function _GroupField(_store, _onChange) {
                        var _this = _super.call(this) || this;
                        _this._store = _store;
                        _this._onChange = _onChange;
                        _this.fields = ko.observableArray();
                        _this._disposables.push(_this.fields.subscribe(function () { return _this._onChange(); }));
                        var needRefresh = true;
                        _this.value = {
                            dataSource: _this._store.dataSource,
                            showDropDownButton: true,
                            searchEnabled: true,
                            value: _this.fields,
                            multiline: false,
                            showSelectionControls: true,
                            valueExpr: "name",
                            displayExpr: "displayName",
                            searchExpr: ["displayName"],
                            onOpened: function (e) {
                                _this._updateDataSource();
                                if (e.component._popup) {
                                    var _content = e.component.content();
                                    var _selectAll = _content.find(".dx-list-select-all");
                                    var _popupHeight = _content.height();
                                    _selectAll.css("display", "none");
                                    _content.height(_popupHeight - _selectAll.outerHeight());
                                    e.component._popup.refreshPosition();
                                }
                                if (needRefresh) {
                                    e.component._refresh();
                                    needRefresh = false;
                                }
                            },
                            onClosed: function (e) {
                                _this._store.dataSource().forEach(function (x) { return x.visible(true); });
                                needRefresh = true;
                            },
                        };
                        return _this;
                    }
                    _GroupField.prototype._updateDataSource = function () {
                        var _this = this;
                        this._store.dataSource().forEach(function (item) {
                            item.visible(!_this._store.groups.peek().some(function (group) {
                                return group !== _this && group.fields().indexOf(item.name) !== -1;
                            }));
                        });
                    };
                    _GroupField.prototype.getOptions = function (options) {
                        return DevExpress.Analytics.Internal.extend(this.value, { dropDownOptions: options.dropDownOptions });
                    };
                    return _GroupField;
                }(DevExpress.Analytics.Utils.Disposable));
                Wizard._GroupField = _GroupField;
                var AddGroupFieldsPage = (function (_super) {
                    __extends(AddGroupFieldsPage, _super);
                    function AddGroupFieldsPage() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this._reportTree = [];
                        _this._groupInfos = ko.observableArray();
                        return _this;
                    }
                    AddGroupFieldsPage.prototype.dispose = function () {
                        this.disposeObservableArray(this._groupInfos);
                    };
                    AddGroupFieldsPage.prototype.canFinish = function () {
                        return true;
                    };
                    AddGroupFieldsPage.prototype._mergeGroups = function (newGroups) {
                        var currentGroups = this._groupInfos();
                        newGroups.forEach(function (groupInfo) {
                            var currentGroup = currentGroups.filter(function (group) { return group.displayName === groupInfo.displayName; })[0];
                            if (!currentGroup || currentGroup.groups().length === 0)
                                return;
                            currentGroup.groups().filter(function (group) { return group.fields().length > 0; }).forEach(function (group) {
                                var availabelFields = groupInfo.dataSource().filter(function (field) { return group.fields().some(function (x) { return x === field.name; }); });
                                if (availabelFields.length > 0) {
                                    groupInfo.add();
                                    groupInfo.groups()[groupInfo.groups().length - 1].fields(availabelFields.map(function (x) { return x.name; }));
                                }
                            });
                        });
                        this.disposeObservableArray(this._groupInfos);
                    };
                    AddGroupFieldsPage.prototype.initialize = function (state) {
                        var _this = this;
                        this._reportTree = _fillTreeQueries([], state.masterDetailInfoCollection, 0).map(function (item) { return $.extend(true, {}, item); });
                        var newGroups = this._reportTree.filter(function (x) { return x.fields.length > 0; }).map(function (x) { return new _GroupsFieldStore(x, _this._onChange); });
                        this._mergeGroups(newGroups);
                        this._groupInfos(newGroups);
                        return $.Deferred().resolve().promise();
                    };
                    AddGroupFieldsPage.prototype.commit = function () {
                        var masterDetailGroups = {};
                        var masterDetailSummaryOptionsColumns = {};
                        this._groupInfos().forEach(function (groupInfo) {
                            var selectedFields = groupInfo.getSelectedFields();
                            if (selectedFields.length > 0) {
                                masterDetailGroups[groupInfo.path] = selectedFields;
                            }
                        });
                        this._reportTree.forEach(function (query) {
                            var availableFields = query.fields.filter(function (field) { return field.specifics && ["integer", "float", "date", "bool"].indexOf(field.specifics.toLowerCase()) > -1; });
                            if (masterDetailGroups[query.path]) {
                                availableFields = availableFields.filter(function (field) { return masterDetailGroups[query.path].some(function (items) { return items.indexOf(field.name) === -1; }); });
                            }
                            if (availableFields.length > 0) {
                                masterDetailSummaryOptionsColumns[query.path] = availableFields;
                            }
                        });
                        return $.Deferred().resolve({
                            masterDetailGroups: masterDetailGroups,
                            masterDetailSummaryOptionsColumns: masterDetailSummaryOptionsColumns
                        }).promise();
                    };
                    return AddGroupFieldsPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.AddGroupFieldsPage = AddGroupFieldsPage;
                function _registerAddGroupFieldsPage(factory) {
                    _registerAddGroupingLevelPage(factory);
                    var meta = factory.getMetadata(Wizard.ReportWizardPageId.AddGroupingLevelPage);
                    meta.create = function () {
                        return new AddGroupFieldsPage();
                    };
                    meta["disabledText"] = DevExpress.Analytics.Utils.getLocalization("To add groups to the report, select data fields.", "ASPxReportsStringId.ReportDesigner_Wizard_AddGroupFields_Placeholder");
                    meta.template = "dxrd-page-masterdetail-groups-section";
                }
                Wizard._registerAddGroupFieldsPage = _registerAddGroupFieldsPage;
                var ChooseSummaryOptionsPage = (function (_super) {
                    __extends(ChooseSummaryOptionsPage, _super);
                    function ChooseSummaryOptionsPage() {
                        var _this = _super.call(this) || this;
                        _this._allColumns = {};
                        _this._masterDetailColumns = {};
                        _this._toggleIgnoreNullValues = function () {
                            _this.ignoreNullValues(!_this.ignoreNullValues());
                            _this._onChange();
                        };
                        _this._summaryOptions = ko.observableArray([]);
                        _this.ignoreNullValues = ko.observable(false);
                        _this._template = "dxrd-page-masterdetail-summary";
                        _this._reportTree = ko.observableArray([]);
                        _this._currentPath = ko.observable("");
                        _this._availableFields = ko.observableArray([]);
                        _this._summaryInfos = ko.observableArray([]);
                        _this._selectFieldToSummaryCaption = DevExpress.Analytics.Utils.getLocalization('Select fields and assign summary functions to them', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SelectFieldsAndSummaries');
                        _this._fieldsCaption = DevExpress.Analytics.Utils.getLocalization('Fields', 'DevExpress.XtraReports.UI.XRPivotGrid.Fields');
                        _this._summaryFunctionCaption = DevExpress.Analytics.Utils.getLocalization('Summary Functions', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SummaryFunctions');
                        _this._ignoreNullValuesCaption = DevExpress.Analytics.Utils.getLocalization('Ignore null values', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues');
                        _this._disposables.push(_this._currentPath.subscribe(function (newPath) {
                            _this._changeQuery(newPath);
                        }));
                        return _this;
                    }
                    ChooseSummaryOptionsPage.prototype._createSummaryInfo = function () {
                        var _this = this;
                        var newItem = new Internal.SummaryInfo();
                        this._disposables.push(newItem.field.subscribe(function (newValue) {
                            _this._createNewItemIfNeed();
                        }));
                        return newItem;
                    };
                    ChooseSummaryOptionsPage.prototype._createNewItemIfNeed = function () {
                        var _summaryInfos = this._summaryInfos.peek();
                        if (_summaryInfos.filter(function (item) { return !item.field(); }).length === 0 && _summaryInfos.length < this._availableFields.peek().length)
                            this._summaryInfos.push(this._createSummaryInfo());
                        var fieldNames = this._summaryInfos.peek().filter(function (item) { return !!item.field(); }).map(function (item) { return item.field().name; });
                        this._displayedFields[this._currentPath()] && this._displayedFields[this._currentPath()]().forEach(function (item) { return item.visible(fieldNames.indexOf(item.name) === -1); });
                        this._onChange();
                    };
                    ChooseSummaryOptionsPage.prototype._changeQuery = function (path) {
                        this._currentPath(path);
                        this._summaryInfoMapByDataMember[this._currentDataMember] = this._summaryInfos();
                        this._currentDataMember = path;
                        this._availableFields(this._masterDetailColumns[path] || []);
                        this._summaryInfos(this._summaryInfoMapByDataMember[path] || []);
                        this._createNewItemIfNeed();
                    };
                    ChooseSummaryOptionsPage.prototype._removeSummaryInfo = function (info) {
                        var index = this._summaryInfos.indexOf(info);
                        if (index === -1)
                            return;
                        this._summaryInfos.splice(index, 1);
                        this._createNewItemIfNeed();
                        this._onChange();
                    };
                    ChooseSummaryOptionsPage.prototype.canFinish = function () {
                        return true;
                    };
                    ChooseSummaryOptionsPage.prototype.initialize = function (state) {
                        var _this = this;
                        this._masterDetailColumns = $.extend(true, {}, state.masterDetailSummaryOptionsColumns);
                        this.ignoreNullValues(state.ignoreNullValuesForSummary);
                        this._reportTree(_fillTreeQueries([], state.masterDetailInfoCollection, 0));
                        this._currentDataMember = this._reportTree()[0].path;
                        var allColumnsTest = {};
                        this._reportTree().forEach(function (query) {
                            allColumnsTest[query.path] = state.masterDetailSummaryOptionsColumns[query.path] && state.masterDetailSummaryOptionsColumns[query.path].map(function (field) { return field.name; });
                        });
                        var changes = [];
                        $.each(allColumnsTest, function (key, value) {
                            changes = changes.concat(ko.utils.compareArrays(_this._allColumns[key], value));
                        });
                        var isColumnsChanged = changes.some(function (change, index, array) { return change.status != "retained"; });
                        if (isColumnsChanged) {
                            this._allColumns = allColumnsTest;
                            this._summaryInfos([]);
                            this._summaryInfoMapByDataMember = {};
                            this._displayedFields = {};
                            $.each(this._masterDetailColumns, function (key, value) {
                                _this._displayedFields[key] = ko.observableArray([]);
                                _this._displayedFields[key](value.map(function (item) {
                                    return { name: item.name, displayName: item.displayName, visible: ko.observable(true) };
                                }));
                            });
                        }
                        else {
                            this._summaryInfos(this._summaryInfoMapByDataMember[this._currentDataMember]);
                        }
                        this._changeQuery(this._currentDataMember);
                        return $.Deferred().resolve().promise();
                    };
                    ChooseSummaryOptionsPage.prototype.commit = function () {
                        this._summaryInfoMapByDataMember[this._currentDataMember] = this._summaryInfos();
                        var masterDetailSummaryOptionsColumns = this._masterDetailColumns;
                        var masterDetailSummariesInfo = {};
                        $.each(this._summaryInfoMapByDataMember, function (key, value) {
                            masterDetailSummariesInfo[key] = value.filter(function (item) { return !!item.field(); }).map(function (summaryOption) { return ({ column: summaryOption.field(), summaryFunctions: summaryOption.value.value().map(function (item) { return summaryOption.value.dataSource.map(function (option) { return option.value; }).indexOf(item); }) }); });
                        });
                        var ignoreNullValuesForSummary = this.ignoreNullValues();
                        return $.Deferred().resolve({
                            masterDetailSummaryOptionsColumns: masterDetailSummaryOptionsColumns,
                            masterDetailSummariesInfo: masterDetailSummariesInfo,
                            ignoreNullValuesForSummary: ignoreNullValuesForSummary
                        }).promise();
                    };
                    return ChooseSummaryOptionsPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.ChooseSummaryOptionsPage = ChooseSummaryOptionsPage;
                function _registerChooseSummaryOptionsPage(factory) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.ChooseSummaryOptionsPage, {
                        create: function () {
                            return new ChooseSummaryOptionsPage();
                        },
                        description: DevExpress.Analytics.Utils.getLocalization("Choose summary functions to calculate in reports.", "ReportBoxDesignerStringId.Wizard_MasterDetailChooseSummaryOptions_Description"),
                        template: "dxrd-page-masterdetail-summary",
                        getState: function (state) { return state; },
                        setState: function (data, state) {
                            state.masterDetailSummariesInfo = data.masterDetailSummariesInfo;
                            state.ignoreNullValuesForSummary = data.ignoreNullValuesForSummary;
                        },
                        resetState: function (state, defaultState) {
                            state.masterDetailSummariesInfo = defaultState.masterDetailSummariesInfo;
                            state.ignoreNullValuesForSummary = defaultState.ignoreNullValuesForSummary;
                        }
                    });
                }
                Wizard._registerChooseSummaryOptionsPage = _registerChooseSummaryOptionsPage;
                var AddSummaryFieldsPage = (function (_super) {
                    __extends(AddSummaryFieldsPage, _super);
                    function AddSummaryFieldsPage() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this._toggleIgnoreNullValues = function () {
                            _this.ignoreNullValues(!_this.ignoreNullValues());
                            _this._onChange();
                        };
                        _this._fieldListProvider = ko.observable(null);
                        _this.ignoreNullValues = ko.observable(false);
                        _this._template = "dxrd-page-masterdetail-summary-section";
                        _this._reportTree = ko.observableArray([]);
                        _this._availableFieldsCount = ko.observable(0);
                        _this._summaryInfos = ko.observableArray([]);
                        _this._selectFieldToSummaryCaption = DevExpress.Analytics.Utils.getLocalization('Select fields and assign summary functions to them', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SelectFieldsAndSummaries');
                        _this._fieldsCaption = DevExpress.Analytics.Utils.getLocalization('Field', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryFields_Text');
                        _this._summaryFunctionCaption = DevExpress.Analytics.Utils.getLocalization('Summary Functions', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SummaryFunctions');
                        _this._ignoreNullValuesCaption = DevExpress.Analytics.Utils.getLocalization('Ignore null values', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues');
                        return _this;
                    }
                    AddSummaryFieldsPage.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.disposeObservableArray(this._summaryInfos);
                    };
                    AddSummaryFieldsPage.prototype._fillTreeQueries = function (tree, queries, availableQueries) {
                        _fillTreeQueries([], queries, 0).forEach(function (value) {
                            if (availableQueries[value.path]) {
                                var fields = value.fields.filter(function (x) { return availableQueries[value.path].some(function (field) { return field.name === x.name; }); });
                                var treeItem = $.extend(true, {}, value);
                                treeItem.fields = fields;
                                tree.push(treeItem);
                            }
                            ;
                        });
                        return tree;
                    };
                    AddSummaryFieldsPage.prototype._createSummaryInfo = function () {
                        var _this = this;
                        var newItem = new Internal.SummaryInfoFieldlist();
                        newItem._disposables.push(newItem.selectedPath.subscribe(function (newVal) {
                            if (!newVal)
                                newItem.field(null);
                            else {
                                _this._fieldListProvider().getItemByPath({
                                    fullPath: newVal,
                                    path: newVal
                                }).done(function (item) {
                                    newItem.field(item);
                                    _this._createNewItemIfNeed();
                                });
                            }
                            _this._onChange();
                        }));
                        newItem._disposables.push(newItem.functionNames.subscribe(function (newVal) {
                            _this._onChange();
                        }));
                        return newItem;
                    };
                    AddSummaryFieldsPage.prototype._createNewItemIfNeed = function () {
                        var _summaryInfos = this._summaryInfos.peek();
                        if (_summaryInfos.filter(function (item) { return !item.field(); }).length === 0 && _summaryInfos.length < this._availableFieldsCount())
                            this._summaryInfos.push(this._createSummaryInfo());
                    };
                    AddSummaryFieldsPage.prototype._getParentName = function (parent) {
                        if (parent.parent) {
                            return [this._getParentName(parent.parent), parent.displayName].join('.');
                        }
                        return parent.displayName;
                    };
                    AddSummaryFieldsPage.prototype._flat = function (fields, parent) {
                        var _this = this;
                        var flatList = fields.map(function (x) {
                            if (x.path) {
                                x.name = x.path;
                            }
                            else {
                                x.path = [parent.path, x.name].join('.');
                            }
                            if (parent) {
                                x.parent = {
                                    path: parent.path,
                                    displayName: _this._getParentName(parent)
                                };
                            }
                            return x;
                        });
                        fields.forEach(function (x) {
                            if (x.fields) {
                                flatList = flatList.concat(_this._flat(x.fields, x));
                            }
                        });
                        return flatList;
                    };
                    AddSummaryFieldsPage.prototype._removeSummaryInfo = function (info) {
                        var index = this._summaryInfos.indexOf(info);
                        if (index === -1)
                            return;
                        info.dispose();
                        this._summaryInfos.splice(index, 1);
                        if (this._summaryInfos.length === 0) {
                            this._createNewItemIfNeed();
                        }
                        this._onChange();
                    };
                    AddSummaryFieldsPage.prototype.canFinish = function () {
                        return true;
                    };
                    AddSummaryFieldsPage.prototype._updateSummaries = function (flatlist) {
                        var _this = this;
                        this._summaryInfos().filter(function (x) { return x.field() && flatlist.every(function (item) { return item.path !== x.field().path; }); }).forEach(function (item) {
                            _this._summaryInfos().splice(_this._summaryInfos().indexOf(item), 1);
                        });
                        this._summaryInfos.valueHasMutated();
                    };
                    AddSummaryFieldsPage.prototype.initialize = function (state) {
                        var _this = this;
                        this.ignoreNullValues(state.ignoreNullValuesForSummary);
                        this._reportTree(this._fillTreeQueries([], state.masterDetailInfoCollection, state.masterDetailSummaryOptionsColumns));
                        var flatList = this._flat(this._reportTree());
                        this._updateSummaries(flatList);
                        this._availableFieldsCount(this._reportTree().reduce(function (count, item) {
                            count += item.fields.length;
                            return count;
                        }, 0));
                        this._fieldListProvider({
                            getItemByPath: function (path) {
                                return $.Deferred().resolve(flatList.filter(function (x) { return x.path === path.fullPath; })[0]).promise();
                            },
                            getItems: function (path) {
                                var deferred = $.Deferred();
                                if (path.fullPath === "") {
                                    deferred.resolve(_this._reportTree().filter(function (root) { return root.fields.some(function (field) { return _this._summaryInfos().every(function (summaryInfo) {
                                        return summaryInfo.field() !== field;
                                    }); }); }));
                                }
                                else {
                                    var item = _this._reportTree().filter(function (x) { return x.path === path.fullPath; })[0];
                                    if (item) {
                                        deferred.resolve(item.fields.filter(function (field) {
                                            return _this._summaryInfos().every(function (summaryInfo) { return summaryInfo.field() !== field; });
                                        }));
                                    }
                                    else
                                        deferred.resolve([]);
                                }
                                return deferred.promise();
                            }
                        });
                        this._createNewItemIfNeed();
                        return $.Deferred().resolve().promise();
                    };
                    AddSummaryFieldsPage.prototype.commit = function () {
                        var masterDetailSummariesInfo = {};
                        this._summaryInfos().forEach(function (summaryOption) {
                            var field = summaryOption.field();
                            if (!field)
                                return;
                            if (!masterDetailSummariesInfo[field["parent"].path]) {
                                masterDetailSummariesInfo[field["parent"].path] = [];
                            }
                            masterDetailSummariesInfo[field["parent"].path].push({
                                column: summaryOption.field(),
                                summaryFunctions: summaryOption.value.value().map(function (item) {
                                    return summaryOption.value.dataSource.map(function (option) { return option.value; }).indexOf(item);
                                })
                            });
                        });
                        var ignoreNullValuesForSummary = this.ignoreNullValues();
                        return $.Deferred().resolve({
                            masterDetailSummariesInfo: masterDetailSummariesInfo,
                            ignoreNullValuesForSummary: ignoreNullValuesForSummary
                        }).promise();
                    };
                    return AddSummaryFieldsPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.AddSummaryFieldsPage = AddSummaryFieldsPage;
                function _registerAddSummaryFieldsPage(factory) {
                    _registerChooseSummaryOptionsPage(factory);
                    var meta = factory.getMetadata(Wizard.ReportWizardPageId.ChooseSummaryOptionsPage);
                    meta.create = function () {
                        return new AddSummaryFieldsPage();
                    };
                    meta["disabledText"] = DevExpress.Analytics.Utils.getLocalization("To add a summary field to the report, select a data field (numeric, date-time or boolean) and ensure that it is not used in groups.", "ASPxReportsStringId.ReportDesigner_Wizard_AddSummaryFields_Placeholder");
                    meta.template = "dxrd-page-masterdetail-summary-section";
                }
                Wizard._registerAddSummaryFieldsPage = _registerAddSummaryFieldsPage;
                var PreviewPageHelper = (function (_super) {
                    __extends(PreviewPageHelper, _super);
                    function PreviewPageHelper(settings) {
                        var _this = _super.call(this) || this;
                        _this.width = ko.observable(0);
                        _this.height = ko.observable(0);
                        _this.marginLeft = ko.observable(0);
                        _this.marginRight = ko.observable(0);
                        _this.marginTop = ko.observable(0);
                        _this.marginBottom = ko.observable(0);
                        _this.pagePreviewElement = ko.observable(null);
                        if (settings) {
                            _this.width = settings.width;
                            _this.height = settings.height;
                            _this.marginLeft = settings.marginLeft;
                            _this.marginRight = settings.marginRight;
                            _this.marginTop = settings.marginTop;
                            _this.marginBottom = settings.marginBottom;
                        }
                        var elementWidth = ko.computed(function () { return _this.pagePreviewElement() && _this.pagePreviewElement().width() || 200; }).extend({ throttle: 100 });
                        var elementHeight = ko.computed(function () { return _this.pagePreviewElement() && _this.pagePreviewElement().height() || 292; }).extend({ throttle: 100 });
                        var previewRatio = ko.computed(function () { return Math.min(elementWidth() / _this.width(), elementHeight() / _this.height()); });
                        var resizeHandler = function () {
                            _this.pagePreviewElement.valueHasMutated();
                        };
                        window.addEventListener("resize", resizeHandler);
                        _this._disposables.push({
                            dispose: function () {
                                _this.pagePreviewElement(null);
                                window.removeEventListener("resize", resizeHandler);
                            }
                        }, elementWidth, elementHeight, previewRatio, _this.previewPageHeight = ko.pureComputed(function () { return _this.height() * previewRatio(); }), _this.previewPageWidth = ko.pureComputed(function () { return Math.round(_this.width() * previewRatio()); }), _this.previewTopMargin = ko.pureComputed(function () { return Math.round(_this.marginTop() * previewRatio()); }), _this.previewRightMargin = ko.pureComputed(function () { return Math.round(_this.marginRight() * previewRatio()); }), _this.previewBottomMargin = ko.pureComputed(function () { return Math.round(_this.marginBottom() * previewRatio()); }), _this.previewLeftMargin = ko.pureComputed(function () { return Math.round(_this.marginLeft() * previewRatio()); }));
                        return _this;
                    }
                    PreviewPageHelper.prototype.cachePagePreviewElement = function ($element) {
                        var _this = this;
                        setTimeout(function () {
                            _this.pagePreviewElement($element);
                        }, 100);
                    };
                    PreviewPageHelper.prototype.updatePageSettings = function (pageSetup) {
                        this.width(pageSetup.width);
                        this.height(pageSetup.height);
                        this.marginTop(pageSetup.marginTop);
                        this.marginRight(pageSetup.marginRight);
                        this.marginBottom(pageSetup.marginBottom);
                        this.marginLeft(pageSetup.marginLeft);
                    };
                    return PreviewPageHelper;
                }(DevExpress.Analytics.Utils.Disposable));
                Wizard.PreviewPageHelper = PreviewPageHelper;
                var ConfigureReportPageSettingsPage = (function (_super) {
                    __extends(ConfigureReportPageSettingsPage, _super);
                    function ConfigureReportPageSettingsPage() {
                        var _a;
                        var _this = _super.call(this) || this;
                        _this.lookupData = {
                            paperKind: Controls.Metadata.paperKind.valuesArray
                                .map(function (x) { return { value: x.value, displayName: DevExpress.Analytics.Utils.getLocalization(x.displayValue, x.localizationId) }; })
                                .sort(function (a, b) { return a.value === 'Custom' ? 1 : b.value === 'Custom' ? -1 : a.displayName.localeCompare(b.displayName); }),
                            unit: [
                                { value: Wizard.GraphicsUnit.Inch, displayName: DevExpress.Analytics.Utils.getLocalization("Inch", "AnalyticsCoreStringId.Wizard_Inch") },
                                { value: Wizard.GraphicsUnit.Millimeter, displayName: DevExpress.Analytics.Utils.getLocalization("Millimeter", "AnalyticsCoreStringId.Wizard_Millimeter") },
                                { value: Wizard.GraphicsUnit.Pixel, displayName: DevExpress.Analytics.Utils.getLocalization("Pixel", "ASPxReportsStringId.ReportDesigner_Wizard_Pixel") }
                            ]
                        };
                        _this.paperKind = ko.observable(Wizard.defaultPageSetupState.paperKind);
                        _this.landscape = ko.observable(Wizard.defaultPageSetupState.landscape);
                        _this.width = ko.observable(Wizard.defaultPageSetupState.width);
                        _this.height = ko.observable(Wizard.defaultPageSetupState.height);
                        _this._disposables.push(_this.fixedSize = ko.computed(function () { return _this.paperKind() !== 'Custom'; }));
                        _this.marginTop = ko.observable(Wizard.defaultPageSetupState.marginTop);
                        _this.marginRight = ko.observable(Wizard.defaultPageSetupState.marginRight);
                        _this.marginBottom = ko.observable(Wizard.defaultPageSetupState.marginBottom);
                        _this.marginLeft = ko.observable(Wizard.defaultPageSetupState.marginLeft);
                        _this._disposables.push(_this.previewPageHelper = new PreviewPageHelper({
                            height: _this.height,
                            width: _this.width,
                            marginTop: _this.marginTop,
                            marginRight: _this.marginRight,
                            marginBottom: _this.marginBottom,
                            marginLeft: _this.marginLeft
                        }));
                        _this._unit = ko.observable(Wizard.defaultPageSetupState.unit);
                        _this._disposables.push(_this.unit = ko.computed({
                            read: function () { return _this._unit(); },
                            write: function (newVal) {
                                var converter = Internal.PageSetupHelper.getConverter(_this._unit(), newVal);
                                [_this.width, _this.height, _this.marginTop, _this.marginRight, _this.marginBottom, _this.marginLeft].forEach(function (x) { x(converter(x())); });
                                _this._unit(newVal);
                            }
                        }));
                        _this._disposables.push(_this.paperKind.subscribe(function (newVal) {
                            var _a;
                            if (newVal !== 'Custom') {
                                var convert = Internal.PageSetupHelper.getConverter(Wizard.GraphicsUnit.Inch, _this._unit());
                                var width = convert(DevExpress.Analytics.Internal.papperKindMapper[newVal].width / 100);
                                var height = convert(DevExpress.Analytics.Internal.papperKindMapper[newVal].height / 100);
                                if (_this.landscape())
                                    _a = [height, width], width = _a[0], height = _a[1];
                                _this.width(width);
                                _this.height(height);
                            }
                        }));
                        _this._disposables.push(_this.landscape.subscribe(function (newVal) {
                            var _a;
                            var width = _this.height();
                            var height = _this.width();
                            _this.width(width);
                            _this.height(height);
                            var t = _this.marginTop(), r = _this.marginRight(), b = _this.marginBottom(), l = _this.marginLeft();
                            _a = newVal
                                ? [l, t, r, b]
                                : [r, b, l, t], t = _a[0], r = _a[1], b = _a[2], l = _a[3];
                            _this.marginTop(t);
                            _this.marginRight(r);
                            _this.marginBottom(b);
                            _this.marginLeft(l);
                        }));
                        _this._disposables.push(_this.valueFormat = ko.pureComputed(function () {
                            switch (_this._unit()) {
                                case Wizard.GraphicsUnit.Inch:
                                    return '#0.00 "';
                                case Wizard.GraphicsUnit.Millimeter:
                                    return '#0.0 mm';
                                case Wizard.GraphicsUnit.Pixel:
                                    return '#0 px';
                            }
                        }));
                        (_a = _this._disposables).push.apply(_a, DevExpress.Analytics.Wizard.Internal.subscribeProperties([
                            _this.paperKind,
                            _this.landscape,
                            _this.width,
                            _this.height,
                            _this.marginTop,
                            _this.marginLeft,
                            _this.marginRight,
                            _this.marginBottom,
                            _this.unit
                        ], function () { return _this._onChange(); }));
                        return _this;
                    }
                    ConfigureReportPageSettingsPage.prototype.canFinish = function () {
                        return true;
                    };
                    ConfigureReportPageSettingsPage.prototype.initialize = function (state) {
                        this.paperKind(state.paperKind);
                        this.landscape(state.landscape);
                        this.unit(state.unit);
                        if (state.paperKind === "Custom") {
                            this.width(state.width);
                            this.height(state.height);
                        }
                        this.marginLeft(state.marginLeft);
                        this.marginRight(state.marginRight);
                        this.marginTop(state.marginTop);
                        this.marginBottom(state.marginBottom);
                        return $.Deferred().resolve().promise();
                    };
                    ConfigureReportPageSettingsPage.prototype.commit = function () {
                        return $.Deferred().resolve({
                            paperKind: this.paperKind(),
                            unit: this.unit(),
                            width: this.width(),
                            height: this.height(),
                            marginLeft: this.marginLeft(),
                            marginRight: this.marginRight(),
                            marginTop: this.marginTop(),
                            marginBottom: this.marginBottom(),
                            landscape: this.landscape()
                        }).promise();
                    };
                    return ConfigureReportPageSettingsPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.ConfigureReportPageSettingsPage = ConfigureReportPageSettingsPage;
                function _applyPageSetting(data, state) {
                    state.height = data.height;
                    state.landscape = data.landscape;
                    state.marginBottom = data.marginBottom;
                    state.marginLeft = data.marginLeft;
                    state.marginRight = data.marginRight;
                    state.marginTop = data.marginTop;
                    state.paperKind = data.paperKind;
                    state.unit = data.unit;
                    state.width = data.width;
                }
                Wizard._applyPageSetting = _applyPageSetting;
                function _registerConfigureReportPageSettingsPage(factory) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.ConfigureReportPageSettingsPage, {
                        create: function () { return new ConfigureReportPageSettingsPage(); },
                        getState: function (state) { return state.pageSetup; },
                        setState: function (data, state) {
                            _applyPageSetting(data, state);
                        },
                        resetState: function (state, defaultState) {
                            _applyPageSetting(defaultState, state);
                        },
                        template: "dxrd-page-pageSetup",
                        description: DevExpress.Analytics.Utils.getLocalization("Specify report page settings.", "ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Description")
                    });
                }
                Wizard._registerConfigureReportPageSettingsPage = _registerConfigureReportPageSettingsPage;
                var ChooseReportColorSchemePage = (function (_super) {
                    __extends(ChooseReportColorSchemePage, _super);
                    function ChooseReportColorSchemePage() {
                        var _this = _super.call(this) || this;
                        _this._scheme = ko.observable(null);
                        _this._customColorScheme = new Wizard.CustomColorScheme("Custom", "ReportStringId.Wizard_ReportColorScheme_Custom", "255, 183, 227, 228");
                        _this._lookupData = {
                            scheme: [
                                new Wizard.ColorScheme("Grey", "ReportStringId.Wizard_ReportColorScheme_Grey", "255, 75,75,75"),
                                new Wizard.ColorScheme("ColdGrey", "ReportStringId.Wizard_ReportColorScheme_ColdGrey", "255, 93,98,110"),
                                new Wizard.ColorScheme("Cream", "ReportStringId.Wizard_ReportColorScheme_Cream", "255, 227,202,166"),
                                new Wizard.ColorScheme("JeansBlue", "ReportStringId.Wizard_ReportColorScheme_JeansBlue", "255, 69,94,178"),
                                new Wizard.ColorScheme("Blue", "ReportStringId.Wizard_ReportColorScheme_Blue", "255, 23,104,196"),
                                new Wizard.ColorScheme("Yellow", "ReportStringId.Wizard_ReportColorScheme_Yellow", "255, 255,209,107"),
                                new Wizard.ColorScheme("LightGreen", "ReportStringId.Wizard_ReportColorScheme_LightGreen", "255, 181,211,142"),
                                new Wizard.ColorScheme("Mint", "ReportStringId.Wizard_ReportColorScheme_Mint", "255, 46,148,130"),
                                new Wizard.ColorScheme("LightBlue", "ReportStringId.Wizard_ReportColorScheme_LightBlue", "255, 153,212,246"),
                                new Wizard.ColorScheme("Azure", "ReportStringId.Wizard_ReportColorScheme_Azure", "255, 57,159,228"),
                                new Wizard.ColorScheme("Coral", "ReportStringId.Wizard_ReportColorScheme_Coral", "255, 250,128,114"),
                                new Wizard.ColorScheme("Red", "ReportStringId.Wizard_ReportColorScheme_Red", "255, 196,66,79"),
                                new Wizard.ColorScheme("Raspberry", "ReportStringId.Wizard_ReportColorScheme_Raspberry", "255, 152,51,91"),
                                new Wizard.ColorScheme("Violet", "ReportStringId.Wizard_ReportColorScheme_Violet", "255, 113,69,168"),
                                _this._customColorScheme
                            ]
                        };
                        var customSubscription = null;
                        _this._scheme(_this._lookupData.scheme[0]);
                        _this._disposables.push(_this._scheme.subscribe(function (newVal) {
                            if (newVal === _this._customColorScheme) {
                                _this._disposables.push(customSubscription = _this._customColorScheme.color.subscribe(function () {
                                    _this._onChange();
                                }));
                            }
                            else {
                                customSubscription && customSubscription.dispose();
                            }
                            _this._onChange();
                        }));
                        return _this;
                    }
                    ChooseReportColorSchemePage.prototype.addColorScheme = function (name, color, position) {
                        if (position === void 0) { position = this._lookupData.scheme.length; }
                        var scheme = new Wizard.ColorScheme(name, undefined, color);
                        scheme._isCustom = true;
                        this._lookupData.scheme.splice(position, 0, scheme);
                    };
                    ChooseReportColorSchemePage.prototype.removeColorScheme = function () {
                        var _this = this;
                        var names = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            names[_i] = arguments[_i];
                        }
                        names.forEach(function (name) {
                            var scheme = _this._lookupData.scheme.filter(function (x) { return x.name == name || x.displayName == name; })[0];
                            if (scheme) {
                                _this._lookupData.scheme.splice(_this._lookupData.scheme.indexOf(scheme), 1);
                            }
                        });
                    };
                    ChooseReportColorSchemePage.prototype.removeAllColorSchemes = function () {
                        this._lookupData.scheme = [];
                    };
                    ChooseReportColorSchemePage.prototype.setCustomColor = function (color) {
                        this._customColorScheme.editorColor(color.indexOf("rgb") === 0 ?
                            color :
                            DevExpress.Analytics.Utils.colorFromString(color)());
                        this._customColorScheme.applyColor();
                    };
                    ChooseReportColorSchemePage.prototype._applyScheme = function (data) {
                        this._scheme() && this._scheme().selected(false);
                        data.selected(true);
                        this._scheme(data);
                    };
                    ChooseReportColorSchemePage.prototype.canFinish = function () {
                        return true;
                    };
                    ChooseReportColorSchemePage.prototype.initialize = function (state) {
                        if (state.name === "Custom") {
                            this._customColorScheme.editorColor(state.baseColor);
                            this._customColorScheme.applyColor();
                        }
                        var currentScheme = this._lookupData.scheme.filter(function (x) { return x.name === state.name; })[0];
                        if (!currentScheme) {
                            currentScheme = this._lookupData.scheme[0];
                        }
                        this._scheme(currentScheme);
                        if (currentScheme)
                            currentScheme.selected(true);
                        return $.Deferred().resolve().promise();
                    };
                    ChooseReportColorSchemePage.prototype.commit = function () {
                        var scheme = this._scheme();
                        var result = scheme ? {
                            name: scheme._isCustom ? "Custom" : scheme.name,
                            baseColor: scheme.baseColor,
                            _color: ko.unwrap(scheme.color)
                        } : {};
                        return $.Deferred().resolve(result).promise();
                    };
                    return ChooseReportColorSchemePage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.ChooseReportColorSchemePage = ChooseReportColorSchemePage;
                function _applyColorSchemeState(data, state) {
                    state.baseColor = data.baseColor;
                    state.name = data.name;
                    state["_color"] = data["_color"];
                }
                Wizard._applyColorSchemeState = _applyColorSchemeState;
                function _registerChooseReportColorSchemePage(factory) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.ChooseReportColorSchemePage, {
                        create: function () { return new ChooseReportColorSchemePage(); },
                        getState: function (state) { return state.colorScheme; },
                        setState: function (data, state) {
                            _applyColorSchemeState(data, state);
                        },
                        resetState: function (state, defaultState) {
                            _applyColorSchemeState(defaultState, state);
                        },
                        template: "dxrd-page-colorScheme",
                        description: DevExpress.Analytics.Utils.getLocalization("Choose a report color scheme.", "ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme_Description")
                    });
                }
                Wizard._registerChooseReportColorSchemePage = _registerChooseReportColorSchemePage;
                var SetReportTitlePage = (function (_super) {
                    __extends(SetReportTitlePage, _super);
                    function SetReportTitlePage() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.reportTitle = ko.observable("");
                        return _this;
                    }
                    SetReportTitlePage.prototype.initialize = function (data) {
                        this.reportTitle(data.reportTitle ? data.reportTitle : "");
                        return $.Deferred().resolve().promise();
                    };
                    SetReportTitlePage.prototype.canNext = function () {
                        return false;
                    };
                    SetReportTitlePage.prototype.canFinish = function () {
                        return true;
                    };
                    SetReportTitlePage.prototype.commit = function () {
                        return $.Deferred().resolve({
                            reportTitle: this.reportTitle()
                        }).promise();
                    };
                    return SetReportTitlePage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.SetReportTitlePage = SetReportTitlePage;
                function _registerSetReportTitlePage(factory) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.SetReportTitlePage, {
                        create: function () { return new SetReportTitlePage(); },
                        getState: function (state) { return state; },
                        setState: function (data, state) { return state.reportTitle = data.reportTitle; },
                        resetState: function (state, defaultState) { return state.reportTitle = defaultState.reportTitle; },
                        template: "dxrd-page-reportTitle",
                        description: DevExpress.Analytics.Utils.getLocalization("We have all the information needed to process the report.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportComplete_Description")
                    });
                }
                Wizard._registerSetReportTitlePage = _registerSetReportTitlePage;
                var ConfigurePageSettingsPage = (function (_super) {
                    __extends(ConfigurePageSettingsPage, _super);
                    function ConfigurePageSettingsPage() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this._configureReportPageSettingsPage = new ConfigureReportPageSettingsPage();
                        _this._colorSchemePage = new ChooseReportColorSchemePage();
                        _this._colorSchemePageVisible = true;
                        return _this;
                    }
                    ConfigurePageSettingsPage.prototype.dispose = function () {
                        this._configureReportPageSettingsPage.dispose();
                        this._colorSchemePage.dispose();
                    };
                    ConfigurePageSettingsPage.prototype.addColorScheme = function (name, color, position) {
                        this._colorSchemePage.addColorScheme(name, color, position);
                    };
                    ConfigurePageSettingsPage.prototype.removeColorScheme = function () {
                        var names = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            names[_i] = arguments[_i];
                        }
                        var _a;
                        (_a = this._colorSchemePage).removeColorScheme.apply(_a, names);
                    };
                    ConfigurePageSettingsPage.prototype.removeAllColorSchemes = function () {
                        this._colorSchemePage.removeAllColorSchemes();
                    };
                    ConfigurePageSettingsPage.prototype.setCustomColor = function (color) {
                        this._colorSchemePage.setCustomColor(color);
                    };
                    ConfigurePageSettingsPage.prototype.onChange = function (callback) {
                        this._colorSchemePage.onChange(callback);
                        this._configureReportPageSettingsPage.onChange(callback);
                    };
                    ConfigurePageSettingsPage.prototype.canNext = function () {
                        return this._colorSchemePage.canNext() && this._configureReportPageSettingsPage.canNext();
                    };
                    ConfigurePageSettingsPage.prototype.canFinish = function () {
                        return this._colorSchemePage.canFinish() && this._configureReportPageSettingsPage.canFinish();
                    };
                    ConfigurePageSettingsPage.prototype.initialize = function (state) {
                        this._colorSchemePageVisible = this._colorSchemePage._lookupData.scheme.length > 0 && !!(state.dataSource || state.newDataSource);
                        return $.when.apply($, [
                            this._configureReportPageSettingsPage.initialize(state.pageSetup),
                            this._colorSchemePage.initialize(state.colorScheme)
                        ]);
                    };
                    ConfigurePageSettingsPage.prototype.commit = function () {
                        var _this = this;
                        var deferred = $.Deferred();
                        this._colorSchemePage.commit().done(function (colorResult) {
                            _this._configureReportPageSettingsPage.commit().done(function (configureReportPageSettingsPageResult) {
                                deferred.resolve({
                                    pageSetup: configureReportPageSettingsPageResult,
                                    colorScheme: colorResult
                                });
                            });
                        });
                        return deferred.promise();
                    };
                    return ConfigurePageSettingsPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.ConfigurePageSettingsPage = ConfigurePageSettingsPage;
                function _registerConfigureReportPageSettingsSection(factory) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.ConfigureReportPageSettingsPage, {
                        create: function () { return new ConfigurePageSettingsPage(); },
                        getState: function (state) { return state; },
                        setState: function (data, state) {
                            _applyPageSetting(data.pageSetup, state.pageSetup);
                            _applyColorSchemeState(data.colorScheme, state.colorScheme);
                        },
                        resetState: function (state, defaultState) {
                            _applyPageSetting(defaultState.pageSetup, state.pageSetup);
                            _applyColorSchemeState(defaultState.colorScheme, state.colorScheme);
                        },
                        template: "dxrd-page-pageSetupAndColorScheme",
                        description: DevExpress.Analytics.Utils.getLocalization("Specify page settings and a report color scheme.", "ASPxReportsStringId.ReportDesigner_Wizard_SpecifyPageSettingsColorScheme")
                    });
                }
                Wizard._registerConfigureReportPageSettingsSection = _registerConfigureReportPageSettingsSection;
            })(Wizard = Designer.Wizard || (Designer.Wizard = {}));
            (function (Internal) {
                function overrideDataSourceWizardPage(factory, pageId, meta) {
                    var oldMetadata = factory.getMetadata(pageId);
                    factory.registerMetadata(pageId, {
                        canNext: function (page) { return page.canFinish() || page.canNext(); },
                        create: function () { return meta.create(); },
                        resetState: function (state, defaultState) {
                            state.newDataSource = defaultState.newDataSource;
                            meta.resetState && meta.resetState(state, defaultState);
                        },
                        getState: function (state) { return state; },
                        setState: function (data, state) {
                            meta.setState && meta.setState(data, state);
                            state.newDataSource = data.newDataSource;
                        },
                        description: oldMetadata.description,
                        template: oldMetadata.template
                    });
                }
                function overrideJsonDataSourceWizardPage(factory, pageId, meta) {
                    overrideDataSourceWizardPage(factory, pageId, $.extend({}, meta, {
                        setState: function (data, state) {
                            $.extend(state.jsonDataSourceWizard, data.result);
                        }
                    }));
                }
                Internal.overrideJsonDataSourceWizardPage = overrideJsonDataSourceWizardPage;
                function overrideSqlDataSourceWizardPage(factory, pageId, meta) {
                    overrideDataSourceWizardPage(factory, pageId, $.extend({}, meta, {
                        setState: function (data, state) {
                            state.sqlDataSourceWizard = data.result;
                        }
                    }));
                }
                Internal.overrideSqlDataSourceWizardPage = overrideSqlDataSourceWizardPage;
                var DataSourceWizardHelper = (function () {
                    function DataSourceWizardHelper(_page, _callback) {
                        this._page = _page;
                        this._callback = _callback;
                    }
                    DataSourceWizardHelper.prototype.commit = function (superCommit, createDataSource) {
                        var _this = this;
                        var deferred = $.Deferred();
                        if (!this._page.canNext() && this._page.canFinish()) {
                            superCommit().done(function (commitResult) {
                                var dataSourcePromise = _this._callback(createDataSource(commitResult));
                                dataSourcePromise.done(function (result) {
                                    result.data = Data.ObjectItem.createNew(result.data);
                                    deferred.resolve({
                                        result: commitResult,
                                        newDataSource: Wizard._convertToStateDataSource(result)
                                    });
                                }).fail(deferred.reject);
                            });
                        }
                        else
                            superCommit().done(function (commitResult) {
                                deferred.resolve({
                                    result: commitResult
                                });
                            });
                        return deferred.promise();
                    };
                    return DataSourceWizardHelper;
                }());
                Internal.DataSourceWizardHelper = DataSourceWizardHelper;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            (function (Wizard) {
                var ChooseJsonSchemaPage = (function (_super) {
                    __extends(ChooseJsonSchemaPage, _super);
                    function ChooseJsonSchemaPage(createJsonDataSourceInfo) {
                        var _this = _super.call(this) || this;
                        _this._dataSourceWizardHelper = new Internal.DataSourceWizardHelper(_this, createJsonDataSourceInfo);
                        return _this;
                    }
                    ChooseJsonSchemaPage.prototype.initialize = function (state) {
                        this._dataSourceId = state.dataSourceId;
                        return _super.prototype.initialize.call(this, state.jsonDataSourceWizard);
                    };
                    ChooseJsonSchemaPage.prototype.commit = function () {
                        var _this = this;
                        return this._dataSourceWizardHelper.commit(function () { return _super.prototype.commit.call(_this); }, function (state) { return DevExpress.Analytics.Wizard._restoreJsonDataSourceFromState(state, undefined, _this._dataSourceId); });
                    };
                    return ChooseJsonSchemaPage;
                }(DevExpress.Analytics.Wizard.ChooseJsonSchemaPage));
                Wizard.ChooseJsonSchemaPage = ChooseJsonSchemaPage;
                function _registerChooseJsonSchemaPage(factory, callbacks) {
                    Internal.overrideJsonDataSourceWizardPage(factory, DevExpress.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseJsonSchemaPage, {
                        create: function () {
                            return new ChooseJsonSchemaPage(callbacks.createJsonDataSourceInfo);
                        },
                        resetState: function (state) {
                            delete state.jsonDataSourceWizard.dataSourceName;
                            delete state.jsonDataSourceWizard.jsonScheme;
                            delete state.jsonDataSourceWizard.rootElement;
                        }
                    });
                }
                Wizard._registerChooseJsonSchemaPage = _registerChooseJsonSchemaPage;
                var ConfigureMasterDetailRelationshipsPage = (function (_super) {
                    __extends(ConfigureMasterDetailRelationshipsPage, _super);
                    function ConfigureMasterDetailRelationshipsPage(createSqlDataSourceInfo, sqlDataSourceResultSchema) {
                        var _this = _super.call(this, sqlDataSourceResultSchema) || this;
                        _this._dataSourceWizardHelper = new Internal.DataSourceWizardHelper(_this, createSqlDataSourceInfo);
                        return _this;
                    }
                    ConfigureMasterDetailRelationshipsPage.prototype.initialize = function (state) {
                        return _super.prototype.initialize.call(this, state.sqlDataSourceWizard);
                    };
                    ConfigureMasterDetailRelationshipsPage.prototype.commit = function () {
                        var _this = this;
                        return this._dataSourceWizardHelper.commit(function () { return _super.prototype.commit.call(_this); }, function (state) { return DevExpress.Analytics.Wizard._restoreSqlDataSourceFromState(state).sqlDataSource; });
                    };
                    return ConfigureMasterDetailRelationshipsPage;
                }(DevExpress.Analytics.Wizard.ConfigureMasterDetailRelationshipsPage));
                Wizard.ConfigureMasterDetailRelationshipsPage = ConfigureMasterDetailRelationshipsPage;
                function _registerConfigureMasterDetailRelationshipsPage(factory, callbacks) {
                    Internal.overrideSqlDataSourceWizardPage(factory, DevExpress.Analytics.Wizard.DataSourceWizardPageId.ConfigureMasterDetailRelationshipsPage, {
                        create: function () {
                            return new ConfigureMasterDetailRelationshipsPage(callbacks.createSqlDataSourceInfo, callbacks.sqlDataSourceResultSchema);
                        }
                    });
                }
                Wizard._registerConfigureMasterDetailRelationshipsPage = _registerConfigureMasterDetailRelationshipsPage;
                var MultiQueryConfigurePage = (function (_super) {
                    __extends(MultiQueryConfigurePage, _super);
                    function MultiQueryConfigurePage(reportWizardOptions) {
                        var _this = _super.call(this, reportWizardOptions) || this;
                        _this._dataSourceWizardHelper = new Internal.DataSourceWizardHelper(_this, reportWizardOptions.callbacks.createSqlDataSourceInfo);
                        return _this;
                    }
                    MultiQueryConfigurePage.prototype._getQueriesCount = function () {
                        return this["_dataSource"]().queries().length;
                    };
                    MultiQueryConfigurePage.prototype._canEditQueryParameters = function () {
                        var _this = this;
                        return this["_dataSource"]().queries().some(function (query) { return DevExpress.Analytics.Wizard._canEditQueryParameters(query, _this["_customQueries"]()); });
                    };
                    MultiQueryConfigurePage.prototype.initialize = function (state) {
                        return _super.prototype.initialize.call(this, state.sqlDataSourceWizard);
                    };
                    MultiQueryConfigurePage.prototype.commit = function () {
                        var _this = this;
                        return this._dataSourceWizardHelper.commit(function () { return _super.prototype.commit.call(_this); }, function (state) { return DevExpress.Analytics.Wizard._restoreSqlDataSourceFromState(state).sqlDataSource; });
                    };
                    return MultiQueryConfigurePage;
                }(DevExpress.Analytics.Wizard.MultiQueryConfigurePage));
                Wizard.MultiQueryConfigurePage = MultiQueryConfigurePage;
                function _registerMultiQueryConfigurePage(factory, reportWizardOptions) {
                    Internal.overrideSqlDataSourceWizardPage(factory, DevExpress.Analytics.Wizard.SqlDataSourceWizardPageId.MultiQueryConfigurePage, {
                        create: function () {
                            return new MultiQueryConfigurePage(reportWizardOptions);
                        },
                        resetState: function (state) {
                            delete state.sqlDataSourceWizard.customQueries;
                            delete state.sqlDataSourceWizard.sqlDataSourceJSON;
                        }
                    });
                }
                Wizard._registerMultiQueryConfigurePage = _registerMultiQueryConfigurePage;
                var MultiQueryConfigureParametersPage = (function (_super) {
                    __extends(MultiQueryConfigureParametersPage, _super);
                    function MultiQueryConfigureParametersPage(createSqlDataSourceInfo, parametersConverters, requestWrapper) {
                        var _this = _super.call(this, parametersConverters, requestWrapper) || this;
                        _this.createSqlDataSourceInfo = createSqlDataSourceInfo;
                        _this._dataSourceWizardHelper = new Internal.DataSourceWizardHelper(_this, createSqlDataSourceInfo);
                        return _this;
                    }
                    MultiQueryConfigureParametersPage.prototype.initialize = function (state) {
                        return _super.prototype.initialize.call(this, state.sqlDataSourceWizard);
                    };
                    MultiQueryConfigureParametersPage.prototype.commit = function () {
                        var _this = this;
                        return this._dataSourceWizardHelper.commit(function () { return _super.prototype.commit.call(_this); }, function (state) { return DevExpress.Analytics.Wizard._restoreSqlDataSourceFromState(state).sqlDataSource; });
                    };
                    return MultiQueryConfigureParametersPage;
                }(DevExpress.Analytics.Wizard.MultiQueryConfigureParametersPage));
                Wizard.MultiQueryConfigureParametersPage = MultiQueryConfigureParametersPage;
                function _registerMultiQueryConfigureParametersPage(factory, callbacks) {
                    Internal.overrideSqlDataSourceWizardPage(factory, DevExpress.Analytics.Wizard.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage, {
                        create: function () {
                            return new MultiQueryConfigureParametersPage(callbacks.createSqlDataSourceInfo, undefined, Internal.QBRequestWrapper);
                        }
                    });
                }
                Wizard._registerMultiQueryConfigureParametersPage = _registerMultiQueryConfigureParametersPage;
                var LegacyAddGroupingLevelPage = (function (_super) {
                    __extends(LegacyAddGroupingLevelPage, _super);
                    function LegacyAddGroupingLevelPage() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.fields = new Internal.ListViewModel(DevExpress.Analytics.Utils.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields"));
                        _this.groups = new Internal.ListViewModel(DevExpress.Analytics.Utils.getLocalization("Groups", "ASPxReportsStringId.ReportDesigner_Groups"));
                        _this.addNewGroup = function () {
                            if (_this.isCreateGroupEnabled()) {
                                _this.groups.add({ fields: ko.observableArray([_this.fields.activeItem]) });
                                _this.fields.removeActiveItem();
                            }
                        };
                        _this.appendFieldsToGroup = function () {
                            if (_this.isAppendToGroupEnabled()) {
                                _this.groups.activeItem.fields.push(_this.fields.activeItem);
                                _this.fields.removeActiveItem();
                            }
                        };
                        _this.removeGroup = function () {
                            if (_this.isRemoveGroupEnabled()) {
                                _this.fields.addRange(_this.groups.activeItem.fields());
                                _this.groups.removeActiveItem();
                            }
                        };
                        _this.moveUp = function () {
                            _this.groups.moveUp();
                        };
                        _this.moveDown = function () {
                            _this.groups.moveDown();
                        };
                        _this.fieldDblClick = function (field) {
                            _this.fields.activeItem = field;
                            _this.addNewGroup();
                        };
                        _this.fieldClick = function (e) {
                            _this.fields.activeItem = e.itemData;
                        };
                        _this.groupDblClick = function (group) {
                            _this.groups.activeItem = group;
                            _this.removeGroup();
                        };
                        _this.groupClick = function (e) {
                            _this.groups.activeItem = e.itemData;
                        };
                        return _this;
                    }
                    LegacyAddGroupingLevelPage.prototype.canFinish = function () {
                        return true;
                    };
                    LegacyAddGroupingLevelPage.prototype.isCreateGroupEnabled = function () {
                        return !!this.fields.activeItem;
                    };
                    ;
                    LegacyAddGroupingLevelPage.prototype.isAppendToGroupEnabled = function () {
                        return this.fields.activeItem && this.groups.activeItem && this.groups.activeItem.fields().length > 0;
                    };
                    ;
                    LegacyAddGroupingLevelPage.prototype.isRemoveGroupEnabled = function () {
                        return this.groups.activeItem && this.groups.activeItem.fields().length > 0;
                    };
                    ;
                    LegacyAddGroupingLevelPage.prototype.isMoveUpEnabled = function () {
                        return this.groups.isMoveUpEnabled();
                    };
                    ;
                    LegacyAddGroupingLevelPage.prototype.isMoveDownEnabled = function () {
                        return this.groups.isMoveDownEnabled();
                    };
                    ;
                    LegacyAddGroupingLevelPage.prototype.initialize = function (state) {
                        this.initialFields = state.fields || [];
                        var fields = ko.observableArray((state.fields || []).map(function (value, index, array) { return value.displayName; }));
                        this.groups.setItems((state.groups || []).map(function (value) {
                            fields.removeAll(value);
                            return { fields: ko.observableArray(value) };
                        }));
                        this.fields.setItems(fields());
                        return $.Deferred().resolve().promise();
                    };
                    LegacyAddGroupingLevelPage.prototype.commit = function () {
                        var _this = this;
                        var groups = this.groups.items.map(function (item) {
                            return item.fields();
                        });
                        var summaryColumns = [];
                        if (!this.groups.isEmpty) {
                            this.fields.items.forEach(function (fieldName) {
                                var field = DevExpress.Analytics.Internal.getFirstItemByPropertyValue(_this.initialFields, "displayName", fieldName);
                                if (field.specifics && ["integer", "float", "date"].indexOf(field.specifics.toLowerCase()) > -1) {
                                    summaryColumns.push(field);
                                }
                            });
                            summaryColumns.sort(function (a, b) { return a.name.localeCompare(b.name); });
                        }
                        return $.Deferred().resolve({
                            groups: groups,
                            summaryOptionsColumns: summaryColumns,
                        }).promise();
                    };
                    return LegacyAddGroupingLevelPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.LegacyAddGroupingLevelPage = LegacyAddGroupingLevelPage;
                function _registerLegacyAddGroupingLevelPage(factory) {
                    factory.registerMetadata(Wizard.LegacyReportWizardPageId.AddGroupingLevelPage, {
                        setState: function (data, state) {
                            state.groups = data.groups;
                            state.summaryOptionsColumns = data.summaryOptionsColumns;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.groups = defaultState.groups;
                            state.summaryOptionsColumns = defaultState.summaryOptionsColumns;
                        },
                        create: function () {
                            return new LegacyAddGroupingLevelPage();
                        },
                        template: "dxrd-page-groups",
                        description: DevExpress.Analytics.Utils.getLocalization("Create multiple groups, each with a single field value, or define several fields in the same group.", "ASPxReportsStringId.ReportDesigner_Wizard_CreateGroups")
                    });
                }
                Wizard._registerLegacyAddGroupingLevelPage = _registerLegacyAddGroupingLevelPage;
                var LegacyChooseReportLayoutPage = (function (_super) {
                    __extends(LegacyChooseReportLayoutPage, _super);
                    function LegacyChooseReportLayoutPage() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this._isGroupedReport = ko.observable(false);
                        _this._reportLayoutTypes = [
                            new Wizard.LayoutTypeItem("Columnar", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Columnar", Wizard.ReportLayout.columnar, 18),
                            new Wizard.LayoutTypeItem("Tabular", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Tabular", Wizard.ReportLayout.tabular, 18),
                            new Wizard.LayoutTypeItem("Justified", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Justified", Wizard.ReportLayout.justified, 18)
                        ];
                        _this._groupedReportLayoutsTypes = [
                            new Wizard.LayoutTypeItem("Stepped", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Stepped", Wizard.ReportLayout.stepped, 1),
                            new Wizard.LayoutTypeItem("Outline 1", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline1", Wizard.ReportLayout.outline1, 1),
                            new Wizard.LayoutTypeItem("Outline 2", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline2", Wizard.ReportLayout.outline2, 1),
                            new Wizard.LayoutTypeItem("Align Left 1", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft1", Wizard.ReportLayout.alignLeft1, 1),
                            new Wizard.LayoutTypeItem("Align Left 2", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft2", Wizard.ReportLayout.alignLeft2, 1)
                        ];
                        _this.toggleFitFieldsToPage = function () {
                            _this.fitFieldsToPage(!_this.fitFieldsToPage());
                        };
                        _this.selectedLayoutType = ko.observable(null);
                        _this.fitFieldsToPage = ko.observable(true);
                        _this.pageOrientationItems = [
                            new Wizard.PageOrientationItem("Portrait", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait", Wizard.PageOrientation.Portrait),
                            new Wizard.PageOrientationItem("Landscape", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape", Wizard.PageOrientation.Landscape)
                        ];
                        _this.selectedPageOrientation = ko.observable(_this.pageOrientationItems[0]);
                        _this.layoutTypeItems = ko.pureComputed(function () {
                            var items = _this._isGroupedReport() ? _this._groupedReportLayoutsTypes : _this._reportLayoutTypes;
                            _this.selectedLayoutType(items[0]);
                            return items;
                        });
                        _this.layoutTypeItemClick = function (item) {
                            _this.selectedLayoutType(item);
                        };
                        _this.isSelected = function (item) {
                            return _this.selectedLayoutType() === item;
                        };
                        return _this;
                    }
                    LegacyChooseReportLayoutPage.prototype.canFinish = function () {
                        return true;
                    };
                    LegacyChooseReportLayoutPage.prototype.initialize = function (state) {
                        this._isGroupedReport(state.groups.length > 0);
                        var selectedLayoutType = DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this.layoutTypeItems(), "layoutType", state.layout);
                        if (!selectedLayoutType) {
                            selectedLayoutType = DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this.layoutTypeItems(), "layoutType", this._isGroupedReport() ? Wizard.ReportLayout.stepped : Wizard.ReportLayout.columnar);
                        }
                        this.selectedLayoutType(selectedLayoutType);
                        this.fitFieldsToPage(state.fitFieldsToPage === undefined ? true : state.fitFieldsToPage);
                        this.selectedPageOrientation((state.portrait === undefined || state.portrait) ? this.pageOrientationItems[0] : this.pageOrientationItems[1]);
                        return $.Deferred().resolve().promise();
                    };
                    LegacyChooseReportLayoutPage.prototype.commit = function () {
                        return $.Deferred().resolve({
                            layout: this.selectedLayoutType().layoutType,
                            fitFieldsToPage: this.fitFieldsToPage(),
                            portrait: this.selectedPageOrientation().orientation === Wizard.PageOrientation.Portrait
                        }).promise();
                    };
                    return LegacyChooseReportLayoutPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.LegacyChooseReportLayoutPage = LegacyChooseReportLayoutPage;
                function _registerLegacyChooseReportLayoutPage(factory) {
                    factory.registerMetadata(Wizard.LegacyReportWizardPageId.ChooseReportLayoutPage, {
                        setState: function (data, state) {
                            state.fitFieldsToPage = data.fitFieldsToPage;
                            state.layout = data.layout;
                            state.portrait = data.portrait;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.fitFieldsToPage = defaultState.fitFieldsToPage;
                            state.layout = defaultState.layout;
                            state.portrait = defaultState.portrait;
                        },
                        create: function () {
                            return new LegacyChooseReportLayoutPage();
                        },
                        template: "dxrd-page-reportLayoutType",
                        description: DevExpress.Analytics.Utils.getLocalization("The report layout specifies the manner in which selected data fields are arranged on individual pages.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout")
                    });
                }
                Wizard._registerLegacyChooseReportLayoutPage = _registerLegacyChooseReportLayoutPage;
                var LegacyChooseReportStylePage = (function (_super) {
                    __extends(LegacyChooseReportStylePage, _super);
                    function LegacyChooseReportStylePage() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.reportStyleItems = [
                            new Wizard.ReportStyleItem("Bold", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Bold", Wizard.ReportStyle.Bold),
                            new Wizard.ReportStyleItem("Casual", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Casual", Wizard.ReportStyle.Casual),
                            new Wizard.ReportStyleItem("Corporate", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Corporate", Wizard.ReportStyle.Corporate),
                            new Wizard.ReportStyleItem("Compact", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Compact", Wizard.ReportStyle.Compact),
                            new Wizard.ReportStyleItem("Formal", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Formal", Wizard.ReportStyle.Formal)
                        ];
                        _this.selectedReportStyle = ko.observable(_this.reportStyleItems[0]);
                        return _this;
                    }
                    LegacyChooseReportStylePage.prototype.canFinish = function () {
                        return true;
                    };
                    LegacyChooseReportStylePage.prototype.initialize = function (state) {
                        this.selectedReportStyle(DevExpress.Analytics.Internal.getFirstItemByPropertyValue(this.reportStyleItems, "reportStyle", state.style || Wizard.ReportStyle.Bold));
                        return $.Deferred().resolve().promise();
                    };
                    LegacyChooseReportStylePage.prototype.commit = function () {
                        return $.Deferred().resolve({
                            style: this.selectedReportStyle().reportStyle
                        }).promise();
                    };
                    return LegacyChooseReportStylePage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.LegacyChooseReportStylePage = LegacyChooseReportStylePage;
                function _registerLegacyChooseReportStylePage(factory) {
                    factory.registerMetadata(Wizard.LegacyReportWizardPageId.ChooseReportStylePage, {
                        setState: function (data, state) {
                            state.style = data.style;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.style = defaultState.style;
                        },
                        create: function () {
                            return new LegacyChooseReportStylePage();
                        },
                        template: "dxrd-page-reportStyle",
                        description: DevExpress.Analytics.Utils.getLocalization("The report style specifies the appearance of your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle")
                    });
                }
                Wizard._registerLegacyChooseReportStylePage = _registerLegacyChooseReportStylePage;
                var LegacyChooseSummaryOptionsPage = (function (_super) {
                    __extends(LegacyChooseSummaryOptionsPage, _super);
                    function LegacyChooseSummaryOptionsPage() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this._columns = [];
                        _this.summaryOptions = ko.observableArray([]);
                        _this.ignoreNullValues = ko.observable(false);
                        _this.toggleIgnoreNullValues = function () {
                            _this.ignoreNullValues(!_this.ignoreNullValues());
                        };
                        return _this;
                    }
                    LegacyChooseSummaryOptionsPage.prototype.canFinish = function () {
                        return true;
                    };
                    LegacyChooseSummaryOptionsPage.prototype.initialize = function (state) {
                        var _this = this;
                        this.ignoreNullValues(state.ignoreNullValuesForSummary);
                        var changes = ko.utils.compareArrays(state.summaryOptionsColumns || [], this._columns);
                        var isColumnsChanged = changes.some(function (change, index, array) { return change.status != "retained"; });
                        if (isColumnsChanged) {
                            this._columns = state.summaryOptionsColumns || [];
                            this.summaryOptions.removeAll();
                            this._columns.forEach(function (column) {
                                _this.summaryOptions.push(new Internal.SummaryOptionsWrapper(column.name, column.displayName));
                            });
                        }
                        this.summaryOptions.notifySubscribers();
                        return $.Deferred().resolve().promise();
                    };
                    LegacyChooseSummaryOptionsPage.prototype.commit = function () {
                        return $.Deferred().resolve({
                            ignoreNullValuesForSummary: this.ignoreNullValues(),
                            summaryOptions: this.summaryOptions().map(function (value) { return value.getOptions(); })
                        }).promise();
                    };
                    return LegacyChooseSummaryOptionsPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.LegacyChooseSummaryOptionsPage = LegacyChooseSummaryOptionsPage;
                function _registerLegacyChooseSummaryOptionsPage(factory) {
                    factory.registerMetadata(Wizard.LegacyReportWizardPageId.ChooseSummaryOptionsPage, {
                        setState: function (data, state) {
                            state.summaryOptions = data.summaryOptions;
                            state.ignoreNullValuesForSummary = data.ignoreNullValuesForSummary;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.summaryOptions = defaultState.summaryOptions;
                            state.ignoreNullValuesForSummary = defaultState.ignoreNullValuesForSummary;
                        },
                        create: function () {
                            return new LegacyChooseSummaryOptionsPage();
                        },
                        template: "dxrd-page-summaryOptions",
                        description: DevExpress.Analytics.Utils.getLocalization("What summary function would you like to calculate?", "ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions")
                    });
                }
                Wizard._registerLegacyChooseSummaryOptionsPage = _registerLegacyChooseSummaryOptionsPage;
                var LegacySelectColumnsPage = (function (_super) {
                    __extends(LegacySelectColumnsPage, _super);
                    function LegacySelectColumnsPage(getFieldListItems) {
                        var _this = _super.call(this) || this;
                        _this._selectedPath = null;
                        _this._fields = [];
                        _this.select = function () {
                            _this.selectedFields.add(_this.availableFields.activeItem);
                            _this.availableFields.removeActiveItem();
                        };
                        _this.selectAll = function () {
                            _this.selectedFields.setItems(_this._fields.slice(0));
                            _this.availableFields.removeAll();
                        };
                        _this.unselect = function () {
                            _this.availableFields.add(_this.selectedFields.activeItem);
                            _this.selectedFields.removeActiveItem();
                        };
                        _this.unselectAll = function () {
                            _this.availableFields.setItems(_this._fields.slice(0));
                            _this.selectedFields.removeAll();
                        };
                        _this.availableFieldDblClick = function (field) {
                            _this.availableFields.activeItem = field;
                            _this.select();
                        };
                        _this.availableFieldClick = function (e) {
                            _this.availableFields.activeItem = e.itemData;
                        };
                        _this.selectedFieldDblClick = function (field) {
                            _this.selectedFields.activeItem = field;
                            _this.unselect();
                        };
                        _this.selectedFieldClick = function (e) {
                            _this.selectedFields.activeItem = e.itemData;
                        };
                        _this.availableFields = new Designer.Internal.ListViewModel(DevExpress.Analytics.Utils.getLocalization("Available fields", "ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields"));
                        _this.selectedFields = new Designer.Internal.ListViewModel(DevExpress.Analytics.Utils.getLocalization("Selected fields", "ASPxReportsStringId.ReportDesigner_Wizard_SelectedFields"));
                        _this._fieldListsCallback = getFieldListItems;
                        return _this;
                    }
                    LegacySelectColumnsPage.prototype.canFinish = function () {
                        return true;
                    };
                    LegacySelectColumnsPage.prototype.canNext = function () {
                        return !this.selectedFields.isEmpty;
                    };
                    LegacySelectColumnsPage.prototype.selectedPath = function () {
                        return this._selectedPath;
                    };
                    LegacySelectColumnsPage.prototype.reset = function () {
                        this._selectedPath = null;
                    };
                    LegacySelectColumnsPage.prototype.initialize = function (state) {
                        var _this = this;
                        this.selectedFields.setItems(state.fields || []);
                        if (this._selectedPath != state.dataMemberPath) {
                            return this._fieldListsCallback(new DevExpress.Analytics.Utils.PathRequest(state.dataMemberPath), Wizard._restoreDataSourceFromState(state.newDataSource || state.dataSource))
                                .done(function (fields) {
                                _this._fields = fields.filter(function (item) {
                                    return (item.specifics !== "List" && item.specifics !== "ListSource" && item.isList !== true);
                                });
                                _this._selectedPath = state.dataMemberPath;
                                _this.availableFields.setItems(_this._fields.filter(function (value) {
                                    return _this.selectedFields.items.indexOf(value) === -1;
                                }));
                            });
                        }
                        else {
                            this.availableFields.setItems(this._fields.filter(function (value) {
                                return _this.selectedFields.items.indexOf(value) === -1;
                            }));
                            return $.Deferred().resolve().promise();
                        }
                    };
                    LegacySelectColumnsPage.prototype.commit = function () {
                        return $.Deferred().resolve({
                            fields: this.selectedFields.items
                        }).promise();
                    };
                    LegacySelectColumnsPage.prototype.isSelectEnable = function () {
                        return !!this.availableFields.activeItem;
                    };
                    LegacySelectColumnsPage.prototype.isUnselectEnable = function () {
                        return !!this.selectedFields.activeItem;
                    };
                    ;
                    return LegacySelectColumnsPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.LegacySelectColumnsPage = LegacySelectColumnsPage;
                function _registerLegacySelectColumnsPage(factory, fieldListItemsCallback) {
                    factory.registerMetadata(Wizard.LegacyReportWizardPageId.SelectColumnsPage, {
                        setState: function (data, state) {
                            state.fields = data.fields;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.fields = defaultState.fields;
                        },
                        create: function () {
                            return new LegacySelectColumnsPage(fieldListItemsCallback);
                        },
                        template: "dxrd-page-columns",
                        description: DevExpress.Analytics.Utils.getLocalization("Select the columns you want to display within your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseColumns")
                    });
                }
                Wizard._registerLegacySelectColumnsPage = _registerLegacySelectColumnsPage;
                var DataMemberPageTreeListController = (function (_super) {
                    __extends(DataMemberPageTreeListController, _super);
                    function DataMemberPageTreeListController() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    DataMemberPageTreeListController.prototype.canSelect = function (value) {
                        return (this.hasItems(value.data) && !!value.path) || value.data.specifics === "none";
                    };
                    return DataMemberPageTreeListController;
                }(DevExpress.Analytics.Widgets.Internal.DataMemberTreeListController));
                var LegacyChooseDataMemberPage = (function (_super) {
                    __extends(LegacyChooseDataMemberPage, _super);
                    function LegacyChooseDataMemberPage(reportWizardOptions) {
                        var _this = _super.call(this) || this;
                        _this._rootItems = ko.observableArray([]);
                        _this._selectedPath = ko.observable(null);
                        _this._fieldListCallBack = reportWizardOptions.callbacks.fieldListsCallback;
                        _this._createSqlDataSourceInfo = reportWizardOptions.callbacks.createSqlDataSourceInfo;
                        _this._hideDataMemberSubItems = reportWizardOptions.hideDataMemberSubItems;
                        _this.scrollViewHeight = Internal._masterDetailScrollViewHeight;
                        _this.fieldListModel = {
                            itemsProvider: new DevExpress.Analytics.Internal.FieldListProvider(_this._wrapFieldListCallback(_this._fieldListCallBack), _this._rootItems),
                            selectedPath: _this._selectedPath,
                            treeListController: new DataMemberPageTreeListController()
                        };
                        return _this;
                    }
                    LegacyChooseDataMemberPage.prototype._wrapFieldListCallback = function (itemsCallback) {
                        var _this = this;
                        return function (pathRequest) {
                            if (_this._hideDataMemberSubItems) {
                                var deferred = $.Deferred();
                                deferred.resolve([]);
                                return deferred.promise();
                            }
                            else {
                                return itemsCallback(new DevExpress.Analytics.Utils.PathRequest(_this.dataSourcePath + '.' + pathRequest.fullPath), _this._dataSource);
                            }
                        };
                    };
                    Object.defineProperty(LegacyChooseDataMemberPage.prototype, "dataSourcePath", {
                        get: function () {
                            return (this._dataSource.id || this._dataSource.ref);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    LegacyChooseDataMemberPage.prototype._beginInternal = function (state) {
                        var _this = this;
                        this._dataSource = Wizard._restoreDataSourceFromState(state.newDataSource || state.dataSource);
                        if (!state.dataMemberPath) {
                            return this._fieldListCallBack(new DevExpress.Analytics.Utils.PathRequest(this.dataSourcePath), this._dataSource).done(function (fields) {
                                _this._selectedPath(null);
                                _this._rootItems(fields.map(function (value) {
                                    return {
                                        name: value.displayName,
                                        id: value.name,
                                        specifics: "List",
                                        dataSerializer: null,
                                        data: {}
                                    };
                                }));
                            });
                        }
                        else {
                            this._selectedPath(state.dataMemberPath.replace(this.dataSourcePath + ".", ""));
                            return $.Deferred().resolve().promise();
                        }
                    };
                    LegacyChooseDataMemberPage.prototype.canNext = function () {
                        return !!this._selectedPath();
                    };
                    LegacyChooseDataMemberPage.prototype.canFinish = function () {
                        return !!this._selectedPath();
                    };
                    LegacyChooseDataMemberPage.prototype.initialize = function (state) {
                        return this._beginInternal(state);
                    };
                    LegacyChooseDataMemberPage.prototype.commit = function () {
                        return $.Deferred().resolve({
                            dataMemberPath: DevExpress.Analytics.Internal.getFullPath(this.dataSourcePath, this._selectedPath()),
                            dataMemberInfo: this.fieldListModel.treeListController.selectedItem && this.fieldListModel.treeListController.selectedItem.data
                        }).promise();
                    };
                    return LegacyChooseDataMemberPage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.LegacyChooseDataMemberPage = LegacyChooseDataMemberPage;
                function _registerLegacyChooseDataMemberPage(factory, reportWizardOptions) {
                    factory.registerMetadata(Wizard.LegacyReportWizardPageId.ChooseDataMemberPage, {
                        setState: function (data, state) {
                            state.dataMemberInfo = data.dataMemberInfo;
                            state.dataMemberPath = data.dataMemberPath;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.dataMemberInfo = defaultState.dataMemberInfo;
                            state.dataMemberPath = defaultState.dataMemberPath;
                        },
                        create: function () {
                            return new LegacyChooseDataMemberPage(reportWizardOptions);
                        },
                        template: "dxrd-page-dataMember",
                        description: DevExpress.Analytics.Utils.getLocalization("The table or view you choose determines wich columns will be available in your report.", "ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataMember")
                    });
                }
                Wizard._registerLegacyChooseDataMemberPage = _registerLegacyChooseDataMemberPage;
                var LegacyReportWizard = (function (_super) {
                    __extends(LegacyReportWizard, _super);
                    function LegacyReportWizard(pageFactory, _reportWizardOptions) {
                        var _this = _super.call(this, pageFactory, _reportWizardOptions.callbacks.finishCallback) || this;
                        _this._reportWizardOptions = _reportWizardOptions;
                        _this._requestModelType = Designer.Internal.LegacyReportRequestModel;
                        _this.title = DevExpress.Analytics.Utils.getLocalization("Report Wizard", "ASPxReportsStringId.ReportDesigner_Wizard_Header");
                        return _this;
                    }
                    LegacyReportWizard.prototype._callBeforeFinishHandler = function (state, wizardModel) { };
                    LegacyReportWizard.prototype._callAfterFinishHandler = function (state, result) {
                        this.events.call("afterFinish", { state: state, wizardResult: result });
                    };
                    LegacyReportWizard.prototype.initialize = function (state) {
                        var _this = this;
                        if (state === void 0) { state = Wizard.createReportWizardState(); }
                        _super.prototype.initialize.call(this, state, function (factory, stateManager) { return new LegacyReportWizardPageIterator(factory, stateManager, _this._reportWizardOptions); });
                    };
                    LegacyReportWizard.prototype.start = function (finishCallback) {
                        if (finishCallback)
                            this["_finishCallback"] = finishCallback;
                        _super.prototype.start.call(this);
                    };
                    return LegacyReportWizard;
                }(DevExpress.Analytics.Wizard.PopupWizard));
                Wizard.LegacyReportWizard = LegacyReportWizard;
                var LegacyReportWizardPageIterator = (function (_super) {
                    __extends(LegacyReportWizardPageIterator, _super);
                    function LegacyReportWizardPageIterator(pageFactory, stateManager, reportWizardOptions) {
                        return _super.call(this, pageFactory, stateManager, reportWizardOptions) || this;
                    }
                    LegacyReportWizardPageIterator.prototype.getNextPageId = function (pageId) {
                        if (!pageId)
                            return Wizard.ReportWizardPageId.SelectReportTypePage;
                        if (pageId === Wizard.ReportWizardPageId.SelectReportTypePage && this._getCurrentState().reportType === Wizard.ReportType.Label) {
                            return Wizard.ReportWizardPageId.SelectLabelTypePage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.SelectLabelTypePage) {
                            return Wizard.ReportWizardPageId.CustomizeLabelPage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.SelectReportTypePage && (this._getCurrentState().reportType === Wizard.ReportType.Databound)) {
                            return Wizard.ReportWizardPageId.ChooseAvailableDataSourcePage;
                        }
                        else if (pageId === Wizard.ReportWizardPageId.ChooseAvailableDataSourcePage && !this._getCurrentState().dataSource) {
                            return DevExpress.Analytics.Wizard.SqlDataSourceWizardPageId.ChooseConnectionPage;
                        }
                        else if (_super.prototype.getNextPageId.call(this, pageId)) {
                            return _super.prototype.getNextPageId.call(this, pageId);
                        }
                        else if (pageId === Wizard.ReportWizardPageId.ChooseAvailableDataSourcePage && this._getCurrentState().dataSource) {
                            return Wizard.LegacyReportWizardPageId.ChooseDataMemberPage;
                        }
                        else if (pageId === DevExpress.Analytics.Wizard.DataSourceWizardPageId.ConfigureMasterDetailRelationshipsPage ||
                            pageId === DevExpress.Analytics.Wizard.SqlDataSourceWizardPageId.MultiQueryConfigurePage ||
                            pageId === DevExpress.Analytics.Wizard.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage) {
                            return Wizard.LegacyReportWizardPageId.ChooseDataMemberPage;
                        }
                        else if (pageId === Wizard.LegacyReportWizardPageId.ChooseDataMemberPage) {
                            return Wizard.LegacyReportWizardPageId.SelectColumnsPage;
                        }
                        else if (pageId === Wizard.LegacyReportWizardPageId.SelectColumnsPage) {
                            return Wizard.LegacyReportWizardPageId.AddGroupingLevelPage;
                        }
                        else if (pageId === Wizard.LegacyReportWizardPageId.AddGroupingLevelPage && this._getCurrentState().summaryOptionsColumns.length > 0) {
                            return Wizard.LegacyReportWizardPageId.ChooseSummaryOptionsPage;
                        }
                        else if (pageId === Wizard.LegacyReportWizardPageId.ChooseSummaryOptionsPage || (pageId === Wizard.LegacyReportWizardPageId.AddGroupingLevelPage && this._getCurrentState().summaryOptionsColumns.length == 0)) {
                            return Wizard.LegacyReportWizardPageId.ChooseReportLayoutPage;
                        }
                        else if (pageId === Wizard.LegacyReportWizardPageId.ChooseReportLayoutPage) {
                            return Wizard.LegacyReportWizardPageId.ChooseReportStylePage;
                        }
                        else if (pageId === Wizard.LegacyReportWizardPageId.ChooseReportStylePage) {
                            return Wizard.ReportWizardPageId.SetReportTitlePage;
                        }
                    };
                    return LegacyReportWizardPageIterator;
                }(DevExpress.Analytics.Wizard.MultiQueryDataSourceWizardPageIterator));
                Wizard.LegacyReportWizardPageIterator = LegacyReportWizardPageIterator;
                function _createLegacyReportWizard(reportWizardOptions) {
                    var factory = new DevExpress.Analytics.Wizard.PageFactory();
                    Wizard._registerCommonReportWizardPages(factory, reportWizardOptions);
                    Wizard._registerSelectReportTypePage(factory, {
                        showVertical: false,
                        canCreateDatabound: function () {
                            return reportWizardOptions.dataSources().length > 0 ||
                                reportWizardOptions.connectionStrings.sql().length > 0;
                        }
                    });
                    _registerLegacyChooseDataMemberPage(factory, reportWizardOptions);
                    _registerLegacySelectColumnsPage(factory, reportWizardOptions.callbacks.fieldListsCallback);
                    _registerLegacyAddGroupingLevelPage(factory);
                    _registerLegacyChooseSummaryOptionsPage(factory);
                    _registerLegacyChooseReportLayoutPage(factory);
                    _registerLegacyChooseReportStylePage(factory);
                    return new LegacyReportWizard(factory, reportWizardOptions);
                }
                Wizard._createLegacyReportWizard = _createLegacyReportWizard;
                var SelectDataSourcePage = (function (_super) {
                    __extends(SelectDataSourcePage, _super);
                    function SelectDataSourcePage(reportWizardOptions) {
                        var _this = _super.call(this) || this;
                        _this.reportWizardOptions = reportWizardOptions;
                        return _this;
                    }
                    SelectDataSourcePage.prototype.registerSections = function () {
                        if (this.reportWizardOptions.dataSources().length > 0) {
                            Wizard._registerChooseAvailableDataSourcePage(this._factory, this.reportWizardOptions);
                            this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.ChooseAvailableDataSourcePage);
                        }
                        var canCreateDataSource = this.reportWizardOptions.jsonDataSourceAvailable || this.reportWizardOptions.sqlDataSourceAvailable;
                        if (canCreateDataSource) {
                            Wizard._registerChooseDataSourceTypePage(this._factory, this.reportWizardOptions);
                            this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.ChooseDataSourceTypePage);
                            var meta = this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.ChooseDataSourceTypePage);
                            meta["disabledText"] = DevExpress.Analytics.Utils.getLocalization("To specify a data source, select \"No, I'd like to create a new data source\".", "AnalyticsCoreStringId.Wizard_SelectDataSourceType_Placeholder");
                        }
                        if (this.reportWizardOptions.dataSources().length > 0 && canCreateDataSource) {
                            this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.ChooseAvailableDataSourcePage, DevExpress.Analytics.Wizard.WizardSectionPosition.Top);
                            this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.ChooseDataSourceTypePage, DevExpress.Analytics.Wizard.WizardSectionPosition.Bottom);
                        }
                    };
                    SelectDataSourcePage.prototype.getNextSectionId = function (sectionId) {
                        if (!sectionId && this.reportWizardOptions.dataSources().length > 0)
                            return Wizard.FullscreenReportWizardSectionId.ChooseAvailableDataSourcePage;
                        else if (!sectionId)
                            return Wizard.FullscreenReportWizardSectionId.ChooseDataSourceTypePage;
                        else if (sectionId === Wizard.FullscreenReportWizardSectionId.ChooseAvailableDataSourcePage && !this._stateManager.getCurrentState().dataSource)
                            return Wizard.FullscreenReportWizardSectionId.ChooseDataSourceTypePage;
                    };
                    return SelectDataSourcePage;
                }(DevExpress.Analytics.Wizard.FullscreenWizardPage));
                Wizard.SelectDataSourcePage = SelectDataSourcePage;
                function _registerSelectDataSourcePage(factory, reportWizardOptions) {
                    factory.registerMetadata(Wizard.FullscreenReportWizardPageId.SelectDataSourcePage, {
                        setState: function (data, state) {
                            state.dataSourceType = data.dataSourceType;
                            state.dataSource = data.dataSource;
                        },
                        getState: function (state) {
                            return state;
                        },
                        resetState: function (state, defaultState) {
                            state.dataSource = defaultState.dataSource;
                            state.dataSourceType = defaultState.dataSourceType;
                        },
                        create: function () {
                            return new SelectDataSourcePage(reportWizardOptions);
                        },
                        navigationPanelText: DevExpress.Analytics.Utils.getLocalization("Select Data Source", "ASPxReportsStringId.ReportDesigner_Wizard_SelectDataSource"),
                        template: "dx-wizard-fullscreen-page"
                    });
                }
                Wizard._registerSelectDataSourcePage = _registerSelectDataSourcePage;
                var SpecifySqlDataSourceSettingsPage = (function (_super) {
                    __extends(SpecifySqlDataSourceSettingsPage, _super);
                    function SpecifySqlDataSourceSettingsPage() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    SpecifySqlDataSourceSettingsPage.prototype.registerSections = function () {
                        _super.prototype.registerSections.call(this);
                        [
                            this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.ConfigureMasterDetailRelationshipsPage),
                            this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.ConfigureQueryParametersPage)
                        ].forEach(function (meta) {
                            meta.canFinish = function () { return false; };
                            meta.canNext = function (page) { return page.canNext() || page.canFinish(); };
                        });
                    };
                    SpecifySqlDataSourceSettingsPage.prototype.commit = function () {
                        var _this = this;
                        var deferred = $.Deferred();
                        _super.prototype.commit.call(this).done(function (commitResult) {
                            var dataSourcePromise = _this["_dataSourceWizardOptions"].callbacks.createSqlDataSourceInfo(DevExpress.Analytics.Wizard._restoreSqlDataSourceFromState(commitResult.sqlDataSourceWizard, undefined, commitResult.dataSourceId).sqlDataSource);
                            dataSourcePromise.done(function (result) {
                                result.data = Data.ObjectItem.createNew(result.data);
                                deferred.resolve({
                                    sqlDataSourceWizard: commitResult,
                                    newDataSource: Wizard._convertToStateDataSource(result)
                                });
                            }).fail(deferred.reject);
                        });
                        return deferred.promise();
                    };
                    return SpecifySqlDataSourceSettingsPage;
                }(DevExpress.Analytics.Wizard.SpecifySqlDataSourceSettingsPage));
                Wizard.SpecifySqlDataSourceSettingsPage = SpecifySqlDataSourceSettingsPage;
                function _registerSpecifySqlDataSourceSettingsPage(factory, wizardOptions) {
                    DevExpress.Analytics.Wizard._registerSpecifySqlDataSourceSettingsPage(factory, wizardOptions);
                    Internal.overrideFullscreenDataSourceWizardPageMetadata(factory, DevExpress.Analytics.Wizard.FullscreenDataSourceWizardPageId.SpecifySqlDataSourceSettingsPage, function () { return new SpecifySqlDataSourceSettingsPage(wizardOptions); });
                }
                Wizard._registerSpecifySqlDataSourceSettingsPage = _registerSpecifySqlDataSourceSettingsPage;
                var SpecifyJsonDataSourceSettingsPage = (function (_super) {
                    __extends(SpecifyJsonDataSourceSettingsPage, _super);
                    function SpecifyJsonDataSourceSettingsPage() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    SpecifyJsonDataSourceSettingsPage.prototype.registerSections = function () {
                        _super.prototype.registerSections.call(this);
                        Wizard._registerChooseJsonSchemaPage(this._factory, this["_dataSourceWizardOptions"].callbacks);
                        var meta = this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.ChooseJsonSchemaPage);
                        meta["disabledText"] = DevExpress.Analytics.Utils.getLocalization("To select data fields, choose or create a data connection.", "AnalyticsCoreStringId.JsonDSWizard_ChooseJsonSchemaPage_Placeholder");
                    };
                    SpecifyJsonDataSourceSettingsPage.prototype.canNext = function () {
                        var section = this._sectionsProcessor.getPageById(Wizard.FullscreenReportWizardSectionId.ChooseJsonSchemaPage);
                        return section.page() && section.metadata.canNext(section.page().page);
                    };
                    return SpecifyJsonDataSourceSettingsPage;
                }(DevExpress.Analytics.Wizard.SpecifyJsonDataSourceSettingsPage));
                Wizard.SpecifyJsonDataSourceSettingsPage = SpecifyJsonDataSourceSettingsPage;
                function _registerSpecifyJsonDataSourceSettingsPage(factory, wizardOptions) {
                    DevExpress.Analytics.Wizard._registerSpecifyJsonDataSourceSettingsPage(factory, wizardOptions);
                    Internal.overrideFullscreenDataSourceWizardPageMetadata(factory, Wizard.FullscreenReportWizardPageId.SpecifyJsonDataSourceSettingsPage, function () { return new SpecifyJsonDataSourceSettingsPage(wizardOptions); });
                }
                Wizard._registerSpecifyJsonDataSourceSettingsPage = _registerSpecifyJsonDataSourceSettingsPage;
                var DefineReportLayoutPage = (function (_super) {
                    __extends(DefineReportLayoutPage, _super);
                    function DefineReportLayoutPage(_reportWizardOptions) {
                        var _this = _super.call(this) || this;
                        _this._reportWizardOptions = _reportWizardOptions;
                        return _this;
                    }
                    DefineReportLayoutPage.prototype.registerSections = function () {
                        Wizard._registerSelectDataMembersPage(this._factory, this._reportWizardOptions, Wizard.FullscreenReportWizardSectionId.SelectDataMembersPage_Members);
                        Wizard._registerAddGroupFieldsPage(this._factory);
                        Wizard._registerAddSummaryFieldsPage(this._factory);
                        var meta = this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.SelectDataMembersPage_Members);
                        meta["disabledText"] = DevExpress.Analytics.Utils.getLocalization("Loading...", "AnalyticsCoreStringId.Loading");
                        meta.description = DevExpress.Analytics.Utils.getLocalization("Select queries for the report and its detail reports.", "ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectQueries");
                        var meta = this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.AddGroupFieldsPage);
                        meta.description = DevExpress.Analytics.Utils.getLocalization("Add group fields.", "ASPxReportsStringId.ReportDesigner_Wizard_AddGroupFields");
                        var meta = this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.AddSummaryFieldsPage);
                        meta.description = DevExpress.Analytics.Utils.getLocalization("Add summary fields.", "ASPxReportsStringId.ReportDesigner_Wizard_AddSummaryFields");
                        this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.SelectDataMembersPage_Members, DevExpress.Analytics.Wizard.WizardSectionPosition.Top);
                        this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.AddGroupFieldsPage, this._reportWizardOptions.rtl ? DevExpress.Analytics.Wizard.WizardSectionPosition.BottomRight : DevExpress.Analytics.Wizard.WizardSectionPosition.BottomLeft);
                        this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.AddSummaryFieldsPage, this._reportWizardOptions.rtl ? DevExpress.Analytics.Wizard.WizardSectionPosition.BottomLeft : DevExpress.Analytics.Wizard.WizardSectionPosition.BottomRight);
                    };
                    DefineReportLayoutPage.prototype._beforeStart = function () {
                        this._sections[0].metadata.template = "dxrd-page-masterdetail-select-dataMembers";
                        var cachedItem = new DevExpress.Analytics.Wizard.Internal.WizardPageSection(Wizard.FullscreenReportWizardSectionId.SelectDataMembersPage_Fields, $.extend(true, {}, this._sections[0].metadata, {
                            template: "dxrd-page-masterdetail-select-fieldMembers",
                            description: DevExpress.Analytics.Utils.getLocalization("Select data fields to display in the report.", "ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectDataFields"),
                            disabledText: DevExpress.Analytics.Utils.getLocalization("Loading...", "AnalyticsCoreStringId.Loading")
                        }));
                        cachedItem.page = this._sections[0].page;
                        this._sections.splice(1, 0, cachedItem);
                        this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.SelectDataMembersPage_Members, this._reportWizardOptions.rtl ? DevExpress.Analytics.Wizard.WizardSectionPosition.TopRight : DevExpress.Analytics.Wizard.WizardSectionPosition.TopLeft);
                        this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.SelectDataMembersPage_Fields, this._reportWizardOptions.rtl ? DevExpress.Analytics.Wizard.WizardSectionPosition.TopLeft : DevExpress.Analytics.Wizard.WizardSectionPosition.TopRight);
                    };
                    DefineReportLayoutPage.prototype.getNextSectionId = function (sectionId) {
                        if (!sectionId)
                            return Wizard.FullscreenReportWizardSectionId.SelectDataMembersPage_Members;
                        else if (sectionId === Wizard.FullscreenReportWizardSectionId.SelectDataMembersPage_Members && !$.isEmptyObject(this._stateManager.getCurrentState().masterDetailInfoCollection) && this._stateManager.getCurrentState().masterDetailInfoCollection.some(function (item) { return item.checked !== false; })) {
                            return Wizard.FullscreenReportWizardSectionId.AddGroupFieldsPage;
                        }
                        else if (sectionId === Wizard.FullscreenReportWizardSectionId.AddGroupFieldsPage && !$.isEmptyObject(this._stateManager.getCurrentState().masterDetailSummaryOptionsColumns)) {
                            return Wizard.FullscreenReportWizardSectionId.AddSummaryFieldsPage;
                        }
                    };
                    return DefineReportLayoutPage;
                }(DevExpress.Analytics.Wizard.FullscreenWizardPage));
                Wizard.DefineReportLayoutPage = DefineReportLayoutPage;
                function _registerDefineReportLayoutPage(factory, reportWizardOptions) {
                    factory.registerMetadata(Wizard.FullscreenReportWizardPageId.DefineReportLayoutPage, {
                        create: function () {
                            return new DefineReportLayoutPage(reportWizardOptions);
                        },
                        getState: function (state) { return state; },
                        setState: function (data, state) {
                            state.masterDetailInfoCollection = data.masterDetailInfoCollection;
                            state.masterDetailGroups = data.masterDetailGroups;
                            state.masterDetailSummaryOptionsColumns = data.masterDetailSummaryOptionsColumns;
                            state.masterDetailSummariesInfo = data.masterDetailSummariesInfo;
                            state.ignoreNullValuesForSummary = data.ignoreNullValuesForSummary;
                        },
                        resetState: function (state, defaultState) {
                            state.masterDetailInfoCollection = defaultState.masterDetailInfoCollection;
                            state.masterDetailGroups = defaultState.masterDetailGroups;
                            state.masterDetailSummaryOptionsColumns = defaultState.masterDetailSummaryOptionsColumns;
                            state.masterDetailSummariesInfo = defaultState.masterDetailSummariesInfo;
                            state.ignoreNullValuesForSummary = defaultState.ignoreNullValuesForSummary;
                        },
                        navigationPanelText: DevExpress.Analytics.Utils.getLocalization("Define Report Layout", "ASPxReportsStringId.ReportDesigner_Wizard_DefineReportLayout"),
                        template: "dx-wizard-fullscreen-page"
                    });
                }
                Wizard._registerDefineReportLayoutPage = _registerDefineReportLayoutPage;
                var SpecifyPageSettingsPage = (function (_super) {
                    __extends(SpecifyPageSettingsPage, _super);
                    function SpecifyPageSettingsPage(_reportWizardOptions) {
                        var _this = _super.call(this) || this;
                        _this._reportWizardOptions = _reportWizardOptions;
                        return _this;
                    }
                    SpecifyPageSettingsPage.prototype.canNext = function () {
                        return false;
                    };
                    SpecifyPageSettingsPage.prototype.canFinish = function () {
                        return true;
                    };
                    SpecifyPageSettingsPage.prototype.registerSections = function () {
                        Wizard._registerConfigureReportPageSettingsSection(this._factory);
                        _registerSpecifyReportTitlePage(this._factory);
                        var meta = this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.ConfigurePageSettingsPage);
                        meta["recreate"] = false;
                        meta.description = DevExpress.Analytics.Utils.getLocalization("Specify page settings and a report color scheme.", "ASPxReportsStringId.ReportDesigner_Wizard_SpecifyPageSettingsColorScheme");
                        meta = this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.SpecifyReportTitlePage);
                        meta["recreate"] = false;
                        meta.description = DevExpress.Analytics.Utils.getLocalization("Specify the report title.", "ASPxReportsStringId.ReportDesigner_Wizard_SpecifyReportTitle");
                        this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.ConfigurePageSettingsPage, this._reportWizardOptions.rtl ? DevExpress.Analytics.Wizard.WizardSectionPosition.Right : DevExpress.Analytics.Wizard.WizardSectionPosition.Left);
                        this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.SpecifyReportTitlePage, this._reportWizardOptions.rtl ? DevExpress.Analytics.Wizard.WizardSectionPosition.Left : DevExpress.Analytics.Wizard.WizardSectionPosition.Right);
                    };
                    SpecifyPageSettingsPage.prototype.getNextSectionId = function (sectionId) {
                        if (!sectionId)
                            return Wizard.FullscreenReportWizardSectionId.ConfigurePageSettingsPage;
                        else if (sectionId === Wizard.FullscreenReportWizardSectionId.ConfigurePageSettingsPage)
                            return Wizard.FullscreenReportWizardSectionId.SpecifyReportTitlePage;
                    };
                    return SpecifyPageSettingsPage;
                }(DevExpress.Analytics.Wizard.FullscreenWizardPage));
                Wizard.SpecifyPageSettingsPage = SpecifyPageSettingsPage;
                function _registerSpecifyPageSettingsPage(factory, reportWizardOptions) {
                    factory.registerMetadata(Wizard.FullscreenReportWizardPageId.SpecifyPageSettingsPage, {
                        getState: function (state) {
                            return state;
                        },
                        setState: function (data, state) {
                            state.colorScheme.baseColor = data.colorScheme.baseColor;
                            state.colorScheme.name = data.colorScheme.name;
                            state.reportTitle = data.reportTitle;
                            Wizard._applyPageSetting(data.pageSetup, state.pageSetup);
                        },
                        resetState: function (state, defaultState) {
                            state.colorScheme.baseColor = defaultState.colorScheme.baseColor;
                            state.colorScheme.name = defaultState.colorScheme.name;
                            state.reportTitle = defaultState.reportTitle;
                            Wizard._applyPageSetting(defaultState.pageSetup, state.pageSetup);
                        },
                        create: function () {
                            return new SpecifyPageSettingsPage(reportWizardOptions);
                        },
                        template: "dx-wizard-fullscreen-page",
                        description: DevExpress.Analytics.Utils.getLocalization("Manage page and color settings.", "TODO"),
                        navigationPanelText: DevExpress.Analytics.Utils.getLocalization("Specify Page Settings", "ASPxReportsStringId.ReportDesigner_Wizard_SpecifyPageSettings")
                    });
                }
                Wizard._registerSpecifyPageSettingsPage = _registerSpecifyPageSettingsPage;
                var SpecifyReportTitlePage = (function (_super) {
                    __extends(SpecifyReportTitlePage, _super);
                    function SpecifyReportTitlePage() {
                        var _this = _super.call(this) || this;
                        _this._foreColor = ko.observable("white");
                        _this._masterDetailInfo = ko.observableArray();
                        _this.reportTitle = ko.observable("");
                        _this._color = ko.observable("rgba( 75, 75, 75, 1)");
                        _this._disposables.push(_this.reportTitle.subscribe(function () { return _this._onChange(); }));
                        _this._disposables.push(_this._previewPageHelper = new Wizard.PreviewPageHelper());
                        _this._previewPageHelper.updatePageSettings(Wizard.defaultPageSetupState);
                        return _this;
                    }
                    SpecifyReportTitlePage.prototype._getBrightness = function (r, g, b) {
                        r = r / 255.0;
                        g = g / 255.0;
                        b = b / 255.0;
                        var max = Math.max(r, g, b);
                        var min = Math.min(r, g, b);
                        return (max + min) / 2;
                    };
                    SpecifyReportTitlePage.prototype._fillTables = function (info) {
                        var _this = this;
                        info.forEach(function (item) {
                            var fields = item.fields.filter(function (x) { return x.checked; });
                            if (fields.length > 0) {
                                _this._masterDetailInfo.push({
                                    fields: fields.slice(0, 4)
                                });
                            }
                            if (item.relations.length > 0) {
                                _this._fillTables(item.relations);
                            }
                        });
                    };
                    SpecifyReportTitlePage.prototype.initialize = function (state) {
                        var deferred = $.Deferred();
                        this._masterDetailInfo([]);
                        if (state.colorScheme["baseColor"]) {
                            this._color(state.colorScheme["_color"]);
                            var color = state.colorScheme["baseColor"].split(',').map(function (x) { return parseInt(x); });
                            this._foreColor(this._getBrightness(color[1], color[2], color[3]) > 0.6 ? "black" : "white");
                        }
                        this.reportTitle(state.reportTitle ? state.reportTitle : "");
                        this._fillTables(state.masterDetailInfoCollection);
                        this._reportTitleVisible = !!(state.dataSource || state.newDataSource);
                        this._previewPageHelper.updatePageSettings(state.pageSetup);
                        _super.prototype.initialize.call(this, state.pageSetup).done(function () {
                            deferred.resolve();
                        });
                        return deferred.promise();
                    };
                    SpecifyReportTitlePage.prototype.commit = function () {
                        var deferred = $.Deferred();
                        deferred.resolve({
                            reportTitle: this.reportTitle()
                        });
                        return deferred.promise();
                    };
                    SpecifyReportTitlePage.prototype._reportTitlePlaceholder = function () {
                        return DevExpress.Analytics.Utils.getLocalization('Type title here...', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportTitle_Placeholder');
                    };
                    return SpecifyReportTitlePage;
                }(DevExpress.Analytics.Wizard.WizardPageBase));
                Wizard.SpecifyReportTitlePage = SpecifyReportTitlePage;
                function _registerSpecifyReportTitlePage(factory) {
                    factory.registerMetadata(Wizard.ReportWizardPageId.SetReportTitlePage, {
                        create: function () { return new SpecifyReportTitlePage(); },
                        getState: function (state) { return state; },
                        setState: function (data, state) {
                            state.reportTitle = data.reportTitle;
                        },
                        resetState: function (state, defaultState) {
                            state.reportTitle = defaultState.reportTitle;
                        },
                        template: "dxrd-page-pageSetup-preview",
                        description: DevExpress.Analytics.Utils.getLocalization("Manage page and color settings.", "TODO")
                    });
                }
                Wizard._registerSpecifyReportTitlePage = _registerSpecifyReportTitlePage;
                var SpecifyLabelSettingsPage = (function (_super) {
                    __extends(SpecifyLabelSettingsPage, _super);
                    function SpecifyLabelSettingsPage(_reportWizardOptions) {
                        var _this = _super.call(this) || this;
                        _this._reportWizardOptions = _reportWizardOptions;
                        return _this;
                    }
                    SpecifyLabelSettingsPage.prototype.registerSections = function () {
                        Wizard._registerSelectLabelTypePage(this._factory);
                        Wizard._registerCustomizeLabelPage(this._factory);
                        this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.SelectLabelTypePage)["recreate"] = false;
                        this._factory.getMetadata(Wizard.FullscreenReportWizardSectionId.CustomizeLabelPage)["recreate"] = false;
                        this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.SelectLabelTypePage, this._reportWizardOptions.rtl ? DevExpress.Analytics.Wizard.WizardSectionPosition.Right : DevExpress.Analytics.Wizard.WizardSectionPosition.Left);
                        this._setSectionPosition(Wizard.FullscreenReportWizardSectionId.CustomizeLabelPage, this._reportWizardOptions.rtl ? DevExpress.Analytics.Wizard.WizardSectionPosition.Left : DevExpress.Analytics.Wizard.WizardSectionPosition.Right);
                    };
                    SpecifyLabelSettingsPage.prototype.canNext = function () {
                        return false;
                    };
                    SpecifyLabelSettingsPage.prototype.getNextSectionId = function (sectionId) {
                        if (!sectionId) {
                            return Wizard.FullscreenReportWizardSectionId.SelectLabelTypePage;
                        }
                        else if (sectionId === Wizard.FullscreenReportWizardSectionId.SelectLabelTypePage)
                            return Wizard.FullscreenReportWizardSectionId.CustomizeLabelPage;
                    };
                    return SpecifyLabelSettingsPage;
                }(DevExpress.Analytics.Wizard.FullscreenWizardPage));
                Wizard.SpecifyLabelSettingsPage = SpecifyLabelSettingsPage;
                function _registerSpecifyLabelSettingsPage(factory, reportWizardOptions) {
                    factory.registerMetadata(Wizard.FullscreenReportWizardPageId.SpecifyLabelSettingsPage, {
                        setState: function (data, state) {
                            if (data && (!state.labelDetails || data.labelDetails.id !== state.labelDetails.id))
                                state.labelDetails = data.labelDetails;
                            state.labelDetails.width = data.labelDetails.width;
                            state.labelDetails.height = data.labelDetails.height;
                            state.labelDetails.hPitch = data.labelDetails.hPitch;
                            state.labelDetails.vPitch = data.labelDetails.vPitch;
                            state.labelDetails.topMargin = data.labelDetails.topMargin;
                            state.labelDetails.leftMargin = data.labelDetails.leftMargin;
                            state.labelDetails.rightMargin = data.labelDetails.rightMargin;
                            state.labelDetails.bottomMargin = data.labelDetails.bottomMargin;
                            state.labelDetails.unit = data.labelDetails.unit;
                            state.labelDetails.paperKindId = data.labelDetails.paperKindId;
                        },
                        getState: function (state) { return state; },
                        resetState: function (state, defaultState) {
                            state.labelDetails = defaultState.labelDetails;
                        },
                        create: function () {
                            return new SpecifyLabelSettingsPage(reportWizardOptions);
                        },
                        navigationPanelText: DevExpress.Analytics.Utils.getLocalization("Specify Page Settings", "ASPxReportsStringId.ReportDesigner_Wizard_SpecifyPageSettings"),
                        template: "dx-wizard-fullscreen-page",
                        description: DevExpress.Analytics.Utils.getLocalization("Choose the page size and customize the label's parameters.", "TODO")
                    });
                }
                Wizard._registerSpecifyLabelSettingsPage = _registerSpecifyLabelSettingsPage;
                var FullscreenReportWizard = (function (_super) {
                    __extends(FullscreenReportWizard, _super);
                    function FullscreenReportWizard(pageFactory, _reportWizardOptions) {
                        var _this = _super.call(this, pageFactory, _reportWizardOptions.callbacks.finishCallback) || this;
                        _this._reportWizardOptions = _reportWizardOptions;
                        _this._requestModelType = Designer.Internal.MasterDetailRequestModel;
                        _this._availableDataSources = ko.observable([]);
                        _this._extendCssClass = "dxrd-master-detail-report-wizard " + _this._extendCssClass;
                        return _this;
                    }
                    FullscreenReportWizard.prototype._callBeforeFinishHandler = function (state, wizardModel) { };
                    FullscreenReportWizard.prototype._callAfterFinishHandler = function (state, result) {
                        this.events.call("afterFinish", { state: state, wizardResult: result });
                    };
                    FullscreenReportWizard.prototype._description = function () {
                        return DevExpress.Analytics.Utils.getLocalization("Report Wizard", "ASPxReportsStringId.ReportDesigner_Wizard_Header");
                    };
                    FullscreenReportWizard.prototype.initialize = function (state) {
                        var _this = this;
                        if (state === void 0) { state = Wizard.createReportWizardState(); }
                        if (this._reportWizardOptions.sqlDataSourceAvailable || !DevExpress.Analytics.Internal.isEmptyObject(state.sqlDataSourceWizard)) {
                            state.dataSourceType = DevExpress.Analytics.Wizard.DataSourceType.Sql;
                        }
                        else if (this._reportWizardOptions.jsonDataSourceAvailable || state.jsonDataSourceWizard.jsonSource) {
                            state.dataSourceType = DevExpress.Analytics.Wizard.DataSourceType.Json;
                        }
                        else {
                            state.dataSourceType = DevExpress.Analytics.Wizard.DataSourceType.NoData;
                        }
                        _super.prototype.initialize.call(this, state, function (factory, stateManager) { return new FullscreenReportWizardPageIterator(factory, stateManager, function (page) { return _this._onResetPage(page); }); });
                    };
                    return FullscreenReportWizard;
                }(DevExpress.Analytics.Wizard.FullscreenWizard));
                Wizard.FullscreenReportWizard = FullscreenReportWizard;
                var FullscreenReportWizardPageIterator = (function (_super) {
                    __extends(FullscreenReportWizardPageIterator, _super);
                    function FullscreenReportWizardPageIterator() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    FullscreenReportWizardPageIterator.prototype.getNextPageId = function (pageId) {
                        if (!pageId)
                            return Wizard.FullscreenReportWizardPageId.SelectReportTypePage;
                        if (pageId === Wizard.FullscreenReportWizardPageId.SelectReportTypePage && this._getCurrentState().reportType === Wizard.ReportType.Label) {
                            return Wizard.FullscreenReportWizardPageId.SpecifyLabelSettingsPage;
                        }
                        else if (pageId === Wizard.FullscreenReportWizardPageId.SelectReportTypePage) {
                            return Wizard.FullscreenReportWizardPageId.SelectDataSourcePage;
                        }
                        else if (pageId === Wizard.FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSource) {
                            return Wizard.FullscreenReportWizardPageId.DefineReportLayoutPage;
                        }
                        else if (pageId === Wizard.FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSourceType === DevExpress.Analytics.Wizard.DataSourceType.Json) {
                            return DevExpress.Analytics.Wizard.FullscreenDataSourceWizardPageId.SpecifyJsonDataSourceSettingsPage;
                        }
                        else if (pageId === Wizard.FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSourceType === DevExpress.Analytics.Wizard.DataSourceType.Sql) {
                            return DevExpress.Analytics.Wizard.FullscreenDataSourceWizardPageId.SpecifySqlDataSourceSettingsPage;
                        }
                        else if (pageId === Wizard.FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSourceType === DevExpress.Analytics.Wizard.DataSourceType.NoData) {
                            return Wizard.FullscreenReportWizardPageId.SpecifyPageSettingsPage;
                        }
                        else if (pageId === DevExpress.Analytics.Wizard.FullscreenDataSourceWizardPageId.SpecifySqlDataSourceSettingsPage) {
                            return Wizard.FullscreenReportWizardPageId.DefineReportLayoutPage;
                        }
                        else if (pageId === DevExpress.Analytics.Wizard.FullscreenDataSourceWizardPageId.SpecifyJsonDataSourceSettingsPage) {
                            return Wizard.FullscreenReportWizardPageId.DefineReportLayoutPage;
                        }
                        else if (pageId === Wizard.FullscreenReportWizardPageId.DefineReportLayoutPage) {
                            return Wizard.FullscreenReportWizardPageId.SpecifyPageSettingsPage;
                        }
                    };
                    return FullscreenReportWizardPageIterator;
                }(DevExpress.Analytics.Wizard.PageIterator));
                Wizard.FullscreenReportWizardPageIterator = FullscreenReportWizardPageIterator;
                function _registerFullscreenReportWizardPages(factory, reportWizardOptions) {
                    Wizard._registerSelectReportTypePage(factory, {
                        canCreateDatabound: function () {
                            return reportWizardOptions.dataSources().length > 0 ||
                                reportWizardOptions.connectionStrings.sql().length > 0 ||
                                reportWizardOptions.connectionStrings.json().length > 0 ||
                                (reportWizardOptions.canCreateNewJsonDataSource && reportWizardOptions.wizardSettings.enableJsonDataSource);
                        },
                        showVertical: true
                    });
                    _registerSelectDataSourcePage(factory, reportWizardOptions);
                    _registerSpecifySqlDataSourceSettingsPage(factory, reportWizardOptions);
                    _registerSpecifyJsonDataSourceSettingsPage(factory, reportWizardOptions);
                    _registerDefineReportLayoutPage(factory, reportWizardOptions);
                    _registerSpecifyLabelSettingsPage(factory, reportWizardOptions);
                    _registerSpecifyPageSettingsPage(factory, reportWizardOptions);
                }
                Wizard._registerFullscreenReportWizardPages = _registerFullscreenReportWizardPages;
                function _createFullscreenReportWizard(reportWizardOptions) {
                    var factory = new DevExpress.Analytics.Wizard.FullscreenWizardPageFactory();
                    _registerFullscreenReportWizardPages(factory, reportWizardOptions);
                    return new FullscreenReportWizard(factory, reportWizardOptions);
                }
                Wizard._createFullscreenReportWizard = _createFullscreenReportWizard;
            })(Wizard = Designer.Wizard || (Designer.Wizard = {}));
            (function (Widgets) {
                Widgets.groups = {
                    "Styles": {
                        info: Controls.Metadata.stylesInfo,
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Styles", "DevExpress.XtraReports.UI.XRPivotGrid.Styles"); }
                    },
                    "Appearance": {
                        info: [
                            Chart.Internal.appearanceName, Controls.Metadata.pivotGridAppearances, Controls.Metadata.alignment, Controls.Metadata.backColor, Controls.Metadata.borderColor,
                            Controls.Metadata.borderDashStyle, Controls.Metadata.borderDashStyleCrossband, Controls.Metadata.borderWidth, Controls.Metadata.borders,
                            Controls.PivotGrid.Metadata.caption, Controls.PivotGrid.Metadata.cellFormat, Controls.PivotGrid.Metadata.columnValueLineCount,
                            Controls.PivotGrid.Metadata.displayFolder, Controls.PivotGrid.Metadata.emptyCellText, Controls.PivotGrid.Metadata.emptyValueText,
                            Controls.Metadata.fillColor, Controls.Metadata.font, Controls.Metadata.characterCombFont, Controls.Metadata.foreColor,
                            Controls.Metadata.glyphOptions,
                            Controls.PivotGrid.Metadata.grandTotalCellFormat, Controls.PivotGrid.Metadata.grandTotalText,
                            Controls.Metadata.lineDirection, Controls.Metadata.lineStyle, Controls.Metadata.lineWidth, Controls.Metadata.padding, Controls.Metadata.pageColor,
                            Chart.Internal.paletteName, Controls.Metadata.imageType, Controls.PivotGrid.Metadata.rowValueLineCount, Controls.Metadata.sparklineFake,
                            Controls.Metadata.stylePriority, Controls.Metadata.textAlignment, Controls.Metadata.textTrimming, Controls.PivotGrid.Metadata.totalCellFormat,
                            Controls.PivotGrid.Metadata.totalValueFormat, Controls.PivotGrid.Metadata.valueFormat, Controls.Metadata.viewStyle, Controls.Metadata.viewTheme,
                            Controls.Metadata.viewType, Controls.Metadata.watermark, Controls.Metadata.formattingRuleLinks
                        ],
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Appearance", "DevExpress.XtraReports.UI.XRPivotGrid.Appearance"); }
                    },
                    "Behavior": {
                        info: [
                            Controls.PivotGrid.Metadata.allowedAreas, Controls.Metadata.anchorVertical, Controls.Metadata.anchorHorizontal, Controls.Metadata.angle,
                            Controls.PivotGrid.Metadata.area, Controls.PivotGrid.Metadata.areaIndexEditable, Controls.Metadata.autoModule, Controls.Metadata.allowMarkupText, Controls.Metadata.autoWidth,
                            Controls.Metadata.barCodeOrientation, Controls.Metadata.canGrow, Controls.Metadata.canPublish, Controls.Metadata.canShrink, Controls.Metadata.conditionObj,
                            Bands.Metadata.drillDownControl, Bands.Metadata.drillDownDetailReportExpanded, Bands.Metadata.hierarchyPrintOptions,
                            Controls.Metadata.generateOwnPages,
                            Controls.PivotGrid.Metadata.groupInterval, Controls.PivotGrid.Metadata.groupIntervalNumericRange, Controls.PivotGrid.Metadata.totalsVisibility,
                            Controls.Metadata.displayName, Controls.Metadata.formatting, Bands.Metadata.groupFields, Bands.Metadata.groupUnion, Bands.Metadata.groupFooterUnion,
                            Controls.Metadata.keepTogether, Bands.Metadata.keepTogetherWithDetailReports, Bands.Metadata.level,
                            Controls.Metadata.moduleInfo, Controls.Metadata.multiline, Bands.Metadata.multiColumn,
                            Bands.Metadata.pageBreak, Controls.Metadata.pageInfo, Bands.Metadata.printAtBottom, Bands.Metadata.printOn, Controls.Metadata.processDuplicatesMode, Controls.Metadata.processDuplicatesTarget, Controls.Metadata.processNullValues,
                            Bands.Metadata.repeatEveryPage, Controls.Metadata.measureUnit, Chart.Internal.rotated, Controls.Metadata.runningBand, Controls.Metadata.requestParameters, Controls.Metadata.rowSpan,
                            Controls.Metadata.segmentWidth, Controls.Metadata.shapeFake, Controls.Metadata.sizing, Controls.Metadata.imageAlignment, Controls.Metadata.showPreviewMarginLines, Controls.Metadata.showText, Controls.Metadata.startPageNumber, Controls.Metadata.stretch, Controls.Metadata.barcodeFake,
                            Controls.Metadata.textFitMode, Controls.Metadata.verticalContentSplitting, Controls.Metadata.visible, Controls.Metadata.wordWrap, Controls.Metadata.scriptLanguage,
                            Controls.Metadata.reportExportOptionsSerializationInfo, Controls.Metadata.horizontalContentSplitting,
                            Controls.Metadata.scriptReferencesString, Controls.Metadata.allScripts, Bands.Metadata.sortingSummary,
                            Controls.Metadata.tocTitle, Controls.Metadata.tocLevelDefault, Controls.Metadata.tocLevels, Controls.Metadata.maxNestingLevel,
                            Controls.Metadata.editOptions, Controls.Metadata.textEditOptions, Controls.Metadata.checkEditOptions, Controls.Metadata.imageEditOptions, Controls.Metadata.interactiveSorting, Controls.PivotGrid.Metadata.sortBySummary,
                            Controls.Metadata.processHiddenCellMode
                        ],
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Behavior", "ReportStringId.CatBehavior"); }
                    },
                    "Data": {
                        info: [
                            Controls.Metadata.actualValue, Chart.Internal.seriesDataMember,
                            Controls.Metadata.checkState, Controls.Metadata.checked, Chart.Internal.chartDataSource,
                            Controls.Metadata.dataSource, Controls.Metadata.dataMember, Controls.Metadata.dataAdapter, Controls.PivotGrid.Metadata.expandedInFieldsGroup, Chart.Internal.pivotGridDataSourceOptions,
                            Controls.PivotGrid.Metadata.fieldName, Controls.Metadata.filterStringEditable,
                            Controls.Metadata.imageSource, Controls.Metadata.imageUrl, Controls.Metadata.tickmarkCount, Controls.Metadata.maximum, Controls.Metadata.minimum, Controls.Metadata.nullValueText, Controls.Metadata.prefilter,
                            Controls.PivotGrid.Metadata.runningTotal, Bands.Metadata.sortFields, Controls.Metadata.summary, Controls.PivotGrid.Metadata.showNewValues,
                            Controls.PivotGrid.Metadata.sortMode, Controls.PivotGrid.Metadata.sortOrder, Controls.PivotGrid.Metadata.summaryDisplayType,
                            Controls.PivotGrid.Metadata.summaryType,
                            Controls.Metadata.targetValue, Controls.Metadata.tag, Controls.Metadata.text, Controls.Metadata.textArea, Controls.Metadata.rtf, Controls.Metadata.textRtf, Controls.Metadata.serializableRtfString, Controls.PivotGrid.Metadata.topValueCount, Controls.PivotGrid.Metadata.topValueShowOthers, Controls.PivotGrid.Metadata.topValueType,
                            Controls.PivotGrid.Metadata.unboundExpression, Controls.PivotGrid.Metadata.unboundExpressionMode, Controls.PivotGrid.Metadata.unboundFieldName, Controls.PivotGrid.Metadata.unboundType, Controls.PivotGrid.Metadata.useNativeFormat,
                            Controls.Metadata.xlsxFormatString,
                            Controls.PivotGrid.Metadata.pivotGridFieldsSerializable,
                            Controls.Metadata.valueMember, Controls.Metadata.valueRange,
                            Controls.Metadata.reportSourceUrl, Controls.Metadata.calculatedFields, Controls.Metadata.parameterBindings, Controls.Metadata.parametersInfo,
                            Data.Metadata.dataBindings([]), Controls.Metadata.textFormatString
                        ],
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Data", "ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data"); }
                    },
                    "Design": {
                        info: [Controls.Metadata.name, Controls.Metadata.snapGridSize, Controls.Metadata.drawWatermark],
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Design", "ReportStringId.CatDesign"); }
                    },
                    "Layout": {
                        info: [
                            Controls.Metadata.cellHeight, Controls.Metadata.cellHorizontalSpacing, Controls.Metadata.cellSizeMode, Controls.Metadata.cellVerticalSpacing, Controls.Metadata.cellWidth,
                            Controls.Metadata.startBand, Controls.Metadata.startPoint, Controls.Metadata.endBand, Controls.Metadata.endPoint, Bands.Metadata.height,
                            Controls.Metadata.location, Controls.Metadata.size, Controls.PivotGrid.Metadata.minWidth, Controls.Metadata.width
                        ],
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Layout", "DevExpress.XtraReports.UI.MultiColumn.Layout"); }
                    },
                    "Navigation": {
                        info: [
                            Controls.Metadata.bookmark, Controls.Metadata.bookmarkParent, Controls.Metadata.bookmarkDuplicateSuppress, Controls.Metadata.target, Controls.Metadata.navigateUrl
                        ],
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Navigation", "ASPxReportsStringId.DocumentViewer_RibbonNavigationGroupText"); }
                    },
                    "Page Settings": {
                        info: [
                            Controls.Metadata.landscape, Controls.Metadata.rollPaper, Controls.Metadata.pageWidth, Controls.Metadata.pageHeight, Controls.Metadata.paperKind, Controls.Metadata.margins
                        ],
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Page Settings", "DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PageSettings"); }
                    },
                    "Printing": {
                        info: [Controls.Metadata.rtl, Controls.Metadata.rtlReport, Controls.Metadata.rtlLayout, Controls.Metadata.reportPrintOptions],
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Printing", "ReportStringId.CatPrinting"); }
                    },
                    "Options": {
                        info: Controls.Metadata.pivotGridOptions.concat(Controls.PivotGrid.Metadata.options),
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Options", "DevExpress.XtraPivotGrid.PivotGridFieldBase.Options"); }
                    },
                    "KPI": {
                        info: [Controls.PivotGrid.Metadata.KPIGraphic],
                        displayName: function () { return DevExpress.Analytics.Utils.getLocalization("Appearance", "DevExpress.XtraReports.UI.XRPivotGrid.Appearance"); }
                    },
                };
            })(Widgets = Designer.Widgets || (Designer.Widgets = {}));
            (function (Tools) {
                var NavigateTab = (function (_super) {
                    __extends(NavigateTab, _super);
                    function NavigateTab(options) {
                        var _this = _super.call(this) || this;
                        _this._isReportLoading = options.isReportLoading;
                        _this._callbacks = options.callbacks;
                        _this.context = ko.observable(_this._callbacks.createContext(options.report, options.url));
                        _this._disposables.push(_this.displayName = ko.computed(function () { return _this._generateDisplayName(_this.context().report); }));
                        _this.undoEngine = new DevExpress.Analytics.Utils.UndoEngine(_this.context, ["surface", "reportSource"], "getInfo");
                        _this.isDirty = _this.undoEngine.isDirty;
                        _this.isModified = _this.undoEngine.isDirty;
                        _this._disposables.push(_this.report = _this._createReport());
                        _this._disposables.push(_this.url = _this._createReportUrl());
                        _this._callbacks.afterInititalize(_this);
                        return _this;
                    }
                    NavigateTab.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this.undoEngine["_callDisposeFunction"](this.context());
                        this.context().dispose();
                    };
                    NavigateTab.prototype._generateDisplayName = function (model) {
                        var name = model && (model.displayNameObject() || model.name());
                        return name;
                    };
                    NavigateTab.prototype._createReport = function () {
                        var _this = this;
                        return ko.computed({
                            read: function () { return _this.context().report; },
                            write: function (newVal) { return _this.changeContext(newVal, _this.context().url()); }
                        });
                    };
                    NavigateTab.prototype._createReportUrl = function () {
                        var _this = this;
                        return ko.computed({
                            read: function () { return _this.context().url(); },
                            write: function (newVal) { return _this.context().url(newVal); }
                        });
                    };
                    NavigateTab.prototype.changeContext = function (report, reportUrl) {
                        this.context(this._callbacks.createContext(report, reportUrl));
                        this._isReportLoading(false);
                    };
                    NavigateTab.prototype.resetIsModified = function () {
                        this.undoEngine.isDirty(false);
                        this.undoEngine.clearHistory();
                    };
                    NavigateTab.prototype.refresh = function () {
                        var _this = this;
                        this._isReportLoading(true);
                        Internal.ReportStorageWeb.getReportByUrl((this.context().url())).done(function (result) {
                            _this.report(result);
                        });
                    };
                    NavigateTab.prototype.refreshSubreports = function () {
                        this.context().controlsHelper && this.context().controlsHelper.allControls()
                            .filter(function (x) { return x instanceof Controls.XRSubreportViewModel; })
                            .forEach(function (x) { return x.updateParameters(); });
                    };
                    return NavigateTab;
                }(DevExpress.Analytics.Utils.Disposable));
                Tools.NavigateTab = NavigateTab;
                var NavigateByReports = (function (_super) {
                    __extends(NavigateByReports, _super);
                    function NavigateByReports(options) {
                        var _this = _super.call(this) || this;
                        _this._isReportLoading = ko.observable(false);
                        _this.save = function (tab) { return void 0; };
                        _this.height = ko.observable(0);
                        _this.tabs = ko.observableArray([]);
                        _this._selectedIndex = ko.observable(-1);
                        _this.selectedIndex = ko.computed({
                            read: function () { return _this._selectedIndex(); },
                            write: function (value) { if (value != -1)
                                _this._selectedIndex(value); }
                        });
                        _this.allowMDI = options.allowMDI != undefined ? options.allowMDI : true;
                        _this.knownEnums = options.knownEnums;
                        _this._callbacks = options.callbacks || {};
                        _this._selection = options.selection;
                        _this._initializeOptions = options.initOptions;
                        var currentTab = null;
                        _this._disposables.push(_this.selectedIndex);
                        _this._disposables.push(_this.currentTab = ko.pureComputed(function () {
                            if (_this.selectedIndex() !== -1) {
                                var oldValue = currentTab;
                                currentTab = _this.tabs.peek()[_this.selectedIndex()];
                                if (currentTab !== oldValue)
                                    _this._isReportLoading(true);
                                return currentTab;
                            }
                            else {
                                return null;
                            }
                        }));
                        if (options.report)
                            _this.addTab(options.report, options.reportUrl || ko.observable(null));
                        _this._disposables.push(_this.currentTab.subscribe(function (newVal) {
                            setTimeout(function () {
                                _this._isReportLoading(false);
                                _this.height.notifySubscribers();
                                _this.checkHeight();
                                _this.currentTab() && _this.currentTab().refreshSubreports();
                                _this._callbacks.tabChanged && _this._callbacks.tabChanged(newVal);
                            }, 1);
                        }));
                        return _this;
                    }
                    NavigateByReports.prototype._removeTab = function (tab) {
                        var _this = this;
                        var removingDeferred = $.Deferred();
                        if (!this._callbacks.reportTabClosing || !this._callbacks.reportTabClosing(tab, removingDeferred)) {
                            removingDeferred.resolve();
                        }
                        removingDeferred.done(function () {
                            var currentIndex = _this._selectedIndex(), closingIndex = _this.tabs().indexOf(tab), newIndex = (currentIndex < closingIndex || currentIndex === closingIndex && currentIndex < _this.tabs().length - 1)
                                ? currentIndex
                                : currentIndex - 1;
                            _this.tabs.remove(tab);
                            _this._selectedIndex(newIndex);
                            if (newIndex === currentIndex)
                                _this.selectedIndex.notifySubscribers();
                            _this._callbacks.reportTabClosed && _this._callbacks.reportTabClosed(tab);
                            tab.dispose();
                        });
                        return removingDeferred.promise();
                    };
                    NavigateByReports.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        this._selectedIndex(-1);
                        this.disposeObservableArray(this.tabs);
                        this.resetObservableArray(this.tabs);
                    };
                    NavigateByReports.prototype._closeTab = function (deletedTab) {
                        var closingDeferred = $.Deferred();
                        deletedTab.close = closingDeferred;
                        if (deletedTab.isDirty()) {
                            this.save(deletedTab);
                        }
                        else {
                            closingDeferred.resolve();
                        }
                        return closingDeferred.promise();
                    };
                    NavigateByReports.prototype._closeAll = function (deferred) {
                        var _this = this;
                        if (this.tabs().length === 0) {
                            deferred.resolve();
                            return;
                        }
                        var tab = this.tabs()[this.tabs().length - 1];
                        this._closeTab(tab).done(function () {
                            _this._removeTab(tab)
                                .done(function () { return _this._closeAll(deferred); })
                                .fail(function () { return deferred.reject(); });
                        });
                    };
                    NavigateByReports.prototype._getTabByControl = function (report, reportUrl) {
                        return this.tabs().filter(function (tab) { return reportUrl ? tab.context().url() === reportUrl : tab.context().report === report; })[0];
                    };
                    NavigateByReports.prototype._addTab = function (report, url) {
                        var _this = this;
                        var newTab = new NavigateTab({
                            report: report,
                            url: url,
                            isReportLoading: this._isReportLoading,
                            callbacks: {
                                afterInititalize: function (tab) {
                                    tab._disposables.push(tab.displayName.subscribe(function () { return _this.checkHeight(); }));
                                    tab.icon = !_this.allowMDI && _this.tabs().length === 0 ? undefined : "dx-icon-close";
                                    if (!tab.displayName()) {
                                        tab.context().report.name(DevExpress.Analytics.Internal.getUniqueName(_this.tabs().map(function (t) { return t.displayName(); }), "Report"));
                                        tab.undoEngine.clearHistory();
                                    }
                                    tab._disposables.push(tab.context.subscribe(function (newVal) { return _this.height.notifySubscribers(); }));
                                },
                                createContext: function (report, url) {
                                    return new ReportDesignerContext({
                                        report: report,
                                        selection: _this._selection,
                                        designerCallbacks: _this._callbacks,
                                        knownEnums: _this.knownEnums,
                                        initializeOptions: _this._initializeOptions,
                                        url: url
                                    });
                                }
                            }
                        });
                        this.tabs.push(newTab);
                        this.switch(newTab);
                        newTab.undoEngine.clearHistory();
                    };
                    NavigateByReports.prototype.changeContext = function (report, reportUrl) {
                        if (!this.currentTab())
                            this.addTab(report, reportUrl);
                        else {
                            this.currentTab().changeContext(report, ko.unwrap(reportUrl || this.currentTab().url));
                        }
                    };
                    NavigateByReports.prototype.init = function (isLoading) {
                        this._isReportLoading = isLoading;
                    };
                    NavigateByReports.prototype.removeTab = function (tab, force) {
                        var _this = this;
                        if (force === void 0) { force = false; }
                        if (force)
                            return this._removeTab(tab);
                        this._closeTab(tab).done(function () {
                            _this._removeTab(tab);
                        });
                    };
                    NavigateByReports.prototype.closeAll = function () {
                        var deferred = $.Deferred();
                        this._closeAll(deferred);
                        return deferred.promise();
                    };
                    NavigateByReports.prototype.switch = function (tab) {
                        this._selectedIndex(this.tabs().indexOf(tab));
                    };
                    NavigateByReports.prototype.goToSubreport = function (subreportSurface) {
                        var _this = this;
                        if (Internal.reportStorageWebIsRegister) {
                            var subreportControl = subreportSurface.getControlModel();
                            var url = ko.unwrap(subreportControl.reportSourceUrl);
                            if ((function (args) { return void (_this._callbacks.reportOpening && _this._callbacks.reportOpening(args)) || args; })({ url: url, cancel: false }).cancel)
                                return;
                            var self = this;
                            if (url) {
                                Internal.ReportStorageWeb.getReportByUrl(url).done(function (result) {
                                    _this.addTab(result, subreportControl.reportSourceUrl);
                                });
                            }
                            else {
                                this.addTab(subreportControl.cloneReportSource(), subreportControl.reportSourceUrl);
                            }
                        }
                    };
                    NavigateByReports.prototype.addTab = function (report, url) {
                        if (url === void 0) { url = ko.observable(""); }
                        var tab = this._getTabByControl(report, url());
                        if (!tab) {
                            this._addTab(report, url);
                            var onOpened = this._callbacks.reportOpened;
                            onOpened && setTimeout(function () {
                                onOpened && onOpened({ report: report, url: ko.unwrap(url) });
                            }, 10);
                        }
                        else {
                            this.switch(tab);
                        }
                    };
                    NavigateByReports.prototype.checkHeight = function () {
                        var currentHeight = $(".dxrd-navigation-panel-wrapper").outerHeight();
                        if (this.height() !== currentHeight) {
                            this.height(currentHeight);
                        }
                    };
                    return NavigateByReports;
                }(DevExpress.Analytics.Utils.Disposable));
                Tools.NavigateByReports = NavigateByReports;
            })(Tools = Designer.Tools || (Designer.Tools = {}));
            (function (Internal) {
                var ReportMenuSettings = (function (_super) {
                    __extends(ReportMenuSettings, _super);
                    function ReportMenuSettings() {
                        var _this = _super.call(this) || this;
                        _this.appMenuVisible = ko.observable(false);
                        _this._$menuElement = null;
                        _this.isMenuCollapsed = ko.observable(false);
                        _this.toggleAppMenu = function (event) {
                            var canToggle = !event || !_this._$menuElement.is(event.target) && !_this._$menuElement.find(event.target).length;
                            canToggle && _this._toggleAppMenu();
                            return canToggle;
                        };
                        return _this;
                    }
                    ReportMenuSettings.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        DevExpress["events"].off(document, 'dxpointerdown', this.toggleAppMenu);
                        this._$menuElement = null;
                    };
                    ReportMenuSettings.prototype.setMenuElement = function ($element) {
                        this._$menuElement = $element;
                    };
                    ReportMenuSettings.prototype._toggleAppMenu = function () {
                        this.appMenuVisible(!this.appMenuVisible());
                        if (this.appMenuVisible()) {
                            DevExpress["events"].on(document, 'dxpointerdown', this.toggleAppMenu);
                        }
                        else {
                            this.isMenuCollapsed(false);
                            DevExpress["events"].off(document, 'dxpointerdown', this.toggleAppMenu);
                        }
                    };
                    ReportMenuSettings.prototype.generate = function () {
                        var _this = this;
                        var result = _super.prototype.generate.call(this);
                        if (this.isMenuCollapsed)
                            result["isMenuCollapsed"] = this.isMenuCollapsed;
                        result["setMenuElement"] = function ($element) { return _this.setMenuElement($element); };
                        return result;
                    };
                    return ReportMenuSettings;
                }(DevExpress.Analytics.Internal.MenuSettings));
                Internal.ReportMenuSettings = ReportMenuSettings;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            var ReportDesignerContext = (function (_super) {
                __extends(ReportDesignerContext, _super);
                function ReportDesignerContext(options) {
                    var _this = _super.call(this) || this;
                    _this.report = options.report || new Controls.ReportViewModel(options.data);
                    _this.url = ko.isObservable(options.url) ? options.url : ko.observable(options.url);
                    if (options.dataSourceRefs)
                        _this.report.dataSourceRefs = options.dataSourceRefs;
                    _this.report.parameterHelper.initialize(options.knownEnums, options.designerCallbacks);
                    var selection = options.selection;
                    var data = options.initializeOptions;
                    var designerCallbacks = options.designerCallbacks;
                    _this.surface = new Controls.ReportSurface(_this.report);
                    _this.parameters = new Internal.ParametersViewModel(_this.report);
                    _this.dataSourceHelper = new Internal.DataSourceHelper(_this.report.objectStorage, _this.report.dataSourceRefs, data.availableDataSources);
                    _this.report.dataSourceHelper(_this.dataSourceHelper);
                    _this.fieldListDataSourceHelper = new Internal.FieldListDataSourcesHelper();
                    _this.fieldListDataSourceHelper.updateDataSources(_this.dataSourceHelper, _this.report, _this.parameters.parameters);
                    _this.calcFieldsSource = new Internal.CalculatedFieldsSource(_this.report.calculatedFields, _this.report.dataSource, _this.dataSourceHelper);
                    var chartValueBindingAvailableSources = ko.observableArray(_this._getChartAvailableSources(_this.dataSourceHelper, _this.report.dataSource(), _this.parameters));
                    var subscription = _this.report.dataSource.subscribe(function (newVal) {
                        chartValueBindingAvailableSources(_this._getChartAvailableSources(_this.dataSourceHelper, newVal, _this.parameters));
                    });
                    _this._disposables.push({
                        dispose: function () {
                            chartValueBindingAvailableSources([]);
                            subscription.dispose();
                        }
                    });
                    var dataSourceItemsExtender = new Internal.DataSourceItemsExtender(_this.dataSourceHelper.usedDataSources);
                    var chartFieldListExtender = new Internal.ChartFieldListExtender();
                    _this.state = function () {
                        var extensions = _this.report && _this.report.extensions.peek() || [];
                        if (extensions.length > 0) {
                            return {
                                reportExtensions: _this.report.extensions().map(function (item) {
                                    return {
                                        "Key": item.key(),
                                        "Value": item.value()
                                    };
                                })
                            };
                        }
                        return data.state;
                    };
                    _this.fieldListItemsExtenders = [
                        _this.parameters,
                        dataSourceItemsExtender,
                        _this.calcFieldsSource,
                        chartFieldListExtender
                    ];
                    _this.controlsHelper = new Internal.DesignControlsHelper(_this.report, selection);
                    var wrappedCallback = _this.fieldListDataSourceHelper.wrapFieldsCallback(designerCallbacks.fieldLists, _this.state);
                    _this.fieldListProvider = new DevExpress.Analytics.Internal.FieldListProvider(wrappedCallback, _this.fieldListDataSourceHelper.fieldListDataSources, _this.fieldListItemsExtenders);
                    _this.reportItemsProvider = new Internal.ReportItemsProvider(_this.controlsHelper, _this.fieldListProvider);
                    _this.dataBindingsProvider = new DevExpress.Analytics.Internal.FieldListProvider(wrappedCallback, _this.fieldListDataSourceHelper.fieldListDataSources, [_this.parameters, _this.calcFieldsSource, chartFieldListExtender]);
                    _this.chartValueBindingProvider = new DevExpress.Analytics.Internal.FieldListProvider(wrappedCallback, chartValueBindingAvailableSources, [_this.parameters, _this.calcFieldsSource]);
                    _this.displayNameProvider = new Internal.DisplayNameProvider(_this.fieldListProvider, _this.fieldListDataSourceHelper.dataSourceHelper(), _this.report.dataSource);
                    _this.expressionDisplayNameProvider = new Internal.DisplayNameProvider(_this.reportItemsProvider, _this.fieldListDataSourceHelper.dataSourceHelper(), _this.report.dataSource);
                    _this._disposables.push(_this.report);
                    _this._disposables.push(_this.surface);
                    _this._disposables.push(_this.displayNameProvider);
                    _this._disposables.push(_this.expressionDisplayNameProvider);
                    _this._disposables.push(_this.dataSourceHelper);
                    _this._disposables.push(_this.fieldListDataSourceHelper);
                    _this._disposables.push(_this.calcFieldsSource);
                    _this._disposables.push(_this.parameters);
                    _this._disposables.push(_this.controlsHelper);
                    _this._disposables.push(_this.reportItemsProvider);
                    return _this;
                }
                ReportDesignerContext.prototype._getChartAvailableSources = function (dsHelper, dataSource, parameters) {
                    return [
                        dataSource && dsHelper.findDataSourceInfo(dataSource),
                        { ref: "Parameters", name: "Parameters", specifics: "parameters", data: parameters },
                        { ref: "none", name: "none", specifics: "none", data: null }
                    ].filter(function (x) { return x; });
                };
                ReportDesignerContext.prototype.getInfo = function () {
                    return [{ propertyName: "report", modelName: "@Report" }];
                };
                ReportDesignerContext.prototype.isModelReady = function () {
                    return this.report && this.report.isModelReady();
                };
                ReportDesignerContext.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    this.report = null;
                    this.url = null;
                    this.surface = null;
                    this.parameters = null;
                    this.dataSourceHelper = null;
                    this.fieldListDataSourceHelper = null;
                    this.calcFieldsSource = null;
                    this.fieldListItemsExtenders = [];
                    this.controlsHelper = null;
                    this.fieldListProvider = null;
                    this.reportItemsProvider = null;
                    this.dataBindingsProvider = null;
                    this.chartValueBindingProvider = null;
                    this.displayNameProvider = null;
                    this.expressionDisplayNameProvider = null;
                };
                return ReportDesignerContext;
            }(DevExpress.Analytics.Utils.Disposable));
            Designer.ReportDesignerContext = ReportDesignerContext;
            (function (Internal) {
                Internal.QBRequestWrapper = new DevExpress.QueryBuilder.Utils.RequestWrapper();
                var WizardsInitializerSettings = (function () {
                    function WizardsInitializerSettings(connectionStrings, wizardSettings, callbacks, rtl) {
                        this.callbacks = callbacks;
                        this.reportWizardOptions = new Wizard._ReportWizardOptions();
                        this.multiQueryWizardOptions = new DevExpress.Analytics.Wizard._MultiQueryDataSourceWizardOptions();
                        this.dataSourceWizardOptions = new DevExpress.Analytics.Wizard._DataSourceWizardOptions();
                        [this.reportWizardOptions, this.multiQueryWizardOptions, this.dataSourceWizardOptions].forEach(function (wizardOptions) {
                            wizardOptions.connectionStrings = connectionStrings;
                            wizardOptions.wizardSettings = wizardSettings;
                            wizardOptions.requestWrapper = Internal.QBRequestWrapper;
                            wizardOptions.rtl = rtl;
                        });
                    }
                    WizardsInitializerSettings.prototype._doFinishCallback = function (data, connections) {
                        if (data.dataSourceType === DevExpress.Analytics.Wizard.DataSourceType.Sql) {
                            return this.sqlDataSourceEditor.applySqlDataSourceWizardChanges(data);
                        }
                        else if (data.dataSourceType === DevExpress.Analytics.Wizard.DataSourceType.Json) {
                            var deferred = $.Deferred();
                            if (data.jsonDataSourceWizard.jsonSource && data.jsonDataSourceWizard.newConnectionName) {
                                this.jsonDataSourceEditor.saveJsonSource(data, connections).
                                    done(function (result) { deferred.resolve(result); })
                                    .fail(function () { return deferred.reject(); });
                            }
                            else {
                                this.jsonDataSourceEditor.applyDataSourceWizardChanges(data).done(function (result) {
                                    deferred.resolve(result);
                                }).fail(function () { return deferred.reject(); });
                            }
                            return deferred.promise();
                        }
                        return $.Deferred().resolve(null).promise();
                    };
                    WizardsInitializerSettings.prototype.createSqlDataSourceWizard = function (disableCustomSql, itemsProvider) {
                        var _this = this;
                        this.dataSourceWizardOptions.callbacks = {
                            selectStatement: function (connection, queryJSON) { return Internal.QBRequestWrapper.getSelectStatement(connection, queryJSON); },
                            finishCallback: function (data) { return _this._doFinishCallback(data, _this.dataSourceWizardOptions.connectionStrings); },
                            customizeQBInitData: function (data) {
                                data.data.parametersItemsProvider = itemsProvider;
                                data.data.requestWrapper = Internal.QBRequestWrapper;
                                return data;
                            }
                        };
                        this.dataSourceWizardOptions.disableCustomSql = disableCustomSql;
                        this.dataSourceWizard = DevExpress.Analytics.Wizard._createSqlDataSourceWizard(undefined, this.dataSourceWizardOptions);
                        return this.dataSourceWizard;
                    };
                    WizardsInitializerSettings.prototype.createSqlDataSourceEditor = function (settings) {
                        this.sqlDataSourceEditor = new Internal.SqlDataSourceEditor(settings.dataSourceHelper, settings.dataSourceWizard, settings.model, settings.undoEngine, settings.fieldListProvider);
                        this.jsonDataSourceEditor = new Internal.JsonDataSourceEditor(settings.dataSourceHelper, settings.dataSourceWizard, settings.model, settings.undoEngine, settings.fieldListProvider);
                        this.dataSourceActionProvider = new Internal.DataSourceActions(settings.dataSourceHelper, settings.model, settings.undoEngine);
                    };
                    WizardsInitializerSettings.prototype.createMultipleQueriesWizardCallbacks = function (itemsProvider) {
                        var _this = this;
                        this.multipleQueriesWizardCallbacks = {
                            selectStatement: function (connection, queryJSON) { return Internal.QBRequestWrapper.getSelectStatement(connection, queryJSON); },
                            sqlDataSourceResultSchema: function (dataSource) { return Internal.QBRequestWrapper.rebuildResultSchema(dataSource); },
                            finishCallback: function (data) { return _this._doFinishCallback(data, _this.multiQueryWizardOptions.connectionStrings); },
                            customQueriesPreset: Internal.ReportDataSourceService.getCustomQueriesPreset,
                            customizeQBInitData: function (data) {
                                data.data.parametersItemsProvider = itemsProvider;
                                data.data.requestWrapper = Internal.QBRequestWrapper;
                                return data;
                            }
                        };
                    };
                    WizardsInitializerSettings.prototype.createMultiQueryDataSourceWizard = function (disableCustomSql, multipleQueriesWizardCallbacks, canCreateJsonDataSource) {
                        var _this = this;
                        if (multipleQueriesWizardCallbacks === void 0) { multipleQueriesWizardCallbacks = this.multipleQueriesWizardCallbacks; }
                        if (canCreateJsonDataSource === void 0) { canCreateJsonDataSource = false; }
                        this.multiQueryWizardOptions.callbacks = multipleQueriesWizardCallbacks;
                        this.multiQueryWizardOptions.canCreateNewJsonDataSource = canCreateJsonDataSource;
                        this.multiQueryWizardOptions.disableCustomSql = disableCustomSql;
                        this.registerMultiQueryDataSourceWizardPages = function (factory) {
                            DevExpress.Analytics.Wizard._registerMultiQueryDataSourcePages(factory, _this.multiQueryWizardOptions);
                        };
                        if (this.reportWizardOptions.wizardSettings.useFullscreenWizard) {
                            this.multiQueryDataSourceWizard = DevExpress.Analytics.Wizard._createDataSourceFullscreenWizard(this.multiQueryWizardOptions);
                        }
                        else
                            this.multiQueryDataSourceWizard = DevExpress.Analytics.Wizard._createMultiQueryDataSourceWizard(undefined, this.multiQueryWizardOptions);
                    };
                    WizardsInitializerSettings.prototype.createReportWizard = function (settings) {
                        var _this = this;
                        this.reportWizardOptions.canCreateNewJsonDataSource = settings.data.canCreateJsonDataSource;
                        this.reportWizardOptions.hideDataMemberSubItems = settings.data.isReportServer;
                        this.reportWizardOptions.disableCustomSql = settings.data.disableCustomSql;
                        this.reportWizardOptions.dataSources = ko.pureComputed(function () {
                            if (!settings.dataSourceHelper()) {
                                return (settings.data.availableDataSources || []).map(function (object) {
                                    return $.extend({}, object, { data: new Data.ObjectStorageItem(object.data) });
                                });
                            }
                            return settings.data.isReportServer ? settings.dataSourceHelper().availableDataSources : settings.dataSourceHelper().mergedDataSources();
                        });
                        var fieldsCallback = function (request, dataSource) {
                            Internal.patchRequest(request, [dataSource], settings.state());
                            return _this.callbacks.fieldLists(request);
                        };
                        this.reportWizardOptions.callbacks = $.extend({}, this.multipleQueriesWizardCallbacks, {
                            fieldListsCallback: fieldsCallback,
                            createSqlDataSourceInfo: Internal.SqlDataSourceEditor.createSqlDataSourceInfo,
                            createJsonDataSourceInfo: Internal.JsonDataSourceEditor.createJsonDataSourceInfo,
                            finishCallback: function (reportWizardModel) {
                                settings.isLoading(true);
                                var deferred = $.Deferred();
                                Internal.ReportWizardService.generateReportFromWizardState(reportWizardModel, Internal.MasterDetailRequestModel, settings.state(), function (wizardModel) {
                                    _this.reportWizard.events.call("beforeFinish", { state: settings.state(), wizardModel: wizardModel });
                                })
                                    .done(function (result) {
                                    settings.navigation.currentTab().undoEngine.start();
                                    settings.isDirty(true);
                                    var newReport = Internal.createReportViewModel(result, settings.navigation.currentTab().context().report);
                                    settings.navigation.currentTab().changeContext(newReport, "");
                                    settings.navigation.currentTab.notifySubscribers();
                                    settings.navigation.currentTab().undoEngine.end();
                                    settings.isLoading(false);
                                    deferred.resolve(newReport);
                                })
                                    .fail(function () { deferred.reject(); });
                                return deferred.promise();
                            }
                        });
                        this.registerReportWizardPages = function (factory) {
                            Wizard._registerReportWizardPages(factory, _this.reportWizardOptions);
                        };
                        this.reportWizard = Internal._createReportWizard(this.reportWizardOptions);
                    };
                    return WizardsInitializerSettings;
                }());
                Internal.WizardsInitializerSettings = WizardsInitializerSettings;
                var ReportDialogSettings = (function () {
                    function ReportDialogSettings(_designerCallbacks) {
                        this._designerCallbacks = _designerCallbacks;
                    }
                    ReportDialogSettings.prototype.createSaveReportDialog = function (reportUrls) {
                        this.saveReportDialog = new Tools.SaveAsReportDialog(reportUrls, this._designerCallbacks);
                        this._designerCallbacks.customizeSaveAsDialog && this._designerCallbacks.customizeSaveAsDialog(this.saveReportDialog);
                    };
                    ReportDialogSettings.prototype.createSaveReportDialogLight = function (saveReportDialog) {
                        if (saveReportDialog === void 0) { saveReportDialog = this.saveReportDialog; }
                        this.saveReportDialogLight = new Tools.SaveReportDialog(saveReportDialog, this._designerCallbacks);
                        this._designerCallbacks.customizeSaveDialog && this._designerCallbacks.customizeSaveDialog(this.saveReportDialogLight);
                    };
                    ReportDialogSettings.prototype.createOpenReportDialog = function (reportUrls, navigation) {
                        this.openReportDialog = new Tools.OpenReportDialog(reportUrls, navigation, this._designerCallbacks);
                        this._designerCallbacks.customizeOpenDialog && this._designerCallbacks.customizeOpenDialog(this.openReportDialog);
                    };
                    return ReportDialogSettings;
                }());
                Internal.ReportDialogSettings = ReportDialogSettings;
                var ReportDesignerInitializer = (function (_super) {
                    __extends(ReportDesignerInitializer, _super);
                    function ReportDesignerInitializer(options) {
                        var _this = _super.call(this) || this;
                        _this.options = options;
                        _this._customMergeEngine = new Internal.CustomMergingEngine();
                        _this._updateCallback = null;
                        _this._selection = options.selection || new DevExpress.Analytics.Internal.SurfaceSelection;
                        _this.configurateRtl(options.rtl)
                            .configureReportStorageRegistration(options.reportStorageWebIsRegister, options.allowMDI)
                            .addCallbacks(options.callbacks)
                            .addElement("state", function () { return options.state; })
                            .addElement("availableDataSources", function () {
                            return (options.availableDataSources || []).map(function (object) {
                                return $.extend({}, object, { data: new Data.ObjectStorageItem(object.data) });
                            });
                        });
                        var navigation = new Tools.NavigateByReports({
                            allowMDI: _this._allowMDI,
                            callbacks: _this._designerCallbacks,
                            knownEnums: options.knownEnums,
                            reportUrl: options.reportUrl,
                            initOptions: {
                                availableDataSources: options.availableDataSources,
                                state: options.state
                            },
                            selection: _this._selection
                        });
                        var context = ko.computed({
                            read: function () {
                                return navigation.currentTab() && navigation.currentTab().context();
                            },
                            write: function (newVal) {
                                navigation.currentTab() && navigation.currentTab().context(newVal);
                            }
                        });
                        var model = ko.computed({
                            read: function () {
                                return context() && context().report;
                            },
                            write: function (newVal) {
                                if (!_this.isDisposing)
                                    navigation.changeContext(newVal);
                            }
                        });
                        var surface = ko.computed(function () { return context() && context().surface; });
                        var undoEngine = ko.computed(function () { return navigation.currentTab() && navigation.currentTab().undoEngine; });
                        _this._addDisposable(context);
                        _this._addDisposable(model);
                        _this._addDisposable(surface);
                        _this._addDisposable(undoEngine);
                        _this.initializeContext({ model: model, surface: surface, undoEngine: undoEngine });
                        _this.mapOnContext();
                        _this.addElement("navigateByReports", function () { return navigation; });
                        _this.addElement("getTabs", function () { return function () { return navigation.tabs(); }; });
                        _this.addElement("closeTab", function () { return function (tab, force) {
                            if (force === void 0) { force = false; }
                            return navigation.removeTab(tab, force);
                        }; });
                        _this._reportcontext = context;
                        _this._addDisposable(context.subscribe(function (newVal) {
                            if (_this.buildingModel.propertyGrid) {
                                _this.buildingModel.propertyGrid.cleanEditors();
                                _this.buildingModel.propertyGrid.editorsRendered(!_this.buildingModel.propertyGrid.isSortingByGroups());
                            }
                            _this.buildingModel.popularProperties && _this.buildingModel.popularProperties.cleanEditors();
                        }));
                        _this._selection.focused(surface());
                        _this._addDisposable(surface.subscribe(function (newValue) {
                            if (!newValue)
                                _this._selection.reset();
                            else
                                _this._selection.focused(newValue);
                        }));
                        return _this;
                    }
                    Object.defineProperty(ReportDesignerInitializer.prototype, "reportContext", {
                        get: function () {
                            return this._reportcontext;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ReportDesignerInitializer.prototype, "buildingModel", {
                        get: function () {
                            return _super.prototype.getModel.call(this);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ReportDesignerInitializer.prototype, "_designerCallbacks", {
                        get: function () {
                            return this._callbacks && this._callbacks.designer;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ReportDesignerInitializer.prototype.subscribeIncomeReport = function (report, reportUrl, dataSourceRefs) {
                        var _this = this;
                        this._addDisposable(report.subscribe(function (newValue) {
                            var newModel = new Controls.ReportViewModel(newValue);
                            Internal.updateDataSourceRefs(newModel, dataSourceRefs);
                            if (_this.buildingModel.navigateByReports.tabs().length === 0) {
                                if ((function (args) { return void (_this._designerCallbacks.reportOpening && _this._designerCallbacks.reportOpening(args)) || args; })({ url: reportUrl && reportUrl() || "", cancel: false }).cancel) {
                                    newModel.dispose();
                                }
                                else {
                                    _this.buildingModel.navigateByReports.addTab(newModel, reportUrl);
                                }
                            }
                            else {
                                _this.buildingModel.model(newModel);
                            }
                        }));
                        return this;
                    };
                    ReportDesignerInitializer.prototype._addDisposable = function (object) {
                        this._disposables.push(object);
                    };
                    ReportDesignerInitializer.prototype._getSubreportUrls = function (reportUrls, subreports) {
                        Internal.ReportStorageWeb.getUrls(subreports).done(function (result) {
                            reportUrls(result);
                        });
                    };
                    ReportDesignerInitializer.prototype._tryAddScriptEditor = function (isScriptsDisabled) {
                        var _this = this;
                        isScriptsDisabled = isScriptsDisabled || !DevExpress.Analytics.Widgets.Internal.aceAvailable;
                        if (!isScriptsDisabled) {
                            var scriptsEditor = new Internal.ScriptsEditor(this.buildingModel.model, this.buildingModel.controlsHelper.allControls);
                            this._addDisposable(scriptsEditor.editorVisible.subscribe(function (newValue) {
                                if (newValue) {
                                    var focusedControl = _this.buildingModel.selection.focused();
                                    if (focusedControl && focusedControl.getControlModel) {
                                        var controlModel = focusedControl.getControlModel();
                                        scriptsEditor.selectedControl(!!controlModel.scripts ? controlModel : controlModel.parentModel());
                                    }
                                    var resizeFunction = function () { return setTimeout(function () {
                                        scriptsEditor.editorContainer().resize();
                                    }, 1); };
                                    if (!scriptsEditor.editorContainer())
                                        var innerSubscription = scriptsEditor.editorContainer.subscribe(function (newVal) {
                                            innerSubscription.dispose();
                                            resizeFunction();
                                        });
                                    else
                                        resizeFunction();
                                }
                                _this.buildingModel.designMode(!newValue);
                            }));
                            this.addElement("scriptsEditor", function () { return scriptsEditor; });
                            this.addElement("events", function () { return ko.pureComputed(function () { return _this.buildingModel.scriptsEditor.allFunctionNames; }); });
                            this.addElement("gotoEvent", function () { return function (functionName, eventName, model) {
                                scriptsEditor.editorVisible(true);
                                scriptsEditor.ensureEvent(eventName.substring(2), functionName, model);
                            }; });
                            return true;
                        }
                        else {
                            var controlTypes = Object.keys(Utils.controlsFactory.controlsMap);
                            for (var index = 0; index < controlTypes.length; index++) {
                                ["Scripts", "Script References", "Script Language"].forEach(function (propertyDisplayName) {
                                    var propertyInfo = Utils.controlsFactory.getPropertyInfo(controlTypes[index], propertyDisplayName);
                                    propertyInfo && (propertyInfo.visible = false);
                                });
                            }
                            Data.Metadata.calculatedFieldScripts.visible = false;
                        }
                        return false;
                    };
                    ReportDesignerInitializer.prototype._getControls = function (controls, filter, isNoneItemAdded) {
                        if (isNoneItemAdded === void 0) { isNoneItemAdded = true; }
                        return ko.pureComputed(function () {
                            var result = controls();
                            if (filter) {
                                result = result.filter(filter);
                            }
                            var allControls = result.map(function (item) {
                                return { displayName: ko.unwrap(item.name), value: item };
                            });
                            if (isNoneItemAdded)
                                allControls.splice(0, 0, { displayName: DevExpress.Analytics.Internal.localizeNoneString("(none)"), value: null });
                            return allControls;
                        }).extend({ throttle: 1 });
                    };
                    ReportDesignerInitializer.prototype.addReportDialogs = function (func) {
                        var _this = this;
                        var settings = new ReportDialogSettings(this._designerCallbacks);
                        func(settings);
                        settings.saveReportDialog && this.addElement("saveReportDialog", function () { return settings.saveReportDialog; });
                        if (settings.saveReportDialogLight) {
                            this.addElement("saveReportDialogLight", function () { return settings.saveReportDialogLight; });
                            this.buildingModel.navigateByReports.save = function (tab) {
                                _this.buildingModel.saveReportDialogLight.show(tab);
                            };
                        }
                        settings.openReportDialog && this.addElement("openReportDialog", function () { return settings.openReportDialog; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addFlagsAndInitProperties = function (element) {
                        var _this = this;
                        this.addElement("validationMode", function () { return ko.computed({
                            read: function () {
                                return _this.buildingModel.surface() && _this.buildingModel.surface().validationMode();
                            }, write: function (newVal) {
                                _this.buildingModel.surface().validationMode(newVal);
                            }
                        }); });
                        this.addElement("isDirty", function () { return ko.computed({
                            read: function () {
                                return _this.buildingModel.navigateByReports.currentTab() && _this.buildingModel.navigateByReports.currentTab().isDirty();
                            },
                            write: function (newVal) {
                                _this.buildingModel.navigateByReports.currentTab() && _this.buildingModel.navigateByReports.currentTab().isDirty(newVal);
                            }
                        }); });
                        this.addElement("designMode", function () { return ko.observable(true); });
                        this.addIsLoading(function () {
                            var isLoading = ko.observable(true);
                            _this.buildingModel.navigateByReports.init(isLoading);
                            return isLoading;
                        });
                        this.addElement("rootStyle", function () { return "dxrd-designer dxd-back-primary"; });
                        this.addElement("selectedPath", function () { return ko.observable(null); });
                        this.addElement("actionsGroupTitle", function () { return function () { return DevExpress.Analytics.Utils.getLocalization('Actions', 'AnalyticsCoreStringId.Actions'); }; });
                        this.addElement("updateFont", function () { return function (values) {
                            DevExpress.Analytics.Widgets.Internal.availableFonts($.extend(DevExpress.Analytics.Widgets.Internal.availableFonts(), values));
                        }; });
                        this.addElement("sortFont", function () { return function () {
                            var sortedObj = {};
                            var fonts = DevExpress.Analytics.Widgets.Internal.availableFonts.peek();
                            Object.keys(fonts).sort(function (a, b) { return a.localeCompare(b); }).forEach(function (key) { return sortedObj[key] = fonts[key]; });
                            DevExpress.Analytics.Widgets.Internal.availableFonts(sortedObj);
                        }; });
                        this.addElement("zoomStep", function () { return ko.observable(0.05); });
                        this.addElement("surfaceSize", function () { return ko.observable(0); });
                        if (!element)
                            return this;
                        this.addElement("fullScreen", function () { return Reporting.Internal.createFullscreenComputed(element, _this); });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addPreview = function (options) {
                        var _this = this;
                        DevExpress.Reporting.Viewer.Internal.createPreview(options.element, options.callbacks, undefined, options.parametersInfo, options.handlerUri, false, options.rtl)
                            .done(function (reportPreviewModel) {
                            _this.addElement("reportPreviewModel", function () {
                                _this._addDisposable(reportPreviewModel.reportPreview.previewVisible.subscribe(function (newValue) {
                                    _this.buildingModel.designMode(!newValue);
                                }));
                                return reportPreviewModel;
                            });
                            _this._addDisposable(reportPreviewModel);
                        });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addReportUrls = function (subreports) {
                        var _this = this;
                        this.addElement("reportUrls", function () {
                            var result = ko.observableArray([]);
                            _this._getSubreportUrls(result, subreports);
                            return result;
                        });
                        return this;
                    };
                    ReportDesignerInitializer.prototype._wrapActionProvider = function (actionsProvider) {
                        return {
                            getActions: function (context) {
                                return actionsProvider() && actionsProvider().getActions(context) || [];
                            }
                        };
                    };
                    ReportDesignerInitializer.prototype.initializeFieldListActionProviders = function (func) {
                        var _this = this;
                        if (func === void 0) { func = function () {
                            var providers = [];
                            if (_this._calculatedFieldsSource)
                                providers.push(_this._wrapActionProvider(_this._calculatedFieldsSource));
                            if (_this._parameters)
                                providers.push(_this._wrapActionProvider(_this._parameters));
                            if (_this._dataSourceActionProvider)
                                providers.push(_this._dataSourceActionProvider);
                            if (_this._jsonDataSourceEditor)
                                providers.push(_this._jsonDataSourceEditor);
                            if (_this._sqlDataSourceEditor)
                                providers.push(_this._sqlDataSourceEditor);
                            return providers;
                        }; }
                        this.addElement("fieldListActionProviders", func);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeCalculatedFieldsSource = function () {
                        var _this = this;
                        var calculatedFieldsSource = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().calcFieldsSource; });
                        this.addElement("calculatedFieldsSource", function () { return calculatedFieldsSource; });
                        this._calculatedFieldsSource = calculatedFieldsSource;
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeFieldListItemsExtenders = function () {
                        var _this = this;
                        var fieldListItemsExtenders = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().fieldListItemsExtenders; });
                        this.addElement("fieldListItemsExtenders", function () { return fieldListItemsExtenders; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeParameters = function () {
                        var _this = this;
                        var parameters = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().parameters; });
                        this.addElement("parameters", function () { return parameters; });
                        this._parameters = parameters;
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeFieldListProvider = function () {
                        var _this = this;
                        var fieldListProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().fieldListProvider; });
                        this.addElement("fieldListProvider", function () { return fieldListProvider; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeReportItemsProvider = function () {
                        var _this = this;
                        var reportItemsProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().reportItemsProvider; });
                        this.addElement("reportItemsProvider", function () { return reportItemsProvider; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeDataBindingsProvider = function () {
                        var _this = this;
                        var dataBindingsProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().dataBindingsProvider; });
                        this.addElement("dataBindingsProvider", function () { return dataBindingsProvider; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeDisplayNameProvider = function () {
                        var _this = this;
                        var displayNameProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().displayNameProvider; });
                        this.addElement("displayNameProvider", function () { return displayNameProvider; });
                        this.addElement("getDisplayNameByPath", function () { return function (path, value) { return displayNameProvider().getDisplayNameByPath(path, value); }; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeExpressionDisplayNameProvider = function () {
                        var _this = this;
                        var expressionDisplayNameProvider = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().expressionDisplayNameProvider; });
                        this.addElement("expressionDisplayNameProvider", function () { return expressionDisplayNameProvider; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeDataSourceHelper = function () {
                        var _this = this;
                        var dataSourceHelper = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().dataSourceHelper; });
                        this.addElement("dataSourceHelper", function () { return dataSourceHelper; });
                        var fieldListDataSourceHelper = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().fieldListDataSourceHelper; });
                        this.addElement("fieldListDataSources", function () { return ko.computed(function () { return fieldListDataSourceHelper() && fieldListDataSourceHelper().fieldListDataSources(); }); });
                        this._addDisposable(fieldListDataSourceHelper);
                        return this;
                    };
                    ;
                    ReportDesignerInitializer.prototype.addSelection = function (func) {
                        var _this = this;
                        if (func === void 0) { func = function (settings) {
                            settings.selection = _this._selection;
                            var rtl = ko.computed(function () { return _this.buildingModel.surface() && _this.buildingModel.surface().rtl(); });
                            var snapLinesCollector = new Internal.ReportSnapLinesCollector(rtl);
                            _this._addDisposable(rtl);
                            settings.snapHelper = new DevExpress.Analytics.Internal.SnapLinesHelper(_this.buildingModel.surface, DevExpress.Analytics.Internal.SnapLinesHelper.snapTolerance, snapLinesCollector);
                            settings.editableObject = DevExpress.Analytics.Internal.CombinedObject.getEditableObject(settings.selection, _this.buildingModel.undoEngine, _this._customMergeEngine.customMerge).extend({ throttle: 1 });
                            settings.addDragDrop(function (dragDropSettings) {
                                dragDropSettings.dragHelperContent = new DevExpress.Analytics.Internal.DragHelperContent(settings.selection);
                                dragDropSettings.dragDropStarted = DevExpress.Analytics.Internal.DragDropHandler.started;
                                dragDropSettings.addDragDropHandler("dragHandler", new Internal.SelectionDragDropHandler(_this.buildingModel.surface, settings.selection, _this.buildingModel.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent));
                                dragDropSettings.addDragDropHandler("toolboxDragHandler", new Internal.ReportToolboxDragDropHandler(_this.buildingModel.surface, _this._selection, _this.buildingModel.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent, Utils.controlsFactory, _this._designerCallbacks.componentAdded));
                                dragDropSettings.addDragDropHandler("fieldDragHandler", new Internal.FieldListDragDropHandler(_this.buildingModel.surface, _this._selection, _this.buildingModel.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent, _this.buildingModel.fieldListDataSources, _this._designerCallbacks.componentAdded));
                            });
                            settings.addResize(function (resizeSettings) {
                                resizeSettings.handler = {
                                    starting: function () {
                                        _this._selection.expectClick = true;
                                        _this.buildingModel.undoEngine().start();
                                    },
                                    stopped: function () {
                                        _this.buildingModel.undoEngine().end();
                                        setTimeout(function () { _this._selection.expectClick = false; }, 100);
                                    },
                                    disabled: DevExpress.Analytics.Internal.DragDropHandler.started,
                                    snapHelper: settings.snapHelper
                                };
                            });
                        }; }
                        _super.prototype.addSelection.call(this, func);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addToolboxItems = function (items) {
                        _super.prototype.addToolboxItems.call(this, items);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addControlProperties = function (editors, groups) {
                        _super.prototype.addControlProperties.apply(this, arguments);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addMenu = function (func) {
                        if (func === void 0) { func = function (settings) { return void 0; }; }
                        var settings = new Internal.ReportMenuSettings();
                        func(settings);
                        this._disposables.push(settings);
                        DevExpress.Analytics.Internal.extend(this.getModel(), settings.generate());
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addControlsHelper = function (func) {
                        var _this = this;
                        if (func === void 0) { func = function (settings) {
                            var helper = ko.computed(function () { return _this._reportcontext() && _this._reportcontext().controlsHelper; });
                            _this._addDisposable(helper);
                            var controlHelper = new Internal.ReportDesignerControlsHelper(helper);
                            settings
                                .addControlsHelper(controlHelper)
                                .addControlsStore();
                        }; }
                        _super.prototype.addControlsHelper.call(this, func);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.setControlsHelperFilter = function (filter) {
                        this.buildingModel.controlsStore.setFilter(filter);
                        return this;
                    };
                    ReportDesignerInitializer.prototype._createPropertiesTab = function () {
                        var _this = this;
                        return new DevExpress.Analytics.Utils.TabInfo({
                            text: "Properties",
                            template: "dxrd-propertiestab",
                            model: this.buildingModel.propertyGrid,
                            localizationId: 'AnalyticsCoreStringId.Cmd_Properties',
                            visible: ko.pureComputed(function () { return !!_this.buildingModel.model(); }),
                            disabled: ko.pureComputed(function () { return _this.buildingModel.propertyGrid.focusedItem() instanceof Array; })
                        });
                    };
                    ReportDesignerInitializer.prototype._createExpressionsTab = function (context) {
                        var _this = this;
                        var expressionGridModel = ko.computed(function () {
                            return _this.buildingModel.editableObject() && _this.buildingModel.editableObject().expressionObj;
                        });
                        var expressionGrid = null;
                        this._addDisposable(context.subscribe(function (newVal) {
                            expressionGrid.cleanEditors();
                        }));
                        expressionGrid = new DevExpress.Analytics.Widgets.ObjectProperties(expressionGridModel);
                        this._addDisposable(expressionGrid);
                        this._addDisposable(expressionGridModel);
                        var expressionTab = new DevExpress.Analytics.Utils.TabInfo({
                            text: "Expressions",
                            template: "dxrd-expressions-tab",
                            model: expressionGrid,
                            localizationId: "DevExpress.XtraReports.UI.XRControl.Expressions",
                            imageClassName: "expressions",
                            imageTemplateName: "dxrd-svg-tabs-expressions",
                            visible: ko.pureComputed(function () { return _this.buildingModel.model() && _this.buildingModel.model()._dataBindingMode() !== Internal.DataBindingMode.Bindings; }),
                            disabled: ko.pureComputed(function () {
                                return !expressionGridModel();
                            })
                        });
                        this._addDisposable(expressionTab.active.subscribe(function (newVal) {
                            if (newVal && expressionTab.visible()) {
                                _this.buildingModel.controlsStore.setFilter(Internal.isControl);
                            }
                            else {
                                _this.buildingModel.controlsStore.setFilter(Internal.isNotParameter);
                            }
                        }));
                        return expressionTab;
                    };
                    ReportDesignerInitializer.prototype._createReportExplorerTab = function () {
                        var _this = this;
                        var reportExplorer = new Internal.ReportExplorerModel(this.buildingModel.model, this.buildingModel.editableObject, function () {
                            _this.buildingModel.tabPanel.selectTab({ model: _this.buildingModel.tabPanel.tabs[0] });
                        }, new Internal.ReportExplorerDragDropHandler(this.buildingModel.surface, this.buildingModel.selection, this.buildingModel.undoEngine, this.buildingModel.dragHelperContent), this.buildingModel.selection);
                        this._addDisposable(reportExplorer);
                        return new DevExpress.Analytics.Utils.TabInfo({
                            text: "Report Explorer",
                            template: "dxrd-reportexplorerwrapper",
                            model: reportExplorer,
                            localizationId: 'ReportStringId.UD_Title_ReportExplorer',
                            imageClassName: "reportexplorer",
                            imageTemplateName: "dxrd-svg-tabs-reportexplorer",
                            visible: ko.pureComputed(function () { return !!_this.buildingModel.model(); })
                        });
                    };
                    ReportDesignerInitializer.prototype._createFieldListTab = function (designerCallbacks) {
                        var _this = this;
                        var treeListOptions = {
                            itemsProvider: this.buildingModel.fieldListProvider,
                            selectedPath: this.buildingModel.selectedPath,
                            treeListController: new Internal.FieldListController(this.buildingModel.fieldListActionProviders, DevExpress.Analytics.Internal.createActionWrappingFunction("WrapForFieldList", function (model, handler) {
                                _this.buildingModel.undoEngine().start();
                                var result = handler(model);
                                _this.buildingModel.undoEngine().end();
                                if (result && result.name) {
                                    _this.buildingModel.selectedPath(model.path + "." + ko.unwrap(result.name));
                                }
                            }), this.buildingModel.fieldDragHandler, designerCallbacks.customizeFieldListActions)
                        }, popoverVisible = ko.observable(false), fieldListModel = {
                            treeListOptions: treeListOptions,
                            popoverVisible: popoverVisible,
                            addDataSourceBtnVisible: ko.pureComputed(function () {
                                var dsHelper = ko.unwrap(_this.buildingModel.dataSourceHelper);
                                return dsHelper && dsHelper.availableDataSources && dsHelper.availableDataSources.length > 0;
                            }),
                            showPopover: function () {
                                popoverVisible(true);
                            },
                            dataSourceListItems: function () {
                                var dsHelper = ko.unwrap(_this.buildingModel.dataSourceHelper);
                                return dsHelper && dsHelper.availableDataSources;
                            },
                            itemClickAction: function (e) {
                                popoverVisible(false);
                                var data = e.itemData;
                                data.id = DevExpress.Analytics.Internal.guid().replace(/-/g, "");
                                Internal.addDataSourceToReport(ko.unwrap(_this.buildingModel.dataSourceHelper), _this.buildingModel.model(), _this.buildingModel.undoEngine(), _this.buildingModel.fieldListProvider(), data, true);
                            }
                        };
                        return new DevExpress.Analytics.Utils.TabInfo({
                            text: "Fields",
                            template: "dxrd-fieldlistwrapper",
                            model: fieldListModel,
                            localizationId: 'ReportStringId.UD_Title_FieldList',
                            imageClassName: "fieldlist",
                            imageTemplateName: "dxrd-svg-tabs-fieldlist",
                            visible: ko.pureComputed(function () { return !!_this.buildingModel.model(); })
                        });
                    };
                    ReportDesignerInitializer.prototype.addTabPanel = function (panel, addTabInfo) {
                        var _this = this;
                        if (addTabInfo === void 0) { addTabInfo = function () {
                            return [
                                _this._createPropertiesTab(),
                                _this._createExpressionsTab(_this._reportcontext),
                                _this._createFieldListTab(_this._designerCallbacks),
                                _this._createReportExplorerTab()
                            ];
                        }; }
                        _super.prototype.addTabPanel.call(this, panel, addTabInfo);
                        var contextSubscription = this._reportcontext.subscribe(function (newVal) {
                            if (!!newVal) {
                                contextSubscription.dispose();
                                _this.buildingModel.tabPanel.collapsed(false);
                            }
                        });
                        this._addDisposable(contextSubscription);
                        return this;
                    };
                    ReportDesignerInitializer.prototype._createActionsStorage = function (actions) {
                        var object = {};
                        for (var i = actions.length - 1; i > -1; i--) {
                            object[actions[i].id] = actions[i].clickAction;
                        }
                        return object;
                    };
                    ReportDesignerInitializer.prototype.addOpenReportMethod = function () {
                        var _this = this;
                        this.addElement("openReport", function () { return function (url) {
                            if ((function (args) { return void (_this._designerCallbacks.reportOpening && _this._designerCallbacks.reportOpening(args)) || args; })({ url: url, cancel: false }).cancel)
                                return;
                            Internal.ReportStorageWeb.getReportByUrl(url).done(function (result) {
                                _this.buildingModel.navigateByReports.addTab(result, ko.observable(url));
                            });
                        }; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initializeUIEffects = function (applyBindings, element) {
                        var _this = this;
                        this._addDisposable(this.buildingModel.editableObject.subscribe(function () {
                            var $scrollView = $(".dxrd-designer .dxrd-properties-wrapper").find(".dx-scrollview");
                            if ($scrollView.length) {
                                var scrollViewInstance = DevExpress.ui.dxScrollView["getInstance"]($scrollView.get(0));
                                scrollViewInstance && scrollViewInstance["scrollTo"] && scrollViewInstance["scrollTo"](0);
                            }
                        }));
                        var updateSurfaceContentSize__ = DevExpress.Analytics.Internal.updateSurfaceContentSize(this.buildingModel.surfaceSize, element, this.rtl);
                        var updateSurfaceContentSize_ = function () {
                            updateSurfaceContentSize__();
                            var $root = $(element).find(".dxrd-designer").eq(0);
                            var $contentPanel = $root.find(".dxrd-surface-wrapper .dxrd-content-panel-wrapper").eq(0);
                            areaHeight($contentPanel.height());
                            areaWidth($contentPanel.width());
                        };
                        var updateContentSizeTimeout = null;
                        var updateSurfaceContentSize_async = function () {
                            updateContentSizeTimeout && clearTimeout(updateContentSizeTimeout);
                            updateContentSizeTimeout = setTimeout(function () {
                                updateSurfaceContentSize_();
                            }, 1);
                        };
                        var reportHeight = ko.computed(function () {
                            if (_this.buildingModel.surface()) {
                                updateSurfaceContentSize_async();
                                return _this.buildingModel.surface().effectiveHeight();
                            }
                        });
                        var reportWidth = ko.computed(function () {
                            if (_this.buildingModel.surface()) {
                                updateSurfaceContentSize_async();
                                return _this.buildingModel.surface().pageWidth();
                            }
                        });
                        var areaHeight = ko.observable(reportHeight());
                        var areaWidth = ko.observable(reportWidth());
                        var verticalScrollOffset = ko.observable(0);
                        var horizontalScrollOffset = ko.observable(0);
                        this._addDisposable(ko.computed(function () {
                            var horizontalOffset = 0;
                            var verticalOffset = 0;
                            [0, 0].forEach(function () {
                                verticalOffset = (areaHeight() - horizontalOffset) < reportHeight() ? 20 : 0;
                                horizontalOffset = (areaWidth() - verticalOffset) < reportWidth() ? 20 : 0;
                            });
                            horizontalScrollOffset(horizontalOffset);
                            verticalScrollOffset(verticalOffset);
                        }));
                        this._updateCallback = function () {
                            updateSurfaceContentSize_();
                        };
                        $(window).bind("resize", this._updateCallback);
                        this.buildingModel.onViewPortScroll = function (viewPort) {
                            var $viewPort = $(viewPort), $surface = $viewPort.closest(".dxrd-surface");
                            $surface.find(".dxrd-bands-panel-wrapper").scrollTop($viewPort.scrollTop());
                            $surface.find(".dxrd-hruler-wrapper").scrollLeft($viewPort.scrollLeft());
                        };
                        this.addElement("verticalScrollOffset", function () { return verticalScrollOffset; });
                        this.addElement("horizontalScrollOffset", function () { return horizontalScrollOffset; });
                        this._addDisposable(reportHeight);
                        this._addDisposable(reportWidth);
                        this._addDisposable(this.buildingModel.tabPanel.width.subscribe(function () {
                            updateSurfaceContentSize_async();
                        }));
                        this.buildingModel.updateSurfaceSize = function () {
                            updateSurfaceContentSize_();
                        };
                        this._addDisposable(this.buildingModel.navigateByReports.height.subscribe(function () {
                            updateSurfaceContentSize_async();
                        }));
                        if (applyBindings) {
                            this.buildingModel.updateSurfaceSize();
                        }
                        return this;
                    };
                    ReportDesignerInitializer.prototype._createNewViaWizardAction = function (reportWizard, designerModel, state) {
                        var menuAction = {
                            id: Actions.ActionId.NewReportViaWizard,
                            container: "menu",
                            text: "New via Wizard",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("New via Wizard", Internal.StringId.NewViaWizard); },
                            imageClassName: "dxrd-image-new-via-wizard",
                            imageTemplateName: "dxrd-svg-menu-new_via_wizard",
                            disabled: ko.observable(false),
                            selected: ko.observable(false),
                            visible: true,
                            hotKey: { ctrlKey: true, keyCode: "W".charCodeAt(0) },
                            clickAction: function () { return designerModel._wizardRunner.runWizard("NewViaReportWizard"); }
                        };
                        designerModel._wizardRunner.registerWizard("NewViaReportWizard", function () {
                            if (reportWizard instanceof Wizard.FullscreenReportWizard) {
                                menuAction.selected(true);
                                designerModel.appMenuVisible(true);
                                designerModel.isMenuCollapsed(true);
                                reportWizard._onClose && reportWizard._onClose(function () {
                                    menuAction.selected(false);
                                    designerModel.isMenuCollapsed(false);
                                });
                            }
                            reportWizard.initialize();
                            reportWizard.start(function (reportWizardState) {
                                designerModel.isLoading(true);
                                var deferred = $.Deferred();
                                var createReport = function (wizardState) {
                                    Internal.ReportWizardService.generateReportFromWizardState(wizardState, reportWizard._requestModelType, state(), function (wizardModel) {
                                        reportWizard.events.call("beforeFinish", { state: wizardState, wizardModel: wizardModel });
                                    })
                                        .done(function (result) {
                                        var newReport = new Controls.ReportViewModel(JSON.parse(result.reportModel));
                                        newReport.dataSourceRefs = result.dataSourceRefs;
                                        designerModel.navigateByReports.addTab(newReport, ko.observable(""));
                                        designerModel.isDirty(true);
                                        designerModel.isLoading(false);
                                        deferred.resolve(newReport);
                                    })
                                        .fail(function () { deferred.reject(); });
                                };
                                if (reportWizardState.jsonDataSourceWizard.jsonSource && reportWizardState.newDataSource) {
                                    Internal.ReportWizardService.createNewJsonDataSource(reportWizardState.jsonDataSourceWizard, Internal.JsonDataSourceEditor.createJsonDataSourceInfo)
                                        .done(function (dataSource) {
                                        reportWizardState.dataSource = dataSource;
                                        delete reportWizardState.newDataSource;
                                        if (designerModel.connections.json().every(function (x) { return x.name !== reportWizardState.jsonDataSourceWizard.newConnectionName; })) {
                                            designerModel.connections.json.push({
                                                description: reportWizardState.jsonDataSourceWizard.newConnectionName,
                                                name: reportWizardState.jsonDataSourceWizard.newConnectionName
                                            });
                                        }
                                        createReport(reportWizardState);
                                    }).fail(function () { return deferred.reject(); });
                                }
                                else {
                                    createReport(reportWizardState);
                                }
                                return deferred.promise();
                            });
                        }, function () {
                            designerModel.appMenuVisible(false);
                            reportWizard.isVisible(false);
                        });
                        return menuAction;
                    };
                    ReportDesignerInitializer.prototype._createDesignInReportWizardAction = function (reportWizard, designerModel, state) {
                        var menuAction = {
                            id: Actions.ActionId.ReportWizard,
                            container: "menu",
                            text: "Design in Report Wizard...",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Design in Report Wizard...", "ReportStringId.Verb_ReportWizard"); },
                            imageClassName: "dxrd-image-run-wizard",
                            imageTemplateName: "dxrd-svg-menu-run_wizard",
                            disabled: ko.pureComputed(function () { return !designerModel.model(); }),
                            visible: true,
                            selected: ko.observable(false),
                            clickAction: function () {
                                designerModel._wizardRunner.runWizard("DesignInReportWizard");
                            }
                        };
                        var start = function () {
                            if (reportWizard instanceof Wizard.FullscreenReportWizard) {
                                designerModel.appMenuVisible(true);
                                designerModel.isMenuCollapsed(true);
                                menuAction.selected(true);
                                reportWizard._onClose && reportWizard._onClose(function () {
                                    menuAction.selected(false);
                                    designerModel.isMenuCollapsed(false);
                                });
                            }
                            reportWizard.initialize(Wizard.createReportWizardState(designerModel.model()));
                            reportWizard.start(function (reportWizardState) {
                                var deferred = $.Deferred();
                                var createReport = function (wizardState) {
                                    designerModel.isLoading(true);
                                    Internal.ReportWizardService.generateReportFromWizardState(wizardState, reportWizard._requestModelType, state(), function (wizardModel) {
                                        reportWizard.events.call("beforeFinish", { state: wizardState, wizardModel: wizardModel });
                                    }, JSON.stringify({ "XtraReportsLayoutSerializer": designerModel.model().serialize() }))
                                        .done(function (result) {
                                        designerModel.navigateByReports.currentTab().undoEngine.start();
                                        designerModel.isDirty(true);
                                        var newReport = Internal.createReportViewModel(result, designerModel.model());
                                        designerModel.model(newReport);
                                        designerModel.navigateByReports.currentTab().undoEngine.end();
                                        designerModel.isLoading(false);
                                        deferred.resolve(newReport);
                                    })
                                        .fail(function () { deferred.reject(); });
                                };
                                if (reportWizardState.jsonDataSourceWizard.jsonSource && reportWizardState.newDataSource) {
                                    Internal.ReportWizardService.createNewJsonDataSource(reportWizardState.jsonDataSourceWizard, Internal.JsonDataSourceEditor.createJsonDataSourceInfo)
                                        .done(function (dataSource) {
                                        reportWizardState.dataSource = dataSource;
                                        delete reportWizardState.newDataSource;
                                        createReport(reportWizardState);
                                    }).fail(function () { return deferred.reject(); });
                                }
                                else {
                                    createReport(reportWizardState);
                                }
                                return deferred.promise();
                            });
                        };
                        var end = function () {
                            designerModel.appMenuVisible(false);
                            reportWizard.isVisible(false);
                        };
                        designerModel._wizardRunner.registerWizard("DesignInReportWizard", start, end);
                        designerModel._wizardRunner.registerWizard("ReportWizard", start, end);
                        return menuAction;
                    };
                    ReportDesignerInitializer.prototype._createMultiQueryDataSourceWizardAction = function (multiQueryDataSourceWizard, designerModel) {
                        var menuAction = {
                            id: Actions.ActionId.AddMultiQuerySqlDataSource,
                            container: "menu",
                            text: "Add Data Source...",
                            displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Add Data Source...", "ASPxReportsStringId.ReportDesigner_Wizard_AddDataSource"); },
                            imageClassName: "dxrd-image-add-datasource",
                            imageTemplateName: "dxrd-svg-menu-add_datasource",
                            disabled: ko.pureComputed(function () { return !designerModel.model(); }),
                            visible: multiQueryDataSourceWizard.canRunWizard(),
                            selected: ko.observable(false),
                            clickAction: function () { return designerModel._wizardRunner.runWizard("DataSourceWizard"); }
                        };
                        designerModel._wizardRunner.registerWizard("DataSourceWizard", function () {
                            if (multiQueryDataSourceWizard instanceof DevExpress.Analytics.Wizard.FullscreenDataSourceWizard) {
                                designerModel.appMenuVisible(true);
                                designerModel.isMenuCollapsed(true);
                                menuAction.selected(true);
                                multiQueryDataSourceWizard._onClose && multiQueryDataSourceWizard._onClose(function () {
                                    menuAction.selected(false);
                                    designerModel.isMenuCollapsed(false);
                                });
                            }
                            multiQueryDataSourceWizard.initialize(DevExpress.Analytics.Wizard._createDefaultDataSourceWizardState());
                            multiQueryDataSourceWizard.start();
                        }, function () {
                            designerModel.appMenuVisible(false);
                            multiQueryDataSourceWizard.isVisible(false);
                        });
                        return menuAction;
                    };
                    ReportDesignerInitializer.prototype._customizeDesignerActions = function (designerModel, nextCustomizer, exitDesigner, state, callbacks) {
                        var _this = this;
                        var report = designerModel.model, reportPreview = designerModel.reportPreviewModel.reportPreview, reportWizard = designerModel.wizard, dataSourceWizard = designerModel.dataSourceWizard, multiQueryDataSourceWizard = designerModel.multiQueryDataSourceWizard, scriptsEditor = designerModel.scriptsEditor;
                        return (function (actions) {
                            $.extend(DevExpress.Analytics.Internal.findFirstItemMatchesCondition(actions, function (item) { return item.id === DevExpress.Analytics.Tools.ActionId.Copy; }), { textId: Internal.StringId.Copy });
                            if (Internal.reportStorageWebIsRegister) {
                                actions.push({
                                    id: Actions.ActionId.NewReport,
                                    container: "menu",
                                    text: "New",
                                    displayText: function () { return DevExpress.Analytics.Utils.getLocalization("New", 'ReportStringId.UD_Capt_NewReport'); },
                                    imageClassName: "dxrd-image-newreport",
                                    imageTemplateName: "dxrd-svg-menu-newreport",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    hotKey: { ctrlKey: true, keyCode: "N".charCodeAt(0) },
                                    clickAction: function () {
                                        designerModel.navigateByReports.addTab(new Controls.ReportViewModel(Controls.SubreportViewModel.defaultReport), ko.observable(""));
                                        designerModel.isDirty(true);
                                    }
                                });
                                actions.push(_this._createNewViaWizardAction(reportWizard, designerModel, state));
                                actions.push({
                                    id: Actions.ActionId.OpenReport,
                                    container: "menu",
                                    text: "Open",
                                    displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Open", Internal.StringId.Open); },
                                    imageClassName: "dxrd-image-open",
                                    imageTemplateName: "dxrd-svg-menu-open",
                                    disabled: ko.observable(false),
                                    visible: true,
                                    hotKey: { ctrlKey: true, keyCode: "O".charCodeAt(0) },
                                    clickAction: function () {
                                        designerModel.openReportDialog.show(designerModel.navigateByReports.currentTab());
                                    }
                                });
                            }
                            if (reportWizard) {
                                actions.push(_this._createDesignInReportWizardAction(reportWizard, designerModel, state));
                            }
                            actions.push({
                                id: Actions.ActionId.ValidateBindings,
                                text: "Validate Bindings",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Validate Bindings", "ASPxReportsStringId.ReportDesigner_ToolBarItemText_ValidateBindings"); },
                                imageClassName: "dxrd-image-validateBindingMode",
                                imageTemplateName: "dxrd-svg-toolbar-validateBindingMode",
                                disabled: ko.pureComputed(function () { return !report(); }),
                                selected: designerModel.validationMode,
                                visible: true,
                                hasSeparator: true,
                                clickAction: function () {
                                    designerModel.validationMode(!designerModel.validationMode());
                                },
                            });
                            actions.push({
                                id: Actions.ActionId.FullScreen,
                                text: "Full Screen",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Full Screen", "ASPxReportsStringId.ToolBarItemText_FullScreen"); },
                                imageClassName: "dxrd-image-fullscreen",
                                imageTemplateName: "dxrd-svg-toolbar-fullscreen",
                                disabled: ko.observable(false),
                                selected: designerModel.fullScreen,
                                visible: true,
                                clickAction: function () {
                                    designerModel.fullScreen(!designerModel.fullScreen());
                                },
                            });
                            _this._disposables.push(designerModel.fullScreen);
                            if (scriptsEditor) {
                                actions.push({
                                    id: Actions.ActionId.Scripts,
                                    text: "Scripts",
                                    displayText: function () { return DevExpress.Analytics.Utils.getLocalization('Scripts', 'ReportStringId.RepTabCtl_Scripts'); },
                                    imageClassName: "dxrd-image-scripts",
                                    imageTemplateName: "dxrd-svg-toolbar-scripts",
                                    disabled: ko.pureComputed(function () { return !report(); }),
                                    visible: ko.pureComputed(function () { return !scriptsEditor.editorVisible(); }),
                                    hotKey: { ctrlKey: true, keyCode: "R".charCodeAt(0) },
                                    clickAction: function () {
                                        scriptsEditor.initialize();
                                        scriptsEditor.editorVisible(true);
                                    },
                                    hasSeparator: true
                                });
                            }
                            if (reportPreview) {
                                actions.push({
                                    id: Actions.ActionId.Preview,
                                    text: "Preview",
                                    displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Preview", 'ReportStringId.RepTabCtl_Preview'); },
                                    imageClassName: "dxrd-image-preview",
                                    imageTemplateName: "dxrd-svg-preview-print_preview",
                                    disabled: ko.pureComputed(function () { return !report(); }),
                                    visible: ko.pureComputed(function () { return !reportPreview.previewVisible(); }),
                                    hotKey: { ctrlKey: true, keyCode: "P".charCodeAt(0) },
                                    clickAction: function () {
                                        reportPreview.previewVisible(true);
                                        reportPreview.initialize(Internal.ReportPreviewService.initializePreview(report()));
                                    },
                                    hasSeparator: true
                                });
                            }
                            if (dataSourceWizard) {
                                actions.push({
                                    id: Actions.ActionId.AddSqlDataSource,
                                    container: "menu",
                                    text: "Add Data Source...",
                                    displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Add Data Source...", "ASPxReportsStringId.ReportDesigner_Wizard_AddDataSource"); },
                                    imageClassName: "dxrd-image-add-datasource",
                                    imageTemplateName: "dxrd-svg-menu-add_datasource",
                                    disabled: ko.pureComputed(function () { return !report(); }),
                                    visible: false,
                                    clickAction: function () {
                                        dataSourceWizard.initialize(DevExpress.Analytics.Wizard._createDefaultDataSourceWizardState());
                                        dataSourceWizard.start();
                                        dataSourceWizard.isVisible(true);
                                    }
                                });
                            }
                            if (multiQueryDataSourceWizard) {
                                actions.push(_this._createMultiQueryDataSourceWizardAction(multiQueryDataSourceWizard, designerModel));
                            }
                            actions.push({
                                id: Actions.ActionId.Save,
                                container: "menu",
                                text: "Save",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Save", Internal.StringId.Save); },
                                imageClassName: "dxrd-image-save",
                                imageTemplateName: "dxrd-svg-menu-save",
                                disabled: ko.pureComputed(function () { return !report(); }),
                                visible: true,
                                hotKey: { ctrlKey: true, keyCode: "S".charCodeAt(0) },
                                clickAction: function () {
                                    if (Internal.reportStorageWebIsRegister) {
                                        var currentTab = designerModel.navigateByReports.currentTab();
                                        if (!currentTab.isDirty()) {
                                            return;
                                        }
                                        if (!currentTab.context().url()) {
                                            designerModel.saveReportDialog.show(currentTab);
                                        }
                                        else {
                                            var args = { report: currentTab.context().report, url: currentTab.context().url(), cancel: false };
                                            callbacks.reportSaving && callbacks.reportSaving(args);
                                            if (args.cancel)
                                                return;
                                            Internal.ReportStorageWeb.setData(currentTab.context().report.serialize(), currentTab.context().url())
                                                .done(function (result) {
                                                currentTab.isDirty(false);
                                                callbacks.reportSaved && callbacks.reportSaved({ report: currentTab.context().report, url: currentTab.context().url() });
                                                DevExpress.Analytics.Internal.ShowMessage(DevExpress.Analytics.Utils.getLocalization("The report has been successfully saved.", "ASPxReportsStringId.ReportDesigner_SaveReport_Message_OK"), DevExpress.Analytics.Internal.NotifyType.success);
                                            }).fail(function () {
                                                callbacks.onServerError && callbacks.onServerError({ state: "save", model: { report: currentTab.context().report, url: currentTab.context().url() } });
                                            });
                                        }
                                    }
                                    else {
                                        report().save();
                                    }
                                }
                            });
                            if (Internal.reportStorageWebIsRegister) {
                                actions.push({
                                    id: Actions.ActionId.SaveAs,
                                    container: "menu",
                                    text: "Save As",
                                    displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Save As", Internal.StringId.SaveAs); },
                                    imageClassName: "dxrd-image-save",
                                    imageTemplateName: "dxrd-svg-menu-save",
                                    disabled: ko.pureComputed(function () { return !report(); }),
                                    visible: true,
                                    clickAction: function () {
                                        designerModel.saveReportDialog.show(designerModel.navigateByReports.currentTab());
                                    }
                                });
                            }
                            actions.push({
                                id: Actions.ActionId.Exit,
                                container: "menu",
                                text: "Exit",
                                displayText: function () { return DevExpress.Analytics.Utils.getLocalization("Exit", 'ReportStringId.UD_Capt_Exit'); },
                                imageClassName: "dxrd-image-exit",
                                imageTemplateName: "dxrd-svg-menu-exit",
                                disabled: ko.observable(false),
                                visible: true,
                                clickAction: function () {
                                    designerModel.navigateByReports.closeAll().done(function () {
                                        exitDesigner && exitDesigner();
                                    });
                                }
                            });
                            nextCustomizer && nextCustomizer(actions);
                        });
                    };
                    ReportDesignerInitializer.prototype.addContextActions = function (func) {
                        var _this = this;
                        if (func === void 0) { func = function (settings) {
                            settings.actionProviders = [new Actions.ReportElementActions(_this.buildingModel.surface, _this.buildingModel.selection),
                                new Actions.ElementsGroupActions(_this.buildingModel.surface, _this.buildingModel.selection),
                                new Actions.ReportActions(_this._designerCallbacks.componentAdded),
                                new Actions.TableRowActions(_this.buildingModel.selection, _this._designerCallbacks.componentAdded),
                                new Actions.TableCellActions(_this.buildingModel.selection, _this._designerCallbacks.componentAdded),
                                new Actions.TextElementAction(_this.buildingModel.selection),
                                new Actions.TableCellGroupActions(_this.buildingModel.selection),
                                new Actions.PivotGridActions()];
                            settings.createDefaultActions(_this.buildingModel.editableObject, _this.buildingModel.undoEngine);
                        }; }
                        _super.prototype.addContextActions.call(this, func);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addActionLists = function (actionListsFunc) {
                        var _this = this;
                        if (actionListsFunc === void 0) { actionListsFunc = function () {
                            var designerShortcutsEnabled = ko.computed(function () {
                                var isDesignMode = _this.buildingModel.designMode();
                                var isWizardVisible = _this.buildingModel.wizard && _this.buildingModel.wizard.isVisible();
                                var isDataSourceWizardVisible = _this.buildingModel.dataSourceWizard && _this.buildingModel.dataSourceWizard.isVisible();
                                var isMultiQueryDataSourceWizardVisible = _this.buildingModel.multiQueryDataSourceWizard && _this.buildingModel.multiQueryDataSourceWizard.isVisible();
                                return isDesignMode && !isWizardVisible && !isDataSourceWizardVisible && !isMultiQueryDataSourceWizardVisible;
                            });
                            _this._addDisposable(designerShortcutsEnabled);
                            var actions = new DevExpress.Analytics.Internal.ActionLists(_this.buildingModel.surface, _this.buildingModel.selection, _this.buildingModel.undoEngine, _this._customizeDesignerActions(_this.buildingModel, _this._designerCallbacks.customizeActions, _this._designerCallbacks.exitDesigner, function () { return _this._reportcontext() && _this._reportcontext().state() || _this.buildingModel.state; }, _this._designerCallbacks), designerShortcutsEnabled, Internal.reportCopyPasteStrategy(_this._designerCallbacks.componentAdded), _this.buildingModel.zoomStep);
                            _this.addElement("actionStorage", function () { return $.extend({}, _this._createActionsStorage(actions.menuItems), _this._createActionsStorage(actions.toolbarItems)); });
                            return actions;
                        }; }
                        _super.prototype.addActionList.call(this, actionListsFunc);
                        return this;
                    };
                    ReportDesignerInitializer.prototype._createChartDesignerPart = function (context) {
                        var _this = this;
                        var chartValueBindingProvider = ko.computed(function () { return context() && context().chartValueBindingProvider; });
                        this._addDisposable(chartValueBindingProvider);
                        var chartDesignerOptions = Internal.createChartDesignerOptions(this.buildingModel, this.buildingModel.dataSourceHelper, this.buildingModel.model, this.buildingModel.parameters, chartValueBindingProvider);
                        this.addElement("runChartDesigner", function () { return function (chart) {
                            chartDesignerOptions.run(chart);
                        }; });
                        this.addElement("chartDataSources", function () { return ko.computed(function () {
                            var pivotGrids = _this.buildingModel.controlsHelper.allControls().filter(function (item) { return item instanceof Controls.XRPivotGridViewModel; }).map(function (item) { return { displayName: item.name, value: item }; });
                            var usedDataSources = _this.buildingModel.dataSourceHelper() && _this.buildingModel.dataSourceHelper().usedDataSources() && _this.buildingModel.dataSourceHelper().usedDataSources().map(function (item) { return { displayName: item.name, value: item.data }; }), result = [].concat(pivotGrids, usedDataSources);
                            return result;
                        }); });
                        this._addDisposable(this.buildingModel.controlsHelper.allControls.subscribe(function (newArr) {
                            newArr.filter(function (item) { return item instanceof Controls.XRChartViewModel; }).forEach(function (chart) {
                                if (chart.isPivotGridDataSource() && newArr.indexOf(chart.dataSource()) === -1)
                                    chart.dataSource(null);
                            });
                        }));
                        this._addDisposable(chartDesignerOptions);
                        return { id: null, templateName: Utils.ReportDesignerElements.ChartDialog, model: chartDesignerOptions };
                    };
                    ReportDesignerInitializer.prototype._createWizardPart = function (wizardName, model) {
                        if (model instanceof DevExpress.Analytics.Wizard.FullscreenWizard) {
                            return { id: Utils.ReportDesignerAddOns[wizardName + "Fullscreen"], templateName: Utils.ReportDesignerAddOns[wizardName + "Fullscreen"].split("#")[0], model: model };
                        }
                        return { id: Utils.ReportDesignerAddOns[wizardName], templateName: Utils.ReportDesignerAddOns[wizardName].split("#")[0], model: model };
                    };
                    ReportDesignerInitializer.prototype.addParts = function (func) {
                        var _this = this;
                        if (func === void 0) { func = function (parts) {
                            var reportConverter = new Internal.ReportConverter(_this.buildingModel.controlsHelper, _this.buildingModel.undoEngine, _this._dataBiningMode);
                            _this._addDisposable(_this._reportcontext.subscribe(function (newVal) {
                                if (newVal)
                                    reportConverter.convert(newVal.report, _this._convertBindingsToExpressions);
                            }));
                            var oldMenuPart = parts.filter(function (part) { return part.id === DevExpress.Analytics.Internal.DesignerBaseElements.MenuButton; })[0];
                            var index = parts.indexOf(oldMenuPart);
                            parts.splice(index, 1);
                            parts.push({ id: Utils.ReportDesignerElements.NavigationPanel, templateName: Utils.ReportDesignerElements.NavigationPanel, model: _this.buildingModel.navigateByReports }, { id: null, templateName: Utils.ReportDesignerElements.ReportDialog, model: _this.buildingModel.saveReportDialog }, { id: null, templateName: Utils.ReportDesignerElements.ReportDialog, model: _this.buildingModel.saveReportDialogLight }, { id: null, templateName: Utils.ReportDesignerElements.ReportDialog, model: _this.buildingModel.openReportDialog }, { id: Utils.ReportDesignerElements.MenuButton, templateName: Utils.ReportDesignerElements.MenuButton, model: _this.buildingModel }, _this._createChartDesignerPart(_this._reportcontext), { id: null, templateName: Utils.ReportDesignerElements.ReportConverterDialog, model: reportConverter });
                            return parts;
                        }; }
                        _super.prototype.addParts.call(this, func);
                        this._designerCallbacks.customizeParts && this._designerCallbacks.customizeParts(this.buildingModel.parts);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addDefaultAddons = function (addons) {
                        if (addons === void 0) { addons = [
                            { id: Utils.ReportDesignerAddOns.Preview, templateName: Utils.ReportDesignerAddOns.Preview, model: this.buildingModel.reportPreviewModel },
                            this._createWizardPart("ReportWizard", this.buildingModel.wizard),
                            { id: Utils.ReportDesignerAddOns.DataSourceWizard, templateName: Utils.ReportDesignerAddOns.DataSourceWizard.split("#")[0], model: this.buildingModel.dataSourceWizard },
                            this._createWizardPart("MultiQueryDataSourceWizard", this.buildingModel.multiQueryDataSourceWizard)
                        ]; }
                        this.addElement("addOns", function () { return ko.observableArray(addons); });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.tryAddSqlDataSourceEditorAddon = function (relationsEditor) {
                        if (relationsEditor === void 0) { relationsEditor = this._sqlDataSourceEditor.relationsEditor; }
                        if (relationsEditor)
                            this.buildingModel.addOns.push({ id: Utils.ReportDesignerAddOns.MasterDetailEditor, templateName: Utils.ReportDesignerAddOns.MasterDetailEditor, model: relationsEditor });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.tryAddScriptEditorAddon = function (isScriptsDisabled) {
                        if (this._tryAddScriptEditor(isScriptsDisabled))
                            this.buildingModel.addOns.push({ id: Utils.ReportDesignerAddOns.ScriptEditor, templateName: Utils.ReportDesignerAddOns.ScriptEditor, model: this.buildingModel.scriptsEditor });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.onContextChanged = function (subreports, func) {
                        var _this = this;
                        if (func === void 0) { func = function (context) {
                            if (context) {
                                context.report.getSubreportUrls = function () { return _this._getSubreportUrls(_this.buildingModel.reportUrls, subreports); };
                                _this.buildingModel.selectedPath(null);
                                if (_this.buildingModel.toolboxItems) {
                                    _this.buildingModel.toolboxItems.forEach(function (item) { item.disabled(false); });
                                }
                            }
                            else {
                                if (_this.buildingModel.selection) {
                                    _this.buildingModel.selection.clear();
                                    _this.buildingModel.selection.focused(_this.buildingModel.surface());
                                }
                                _this.buildingModel.editableObject && _this.buildingModel.editableObject(null);
                                _this.buildingModel.toolboxItems && _this.buildingModel.toolboxItems.forEach(function (item) { item.disabled(true); });
                                _this.buildingModel.popularProperties && _this.buildingModel.popularProperties.cleanEditors();
                            }
                        }; }
                        func(this._reportcontext());
                        this._addDisposable(this._reportcontext.subscribe(function (newVal) { return func(newVal); }));
                        return this;
                    };
                    ReportDesignerInitializer.prototype.configurateRtl = function (rtl) {
                        this.rtl = !!rtl;
                        DevExpress.config({ rtlEnabled: !!this.rtl });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.configureReportStorageRegistration = function (reportStorageWebIsRegister, allowMDI) {
                        Internal.reportStorageWebIsRegister = reportStorageWebIsRegister === undefined ? Internal.reportStorageWebIsRegister : reportStorageWebIsRegister;
                        this._allowMDI = reportStorageWebIsRegister ? allowMDI : false;
                        return this;
                    };
                    ReportDesignerInitializer.prototype.applyUri = function (uriSettings) {
                        Utils.HandlerUri = uriSettings.reportDesignerUri || Utils.HandlerUri;
                        Chart.Internal.HandlerUri = uriSettings.reportDesignerUri;
                        this._previewUri = uriSettings.previewUri;
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initBindingMode = function (dataBiningMode, convertBindingsToExpressions) {
                        this._dataBiningMode = dataBiningMode;
                        this._convertBindingsToExpressions = convertBindingsToExpressions;
                        return this;
                    };
                    ReportDesignerInitializer.prototype.registerControls = function (dataBindingMode, reportItemsProvider) {
                        Designer.Utils.DataBindingMode = dataBindingMode || "Expressions";
                        Internal.registerControls(reportItemsProvider);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addCallbacks = function (callbacks) {
                        this._callbacks = callbacks;
                        if (!this._callbacks.designer)
                            this._callbacks.designer = {};
                        if (!this._callbacks.preview)
                            this._callbacks.preview = {};
                        this._callbacks.designer.fieldLists = this._callbacks.designer.fieldLists || Internal.ReportDataSourceService.fieldListCallback;
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addProcessErrorCallback = function (processError) {
                        if (processError === void 0) { processError = this._designerCallbacks && this._designerCallbacks.onServerError; }
                        this._disposables.push(DevExpress.Analytics.Internal.processErrorEvent(processError));
                        return this;
                    };
                    ReportDesignerInitializer.prototype.runCustomizeToolboxEvent = function (customizeToolbox) {
                        if (customizeToolbox === void 0) { customizeToolbox = this._designerCallbacks && this._designerCallbacks.customizeToolbox; }
                        customizeToolbox && customizeToolbox(Utils.controlsFactory);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addLocalization = function (localization) {
                        if (localization) {
                            DevExpress.Analytics.Utils.addCultureInfo({ messages: localization });
                        }
                        return this;
                    };
                    ReportDesignerInitializer.prototype.applyLocalizationToDevExtreme = function (currentCulture) {
                        DevExpress.Analytics.Internal.applyLocalizationToDevExtreme(currentCulture);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initCultureInfo = function (cultureInfoList) {
                        $.extend(true, DevExpress.Reporting.Internal.cultureInfo, cultureInfoList);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.updateFont = function (fontSet) {
                        if (fontSet) {
                            var fonts = {};
                            if (fontSet instanceof Array)
                                fontSet.forEach(function (fontName) { return fonts[fontName] = fontName; });
                            else
                                fonts = fontSet;
                            this.buildingModel.updateFont(fonts);
                            this.buildingModel.sortFont();
                        }
                        return this;
                    };
                    ReportDesignerInitializer.prototype.initFormatStringPatterns = function (formatStringData) {
                        if (formatStringData) {
                            formatStringData.standardPatterns && Object.keys(formatStringData.standardPatterns).forEach(function (propName) {
                                if (!DevExpress.Analytics.Widgets.Internal.formatStringStandardPatterns[propName])
                                    DevExpress.Analytics.Widgets.Internal.formatStringStandardPatterns[propName] = formatStringData.standardPatterns[propName];
                                else
                                    DevExpress.Analytics.Widgets.Internal.formatStringStandardPatterns[propName].patterns = formatStringData.standardPatterns[propName].patterns;
                            });
                            formatStringData.customPatterns && Object.keys(formatStringData.customPatterns).forEach(function (propName) {
                                Utils.formatStringEditorCustomSet[propName] = formatStringData.customPatterns[propName];
                            });
                        }
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addPopularProperties = function (controlsFactory) {
                        var _this = this;
                        _super.prototype.addPopularProperties.call(this, controlsFactory);
                        this.addElement("popularVisible", function () { return ko.pureComputed(function () {
                            return _this.buildingModel.popularProperties._editors().some(function (x) { return x.visible(); }) ||
                                _this.buildingModel.contextActions().length > 0;
                        }); });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addInlineTextEdit = function (func) {
                        var _this = this;
                        if (func === void 0) { func = function () { return new DevExpress.Analytics.Internal.InlineTextEdit(_this._selection); }; }
                        this.addElement("inlineTextEdit", func);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addStylesProjection = function (styles) {
                        var _this = this;
                        if (styles === void 0) { styles = ko.pureComputed(function () { return _this.buildingModel.model() && _this.buildingModel.model().styles; }); }
                        this.addElement("styles", function () { return styles; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addFormattingRulesProjection = function (rules) {
                        var _this = this;
                        if (rules === void 0) { rules = ko.pureComputed(function () { return _this.buildingModel.model() && _this.buildingModel.model().formattingRuleSheet; }); }
                        this.addElement("formattingRuleSheet", function () { return rules; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addReportExplorerProvider = function (reportExplorerProvider) {
                        if (reportExplorerProvider === void 0) { reportExplorerProvider = new DevExpress.Analytics.Internal.ObjectExplorerProvider([{ model: this.buildingModel.model, name: "Report", className: "master_report" }], ["bands", "controls", "rows", "cells"], ko.observable(null)); }
                        this.addElement("reportExplorerProvider", function () { return reportExplorerProvider; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addControlsProjection = function (controlsHelper) {
                        var _this = this;
                        if (controlsHelper === void 0) { controlsHelper = this.buildingModel.controlsHelper; }
                        this.addElement("getControls", function () { return function (target) {
                            return ko.pureComputed(function () {
                                return _this._getControls(controlsHelper.getControls(ko.unwrap(target)), function (item) {
                                    return !(item instanceof Bands.BandViewModel || item instanceof Controls.ReportViewModel);
                                });
                            });
                        }; });
                        this.addElement("controls", function () { return _this._getControls(controlsHelper.allControls, function (item) { return !(item instanceof Bands.BandViewModel || item instanceof Controls.ReportViewModel); }); });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addBandsProjection = function (controlsHelper) {
                        var _this = this;
                        if (controlsHelper === void 0) { controlsHelper = this.buildingModel.controlsHelper; }
                        this.addElement("bands", function () { return function (filter, IsNoneNeaded) {
                            return _this._getControls(controlsHelper.allControls, function (item) {
                                return item instanceof Bands.BandViewModel && (filter ? filter(item) : true);
                            }, IsNoneNeaded);
                        }; });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addWizards = function (connectionStrings, wizardSettings, cusomizeSettingsFunc) {
                        var _this = this;
                        var initializerSettings = new WizardsInitializerSettings(connectionStrings, wizardSettings, this._designerCallbacks, this.rtl);
                        this.addElement("connections", function () { return connectionStrings; });
                        cusomizeSettingsFunc(initializerSettings);
                        if (initializerSettings.reportWizard) {
                            this.addElement("registerReportWizardPages", function () { return initializerSettings.registerReportWizardPages; });
                            this.addElement("wizard", function () { return initializerSettings.reportWizard; });
                        }
                        if (initializerSettings.dataSourceWizard) {
                            this.addElement("dataSourceWizard", function () { return initializerSettings.dataSourceWizard; });
                        }
                        if (initializerSettings.multiQueryDataSourceWizard) {
                            this.addElement("registerMultiQueryDataSourceWizardPages", function () { return initializerSettings.registerMultiQueryDataSourceWizardPages; });
                            this.addElement("multiQueryDataSourceWizard", function () { return initializerSettings.multiQueryDataSourceWizard; });
                        }
                        this._sqlDataSourceEditor = initializerSettings.sqlDataSourceEditor;
                        this._jsonDataSourceEditor = initializerSettings.jsonDataSourceEditor;
                        this._dataSourceActionProvider = initializerSettings.dataSourceActionProvider;
                        this.addElement("_wizardRunner", function () { return new Internal.WizardRunner({
                            visible: _this.getModel().appMenuVisible,
                            collapsed: _this.getModel().isMenuCollapsed
                        }); });
                        return this;
                    };
                    ReportDesignerInitializer.prototype.addStaticContext = function () {
                        DevExpress.Analytics.Internal.appendStaticContextToRootViewModel(this.buildingModel, DevExpress);
                        return this;
                    };
                    ReportDesignerInitializer.prototype.tryApplyBindings = function (applyBindings, element) {
                        var _this = this;
                        if (applyBindings) {
                            this._designerCallbacks.beforeRender && this._designerCallbacks.beforeRender(this);
                            $(element).children().remove();
                            ko.applyBindings(this.buildingModel, element);
                            var dispose = function () {
                                _this.buildingModel.dispose();
                            };
                            DevExpress.Analytics.Internal.addDisposeCallback(element, dispose);
                        }
                        return this;
                    };
                    ReportDesignerInitializer.prototype.dispose = function () {
                        $(window).unbind("resize", this._updateCallback);
                        $(window).unbind("resize", this.buildingModel.reportPreviewModel.resizeCallback);
                        _super.prototype.dispose.call(this);
                        Utils.controlsFactory.dispose();
                        this.removeProperties();
                    };
                    return ReportDesignerInitializer;
                }(DevExpress.Analytics.Internal.CommonDesignerGenerator));
                Internal.ReportDesignerInitializer = ReportDesignerInitializer;
            })(Internal = Designer.Internal || (Designer.Internal = {}));
            var JSReportDesigner = (function () {
                function JSReportDesigner(_designerModel) {
                    this._designerModel = _designerModel;
                }
                Object.defineProperty(JSReportDesigner.prototype, "designerModel", {
                    get: function () {
                        return this._designerModel();
                    },
                    set: function (newVal) {
                        this._designerModel(newVal);
                    },
                    enumerable: true,
                    configurable: true
                });
                JSReportDesigner.prototype.UpdateLocalization = function (localization) {
                    DevExpress.Analytics.Utils.updateLocalization(localization);
                };
                JSReportDesigner.prototype.GetDesignerModel = function () {
                    return this.designerModel;
                };
                JSReportDesigner.prototype.GetPreviewModel = function () {
                    return this.designerModel.reportPreviewModel;
                };
                JSReportDesigner.prototype.GetPropertyInfo = function (controlType, path) {
                    return Utils.controlsFactory.getPropertyInfo(controlType, path);
                };
                JSReportDesigner.prototype.GetButtonStorage = function () {
                    return this.designerModel.actionStorage;
                };
                JSReportDesigner.prototype.RunWizard = function (wizardType) {
                    this.designerModel._wizardRunner.runWizard(wizardType);
                };
                JSReportDesigner.prototype.GetJsonReportModel = function () {
                    return this.designerModel.model().serialize();
                };
                JSReportDesigner.prototype.IsModified = function () {
                    return this.designerModel && this.designerModel.isDirty();
                };
                JSReportDesigner.prototype.ResetIsModified = function () {
                    if (this.designerModel) {
                        this.designerModel.isDirty(false);
                        this.designerModel.undoEngine && this.designerModel.undoEngine().clearHistory();
                    }
                };
                JSReportDesigner.prototype.AddToPropertyGrid = function (groupName, property) {
                    var group = Widgets.groups[groupName];
                    if (group) {
                        group.info.push(property);
                    }
                    else {
                        Widgets.groups[groupName] = { info: [property] };
                    }
                };
                JSReportDesigner.prototype.AddParameterType = function (parameterInfo, editorInfo) {
                    Data.Parameter.typeValues.push(parameterInfo);
                    DevExpress.Analytics.Internal.editorTypeMapper[parameterInfo.value] = editorInfo;
                };
                JSReportDesigner.prototype.RemoveParameterType = function (parameterType) {
                    var position = Data.Parameter.typeValues.indexOf(this.GetParameterInfo(parameterType));
                    if (position !== -1) {
                        Data.Parameter.typeValues.splice(position, 1);
                    }
                };
                JSReportDesigner.prototype.GetParameterInfo = function (parameterType) {
                    return Data.Parameter.typeValues.filter(function (val) { return val.value === parameterType; })[0];
                };
                JSReportDesigner.prototype.GetParameterEditor = function (valueType) {
                    return DevExpress.Analytics.Internal.editorTypeMapper[valueType];
                };
                JSReportDesigner.prototype.ReportStorageGetData = function (url) {
                    return Internal.ReportStorageWeb.getData(url);
                };
                JSReportDesigner.prototype.ReportStorageSetData = function (reportLayout, url) {
                    return Internal.ReportStorageWeb.setData(reportLayout, url);
                };
                JSReportDesigner.prototype.ReportStorageSetNewData = function (reportLayout, url) {
                    return Internal.ReportStorageWeb.setNewData(reportLayout, url);
                };
                JSReportDesigner.prototype.SaveReport = function () {
                    var navigateByReports = this.designerModel.navigateByReports;
                    return this.ReportStorageSetData(navigateByReports.currentTab().context().report.serialize(), navigateByReports.currentTab().context().url());
                };
                JSReportDesigner.prototype.GetTabs = function () {
                    return this.designerModel.getTabs();
                };
                JSReportDesigner.prototype.GetCurrentTab = function () {
                    return this.designerModel.navigateByReports.currentTab();
                };
                JSReportDesigner.prototype.CloseTab = function (tab, force) {
                    if (force === void 0) { force = false; }
                    this.designerModel.closeTab(tab, force);
                };
                JSReportDesigner.prototype.CloseCurrentTab = function () {
                    this.designerModel.navigateByReports.removeTab(this.designerModel.navigateByReports.currentTab());
                };
                JSReportDesigner.prototype.AdjustControlCore = function () {
                    this.designerModel && this.designerModel.updateSurfaceSize();
                };
                JSReportDesigner.prototype.SaveNewReport = function (reportName) {
                    var navigateByReports = this.designerModel.navigateByReports;
                    return this.ReportStorageSetNewData(navigateByReports.currentTab().context().report.serialize(), reportName);
                };
                JSReportDesigner.prototype.ReportStorageGetUrls = function () {
                    return Internal.ReportStorageWeb.getUrls();
                };
                JSReportDesigner.prototype.OpenReport = function (url) {
                    this.designerModel.openReport(url);
                };
                JSReportDesigner.prototype.ShowPreview = function () {
                    var _this = this;
                    var reportPreview = this.designerModel.reportPreviewModel.reportPreview;
                    reportPreview.previewVisible(true);
                    var initializePreivewTimeout = setTimeout(function () {
                        reportPreview.initialize(Internal.ReportPreviewService.initializePreview(_this.designerModel.model()));
                    }, 1);
                    this.designerModel._disposables.push({
                        dispose: function () { return clearTimeout(initializePreivewTimeout); }
                    });
                };
                return JSReportDesigner;
            }());
            Designer.JSReportDesigner = JSReportDesigner;
            var JSReportDesignerBinding = (function (_super) {
                __extends(JSReportDesignerBinding, _super);
                function JSReportDesignerBinding(_options, customEventRaiser) {
                    var _this = _super.call(this, _options, customEventRaiser) || this;
                    _this._model = null;
                    _this._deferreds = [];
                    Internal.limitation = _options.limitation;
                    Chart["limitation"] = Internal.limitation;
                    _options.designerModel = ko.isWriteableObservable(_options.designerModel) ? _options.designerModel : ko.observable(null);
                    _this.sender = new JSReportDesigner(_options.designerModel);
                    _this._initializationData = ko.isObservable(_options.initializationData)
                        ? _options.initializationData
                        : ko.observable(_options.initializationData);
                    return _this;
                }
                JSReportDesignerBinding.prototype._applyBindings = function (model, $element) {
                    this.sender.designerModel = model;
                    this._disposables.push(model);
                    var childTemplate = !model ? $("<div>") : this._templateHtml;
                    $element.children().remove();
                    var child = $element.append(childTemplate).children()[0];
                    if (!child)
                        return;
                    ko.cleanNode(child);
                    this._callbacks && this._callbacks.designer.beforeRender && this._callbacks.designer.beforeRender(model);
                    ko.applyBindings(model, child);
                    this._fireEvent("Init");
                    var updateSizeTimeout = setTimeout(function () {
                        model && model.updateSurfaceSize();
                    }, 1);
                    this._disposables.push({ dispose: function () { return clearTimeout(updateSizeTimeout); } });
                };
                JSReportDesignerBinding.prototype._initializeCallbacks = function () {
                    var _this = this;
                    if (this._options.callbacks) {
                        return {
                            preview: this._getAvailableEvents(DevExpress.Reporting.EventGenerator.generatePreviewEvents(function (eventName, args) {
                                _this._fireEvent(eventName, args);
                            }, "Preview"), "preview"),
                            designer: this._getAvailableEvents(DevExpress.Reporting.EventGenerator.generateDesignerEvents(function (eventName, args) {
                                _this._fireEvent(eventName, args);
                            }), "designer")
                        };
                    }
                };
                JSReportDesignerBinding.prototype._createModel = function (initData, element) {
                    this._callbacks = this._initializeCallbacks();
                    return Internal.createReportDesignerFromModel(initData, element, this._callbacks, false);
                };
                JSReportDesignerBinding.prototype._getDesignerModelRequest = function (reportUrl) {
                    var self = this;
                    var requestOptions = this._options.requestOptions;
                    self._callbacks = this._initializeCallbacks();
                    var getDesignerModelActionUrl = this._getServerActionUrl(requestOptions.host, requestOptions.getDesignerModelAction);
                    var onError = function (data, textStatus, jqXHR, getRequestDetails, errorThrown) {
                        if (self._callbacks && self._callbacks.designer && self._callbacks.designer.onServerError)
                            self._callbacks.designer.onServerError({ jqXHR: jqXHR, textStatus: textStatus, data: data, getRequestDetails: getRequestDetails });
                        if (errorThrown)
                            throw errorThrown;
                    };
                    var getModel = DevExpress.Analytics.Utils.ajaxSetup.sendRequest({
                        url: getDesignerModelActionUrl,
                        type: "POST",
                        data: {
                            reportUrl: reportUrl
                        }
                    });
                    var _deferredModel = $.Deferred();
                    this._deferreds.push(_deferredModel);
                    getModel.done(_deferredModel.resolve).fail(_deferredModel.reject);
                    _deferredModel.done(function (result, textStatus, jqXHR) {
                        if (result.error) {
                            return onError(result, textStatus, jqXHR, function () { return ({ url: getDesignerModelActionUrl, data: { reportUrl: reportUrl } }); }, result.error);
                        }
                        result.handlerUri = self._getServerActionUrl(requestOptions.host, result.handlerUri);
                        result.viewerHandlerUri = self._getServerActionUrl(requestOptions.host, result.viewerHandlerUri);
                        result.queryBuilderHandlerUri = self._getServerActionUrl(requestOptions.host, result.queryBuilderHandlerUri);
                        self._initializationData(result);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        onError({ error: errorThrown }, textStatus, jqXHR, function () { return ({ url: getDesignerModelActionUrl, data: { reportUrl: reportUrl } }); }, errorThrown);
                    });
                };
                JSReportDesignerBinding.prototype.dispose = function () {
                    (this._deferreds || []).forEach(function (deferred) {
                        deferred.reject();
                    });
                    _super.prototype.dispose.call(this);
                };
                JSReportDesignerBinding.prototype.applyBindings = function (element) {
                    var _this = this;
                    var self = this;
                    var _$element = $(element);
                    _$element.addClass("dx-designer");
                    this._createDisposeFunction(element);
                    if (self._options.undoEngine) {
                        self._applyBindings(self._options, _$element);
                        return;
                    }
                    var applyBindingsFunc = function (newData) {
                        _this._model && _this._model.dispose();
                        self._createModel(newData, element).done(function (model) {
                            _this._model = model;
                            self._applyBindings(_this._model, _$element);
                        });
                    };
                    this._disposables.push(self._initializationData.subscribe(function (newVal) {
                        applyBindingsFunc(newVal);
                    }));
                    if (self._options.requestOptions) {
                        self._getLocalizationRequest().done(function (localization) {
                            localization && DevExpress.Analytics.Utils.addCultureInfo(localization);
                        }).always(function () {
                            if (self._options.requestOptions.getDesignerModelAction) {
                                if (ko.isSubscribable(self._options.reportUrl)) {
                                    _this._disposables.push(self._options.reportUrl.subscribe(function (newVal) {
                                        self._getDesignerModelRequest(newVal);
                                    }));
                                }
                                self._getDesignerModelRequest(ko.unwrap(self._options.reportUrl));
                            }
                            else {
                                applyBindingsFunc(self._initializationData());
                            }
                        });
                    }
                    else {
                        applyBindingsFunc(self._initializationData());
                    }
                };
                return JSReportDesignerBinding;
            }(DevExpress.Analytics.Internal.JSDesignerBindingCommon));
            Designer.JSReportDesignerBinding = JSReportDesignerBinding;
            ko.bindingHandlers['dxReportDesigner'] = {
                init: function (element, valueAccessor) {
                    new JSReportDesignerBinding(ko.unwrap(valueAccessor()) || {}).applyBindings(element);
                    return { controlsDescendantBindings: true };
                }
            };
        })(Designer = Reporting.Designer || (Reporting.Designer = {}));
    })(Reporting = DevExpress.Reporting || (DevExpress.Reporting = {}));
})(DevExpress || (DevExpress = {}));
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.DefaultDataFilterModel", "Reporting.Chart.Internal.Models.DefaultDataFilterModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.dataFilterSerializationsInfo", "Reporting.Chart.Internal.Models.dataFilterSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.SeriesViewModel", "Reporting.Chart.Internal.Series.SeriesViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.SeriesViewViewModel", "Reporting.Chart.Internal.Series.SeriesViewViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.SeriesLabelViewModel", "Reporting.Chart.Internal.Series.SeriesLabelViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.SeriesPointModel", "Reporting.Chart.Internal.Series.SeriesPointModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.SeriesTemplateViewModel", "Reporting.Chart.Internal.Series.SeriesTemplateViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.FillStyle", "Reporting.Chart.Internal.Series.FillStyle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.DataMemberBase", "Reporting.Chart.Internal.DataMembers.DataMemberBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.CommonValueDataMembers", "Reporting.Chart.Internal.DataMembers.CommonValueDataMembers");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.StockValueDataMembers", "Reporting.Chart.Internal.DataMembers.StockValueDataMembers");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.Value1Value2DataMembers", "Reporting.Chart.Internal.DataMembers.Value1Value2DataMembers");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ValueWeightDataMembers", "Reporting.Chart.Internal.DataMembers.ValueWeightDataMembers");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartViewModel", "Reporting.Chart.Internal.Models.ChartViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.DataContainerViewModel", "Reporting.Chart.Internal.Models.DataContainerViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.DataFilterModel", "Reporting.Chart.Internal.Models.DataFilterModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.LegendViewModel", "Reporting.Chart.Internal.Models.LegendViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.TitleViewModel", "Reporting.Chart.Internal.Models.TitleViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.AdditionalLegendViewModel", "Reporting.Chart.Internal.Models.AdditionalLegendViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ConstantLineViewModel", "Reporting.Chart.Internal.Models.ConstantLineViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ScaleBreakViewModel", "Reporting.Chart.Internal.Models.ScaleBreakViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.StripViewModel", "Reporting.Chart.Internal.Models.StripViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.AdditionalPaneViewModel", "Reporting.Chart.Internal.Models.AdditionalPaneViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ViewEditor", "Reporting.Chart.Internal.Widgets.ViewEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.UndoColorPickerEditor", "Reporting.Chart.Internal.Widgets.UndoColorPickerEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.SummaryFunctionModel", "Reporting.Chart.Internal.Widgets.SummaryFunctionModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.SummaryFunctionEditor", "Reporting.Chart.Internal.Widgets.SummaryFunctionEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.PointsEditor", "Reporting.Chart.Internal.Widgets.PointsEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.CollectionLookupEditorModel", "Reporting.Chart.Internal.Widgets.CollectionLookupEditorModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartDependencyEditor", "Reporting.Chart.Internal.Widgets.ChartDependencyEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartDataSourceEditor", "Reporting.Chart.Internal.Widgets.ChartDataSourceEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartDataMemberEditor", "Reporting.Chart.Internal.Widgets.ChartDataMemberEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartStructureObjectProvider", "Reporting.Chart.Internal.ChartStructureObjectProvider");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartStructureTreeListController", "Reporting.Chart.Internal.ChartStructureTreeListController");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.createInnerActionsWithPopover", "Reporting.Chart.Internal.createInnerActionsWithPopover");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartElementCollectionItemBase", "Reporting.Chart.Internal.Models.ChartElementCollectionItemBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.AxisXYViewModel", "Reporting.Chart.Internal.Axis.AxisXYViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.SecondaryAxisViewModel", "Reporting.Chart.Internal.Axis.SecondaryAxisViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.initCollectionItem", "Reporting.Chart.Internal.Axis.initCollectionItem");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.axisXYSerializationsInfo", "Reporting.Chart.Internal.axisXYSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.secondaryAxisXYSerializationsInfo", "Reporting.Chart.Internal.secondaryAxisXYSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.scaleBreakSerializationsInfo", "Reporting.Chart.Internal.scaleBreakSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.legendName", "Reporting.Chart.Internal.legendName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.stripSerializationsInfo", "Reporting.Chart.Internal.stripSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.constantLineSerializationsInfo", "Reporting.Chart.Internal.constantLineSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.radarAxisX", "Reporting.Chart.Internal.radarAxisX");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.axisX3D", "Reporting.Chart.Internal.axisX3D");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.axisX", "Reporting.Chart.Internal.axisX");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.radarAxisY", "Reporting.Chart.Internal.radarAxisY");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.axisY3D", "Reporting.Chart.Internal.axisY3D");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.axisY", "Reporting.Chart.Internal.axisY");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.DiagramViewModel", "Reporting.Chart.Internal.DiagramViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.diagram", "Reporting.Chart.Internal.diagram");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.secondaryAxesX", "Reporting.Chart.Internal.secondaryAxesX");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.secondaryAxesY", "Reporting.Chart.Internal.secondaryAxesY");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.panes", "Reporting.Chart.Internal.panes");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.diagramSerializationsInfo", "Reporting.Chart.Internal.diagramSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.diagramMapper", "Reporting.Chart.Internal.diagramMapper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartControlViewModel", "Reporting.Chart.Internal.ChartControlViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartControlSurface", "Reporting.Chart.Internal.ChartControlSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.chartControlSerializationsInfo", "Reporting.Chart.Internal.chartControlSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.fakeChartSerializationInfo", "Reporting.Chart.Internal.fakeChartSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.chartDataMember", "Reporting.Chart.Internal.chartDataMember");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.chartSeriesDataMember", "Reporting.Chart.Internal.chartSeriesDataMember");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.padding", "Reporting.Chart.Internal.padding");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.seriesLabelSerializationsInfo", "Reporting.Chart.Internal.seriesLabelSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.seriesLabel", "Reporting.Chart.Internal.seriesLabel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.pivotGridDataSourceOptions", "Reporting.Chart.Internal.pivotGridDataSourceOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.summaryFunctionSerializationInfo", "Reporting.Chart.Internal.Series.Metadata.summaryFunctionSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.seriesPointSerializationsInfo", "Reporting.Chart.Internal.seriesPointSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.points", "Reporting.Chart.Internal.points");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.createViewsArray", "Reporting.Chart.Internal.createViewsArray");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.view", "Reporting.Chart.Internal.view");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.viewBindableSerializationInfo", "Reporting.Chart.Internal.viewBindableSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.seriesTemplateSerializationsInfo", "Reporting.Chart.Internal.seriesTemplateSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.seriesTemplate", "Reporting.Chart.Internal.seriesTemplate");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.seriesSerializationsInfo", "Reporting.Chart.Internal.seriesSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.seriesSerializable", "Reporting.Chart.Internal.seriesSerializable");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.seriesDataMember", "Reporting.Chart.Internal.seriesDataMember");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.dataContainerSerializationsInfo", "Reporting.Chart.Internal.dataContainerSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.dataContainer", "Reporting.Chart.Internal.dataContainer");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.titleSerializationsInfo", "Reporting.Chart.Internal.titleSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.legendSerializationsInfo", "Reporting.Chart.Internal.legendSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.legend", "Reporting.Chart.Internal.legend");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.additionalLegendSerializationsInfo", "Reporting.Chart.Internal.additionalLegendSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.legends", "Reporting.Chart.Internal.legends");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.appearanceName", "Reporting.Chart.Internal.appearanceName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.paletteName", "Reporting.Chart.Internal.paletteName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.chartSerializationsInfo", "Reporting.Chart.Internal.chartSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.chart", "Reporting.Chart.Internal.chart");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ActionId", "Reporting.Chart.Internal.ActionId");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.controlsFactory", "Reporting.Chart.Internal.controlsFactory");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.registerControls", "Reporting.Chart.Internal.registerControls");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.deserializeModelArray", "Reporting.Chart.Internal.deserializeModelArray");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.parseDate", "Reporting.Chart.Internal.parseDate");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.serializeDate", "Reporting.Chart.Internal.serializeDate");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.HandlerUri", "Reporting.Chart.Internal.HandlerUri");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.updateChartSurfaceContentSize", "Reporting.Chart.Internal.updateChartSurfaceContentSize");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.subscribeTreelistArray", "Reporting.Chart.Internal.subscribeTreelistArray");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.getPropertyInfo", "Reporting.Chart.Internal.getPropertyInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.createChartStructure", "Reporting.Chart.Internal.createChartStructure");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.createChartDesigner", "Reporting.Chart.Internal.createChartDesigner");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.ChartRequests", "Reporting.Chart.Internal.ChartRequests");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.editorTemplates", "Reporting.Chart.Internal.editorTemplates");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.defaultBooleanValues", "Reporting.Chart.Internal.defaultBooleanValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.scaleTypeValues", "Reporting.Chart.Internal.scaleTypeValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.stringAlignmentValues", "Reporting.Chart.Internal.stringAlignmentValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.paneName", "Reporting.Chart.Internal.paneName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.axisXName", "Reporting.Chart.Internal.axisXName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.axisYName", "Reporting.Chart.Internal.axisYName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.angle", "Reporting.Chart.Internal.angle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.borderColor", "Reporting.Chart.Internal.borderColor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.backColor", "Reporting.Chart.Internal.backColor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.dataMember", "Reporting.Chart.Internal.dataMember");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.text", "Reporting.Chart.Internal.text");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.visible", "Reporting.Chart.Internal.visible");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.name", "Reporting.Chart.Internal.name");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.tag", "Reporting.Chart.Internal.tag");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.checkedInLegend", "Reporting.Chart.Internal.checkedInLegend");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.checkableInLegend", "Reporting.Chart.Internal.checkableInLegend");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.legendText", "Reporting.Chart.Internal.legendText");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.showInLegend", "Reporting.Chart.Internal.showInLegend");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.thickness", "Reporting.Chart.Internal.thickness");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.visibility", "Reporting.Chart.Internal.visibility");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.color", "Reporting.Chart.Internal.color");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.titleAlignment", "Reporting.Chart.Internal.titleAlignment");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.textPattern", "Reporting.Chart.Internal.textPattern");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.textAlignment", "Reporting.Chart.Internal.textAlignment");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.maxLineCount", "Reporting.Chart.Internal.maxLineCount");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.maxWidth", "Reporting.Chart.Internal.maxWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.textColor", "Reporting.Chart.Internal.textColor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.antialiasing", "Reporting.Chart.Internal.antialiasing");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.font", "Reporting.Chart.Internal.font");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.enableAxisXZooming", "Reporting.Chart.Internal.enableAxisXZooming");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.enableAxisXScrolling", "Reporting.Chart.Internal.enableAxisXScrolling");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.enableAxisYZooming", "Reporting.Chart.Internal.enableAxisYZooming");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.enableAxisYScrolling", "Reporting.Chart.Internal.enableAxisYScrolling");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.rotated", "Reporting.Chart.Internal.rotated");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.typeNameNotShow", "Reporting.Chart.Internal.typeNameNotShow");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.left", "Reporting.Chart.Internal.left");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.right", "Reporting.Chart.Internal.right");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.top", "Reporting.Chart.Internal.top");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.bottom", "Reporting.Chart.Internal.bottom");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.margin", "Reporting.Chart.Internal.margin");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.font18", "Reporting.Chart.Internal.font18");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.font12", "Reporting.Chart.Internal.font12");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.font8", "Reporting.Chart.Internal.font8");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.paneSerializationsInfo", "Reporting.Chart.Internal.paneSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.defaultPane", "Reporting.Chart.Internal.defaultPane");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.additionalPaneSerializationsInfo", "Reporting.Chart.Internal.additionalPaneSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.chartDataSource", "Reporting.Chart.Internal.chartDataSource");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.border", "Reporting.Chart.Internal.border");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.colorEach", "Reporting.Chart.Internal.colorEach");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.typeNameSerializable", "Reporting.Chart.Internal.typeNameSerializable");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.barSeriesViewGroup", "Reporting.Chart.Internal.barSeriesViewGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.bar3DSeriesViewGroup", "Reporting.Chart.Internal.bar3DSeriesViewGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.barWidth", "Reporting.Chart.Internal.barWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.borderSerializationsInfo", "Reporting.Chart.Internal.borderSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.fillMode", "Reporting.Chart.Internal.fillMode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.fillStyleOptionsSerialize", "Reporting.Chart.Internal.fillStyleOptionsSerialize");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.fillMode3D", "Reporting.Chart.Internal.fillMode3D");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.fillStyle", "Reporting.Chart.Internal.fillStyle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.viewSerializationsInfo", "Reporting.Chart.Internal.viewSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.fillModeMapper", "Reporting.Chart.Internal.fillModeMapper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Chart.viewMapper", "Reporting.Chart.Internal.viewMapper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.CoordinateGridViewModel", "Reporting.Designer.Internal.CoordinateGridViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.RulerViewModel", "Reporting.Designer.Internal.RulerViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Utils.guid", "Analytics.Internal.guid");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Utils.findFirstParentWithPropertyName", "Reporting.Designer.Internal.findFirstParentWithPropertyName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Utils.addVariablesToExpressionEditor", "Reporting.Designer.Internal.addVariablesToExpressionEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Utils.createIDataMemberInfoByName", "Reporting.Designer.Internal.createIDataMemberInfoByName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.AlignmentHandler", "Reporting.Designer.Internal.AlignmentHandler");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ElementActions", "Reporting.Designer.Actions.ElementActions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ElementsGroupActions", "Reporting.Designer.Actions.ElementsGroupActions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FitBoundsToTextAction", "Reporting.Designer.Actions.FitBoundsToTextAction");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FitTextToBoundsAction", "Reporting.Designer.Actions.FitTextToBoundsAction");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FitToContainerAction", "Reporting.Designer.Actions.FitToContainerAction");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.PivotGridActions", "Reporting.Designer.Actions.PivotGridActions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportActions", "Reporting.Designer.Actions.ReportActions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportElementActions", "Reporting.Designer.Actions.ReportElementActions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SpaceCommandHandler", "Reporting.Designer.Internal.SpaceCommandHandler");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SqlDataSourceEditor", "Reporting.Designer.Internal.SqlDataSourceEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableCellActions", "Reporting.Designer.Actions.TableCellActions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableCellGroupActions", "Reporting.Designer.Actions.TableCellGroupActions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableRowActions", "Reporting.Designer.Actions.TableRowActions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TextElementAction", "Reporting.Designer.Actions.TextElementAction");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.BandsHolder", "Reporting.Designer.Bands.Internal.BandsHolder");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.GroupFieldModel", "Reporting.Designer.Bands.GroupFieldModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.MultiColumn", "Reporting.Designer.Bands.MultiColumn");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.VerticalBandsContainerSurface", "Reporting.Designer.Bands.Internal.VerticalBandsContainerSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.BandViewModel", "Reporting.Designer.Bands.BandViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.BandSurface", "Reporting.Designer.Bands.BandSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DetailBand", "Reporting.Designer.Bands.DetailBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DetailBandSurface", "Reporting.Designer.Bands.DetailBandSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DetailReportBand", "Reporting.Designer.Bands.DetailReportBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DetailReportBandSurface", "Reporting.Designer.Bands.DetailReportBandSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.GroupHeaderBand", "Reporting.Designer.Bands.GroupHeaderBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TopMarginBand", "Reporting.Designer.Bands.TopMarginBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.BottomMarginBand", "Reporting.Designer.Bands.BottomMarginBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.BottomMarginSurface", "Reporting.Designer.Bands.BottomMarginSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.PageFooterSurface", "Reporting.Designer.Bands.PageFooterSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SubBandViewModel", "Reporting.Designer.Bands.SubBandViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SubBandSurface", "Reporting.Designer.Bands.SubBandSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.VerticalBandViewModel", "Reporting.Designer.Bands.VerticalBandViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.VerticalBandSurface", "Reporting.Designer.Bands.VerticalBandSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Anchoring", "Reporting.Designer.Controls.Anchoring");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.VerticalAcnhoring", "Reporting.Designer.Controls.VerticalAcnhoring");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.HorizontalAnchoring", "Reporting.Designer.Controls.HorizontalAnchoring");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ComponentsModel", "Reporting.Designer.Controls.ComponentsModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.EditOptions", "Reporting.Designer.Controls.EditOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.CheckEditOptions", "Reporting.Designer.Controls.CheckEditOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ImageEditOptions", "Reporting.Designer.Controls.ImageEditOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TextEditOptions", "Reporting.Designer.Controls.TextEditOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ExtensionModel", "Reporting.Designer.Controls.ExtensionModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FormattingRule", "Reporting.Designer.Controls.FormattingRule");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FormattingRuleLink", "Reporting.Designer.Controls.FormattingRuleLink");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SortingOptions", "Reporting.Designer.Controls.SortingOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.StyleModel", "Reporting.Designer.Controls.StyleModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ChartFieldListExtender", "Reporting.Designer.Internal.ChartFieldListExtender");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DataFilterModelReport", "Reporting.Designer.Internal.DataFilterModelReport");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableCalculationProvider", "Reporting.Designer.Internal.TableCalculationProvider");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableComponentSurface", "Reporting.Designer.Internal.TableComponentSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRBarCodeViewModel", "Reporting.Designer.Controls.XRBarCodeViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRBarcodeSurface", "Reporting.Designer.Controls.XRBarcodeSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRCharacterComb", "Reporting.Designer.Controls.XRCharacterComb");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRCharacterCombSurface", "Reporting.Designer.Controls.XRCharacterCombSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRChartViewModel", "Reporting.Designer.Controls.XRChartViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ChartSurface", "Reporting.Designer.Controls.XRChartSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.CheckBoxViewModel", "Reporting.Designer.Controls.XRCheckBoxViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRCheckboxSurface", "Reporting.Designer.Controls.XRCheckBoxSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ControlViewModel", "Reporting.Designer.Controls.XRControlViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ControlSurfaceBase", "Reporting.Designer.Controls.XRControlSurfaceBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ControlSurface", "Reporting.Designer.Controls.XRControlSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.CrossBandControlViewModel", "Reporting.Designer.Controls.XRCrossBandControlViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.CrossBandSurface", "Reporting.Designer.Controls.XRCrossBandSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRGaugeViewModel", "Reporting.Designer.Controls.XRGaugeViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRLineSurface", "Reporting.Designer.Controls.XRLineSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRPageBreakSurface", "Reporting.Designer.Controls.XRPageBreakSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRPageInfoSurface", "Reporting.Designer.Controls.XRPageInfoSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRPageInfoViewModel", "Reporting.Designer.Controls.XRPageInfoViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRPictureBoxViewModel", "Reporting.Designer.Controls.XRPictureBoxViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.PictureBoxSurface", "Reporting.Designer.Controls.XRPictureBoxSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRPivotGridViewModel", "Reporting.Designer.Controls.XRPivotGridViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.PivotGridSurface", "Reporting.Designer.Controls.XRPivotGridSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportViewModel", "Reporting.Designer.Controls.ReportViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportSurface", "Reporting.Designer.Controls.ReportSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportElementViewModel", "Reporting.Designer.Controls.XRReportElementViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRRichViewModel", "Reporting.Designer.Controls.XRRichViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRRichSurface", "Reporting.Designer.Controls.XRRichSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ShapeViewModel", "Reporting.Designer.Controls.XRShapeViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ShapeControlSurface", "Reporting.Designer.Controls.XRShapeControlSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRSparklineViewModel", "Reporting.Designer.Controls.XRSparklineViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SparkLineSurface", "Reporting.Designer.Controls.XRSparkLineSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SubreportViewModel", "Reporting.Designer.Controls.SubreportViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ParameterBinding", "Reporting.Designer.Controls.ParameterBinding");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRSubreportViewModel", "Reporting.Designer.Controls.XRSubreportViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SubreportSurface", "Reporting.Designer.Controls.XRSubreportSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableControlViewModel", "Reporting.Designer.Controls.XRTableControlViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableSurface", "Reporting.Designer.Controls.XRTableSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableCellViewModel", "Reporting.Designer.Controls.XRTableCellViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableCellSurface", "Reporting.Designer.Controls.XRTableCellSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableOfContentsViewModel", "Reporting.Designer.Controls.XRTableOfContentsViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableOfContentsSurface", "Reporting.Designer.Controls.XRTableOfContentsSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableOfContentsLevel", "Reporting.Designer.Controls.TableOfContentsLevel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableOfContentsLevelSurface", "Reporting.Designer.Controls.TableOfContentsLevelSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableRowViewModel", "Reporting.Designer.Controls.XRTableRowViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableRowSurface", "Reporting.Designer.Controls.XRTableRowSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TextControlSurfaceBase", "Reporting.Designer.Controls.XRTextControlSurfaceBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TodoControlSurface", "Reporting.Designer.Internal.TodoControlSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ZipCodeSurface", "Reporting.Designer.Controls.XRZipCodeSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ExpressionWrapper", "Reporting.Designer.Internal.ExpressionWrapper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.WrappedExpressionOptions", "Reporting.Designer.Internal.WrappedExpressionOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.LookUpSettings", "Reporting.Designer.Data.LookUpSettings");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.StaticListLookUpSettings", "Reporting.Designer.Data.StaticListLookUpSettings");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DynamicListLookUpSettings", "Reporting.Designer.Data.DynamicListLookUpSettings");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.LookUpValue", "Reporting.Designer.Data.LookUpValue");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Parameter", "Reporting.Designer.Data.Parameter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.CalculatedField", "Reporting.Designer.Data.CalculatedField");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DataBindingBase", "Reporting.Designer.Data.DataBindingBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DataBinding", "Reporting.Designer.Data.DataBinding");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ObjectsStorage", "Reporting.Designer.Data.ObjectsStorage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ObjectItem", "Reporting.Designer.Data.ObjectItem");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ObjectStorageItem", "Reporting.Designer.Data.ObjectStorageItem");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ObjectStorageParameter", "Reporting.Designer.Data.ObjectStorageParameter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableInfoCollectionItem", "Reporting.Designer.Data.TableInfoCollectionItem");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.UniversalDataSource", "Reporting.Designer.Data.UniversalDataSource");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.CharacterCombHelper", "Reporting.Designer.Internal.CharacterCombHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ControlsFactory", "Reporting.Designer.Controls.ControlsFactory");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DataSourceHelper", "Reporting.Designer.Internal.DataSourceHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DesignControlsHelper", "Reporting.Designer.Internal.DesignControlsHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FieldListDataSourcesHelper", "Reporting.Designer.Internal.FieldListDataSourcesHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FieldListDragDropHelper", "Reporting.Designer.Internal.FieldListDragDropHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportDesignerControlsHelper", "Reporting.Designer.Internal.ReportDesignerControlsHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportParameterHelper", "Reporting.Designer.ReportParameterHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TextElementSizeHelper", "Reporting.Designer.Internal.TextElementSizeHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FieldListDragDropHandler", "Reporting.Designer.Internal.FieldListDragDropHandler");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportControlsDragDropHelper", "Reporting.Designer.Internal.ReportControlsDragDropHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportExplorerDragDropHandler", "Reporting.Designer.Internal.ReportExplorerDragDropHandler");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportSnapLinesCollector", "Reporting.Designer.Internal.ReportSnapLinesCollector");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportToolboxDragDropHandler", "Reporting.Designer.Internal.ReportToolboxDragDropHandler");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dxEventDropDownEditor", "Reporting.Designer.Internal.dxEventDropDownEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.LanguageHelper", "Reporting.Designer.Internal.LanguageHelper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportCompleter", "Reporting.Designer.Internal.ReportCompleter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ScriptsEditor", "Reporting.Designer.Internal.ScriptsEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.CalculatedFieldsSource", "Reporting.Designer.Internal.CalculatedFieldsSource");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.CustomMergingEngine", "Reporting.Designer.Internal.CustomMergingEngine");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DataSourceItemsExtender", "Reporting.Designer.Internal.DataSourceItemsExtender");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DisplayNameProvider", "Reporting.Designer.Internal.DisplayNameProvider");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FieldListController", "Reporting.Designer.Internal.FieldListController");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ParametersViewModel", "Reporting.Designer.Internal.ParametersViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.RenameDataSourceStrategy", "Reporting.Designer.Internal.RenameDataSourceStrategy");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportConverter", "Reporting.Designer.Internal.ReportConverter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportExplorerModel", "Reporting.Designer.Internal.ReportExplorerModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportItemsProvider", "Reporting.Designer.Internal.ReportItemsProvider");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.RequestReportModel", "Reporting.Designer.Wizard.Legacy.RequestReportModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.RequestXtraReportModel", "Reporting.Designer.Wizard.Legacy.RequestXtraReportModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FormatStringService", "Reporting.Designer.Internal.FormatStringService");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportDataSourceService", "Reporting.Designer.Internal.ReportDataSourceService");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportPreviewService", "Reporting.Designer.Internal.ReportPreviewService");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportRenderingService", "Reporting.Designer.Internal.ReportRenderingService");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportScriptService", "Reporting.Designer.Internal.ReportScriptService");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportStorageWeb", "Reporting.Designer.Internal.ReportStorageWeb");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportWizardService", "Reporting.Designer.Internal.ReportWizardService");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.OpenReportDialogModelBase", "Reporting.Designer.Tools.OpenReportDialogModelBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.OpenReportDialog", "Reporting.Designer.Tools.OpenReportDialog");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportDialogBase", "Reporting.Designer.Tools.ReportDialogBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SaveAsReportDialogModelBase", "Reporting.Designer.Tools.SaveAsReportDialogModelBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SaveReportDialog", "Reporting.Designer.Tools.SaveAsReportDialog");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SaveReportDialogModelBase", "Reporting.Designer.Tools.SaveReportDialogModelBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SaveReportDialogLight", "Reporting.Designer.Tools.SaveReportDialog");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportDesignerInitializer", "Reporting.Designer.Internal.ReportDesignerInitializer");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportDesignerContext", "Reporting.Designer.ReportDesignerContext");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.WizardsInitializerSettings", "Reporting.Designer.Internal.WizardsInitializerSettings");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportDialogSettings", "Reporting.Designer.Internal.ReportDialogSettings");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.NavigateByReports", "Reporting.Designer.Tools.NavigateByReports");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.NavigateTab", "Reporting.Designer.Tools.NavigateTab");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.PaperKind", "Reporting.Designer.Utils.PaperKind");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.BandEditorBase", "Reporting.Designer.Widgets.BandEditorBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.RunningBandEditor", "Reporting.Designer.Widgets.RunningBandEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.BandsEditor", "Reporting.Designer.Widgets.BandsEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.SortingBandEditor", "Reporting.Designer.Widgets.SortingBandEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ChartValueBindingEditor", "Reporting.Designer.Widgets.ChartValueBindingEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.EditOptionsEditorNameEditorModel", "Reporting.Designer.Widgets.EditOptionsEditorNameEditorModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportExpressionEditor", "Reporting.Designer.Widgets.ReportExpressionEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ExplorerEditor", "Reporting.Designer.Widgets.ExplorerEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DrillDownEditor", "Reporting.Designer.Widgets.DrillDownEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FieldsComboboxEditor", "Reporting.Designer.Widgets.FieldsComboboxEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FormattingRuleEditor", "Reporting.Designer.Widgets.FormattingRuleEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.GaugeStyleEditor", "Reporting.Designer.Widgets.GaugeStyleEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dxImageSourceEditor", "Reporting.Designer.Widgets.dxImageSourceEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.LinesEditor", "Reporting.Designer.Widgets.LinesEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.NameEditor", "Reporting.Designer.Widgets.NameEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.PivotGridCriteriaEditor", "Reporting.Designer.Widgets.PivotGridCriteriaEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ContentByTypeEditor", "Reporting.Designer.Widgets.ContentByTypeEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DataBindingsEditor", "Reporting.Designer.Widgets.DataBindingsEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.FontEditorUndo", "Reporting.Designer.Widgets.FontEditorUndo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.RichTextFileEditor", "Reporting.Designer.Widgets.RichTextFileEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.StylesEditorHeaderModel", "Reporting.Designer.Widgets.StylesEditorHeaderModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.UndoEditor", "Reporting.Designer.Widgets.UndoEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ComboboxUndoEditor", "Reporting.Designer.Widgets.ComboboxUndoEditor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.JSReportDesigner", "Reporting.Designer.JSReportDesigner");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.JSReportDesignerBinding", "Reporting.Designer.JSReportDesignerBinding");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ActionId", "Reporting.Designer.Actions.ActionId");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.TableActionDirection", "Reporting.Designer.Internal.TableActionDirection");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.XRRichTextStreamType", "Reporting.Designer.Controls.XRRichTextStreamType");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.bandsWeight", "Reporting.Designer.Bands.Internal.bandsWeight");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.expanded", "Reporting.Designer.Bands.Metadata.expanded");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.groupFields", "Reporting.Designer.Bands.Metadata.groupFields");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.drillDownDetailReportExpanded", "Reporting.Designer.Bands.Metadata.drillDownDetailReportExpanded");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.sortFields", "Reporting.Designer.Bands.Metadata.sortFields");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.groupUnion", "Reporting.Designer.Bands.Metadata.groupUnion");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.groupFooterUnion", "Reporting.Designer.Bands.Metadata.groupFooterUnion");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.printAtBottom", "Reporting.Designer.Bands.Metadata.printAtBottom");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.printOn", "Reporting.Designer.Bands.Metadata.printOn");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.level", "Reporting.Designer.Bands.Metadata.level");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.repeatEveryPage", "Reporting.Designer.Bands.Metadata.repeatEveryPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pageBreak", "Reporting.Designer.Bands.Metadata.pageBreak");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.keepTogetherWithDetailReports", "Reporting.Designer.Bands.Metadata.keepTogetherWithDetailReports");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.height", "Reporting.Designer.Bands.Metadata.height");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.commonBandSerializationInfo", "Reporting.Designer.Bands.Metadata.commonBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.bandSerializationInfo", "Reporting.Designer.Bands.Metadata.bandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.detailReportBandSerializationInfo", "Reporting.Designer.Bands.Metadata.detailReportBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.detailBandSerializationInfo", "Reporting.Designer.Bands.Metadata.detailBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportHeaderBandSerializationInfo", "Reporting.Designer.Bands.Metadata.reportHeaderBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportFooterBandSerializationInfo", "Reporting.Designer.Bands.Metadata.reportFooterBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pageBandSerializationInfo", "Reporting.Designer.Bands.Metadata.pageBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.sortingSummary", "Reporting.Designer.Bands.Metadata.sortingSummary");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.groupHeaderBandSerializationInfo", "Reporting.Designer.Bands.Metadata.groupHeaderBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.groupFooterBandSerializationInfo", "Reporting.Designer.Bands.Metadata.groupFooterBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesReportHeader", "Reporting.Designer.Bands.Metadata.popularPropertiesReportHeader");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesReportFooter", "Reporting.Designer.Bands.Metadata.popularPropertiesReportFooter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesPageHeader", "Reporting.Designer.Bands.Metadata.popularPropertiesPageHeader");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesPageFooter", "Reporting.Designer.Bands.Metadata.popularPropertiesPageFooter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesGroupHeader", "Reporting.Designer.Bands.Metadata.popularPropertiesGroupHeader");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesGroupFooter", "Reporting.Designer.Bands.Metadata.popularPropertiesGroupFooter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesDetail", "Reporting.Designer.Bands.Metadata.popularPropertiesDetail");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesDetailReport", "Reporting.Designer.Bands.Metadata.popularPropertiesDetailReport");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.multiColumn", "Reporting.Designer.Bands.Metadata.multiColumn");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.verticalHeaderBandSerializationInfo", "Reporting.Designer.Bands.Metadata.verticalHeaderBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesVerticalHeaderBand", "Reporting.Designer.Bands.Metadata.popularPropertiesVerticalHeaderBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.verticalDetailBandSerializationInfo", "Reporting.Designer.Bands.Metadata.verticalDetailBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesVerticalDetailBand", "Reporting.Designer.Bands.Metadata.popularPropertiesVerticalDetailBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.verticalTotalBandSerializationInfo", "Reporting.Designer.Bands.Metadata.verticalTotalBandSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesVerticalTotalBand", "Reporting.Designer.Bands.Metadata.popularPropertiesVerticalTotalBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.editOptionsSerializationInfo", "Reporting.Designer.Controls.Metadata.editOptionsSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.formattingRuleLinkSerializationsInfo", "Reporting.Designer.Controls.Metadata.formattingRuleLinkSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.textAlignmentValues", "Reporting.Designer.Controls.Metadata.textAlignmentValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.borderDashStyleValues", "Reporting.Designer.Controls.Metadata.borderDashStyleValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.stylePrioritySerializationInfo", "Reporting.Designer.Controls.Metadata.stylePrioritySerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.xlsxFormatString", "Reporting.Designer.Controls.Metadata.xlsxFormatString");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.name", "Reporting.Designer.Controls.Metadata.name");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.displayName", "Reporting.Designer.Controls.Metadata.displayName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.text", "Reporting.Designer.Controls.Metadata.text");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.textArea", "Reporting.Designer.Controls.Metadata.textArea");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.textTrimming", "Reporting.Designer.Controls.Metadata.textTrimming");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.size", "Reporting.Designer.Controls.Metadata.size");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.location", "Reporting.Designer.Controls.Metadata.location");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.defaultBooleanValuesArray", "Reporting.Designer.Controls.Metadata.defaultBooleanValuesArray");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tag", "Reporting.Designer.Controls.Metadata.tag");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.lockedInUserDesigner", "Reporting.Designer.Controls.Metadata.lockedInUserDesigner");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.visible", "Reporting.Designer.Controls.Metadata.visible");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.defaultBooleanVisible", "Reporting.Designer.Controls.Metadata.defaultBooleanVisible");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.backColor", "Reporting.Designer.Controls.Metadata.backColor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.foreColor", "Reporting.Designer.Controls.Metadata.foreColor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.font", "Reporting.Designer.Controls.Metadata.font");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.borderColor", "Reporting.Designer.Controls.Metadata.borderColor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.borders", "Reporting.Designer.Controls.Metadata.borders");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.borderWidth", "Reporting.Designer.Controls.Metadata.borderWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.borderDashStyle", "Reporting.Designer.Controls.Metadata.borderDashStyle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.paddingString", "Reporting.Designer.Controls.Metadata.paddingString");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.padding", "Reporting.Designer.Controls.Metadata.padding");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.paddingGroup", "Reporting.Designer.Controls.Metadata.paddingGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.textAlignment", "Reporting.Designer.Controls.Metadata.textAlignment");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.anchorVertical", "Reporting.Designer.Controls.Metadata.anchorVertical");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.anchorHorizontal", "Reporting.Designer.Controls.Metadata.anchorHorizontal");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.textFitMode", "Reporting.Designer.Controls.Metadata.textFitMode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.angle", "Reporting.Designer.Controls.Metadata.angle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.canGrow", "Reporting.Designer.Controls.Metadata.canGrow");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.canShrink", "Reporting.Designer.Controls.Metadata.canShrink");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.multiline", "Reporting.Designer.Controls.Metadata.multiline");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.wordWrap", "Reporting.Designer.Controls.Metadata.wordWrap");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.autoWidth", "Reporting.Designer.Controls.Metadata.autoWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.keepTogether", "Reporting.Designer.Controls.Metadata.keepTogether");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.keepTogetherDefaultValueFalse", "Reporting.Designer.Controls.Metadata.keepTogetherDefaultValueFalse");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.processDuplicatesTarget", "Reporting.Designer.Controls.Metadata.processDuplicatesTarget");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.processDuplicatesMode", "Reporting.Designer.Controls.Metadata.processDuplicatesMode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.processNullValues", "Reporting.Designer.Controls.Metadata.processNullValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportPrintOptionsSerializationInfo", "Reporting.Designer.Controls.Metadata.reportPrintOptionsSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dataAdapter", "Reporting.Designer.Controls.Metadata.dataAdapter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dataSource", "Reporting.Designer.Controls.Metadata.dataSource");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dataMember", "Reporting.Designer.Controls.Metadata.dataMember");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dataBindings", "Reporting.Designer.Data.Metadata.dataBindings");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createSinglePopularBindingInfos", "Reporting.Designer.Internal.createSinglePopularBindingInfos");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createPopularBindingInfos", "Reporting.Designer.Internal.createPopularBindingInfos");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createPopularBindingInfo", "Reporting.Designer.Utils.createPopularBindingInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.filterString", "Reporting.Designer.Controls.Metadata.filterString");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.filterStringEditable", "Reporting.Designer.Controls.Metadata.filterStringEditable");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.bookmark", "Reporting.Designer.Controls.Metadata.bookmark");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.bookmarkParent", "Reporting.Designer.Controls.Metadata.bookmarkParent");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.navigateUrl", "Reporting.Designer.Controls.Metadata.navigateUrl");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.target", "Reporting.Designer.Controls.Metadata.target");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.nullValueText", "Reporting.Designer.Controls.Metadata.nullValueText");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.styleName", "Reporting.Designer.Controls.Metadata.styleName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.evenStyleName", "Reporting.Designer.Controls.Metadata.evenStyleName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.oddStyleName", "Reporting.Designer.Controls.Metadata.oddStyleName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.stylePriority", "Reporting.Designer.Controls.Metadata.stylePriority");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pivotGridStyles", "Reporting.Designer.Controls.Metadata.pivotGridStyles");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.stylesInfo", "Reporting.Designer.Controls.Metadata.stylesInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.summaryFunctionValues", "Reporting.Designer.Controls.Metadata.summaryFunctionValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.textFormatString", "Reporting.Designer.Controls.Metadata.textFormatString");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.summarySerializationInfo", "Reporting.Designer.Controls.Metadata.summarySerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.summary", "Reporting.Designer.Controls.Metadata.summary");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportPrintOptions", "Reporting.Designer.Controls.Metadata.reportPrintOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.afterPrint", "Reporting.Designer.Controls.Metadata.afterPrint");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.beforePrint", "Reporting.Designer.Controls.Metadata.beforePrint");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.sizeChanged", "Reporting.Designer.Controls.Metadata.sizeChanged");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.truncatedControlEventsSerializationInfo", "Reporting.Designer.Controls.Metadata.truncatedControlEventsSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.truncatedControlScripts", "Reporting.Designer.Controls.Metadata.truncatedControlScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.commonScripts", "Reporting.Designer.Controls.Metadata.commonScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.controlScripts", "Reporting.Designer.Controls.Metadata.controlScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.textControlScripts", "Reporting.Designer.Controls.Metadata.textControlScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.labelScripts", "Reporting.Designer.Controls.Metadata.labelScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.chartScripts", "Reporting.Designer.Controls.Metadata.chartScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pivotScripts", "Reporting.Designer.Controls.Metadata.pivotScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.subreportScripts", "Reporting.Designer.Controls.Metadata.subreportScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.commonBandScripts", "Reporting.Designer.Controls.Metadata.commonBandScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.groupBandScripts", "Reporting.Designer.Controls.Metadata.groupBandScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.groupHeaderBandScripts", "Reporting.Designer.Controls.Metadata.groupHeaderBandScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.detailReportBandScripts", "Reporting.Designer.Controls.Metadata.detailReportBandScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportScripts", "Reporting.Designer.Controls.Metadata.reportScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.allScripts", "Reporting.Designer.Controls.Metadata.allScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.lineWidth", "Reporting.Designer.Controls.Metadata.lineWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.lineStyle", "Reporting.Designer.Controls.Metadata.lineStyle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dpi", "Reporting.Designer.Controls.Metadata.dpi");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.formattingSerializationsInfo", "Reporting.Designer.Controls.Metadata.formattingSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.conditionObj", "Reporting.Designer.Controls.Metadata.conditionObj");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.formattingRuleSerializationsInfo", "Reporting.Designer.Controls.Metadata.formattingRuleSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.formattingRuleLinks", "Reporting.Designer.Controls.Metadata.formattingRuleLinks");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.canPublish", "Reporting.Designer.Controls.Metadata.canPublish");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.sortingOptionsSerializationsInfo", "Reporting.Designer.Controls.Metadata.sortingOptionsSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.interactiveSorting", "Reporting.Designer.Controls.Metadata.interactiveSorting");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.expressionBindingSerializationsInfo", "Reporting.Designer.Controls.Metadata.expressionBindingSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.rtl", "Reporting.Designer.Controls.Metadata.rtl");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.stylesObj", "Reporting.Designer.Controls.Metadata.stylesObj");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.sizeLocation", "Reporting.Designer.Controls.Metadata.sizeLocation");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.bordersProperties", "Reporting.Designer.Controls.Metadata.bordersProperties");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.baseControlProperties", "Reporting.Designer.Controls.Metadata.baseControlProperties");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.commonBandProperties", "Reporting.Designer.Controls.Metadata.commonBandProperties");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.commonControlProperties", "Reporting.Designer.Controls.Metadata.commonControlProperties");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.fontGroup", "Reporting.Designer.Controls.Metadata.fontGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.bookmarkGroup", "Reporting.Designer.Controls.Metadata.bookmarkGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.navigationGroup", "Reporting.Designer.Controls.Metadata.navigationGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.datasourcePrintOptionsGroup", "Reporting.Designer.Controls.Metadata.datasourcePrintOptionsGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.processGroup", "Reporting.Designer.Controls.Metadata.processGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.canGrowShrinkGroup", "Reporting.Designer.Controls.Metadata.canGrowShrinkGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.labelGroup", "Reporting.Designer.Controls.Metadata.labelGroup");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.editOptions", "Reporting.Designer.Controls.Metadata.editOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.textEditOptions", "Reporting.Designer.Controls.Metadata.textEditOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.labelSerializationsInfo", "Reporting.Designer.Controls.Metadata.labelSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.panelSerializationsInfo", "Reporting.Designer.Controls.Metadata.panelSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.rtf", "Reporting.Designer.Controls.Metadata.rtf");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.richTextSerializationsInfo", "Reporting.Designer.Controls.Metadata.richTextSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.unknownSerializationsInfo", "Reporting.Designer.Controls.Metadata.unknownSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dataBindingsSerializationInfo", "Reporting.Designer.Widgets.Internal.dataBindingsSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesLabel", "Reporting.Designer.Controls.Metadata.popularPropertiesLabel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesRichText", "Reporting.Designer.Controls.Metadata.popularPropertiesRichText");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.rtlLayout", "Reporting.Designer.Controls.Metadata.rtlLayout");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.rtlReport", "Reporting.Designer.Controls.Metadata.rtlReport");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.imageType", "Reporting.Designer.Controls.Metadata.imageType");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.processHiddenCellMode", "Reporting.Designer.Controls.Metadata.processHiddenCellMode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.autoModule", "Reporting.Designer.Controls.Metadata.autoModule");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.barCodeOrientation", "Reporting.Designer.Controls.Metadata.barCodeOrientation");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.moduleInfo", "Reporting.Designer.Controls.Metadata.moduleInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.showText", "Reporting.Designer.Controls.Metadata.showText");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.symbology", "Reporting.Designer.Controls.Metadata.symbology");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.barcodeFake", "Reporting.Designer.Controls.Metadata.barcodeFake");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.alignment", "Reporting.Designer.Controls.Metadata.alignment");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.barcodeSerializationsInfo", "Reporting.Designer.Controls.Metadata.barcodeSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesBarCode", "Reporting.Designer.Controls.Metadata.popularPropertiesBarCode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.cellVerticalSpacing", "Reporting.Designer.Controls.Metadata.cellVerticalSpacing");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.cellHorizontalSpacing", "Reporting.Designer.Controls.Metadata.cellHorizontalSpacing");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.cellWidth", "Reporting.Designer.Controls.Metadata.cellWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.cellHeight", "Reporting.Designer.Controls.Metadata.cellHeight");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.cellSizeMode", "Reporting.Designer.Controls.Metadata.cellSizeMode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.characterCombFont", "Reporting.Designer.Controls.Metadata.characterCombFont");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.characterCombBorders", "Reporting.Designer.Controls.Metadata.characterCombBorders");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.characterCombBorderDashStyle", "Reporting.Designer.Controls.Metadata.characterCombBorderDashStyle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.characterCombSerializationsInfo", "Reporting.Designer.Controls.Metadata.characterCombSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.chart", "Reporting.Designer.Controls.Metadata.chart");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.xrChartSerializationInfo", "Reporting.Designer.Controls.Metadata.xrChartSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.checkState", "Reporting.Designer.Controls.Metadata.checkState");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.checked", "Reporting.Designer.Controls.Metadata.checked");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.glyphAlignment", "Reporting.Designer.Controls.Metadata.glyphAlignment");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.checkEditOptions", "Designer.Report.chekEditOptions", "Reporting.Designer.Controls.Metadata.checkEditOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.checkboxSerializationsInfo", "Reporting.Designer.Controls.Metadata.checkboxSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesCheckBox", "Reporting.Designer.Controls.Metadata.popularPropertiesCheckBox");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.crossBandLineWidth", "Reporting.Designer.Controls.Metadata.crossBandLineWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.startPoint", "Reporting.Designer.Controls.Metadata.startPoint");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.endPoint", "Reporting.Designer.Controls.Metadata.endPoint");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.startBand", "Reporting.Designer.Controls.Metadata.startBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.endBand", "Reporting.Designer.Controls.Metadata.endBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.borderDashStyleCrossband", "Reporting.Designer.Controls.Metadata.borderDashStyleCrossband");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.width", "Reporting.Designer.Controls.Metadata.width");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.crossBandBoxControlSerializationsInfo", "Reporting.Designer.Controls.Metadata.crossBandBoxControlSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.crossBandLineControlSerializationsInfo", "Reporting.Designer.Controls.Metadata.crossBandLineControlSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesCrossLine", "Reporting.Designer.Controls.Metadata.popularPropertiesCrossLine");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.circularValues", "Reporting.Designer.Controls.Metadata.circularValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.linearValues", "Reporting.Designer.Controls.Metadata.linearValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.actualValue", "Reporting.Designer.Controls.Metadata.actualValue");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.maximum", "Reporting.Designer.Controls.Metadata.maximum");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.minimum", "Reporting.Designer.Controls.Metadata.minimum");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tickmarkCount", "Reporting.Designer.Controls.Metadata.tickmarkCount");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.targetValue", "Reporting.Designer.Controls.Metadata.targetValue");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.viewStyle", "Reporting.Designer.Controls.Metadata.viewStyle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.viewTheme", "Reporting.Designer.Controls.Metadata.viewTheme");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.viewType", "Reporting.Designer.Controls.Metadata.viewType");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.xrGaugeSerializationInfo", "Reporting.Designer.Controls.Metadata.xrGaugeSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesGauge", "Reporting.Designer.Controls.Metadata.popularPropertiesGauge");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.lineDirection", "Reporting.Designer.Controls.Metadata.lineDirection");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.lineSerializationsInfo", "Reporting.Designer.Controls.Metadata.lineSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesLine", "Reporting.Designer.Controls.Metadata.popularPropertiesLine");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pageBreakSerializationsInfo", "Reporting.Designer.Controls.Metadata.pageBreakSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pageInfo", "Reporting.Designer.Controls.Metadata.pageInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.startPageNumber", "Reporting.Designer.Controls.Metadata.startPageNumber");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.runningBand", "Reporting.Designer.Controls.Metadata.runningBand");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pageInfoSerializationsInfo", "Reporting.Designer.Controls.Metadata.pageInfoSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesPageInfo", "Reporting.Designer.Controls.Metadata.popularPropertiesPageInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.imageUrl", "Reporting.Designer.Controls.Metadata.imageUrl");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.imageSource", "Reporting.Designer.Controls.Metadata.imageSource");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.sizing", "Reporting.Designer.Controls.Metadata.sizing");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.imageAlignment", "Reporting.Designer.Controls.Metadata.imageAlignment");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.imageEditOptions", "Reporting.Designer.Controls.Metadata.imageEditOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pictureBoxSerializationsInfo", "Reporting.Designer.Controls.Metadata.pictureBoxSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesPicture", "Reporting.Designer.Controls.Metadata.popularPropertiesPicture");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pivotGridAppearances", "Reporting.Designer.Controls.Metadata.pivotGridAppearances");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.prefilter", "Reporting.Designer.Controls.Metadata.prefilter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pivotGridOptions", "Reporting.Designer.Controls.Metadata.pivotGridOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pivotGridSerializationsInfo", "Reporting.Designer.Controls.Metadata.pivotGridSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.paperKind", "Reporting.Designer.Controls.Metadata.paperKind");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.landscape", "Reporting.Designer.Controls.Metadata.landscape");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.margins", "Reporting.Designer.Controls.Metadata.margins");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pageColor", "Reporting.Designer.Controls.Metadata.pageColor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.measureUnit", "Reporting.Designer.Controls.Metadata.measureUnit");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.snapGridSize", "Reporting.Designer.Controls.Metadata.snapGridSize");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.drawWatermark", "Reporting.Designer.Controls.Metadata.drawWatermark");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.showPreviewMarginLines", "Reporting.Designer.Controls.Metadata.showPreviewMarginLines");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.verticalContentSplitting", "Reporting.Designer.Controls.Metadata.verticalContentSplitting");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportExportOptionsSerializationInfo", "Reporting.Designer.Controls.Metadata.reportExportOptionsSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.foreColorWatermark", "Reporting.Designer.Controls.Metadata.foreColorWatermark");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.fontWatermark", "Reporting.Designer.Controls.Metadata.fontWatermark");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.watermarkSerializationsInfo", "Reporting.Designer.Controls.Metadata.watermarkSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.watermark", "Reporting.Designer.Controls.Metadata.watermark");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.rollPaper", "Reporting.Designer.Controls.Metadata.rollPaper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.pageWidth", "Reporting.Designer.Controls.Metadata.pageWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.scriptLanguage", "Reporting.Designer.Controls.Metadata.scriptLanguage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.scriptReferencesString", "Reporting.Designer.Controls.Metadata.scriptReferencesString");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.calculatedFields", "Reporting.Designer.Controls.Metadata.calculatedFields");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.parametersInfo", "Reporting.Designer.Controls.Metadata.parametersInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.bookmarkDuplicateSuppress", "Reporting.Designer.Controls.Metadata.bookmarkDuplicateSuppress");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.horizontalContentSplitting", "Reporting.Designer.Controls.Metadata.horizontalContentSplitting");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportSerializationInfo", "Reporting.Designer.Controls.Metadata.reportSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesReport", "Reporting.Designer.Controls.Metadata.popularPropertiesReport");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.shapeType", "Reporting.Designer.Controls.Metadata.shapeType");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.stretch", "Reporting.Designer.Controls.Metadata.stretch");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.fillColor", "Reporting.Designer.Controls.Metadata.fillColor");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Shape", "Reporting.Designer.Controls.Metadata.Shape");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.shapeFake", "Reporting.Designer.Controls.Metadata.shapeFake");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.shapeElementSerializationsInfo", "Reporting.Designer.Controls.Metadata.shapeElementSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.shapeSerializationsInfo", "Reporting.Designer.Controls.Metadata.shapeSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesShape", "Reporting.Designer.Controls.Metadata.popularPropertiesShape");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.valueMember", "Reporting.Designer.Controls.Metadata.valueMember");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.valueRange", "Reporting.Designer.Controls.Metadata.valueRange");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.sparklineFake", "Reporting.Designer.Controls.Metadata.sparklineFake");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.sparklineSerializationsInfo", "Reporting.Designer.Controls.Metadata.sparklineSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesSparkline", "Reporting.Designer.Controls.Metadata.popularPropertiesSparkline");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportSourceUrl", "Reporting.Designer.Controls.Metadata.reportSourceUrl");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportSource", "Reporting.Designer.Controls.Metadata.reportSource");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.parameterBindingSerializationInfo", "Reporting.Designer.Controls.Metadata.parameterBindingSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.parameterBindings", "Reporting.Designer.Controls.Metadata.parameterBindings");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.subreportSerializationsInfo", "Reporting.Designer.Controls.Metadata.subreportSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tableSerializationsInfo", "Reporting.Designer.Controls.Metadata.tableSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesTable", "Reporting.Designer.Controls.Metadata.popularPropertiesTable");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.weight", "Reporting.Designer.Controls.Metadata.weight");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.rowSpan", "Reporting.Designer.Controls.Metadata.rowSpan");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tableCellSerializationsInfo", "Reporting.Designer.Controls.Metadata.tableCellSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesTableCell", "Reporting.Designer.Controls.Metadata.popularPropertiesTableCell");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tocTitleSerializationsInfo", "Reporting.Designer.Controls.Metadata.tocTitleSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tocTitle", "Reporting.Designer.Controls.Metadata.tocTitle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tocLevelDefault", "Reporting.Designer.Controls.Metadata.tocLevelDefault");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.maxNestingLevel", "Reporting.Designer.Controls.Metadata.maxNestingLevel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tocLevels", "Reporting.Designer.Controls.Metadata.tocLevels");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tocSerializationsInfo", "Reporting.Designer.Controls.Metadata.tocSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.baseTocLevelSerializationsInfo", "Reporting.Designer.Controls.Metadata.baseTocLevelSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tocLevelSerializationsInfo", "Reporting.Designer.Controls.Metadata.tocLevelSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.tableRowSerializationsInfo", "Reporting.Designer.Controls.Metadata.tableRowSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.segmentWidth", "Reporting.Designer.Controls.Metadata.segmentWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.zipCodeSerializationInfo", "Reporting.Designer.Controls.Metadata.zipCodeSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.popularPropertiesZipCode", "Reporting.Designer.Controls.Metadata.popularPropertiesZipCode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.lookUpValueSerializationInfo", "Reporting.Designer.Data.Metadata.lookUpValueSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.parameterLookUpSettingsSerializationInfo", "Reporting.Designer.Data.Metadata.parameterLookUpSettingsSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.parameterSerializationInfo", "Reporting.Designer.Data.Metadata.parameterSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.calculatedFieldScripts", "Reporting.Designer.Data.Metadata.calculatedFieldScripts");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dataBindingBaseSerializationInfo", "Reporting.Designer.Data.Metadata.dataBindingBaseSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.dataBindingSerializationInfo", "Reporting.Designer.Data.Metadata.dataBindingSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createChartDesignerOptions", "Reporting.Designer.Internal.createChartDesignerOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.styleSerializationInfo", "Reporting.Designer.Controls.Metadata.styleSerializationInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.subreportControlCollector", "Reporting.Designer.Internal.subreportControlCollector");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.isHeaderOrFooterBandType", "Reporting.Designer.Internal.isHeaderOrFooterBandType");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.bandContainsToc", "Reporting.Designer.Internal.bandContainsToc");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.bandControlsSomeXRTableOfContents", "Reporting.Designer.Internal.bandControlsSomeXRTableOfContents");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.patchRequest", "Reporting.Designer.Internal.patchRequest");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.selectTreeListItem", "Reporting.Designer.Internal.selectTreeListItem");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.getExpressionPath", "Reporting.Designer.Internal.getExpressionPath");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createPictureBox", "Reporting.Designer.Internal.createPictureBox");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createSimpleControl", "Reporting.Designer.Internal.createSimpleControl");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.assignBinding", "Reporting.Designer.Internal.assignBinding");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.getBandIfItDoesNotContainTOC", "Reporting.Designer.Internal.getBandIfItDoesNotContainTOC");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.isList", "Reporting.Designer.Internal.isList");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.eventArgsTypes", "Reporting.Designer.Internal.eventArgsTypes");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.sortBands", "Reporting.Designer.Bands.Internal.sortBands");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.setMarkerWidth", "Reporting.Designer.Bands.Internal.setMarkerWidth");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.getLevelCount", "Reporting.Designer.Bands.Internal.getLevelCount");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportCopyPasteStrategy", "Reporting.Designer.Internal.reportCopyPasteStrategy");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.addDataSourceToReport", "Reporting.Designer.Internal.addDataSourceToReport");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.recalculateUnit", "Designer.Report.reculculateUnit", "Reporting.Designer.Internal.recalculateUnit");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.DataBindingMode", "Reporting.Designer.Internal.DataBindingMode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.PromptBoolean", "Reporting.Designer.Internal.PromptBoolean");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.getDataSourceDataMember", "Reporting.Designer.Internal.getDataSourceDataMember");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.correctModel", "Reporting.Designer.Internal.correctModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createObjectFromInfo", "Reporting.Designer.Internal.createObjectFromInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createReportViewModel", "Reporting.Designer.Internal.createReportViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.updateDataSourceRefs", "Reporting.Designer.Internal.updateDataSourceRefs");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.isNotParameter", "Reporting.Designer.Internal.isNotParameter");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.isControl", "Reporting.Designer.Internal.isControl");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.QBRequestWrapper", "Reporting.Designer.Internal.QBRequestWrapper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.registerControls", "Reporting.Designer.Internal.registerControls");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createReportDesigner", "Reporting.Designer.Internal.createReportDesigner");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.createReportDesignerFromModel", "Reporting.Designer.Internal.createReportDesignerFromModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportDesignerElements", "Reporting.Designer.Utils.ReportDesignerElements");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.ReportDesignerAddOns", "Reporting.Designer.Utils.ReportDesignerAddOns");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.controlsFactory", "Reporting.Designer.Utils.controlsFactory");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.limitation", "Reporting.Designer.Internal.limitation");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.HandlerUri", "Reporting.Designer.Utils.HandlerUri");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.formatStringEditorCustomSet", "Reporting.Designer.Utils.formatStringEditorCustomSet");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportStorageWebIsRegister", "Reporting.Designer.Internal.reportStorageWebIsRegister");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.reportFunctionDisplay", "Reporting.Designer.Widgets.reportFunctionDisplay");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.editorTemplates", "Reporting.Designer.Widgets.editorTemplates");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.groups", "Reporting.Designer.Widgets.groups");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.removeDataSourceFromReport", "Reporting.Designer.Internal.removeDataSourceFromReport");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.memberControlsMap", "Reporting.Designer.Internal.memberControlsMap");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.GraphicsUnit", "Reporting.Designer.Wizard.GraphicsUnit");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.PivotGridFieldViewModel", "Reporting.Designer.Controls.PivotGrid.PivotGridFieldViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.PivotGridFieldSurface", "Reporting.Designer.Controls.PivotGrid.PivotGridFieldSurface");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.SortBySummaryInfoCondition", "Reporting.Designer.Controls.PivotGrid.SortBySummaryInfoCondition");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.SortBySummaryInfo", "Reporting.Designer.Controls.PivotGrid.SortBySummaryInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.caption", "Reporting.Designer.Controls.PivotGrid.Metadata.caption");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.unboundType", "Reporting.Designer.Controls.PivotGrid.Metadata.unboundType");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.cellFormat", "Reporting.Designer.Controls.PivotGrid.Metadata.cellFormat");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.appearanceInfo", "Reporting.Designer.Controls.PivotGrid.Metadata.appearanceInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.appearancesInfo", "Reporting.Designer.Controls.PivotGrid.Metadata.appearancesInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.unboundExpressionMode", "Reporting.Designer.Controls.PivotGrid.Metadata.unboundExpressionMode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.options", "Reporting.Designer.Controls.PivotGrid.Metadata.options");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.sortBySummary", "Reporting.Designer.Controls.PivotGrid.Metadata.sortBySummary");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.pivotGridFieldSerializationsInfo", "Reporting.Designer.Controls.PivotGrid.Metadata.pivotGridFieldSerializationsInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.pivotGridFieldsSerializable", "Reporting.Designer.Controls.PivotGrid.Metadata.pivotGridFieldsSerializable");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.summaryTypeValues", "Reporting.Designer.Controls.PivotGrid.Metadata.summaryTypeValues");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.summaryType", "Reporting.Designer.Controls.PivotGrid.Metadata.summaryType");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.fieldComponentName", "Reporting.Designer.Controls.PivotGrid.Metadata.fieldComponentName");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.conditions", "Reporting.Designer.Controls.PivotGrid.Metadata.conditions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.field", "Reporting.Designer.Controls.PivotGrid.Metadata.field");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.customTotalSummaryType", "Reporting.Designer.Controls.PivotGrid.Metadata.customTotalSummaryType");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.sortBySummaryInfo", "Reporting.Designer.Controls.PivotGrid.Metadata.sortBySummaryInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Pivot.sortBySummaryConditionInfo", "Reporting.Designer.Controls.PivotGrid.Metadata.sortBySummaryConditionInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.AddGroupingLevelPage", "Reporting.Designer.Wizard.Legacy.AddGroupingLevelPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.LayoutTypeItem", "Reporting.Designer.Wizard.LayoutTypeItem");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.PageOrientationItem", "Reporting.Designer.Wizard.PageOrientationItem");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ChooseReportLayoutPage", "Reporting.Designer.Wizard.Legacy.ChooseReportLayoutPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportStyleItem", "Reporting.Designer.Wizard.ReportStyleItem");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ChooseReportStylePage", "Reporting.Designer.Wizard.Legacy.ChooseReportStylePage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportTypeItem", "Analytics.Wizard.TypeItem");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ChooseReportTypePage", "Reporting.Designer.Wizard.Legacy.ChooseReportTypePage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.SummaryOptionsWrapper", "Reporting.Designer.Internal.SummaryOptionsWrapper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ChooseSummaryOptionsPage", "Reporting.Designer.Wizard.Legacy.ChooseSummaryOptionsPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ColorScheme", "Reporting.Designer.Wizard.ColorScheme");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.CustomColorScheme", "Reporting.Designer.Wizard.CustomColorScheme");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ColorSchemePage", "Reporting.Designer.Wizard.Legacy.ColorSchemePage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.CustomizeLabelPage", "Reporting.Designer.Wizard.Legacy.CustomizeLabelPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.MasterDetailAddGroupingLevel", "Reporting.Designer.Wizard.Legacy.MasterDetailAddGroupingLevel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.SummaryInfo", "Reporting.Designer.Internal.SummaryInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.MasterDetailChooseSummaryOptions", "Reporting.Designer.Wizard.Legacy.MasterDetailChooseSummaryOptions");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.FieldTreeNode", "Analytics.Wizard.Internal.FieldTreeNode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.DataMemberTreeNode", "Analytics.Wizard.Internal.DataMemberTreeNode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.DataMemberCustomCheckedTreeNode", "Reporting.Designer.Internal.DataMemberCustomCheckedTreeNode");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.AvailableFieldsTreeListController", "Reporting.Designer.Internal.AvailableFieldsTreeListController");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.MasterDetailSelectReportDataPage", "Reporting.Designer.Wizard.Legacy.MasterDetailSelectReportDataPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.TreeNodeItemsProvider", "Analytics.Wizard.Internal.TreeNodeItemsProvider");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.PageSetupPage", "Reporting.Designer.Wizard.Legacy.PageSetupPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.DataSourceParameterWrapper", "Reporting.Designer.Wizard.Legacy.DataSourceParameterWrapper");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportWizardConfigureParametersPage", "Reporting.Designer.Wizard.Legacy.ReportWizardConfigureParametersPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.SelectColumnsPage", "Reporting.Designer.Wizard.Legacy.SelectColumnsPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.SelectDataMemberPage", "Reporting.Designer.Wizard.Legacy.SelectDataMemberPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.SelectDataSourcePage", "Reporting.Designer.Wizard.Legacy.SelectDataSourcePage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.SelectPredefinedLabelsPage", "Reporting.Designer.Wizard.Legacy.SelectPredefinedLabelsPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.SetReportTitlePage", "Reporting.Designer.Wizard.Legacy.SetReportTitlePage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportWizardSelectConnectionString", "Reporting.Designer.Wizard.Legacy.ReportWizardSelectConnectionString");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportWizardAddQueriesPage", "Reporting.Designer.Wizard.Legacy.ReportWizardAddQueriesPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportWizardMasterDetailRelationsPage", "Reporting.Designer.Wizard.Legacy.ReportWizardMasterDetailRelationsPage");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.MasterDetailInfoBase", "Reporting.Designer.Internal.MasterDetailInfoBase");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.MasterDetailFieldInfo", "Reporting.Designer.Internal.MasterDetailFieldInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.MasterDetailQueryInfo", "Reporting.Designer.Internal.MasterDetailQueryInfo");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportWizard", "Reporting.Designer.Wizard.Legacy.ReportWizard");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.DataSourceWizard", "Reporting.Designer.Wizard.Legacy.DataSourceWizard");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportWizardModel", "Reporting.Designer.Wizard.Legacy.ReportWizardModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ListViewModel", "Reporting.Designer.Internal.ListViewModel");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportLayout", "Reporting.Designer.Wizard.ReportLayout");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.PageOrientation", "Reporting.Designer.Wizard.PageOrientation");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportStyle", "Reporting.Designer.Wizard.ReportStyle");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.ReportType", "Reporting.Designer.Wizard.ReportType");
DevExpress.Analytics.Internal._definePropertyByString(DevExpress, "Designer.Report.Wizard.createReportWizard", "Reporting.Designer.Internal._createReportWizard");
DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.addTemplates({
    'dx-chart-leftPanel': '<div class="dx-chart-left-panel dxd-border-primary dxd-properties-panel-group-header-back-color">        <div class="dxrd-right-panel dxd-border-primary dxd-properties-panel-group-header-back-color" data-bind="css: tabPanel.cssClasses()">            <div class="dxrd-right-panel-header dxd-text-primary">                <span data-bind="text: rightPanelHeader()"></span>            </div>            <!-- ko if: chartStructure -->            <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }">                <div class="dxcd-chart-structure dxd-back-primary" data-bind="treelist: chartStructure"></div>            </div>            <!-- /ko -->        </div>    </div>',
    'dxcd-toolbar': '<div class="dxrd-toolbar-wrapper">        <div class="dxrd-toolbar" data-bind="template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.toolbarItems }"></div>    </div>',
    'dx-chart-middlePart': '<!-- ko ifnot: isLoading -->    <!-- ko with: surface -->    <div class="dxrd-surface-wrapper" style="top: 0" data-bind="template: templateName">    </div>    <!-- /ko -->    <!-- /ko -->    <!-- ko if: isLoading -->    <div class="dxrd-surface-wrapper">        <div style="text-align: center; padding-top: 49%;">            <div data-bind="dxLoadIndicator: { visible: isLoading() }"></div>        </div>    </div>    <!-- /ko -->',
    'dx-chart-surface': '<div class="dxrd-surface" data-bind="styleunit: { \'width\': Math.min(width(), $root.surfaceSize()) }, click: function(_, e) { e.stopPropagation(); }">        <div class="dxrd-viewport" data-bind="styleunit: { minWidth: Math.min(width() + 60, $root.surfaceSize()), maxWidth: width() + 60,  maxHeight: height() + 60 }">            <div class="dxrd-control" style="border:none; background: none;">                <div data-bind="zoom: zoom, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }">                    <img data-bind="attr: {src: imageSrc }, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }" />                </div>            </div>        </div>    </div>',
    'dxcd-collection-lookup-header': '<div data-bind="dxSelectBox: { items: array, displayExpr: \'name\', value: selectedItem, disabled: disabled,  placeholder: $root.dx.Analytics.Internal.selectPlaceholder(), noDataText: $root.dx.Analytics.Internal.noDataText(), dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxcd-collection-item': '<!-- ko if: selectedItem -->    <div data-bind="dxPropertyGrid: { target: selectedItem, editorsInfo: { editors: editors }, level: 1 }"></div>    <!--/ko -->',
    'dxcd-field': '<div data-bind="dxFieldListPicker: { path: path, value: value, acceptCustomValue: true, itemsProvider: $root.dataBindingsProvider(), treeListController: treeListController, disabled: disabled }"></div>',
    'dxrd-propertygridtab': '<div class="dxrd-right-panel-header dxd-text-primary">        <span data-bind="text: text"></span>    </div>    <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\' }">        <!-- ko template: { name: \'dx-propertieseditor\', data: model }-->        <!-- /ko -->    </div>',
    'dxcd-panes-editor': '<div data-bind="dxSelectBox: { dataSource: $root.panes, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxcd-legends-editor': '<div data-bind="dxSelectBox: { dataSource: $root.legends, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxcd-axisX-editor': '<div data-bind="dxSelectBox: { dataSource: $root.axisX, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxcd-axisY-editor': '<div data-bind="dxSelectBox: { dataSource: $root.axisY, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxcd-datasource': '<!-- ko with: generateOptions($root.chartDataSources, $root.getPopupContainer($element)) -->    <div data-bind="dxSelectBox: $data"></div>    <!-- /ko -->',
    'dxcd-viewHeader': '<div data-bind="dxSelectBox: { dataSource: values, itemTemplate: \'stateItem\', valueExpr: \'value\', value: generateHeaderValue($root.undoEngine), displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }">        <div class="lookupItem" data-options="dxTemplate:{ name:\'stateItem\' }">            <div style="display:inline-block; width: 24px; height: 24px;" data-bind="css: $parent.generateViewClassName(value), template: {name: $parent.generateViewClassName(value, true), if: !!$parent.generateViewClassName(value, true)}"> </div>            <div style="display:inline-block; vertical-align: super;" data-bind="text: displayValue"></div>        </div>    </div>',
    'dxcd-viewContent': '<div data-bind="dxPropertyGrid: { target: contentValue, level: level + 1, parentDisabled: disabled }"></div>',
    'dxcd-summaryfunction': '<div class="dx-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: options">        </div>    </div>',
    'dxcd-summaryFunction-content': '<div class="dxcd-summary-function-content">        <!-- ko with: value -->        <div class="dx-field dxd-back-primary">            <div class="dx-field-label dxd-text-primary" data-bind="styleunit: $parent.memberPadding">                <div class="propertygrid-editor-displayName" data-bind="text: $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\'), attr: { \'title\': $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\') }"></div>            </div>            <div class="dx-field-value">                <div data-bind="dxSelectBox: { value: functionName, dataSource: $parent.availableItems() ,acceptCustomValue: true, disabled: $parent.disabled(), placeholder: $root.dx.Analytics.Internal.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>            </div>        </div>        <!-- ko foreach: args -->        <div class="dx-field dxd-back-primary" data-bind="css: $parents[1].actionsAreAvailable() ? \'dxcd-summaryfunction-arg\' : \'\'">            <div class="dx-field-label dxd-text-primary" data-bind="styleunit: $parents[1].memberPadding">                <!-- ko if: $parent.args().length === 1-->                <div class="propertygrid-editor-displayName" data-bind="text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\'), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') }"></div>                <!-- /ko -->                <!-- ko if: $parent.args().length > 1-->                <div class="propertygrid-editor-displayName" data-bind="text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1) }"></div>                <!-- /ko -->            </div>            <div class="dx-field-value">                <!-- ko if: $parents[1].actionsAreAvailable() -->                <div class="dxcd-summaryFunction-remove" data-bind="click: function(){ $parents[1].remove($index()) }">                    <div class="dxcd-summaryFunction-remove-icon dx-icon-dxrd-image-recycle-bin"><!-- ko template: \'dxrd-svg-operations-recycle_bin\'--><!-- /ko --></div>                </div>                <!-- /ko -->                <!-- ko template: { name: $parents[1].argumentTemplateName, data: { value: $data.value, path: $parents[1].path, treeListController: $parents[1].treeListController, disabled: $parents[1].disabled } } -->                <!-- /ko -->            </div>        </div>        <!-- /ko -->        <!-- ko if: $parent.actionsAreAvailable() -->        <div class="dx-field dxd-back-primary">            <div class="dx-field-label dxd-text-primary" style="width:auto" data-bind="styleunit: $parent.memberPadding">                <div class="propertygrid-editor-displayName dxrcd-summaryfunction-addnew dxd-hyperlink-color dxd-border-accented dxd-text-accented" data-bind="text: $parent.getLocalization(\'Add Argument\', \'ASPxReportsStringId.ReportDesigner_AddArgument\'), attr: { \'title\': $parent.getLocalization(\'Add New Item\', \'ASPxReportsStringId.ReportDesigner_AddNewItem\') }, click: function() { $parent.add(); }"></div>            </div>        </div>        <!-- /ko -->        <!-- /ko -->    </div>',
    'dxcd-pointscollection': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: {                 values: value,                 displayName: displayName,                 level: level,                 info: info,                 addHandler: function() { return addPoint(_model()[\'owner\'] || _model()); }              }">            <div data-bind="dxPropertyGrid: { target: value, level: editor.level + 1 }"></div>        </div>    </div>',
    'dxcd-maxSize': '<div data-bind="dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'min\', \'minSize\'), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dxcd-minSize': '<div data-bind="dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'max\', \'maxSize\'), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dxcd-group': '<div data-bind="dxSelectBox: { dataSource: $root.groups, value: value, acceptCustomValue:true, onFocusOut: function() { $root.applyGroup($data.value()); }, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxcd-color-undo': '<div data-bind="dxColorBox: { value: generateValue($root.undoEngine), editAlphaChannel: true, popupPosition: { collision: \'flipfit flipfit\' }, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dx-selectbox-undo': '<div data-bind="dxLocalizedSelectBox: { dataSource: values, value: generateValue($root.undoEngine), valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: $data.validationRules || [] }"></div>',
});
DevExpress.Analytics.Widgets.Internal.SvgTemplatesEngine.addTemplates({
    'dxrd-band-coordinate-grid-selection': '<!-- ko with: surface --><div data-bind="styleunit: { \'height\': height, \'width\': $parent.width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected dxd-border-accented dx-border-inheritor\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor" style="position:absolute"></div><!-- ko ifnot: collapsed --><!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width } } } }--><!-- /ko --><!-- /ko --><!-- /ko -->',
    'dxrd-band-coordinate-grid': '<!-- ko with: surface -->    <!-- ko ifnot: collapsed -->    <div class="dxrd-band-content dxd-selectable" data-bind="styleunit: { \'height\': height(), top: absolutePosition.y }">        <!-- ko if: $data._context.drawWatermark() -->        <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: true, band: $data, reportSurface: $data._context } } -->        <!-- /ko -->        <!-- /ko -->        <div class="dxrd-band-subbands-wrapper" data-bind="styleunit: { \'top\': heightWithoutSubBands } ">            <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width, \'snapGridSize\': $parent.snapGridSize }; } } }-->            <!-- /ko -->        </div>    </div>    <!-- /ko -->    <!-- ko if: collapsed -->    <div data-bind="styleunit: { \'height\': height, top: absolutePosition.y }" class="dxrd-band-collapsed">        <div data-bind="css: { \'dxrd-band-content-selected dxd-border-accented dx-border-inheritor\': selected() }" style="position:absolute; height: 100%; width: 100%"></div>    </div>    <!-- /ko -->    <!-- /ko -->',
    'dxrd-detail-report-band-coordinate-grid': '<!-- ko with: surface -->    <!-- ko ifnot: collapsed -->    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width, \'snapGridSize\': $parent.snapGridSize }; } } }-->    <!-- /ko -->    <!-- /ko -->    <!-- ko if: collapsed -->    <div data-bind="styleunit: { \'height\': height, top: absolutePosition.y }" class="dxrd-band-collapsed">        <div data-bind="css: { \'dxrd-band-content-selected dxd-border-accented dx-border-inheritor\': selected() }" style="position:absolute; height: 100%; width: 100%"></div>    </div>    <!-- /ko -->    <!-- /ko -->',
    'dxrd-sub-band-coordinate-grid': '<!-- ko with: surface -->    <!-- ko ifnot: collapsed -->    <div class="dxrd-band-content dxd-selectable" data-bind="styleunit: { \'height\': height(), top: $data.absolutePosition.y() - $data.parent.heightWithoutSubBands() - $data.parent.absolutePosition.y() }">        <!-- ko if: $data._context.drawWatermark() -->        <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: true, band: $data, reportSurface: $data._context } } -->        <!-- /ko -->        <!-- /ko -->    </div>    <!-- /ko -->    <!-- ko if: collapsed -->    <div data-bind="styleunit: { \'height\': height, top: absolutePosition.y }" class="dxrd-band-collapsed">        <div data-bind="css: { \'dxrd-band-content-selected dxd-border-accented dx-border-inheritor\': selected() }" style="position:absolute; height: 100%; width: 100%"></div>    </div>    <!-- /ko -->    <!-- /ko -->',
    'dxrd-band-selection': '<div data-bind="styleunit: { \'height\': height, \'width\': rect().width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected dxd-border-accented dx-border-inheritor\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor" style="position:absolute">        <!-- ko if: contentSelectionTemplate -->        <!-- ko template: contentSelectionTemplate-->        <!-- /ko -->        <!-- /ko -->    </div>    <!-- ko ifnot: collapsed -->    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->    <!-- /ko -->    <!-- /ko -->',
    'dxrd-detailreportband-selection': '<!-- ko ifnot: collapsed -->    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->    <!-- /ko -->    <!-- /ko -->',
    'dxrd-bandselection-content': '<!-- ko ifnot: collapsed -->    <!-- ko foreach: controls -->    <!-- ko template: { name: $data.selectiontemplate } -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->',
    'dxrd-band-vruler': '<!-- ko with: surface --><div class="dxrd-band-marker-wrapper" data-bind="attr: { title: name }, styleunit: { \'width\': $data.markerWidth() + 20, \'top\': absolutePosition.y, \'height\': height }" style="position:absolute">    <!--  ko if: hasOwnRuler -->    <div class="dxrd-band-vruler" data-bind="styleunit: { \'height\': rulerHeight, top: 0 },    resizable: { starting: function() {        $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); $root.selection.expectClick = false;    }, stopped: function() {        $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;    }, handles: \'s\', disabled: !canResize(), forceResize: resizeTheBand, zoom: $root.surface().zoom, minimumHeight: $data.heightFromControls && $data.heightFromControls() || 1 }">        <div data-bind="ruler: { \'zoom\': zoom, \'length\': height, \'units\': $parent.measureUnit, \'direction\': \'vertical\', flip: $root.dx[\'config\']()[\'rtlEnabled\'] }"></div>    </div>    <!-- /ko -->    <!-- ko if: showMarker -->    <div class="dxrd-band-marker" data-bind="css: markerClass, styleunit: { \'height\': height(), \'width\': markerWidth }, click: function(_, e) { markerClick($root.selection); e.stopPropagation(); }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: collapsed() || !hasOwnRuler() || locked, forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }">        <div style="width: 1px; height: 1px; margin-left: 9px;"></div>        <div class="dxrd-band-marker-rotation">            <div class="dxrd-band-marker-rotation-text" data-bind="text: collapsed() ? \'\' : name"></div>        </div>    </div>    <!-- /ko --></div><!-- ko ifnot: collapsed --><!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $parent.measureUnit }; } } }--><!-- /ko --><!-- /ko --><!-- /ko -->',
    'dxrd-band': '<!-- ko ifnot: collapsed -->    <div class="dxrd-band-content dxd-selectable" data-bind="styleunit: { \'height\': heightWithoutSubBands, \'width\': _width(), \'top\': absolutePosition.y }" style="position:absolute;">        <!-- ko if: $data._context.drawWatermark() -->        <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: false, band: $data, reportSurface: $data._context } } -->        <!-- /ko -->        <!-- /ko -->        <div data-bind="styleunit: { \'left\': coordinateGridOptions.left }, coordinateGrid: coordinateGridOptions" class="dxrd-band-content-grid"></div>        <!-- ko if: $data.multiColumn() && $data.multiColumn().haveColumns() -->        <!-- ko with: $data.multiColumn -->        <div data-bind="styleunit: { \'left\': columnSpacingLeft, \'width\': columnSpacing }" class="dxrd-band-content-spasing"></div>        <div data-bind="styleunit: { \'left\': grayAreaLeft, \'width\': grayAreaWidth }" class="dxrd-band-content-greyarea"></div>        <!-- /ko -->        <!-- /ko -->        <!-- ko foreach: controls -->        <!-- ko template: { name: $data.template } -->        <!-- /ko -->        <!-- /ko -->    </div>    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->    <!-- /ko -->    <!-- /ko -->    <!-- ko if: collapsed -->    <!-- ko template: \'dxrd-band-collapsed\' -->    <!-- /ko -->    <!-- /ko -->',
    'dxrd-detailreportband': '<!-- ko ifnot: collapsed -->    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->    <!-- /ko -->    <!-- /ko -->    <!-- ko if: collapsed -->    <!-- ko template: \'dxrd-band-collapsed\' -->    <!-- /ko -->    <!-- /ko -->',
    'dxrd-band-collapsed': '<!-- ko if: collapsed -->    <div class="dxrd-band-collapsed dxd-selectable" data-bind="styleunit: { \'height\': height, \'line-height\': height, \'top\': absolutePosition.y, width: rect().width }" style="position:absolute">        <!-- ko if: $root.surface().rtl() -->        <div style="position: absolute" data-bind="text: (name() || \'\').toUpperCase(), styleunit: { \'right\': leftMargin }"></div>        <!-- /ko -->        <!-- ko if: !$root.surface().rtl() -->        <div style="position: absolute" data-bind="text: (name() || \'\').toUpperCase(), styleunit: { \'left\': leftMargin }"></div>        <!-- /ko -->    </div>    <!-- /ko -->',
    'dxrd-band-holder': '<!-- ko foreach: holder.bands -->    <!-- ko template: { name: $data[$parent.templateName], data: $parent.getData($data) } -->    <!-- /ko -->    <!-- /ko -->    <!-- ko with: holder.verticalBandsContainer -->    <!-- ko if: visible && !!$data[$parent.templateName] -->    <!-- ko template: { name: $data[$parent.templateName], data: $parent.getData($data) } -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->',
    'dxrd-vertical-band-selection': '<div data-bind="styleunit: { \'height\': height, \'width\': _width, left: absolutePosition.x }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: resizeHandles(), disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumWidth: minimumWidth(), minimumHeight: minimumHeight() },  css: { \'dxrd-band-content-selected dxd-border-accented dx-border-inheritor\': selected() }, trackCursor: underCursor" style="position:absolute">        <div class="dxrd-vertical-band-marker" data-bind="css: { \'dxrd-vertical-band-marker-focused\': focused }">            <div class="dxrd-banding-marker-text" data-bind="text: name"></div>        </div>        <div style="height: calc(100% - 29px); width: 100%; position: absolute">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>    </div>',
    'dxrd-vertical-band': '<div class="dxrd-band-content dxrd-vertical-band" data-bind="styleunit: { \'width\': _width(), \'left\': absolutePosition.x() }">        <!-- ko if: $data._context.drawWatermark() -->        <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: false, band: $data, reportSurface: $data._context } } -->        <!-- /ko -->        <!-- /ko -->        <div data-bind="coordinateGrid: coordinateGridOptions" class="dxrd-band-content-grid"></div>        <!-- ko foreach: controls -->        <!-- ko template: { name: $data.template } -->        <!-- /ko -->        <!-- /ko -->    </div>',
    'dxrd-vertical-bands-container': '<!-- ko ifnot: collapsed -->    <div class="dxrd-band-content dxrd-vertical-bands-container" data-bind="styleunit: { \'height\': height, left: leftOffset, \'width\': width, top: topOffset },        resizable: { starting: function() {            $root.resizeHandler.started = true; $root.resizeHandler.starting();        }, stopped: function() {            $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;        }, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }">        <div data-bind="styleunit: { \'width\': width }" style="height: 100%; overflow:hidden;position: absolute;">            <div data-bind="style: { transform: \'translateX(-\' + $data.scrollOffset() + \'px)\' }">                <!-- ko foreach: verticalBands -->                <!-- ko template: { name: templateName } -->                <!-- /ko -->                <!-- /ko -->                <div data-bind="styleunit: { width: grayAreaWidth, height: height, left: !$root.surface().rtl() ? grayAreaLeft : 0  }" class="dxrd-band-content-greyarea"></div>            </div>        </div>    </div>    <!-- /ko -->    <!-- ko if: collapsed -->    <div class="dxrd-band-collapsed" data-bind="styleunit: { \'height\': height, \'line-height\': height, \'top\': topOffset, width: width }" style="position:absolute">        <div style="position: absolute" data-bind="text: (name || \'\').toUpperCase(), styleunit: { \'right\': $root.surface().rtl() ? leftMargin : \'auto\', \'left\': !$root.surface().rtl() ? leftMargin: \'auto\' }"></div>    </div>    <!-- /ko -->',
    'dxrd-vertical-bands-container-selection': '<!-- ko ifnot: collapsed -->    <div data-bind="styleunit: { \'width\': width, top: topOffset, left: leftOffset, height: height() }" style="overflow:hidden;position: absolute;">        <div data-bind="dxScrollView: $data.createScrollViewOptions($data, $root.selection)">            <!-- ko foreach: verticalBands -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>    </div>    <!-- /ko -->',
    'dxrd-vertical-bands-container-vruler': '<!-- ko with: surface -->    <div class="dxrd-band-marker-wrapper" data-bind="styleunit: { \'width\': markerWidth() + 20, \'top\': topOffset, \'height\': height }" style="position:absolute">        <div class="dxrd-band-vruler" data-bind="styleunit: { \'height\': height, top: $data.bandOffset },    resizable: { starting: function() {        $root.resizeHandler.started = true; $root.resizeHandler.starting();    }, stopped: function() {        $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;    }, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }">            <div data-bind="ruler: { \'zoom\': zoom, \'length\': height, \'units\': $parent.measureUnit, \'direction\': \'vertical\', flip: $root.dx[\'config\']()[\'rtlEnabled\'] }"></div>        </div>        <div class="dxrd-band-marker dxrd-band-marker-body" data-bind="             css: {                 \'dxrd-band-marker-body\' : !$data.focused(),                \'dxrd-band-marker-body-focused\' : $data.focused()              },              styleunit: {                \'height\': height(),                 \'width\': markerWidth              },              click: function(_, e) { $data.markerClick($root.selection); e.stopPropagation(); },             resizable: {                 starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); },                 stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; },                handles: \'s\',                 disabled: collapsed,                 forceResize: resize,                 zoom: $root.surface().zoom,                 minimumHeight: minHeight()              }">            <div style="width: 1px; height: 1px; margin-left: 9px;"></div>            <div class="dxrd-band-marker-rotation">                <div class="dxrd-band-marker-rotation-text" data-bind="text: collapsed() ? \'\' : name"></div>            </div>        </div>    </div>    <!-- /ko -->',
    'dxrd-vertical-bands-leftMargin-selection': '<!-- ko with: surface -->    <div data-bind="styleunit: { \'height\': height, \'width\': $parent.width, top: topOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }" style="position:absolute">    </div>    <!-- /ko -->',
    'dxrd-vertical-bands-leftMargin': '<!-- ko with: surface -->    <div data-bind="css: { \'dxrd-band-content\': !$data.collapsed(), \'dxrd-band-collapsed\': $data.collapsed() }, styleunit: { \'height\': height, top: topOffset }">    </div>    <!-- /ko -->',
    'dxrd-barcode-content': '<div style="margin:auto; width: 150px; height: 37px;" class="dxrd-image-surface-barcode"></div><div data-bind="styleunit: { \'lineHeight\': (contentSizes().height - 37) / _context.zoom() }">    <div class="dxrd-control-content" data-bind="text: displayName, style: contentCss"></div></div>',
    'dxrd-charactercomb-content': '<!-- ko foreach: cells --><div class="dxrd-charactercomb-cell" style="position:absolute" data-bind="styleunit: { width: size.width, height: size.height, top: top, left: left }">    <div style="position:absolute">        <div data-bind="style: $parent.css, text: text, styleunit: { lineHeight: size.height(), width: size.width, height: size.height }" style="position:absolute; letter-spacing:1px;"></div>        <div data-bind="style: $parent.borderCss, styleunit: { width: size.width, height: size.height }" style="position:absolute; box-sizing:border-box"></div>    </div></div><!-- /ko -->',
    'dxrd-charactercomb': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate">    <div class="dxrd-control-content-main" style="border: 1px solid silver;left:0; top: 0;" data-bind="styleunit: { lineHeight: rect().height, height: rect().height, width: rect().width }">        <div style="position:relative; overflow:hidden; margin-top:-1px; margin-left:-1px;" data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { height: rect().height / _context.zoom(), width: rect().width / _context.zoom() }">        </div>    </div></div>',
    'dxrd-chart-designer-popup': '<div class="dxrd-chartdesigner-popup" data-bind="dxPopup: {            showTitle: true,            width: \'95%\',            height: \'95%\',            title: $root.getLocalization(\'Chart Designer\', \'ChartDesignerStringIDs.ChartDesignerWindowTitle\'),            visible: visible,            toolbarItems: buttons,            showCloseButton: true,            container: container($element),            position: { of: container($element) }}">    <div class="dxrd-chartdesigner-popup-content">        <div style="width:100%; height:100%" data-bind="visible: visible, dxChartDesigner: options"></div>    </div></div>',
    'dxrd-chart-selection': '<div class="dxrd-control" data-bind="visible: selected() || focused(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">    <div class="dxd-border-accented dxrd-control-border-box"></div>    <div class="dxrd-chart-panel">        <div class="dxrd-chart-panel-text" data-bind="dxclick: function() { $root.runChartDesigner($data); }, text: runDesignerButtonText(), attr: { title: runDesignerButtonText() }"></div>    </div></div><div class="dxrd-control" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}"></div>',
    'dxrd-checkbox-content': '<div data-bind="style: { cssFloat: isGlyphAlignmentNear() ? \'left\': \'right\', width: checkStateWidthContainer() }, styleunit: { lineHeight: contentHeightWithoutZoom }" style="text-align:center ">    <div class="dxrd-checkbox-checkstate" data-bind="styleunit:{ width: checkStateWidth, height: checkStateHeight }, css: checkStateClass, template: {name: $data.checkStateStyleIcon, if: !!ko.unwrap($data.checkStateStyleIcon)}"> </div></div><div style="display: inline-block; box-sizing: border-box; letter-spacing: normal; padding-left:3px" data-bind="styleunit: { width: textWidth, lineHeight: contentHeightWithoutZoom }, visible: visibleText, style: { cssFloat: isGlyphAlignmentNear() ? \'right\': \'left\' }">    <span class="dxrd-control-content dxrd-control-content-multiline" data-bind="controlDisplayName: $data, style: contentCss, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }"></span></div>',
    'dxrd-control-content': '<div style="box-sizing: border-box; letter-spacing: normal; width:100%" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }">    <div class="dxrd-control-content" data-bind="controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }"></div></div>',
    'dxrd-control-selection': '<div class="dxrd-control" data-bind="event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: selected() || focused(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">    <div class="dxd-border-accented dxrd-control-border-box"></div>    <!-- ko if: $root.inlineTextEdit.visible() && selected() -->    <!-- ko with: $root.inlineTextEdit-->    <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div>    <!-- /ko -->    <!-- /ko -->    <!-- ko if: $data.controls-->    <!-- ko foreach: controls -->    <!-- ko template: { name: $data.selectiontemplate } -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko --></div><div class="dxrd-control" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}">    <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}">        <!-- ko if: $data.controls-->        <!-- ko foreach: controls -->        <!-- ko template: { name: $data.selectiontemplate } -->        <!-- /ko -->        <!-- /ko -->        <!-- /ko -->    </div></div>',
    'dxrd-control': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate">    <div class="dxrd-control-content-main" data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left, lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width }, style: css">        <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }">        </div>        <!-- ko if: $data.controls -->        <!-- ko foreach: controls -->        <!-- ko template: { name: $data.template } -->        <!-- /ko -->        <!-- /ko -->        <!-- /ko -->    </div>    <div data-bind="style: borderCss" style="width:100%; height: 100%; position:absolute; box-sizing:border-box"></div></div>',
    'dxrd-crossband-line': '<svg class="dxrd-cross-band dxrd-control dxd-selectable" data-bind="styleunit: position" >    <line data-bind="attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'} , style: lineCss" />    <!-- ko if: isIntersect -->    <line class="dxrd-cross-band-intersect" data-bind="attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'}, style: lineWidthCss  " />    <!-- /ko --></svg>',
    'dxrd-crossband': '<div class="dxrd-cross-band" data-bind="styleunit: position, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }">    <div class="dxrd-control dxd-selectable" style="width: 100%; height: 5px; position: absolute;top:0" data-bind="trackCursor: edgeUnderCursor"></div>    <div class="dxrd-control dxd-selectable" style="width: 5px; height: 100%; position: absolute;left:0" data-bind="trackCursor: edgeUnderCursor"></div>    <div class="dxrd-control dxd-selectable" style="width: 5px; height: 100%; position: absolute;right:0" data-bind="trackCursor: edgeUnderCursor"></div>    <div class="dxrd-control dxd-selectable" style="width: 100%; height: 5px; position: absolute;bottom:0" data-bind="trackCursor: edgeUnderCursor"></div>    <svg width="100%" height="100%">        <line data-bind="attr: { x1: borderWidth()/2, x2: borderWidth()/2, y1: 0, y2: \'100%\' }, style: rightCss" />        <line data-bind="attr: { x1: 0, x2: \'100%\', y1: borderWidth()/2, y2: borderWidth()/2 }, style: topCss" />        <line data-bind="attr: { x1: rect().width-borderWidth()/2, x2: rect().width-borderWidth()/2, y1: 0, y2: \'100%\' }, style: leftCss" />        <line data-bind="attr: { x1: 0, x2: \'100%\', y1: rect().height-borderWidth()/2, y2: rect().height-borderWidth()/2 }, style: bottomCss" />    </svg></div>',
    'dxrd-line-content': '<svg style="position:absolute; left:0; width:100%; height: 100%">    <line data-bind="attr: { x1: linePosition().x1 / _context.zoom(), x2: linePosition().x2 / _context.zoom(), y1: linePosition().y1 / _context.zoom(), y2: linePosition().y2 / _context.zoom() }, style: contentCss" /></svg>',
    'dxrd-pagebreak-selection': '<div class="dxrd-control dxrd-pagebreak" data-bind="visible: isSelected(), trackCursor: underCursor, css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }">    <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control dxrd-pagebreak" data-bind="visible: !isSelected(), trackCursor: underCursor, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }"></div>',
    'dxrd-pagebreak': '<div class="dxrd-control dxd-selectable" style="border:none; background: none;" data-bind="styleunit: position">    <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': lineHeight, \'height\': lineHeight, \'width\': position.width() / _context.zoom() }">    </div></div>',
    'dxrd-picturebox-selection': '<div class="dxrd-control" data-bind="visible: selected() || focused(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizeOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">    <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}">    <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}">    </div></div>',
    'dxrd-pivotgrid-field-selection': '<div class="dxrd-pivot-field" data-bind="styleunit: { \'width\': Math.max(positionWidthWithoutZoom(), minWidth()), \'height\': position.height() / _context.zoom() }, trackCursor: underCursor"></div>',
    'dxrd-pivotgrid-field': '<div class="dxrd-pivot-field" data-bind="css: {\'dxrd-pivot-field-selected\': selected }, zoom: 1/_context.zoom(), styleunit: { \'width\': Math.max(position.width(), minWidth() * _context.zoom()), \'height\': position.height }">    <div class="dxrd-pivot-field-content" data-bind="text: displayName, zoom: _context.zoom"></div></div>',
    'dxrd-pivotGridFields': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, addHandler: $root.dx.Reporting.Designer.Controls.PivotGrid.PivotGridFieldViewModel.createNew(_model), displayName: $root.getLocalization(displayName), level: level, info: info }">        </div>    </div>',
    'dxrd-pivot-sortBySummaryInfo-conditions': '<div class="dx-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: {                 values: value,                 displayName: displayName,                 level: level,                 info: info,                 addHandler: function(){ return $root.dx.Reporting.Designer.Controls.PivotGrid.SortBySummaryInfoCondition.createNew($parents[1].value()) }             }">        </div>    </div>',
    'dxrd-pivotgrid-content': '<div style="box-sizing: border-box; letter-spacing: normal; width:100%; height:100%" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }">    <div class="dxrd-control-content" data-bind="style: contentCss" style="width: 100%; height: 100%">        <div class="dxrd-pivot-content" data-bind="css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }">            <div class="dxrd-pivot-filter-area">                <!-- ko if: filterFields().length !== 0 -->                <div class="dxrd-pivot-fields-wrapper">                    <!-- ko foreach: filterFields -->                    <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }">                        <!-- ko template: { name: $data.template } -->                        <!-- /ko -->                    </div>                    <!-- /ko -->                </div>                <!-- /ko -->                <!-- ko if: filterFields().length === 0 -->                <div class="dxrd-pivot-text-wrapper">                    <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Filter Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields\')"></div>                </div>                <!-- /ko -->            </div>            <div class="dxrd-pivot-grid-area">                <div class="dxrd-pivot-grid-area-left">                    <div class="dxrd-pivot-rows-area">                        <div class="dxrd-pivot-rows-header" data-bind="styleunit: { width: totalsRowFieldWidth, height: rowHeaderHeight }">                            <!-- ko if: rowFields().length !== 0 -->                            <div class="dxrd-pivot-fields-wrapper">                                <!-- ko foreach: rowFields -->                                <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }">                                    <!-- ko template: { name: $data.template } -->                                    <!-- /ko -->                                </div>                                <!-- /ko -->                            </div>                            <!-- /ko -->                            <!-- ko if: rowFields().length === 0 -->                            <div class="dxrd-pivot-text-wrapper">                                <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Row Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields\')"></div>                            </div>                            <!-- /ko -->                        </div>                        <div class="dxrd-pivot-total" data-bind="text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div>                    </div>                </div>                <div class="dxrd-pivot-grid-area-right">                    <div class="dxrd-pivot-columns-header">                        <!-- ko if: columnFields().length !== 0 -->                        <div class="dxrd-pivot-fields-wrapper">                            <!-- ko foreach: columnFields -->                            <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }">                                <!-- ko template: { name: $data.template } -->                                <!-- /ko -->                            </div>                            <!-- /ko -->                        </div>                        <!-- /ko -->                        <!-- ko if: columnFields().length === 0 -->                        <div class="dxrd-pivot-text-wrapper">                            <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Column Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields\')"></div>                        </div>                        <!-- /ko -->                    </div>                    <div class="dxrd-pivot-data-header" data-bind="styleunit: { width: totalsDataFieldWidth }">                        <div class="dxrd-pivot-total-wrapper">                            <div class="dxrd-pivot-total" data-bind="styleunit: { height: totalsHeight }, text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div>                        </div>                        <div class="dxrd-pivot-data-area">                            <!-- ko if: dataFields().length !== 0 -->                            <!-- ko foreach: dataFields -->                            <div class="dxrd-pivot-data-field" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }">                                <div class="dxrd-pivot-field-wrapper">                                    <!-- ko template: { name: $data.template } -->                                    <!-- /ko -->                                </div>                                <div class="dxrd-pivot-field-empty"></div>                            </div>                            <!-- /ko -->                            <!-- /ko -->                            <!-- ko if: dataFields().length === 0 -->                            <div class="dxrd-pivot-field-empty">                                <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Data Items Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems\')"></div>                            </div>                            <!-- /ko -->                        </div>                    </div>                </div>            </div>        </div>    </div></div>',
    'dxrd-pivotgrid-selection-context': '<div class="dxrd-control-content" style="width: 100%; height: 100%; line-height:normal; overflow:hidden">        <div class="dxrd-pivot-content" style="width:100%; height:100%; overflow:hidden;" data-bind="zoom: _context.zoom(), css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }">            <div class="dxrd-pivot-filter-area">                <!-- ko if: filterFields().length !== 0 -->                <div class="dxrd-pivot-fields-wrapper">                    <!-- ko foreach: filterFields -->                    <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }">                        <!-- ko template: { name: $data.selectiontemplate } -->                        <!-- /ko -->                    </div>                    <!-- /ko -->                </div>                <!-- /ko -->                <!-- ko if: filterFields().length === 0 -->                <div class="dxrd-pivot-text-wrapper">                    <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Filter Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields\')"></div>                </div>                <!-- /ko -->            </div>            <div class="dxrd-pivot-grid-area">                <div class="dxrd-pivot-grid-area-left">                    <div class="dxrd-pivot-rows-area">                        <div class="dxrd-pivot-rows-header" data-bind="styleunit: { width: totalsRowFieldWidth, height: rowHeaderHeight }">                            <!-- ko if: rowFields().length !== 0 -->                            <div class="dxrd-pivot-fields-wrapper">                                <!-- ko foreach: rowFields -->                                <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }">                                    <!-- ko template: { name: $data.selectiontemplate } -->                                    <!-- /ko -->                                </div>                                <!-- /ko -->                            </div>                            <!-- /ko -->                            <!-- ko if: rowFields().length === 0 -->                            <div class="dxrd-pivot-text-wrapper">                                <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Row Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields\')"></div>                            </div>                            <!-- /ko -->                        </div>                        <div class="dxrd-pivot-total" data-bind="text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div>                    </div>                </div>                <div class="dxrd-pivot-grid-area-right">                    <div class="dxrd-pivot-columns-header">                        <!-- ko if: columnFields().length !== 0 -->                        <div class="dxrd-pivot-fields-wrapper">                            <!-- ko foreach: columnFields -->                            <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }">                                <!-- ko template: { name: $data.selectiontemplate } -->                                <!-- /ko -->                            </div>                            <!-- /ko -->                        </div>                        <!-- /ko -->                        <!-- ko if: columnFields().length === 0 -->                        <div class="dxrd-pivot-text-wrapper">                            <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Column Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields\')"></div>                        </div>                        <!-- /ko -->                    </div>                    <div class="dxrd-pivot-data-header" data-bind="styleunit: { width: totalsDataFieldWidth }">                        <div class="dxrd-pivot-total-wrapper">                            <div class="dxrd-pivot-total" data-bind="styleunit: { height: totalsHeight }, text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div>                        </div>                        <div class="dxrd-pivot-data-area">                            <!-- ko if: dataFields().length !== 0 -->                            <!-- ko foreach: dataFields -->                            <div class="dxrd-pivot-data-field" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }">                                <div class="dxrd-pivot-field-wrapper">                                    <!-- ko template: { name: $data.selectiontemplate } -->                                    <!-- /ko -->                                </div>                                <div class="dxrd-pivot-field-empty"></div>                            </div>                            <!-- /ko -->                            <!-- /ko -->                            <!-- ko if: dataFields().length === 0 -->                            <div class="dxrd-pivot-field-empty">                                <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Data Items Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems\')"></div>                            </div>                            <!-- /ko -->                        </div>                    </div>                </div>            </div>        </div>    </div>',
    'dxrd-pivotgrid-selection': '<div class="dxrd-control" data-bind=" visible: !($data.selected() || $data.focused()), css: { \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, styleunit: position, trackCursor: underCursor">        <!-- ko template: \'dxrd-pivotgrid-selection-context\' -->        <!-- /ko -->    </div>    <div class="dxrd-control" data-bind="visible: $data.selected() || $data.focused(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">        <div class="dxd-border-accented dxrd-control-border-box"></div>        <!-- ko template: \'dxrd-pivotgrid-selection-context\' -->        <!-- /ko -->    </div>',
    'dxrd-report': '<div class="dxrd-surface" data-bind="styleunit: { \'width\': Math.min($data.pageWidth() + $data.maxMarkerWidth() + $root.verticalScrollOffset() , $root.surfaceSize()) }, css: { \'dxrd-surface-rtl\': rtl() }, click: function(surface, e) { $root.selection.clickHandler($root.selection.dropTarget ? null : surface, e); e.stopPropagation(); }, keyDownActions: $root.actionLists">    <div class="dxrd-content-panel-wrapper" data-bind="styleunit: $root.dx[\'config\']()[\'rtlEnabled\'] ?  { right: maxMarkerWidth() } : { left: maxMarkerWidth() }, style: { bottom: (20 - $root.horizontalScrollOffset()) + \'px\' }">        <div class="dxrd-content-panel">            <div class="dxrd-hruler-wrapper">                <div class="dxrd-hruler" data-bind="styleunit: { left: leftMarginOffset,\'width\': margins.left }">                    <div data-bind="ruler: { \'zoom\': zoom, \'length\': margins.left, \'units\': measureUnit, flip: ko.computed(function(){ return !rtl(); }) }"></div>                    <div class="dxrd-ruler-shadow" data-bind="styleunit: { left: 0, \'width\': margins.left }"></div>                </div>                <div class="dxrd-hruler" data-bind="styleunit: { \'width\': (pageWidth() - margins.left()), left: ghostContainerOffset }">                    <div class="dxrd-margin-resizable" data-bind="styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizable: leftMarginResizeOptions($root.undoEngine, $element)"></div>                    <div data-bind="ruler: { \'zoom\': zoom, \'length\': function() { return pageWidth() - margins.left();}, \'units\': measureUnit, flip: rtl }"></div>                    <div class="dxrd-ruler-shadow" data-bind="styleunit: { left: rightMarginOffset, width: margins.right }, resizable: rightMarginResizeOptions($root.undoEngine, $element)"></div>                </div>                <div class="dxrd-vscroller-space" data-bind="styleunit: { \'left\': pageWidth() }"></div>            </div>            <div class="dxrd-viewport" data-bind="styleunit: {                     minWidth: Math.min($data.pageWidth() + $root.verticalScrollOffset(), $root.surfaceSize()) - $data.maxMarkerWidth(),                    maxWidth: $data.pageWidth() + $root.verticalScrollOffset(),                    maxHeight: $data.effectiveHeight() + $root.horizontalScrollOffset()                  },                  event: {                     scroll: function() { $root.onViewPortScroll($element) }                  },                 style: {                     \'overflow-x\': $root.horizontalScrollOffset() ? \'auto\' : \'hidden\',                    \'overflow-y\': $root.verticalScrollOffset() ? \'auto\' : \'hidden\'                 }">                <div data-bind="selectable: { selection: $root.selection, zoom: zoom }">                    <div class="dxrd-leftMargin" data-bind="styleunit: { left: leftMarginOffset, width: margins.left() }">                        <div class="dxrd-selection" style="position:absolute">                            <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left }; } } }-->                            <!-- /ko -->                        </div>                        <div class="dxrd-flip">                            <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left, snapGridSize: $data.snapGridSize  }; } } }-->                            <!-- /ko -->                        </div>                    </div>                    <div class="dxrd-ghost-containment" data-bind="styleunit: { left: ghostContainerOffset }">                        <div class="dxrd-ghost-container" data-bind="styleunit: { \'width\': pageWidthWithoutMargins, \'height\': minHeight }">                            <div class="dxrd-bands-content dxrd-main">                                <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->                                <!-- /ko -->                                <!-- ko foreach: crossBandControls -->                                <!-- ko if: visible -->                                <!-- ko template: { name: template } -->                                <!-- /ko -->                                <!-- /ko -->                                <!-- /ko -->                                <svg style="height: 100%; position: absolute; top: 0; width: 1px; z-index:-1" data-bind="styleunit: { left: leftMarginOffset() }">                                    <line data-bind="attr: { x1: 0, x2: 0 }" y1="0" y2="100%" style="stroke: rgb(128, 128, 128); stroke-width: 0.5px; stroke-dasharray:5px,5px" />                                </svg>                                <svg class="dxrd-rightMargin-border" data-bind="styleunit: { left: rtl() ? margins.right() : rightMarginOffset() }, visible: margins.right() > 0">                                    <line data-bind="attr: { x1: 0, x2: 0 }" y1="0" y2="100%" style="stroke: rgb(220, 220, 220); stroke-width: 3px; stroke-dasharray:5px,5px" />                                </svg>                                <!-- ko template: { name: \'dxd-snap-lines-holder\', data: $root.snapHelper } -->                                <!-- /ko -->                                <div class="dxrd-drag-helper-source" data-bind="styleunit: { top: $root.dragHelperContent.top, left: $root.dragHelperContent.left, width: $root.dragHelperContent.width, height: $root.dragHelperContent.height }, css: { \'dxrd-locked\': $root.dragHelperContent.isLocked }">                                    <!-- ko foreach: $root.dragHelperContent.controls -->                                    <div class="dxrd-drag-helper-control" data-bind="styleunit: { left: $data.left, top: $data.top, width: $data.width, height: $data.height }, css: $data.className">                                        <!-- ko with: $root.dragHelperContent.customData() -->                                        <div data-bind="template: { name: $data.template, data: $data.data }"> </div>                                        <!-- /ko -->                                    </div>                                    <!-- /ko -->                                </div>                            </div>                            <div class="dxrd-bands-content dxrd-selection" data-bind="styleunit: { \'width\': pageWidthWithoutMargins }">                                <div class="dxrd-bands-content-offset">                                    <div class="dxrd-leftMargin-resizable" data-bind="styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizable: leftMarginResizeOptions($root.undoEngine, $element)"></div>                                    <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }-->                                    <!-- /ko -->                                    <!-- ko foreach: crossBandControls -->                                    <!-- ko if: visible -->                                    <div class="dxrd-cross-band" data-bind="visible: isSelected() && !$root.dx.Analytics.Internal.DragDropHandler.started(), css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">                                    </div>                                    <!-- /ko -->                                    <!-- /ko -->                                    <div class="dxrd-rightMargin-resizable" data-bind="styleunit: { left: rightMarginResizableOffset }, resizable: rightMarginResizeOptions($root.undoEngine, $element)"></div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div>    <div class="dxrd-bands-panel-wrapper" data-bind="styleunit: { width: maxMarkerWidth() }">        <div class="dxrd-bands-panel">            <div class="dxrd-band-headers">                <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $data.measureUnit }; } } }-->                <!-- /ko -->            </div>        </div>        <div class="dxrd-hscroller-space"></div>    </div></div>',
    'dxrd-shape-content': '<img data-bind="attr: { src: imageSrc }, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }" /><!-- ko if: $data.isLoading --><div class="dx-content-loading-panel">    <div data-bind="dxLoadIndicator: { visible: isLoading() }"></div></div><!-- /ko -->',
    'dxrd-shape': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate">    <div class="dxrd-control-content-main" data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left, lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width }, style: css">        <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': contentHeightWithoutZoom }" style="position:absolute;">        </div>    </div>    <div data-bind="style: borderCss" style="width:100%; height: 100%; position:absolute; box-sizing:border-box"></div></div>',
    'dxrd-subreport-selection': '<div class="dxrd-control" data-bind="event: { dblclick:  function (control, e) { $root.navigateByReports.goToSubreport(control); } }, visible: isSelected, css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizableOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">    <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control" data-bind="visible: !isSelected(), styleunit: position, trackCursor: underCursor"></div>',
    'dxrd-subreport': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate">    <div data-bind="style: borderCss" style="width:100%; height: 100%; position:absolute; box-sizing:border-box"></div>    <div class="dxrd-control-content" data-bind="text: displayText(), style: contentCss"></div></div>',
    'dxrd-table-selection': '<div class="dxrd-table-control" data-bind="visible: !isSelected(), styleunit: position">    <!-- ko if: rows().length > 0 -->    <!-- ko foreach: rows -->    <div class="dxrd-table-row-control" data-bind="styleunit: { \'top\': position.top, \'height\': position.height }">        <!-- ko foreach: cells -->        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style:{ overflow: isSelected() ? \'visible\' : \'hidden\', \'z-index\': offsetZIndex() }">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->    </div>    <!-- /ko -->    <!-- /ko --></div><div class="dxrd-table-control" data-bind="visible: selected() || focused(), css: { \'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position">    <div class="dxd-border-accented dxrd-control-border-box"></div>    <!-- ko if: rows().length > 0 -->    <!-- ko foreach: rows()[0].cells -->    <div class="dxrd-table-column-selection dxrd-table-column-selection-top" data-bind="click: function(_, e) { selectColumn($root.selection); e.stopPropagation(); }, visible: !$root.dx.Analytics.Internal.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }"></div>    <!-- /ko -->    <!-- ko foreach: rows -->    <div class="dxrd-table-row-control" data-bind="styleunit: { \'top\': position.top, \'height\': position.height }">        <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="trackCursor: underCursor, visible: !$root.dx.Analytics.Internal.DragDropHandler.started()"></div>        <!-- ko foreach: cells -->        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style: { \'z-index\': offsetZIndex() }">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->        <div class="dxrd-table-row-selection dxrd-table-row-selection-right" style="visibility: visible" data-bind="trackCursor: underCursor, visible: !$root.dx.Analytics.Internal.DragDropHandler.started()"></div>    </div>    <!-- /ko -->    <!-- ko foreach: rows()[rows().length-1].cells -->    <div class="dxrd-table-column-selection dxrd-table-column-selection-bottom" data-bind="click: function(_, e) { selectColumn($root.selection); e.stopPropagation(); },visible: !$root.dx.Analytics.Internal.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }"></div>    <!-- /ko -->    <!-- /ko --></div><div class="dxrd-table-control" data-bind="visible: isSelected() && !(selected() || focused()), styleunit: position">    <!-- ko if: rows().length > 0 -->    <!-- ko foreach: rows()[0].cells -->    <div class="dxrd-table-column-selection dxrd-table-column-selection-top" data-bind="click: function(_, e) { selectColumn($root.selection); e.stopPropagation(); }, visible: !$root.dx.Analytics.Internal.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }"></div>    <!-- /ko -->    <!-- ko foreach: rows -->    <div class="dxrd-table-row-control" data-bind="visible: isSelected(), css: { \'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'n,s\', disabled: !(selected() || focused()), zoom: $root.surface().zoom }, styleunit: { \'top\': position.top, \'height\': position.height }">        <div class="dxd-border-accented dxrd-control-border-box"></div>        <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="visible: !$root.dx.Analytics.Internal.DragDropHandler.started(), trackCursor: underCursor"></div>        <!-- ko foreach: cells -->        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: { \'dxrd-selected\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-table-cell-over-rowSpan\': rowSpan() === 0  }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'e,w\', disabled: !(selected() || focused()), zoom: $root.surface().zoom, snapHelper: $root.resizeHandler.snapHelper }, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, style : { \'z-index\': offsetZIndex() }">            <div class="dxd-border-accented dxrd-control-border-box"></div>            <!-- ko if: $root.inlineTextEdit.visible() && selected() -->            <!-- ko with: $root.inlineTextEdit-->            <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div>            <!-- /ko -->            <!-- /ko -->            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, visible: !isSelected(), styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->        <div class="dxrd-table-row-selection dxrd-table-row-selection-right" data-bind="visible: !$root.dx.Analytics.Internal.DragDropHandler.started(), trackCursor: underCursor"></div>    </div>    <div class="dxrd-table-row-control" data-bind="visible: !isSelected(), styleunit: { \'top\': position.top, \'height\': position.height }">        <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="visible: !$root.dx.Analytics.Internal.DragDropHandler.started(),trackCursor: underCursor"></div>        <!-- ko foreach: cells -->        <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }">            <!-- ko foreach: controls -->            <!-- ko template: { name: $data.selectiontemplate } -->            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->        <div class="dxrd-table-row-selection dxrd-table-row-selection-right" data-bind="visible: !$root.dx.Analytics.Internal.DragDropHandler.started(),trackCursor: underCursor"></div>    </div>    <!-- /ko -->    <!-- ko foreach: rows()[rows().length-1].cells -->    <div class="dxrd-table-column-selection dxrd-table-column-selection-bottom" data-bind="visible: !$root.dx.Analytics.Internal.DragDropHandler.started(),click: function(_, e) { selectColumn($root.selection); e.stopPropagation(); }, styleunit: { \'left\': position.left, \'width\': position.width }"></div>    <!-- /ko -->    <!-- /ko --></div>',
    'dxrd-table': '<div class="dxrd-table-control dxrd-control dxd-selectable" data-bind="styleunit: position, trackCursor: underCursor, css: adorntemplate">    <div data-bind="style: css" style="width: 100%; height: 100%;">        <!-- ko foreach: rows -->        <div class="dxrd-table-row-control" data-bind="styleunit: { \'top\': position.top, \'height\': position.height}, style: css, css: adorntemplate">            <!-- ko foreach: cells -->            <div class="dxrd-table-cell-control dxrd-control" data-bind="styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, trackCursor: underCursor, css: adorntemplate">                <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': position.lineHeight() / _context.zoom(), \'width\': contentWidthWithoutZoom, \'height\': contentHeightWithoutZoom }, style: css">                </div>                <!-- ko foreach: controls -->                <!-- ko template: { name: $data.template } -->                <!-- /ko -->                <!-- /ko -->            </div>            <!-- /ko -->        </div>        <!-- /ko -->    </div></div>',
    'dxrd-table-of-contents': '<div class="dxrd-control dxd-selectable dxrd-control-table-of-content" data-bind="styleunit: position, trackCursor: underCursor, css: adorntemplate">        <div data-bind="style: css" style="width: 100%; height: 100%;">            <!-- ko template: { name: levelTitle.template, data: levelTitle } -->            <!-- /ko -->            <div class="dxrd-control-table-of-content-levelsElements">                <!-- ko foreach: $data.levels() -->                <!-- ko template: { name: $data.template } -->                <!-- /ko -->                <!-- /ko -->                <!-- ko template: { name: levelDefault.template, data: levelDefault, isDefault: true } -->                <!-- /ko -->            </div>        </div>    </div>',
    'dxrd-table-of-contents-level': '<div class="dxrd-control" data-bind="styleunit: { height: position.height, top: position.top, lineHeight: position.lineHeight}, css: adorntemplate" style="left: 0; width: 100%">        <div class="dxrd-tocLevel-border" data-bind="styleunit: { \'height\': _context.zoom()}"></div>        <!-- ko if: getControlModel().rtl() -->        <div data-bind="style: borderCss, styleunit: { left: position.left, width: contentSizes().width + (contentSizes().left + contentSizes().right)} " style="height: 100%; position:absolute; box-sizing:border-box"></div>        <!-- /ko -->        <!-- ko if: !getControlModel().rtl() -->        <div data-bind="style: borderCss, styleunit: { left: position.left} " style="height: 100%; right: 0; position:absolute; box-sizing:border-box"></div>        <!-- /ko -->        <div class="dxrd-control-content-main" style="overflow:hidden" data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left + position.left(), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}, style: css">            <div class="dxrd-tocLevel-zoomer" data-bind="zoom: _context.zoom, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }">                <div style="box-sizing: border-box; letter-spacing: normal; width:100%;height:100%;" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }">                    <!-- ko if: getControlModel().isTitle -->                    <div class="dxrd-control-content dxrd-control-content-multiline" data-bind="controlDisplayName: $data, style: contentCss"></div>                    <!-- /ko -->                    <!-- ko ifnot: getControlModel().isTitle -->                    <div class="dxrd-control-content" data-bind="style: contentCss" style="width: 100%; height: 100%; line-height:inherit;">                        <div class="dxrd-control-content-level-text">                            <table border="0" cellspacing="0" cellpadding="0">                                <tr>                                    <td>                                        <div class="dxrd-control-content-line-text"><span data-bind="text: $data.getControlModel().name"></span></div>                                    </td>                                    <td class="middle">                                        <table border="0" cellspacing="0" cellpadding="0" style="table-layout: fixed; width: 100%">                                            <tr>                                                <td data-bind="text: leaderSymbols" style="word-wrap: break-word"></td>                                            </tr>                                        </table>                                    </td>                                    <td>                                        <div class="dxrd-control-content-number">&nbsp;&nbsp;#&nbsp;&nbsp;</div>                                    </td>                                </tr>                            </table>                        </div>                    </div>                    <!-- /ko -->                </div>            </div>        </div>    </div>',
    'dxrd-table-of-contents-selected': '<div class="dxrd-control dxrd-table-of-contents-selected" data-bind="event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor">        <div class="dxd-border-accented dxrd-control-border-box"></div>        <!-- ko with: levelTitle -->        <div class="dxrd-control dxrd-control-line-ui-resizeble" data-bind="styleunit: position, resizable: resizable($root.resizeHandler, $element)">            <!-- ko with: $root.inlineTextEdit-->            <!-- ko if: visible -->            <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div>            <!-- /ko -->            <!-- /ko -->        </div>        <!-- /ko -->        <!-- ko foreach: $data.levels() -->        <div class="dxrd-control dxrd-control-line-ui-resizeble" data-bind="styleunit: {            height: position.height,            top: position.top,            lineHeight: position.lineHeight        },        resizable: resizable($root.resizeHandler, $element)" style="left:0; width:100%"></div>        <!-- /ko -->        <!-- ko with: levelDefault -->        <div class="dxrd-control" data-bind="styleunit: {            height: position.height,            top: position.top,            lineHeight: position.lineHeight        },        resizable: resizable($root.resizeHandler, $element)" style="left:0; width:100%"></div>        <!-- /ko -->    </div>    <div class="dxrd-control" data-bind="visible: !isSelected(), styleunit: position, trackCursor: underCursor">    </div>',
    'dxrd-textcontrol-content': '<div style="box-sizing: border-box; letter-spacing: normal; width:100%" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }">    <div class="dxrd-control-content" data-bind="controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } } "></div></div>',
    'dxrd-todocontrol': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, trackCursor: underCursor, style: css, css: adorntemplate">    <div data-bind="style: borderCss" class="dxrd-control-border-box"></div>    <div data-bind="css: controlTypeClass, template: controlTypeIconTemplate" style="position: absolute; width: 24px; height: 24px; right: 5px; top: 5px;"> </div>    <span class="dxrd-control-content" data-bind="text: displayName, style: contentCss"></span></div>',
    'dxrd-calculatedfield-content': '<div data-bind="with: propertyGrid">    <!-- ko foreach: getEditors() -->    <!-- ko template: editorTemplate -->    <!-- /ko -->    <!-- /ko --></div>',
    'dxrd-datasource-item': '<div class="dx-fieldset">    <div data-bind="dxCollectionEditor: { values: ko.observable(tableInfoItems), displayName: $root.getLocalization(\'Filter Criteria\', \'ASPxReportsStringId.ReportDesigner_DataSource_FilterCriteriaTitle\'), hideButtons: true }">        <div class="dx-field dxd-back-primary">            <!-- ko with: value -->            <div class="dx-field-label dxd-text-primary" data-bind="text: tableName"></div>            <!-- ko if: $data.filterString() !== null -->            <div class="dx-field-value" style="margin-right:5px" data-bind="dxFilterEditor: { options: filterString, fieldListProvider: $root.dataBindingsProvider, getDisplayNameByPath: $root.getDisplayNameByPath }"></div>            <!-- /ko -->            <!-- /ko -->        </div>    </div></div>',
    'dxrd-coordinategrid': '<svg data-bind="style: { \'height\': height() + \'px\',  \'width\': width() + \'px\' }, attr: { viewBox: \'0 0 \' + width() + \' \' + height() }">    <g transform="translate(0, 0)">        <!-- ko foreach: verticalGridLines -->        <line y1="0" y2="100%" class="minor-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }, visible: visible"></line>        <!-- /ko -->    </g>    <g transform="translate(0, 0)">        <!-- ko foreach: horizontalGridLines -->        <line x1="0" x2="100%" class="minor-graduation" data-bind="attr: { y1: coordVal, y2: coordVal }, visible: visible"></line>        <!-- /ko -->    </g>    <g transform="translate(0, 0)">        <!-- ko foreach: majorVerticalGridLines -->        <line y1="0" y2="100%" class="major-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }, visible: visible"></line>        <!-- /ko -->    </g>    <g transform="translate(0, 0)">        <!-- ko foreach: majorHorizontalGridLines -->        <line x1="0" x2="100%" class="major-graduation" data-bind="attr: { y1: coordVal, y2: coordVal }, visible: visible"></line>        <!-- /ko -->    </g></svg>',
    'dxrd-expressions-tab': '<div class="dxrd-properties-wrapper dxrd-expressions-tab" data-bind="visible: active() && visible()">        <div style="height:100%">            <div class="dxrd-right-panel-header dxd-text-primary">                <span data-bind="text: text"></span>            </div>            <!-- ko with: model -->            <!-- ko if: $root.controlsStore.visible() -->            <div class="dx-property-grid-header">                <div class="dx-property-grid-header-content">                    <div class="dx-property-grid-selected-component">                        <div class="dxrd-properties-focused-item" style="margin:0" data-bind="dxSelectBox: {                            dataSource: $root.controlsStore.dataSource,                            value: $root.editableObject,                            displayExpr: function(value) {                                 var showValue = value || $root.editableObject();                                 return $root.dx.Analytics.Internal.getControlFullName(showValue)                                 },                            dropDownOptions: { container: $root.getPopupContainer($element) }                        }">                        </div>                    </div>                </div>            </div>            <!-- /ko -->            <div class="dxrd-properties-grid dxd-border-primary" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }" style="top: 80px">                <!-- ko template: \'dx-propertieseditor\' -->                <!-- /ko -->            </div>            <!-- /ko -->        </div>    </div>',
    'dxrd-fieldlistwrapper': '<div class="dxrd-fieldslist-wrapper" data-bind="visible: active() && visible()" style="height: 100%; overflow:hidden">    <!-- ko with: model -->    <div class="dxrd-right-panel-header dxd-text-primary">        <div class="dxrd-fieldslist-wrapper-header" data-bind="text: $root.getLocalization(\'Field List\', \'ReportStringId.UD_Title_FieldList\')"></div>        <div id="btn-add-dataSouce" class="dxrd-collectioneditor-action" style="line-height: 20px; margin-top: 8px" data-bind="dxButtonWithTemplate: { onClick: showPopover, icon: \'dxrd-svg-operations-add_datasource\', iconClass: \'dxrd-image-add-datasource\', visible: addDataSourceBtnVisible }, attr: { title: $root.getLocalization(\'Add Data Source\', \'ReportStringId.UD_Title_FieldList_AddNewDataSourceText\') }">        </div>        <div class="dxrd-add-dataSource-popup-content" data-bind="dxPopover:{ width: 200, visible: popoverVisible, target: \'#btn-add-dataSouce\', container: $root.getPopupContainer($element), title:$root.getLocalization(\'Add Data Source\', \'ReportStringId.UD_Title_FieldList_AddNewDataSourceText\') + \':\' }">            <div data-bind="dxList: { dataSource: dataSourceListItems(), onItemClick: itemClickAction }">                <div data-options="dxTemplate : { name: \'item\' }">                    <div class="dxrd-list-item-ellipsis-text" data-bind="text: name, attr: { title: name }"></div>                </div>            </div>        </div>    </div>    <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }">        <div class="dx-editors">            <div id="tree" data-bind="treelist: treeListOptions" style="width:100%; height: 100%;"></div>        </div>    </div>    <!-- /ko --></div>',
    'dxrd-reportexplorerwrapper': '<div class="dxrd-fieldslist-wrapper" data-bind="visible: active() && visible()" style="height: 100%; overflow:hidden">        <div class="dxrd-right-panel-header dxd-text-primary">            <div class="dxrd-fieldslist-wrapper-header" data-bind="text: $root.getLocalization(\'Report Explorer\', \'ReportStringId.UD_Title_ReportExplorer\')"></div>        </div>        <!-- ko with: model-->        <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }, dxAutoScrolling: { active: $root.dx.Analytics.Internal.DragDropHandler.started }">            <div id="tree" data-bind="treelist: { selectedPath: itemsProvider.selectedPath, itemsProvider: itemsProvider, treeListController: treeListController }" style="width:100%; height: 100%;"></div>        </div>        <!-- /ko -->    </div>',
    'dxrd-ruler': '<svg data-bind="attr: { \'width\': width() + \'px\', \'height\': height() + \'px\' }">    <rect width="100%" height="100%" stroke-width="1px" stroke="gray" class="ruler"></rect>    <!-- ko if: disable -->    <rect data-bind="attr: { x: disable.start, width: disable.width }" height="100%" fill="grey" fill-opacity="0.5"></rect>    <!-- /ko -->    <!-- ko foreach: gridLines -->    <line y1="80%" y2="100%" class="ruler-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }"></line>    <!-- /ko -->    <!-- ko foreach: majorGridLines -->    <line y1="70%" y2="100%" class="ruler-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }"></line>    <!-- /ko -->    <g transform="translate(-3, 0)">        <!-- ko foreach: majorGridLines -->        <text class="ruler-mark" data-bind="text: text, attr: {x: coordVal, y: 12 }"></text>        <!-- /ko -->    </g>    <!--<text class="ruler-mark" transform="translate(4, 14)">0</text>--></svg>',
    'dxrd-rulervertical': '<svg data-bind="attr: { \'width\': width() + \'px\', \'height\': height() + \'px\' }">    <rect width="100%" height="100%" stroke-width="1px" stroke="gray" class="ruler"></rect>    <!-- ko foreach: gridLines -->    <line class="ruler-graduation" data-bind="attr: { x1: $parent.defaultGridLinesCoordinate().x1, x2: $parent.defaultGridLinesCoordinate().x2, y1: coordVal, y2: coordVal }"></line>    <!-- /ko -->    <!-- ko foreach: majorGridLines -->    <line class="ruler-graduation" data-bind="attr: {x1: $parent.defaultGridLinesCoordinate().majorX1, x2: $parent.defaultGridLinesCoordinate().majorX2, y1: coordVal, y2: coordVal }"></line>    <!-- /ko -->    <g transform="translate(0, 3)">        <!-- ko foreach: majorGridLines -->        <text class="ruler-mark" data-bind="text: text, attr: {x: $parent.defaultGridLinesCoordinate().x, y: coordVal }"></text>        <!-- /ko -->    </g>    <!--<text class="ruler-mark" transform="translate(4, 14)">0</text>--></svg>',
    'dxrd-watermark': '<!-- ko if: $data.reportSurface.watermark.image() --><div data-bind="css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: \'data:image/png;base64,\' + reportSurface.watermark.image(), transparency: reportSurface.watermark.imageTransparency(), viewMode: reportSurface.watermark.imageViewMode(), align: reportSurface.watermark.imageAlign(), tiling: reportSurface.watermark.imageTiling() }" style="position: absolute"></div><!-- /ko --><!-- ko if: $data.reportSurface.watermark.text() --><div data-bind="css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: reportSurface._watermarkTextRenderingResult(), transparency: reportSurface.watermark.textTransparency(), viewMode: \'Stretch\', align: \'MiddleCenter\', tiling: false }" style="position: absolute"></div><!-- /ko -->',
    'dxrd-scripts-addon': '<!-- ko if: editorVisible -->     <div class="dxrd-designer-wrapper dx-editors dxd-surface-back-color dxd-back-primary" data-bind="css: { \'dx-rtl\' : $root.rtl, \'dx-ltr\': !$root.rtl }">        <div class="dxrd-toolbar-wrapper">            <div class="dxrd-toolbar" data-bind="template: { name: \'dxrd-toolbar-tmplt\', data: toolbarItems }"></div>        </div>        <div class="dxrd-scripts-wrapper">            <div class="dxrd-scripts-editor dxd-back-primary2" data-bind="dxAceEditor: { value: scriptsText, editorContainer: editorContainer, options: aceOptions }">            </div>        </div>    </div>    <!-- /ko -->',
    'dxrd-scripting-controlchooser': '<div class="dxrd-toolbar-item dxrd-toolbar-selectbox">        <div data-bind="dxSelectBox: { dataSource: controls, value: control, displayExpr: displayExpr, placeholder: $root.getLocalization(\'Select control...\', \'ASPxReportsStringId.ReportDesigner_ScriptEditor_Toolbar_SelectControl\'), width: \'300px\', dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>        <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div>    </div>',
    'dxrd-scripting-eventchooser': '<div class="dxrd-toolbar-item dxrd-toolbar-selectbox">        <div data-bind="dxSelectBox: { items: events, value: event, placeholder: $root.getLocalization(\'Select event...\', \'ASPxReportsStringId.ReportDesigner_ScriptEditor_Toolbar_SelectEvent\'), width: \'200px\', dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>        <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div>    </div>',
    'dxrd-scripts': '<div class="dxrd-scripts" data-bind="visible: editorVisible, template: \'dxrd-scripts-addon\'"></div>',
    'dxrd-navigation-panel-template': '<!-- ko ifnot: $root.isLoading() && tabs().length === 1-->    <!-- ko if: allowMDI -->    <!-- ko if: tabs().length > 0 -->    <!-- ko template: \'dxrd-navigation-panel-template-content\' -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->    <!-- ko ifnot: allowMDI -->    <!-- ko if: tabs().length > 1 -->    <!-- ko template: \'dxrd-navigation-panel-template-content\' -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->    <!-- /ko -->',
    'dxrd-navigation-panel-template-content': '<div class="dxrd-navigation-panel-wrapper" data-bind="style: { width: $root.surfaceSize() ? $root.surfaceSize() + \'px\' : \'auto\' }">        <div data-bind="dxTabs: { dataSource: tabs, selectedIndex: selectedIndex, showNavButtons: false }">            <div data-options="dxTemplate: { name: \'item\' }">                <!-- ko if: icon -->                <div class="dx-icon" data-bind="css: icon, event: { mousedown: function(e) { $parent.removeTab(e); } }"></div>                <!-- /ko -->                <div class="dx-tab-title-wrapper">                    <div class="dx-tab-title" data-bind="text: isDirty() ? displayName() + \'*\' : displayName(), title: displayName, style: { \'font-weight\': isDirty() ? \'bold\' : \'normal\' }"></div>                </div>            </div>        </div>    </div>',
    'dxrd-report-dialog-template': '<div class="dxrd-reportdialog dx-editors dx-widget" data-bind="dxPopup: {            showTitle: true,            width: width,            height: height,            title: $root.getLocalization(title),            visible: visible,            disabled: disabled,            toolbarItems: buttons,            showCloseButton: true,            container: container($element),            position: { of: container($element) }}">        <!-- ko template: { name: template, data: model } -->        <!-- /ko -->    </div>',
    'dxrd-report-dialog-converter-template': '<div class="dxrd-reportdialog dxrd-reportdialog-converter dx-editors dx-widget" data-bind="dxPopup: {            showTitle: true,            minWidth: 530,            height: 250,            width: \'auto\',            title: popupOptions.title,            visible: popupOptions.visible,            toolbarItems: popupOptions.buttons,            showCloseButton: true,            container: popupOptions.container($element),            position: { of: popupOptions.container($element) }}">        <div class="dxrd-reportdialog-converter-content">            <div class="dxrd-image-exlamation-icons" data-bind="template: \'dxrd-svg-wizard-warning\'"></div>            <div class="dxrd-reportdialog-content-text">                <div class="dxrd-reportdialog-content-confirm-message" data-bind="text: popupOptions.confirmMessage"></div>                <a class="dxrd-reportdialog-toggle-link dxd-hyperlink-color dxd-text-accented" data-bind="text: popupOptions.linkText, attr: {href: popupOptions.linkUrl, target: \'_blank\' }"></a>            </div>        </div>    </div>',
    'dxrd-savereport-dialog-content': '<div class="dxrd-reportdialog-content">        <div class="dx-fieldset">            <div class="dx-field dxd-back-primary">                <div data-bind="dxTextBox: { value: $data.reportName, height: 36, placeholder: reportNamePlaceholder(), valueChangeEvent: \'keyup\' }"></div>            </div>        </div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-reportdialog-urls" data-bind="dxList: { dataSource: urls, selectedItems: [], editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportName(e.itemData.Value); }, activeStateEnabled: false, noDataText: $data.noDataText, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\') }">                <div data-options="dxTemplate : { name: \'item\' }">                    <div data-bind="text: $data.Value"></div>                </div>            </div>        </div>    </div>',
    'dxrd-savereport-dialog-content-light': '<div class="dxrd-reportdialog-easy-content" data-bind="text: saveText"></div>',
    'dxrd-openreport-dialog-content': '<div class="dxrd-reportdialog-content">        <div class="dx-fieldset">            <div class="dx-field dxd-back-primary">                <div class="dx-property-grid-search-box" data-bind="dxTextBox: { mode: \'search\', height: 36, value: searchValue, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true }"></div>            </div>        </div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-reportdialog-urls" data-bind="dxList: { dataSource: urls, selectedItems: [], searchExpr: [\'Value\'], searchValue: searchValue, editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportUrl(e.itemData.Key); }, activeStateEnabled: false, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\'), noDataText: $data.noDataText }">                <div data-options="dxTemplate : { name: \'item\' }">                    <div data-bind="text: $data.Value"></div>                </div>            </div>        </div>    </div>',
    'dxrd-menubutton-template': '<div class="dxrd-menubutton-part" tabindex="1" style="outline:inherit" data-bind="cacheElement: { action: function(element){ $data.setMenuElement(element) } }">        <div class="dxrd-menu-container dxrd-menu-fullscreen-nav" data-bind="css: { \'dxrd-menu-fullscreen-nav-collapsed\': isMenuCollapsed()}">            <div class="dx-overlay-wrapper dxd-menu-back-color dxd-back-contrast" data-bind="styleunit: { width: $data.isMenuCollapsed() ? 50 : 300 }, visible: appMenuVisible">                <div class="dx-overlay-content">                    <div class="dxrd-report-menu-title dxd-border-primary">                        <!-- ko if: !isMenuCollapsed()-->                        <div class="dxrd-report-menu-button dxrd-report-menu-close-button" data-bind="template: \'dxrd-svg-toolbar-delete\', dxclick: function(e) { toggleAppMenu() }, dxpointerenter: function(_, e) {  e.target.classList &&  e.target.classList.add(\'dxd-state-active\') }, dxpointerleave: function(_, e) {  e.target.classList &&  e.target.classList.remove(\'dxd-state-active\') }"></div>                        <div class="dxrd-report-menu-title-text dxd-text-primary" data-bind="text: $root.getLocalization(\'Menu\', \'ASPxReportsStringId.ReportDesigner_Menu_Text\')"></div>                        <!-- /ko -->                        <!-- ko if: isMenuCollapsed-->                        <div class="dxrd-report-menu-button dxd-back-highlighted dxrd-report-menu-back-button" data-bind="template: \'dxrd-svg-menu-back\', dxclick: function(e) { isMenuCollapsed(false); }"></div>                        <!-- /ko -->                    </div>                    <!-- ko foreach: actionLists.menuItems -->                    <div class="dxrd-menu-item dxd-text-primary dxd-list-item-back-color dxd-back-highlighted" data-bind="dxclick: function(e) { if(disabled && !disabled() || !disabled) { $root.toggleAppMenu(); clickAction($root.model(), e); }}, css: { \'dxrd-disabled-button\': disabled, \'dxd-state-active\': $data.selected }, visible: visible">                        <div class="dxrd-menu-item-image" data-bind="css: ko.unwrap($data.imageClassName), template: {name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"> </div>                        <!-- ko if: !$root.isMenuCollapsed() -->                        <div class="dxrd-menu-item-text" data-bind="text: $data.displayText && $data.displayText() || text, attr: { title: $data.displayText && $data.displayText() || text}"></div>                        <div class="dxrd-menu-item-separator" data-bind="visible: $data.hasSeparator"></div>                        <!-- /ko -->                    </div>                    <!-- /ko -->                </div>            </div>        </div>        <div class="dxrd-menu-button dxd-toolbox-back-color dxd-border-primary dxd-back-primary2">            <div class="dxrd-menu-button-image dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="dxclick: function(e) { if(stopPropagation) { stopPropagation = false; } else { toggleAppMenu() } }, template: \'dxrd-svg-menu-menu\', css: {\'dxd-state-active\': appMenuVisible }"></div>            <div class="dxrd-menu-place" style="width:54px;"></div>        </div>    </div>',
    'dxrd-reportRtlProperty': '<!-- ko if: !!$root.surface() -->    <!-- ko template: { name: $root.dx.Analytics.Widgets.editorTemplates.combobox.header, data: $root.surface().wrapRtlProperty($data, $root.undoEngine, $element) } -->    <!-- /ko -->    <!-- /ko -->',
    'dxrd-drag-helper-source-reportexplorer': '<div class="dxrd-drag-helper-source-reportexplorer dxd-back-primary dxd-text-primary dxd-ghost-border-color dxd-border-accented">        <div class="dxrd-drag-helper-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}"> </div>        <div class="dxrd-drag-helper-treelist-text-wrapper">            <div class="dxrd-drag-helper-treelist-text" data-bind="text: text, attr: { title: text }"></div>        </div>    </div>',
    'dxrd-wizard-report-tree': '<div class="dxrd-wizard-report-tree">        <div class="dxrd-wizard-report-tree-title" data-bind="text: $root.getLocalization(\'Select the report\', \'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectReport\')"></div>        <div class="dxrd-wizard-report-tree-selectbox" data-bind="dxSelectBox: { dataSource: $data.items, itemTemplate: \'stateItem\', valueExpr: \'path\', displayExpr: \'name\', value: $data.value, dropDownOptions: { container: $root.getPopupContainer($element) } }">            <div data-options="dxTemplate:{ name:\'stateItem\' }" style="text-align: left;">                <div data-bind="text: name, styleunit: {marginLeft: 30 * level}"></div>            </div>        </div>    </div>',
    'dxrd-viewStyle': '<div data-bind="dxLocalizedSelectBox: { items: viewmodel.items, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxrd-reportSourceUrl': '<div data-bind="dxSelectBox: { items: getItems($root.reportUrls, $root.navigateByReports.currentTab), value: value, disabled: disabled, valueExpr: \'Key\', displayExpr: \'Value\', dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxrd-content-type': '<!-- ko if: value -->    <!-- ko with: value -->    <div data-bind="dxLocalizedSelectBox: { items: $parent.values, value: type, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: $parent.disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>    <!-- /ko -->    <!-- /ko -->',
    'dxrd-checkbox-style-combobox': '<div data-bind="dxLocalizedSelectBox: { dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: $data.validationRules || [] }">        <div class="dxrd-checkbox-style-combobox-item" data-options="dxTemplate: { name: \'item\' }">            <div class="dxrd-checkbox-style-combobox-item-icons" data-bind="foreach: [\'Unchecked\',\'Checked\',\'Indeterminate\']">                <!-- ko template: $parent.templateBinding(\'dxrd-svg-checkboxglyphs-\' + $parent.value + \'_\' + $data) -->                <!-- /ko -->            </div>            <span data-bind="text: $root.getLocalization(displayValue, localizationId), attr: { title: $root.getLocalization(displayValue, localizationId) }"></span>        </div>    </div>',
    'dxrd-datasource': '<div data-bind="dxSelectBox: getEditorOptions($root.dataSourceHelper, $root.undoEngine, $root.getPopupContainer($element))"></div>',
    'dxrd-bands': '<div data-bind="dxSelectBox: { items: generateValue($root.bands), value: value, displayExpr: \'displayName\', valueExpr: \'value\', displayCustomValue: true, disabled: disabled, placeholder: $root.getLocalization(\'(none)\', \'ChartStringId.WizNoBackImage\'), dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxrd-formattingRuleCollection': '<div class="dxrd-editor dxrd-formatting-rule-collection-editor" data-bind="visible: visible, styleunit: { \'marginLeft\' : padding }">        <div data-bind="dxCollectionEditor: options">            <div data-bind="dxdAccordion: { collapsed: collapsed }">                <div class="dxrd-group-header dx-accordion-header dxd-text-primary">                    <div class="dxrd-formatting-rule-checkbox" data-bind="dxCheckBox: { value: value().selected, disabled: editor.disabled }, dxclick: function(_, event) { event.stopPropagation(); }"></div>                    <div class="dxrd-formatting-rule-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }"></div>                    <div class="dxrd-formatting-rule-displayName">                        <div class="propertygrid-editor-displayName" data-bind="text: value().name, attr: { title: value().name }"></div>                    </div>                </div>                <div class="dx-accordion-content dxd-back-primary">                    <div data-bind="dxPropertyGrid: { target: value, editorsInfo: { editors: $root.dx.Reporting.Designer.Controls.Metadata.formattingRuleSerializationsInfo }, level: editor.level + 1, parentDisabled: editor.disabled }"></div>                </div>            </div>        </div>    </div>',
    'dxrd-fields-combobox': '<div data-bind="dxSelectBox: { dataSource: wrapValues($root.displayNameProvider), value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: $data.validationRules || [] }"></div>',
    'dxrd-style': '<div data-bind="dxSelectBox: new $root.dx.Reporting.Designer.Widgets.StylesEditorHeaderModel(value, $root.styles(), disabled, $root.getPopupContainer($element))"></div>',
    'dxrd-styleContent': '<!-- ko if: value-->    <div data-bind="dxStylesEditor: { styleName: value, styles: $root.styles() }"></div>    <!--/ko -->',
    'dxrd-dataBindings': ' ',
    'dxrd-dataBinding': '<!-- ko with: value -->    <!-- ko if: visible -->    <!-- ko displayNameExtender: { dataSource: dataSource, dataMember: displayExpr } -->    <div data-bind="dxFieldListPicker: {    acceptCustomValue: true,    displayValue: $displayName,    itemsProvider: $root.dataBindingsProvider(),    treeListController: $parent.treeListController,    value: $data.generateValue($root.undoEngine(), $root.dataSourceHelper(), $root.fieldListDataSources()),    disabled: $parent.disabled }"></div>    <!--/ko -->    <!--/ko -->    <!--/ko -->',
    'dxrd-chartValueBinding': '<div data-bind="dxFieldListPicker: {    acceptCustomValue: true,    displayValue: generateDisplayValue($root.reportDataSource),    itemsProvider: $root.reportDataBindingsProvider,    treeListController: treeListController,    value: generateValue($root.undoEngine(), $root.reportParameters, $root.reportDataSource),    disabled: disabled }"></div>',
    'dxrd-reportexplorer-editor': '<div data-bind="dxFieldListPicker: { acceptCustomValue: true, value: itemsProvider.selectedPath, displayValue: displayExpr, itemsProvider: itemsProvider, path: itemsProvider.path, disabled: disabled, treeListController: treeListController }"></div>',
    'dxrd-dataBindingsContent': '<div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div>',
    'dxrd-dataBindingContent': '<div class="dx-field dxd-back-primary">        <div class="dx-field-label dx-accordion-header dxd-text-primary" data-bind="styleunit: padding">            <div class="propertygrid-editor-displayName" data-bind="text: $root.getLocalization(\'Format String\', \'DevExpress.XtraReports.UI.XRBinding.FormatString\')"></div>        </div>        <div class="dx-field-value">            <!-- ko if: value() -->            <!-- ko with: value() -->            <!-- ko template: { name: \'dxrd-formatstring\', data: { value: $data.formatString, disabled: $data.disabled } } -->            <!-- /ko -->            <!-- /ko -->            <!-- /ko -->        </div>    </div>',
    'dxrd-scriptsbox': '<div data-bind="dxEventDropDownEditor: { items: $root.events, value: value, editEnabled: true, disabled: disabled, secondAction: function() { $root.gotoEvent && $root.gotoEvent($data.value(), name, $parents[1]._model && $parents[1]._model()); }, placeholder: $root.dx.Analytics.Internal.selectPlaceholder(), noDataText: $root.dx.Analytics.Internal.noDataText(), dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxrd-collection-item-group': '<div class="dx-field dxd-back-primary" data-bind="styleunit: { \'marginLeft\' : $parents[1].padding }">        <div class="dx-field-label dxd-text-primary">            <div class="propertygrid-editor-displayName" data-bind="text: $parents[1].options.info().getChildCaption(index()) + \':\'"></div>        </div>        <div class="dx-field-value">            <div class="dxrd-collectioneditor-action" data-bind="dxButtonWithTemplate: { onClick: value().changeSortOrder, icon: value().sortOrderClass().template, iconClass: value().sortOrderClass().class, disabled: editor.disabled }"></div>            <!-- ko displayNameExtender: { path: function() { return $data.editor._model() && $data.editor._model().getPath(\'groupFields\') || \'\' }, dataMember: value().fieldName } -->            <div class="dxrd-collectioneditor-picker" data-bind="dxFieldListPicker: {    displayValue: $displayName,    value: value().fieldName,    acceptCustomValue: true,    path: editor._model() && editor._model().getPath(\'groupFields\') || \'\',    itemsProvider: $root.dataBindingsProvider(),    treeListController: new $root.dx.Analytics.Widgets.Internal.TreeListController(),    disabled: editor.disabled}"></div>            <!--/ko -->        </div>    </div>',
    'dxrd-lookUpValues': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, addHandler: $root.dx.Reporting.Designer.Data.LookUpValue.createNew, undoEngine: $root.undoEngine, level: level, displayName: $root.getLocalization(displayName), info: info }">            <div data-bind="dxPropertyGrid: { target: $data.value, level: editor.level + 1 }"></div>        </div>    </div>',
    'dxrd-parameterContent': '<div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div>',
    'dxrd-calculatedFields': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.calculatedFieldsSource().createCalculatedField(\'\'); } }">        </div>    </div>',
    'dxrd-parameters': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function() { return $root.parameters().createParameter(); } }">        </div>    </div>',
    'dxrd-levelCollection': '<div class="dxrd-editor" data-bind="visible: visible">        <div data-bind="dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.dx.Reporting.Designer.Controls.TableOfContentsLevel.createNew(_model()); } }">        </div>    </div>',
    'dxrd-collectionItemWithAccordion': '<div class="dxrd-accordion-collection-item" data-bind="dxdAccordion: { collapsed: collapsed }">        <div class="dxrd-group-header dx-accordion-header dxd-text-primary">            <div data-bind="styleunit: {\'paddingLeft\': $parents[1].padding + $root.dx.Analytics.Widgets.Internal.propertiesGridEditorsPaddingLeft }">                <div class="propertygrid-editor-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }"></div>                <div class="dx-group-header-font dxd-text-primary" data-bind="text: $root.getLocalization($parent.name), attr: { title: $root.getLocalization($parent.name) }"></div>            </div>        </div>        <div class="dx-accordion-content dxd-back-primary">            <div data-bind="dxPropertyGrid: { target: value, level: editor.level + 2, parentDisabled: editor.disabled }"></div>        </div>    </div>',
    'dx-numeric-undo': '<div data-bind="dxNumberBox: getOptions({ value:generateValue($root.undoEngine), showSpinButtons:true, disabled:disabled }), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-objectEditorContentUndo': '<!-- ko if: visible -->    <div data-bind="template: { name: \'dx-propertieseditor\', data: generateValue($root.undoEngine) }"></div>    <!-- /ko -->',
    'dxrd-editOptionsEditorName': '<div data-bind="dxFieldListPicker: $data"></div>',
    'dxrd-editingField-editor-treelist-item': '<div class="dx-treelist-item dxd-list-item-back-color dxd-back-highlighted" data-bind="styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected }">        <div class="dx-treelist-caption">            <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected">                <div class="dx-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }"> </div>                <div class="dx-treelist-text-wrapper">                    <div class="dx-treelist-text" data-bind="text: text, attr: { title: data.title }"></div>                </div>            </div>        </div>    </div>',
    'dxrd-name': '<div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled }), dxValidator: { validationRules: generateRules($root.controlsHelper.allControls) || [] }"></div>',
    'dxrd-reportexpression': '<!-- ko if: visible -->    <!-- ko if: $data.patchOptions($root.reportExplorerProvider) -->    <div data-bind="dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.reportItemsProvider, displayNameProvider: $root.expressionDisplayNameProvider && $root.expressionDisplayNameProvider() })"></div>    <!-- /ko -->    <!-- /ko -->',
    'dxrd-pivotcriteria': '<!-- ko with: $data.wrapModel($root.fieldListProvider) -->    <div data-bind="dxFilterEditor: { options: value, fieldListProvider: itemsProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: displayNameProvider }"></div>    <!-- /ko -->',
    'dxrd-richtext-loadfile': '<div data-bind="dxFileImagePicker: { value: value, format: format, useFormat: true, placeholderId: \'File\', disabled: disabled, accept:\'.rtf,.docx,.txt,.htm,.html\' }"></div>',
    'dxrd-image-loadfile': '<div data-bind="dxImageSourceEditor: { value: value, accept: \'image/*\', type: \'img\', disabled: disabled }"></div>',
    'dxrd-summaryeditor-header': '<!-- ko template: \'dx-emptyHeader\' -->    <!-- /ko -->    <div class="dxrd-summaryeditor-popup" data-bind="dxPopup: {            showTitle: true,            width: \'350px\',            height: \'400px\',            title: $root.getLocalization(\'Summary Editor\'),            visible: $data.popup.visible,            toolbarItems: $data.popup.buttons,            showCloseButton: true,            container: $data.popup.container($element),            position: { of: $data.popup.container($element) }}">        <!-- ko template: { name: \'dx-propertieseditor\', data: $data.popup.grid } -->        <!-- /ko -->    </div>',
    'dxrd-page-colorScheme-content': '<div class="dxrd-page-color-scheme">        <!-- ko foreach: _lookupData.scheme -->        <div class="dxrd-page-color-scheme-tile" data-bind="click: function () { $parent._applyScheme($data); }, style: { backgroundColor: color }">            <div class="dxrd-page-color-scheme-tile-content">                <div class="dxrd-page-color-scheme-tile-selected dxd-border-accented" data-bind="visible: $data.selected()"></div>                <!-- ko ifnot: $data.name === \'Custom\' -->                <div class="dxrd-page-color-scheme-tile-content-title" data-bind="text: displayName"></div>                <!-- /ko -->                <!-- ko if: $data.name === \'Custom\' -->                <div class="dxrd-page-color-scheme-tile-content-custom">                    <div class="dxrd-page-color-scheme-tile-content-title" data-bind="text: displayName"></div>                    <div class="dxrd-page-color-scheme-tile-content-edit" data-bind="css: { \'dxrd-page-color-scheme-tile-content-edit-active\': $data.popoverVisible() }, click: function() { $data.popoverVisible(!$data.popoverVisible()) }">                        <div class="dxrd-page-color-scheme-tile-content-edit-icon" data-bind="template:\'dxrd-svg-color_gear\'"></div>                    </div>                </div>                <div class="dxrd-page-color-scheme-colorpicker" data-bind="dxPopover: {             visible: $data.popoverVisible,             width: \'auto\',             height: \'auto\',             container: $root.getPopupContainer($element),             target: \'.dxrd-page-color-scheme-tile-content-edit-icon\',             position: { my: \'left center\', at: \'right center\', collision: \'fit\', of: \'.dxrd-page-color-scheme-tile-content-edit\', boundary: $root.getPopupContainer($element) }             }">                    <div class="dxrd-page-color-scheme-colorpicker-editor-container dxd-border-secondary">                        <div data-bind="dxColorView: { value: editorColor, editAlphaChannel: true }"></div>                    </div>                    <div class="dxrd-page-color-scheme-colorpicker-buttons">                        <div class="dxrd-page-color-scheme-colorpicker-button" data-bind="dxButton: { text: \'Cancel\', onClick: function() { $data.resetColor() }}"></div>                        <div class="dxrd-page-color-scheme-colorpicker-button" data-bind="dxButton: { text: \'Ok\', onClick: function() { $data.applyColor() }}"></div>                    </div>                </div>                <!-- /ko -->            </div>        </div>        <!-- /ko -->    </div>',
    'dxrd-page-colorScheme': '<div class="dxrd-wizard-page">        <!-- ko template: \'dxrd-page-colorScheme-content\' -->        <!-- /ko -->    </div>',
    'dxrd-page-columns': '<div class="dxrd-wizard-page dxrd-wizard-columns-page">    <div class="dxrd-wizard-left-panel">        <div class="dxrd-wizard-list-title" data-bind="text: availableFields.caption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { items: availableFields.items, selectedItems: availableFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: availableFieldClick }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.availableFieldDblClick }">                    <div data-bind="text: displayName"></div>                </div>            </div>        </div>    </div>    <div class="dxrd-wizard-splitter">        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: select, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }" style="margin-top: 40px"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: selectAll, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveright_all\', iconClass: \'dxrd-image-moveright-all\' }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: unselect, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }" style="margin-top: 44px"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: unselectAll, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft_all\', iconClass: \'dxrd-image-moveleft-all\' }"></div>    </div>    <div class="dxrd-wizard-right-panel">        <div class="dxrd-wizard-list-title" data-bind="text: selectedFields.caption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { items: selectedFields.items, selectedItems: selectedFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: selectedFieldClick }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.selectedFieldDblClick }">                    <div data-bind="text: displayName"></div>                </div>            </div>        </div>    </div></div>',
    'dxrd-page-customizeLabel': '<div class="dxrd-wizard-page">    <div class="dxrd-wizard-customizelabel-page dxd-border-secondary">        <div class="dxrd-wizard-customizelabel-list">            <div class="dxrd-wizard-customizelabel-head-props">                <div class="dxrd-wizard-customizelabel-select-papersize">                    <span data-bind="text: $root.getLocalization(\'Page Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSize\'), attr: { title: $root.getLocalization(\'Page Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSize\') }"></span>                    <div data-bind="dxSelectBox: { items: _labelData.paperKinds, displayExpr: \'name\', value: _selectedPaperSize, itemTemplate: \'PaperSizeText\', dropDownOptions: { container: $root.getPopupContainer($element) },                             onOpened: function (e) {                                e.component._popup.option(\'width\', 300);                        }}, attr: { title: _selectedPaperSize().name + \' - \' + $root.dx.Reporting.Designer.Wizard.CustomizeLabelPage._getPageSizeText(_selectedPaperSize().width, _selectedPaperSize().height, _selectedPaperSize().unit)}">                        <div data-options="dxTemplate: { name: \'PaperSizeText\' }" class="dxrd-wizard-customizelabel-select-customtemplate">                            <p class="dxrd-wizard-customizelabel-select-template">                                <span data-bind="text: name"></span>                                <span data-bind="text: $root.dx.Reporting.Designer.Wizard.CustomizeLabelPage._getPageSizeText(width, height, unit)"></span>                            </p>                        </div>                    </div>                </div>                <div class="dxrd-wizard-customizelabel-radiounit">                    <div data-bind=\'dxRadioGroup:{items: _units, valueExpr: "value", value: unit, layout: "horizontal" }\'></div>                </div>                <div class="dxrd-wizard-customizelabel-pagesizetext"><span data-bind="text: _pageSizeText"></span></div>            </div>            <div class="dxrd-wizard-customizelabel-props-container">                <div class="dxrd-wizard-customizelabel-props">                    <div class="dxrd-wizard-customizelabel-pagesizetext-inline">                        <span data-bind="text: $root.getLocalization(\'Measure Units\', \'DevExpress.XtraReports.UI.XtraReport.ReportUnit\') + \':\', attr: { title: $root.getLocalization(\'Measure Units\', \'DevExpress.XtraReports.UI.XtraReport.ReportUnit\') + \':\' }"></span>                        <div data-bind="dxLocalizedSelectBox: { items: _units, valueExpr: \'value\', displayExpr: \'text\', value: unit, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Label Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth\'), attr: { title: $root.getLocalization(\'Label Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth\') }"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: labelWidth }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Label Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight\'), attr: { title: $root.getLocalization(\'Label Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight\') }"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: labelHeight }"></div>                    </div>                    <div class="dxrd-wizard-customizelabel-prop-whis-top-margin">                        <span data-bind="text: $root.getLocalization(\'Horizontal Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch\'), attr: { title: $root.getLocalization(\'Horizontal Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch\') }"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: horizontalPitch }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Vertical Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch\'), attr: { title: $root.getLocalization(\'Vertical Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch\') }"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: verticalPitch }"></div>                    </div>                    <div class="dxrd-wizard-customizelabel-prop-whis-top-margin">                        <span data-bind="text: $root.getLocalization(\'Top Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin\'), attr: { title: $root.getLocalization(\'Top Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin\') }"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: topMargin }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Left Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin\'), attr: { title: $root.getLocalization(\'Left Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin\') }"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: leftMargin }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Right Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin\'), attr: { title: $root.getLocalization(\'Right Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin\') }"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: rightMargin }"></div>                    </div>                    <div>                        <span data-bind="text: $root.getLocalization(\'Bottom Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin\'), attr: { title: $root.getLocalization(\'Bottom Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin\') }"></span>                        <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: bottomMargin }"></div>                    </div>                </div>                <div class="dxrd-wizard-customizelabel-pic dxd-border-secondary">                    <div class="dxrd-wizard-customizelabel-pic-element"></div>                </div>                <div class="dxrd-wizard-customizelabel-labelscounttext"><span data-bind="text: _labelsCountText"></span></div>            </div>        </div>    </div></div>',
    'dxrd-page-dataMember': '<div class="dxrd-wizard-page">    <div class="dxrd-wizard-dataMember dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: scrollViewHeight }">        <div data-bind="treelist: fieldListModel" style="width:100%; height: 100%;"></div>    </div></div>',
    'dxrd-page-groups': '<div class="dxrd-wizard-page dxrd-wizard-groups-page">    <div class="dxrd-wizard-left-panel">        <div class="dxrd-wizard-list-title" data-bind="text: fields.caption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { dataSource: fields.items, selectedItems: fields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: fieldClick, noDataText: $root.dx.Analytics.Internal.noDataText() }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.fieldDblClick }">                    <div data-bind="text: $data"></div>                </div>            </div>        </div>    </div>    <div class="dxrd-wizard-splitter">        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: addNewGroup, disabled: !isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\'  }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: appendFieldsToGroup, disabled: !isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: removeGroup, disabled: !isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }"></div>        <div class="dxrd-wizard-splitter-action" style="margin-top: 95px;" data-bind="dxButtonWithTemplate: { onClick: moveUp, disabled: !isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }"></div>        <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: moveDown, disabled: !isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }"></div>    </div>    <div class="dxrd-wizard-right-panel">        <div class="dxrd-wizard-list-title" data-bind="text: groups.caption"></div>        <div class="dx-default-border-style dxd-border-secondary">            <div class="dxrd-wizard-list" data-bind="dxList: { items: groups.items, height: 257, selectionMode: \'single\', selectedItems: groups.activeItemArray, activeStateEnabled: false, onItemClick: groupClick, noDataText: $root.dx.Analytics.Internal.noDataText() }">                <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.groupDblClick }">                    <div data-bind="text: fields().join(\', \')"></div>                </div>            </div>        </div>    </div></div>',
    'dxrd-page-masterdetail-groups-section': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-groups-page dxd-border-secondary">        <div class="dxrd-wizard-masterdetail-groups-page-section-content" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }">            <div class="dx-fieldset" data-bind="foreach: _groupInfos">                <div class="dx-field dxd-back-primary">                    <div class="dx-field-label" data-bind="text: displayName, attr: { \'title\': displayName}"></div>                </div>                <!-- ko foreach: groups -->                <div class="dxrd-wizard-groups-item dx-field">                    <div class="dxrd-wizard-groups-actions">                        <div class="dxd-back-highlighted" data-bind="css: { \'dxrd-disabled-button\': $parent.moveUpDisabled($index()) }, click: function(){ $parent.moveup($index()) }">                            <!-- ko template: \'dxrd-svg-operations-moveup\'--><!-- /ko -->                        </div>                        <div class="dxd-back-highlighted" data-bind="css: { \'dxrd-disabled-button\': $parent.moveDownDisabled($index()) }, click: function(){ $parent.movedown($index()) }">                            <!-- ko template: \'dxrd-svg-operations-movedown\'--><!-- /ko -->                        </div>                        <div class="dxd-back-highlighted" data-bind="click: function(){ $parent.remove($index()) }">                            <!-- ko template: \'dxrd-svg-operations-recycle_bin\'--><!-- /ko -->                        </div>                    </div>                    <div class="dxrd-wizard-groups-choozer">                        <!-- ko template: { name: "dxrd-multivalue", data: $data } -->                        <!--/ko-->                    </div>                </div>                <!-- /ko -->                <!-- ko if: isCreateGroupEnabled() -->                <div class="dxrd-wizard-groups-item dx-field">                    <div class="dx-field-label dxd-text-primary" style="width:auto">                        <div class="dxrd-wizard-groups-addgroup dxd-hyperlink-color dxd-border-accented dxd-text-accented" data-bind="text: $data.addGroupText(), attr: { \'title\': $data.addGroupText() }, click: function() { $data.add() }"></div>                    </div>                </div>                <!-- /ko -->            </div>        </div>    </div>',
    'dxrd-page-masterdetail-groups': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-groups-page">    <div class="dxrd-wizard-masterdetail-groups-page-title">        <!-- ko template: { name: \'dxrd-wizard-report-tree\', data: { items: $data._reportTree, value: $data._currentPath } }-->        <!-- /ko -->    </div>    <div class="dxrd-wizard-masterdetail-groups-page-content">        <div class="dxrd-wizard-left-panel">            <div class="dxrd-wizard-list-title" data-bind="text: _fieldCaption"></div>            <div class="dx-default-border-style dxd-border-secondary dxrd-wizard-panel-content">                <!-- ko if: $data._currentFields() -->                <div class="dxrd-wizard-list" data-bind="dxList: { items: _currentFields().items, selectedItems: _currentFields().activeItemArray, height: \'100%\', selectionMode: \'single\', activeStateEnabled: false, onItemClick: _fieldClick, noDataText: $root.dx.Analytics.Internal.noDataText() }">                    <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent._fieldDblClick }">                        <div data-bind="text: $data"></div>                    </div>                </div>                <!-- /ko -->            </div>        </div>        <div class="dxrd-wizard-splitter">            <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: _addNewGroup, disabled: !_isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }"></div>            <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: _appendFieldsToGroup, disabled: !_isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }"></div>            <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: _removeGroup, disabled: !_isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }"></div>            <div class="dxrd-wizard-splitter-action" style="margin-top: 83px;" data-bind="dxButtonWithTemplate: { onClick: _moveUp, disabled: !_isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }"></div>            <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: _moveDown, disabled: !_isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }"></div>        </div>        <div class="dxrd-wizard-right-panel">            <div class="dxrd-wizard-list-title" data-bind="text: _groupCaption"></div>            <div class="dx-default-border-style dxd-border-secondary dxrd-wizard-panel-content">                <!-- ko if: $data._currentGroups() -->                <div class="dxrd-wizard-list" data-bind="dxList: { items: _currentGroups().items, height: \'100%\', selectionMode: \'single\', selectedItems: _currentGroups().activeItemArray, activeStateEnabled: false, onItemClick: _groupClick, noDataText: $root.dx.Analytics.Internal.noDataText() }">                    <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent._groupDblClick }">                        <div data-bind="text: fields().join(\', \')"></div>                    </div>                </div>                <!-- /ko -->            </div>        </div>    </div></div>',
    'dxrd-page-masterdetail-select-reportdata': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-select-reportdata-page">        <!-- ko template: {name: \'dxrd-page-masterdetail-select-reportdata-dataMembers\', data: $data } -->        <!-- /ko -->        <!-- ko template: {name: \'dxrd-page-masterdetail-select-reportdata-fieldMembers\', data: $data } -->        <!-- /ko -->    </div>',
    'dxrd-page-masterdetail-select-reportdata-dataMembers': '<div class="dxrd-wizard-reportdata-column dx-first-column">        <div class="dxrd-wizard-reportdata-title" data-bind="text: _selectDataMembersCaption"></div>        <div class="dxrd-wizard-add-queries-page dxrd-wizard-masterdetail-dataMember dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'auto\' }">            <div data-bind="treelist: _dataMemberFieldListModel" style="width:100%; height: 100%;"></div>        </div>    </div>',
    'dxrd-page-masterdetail-select-reportdata-fieldMembers': '<div class="dxrd-wizard-reportdata-column">        <div class="dxrd-wizard-reportdata-title" data-bind="text: _selectDataFieldsCaption"></div>        <div class="dxrd-wizard-add-queries-page dxrd-wizard-masterdetail-fields dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'auto\' }">            <div data-bind="treelist: _fieldMemberFieldListModel" style="width:100%; height: 100%;"></div>        </div>    </div>',
    'dxrd-page-masterdetail-select-dataMembers': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-select-reportdata-page">        <!-- ko template: { name: "dxrd-page-masterdetail-select-reportdata-dataMembers", data: $data }-->        <!-- /ko -->    </div>',
    'dxrd-page-masterdetail-select-fieldMembers': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-select-reportdata-page">        <!-- ko template: { name: "dxrd-page-masterdetail-select-reportdata-fieldMembers", data: $data }-->        <!-- /ko -->    </div>',
    'dxrd-page-masterdetail-summary-section': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-summary-options-page">        <div class="dxrd-wizard-masterdetail-summary-options-content">            <div class="dxrd-wizard-list-container">                <div class="dxrd-wizard-list dx-default-border-style dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }">                    <div class="dxrd-wizard-summary-infos dxrd-wizard-summary-infos-paragraf dxd-border-secondary">                        <div class="dxrd-wizard-summary-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _fieldsCaption, attr:{\'title\': _fieldsCaption }"></div>                        <div class="dxrd-wizard-summary-infos-summaries dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _summaryFunctionCaption, attr:{\'title\': _summaryFunctionCaption }"></div>                        <div class="dxrd-wizard-summary-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary"></div>                    </div>                    <div data-bind="foreach: _summaryInfos">                        <div class="dxrd-wizard-summary-infos dxd-border-secondary">                            <div class="dxrd-wizard-summary-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary">                                <div data-bind="dxFieldListPicker: {                                     itemsProvider: $parent._fieldListProvider,                                     acceptCustomValue: false,                                     value: selectedPath,                                     displayValue: displayName,                                     placeholder: $root.dx.Analytics.Internal.selectPlaceholder()                                 }">                                </div>                            </div>                            <div class="dxrd-wizard-summary-infos-summaries dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary">                                <!-- ko template: { name: "dxrd-multivalue", data: $data } -->                                <!--/ko-->                            </div>                            <div class="dxrd-wizard-summary-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary">                                <div data-bind="dxButton: { icon: \'close\', onClick: function () { return $parent._removeSummaryInfo($data);  }}"></div>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <div class="dxrd-wizard-ignore-null-values" data-bind="dxCheckBox: { value: ignoreNullValues, text: _ignoreNullValuesCaption }"></div>    </div>',
    'dxrd-page-masterdetail-summary': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-summary-options-page">    <div class="dxrd-wizard-masterdetail-summary-options-title">        <!-- ko template: { name: \'dxrd-wizard-report-tree\', data: { items: $data._reportTree, value: $data._currentPath  } }-->        <!-- /ko -->    </div>    <div class="dxrd-wizard-masterdetail-summary-options-content">        <div class="dxrd-wizard-list-title" data-bind="text: _selectFieldToSummaryCaption"></div>        <div class="dxrd-wizard-list-container">            <div class="dxrd-wizard-list dx-default-border-style dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }">                <div class="dxrd-wizard-summary-infos dxrd-wizard-summary-infos-paragraf dxd-border-secondary">                    <div class="dxrd-wizard-summary-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _fieldsCaption"></div>                    <div class="dxrd-wizard-summary-infos-summaries dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _summaryFunctionCaption"></div>                    <div class="dxrd-wizard-summary-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary"></div>                </div>                <div data-bind="foreach: _summaryInfos">                    <div class="dxrd-wizard-summary-infos dxd-border-secondary">                        <div class="dxrd-wizard-summary-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary">                            <div data-bind="dxSelectBox: { dataSource: $parent._displayedFields[$parent._currentPath()], itemTemplate: \'visibleItems\', displayExpr: \'displayName\', value: field, placeholder: $root.dx.Analytics.Internal.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) } }">                                <div data-options="dxTemplate:{ name:\'visibleItems\' }" style="text-align: left;">                                    <!-- ko if: visible-->                                    <div data-bind="text: name"></div>                                    <!--/ko-->                                </div>                            </div>                        </div>                        <div class="dxrd-wizard-summary-infos-summaries dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary">                            <!-- ko template: { name: "dxrd-multivalue", data: $data } -->                            <!--/ko-->                        </div>                        <div class="dxrd-wizard-summary-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary">                            <div data-bind="dxButton: { icon: \'close\', onClick: function () { return $parent._removeSummaryInfo($data);  }}"></div>                        </div>                    </div>                </div>            </div>        </div>    </div>    <div class="dxrd-wizard-ignore-null-values" data-bind="dxCheckBox: { value: ignoreNullValues, text: _ignoreNullValuesCaption }"></div></div>',
    'dxrd-page-pageSetup': '<div class="dxrd-wizard-page dxrd-page-setup-page">        <!-- ko template: { name: \'dxrd-page-setup-page-preview\', data: $data }-->        <!-- /ko -->        <!-- ko template: { name: \'dxrd-page-setup-page-settings\', data: $data }-->        <!-- /ko -->    </div>',
    'dxrd-page-setup-page-preview': '<div class="dxrd-wizard-preview dxd-back-secondary">        <!-- ko with: $data.previewPageHelper -->        <div style="width:100%; height:100%; position:relative" data-bind="cacheElement: { action: function(element) { $data.cachePagePreviewElement(element); } }">            <div class="dxrd-wizard-preview-page" data-bind="styleunit: { width: $data.previewPageWidth(), height: $data.previewPageHeight() }">                <div class="dxrd-wizard-preview-margin-top" data-bind="styleunit: { top: $data.previewTopMargin() }"></div>                <div class="dxrd-wizard-preview-margin-right" data-bind="styleunit: { right: $data.previewRightMargin() }"></div>                <div class="dxrd-wizard-preview-margin-bottom" data-bind="styleunit: { bottom: $data.previewBottomMargin() }"></div>                <div class="dxrd-wizard-preview-margin-left" data-bind="styleunit: { left: $data.previewLeftMargin() }"></div>            </div>        </div>        <!-- /ko -->    </div>',
    'dxrd-page-setup-groups': '<div class="dxrd-page-setup-group">        <div class="dxrd-page-setup-group-caption dxd-back-primary" data-bind="text: $root.getLocalization(\'Paper\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Paper\')"></div>        <div class="dx-fieldset dxrd-page-setup-long-group">            <div class="dx-field">                <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size\'), attr: { \'title\': $root.getLocalization(\'Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size\') }"></div>                <div class="dx-field-value" data-bind="dxSelectBox: { items: lookupData.paperKind, valueExpr: \'value\', displayExpr: \'displayName\', value: paperKind, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>            </div>        </div>        <div class="dxrd-page-setup-setting">            <div class="dx-fieldset dxrd-group-fieldset dxrd-page-setup-short-group">                <div class="dx-field">                    <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Unit:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit\'), attr: { \'title\': $root.getLocalization(\'Unit:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit\') }"></div>                    <div class="dx-field-value" data-bind="dxSelectBox: { items: lookupData.unit, valueExpr: \'value\', displayExpr: \'displayName\', value: unit, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>                </div>                <div class="dx-field dxrd-page-setup-pagemode-compact">                    <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Orientation:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation\'), attr: { \'title\': $root.getLocalization(\'Orientation:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation\') }"></div>                    <div class="dx-field-value" data-bind="dxLocalizedSelectBox: { items: [ { value: true, displayName: \'Landscape\', localizationId: \'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape\'}, { value: false, displayName: \'Portrait\', localizationId:\'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait\' }], valueExpr: \'value\', displayExpr: \'displayName\', value: $data.landscape, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>                </div>                <div class="dx-field">                    <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\'), attr: { \'title\': $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\') }"></div>                    <div class="dx-field-value" data-bind="dxNumberBox: { value: width, disabled: fixedSize, format: valueFormat, min: 0 }"></div>                </div>                <div class="dx-field">                    <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\'), attr: { \'title\': $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\') }"></div>                    <div class="dx-field-value" data-bind="dxNumberBox: { value: height, disabled: fixedSize, format: valueFormat, min: 0 }"></div>                </div>            </div>            <div class="dxrd-group-fieldset dxrd-page-setup-pagemode">                <div class="dxrd-page-setup-landscape-item dxd-back-primary dxd-state-normal dxd-back-highlighted" style="margin-left: 0px" data-bind="css: { \'dxd-state-no-hover dxd-state-active\': !$data.landscape() }, click: function() { $data.landscape(false); }">                    <div class="dxrd-page-setup-landscape-item-icon" data-bind="template:\'dxrd-svg-portrait\'"></div>                </div>                <div class="dxrd-page-setup-landscape-item dxd-back-primary dxd-state-normal dxd-back-highlighted" data-bind="css: { \'dxd-state-no-hover dxd-state-active\': $data.landscape() }, click: function() { $data.landscape(true); }">                    <div class="dxrd-page-setup-landscape-item-icon" data-bind="template:\'dxrd-svg-landscape\'"></div>                </div>            </div>        </div>    </div>    <div class="dxrd-page-setup-group" style="margin-top: 16px;">        <div class="dxrd-page-setup-group-caption dxd-back-primary" data-bind="text: $root.getLocalization(\'Page Margins\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_PageMargins\')"></div>        <div class="dxrd-page-setup-setting dxrd-page-setup-setting-page-margins">            <div class="dx-fieldset dxrd-group-fieldset dxrd-group-fieldset-left">                <div class="dx-field">                    <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Left:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin\'), attr: { \'title\': $root.getLocalization(\'Left:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin\') }"></div>                    <div class="dx-field-value" data-bind="dxNumberBox: { value: marginLeft, format: valueFormat, min: 0, max: width() - marginRight() }"></div>                </div>                <div class="dx-field">                    <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Top:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin\'), attr: { \'title\': $root.getLocalization(\'Top:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin\') }"></div>                    <div class="dx-field-value" data-bind="dxNumberBox: { value: marginTop, format: valueFormat, min: 0, max: height() - marginBottom() }"></div>                </div>            </div>            <div class="dx-fieldset dxrd-group-fieldset dxrd-group-fieldset-right">                <div class="dx-field">                    <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Right:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin\'), attr: { \'title\': $root.getLocalization(\'Right:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin\') }"></div>                    <div class="dx-field-value" data-bind="dxNumberBox: { value: marginRight, format: valueFormat, min: 0, max: width() - marginLeft() }"></div>                </div>                <div class="dx-field">                    <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Bottom:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin\'), attr: { \'title\': $root.getLocalization(\'Bottom:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin\') }"></div>                    <div class="dx-field-value" data-bind="dxNumberBox: { value: marginBottom, format: valueFormat, min: 0, max: height() - marginTop()  }"></div>                </div>            </div>        </div>    </div>',
    'dxrd-page-setup-page-settings': '<div class="dxrd-page-setup-content">        <!-- ko template: { name: \'dxrd-page-setup-groups\', data: $data }-->        <!-- /ko -->    </div>',
    'dxrd-page-pageSetupAndColorScheme': '<div class="dxrd-wizard-page dxrd-page-setup-page">        <div class="dxrd-page-setup-content">            <!-- ko template: { name: \'dxrd-page-setup-groups\', data: $data._configureReportPageSettingsPage }-->            <!-- /ko -->            <!-- ko if: $data._colorSchemePageVisible -->            <div class="dxrd-page-setup-group dxrd-page-color-setup-group">                <div class="dxrd-page-setup-group-caption dxd-back-primary" data-bind="text: $root.getLocalization(\'Color Scheme\', \'ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme\')"></div>                <div class="dxrd-page-setup-setting">                    <!-- ko template: { name: \'dxrd-page-colorScheme-content\', data: $data._colorSchemePage } -->                    <!-- /ko -->                </div>            </div>            <!-- /ko -->        </div>    </div>',
    'dxrd-page-pageSetup-settings': '<div class="dxrd-wizard-page dxrd-page-setup-page">        <!-- ko template: { name: "dxrd-page-setup-page-settings", data: $data }-->        <!-- /ko -->    </div>',
    'dxrd-page-pageSetup-preview': '<div class="dxrd-wizard-page dxrd-page-setup-page">        <!-- ko template: { name: "dxrd-page-setup-page-colored-preview", data: $data }-->        <!-- /ko -->    </div>',
    'dxrd-page-setup-page-colored-preview': '<div class="dxrd-wizard-preview dxd-back-secondary">        <!-- ko if: $data._reportTitleVisible -->        <div class="dxrd-wizard-preview-reporttitle" data-bind="dxTextBox: { value: reportTitle, placeholder: _reportTitlePlaceholder() }, styleunit: { width: $data._previewPageHelper.previewPageWidth() }"></div>        <!-- /ko -->        <div class="dxrd-wizard-preview-pagecontainer" data-bind="cacheElement: { action: function(element) { $data._previewPageHelper.cachePagePreviewElement(element); } }">            <div class="dxrd-wizard-preview-page" data-bind="styleunit: { width: $data._previewPageHelper.previewPageWidth(), height: $data._previewPageHelper.previewPageHeight() }">                <div class="dxrd-wizard-preview-margin-top" data-bind="styleunit: { top: $data._previewPageHelper.previewTopMargin() }"></div>                <div class="dxrd-wizard-preview-margin-right" data-bind="styleunit: { right: $data._previewPageHelper.previewRightMargin() }"></div>                <div class="dxrd-wizard-preview-margin-bottom" data-bind="styleunit: { bottom: $data._previewPageHelper.previewBottomMargin() }"></div>                <div class="dxrd-wizard-preview-margin-left" data-bind="styleunit: { left: $data._previewPageHelper.previewLeftMargin() }"></div>                <div data-bind="styleunit: { top: $data._previewPageHelper.previewTopMargin(),  right: $data._previewPageHelper.previewRightMargin(),  bottom: $data._previewPageHelper.previewBottomMargin(),  left: $data._previewPageHelper.previewLeftMargin() }">                    <div class="dxrd-wizard-rows-container">                        <!-- ko foreach: _masterDetailInfo -->                        <div class="dxrd-wizard-preview-row">                            <!-- ko foreach: fields -->                            <div class="dxrd-wizard-preview-column" data-bind="style: {  backgroundColor: $parents[1]._color, width: 100/$parent.fields.length + \'%\', color: $parents[1]._foreColor }, text: displayName"></div>                            <!-- /ko -->                        </div>                        <div class="dxrd-wizard-preview-row">                            <!-- ko foreach: fields -->                            <div class="dxrd-wizard-preview-column" data-bind="style: { width: 100/$parent.fields.length + \'%\' }, text: \'[\' + name + \']\'"></div>                            <!-- /ko -->                        </div>                        <!-- /ko -->                    </div>                </div>            </div>        </div>    </div>',
    'dxrd-page-reportLayoutType': '<div class="dxrd-wizard-page dxrd-report-layout-type-page">    <div style="text-align: center">        <div class="dxrd-report-layout-type-items" data-bind="css: { \'dxrd-report-layout-type-five-items\': layoutTypeItems()[0].margin == 1 }">            <div>                <div data-bind="dxRadioGroup: { value: selectedPageOrientation, items: pageOrientationItems, layout: \'horizontal\' }">                    <div data-options="dxTemplate : { name: \'text\' }">                        <div data-bind="text: $data"></div>                    </div>                </div>            </div>            <!-- ko foreach: layoutTypeItems -->            <div class="dx-background-inheritor dxd-back-highlighted dxd-state-selected">                <div class="dxrd-report-layout-type-item dx-fontsize-reestablished dxd-list-item-back-color" data-bind="event: { click: $parent.layoutTypeItemClick }, css: { \'dxd-state-selected dxd-border-secondary dxd-back-secondary\': $parent.isSelected($data) }, style: { margin: \'0 \' + margin + \'px\' }">                    <div data-bind="attr: { class: imageClassName }"></div>                    <div data-bind="text: text" class="dxrd-report-layout-type-text"></div>                </div>            </div>            <!-- /ko -->            <div style="clear:both"></div>            <div data-bind="dxCheckBox: { value: fitFieldsToPage, text: $root.getLocalization(\'Adjust the field width so all fields fit onto a page\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AdjustFieldWidth\') }"></div>        </div>    </div></div>',
    'dxrd-page-reportStyle': '<div class="dxrd-wizard-page dxrd-wizard-report-style-page">    <div class="dxrd-wizard-report-style-image-container">        <div data-bind="attr: { class: selectedReportStyle().className }">            <div class="title" style="margin-bottom: 18px;" data-bind="text: $root.getLocalization(\'Title\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title\')"></div>            <div class="caption" style="margin-bottom: 4px;" data-bind="text: $root.getLocalization(\'Caption\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Caption\')"></div>            <div class="data" data-bind="text: $root.getLocalization(\'Data\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data\')"></div>        </div>    </div>    <div class="dxrd-wizard-report-style-items" data-bind="dxRadioGroup: { value: selectedReportStyle, items: reportStyleItems }">        <div data-options="dxTemplate : { name: \'item\' }">            <div data-bind="text: text"></div>        </div>    </div></div>',
    'dxrd-page-reportTitle': '<div style="width: 272px; position: relative; top: 38%; margin: 0 auto;">    <div style="margin-bottom: 5px;" data-bind="text: $root.getLocalization(\'Specify the report\\\'s title\', \'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyReportTitle\')"></div>    <div data-bind="dxTextBox: { value: reportTitle, width: 270 }"></div></div>',
    'dxrd-page-selectPredefinedLabels': '<div class="dxrd-wizard-page">    <div class="dxrd-wizard-selectlabelproduct-page dxd-border-secondary">        <div class="dxrd-wizard-selectlabelproduct-list">            <div class="dxrd-wizard-selectlabelproduct-list-label" data-bind="text: $root.getLocalization(\'Label Product:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelProduct\')"></div>            <div data-bind="dxSelectBox: { items: _labelData.labelProducts, displayExpr: \'name\', value: _selectedLabelProduct, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>            <div class="dxrd-wizard-selectlabelproduct-list-label" data-bind="text: $root.getLocalization(\'Product Number:\', \'ASPxReportsStringId.ReportDesigner_Wizard_ProductNumber\')"></div>            <div data-bind="dxSelectBox: { dataSource: _labelDetails, displayExpr: \'name\', value: _selectedLabelDetails, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>        </div>        <div class="dxrd-wizard-selectproduct-props">            <div>                <span data-bind="text: $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\')"></span>                <span data-bind="text: _width"></span>            </div>            <div>                <span data-bind="text: $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\')"></span>                <span data-bind="text: _height"></span>            </div>            <div>                <span data-bind="text: $root.getLocalization(\'Paper Type:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperType\')"></span>                <span data-bind="text: _paperType"></span>            </div>            <div>                <span data-bind="text: $root.getLocalization(\'Paper Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperSize\')"></span>                <span data-bind="text: _pageSizeText"></span>            </div>        </div>    </div></div>',
    'dxrd-page-summaryOptions': '<div class="dxrd-wizard-summary-options-page">    <div class="dxrd-wizard-summary-options-titles dxrd-wizard-dataMember dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary">        <div data-bind="text: $root.getLocalization(\'Average\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average\')"></div>        <div data-bind="text: $root.getLocalization(\'Count\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count\')"></div>        <div data-bind="text: $root.getLocalization(\'Max\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Max\')"></div>        <div data-bind="text: $root.getLocalization(\'Min\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Min\')"></div>        <div data-bind="text: $root.getLocalization(\'Sum\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum\')"></div>    </div>    <div class="dxrd-wizard-summary-content dxrd-wizard-dataMember dxd-border-secondary" data-bind="dxScrollView: { }">        <div class="dxrd-wizard-summary-columns dxd-border-secondary">            <!-- ko foreach: summaryOptions -->            <div class="dxrd-wizard-summary-column-name" data-bind="text: columnName, attr: { title: columnName }"></div>            <!-- /ko -->        </div>        <div class="dxrd-wizard-summary-options">            <!-- ko foreach: summaryOptions -->            <div class="dxrd-wizard-summary-options-values">                <div data-bind="dxCheckBox: { value: avg }"></div>                <div data-bind="dxCheckBox: { value: count }"></div>                <div data-bind="dxCheckBox: { value: max }"></div>                <div data-bind="dxCheckBox: { value: min }"></div>                <div data-bind="dxCheckBox: { value: sum }"></div>            </div>            <!-- /ko -->        </div>    </div>    <div class="dxrd-wizard-ignore-null-values" data-bind="dxCheckBox: { value: ignoreNullValues, text: $root.getLocalization(\'Ignore null values\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues\') }"></div></div>',
});